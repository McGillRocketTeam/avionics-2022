
f4_rtos_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000187e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000089c  08018998  08018998  00028998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019234  08019234  0003038c  2**0
                  CONTENTS
  4 .ARM          00000008  08019234  08019234  00029234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801923c  0801923c  0003038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801923c  0801923c  0002923c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019240  08019240  00029240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000038c  20000000  08019244  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003038c  2**0
                  CONTENTS
 10 .bss          0000c87c  20000390  20000390  00030390  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000cc0c  2000cc0c  00030390  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003038c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00057323  00000000  00000000  000303bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007f69  00000000  00000000  000876df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003390  00000000  00000000  0008f648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000030d0  00000000  00000000  000929d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e809  00000000  00000000  00095aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00039737  00000000  00000000  000c42b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001082e2  00000000  00000000  000fd9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00205cca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f220  00000000  00000000  00205d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000390 	.word	0x20000390
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801897c 	.word	0x0801897c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000394 	.word	0x20000394
 80001ec:	0801897c 	.word	0x0801897c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <lsm6dsl_init+0xc8>)
 8001016:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <lsm6dsl_init+0xcc>)
 800101a:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <lsm6dsl_init+0xd0>)
 800101e:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001020:	200a      	movs	r0, #10
 8001022:	f000 fa13 	bl	800144c <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	492d      	ldr	r1, [pc, #180]	; (80010e0 <lsm6dsl_init+0xd4>)
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fd71 	bl	8001b14 <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <lsm6dsl_init+0xd4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b6a      	cmp	r3, #106	; 0x6a
 8001038:	d005      	beq.n	8001046 <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2102      	movs	r1, #2
 800103e:	4829      	ldr	r0, [pc, #164]	; (80010e4 <lsm6dsl_init+0xd8>)
 8001040:	f003 fe5a 	bl	8004cf8 <HAL_GPIO_WritePin>
		__BKPT();
 8001044:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2101      	movs	r1, #1
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fd72 	bl	8001b36 <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4924      	ldr	r1, [pc, #144]	; (80010e8 <lsm6dsl_init+0xdc>)
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fd92 	bl	8001b82 <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <lsm6dsl_init+0xdc>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f5      	bne.n	8001052 <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	2101      	movs	r1, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fc63 	bl	8001938 <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	2104      	movs	r1, #4
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fbeb 	bl	8001854 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2104      	movs	r1, #4
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fc31 	bl	80018ec <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	2103      	movs	r1, #3
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fbb9 	bl	8001808 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2106      	movs	r1, #6
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fbff 	bl	80018a0 <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	2111      	movs	r1, #17
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fd83 	bl	8001bb4 <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	21a8      	movs	r1, #168	; 0xa8
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fdb4 	bl	8001c22 <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	461c      	mov	r4, r3
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	371c      	adds	r7, #28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd90      	pop	{r4, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	08001365 	.word	0x08001365
 80010d8:	0800139f 	.word	0x0800139f
 80010dc:	20009edc 	.word	0x20009edc
 80010e0:	200003bc 	.word	0x200003bc
 80010e4:	40020800 	.word	0x40020800
 80010e8:	200003bd 	.word	0x200003bd

080010ec <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsl, float *acceleration_mg){
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	1d3c      	adds	r4, r7, #4
 80010f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010f8:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsl_xl_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 80010fa:	f107 0217 	add.w	r2, r7, #23
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f000 fc3e 	bl	8001984 <lsm6dsl_xl_flag_data_ready_get>

	if (reg) {
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d02d      	beq.n	800116a <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800110e:	2206      	movs	r2, #6
 8001110:	2100      	movs	r1, #0
 8001112:	4818      	ldr	r0, [pc, #96]	; (8001174 <get_acceleration+0x88>)
 8001114:	f013 f85e 	bl	80141d4 <memset>
	  lsm6dsl_acceleration_raw_get(&dev_ctx_lsm6dsl, data_raw_acceleration);
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	4916      	ldr	r1, [pc, #88]	; (8001174 <get_acceleration+0x88>)
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fcae 	bl	8001a7e <lsm6dsl_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[0]);
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <get_acceleration+0x88>)
 8001124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fb3d 	bl	80017a8 <lsm6dsl_from_fs8g_to_mg>
 800112e:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <get_acceleration+0x88>)
 800113a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001142:	4610      	mov	r0, r2
 8001144:	f000 fb30 	bl	80017a8 <lsm6dsl_from_fs8g_to_mg>
 8001148:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 800114c:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <get_acceleration+0x88>)
 8001152:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 800115c:	4610      	mov	r0, r2
 800115e:	f000 fb23 	bl	80017a8 <lsm6dsl_from_fs8g_to_mg>
 8001162:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 8001166:	edc4 7a00 	vstr	s15, [r4]
	}

}
 800116a:	bf00      	nop
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd90      	pop	{r4, r7, pc}
 8001172:	bf00      	nop
 8001174:	200003ac 	.word	0x200003ac

08001178 <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsl, float *angular_rate_mdps){
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	1d3c      	adds	r4, r7, #4
 8001180:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001184:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsl_gy_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001186:	f107 0217 	add.w	r2, r7, #23
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fc11 	bl	80019b6 <lsm6dsl_gy_flag_data_ready_get>

	if (reg) {
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d02d      	beq.n	80011f6 <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800119a:	2206      	movs	r2, #6
 800119c:	2100      	movs	r1, #0
 800119e:	4818      	ldr	r0, [pc, #96]	; (8001200 <get_angvelocity+0x88>)
 80011a0:	f013 f818 	bl	80141d4 <memset>
	  lsm6dsl_angular_rate_raw_get(&dev_ctx_lsm6dsl, data_raw_angular_rate);
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4916      	ldr	r1, [pc, #88]	; (8001200 <get_angvelocity+0x88>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 fc1d 	bl	80019e8 <lsm6dsl_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <get_angvelocity+0x88>)
 80011b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fb0f 	bl	80017d8 <lsm6dsl_from_fs2000dps_to_mdps>
 80011ba:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <get_angvelocity+0x88>)
 80011c6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80011ce:	4610      	mov	r0, r2
 80011d0:	f000 fb02 	bl	80017d8 <lsm6dsl_from_fs2000dps_to_mdps>
 80011d4:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 80011d8:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <get_angvelocity+0x88>)
 80011de:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80011e8:	4610      	mov	r0, r2
 80011ea:	f000 faf5 	bl	80017d8 <lsm6dsl_from_fs2000dps_to_mdps>
 80011ee:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 80011f2:	edc4 7a00 	vstr	s15, [r4]
	}
}
 80011f6:	bf00      	nop
 80011f8:	371c      	adds	r7, #28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}
 80011fe:	bf00      	nop
 8001200:	200003b4 	.word	0x200003b4

08001204 <lps22hh_init>:

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 800120c:	4b22      	ldr	r3, [pc, #136]	; (8001298 <lps22hh_init+0x94>)
 800120e:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <lps22hh_init+0x98>)
 8001212:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <lps22hh_init+0x9c>)
 8001216:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001218:	200a      	movs	r0, #10
 800121a:	f000 f917 	bl	800144c <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <lps22hh_init+0xa0>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	491e      	ldr	r1, [pc, #120]	; (80012a4 <lps22hh_init+0xa0>)
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fa3c 	bl	80016a8 <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <lps22hh_init+0xa0>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2bb3      	cmp	r3, #179	; 0xb3
 8001236:	d007      	beq.n	8001248 <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	2104      	movs	r1, #4
 800123c:	481a      	ldr	r0, [pc, #104]	; (80012a8 <lps22hh_init+0xa4>)
 800123e:	f003 fd5b 	bl	8004cf8 <HAL_GPIO_WritePin>
		__BKPT();
 8001242:	be00      	bkpt	0x0000
		Error_Handler();
 8001244:	f001 fb60 	bl	8002908 <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2101      	movs	r1, #1
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fa3b 	bl	80016ca <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	4914      	ldr	r1, [pc, #80]	; (80012ac <lps22hh_init+0xa8>)
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fa5b 	bl	8001716 <lps22hh_reset_get>
	} while (rst_lps22hh);
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <lps22hh_init+0xa8>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1f5      	bne.n	8001254 <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2101      	movs	r1, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f95a 	bl	8001528 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_75_Hz_LOW_NOISE);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2115      	movs	r1, #21
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f97a 	bl	8001574 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	461c      	mov	r4, r3
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800128c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd90      	pop	{r4, r7, pc}
 8001298:	080013d9 	.word	0x080013d9
 800129c:	08001413 	.word	0x08001413
 80012a0:	20009edc 	.word	0x20009edc
 80012a4:	200003c4 	.word	0x200003c4
 80012a8:	40020800 	.word	0x40020800
 80012ac:	200003c5 	.word	0x200003c5

080012b0 <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	1d3c      	adds	r4, r7, #4
 80012b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012bc:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80012be:	f107 0214 	add.w	r2, r7, #20
 80012c2:	1d38      	adds	r0, r7, #4
 80012c4:	2301      	movs	r3, #1
 80012c6:	2127      	movs	r1, #39	; 0x27
 80012c8:	f000 f8cb 	bl	8001462 <lps22hh_read_reg>

	if (reg.status.p_da) {
 80012cc:	7d3b      	ldrb	r3, [r7, #20]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d011      	beq.n	80012fc <get_pressure+0x4c>
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <get_pressure+0x54>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4908      	ldr	r1, [pc, #32]	; (8001304 <get_pressure+0x54>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f994 	bl	8001610 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <get_pressure+0x54>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f8e9 	bl	80014c4 <lps22hh_from_lsb_to_hpa>
 80012f2:	eef0 7a40 	vmov.f32	s15, s0
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80012fc:	bf00      	nop
 80012fe:	371c      	adds	r7, #28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd90      	pop	{r4, r7, pc}
 8001304:	200003c0 	.word	0x200003c0

08001308 <get_temperature>:

void get_temperature(stmdev_ctx_t dev_ctx_lps22hh, float *temperature){
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	1d3c      	adds	r4, r7, #4
 8001310:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001314:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8001316:	f107 0214 	add.w	r2, r7, #20
 800131a:	1d38      	adds	r0, r7, #4
 800131c:	2301      	movs	r3, #1
 800131e:	2127      	movs	r1, #39	; 0x27
 8001320:	f000 f89f 	bl	8001462 <lps22hh_read_reg>

	if (reg.status.t_da) {
 8001324:	7d3b      	ldrb	r3, [r7, #20]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d012      	beq.n	8001356 <get_temperature+0x4e>
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <get_temperature+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	801a      	strh	r2, [r3, #0]
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&dev_ctx_lps22hh, &data_raw_temperature);
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4909      	ldr	r1, [pc, #36]	; (8001360 <get_temperature+0x58>)
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f991 	bl	8001662 <lps22hh_temperature_raw_get>
	  *temperature = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <get_temperature+0x58>)
 8001342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f8d4 	bl	80014f4 <lps22hh_from_lsb_to_celsius>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001356:	bf00      	nop
 8001358:	371c      	adds	r7, #28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd90      	pop	{r4, r7, pc}
 800135e:	bf00      	nop
 8001360:	200003ba 	.word	0x200003ba

08001364 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af04      	add	r7, sp, #16
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	461a      	mov	r2, r3
 8001370:	460b      	mov	r3, r1
 8001372:	72fb      	strb	r3, [r7, #11]
 8001374:	4613      	mov	r3, r2
 8001376:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 8001378:	7afb      	ldrb	r3, [r7, #11]
 800137a:	b29a      	uxth	r2, r3
 800137c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	893b      	ldrh	r3, [r7, #8]
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	21d5      	movs	r1, #213	; 0xd5
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f003 fe34 	bl	8004ffc <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b088      	sub	sp, #32
 80013a2:	af04      	add	r7, sp, #16
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	461a      	mov	r2, r3
 80013aa:	460b      	mov	r3, r1
 80013ac:	72fb      	strb	r3, [r7, #11]
 80013ae:	4613      	mov	r3, r2
 80013b0:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 80013b2:	7afb      	ldrb	r3, [r7, #11]
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ba:	9302      	str	r3, [sp, #8]
 80013bc:	893b      	ldrh	r3, [r7, #8]
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2301      	movs	r3, #1
 80013c6:	21d5      	movs	r1, #213	; 0xd5
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f003 ff11 	bl	80051f0 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af04      	add	r7, sp, #16
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	461a      	mov	r2, r3
 80013e4:	460b      	mov	r3, r1
 80013e6:	72fb      	strb	r3, [r7, #11]
 80013e8:	4613      	mov	r3, r2
 80013ea:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 80013ec:	7afb      	ldrb	r3, [r7, #11]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	893b      	ldrh	r3, [r7, #8]
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	21b9      	movs	r1, #185	; 0xb9
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f003 fdfa 	bl	8004ffc <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b088      	sub	sp, #32
 8001416:	af04      	add	r7, sp, #16
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	461a      	mov	r2, r3
 800141e:	460b      	mov	r3, r1
 8001420:	72fb      	strb	r3, [r7, #11]
 8001422:	4613      	mov	r3, r2
 8001424:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 8001426:	7afb      	ldrb	r3, [r7, #11]
 8001428:	b29a      	uxth	r2, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	893b      	ldrh	r3, [r7, #8]
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	21b9      	movs	r1, #185	; 0xb9
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f003 fed7 	bl	80051f0 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f002 ff13 	bl	8004280 <HAL_Delay>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001462:	b590      	push	{r4, r7, lr}
 8001464:	b087      	sub	sp, #28
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	461a      	mov	r2, r3
 800146e:	460b      	mov	r3, r1
 8001470:	72fb      	strb	r3, [r7, #11]
 8001472:	4613      	mov	r3, r2
 8001474:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	685c      	ldr	r4, [r3, #4]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6898      	ldr	r0, [r3, #8]
 800147e:	893b      	ldrh	r3, [r7, #8]
 8001480:	7af9      	ldrb	r1, [r7, #11]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	47a0      	blx	r4
 8001486:	6178      	str	r0, [r7, #20]

  return ret;
 8001488:	697b      	ldr	r3, [r7, #20]
}
 800148a:	4618      	mov	r0, r3
 800148c:	371c      	adds	r7, #28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}

08001492 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001492:	b590      	push	{r4, r7, lr}
 8001494:	b087      	sub	sp, #28
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	461a      	mov	r2, r3
 800149e:	460b      	mov	r3, r1
 80014a0:	72fb      	strb	r3, [r7, #11]
 80014a2:	4613      	mov	r3, r2
 80014a4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681c      	ldr	r4, [r3, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6898      	ldr	r0, [r3, #8]
 80014ae:	893b      	ldrh	r3, [r7, #8]
 80014b0:	7af9      	ldrb	r1, [r7, #11]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	47a0      	blx	r4
 80014b6:	6178      	str	r0, [r7, #20]

  return ret;
 80014b8:	697b      	ldr	r3, [r7, #20]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	371c      	adds	r7, #28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd90      	pop	{r4, r7, pc}
	...

080014c4 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014f0 <lps22hh_from_lsb_to_hpa+0x2c>
 80014da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014de:	eef0 7a66 	vmov.f32	s15, s13
}
 80014e2:	eeb0 0a67 	vmov.f32	s0, s15
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	49800000 	.word	0x49800000

080014f4 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001524 <lps22hh_from_lsb_to_celsius+0x30>
 800150e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001512:	eef0 7a66 	vmov.f32	s15, s13
}
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	42c80000 	.word	0x42c80000

08001528 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001534:	f107 0208 	add.w	r2, r7, #8
 8001538:	2301      	movs	r3, #1
 800153a:	2110      	movs	r1, #16
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff90 	bl	8001462 <lps22hh_read_reg>
 8001542:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10f      	bne.n	800156a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	7a3b      	ldrb	r3, [r7, #8]
 8001554:	f362 0341 	bfi	r3, r2, #1, #1
 8001558:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800155a:	f107 0208 	add.w	r2, r7, #8
 800155e:	2301      	movs	r3, #1
 8001560:	2110      	movs	r1, #16
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ff95 	bl	8001492 <lps22hh_write_reg>
 8001568:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001580:	f107 0210 	add.w	r2, r7, #16
 8001584:	2301      	movs	r3, #1
 8001586:	2110      	movs	r1, #16
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff6a 	bl	8001462 <lps22hh_read_reg>
 800158e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d107      	bne.n	80015a6 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001596:	f107 020c 	add.w	r2, r7, #12
 800159a:	2301      	movs	r3, #1
 800159c:	2111      	movs	r1, #17
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ff5f 	bl	8001462 <lps22hh_read_reg>
 80015a4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10f      	bne.n	80015cc <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	7c3b      	ldrb	r3, [r7, #16]
 80015b6:	f362 1306 	bfi	r3, r2, #4, #3
 80015ba:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80015bc:	f107 0210 	add.w	r2, r7, #16
 80015c0:	2301      	movs	r3, #1
 80015c2:	2110      	movs	r1, #16
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff64 	bl	8001492 <lps22hh_write_reg>
 80015ca:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d119      	bne.n	8001606 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	7b3b      	ldrb	r3, [r7, #12]
 80015de:	f362 0341 	bfi	r3, r2, #1, #1
 80015e2:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	08db      	lsrs	r3, r3, #3
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	7b3b      	ldrb	r3, [r7, #12]
 80015f0:	f362 0300 	bfi	r3, r2, #0, #1
 80015f4:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80015f6:	f107 020c 	add.w	r2, r7, #12
 80015fa:	2301      	movs	r3, #1
 80015fc:	2111      	movs	r1, #17
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff47 	bl	8001492 <lps22hh_write_reg>
 8001604:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001606:	697b      	ldr	r3, [r7, #20]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800161a:	f107 0208 	add.w	r2, r7, #8
 800161e:	2303      	movs	r3, #3
 8001620:	2128      	movs	r1, #40	; 0x28
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff1d 	bl	8001462 <lps22hh_read_reg>
 8001628:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800162a:	7abb      	ldrb	r3, [r7, #10]
 800162c:	461a      	mov	r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	7a7a      	ldrb	r2, [r7, #9]
 800163a:	441a      	add	r2, r3
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	7a3a      	ldrb	r2, [r7, #8]
 8001648:	441a      	add	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	021a      	lsls	r2, r3, #8
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	601a      	str	r2, [r3, #0]

  return ret;
 8001658:	68fb      	ldr	r3, [r7, #12]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 800166c:	f107 0208 	add.w	r2, r7, #8
 8001670:	2302      	movs	r3, #2
 8001672:	212b      	movs	r1, #43	; 0x2b
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fef4 	bl	8001462 <lps22hh_read_reg>
 800167a:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 800167c:	7a7b      	ldrb	r3, [r7, #9]
 800167e:	b21a      	sxth	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168a:	b29b      	uxth	r3, r3
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b29a      	uxth	r2, r3
 8001690:	7a3b      	ldrb	r3, [r7, #8]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4413      	add	r3, r2
 8001696:	b29b      	uxth	r3, r3
 8001698:	b21a      	sxth	r2, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	801a      	strh	r2, [r3, #0]

  return ret;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80016b2:	2301      	movs	r3, #1
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	210f      	movs	r1, #15
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fed2 	bl	8001462 <lps22hh_read_reg>
 80016be:	60f8      	str	r0, [r7, #12]

  return ret;
 80016c0:	68fb      	ldr	r3, [r7, #12]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	460b      	mov	r3, r1
 80016d4:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80016d6:	f107 0208 	add.w	r2, r7, #8
 80016da:	2301      	movs	r3, #1
 80016dc:	2111      	movs	r1, #17
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff febf 	bl	8001462 <lps22hh_read_reg>
 80016e4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10f      	bne.n	800170c <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	7a3b      	ldrb	r3, [r7, #8]
 80016f6:	f362 0382 	bfi	r3, r2, #2, #1
 80016fa:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80016fc:	f107 0208 	add.w	r2, r7, #8
 8001700:	2301      	movs	r3, #1
 8001702:	2111      	movs	r1, #17
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fec4 	bl	8001492 <lps22hh_write_reg>
 800170a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800170c:	68fb      	ldr	r3, [r7, #12]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001720:	f107 0208 	add.w	r2, r7, #8
 8001724:	2301      	movs	r3, #1
 8001726:	2111      	movs	r1, #17
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fe9a 	bl	8001462 <lps22hh_read_reg>
 800172e:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8001730:	7a3b      	ldrb	r3, [r7, #8]
 8001732:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	701a      	strb	r2, [r3, #0]

  return ret;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	461a      	mov	r2, r3
 8001754:	460b      	mov	r3, r1
 8001756:	72fb      	strb	r3, [r7, #11]
 8001758:	4613      	mov	r3, r2
 800175a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	685c      	ldr	r4, [r3, #4]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6898      	ldr	r0, [r3, #8]
 8001764:	893b      	ldrh	r3, [r7, #8]
 8001766:	7af9      	ldrb	r1, [r7, #11]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	47a0      	blx	r4
 800176c:	6178      	str	r0, [r7, #20]

  return ret;
 800176e:	697b      	ldr	r3, [r7, #20]
}
 8001770:	4618      	mov	r0, r3
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd90      	pop	{r4, r7, pc}

08001778 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	461a      	mov	r2, r3
 8001784:	460b      	mov	r3, r1
 8001786:	72fb      	strb	r3, [r7, #11]
 8001788:	4613      	mov	r3, r2
 800178a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681c      	ldr	r4, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6898      	ldr	r0, [r3, #8]
 8001794:	893b      	ldrh	r3, [r7, #8]
 8001796:	7af9      	ldrb	r1, [r7, #11]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	47a0      	blx	r4
 800179c:	6178      	str	r0, [r7, #20]

  return ret;
 800179e:	697b      	ldr	r3, [r7, #20]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd90      	pop	{r4, r7, pc}

080017a8 <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 80017b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017be:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80017d4 <lsm6dsl_from_fs8g_to_mg+0x2c>
 80017c2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80017c6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	3e79db23 	.word	0x3e79db23

080017d8 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80017e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ee:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001804 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 80017f2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80017f6:	eeb0 0a67 	vmov.f32	s0, s15
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	428c0000 	.word	0x428c0000

08001808 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001814:	f107 0208 	add.w	r2, r7, #8
 8001818:	2301      	movs	r3, #1
 800181a:	2110      	movs	r1, #16
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff93 	bl	8001748 <lsm6dsl_read_reg>
 8001822:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10f      	bne.n	800184a <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	b2da      	uxtb	r2, r3
 8001832:	7a3b      	ldrb	r3, [r7, #8]
 8001834:	f362 0383 	bfi	r3, r2, #2, #2
 8001838:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800183a:	f107 0208 	add.w	r2, r7, #8
 800183e:	2301      	movs	r3, #1
 8001840:	2110      	movs	r1, #16
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ff98 	bl	8001778 <lsm6dsl_write_reg>
 8001848:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001860:	f107 0208 	add.w	r2, r7, #8
 8001864:	2301      	movs	r3, #1
 8001866:	2110      	movs	r1, #16
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff6d 	bl	8001748 <lsm6dsl_read_reg>
 800186e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10f      	bne.n	8001896 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	b2da      	uxtb	r2, r3
 800187e:	7a3b      	ldrb	r3, [r7, #8]
 8001880:	f362 1307 	bfi	r3, r2, #4, #4
 8001884:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001886:	f107 0208 	add.w	r2, r7, #8
 800188a:	2301      	movs	r3, #1
 800188c:	2110      	movs	r1, #16
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ff72 	bl	8001778 <lsm6dsl_write_reg>
 8001894:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80018ac:	f107 0208 	add.w	r2, r7, #8
 80018b0:	2301      	movs	r3, #1
 80018b2:	2111      	movs	r1, #17
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff47 	bl	8001748 <lsm6dsl_read_reg>
 80018ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10f      	bne.n	80018e2 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	7a3b      	ldrb	r3, [r7, #8]
 80018cc:	f362 0343 	bfi	r3, r2, #1, #3
 80018d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80018d2:	f107 0208 	add.w	r2, r7, #8
 80018d6:	2301      	movs	r3, #1
 80018d8:	2111      	movs	r1, #17
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ff4c 	bl	8001778 <lsm6dsl_write_reg>
 80018e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80018f8:	f107 0208 	add.w	r2, r7, #8
 80018fc:	2301      	movs	r3, #1
 80018fe:	2111      	movs	r1, #17
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff21 	bl	8001748 <lsm6dsl_read_reg>
 8001906:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10f      	bne.n	800192e <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	b2da      	uxtb	r2, r3
 8001916:	7a3b      	ldrb	r3, [r7, #8]
 8001918:	f362 1307 	bfi	r3, r2, #4, #4
 800191c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800191e:	f107 0208 	add.w	r2, r7, #8
 8001922:	2301      	movs	r3, #1
 8001924:	2111      	movs	r1, #17
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ff26 	bl	8001778 <lsm6dsl_write_reg>
 800192c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800192e:	68fb      	ldr	r3, [r7, #12]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001944:	f107 0208 	add.w	r2, r7, #8
 8001948:	2301      	movs	r3, #1
 800194a:	2112      	movs	r1, #18
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fefb 	bl	8001748 <lsm6dsl_read_reg>
 8001952:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10f      	bne.n	800197a <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	b2da      	uxtb	r2, r3
 8001962:	7a3b      	ldrb	r3, [r7, #8]
 8001964:	f362 1386 	bfi	r3, r2, #6, #1
 8001968:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800196a:	f107 0208 	add.w	r2, r7, #8
 800196e:	2301      	movs	r3, #1
 8001970:	2112      	movs	r1, #18
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ff00 	bl	8001778 <lsm6dsl_write_reg>
 8001978:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <lsm6dsl_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 800198e:	f107 0208 	add.w	r2, r7, #8
 8001992:	2301      	movs	r3, #1
 8001994:	211e      	movs	r1, #30
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff fed6 	bl	8001748 <lsm6dsl_read_reg>
 800199c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 800199e:	7a3b      	ldrb	r3, [r7, #8]
 80019a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	701a      	strb	r2, [r3, #0]

  return ret;
 80019ac:	68fb      	ldr	r3, [r7, #12]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <lsm6dsl_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 80019c0:	f107 0208 	add.w	r2, r7, #8
 80019c4:	2301      	movs	r3, #1
 80019c6:	211e      	movs	r1, #30
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff febd 	bl	8001748 <lsm6dsl_read_reg>
 80019ce:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 80019d0:	7a3b      	ldrb	r3, [r7, #8]
 80019d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	701a      	strb	r2, [r3, #0]

  return ret;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80019f2:	f107 020c 	add.w	r2, r7, #12
 80019f6:	2306      	movs	r3, #6
 80019f8:	2122      	movs	r1, #34	; 0x22
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff fea4 	bl	8001748 <lsm6dsl_read_reg>
 8001a00:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001a02:	7b7b      	ldrb	r3, [r7, #13]
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	7b3b      	ldrb	r3, [r7, #12]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	3302      	adds	r3, #2
 8001a2a:	b212      	sxth	r2, r2
 8001a2c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	3302      	adds	r3, #2
 8001a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	7bbb      	ldrb	r3, [r7, #14]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	3302      	adds	r3, #2
 8001a48:	b212      	sxth	r2, r2
 8001a4a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001a4c:	7c7a      	ldrb	r2, [r7, #17]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	3304      	adds	r3, #4
 8001a52:	b212      	sxth	r2, r2
 8001a54:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	7c3b      	ldrb	r3, [r7, #16]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	b212      	sxth	r2, r2
 8001a72:	801a      	strh	r2, [r3, #0]

  return ret;
 8001a74:	697b      	ldr	r3, [r7, #20]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001a88:	f107 020c 	add.w	r2, r7, #12
 8001a8c:	2306      	movs	r3, #6
 8001a8e:	2128      	movs	r1, #40	; 0x28
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff fe59 	bl	8001748 <lsm6dsl_read_reg>
 8001a96:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001a98:	7b7b      	ldrb	r3, [r7, #13]
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	7b3b      	ldrb	r3, [r7, #12]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	b21a      	sxth	r2, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	3302      	adds	r3, #2
 8001ac0:	b212      	sxth	r2, r2
 8001ac2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	7bbb      	ldrb	r3, [r7, #14]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	3302      	adds	r3, #2
 8001ade:	b212      	sxth	r2, r2
 8001ae0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001ae2:	7c7a      	ldrb	r2, [r7, #17]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	b212      	sxth	r2, r2
 8001aea:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	3304      	adds	r3, #4
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	7c3b      	ldrb	r3, [r7, #16]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	3304      	adds	r3, #4
 8001b06:	b212      	sxth	r2, r2
 8001b08:	801a      	strh	r2, [r3, #0]

  return ret;
 8001b0a:	697b      	ldr	r3, [r7, #20]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001b1e:	2301      	movs	r3, #1
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	210f      	movs	r1, #15
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fe0f 	bl	8001748 <lsm6dsl_read_reg>
 8001b2a:	60f8      	str	r0, [r7, #12]

  return ret;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001b42:	f107 0208 	add.w	r2, r7, #8
 8001b46:	2301      	movs	r3, #1
 8001b48:	2112      	movs	r1, #18
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fdfc 	bl	8001748 <lsm6dsl_read_reg>
 8001b50:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10f      	bne.n	8001b78 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	7a3b      	ldrb	r3, [r7, #8]
 8001b62:	f362 0300 	bfi	r3, r2, #0, #1
 8001b66:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001b68:	f107 0208 	add.w	r2, r7, #8
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	2112      	movs	r1, #18
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fe01 	bl	8001778 <lsm6dsl_write_reg>
 8001b76:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b78:	68fb      	ldr	r3, [r7, #12]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001b8c:	f107 0208 	add.w	r2, r7, #8
 8001b90:	2301      	movs	r3, #1
 8001b92:	2112      	movs	r1, #18
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff fdd7 	bl	8001748 <lsm6dsl_read_reg>
 8001b9a:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001b9c:	7a3b      	ldrb	r3, [r7, #8]
 8001b9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	701a      	strb	r2, [r3, #0]

  return ret;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001bc0:	f107 0208 	add.w	r2, r7, #8
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	2117      	movs	r1, #23
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fdbd 	bl	8001748 <lsm6dsl_read_reg>
 8001bce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d120      	bne.n	8001c18 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	7a3b      	ldrb	r3, [r7, #8]
 8001be2:	f362 03c3 	bfi	r3, r2, #3, #1
 8001be6:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	7a3b      	ldrb	r3, [r7, #8]
 8001bf2:	f362 1346 	bfi	r3, r2, #5, #2
 8001bf6:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8001bf8:	7a3b      	ldrb	r3, [r7, #8]
 8001bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfe:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8001c00:	7a3b      	ldrb	r3, [r7, #8]
 8001c02:	f36f 0382 	bfc	r3, #2, #1
 8001c06:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001c08:	f107 0208 	add.w	r2, r7, #8
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	2117      	movs	r1, #23
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff fdb1 	bl	8001778 <lsm6dsl_write_reg>
 8001c16:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c18:	68fb      	ldr	r3, [r7, #12]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001c2e:	f107 0208 	add.w	r2, r7, #8
 8001c32:	2301      	movs	r3, #1
 8001c34:	2116      	movs	r1, #22
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fd86 	bl	8001748 <lsm6dsl_read_reg>
 8001c3c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d157      	bne.n	8001cf4 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	7a3b      	ldrb	r3, [r7, #8]
 8001c50:	f362 1305 	bfi	r3, r2, #4, #2
 8001c54:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	09db      	lsrs	r3, r3, #7
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	7a3b      	ldrb	r3, [r7, #8]
 8001c64:	f362 1386 	bfi	r3, r2, #6, #1
 8001c68:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001c6a:	f107 0208 	add.w	r2, r7, #8
 8001c6e:	2301      	movs	r3, #1
 8001c70:	2116      	movs	r1, #22
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fd80 	bl	8001778 <lsm6dsl_write_reg>
 8001c78:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d139      	bne.n	8001cf4 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001c80:	f107 020c 	add.w	r2, r7, #12
 8001c84:	2301      	movs	r3, #1
 8001c86:	2115      	movs	r1, #21
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff fd5d 	bl	8001748 <lsm6dsl_read_reg>
 8001c8e:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d12e      	bne.n	8001cf4 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	7b3b      	ldrb	r3, [r7, #12]
 8001ca0:	f362 0301 	bfi	r3, r2, #0, #2
 8001ca4:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001ca6:	f107 020c 	add.w	r2, r7, #12
 8001caa:	2301      	movs	r3, #1
 8001cac:	2115      	movs	r1, #21
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fd62 	bl	8001778 <lsm6dsl_write_reg>
 8001cb4:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d11b      	bne.n	8001cf4 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8001cbc:	f107 0210 	add.w	r2, r7, #16
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	2113      	movs	r1, #19
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff fd3f 	bl	8001748 <lsm6dsl_read_reg>
 8001cca:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d110      	bne.n	8001cf4 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	7c3b      	ldrb	r3, [r7, #16]
 8001cde:	f362 0341 	bfi	r3, r2, #1, #1
 8001ce2:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8001ce4:	f107 0210 	add.w	r2, r7, #16
 8001ce8:	2301      	movs	r3, #1
 8001cea:	2113      	movs	r1, #19
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fd43 	bl	8001778 <lsm6dsl_write_reg>
 8001cf2:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001cf4:	697b      	ldr	r3, [r7, #20]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b097      	sub	sp, #92	; 0x5c
 8001d04:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d06:	f002 fa79 	bl	80041fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d0a:	f000 f909 	bl	8001f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0e:	f000 fb6f 	bl	80023f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d12:	f000 f96f 	bl	8001ff4 <MX_ADC1_Init>
  MX_SPI4_Init();
 8001d16:	f000 fa35 	bl	8002184 <MX_SPI4_Init>
  MX_TIM2_Init();
 8001d1a:	f000 fa9f 	bl	800225c <MX_TIM2_Init>
  MX_SPI5_Init();
 8001d1e:	f000 fa67 	bl	80021f0 <MX_SPI5_Init>
  MX_FATFS_Init();
 8001d22:	f009 f899 	bl	800ae58 <MX_FATFS_Init>
  MX_I2C3_Init();
 8001d26:	f000 f9b7 	bl	8002098 <MX_I2C3_Init>
  MX_USART6_UART_Init();
 8001d2a:	f000 fb37 	bl	800239c <MX_USART6_UART_Init>
  MX_UART8_Init();
 8001d2e:	f000 fb0b 	bl	8002348 <MX_UART8_Init>
  MX_SPI2_Init();
 8001d32:	f000 f9f1 	bl	8002118 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2102      	movs	r1, #2
 8001d3a:	485c      	ldr	r0, [pc, #368]	; (8001eac <main+0x1ac>)
 8001d3c:	f002 ffdc 	bl	8004cf8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2104      	movs	r1, #4
 8001d44:	4859      	ldr	r0, [pc, #356]	; (8001eac <main+0x1ac>)
 8001d46:	f002 ffd7 	bl	8004cf8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2108      	movs	r1, #8
 8001d4e:	4857      	ldr	r0, [pc, #348]	; (8001eac <main+0x1ac>)
 8001d50:	f002 ffd2 	bl	8004cf8 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d5a:	4855      	ldr	r0, [pc, #340]	; (8001eb0 <main+0x1b0>)
 8001d5c:	f002 ffcc 	bl	8004cf8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 8001d60:	2200      	movs	r2, #0
 8001d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d66:	4852      	ldr	r0, [pc, #328]	; (8001eb0 <main+0x1b0>)
 8001d68:	f002 ffc6 	bl	8004cf8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d72:	484f      	ldr	r0, [pc, #316]	; (8001eb0 <main+0x1b0>)
 8001d74:	f002 ffc0 	bl	8004cf8 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	484c      	ldr	r0, [pc, #304]	; (8001eb0 <main+0x1b0>)
 8001d7e:	f002 ffbb 	bl	8004cf8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d88:	484a      	ldr	r0, [pc, #296]	; (8001eb4 <main+0x1b4>)
 8001d8a:	f002 ffb5 	bl	8004cf8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d94:	4847      	ldr	r0, [pc, #284]	; (8001eb4 <main+0x1b4>)
 8001d96:	f002 ffaf 	bl	8004cf8 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2104      	movs	r1, #4
 8001d9e:	4846      	ldr	r0, [pc, #280]	; (8001eb8 <main+0x1b8>)
 8001da0:	f002 ffaa 	bl	8004cf8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	4843      	ldr	r0, [pc, #268]	; (8001eb8 <main+0x1b8>)
 8001daa:	f002 ffa5 	bl	8004cf8 <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001db4:	4840      	ldr	r0, [pc, #256]	; (8001eb8 <main+0x1b8>)
 8001db6:	f002 ff9f 	bl	8004cf8 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc0:	483a      	ldr	r0, [pc, #232]	; (8001eac <main+0x1ac>)
 8001dc2:	f002 ff99 	bl	8004cf8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dcc:	483b      	ldr	r0, [pc, #236]	; (8001ebc <main+0x1bc>)
 8001dce:	f002 ff93 	bl	8004cf8 <HAL_GPIO_WritePin>

  dev_ctx_lsm = lsm6dsl_init();
 8001dd2:	4c3b      	ldr	r4, [pc, #236]	; (8001ec0 <main+0x1c0>)
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f918 	bl	800100c <lsm6dsl_init>
 8001ddc:	463b      	mov	r3, r7
 8001dde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001de2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dev_ctx_lps = lps22hh_init();
 8001de6:	4c37      	ldr	r4, [pc, #220]	; (8001ec4 <main+0x1c4>)
 8001de8:	463b      	mov	r3, r7
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fa0a 	bl	8001204 <lps22hh_init>
 8001df0:	463b      	mov	r3, r7
 8001df2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001df6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  //SRAD Radio init
  set_hspi(hspi2);
 8001dfa:	4c33      	ldr	r4, [pc, #204]	; (8001ec8 <main+0x1c8>)
 8001dfc:	4668      	mov	r0, sp
 8001dfe:	f104 0310 	add.w	r3, r4, #16
 8001e02:	2248      	movs	r2, #72	; 0x48
 8001e04:	4619      	mov	r1, r3
 8001e06:	f012 f9d7 	bl	80141b8 <memcpy>
 8001e0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e0e:	f001 fbb5 	bl	800357c <set_hspi>
  set_NSS_pin(SX_NSS_GPIO_Port, SX_NSS_Pin);
 8001e12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e16:	482d      	ldr	r0, [pc, #180]	; (8001ecc <main+0x1cc>)
 8001e18:	f001 fb58 	bl	80034cc <set_NSS_pin>
  set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 8001e1c:	2108      	movs	r1, #8
 8001e1e:	4824      	ldr	r0, [pc, #144]	; (8001eb0 <main+0x1b0>)
 8001e20:	f001 fb6a 	bl	80034f8 <set_BUSY_pin>
  set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 8001e24:	2104      	movs	r1, #4
 8001e26:	4822      	ldr	r0, [pc, #136]	; (8001eb0 <main+0x1b0>)
 8001e28:	f001 fb7c 	bl	8003524 <set_NRESET_pin>
  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 8001e2c:	2110      	movs	r1, #16
 8001e2e:	4820      	ldr	r0, [pc, #128]	; (8001eb0 <main+0x1b0>)
 8001e30:	f001 fb8e 	bl	8003550 <set_DIO1_pin>
  Tx_setup();
 8001e34:	f001 fbba 	bl	80035ac <Tx_setup>

  sd_init_dynamic_filename("FC", "", filename);
 8001e38:	4a25      	ldr	r2, [pc, #148]	; (8001ed0 <main+0x1d0>)
 8001e3a:	4926      	ldr	r1, [pc, #152]	; (8001ed4 <main+0x1d4>)
 8001e3c:	4826      	ldr	r0, [pc, #152]	; (8001ed8 <main+0x1d8>)
 8001e3e:	f000 fd8d 	bl	800295c <sd_init_dynamic_filename>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001e42:	f00e f8a7 	bl	800ff94 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of mutex */
  mutexHandle = osSemaphoreNew(1, 1, &mutex_attributes);
 8001e46:	4a25      	ldr	r2, [pc, #148]	; (8001edc <main+0x1dc>)
 8001e48:	2101      	movs	r1, #1
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f00e f999 	bl	8010182 <osSemaphoreNew>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4a23      	ldr	r2, [pc, #140]	; (8001ee0 <main+0x1e0>)
 8001e54:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of printSensors */
  printSensorsHandle = osThreadNew(printSensorsFunc, NULL, &printSensors_attributes);
 8001e56:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <main+0x1e4>)
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4823      	ldr	r0, [pc, #140]	; (8001ee8 <main+0x1e8>)
 8001e5c:	f00e f8e4 	bl	8010028 <osThreadNew>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4a22      	ldr	r2, [pc, #136]	; (8001eec <main+0x1ec>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* creation of pollSensors */
  pollSensorsHandle = osThreadNew(pollSensorsFunc, NULL, &pollSensors_attributes);
 8001e66:	4a22      	ldr	r2, [pc, #136]	; (8001ef0 <main+0x1f0>)
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4822      	ldr	r0, [pc, #136]	; (8001ef4 <main+0x1f4>)
 8001e6c:	f00e f8dc 	bl	8010028 <osThreadNew>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4a21      	ldr	r2, [pc, #132]	; (8001ef8 <main+0x1f8>)
 8001e74:	6013      	str	r3, [r2, #0]

  /* creation of saveData */
  saveDataHandle = osThreadNew(saveDataFunc, NULL, &saveData_attributes);
 8001e76:	4a21      	ldr	r2, [pc, #132]	; (8001efc <main+0x1fc>)
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4821      	ldr	r0, [pc, #132]	; (8001f00 <main+0x200>)
 8001e7c:	f00e f8d4 	bl	8010028 <osThreadNew>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4a20      	ldr	r2, [pc, #128]	; (8001f04 <main+0x204>)
 8001e84:	6013      	str	r3, [r2, #0]

  /* creation of ejection */
  ejectionHandle = osThreadNew(ejectionFunc, NULL, &ejection_attributes);
 8001e86:	4a20      	ldr	r2, [pc, #128]	; (8001f08 <main+0x208>)
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4820      	ldr	r0, [pc, #128]	; (8001f0c <main+0x20c>)
 8001e8c:	f00e f8cc 	bl	8010028 <osThreadNew>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <main+0x210>)
 8001e94:	6013      	str	r3, [r2, #0]

  /* creation of transmitData */
  transmitDataHandle = osThreadNew(transmitDataFunc, NULL, &transmitData_attributes);
 8001e96:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <main+0x214>)
 8001e98:	2100      	movs	r1, #0
 8001e9a:	481f      	ldr	r0, [pc, #124]	; (8001f18 <main+0x218>)
 8001e9c:	f00e f8c4 	bl	8010028 <osThreadNew>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <main+0x21c>)
 8001ea4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001ea6:	f00e f899 	bl	800ffdc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001eaa:	e7fe      	b.n	8001eaa <main+0x1aa>
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	40021800 	.word	0x40021800
 8001eb4:	40021400 	.word	0x40021400
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	2000a7f0 	.word	0x2000a7f0
 8001ec4:	2000a7fc 	.word	0x2000a7fc
 8001ec8:	20009f30 	.word	0x20009f30
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	2000a224 	.word	0x2000a224
 8001ed4:	080189e4 	.word	0x080189e4
 8001ed8:	080189e8 	.word	0x080189e8
 8001edc:	08018cd4 	.word	0x08018cd4
 8001ee0:	2000a700 	.word	0x2000a700
 8001ee4:	08018c20 	.word	0x08018c20
 8001ee8:	080026c9 	.word	0x080026c9
 8001eec:	20009fe0 	.word	0x20009fe0
 8001ef0:	08018c44 	.word	0x08018c44
 8001ef4:	080026e1 	.word	0x080026e1
 8001ef8:	2000a220 	.word	0x2000a220
 8001efc:	08018c68 	.word	0x08018c68
 8001f00:	08002731 	.word	0x08002731
 8001f04:	20009ed8 	.word	0x20009ed8
 8001f08:	08018c8c 	.word	0x08018c8c
 8001f0c:	080027ad 	.word	0x080027ad
 8001f10:	20009fe4 	.word	0x20009fe4
 8001f14:	08018cb0 	.word	0x08018cb0
 8001f18:	080027c1 	.word	0x080027c1
 8001f1c:	2000a6fc 	.word	0x2000a6fc

08001f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b094      	sub	sp, #80	; 0x50
 8001f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f26:	f107 0320 	add.w	r3, r7, #32
 8001f2a:	2230      	movs	r2, #48	; 0x30
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f012 f950 	bl	80141d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	4b28      	ldr	r3, [pc, #160]	; (8001fec <SystemClock_Config+0xcc>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	4a27      	ldr	r2, [pc, #156]	; (8001fec <SystemClock_Config+0xcc>)
 8001f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f52:	6413      	str	r3, [r2, #64]	; 0x40
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <SystemClock_Config+0xcc>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f60:	2300      	movs	r3, #0
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <SystemClock_Config+0xd0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f6c:	4a20      	ldr	r2, [pc, #128]	; (8001ff0 <SystemClock_Config+0xd0>)
 8001f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <SystemClock_Config+0xd0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f94:	2308      	movs	r3, #8
 8001f96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001f98:	2348      	movs	r3, #72	; 0x48
 8001f9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa4:	f107 0320 	add.w	r3, r7, #32
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f005 f8a1 	bl	80070f0 <HAL_RCC_OscConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001fb4:	f000 fca8 	bl	8002908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb8:	230f      	movs	r3, #15
 8001fba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fce:	f107 030c 	add.w	r3, r7, #12
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f005 fb03 	bl	80075e0 <HAL_RCC_ClockConfig>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001fe0:	f000 fc92 	bl	8002908 <Error_Handler>
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3750      	adds	r7, #80	; 0x50
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40007000 	.word	0x40007000

08001ff4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002006:	4b21      	ldr	r3, [pc, #132]	; (800208c <MX_ADC1_Init+0x98>)
 8002008:	4a21      	ldr	r2, [pc, #132]	; (8002090 <MX_ADC1_Init+0x9c>)
 800200a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <MX_ADC1_Init+0x98>)
 800200e:	2200      	movs	r2, #0
 8002010:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002012:	4b1e      	ldr	r3, [pc, #120]	; (800208c <MX_ADC1_Init+0x98>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <MX_ADC1_Init+0x98>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800201e:	4b1b      	ldr	r3, [pc, #108]	; (800208c <MX_ADC1_Init+0x98>)
 8002020:	2200      	movs	r2, #0
 8002022:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <MX_ADC1_Init+0x98>)
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800202c:	4b17      	ldr	r3, [pc, #92]	; (800208c <MX_ADC1_Init+0x98>)
 800202e:	2200      	movs	r2, #0
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <MX_ADC1_Init+0x98>)
 8002034:	4a17      	ldr	r2, [pc, #92]	; (8002094 <MX_ADC1_Init+0xa0>)
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002038:	4b14      	ldr	r3, [pc, #80]	; (800208c <MX_ADC1_Init+0x98>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <MX_ADC1_Init+0x98>)
 8002040:	2201      	movs	r2, #1
 8002042:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <MX_ADC1_Init+0x98>)
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <MX_ADC1_Init+0x98>)
 800204e:	2201      	movs	r2, #1
 8002050:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002052:	480e      	ldr	r0, [pc, #56]	; (800208c <MX_ADC1_Init+0x98>)
 8002054:	f002 f938 	bl	80042c8 <HAL_ADC_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800205e:	f000 fc53 	bl	8002908 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002062:	2306      	movs	r3, #6
 8002064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002066:	2301      	movs	r3, #1
 8002068:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800206a:	2307      	movs	r3, #7
 800206c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800206e:	463b      	mov	r3, r7
 8002070:	4619      	mov	r1, r3
 8002072:	4806      	ldr	r0, [pc, #24]	; (800208c <MX_ADC1_Init+0x98>)
 8002074:	f002 f96c 	bl	8004350 <HAL_ADC_ConfigChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800207e:	f000 fc43 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000a6b4 	.word	0x2000a6b4
 8002090:	40012000 	.word	0x40012000
 8002094:	0f000001 	.word	0x0f000001

08002098 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <MX_I2C3_Init+0x74>)
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <MX_I2C3_Init+0x78>)
 80020a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <MX_I2C3_Init+0x74>)
 80020a4:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <MX_I2C3_Init+0x7c>)
 80020a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <MX_I2C3_Init+0x74>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80020ae:	4b17      	ldr	r3, [pc, #92]	; (800210c <MX_I2C3_Init+0x74>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <MX_I2C3_Init+0x74>)
 80020b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <MX_I2C3_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <MX_I2C3_Init+0x74>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <MX_I2C3_Init+0x74>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <MX_I2C3_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80020d4:	480d      	ldr	r0, [pc, #52]	; (800210c <MX_I2C3_Init+0x74>)
 80020d6:	f002 fe4d 	bl	8004d74 <HAL_I2C_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80020e0:	f000 fc12 	bl	8002908 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020e4:	2100      	movs	r1, #0
 80020e6:	4809      	ldr	r0, [pc, #36]	; (800210c <MX_I2C3_Init+0x74>)
 80020e8:	f003 fe03 	bl	8005cf2 <HAL_I2CEx_ConfigAnalogFilter>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80020f2:	f000 fc09 	bl	8002908 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80020f6:	2100      	movs	r1, #0
 80020f8:	4804      	ldr	r0, [pc, #16]	; (800210c <MX_I2C3_Init+0x74>)
 80020fa:	f003 fe36 	bl	8005d6a <HAL_I2CEx_ConfigDigitalFilter>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002104:	f000 fc00 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20009edc 	.word	0x20009edc
 8002110:	40005c00 	.word	0x40005c00
 8002114:	000186a0 	.word	0x000186a0

08002118 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <MX_SPI2_Init+0x64>)
 800211e:	4a18      	ldr	r2, [pc, #96]	; (8002180 <MX_SPI2_Init+0x68>)
 8002120:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <MX_SPI2_Init+0x64>)
 8002124:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002128:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <MX_SPI2_Init+0x64>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <MX_SPI2_Init+0x64>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <MX_SPI2_Init+0x64>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <MX_SPI2_Init+0x64>)
 800213e:	2200      	movs	r2, #0
 8002140:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <MX_SPI2_Init+0x64>)
 8002144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002148:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <MX_SPI2_Init+0x64>)
 800214c:	2200      	movs	r2, #0
 800214e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <MX_SPI2_Init+0x64>)
 8002152:	2200      	movs	r2, #0
 8002154:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <MX_SPI2_Init+0x64>)
 8002158:	2200      	movs	r2, #0
 800215a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <MX_SPI2_Init+0x64>)
 800215e:	2200      	movs	r2, #0
 8002160:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <MX_SPI2_Init+0x64>)
 8002164:	220a      	movs	r2, #10
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <MX_SPI2_Init+0x64>)
 800216a:	f005 fc65 	bl	8007a38 <HAL_SPI_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002174:	f000 fbc8 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20009f30 	.word	0x20009f30
 8002180:	40003800 	.word	0x40003800

08002184 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <MX_SPI4_Init+0x64>)
 800218a:	4a18      	ldr	r2, [pc, #96]	; (80021ec <MX_SPI4_Init+0x68>)
 800218c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800218e:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <MX_SPI4_Init+0x64>)
 8002190:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002194:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <MX_SPI4_Init+0x64>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <MX_SPI4_Init+0x64>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_SPI4_Init+0x64>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <MX_SPI4_Init+0x64>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <MX_SPI4_Init+0x64>)
 80021b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <MX_SPI4_Init+0x64>)
 80021b8:	2230      	movs	r2, #48	; 0x30
 80021ba:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <MX_SPI4_Init+0x64>)
 80021be:	2200      	movs	r2, #0
 80021c0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_SPI4_Init+0x64>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <MX_SPI4_Init+0x64>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_SPI4_Init+0x64>)
 80021d0:	220a      	movs	r2, #10
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80021d4:	4804      	ldr	r0, [pc, #16]	; (80021e8 <MX_SPI4_Init+0x64>)
 80021d6:	f005 fc2f 	bl	8007a38 <HAL_SPI_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80021e0:	f000 fb92 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20009e7c 	.word	0x20009e7c
 80021ec:	40013400 	.word	0x40013400

080021f0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80021f4:	4b17      	ldr	r3, [pc, #92]	; (8002254 <MX_SPI5_Init+0x64>)
 80021f6:	4a18      	ldr	r2, [pc, #96]	; (8002258 <MX_SPI5_Init+0x68>)
 80021f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <MX_SPI5_Init+0x64>)
 80021fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002200:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <MX_SPI5_Init+0x64>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <MX_SPI5_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <MX_SPI5_Init+0x64>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <MX_SPI5_Init+0x64>)
 8002216:	2200      	movs	r2, #0
 8002218:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <MX_SPI5_Init+0x64>)
 800221c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002220:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <MX_SPI5_Init+0x64>)
 8002224:	2238      	movs	r2, #56	; 0x38
 8002226:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <MX_SPI5_Init+0x64>)
 800222a:	2200      	movs	r2, #0
 800222c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <MX_SPI5_Init+0x64>)
 8002230:	2200      	movs	r2, #0
 8002232:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <MX_SPI5_Init+0x64>)
 8002236:	2200      	movs	r2, #0
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <MX_SPI5_Init+0x64>)
 800223c:	220a      	movs	r2, #10
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002240:	4804      	ldr	r0, [pc, #16]	; (8002254 <MX_SPI5_Init+0x64>)
 8002242:	f005 fbf9 	bl	8007a38 <HAL_SPI_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800224c:	f000 fb5c 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20009f88 	.word	0x20009f88
 8002258:	40015000 	.word	0x40015000

0800225c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08e      	sub	sp, #56	; 0x38
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002270:	f107 0320 	add.w	r3, r7, #32
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
 8002288:	615a      	str	r2, [r3, #20]
 800228a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800228c:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <MX_TIM2_Init+0xe8>)
 800228e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002292:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50;
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <MX_TIM2_Init+0xe8>)
 8002296:	2232      	movs	r2, #50	; 0x32
 8002298:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229a:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <MX_TIM2_Init+0xe8>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80022a0:	4b28      	ldr	r3, [pc, #160]	; (8002344 <MX_TIM2_Init+0xe8>)
 80022a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a8:	4b26      	ldr	r3, [pc, #152]	; (8002344 <MX_TIM2_Init+0xe8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ae:	4b25      	ldr	r3, [pc, #148]	; (8002344 <MX_TIM2_Init+0xe8>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022b4:	4823      	ldr	r0, [pc, #140]	; (8002344 <MX_TIM2_Init+0xe8>)
 80022b6:	f005 fff1 	bl	800829c <HAL_TIM_Base_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80022c0:	f000 fb22 	bl	8002908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ce:	4619      	mov	r1, r3
 80022d0:	481c      	ldr	r0, [pc, #112]	; (8002344 <MX_TIM2_Init+0xe8>)
 80022d2:	f006 fac7 	bl	8008864 <HAL_TIM_ConfigClockSource>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80022dc:	f000 fb14 	bl	8002908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022e0:	4818      	ldr	r0, [pc, #96]	; (8002344 <MX_TIM2_Init+0xe8>)
 80022e2:	f006 f89b 	bl	800841c <HAL_TIM_PWM_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80022ec:	f000 fb0c 	bl	8002908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022f0:	2320      	movs	r3, #32
 80022f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022f8:	f107 0320 	add.w	r3, r7, #32
 80022fc:	4619      	mov	r1, r3
 80022fe:	4811      	ldr	r0, [pc, #68]	; (8002344 <MX_TIM2_Init+0xe8>)
 8002300:	f006 fe8a 	bl	8009018 <HAL_TIMEx_MasterConfigSynchronization>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800230a:	f000 fafd 	bl	8002908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800230e:	2360      	movs	r3, #96	; 0x60
 8002310:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8002312:	2364      	movs	r3, #100	; 0x64
 8002314:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	2208      	movs	r2, #8
 8002322:	4619      	mov	r1, r3
 8002324:	4807      	ldr	r0, [pc, #28]	; (8002344 <MX_TIM2_Init+0xe8>)
 8002326:	f006 f9db 	bl	80086e0 <HAL_TIM_PWM_ConfigChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002330:	f000 faea 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002334:	4803      	ldr	r0, [pc, #12]	; (8002344 <MX_TIM2_Init+0xe8>)
 8002336:	f000 feed 	bl	8003114 <HAL_TIM_MspPostInit>

}
 800233a:	bf00      	nop
 800233c:	3738      	adds	r7, #56	; 0x38
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000a7a8 	.word	0x2000a7a8

08002348 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <MX_UART8_Init+0x4c>)
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <MX_UART8_Init+0x50>)
 8002350:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <MX_UART8_Init+0x4c>)
 8002354:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002358:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <MX_UART8_Init+0x4c>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <MX_UART8_Init+0x4c>)
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <MX_UART8_Init+0x4c>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <MX_UART8_Init+0x4c>)
 800236e:	220c      	movs	r2, #12
 8002370:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <MX_UART8_Init+0x4c>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <MX_UART8_Init+0x4c>)
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800237e:	4805      	ldr	r0, [pc, #20]	; (8002394 <MX_UART8_Init+0x4c>)
 8002380:	f006 feda 	bl	8009138 <HAL_UART_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800238a:	f000 fabd 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	2000a714 	.word	0x2000a714
 8002398:	40007c00 	.word	0x40007c00

0800239c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <MX_USART6_UART_Init+0x50>)
 80023a4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023ac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023c2:	220c      	movs	r2, #12
 80023c4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_USART6_UART_Init+0x4c>)
 80023d4:	f006 feb0 	bl	8009138 <HAL_UART_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80023de:	f000 fa93 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2000a758 	.word	0x2000a758
 80023ec:	40011400 	.word	0x40011400

080023f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08e      	sub	sp, #56	; 0x38
 80023f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	60da      	str	r2, [r3, #12]
 8002404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	623b      	str	r3, [r7, #32]
 800240a:	4ba7      	ldr	r3, [pc, #668]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4aa6      	ldr	r2, [pc, #664]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 8002410:	f043 0310 	orr.w	r3, r3, #16
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4ba4      	ldr	r3, [pc, #656]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	623b      	str	r3, [r7, #32]
 8002420:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	4ba0      	ldr	r3, [pc, #640]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a9f      	ldr	r2, [pc, #636]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b9d      	ldr	r3, [pc, #628]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	4b99      	ldr	r3, [pc, #612]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a98      	ldr	r2, [pc, #608]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 8002448:	f043 0320 	orr.w	r3, r3, #32
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b96      	ldr	r3, [pc, #600]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	4b92      	ldr	r3, [pc, #584]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a91      	ldr	r2, [pc, #580]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 8002464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b8f      	ldr	r3, [pc, #572]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	4b8b      	ldr	r3, [pc, #556]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a8a      	ldr	r2, [pc, #552]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b88      	ldr	r3, [pc, #544]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	4b84      	ldr	r3, [pc, #528]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a83      	ldr	r2, [pc, #524]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b81      	ldr	r3, [pc, #516]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	4b7d      	ldr	r3, [pc, #500]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a7c      	ldr	r2, [pc, #496]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 80024b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b7a      	ldr	r3, [pc, #488]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	4b76      	ldr	r3, [pc, #472]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a75      	ldr	r2, [pc, #468]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 80024d4:	f043 0308 	orr.w	r3, r3, #8
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b73      	ldr	r3, [pc, #460]	; (80026a8 <MX_GPIO_Init+0x2b8>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 80024e6:	2200      	movs	r2, #0
 80024e8:	f640 6184 	movw	r1, #3716	; 0xe84
 80024ec:	486f      	ldr	r0, [pc, #444]	; (80026ac <MX_GPIO_Init+0x2bc>)
 80024ee:	f002 fc03 	bl	8004cf8 <HAL_GPIO_WritePin>
                          |TH_CS_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 80024f2:	2200      	movs	r2, #0
 80024f4:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80024f8:	486d      	ldr	r0, [pc, #436]	; (80026b0 <MX_GPIO_Init+0x2c0>)
 80024fa:	f002 fbfd 	bl	8004cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|SX_AMP_Pin
 80024fe:	2200      	movs	r2, #0
 8002500:	f240 510e 	movw	r1, #1294	; 0x50e
 8002504:	486b      	ldr	r0, [pc, #428]	; (80026b4 <MX_GPIO_Init+0x2c4>)
 8002506:	f002 fbf7 	bl	8004cf8 <HAL_GPIO_WritePin>
                          |VR_CTRL_PWR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|Rcov_Gate_Main_Pin
 800250a:	2200      	movs	r2, #0
 800250c:	f645 0126 	movw	r1, #22566	; 0x5826
 8002510:	4869      	ldr	r0, [pc, #420]	; (80026b8 <MX_GPIO_Init+0x2c8>)
 8002512:	f002 fbf1 	bl	8004cf8 <HAL_GPIO_WritePin>
                          |Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_NSS_GPIO_Port, SX_NSS_Pin, GPIO_PIN_RESET);
 8002516:	2200      	movs	r2, #0
 8002518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800251c:	4867      	ldr	r0, [pc, #412]	; (80026bc <MX_GPIO_Init+0x2cc>)
 800251e:	f002 fbeb 	bl	8004cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_FILTER_GPIO_Port, SX_FILTER_Pin, GPIO_PIN_RESET);
 8002522:	2200      	movs	r2, #0
 8002524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002528:	4865      	ldr	r0, [pc, #404]	; (80026c0 <MX_GPIO_Init+0x2d0>)
 800252a:	f002 fbe5 	bl	8004cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, GPIO_PIN_RESET);
 800252e:	2200      	movs	r2, #0
 8002530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002534:	4863      	ldr	r0, [pc, #396]	; (80026c4 <MX_GPIO_Init+0x2d4>)
 8002536:	f002 fbdf 	bl	8004cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PM_12V_EN_Pin Vent_Valve_EN_Pin Payload_EN_Pin TH_CS_1_Pin
                           TH_CS_2_Pin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 800253a:	f640 6384 	movw	r3, #3716	; 0xe84
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
                          |TH_CS_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002540:	2301      	movs	r3, #1
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800254c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002550:	4619      	mov	r1, r3
 8002552:	4856      	ldr	r0, [pc, #344]	; (80026ac <MX_GPIO_Init+0x2bc>)
 8002554:	f002 fa0c 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255e:	2301      	movs	r3, #1
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002562:	2301      	movs	r3, #1
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800256a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256e:	4619      	mov	r1, r3
 8002570:	484f      	ldr	r0, [pc, #316]	; (80026b0 <MX_GPIO_Init+0x2c0>)
 8002572:	f002 f9fd 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002576:	2301      	movs	r3, #1
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800257a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002588:	4619      	mov	r1, r3
 800258a:	484a      	ldr	r0, [pc, #296]	; (80026b4 <MX_GPIO_Init+0x2c4>)
 800258c:	f002 f9f0 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin SX_AMP_Pin
                           VR_CTRL_PWR_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|SX_AMP_Pin
 8002590:	f240 530e 	movw	r3, #1294	; 0x50e
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
                          |VR_CTRL_PWR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002596:	2301      	movs	r3, #1
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a6:	4619      	mov	r1, r3
 80025a8:	4842      	ldr	r0, [pc, #264]	; (80026b4 <MX_GPIO_Init+0x2c4>)
 80025aa:	f002 f9e1 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : Vent_Valve_FB_Pin */
  GPIO_InitStruct.Pin = Vent_Valve_FB_Pin;
 80025ae:	2302      	movs	r3, #2
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Vent_Valve_FB_GPIO_Port, &GPIO_InitStruct);
 80025ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025be:	4619      	mov	r1, r3
 80025c0:	483e      	ldr	r0, [pc, #248]	; (80026bc <MX_GPIO_Init+0x2cc>)
 80025c2:	f002 f9d5 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : Prop_Cont_2_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 80025c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80025d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d8:	4619      	mov	r1, r3
 80025da:	4835      	ldr	r0, [pc, #212]	; (80026b0 <MX_GPIO_Init+0x2c0>)
 80025dc:	f002 f9c8 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Gate_2_Pin Prop_Gate_1_Pin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 80025e0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e6:	2301      	movs	r3, #1
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f6:	4619      	mov	r1, r3
 80025f8:	482d      	ldr	r0, [pc, #180]	; (80026b0 <MX_GPIO_Init+0x2c0>)
 80025fa:	f002 f9b9 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Cont_1_Pin SX_BUSY_Pin SX_DIO_Pin Rcov_Cont_Main_Pin
                           Rcov_Cont_Drogue_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|Rcov_Cont_Main_Pin
 80025fe:	f242 4319 	movw	r3, #9241	; 0x2419
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Cont_Drogue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002604:	2300      	movs	r3, #0
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800260c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002610:	4619      	mov	r1, r3
 8002612:	4829      	ldr	r0, [pc, #164]	; (80026b8 <MX_GPIO_Init+0x2c8>)
 8002614:	f002 f9ac 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Pyro_Arming_Pin SX_RST_Pin SX_RF_SW_Pin Rcov_Gate_Main_Pin
                           Rcov_Gate_Drogue_Pin Rcov_Arm_Pin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|Rcov_Gate_Main_Pin
 8002618:	f645 0326 	movw	r3, #22566	; 0x5826
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261e:	2301      	movs	r3, #1
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800262a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262e:	4619      	mov	r1, r3
 8002630:	4821      	ldr	r0, [pc, #132]	; (80026b8 <MX_GPIO_Init+0x2c8>)
 8002632:	f002 f99d 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_NSS_Pin */
  GPIO_InitStruct.Pin = SX_NSS_Pin;
 8002636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263c:	2301      	movs	r3, #1
 800263e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SX_NSS_GPIO_Port, &GPIO_InitStruct);
 8002648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264c:	4619      	mov	r1, r3
 800264e:	481b      	ldr	r0, [pc, #108]	; (80026bc <MX_GPIO_Init+0x2cc>)
 8002650:	f002 f98e 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_FILTER_Pin;
 8002654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265a:	2301      	movs	r3, #1
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	2300      	movs	r3, #0
 8002664:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SX_FILTER_GPIO_Port, &GPIO_InitStruct);
 8002666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266a:	4619      	mov	r1, r3
 800266c:	4814      	ldr	r0, [pc, #80]	; (80026c0 <MX_GPIO_Init+0x2d0>)
 800266e:	f002 f97f 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : VR_CTRL_REC_Pin */
  GPIO_InitStruct.Pin = VR_CTRL_REC_Pin;
 8002672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002678:	2301      	movs	r3, #1
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2300      	movs	r3, #0
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(VR_CTRL_REC_GPIO_Port, &GPIO_InitStruct);
 8002684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002688:	4619      	mov	r1, r3
 800268a:	480e      	ldr	r0, [pc, #56]	; (80026c4 <MX_GPIO_Init+0x2d4>)
 800268c:	f002 f970 	bl	8004970 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002690:	2200      	movs	r2, #0
 8002692:	2105      	movs	r1, #5
 8002694:	2006      	movs	r0, #6
 8002696:	f002 f941 	bl	800491c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800269a:	2006      	movs	r0, #6
 800269c:	f002 f95a 	bl	8004954 <HAL_NVIC_EnableIRQ>

}
 80026a0:	bf00      	nop
 80026a2:	3738      	adds	r7, #56	; 0x38
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40021400 	.word	0x40021400
 80026b4:	40020800 	.word	0x40020800
 80026b8:	40021800 	.word	0x40021800
 80026bc:	40020400 	.word	0x40020400
 80026c0:	40020c00 	.word	0x40020c00
 80026c4:	40020000 	.word	0x40020000

080026c8 <printSensorsFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_printSensorsFunc */
void printSensorsFunc(void *argument)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80026d0:	f010 ff3c 	bl	801354c <MX_USB_DEVICE_Init>
	//myprintf("GPS: %lf, %lf, %f\r\n", latitude, longitude, time);
	//myprintf("Pressure: %f, Temperature %f\r\n", pressure, temperature);
	//myprintf("Acceleration: %f,%f,%f\r\n", acceleration[0], acceleration[1], acceleration[2]);
	//myprintf("IN angular_rate: %f,%f,%f\r\n", angular_rate[0], angular_rate[1], angular_rate[2]);
	//xSemaphoreGive(mutexHandle);
    osDelay(1000);
 80026d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026d8:	f00d fd38 	bl	801014c <osDelay>
 80026dc:	e7fa      	b.n	80026d4 <printSensorsFunc+0xc>
	...

080026e0 <pollSensorsFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pollSensorsFunc */
void pollSensorsFunc(void *argument)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pollSensorsFunc */
  /* Infinite loop */
  for(;;)
  {
	get_pressure(dev_ctx_lps, &pressure);
 80026e8:	4a0b      	ldr	r2, [pc, #44]	; (8002718 <pollSensorsFunc+0x38>)
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <pollSensorsFunc+0x3c>)
 80026ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80026ee:	f7fe fddf 	bl	80012b0 <get_pressure>
	get_temperature(dev_ctx_lps,  &temperature);
 80026f2:	4a09      	ldr	r2, [pc, #36]	; (8002718 <pollSensorsFunc+0x38>)
 80026f4:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <pollSensorsFunc+0x40>)
 80026f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80026f8:	f7fe fe06 	bl	8001308 <get_temperature>
	get_acceleration(dev_ctx_lsm, acceleration);
 80026fc:	4a09      	ldr	r2, [pc, #36]	; (8002724 <pollSensorsFunc+0x44>)
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <pollSensorsFunc+0x48>)
 8002700:	ca07      	ldmia	r2, {r0, r1, r2}
 8002702:	f7fe fcf3 	bl	80010ec <get_acceleration>
	get_angvelocity(dev_ctx_lsm, angular_rate);
 8002706:	4a07      	ldr	r2, [pc, #28]	; (8002724 <pollSensorsFunc+0x44>)
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <pollSensorsFunc+0x4c>)
 800270a:	ca07      	ldmia	r2, {r0, r1, r2}
 800270c:	f7fe fd34 	bl	8001178 <get_angvelocity>
	//xSemaphoreTake(mutexHandle,500);
	//GPS_Poll(&latitude, &longitude, &time);
	//xSemaphoreGive(mutexHandle);
    osDelay(100);
 8002710:	2064      	movs	r0, #100	; 0x64
 8002712:	f00d fd1b 	bl	801014c <osDelay>
	get_pressure(dev_ctx_lps, &pressure);
 8002716:	e7e7      	b.n	80026e8 <pollSensorsFunc+0x8>
 8002718:	2000a7fc 	.word	0x2000a7fc
 800271c:	200003e0 	.word	0x200003e0
 8002720:	200003e4 	.word	0x200003e4
 8002724:	2000a7f0 	.word	0x2000a7f0
 8002728:	200003c8 	.word	0x200003c8
 800272c:	200003d4 	.word	0x200003d4

08002730 <saveDataFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_saveDataFunc */
void saveDataFunc(void *argument)
{
 8002730:	b5b0      	push	{r4, r5, r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af04      	add	r7, sp, #16
 8002736:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {
	//write data
	sd_open_file(&filename);
 8002738:	4814      	ldr	r0, [pc, #80]	; (800278c <saveDataFunc+0x5c>)
 800273a:	f000 f98d 	bl	8002a58 <sd_open_file>
	sprintf((char*)writeBuf, "Data: %f, %f, %d, %d\r\n", pressure, temperature, minute, second);
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <saveDataFunc+0x60>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fd ff10 	bl	8000568 <__aeabi_f2d>
 8002748:	4604      	mov	r4, r0
 800274a:	460d      	mov	r5, r1
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <saveDataFunc+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd ff09 	bl	8000568 <__aeabi_f2d>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	490f      	ldr	r1, [pc, #60]	; (8002798 <saveDataFunc+0x68>)
 800275c:	6809      	ldr	r1, [r1, #0]
 800275e:	480f      	ldr	r0, [pc, #60]	; (800279c <saveDataFunc+0x6c>)
 8002760:	6800      	ldr	r0, [r0, #0]
 8002762:	9003      	str	r0, [sp, #12]
 8002764:	9102      	str	r1, [sp, #8]
 8002766:	e9cd 2300 	strd	r2, r3, [sp]
 800276a:	4622      	mov	r2, r4
 800276c:	462b      	mov	r3, r5
 800276e:	490c      	ldr	r1, [pc, #48]	; (80027a0 <saveDataFunc+0x70>)
 8002770:	480c      	ldr	r0, [pc, #48]	; (80027a4 <saveDataFunc+0x74>)
 8002772:	f012 fcdb 	bl	801512c <siprintf>
	sd_write(&fil, writeBuf);
 8002776:	490b      	ldr	r1, [pc, #44]	; (80027a4 <saveDataFunc+0x74>)
 8002778:	480b      	ldr	r0, [pc, #44]	; (80027a8 <saveDataFunc+0x78>)
 800277a:	f000 f985 	bl	8002a88 <sd_write>
	f_close(&fil);
 800277e:	480a      	ldr	r0, [pc, #40]	; (80027a8 <saveDataFunc+0x78>)
 8002780:	f00c ffb8 	bl	800f6f4 <f_close>
    osDelay(50);
 8002784:	2032      	movs	r0, #50	; 0x32
 8002786:	f00d fce1 	bl	801014c <osDelay>
	sd_open_file(&filename);
 800278a:	e7d5      	b.n	8002738 <saveDataFunc+0x8>
 800278c:	2000a224 	.word	0x2000a224
 8002790:	200003e0 	.word	0x200003e0
 8002794:	200003e4 	.word	0x200003e4
 8002798:	200003ec 	.word	0x200003ec
 800279c:	200003e8 	.word	0x200003e8
 80027a0:	080189ec 	.word	0x080189ec
 80027a4:	2000a234 	.word	0x2000a234
 80027a8:	2000a80c 	.word	0x2000a80c

080027ac <ejectionFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ejectionFunc */
void ejectionFunc(void *argument)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ejectionFunc */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80027b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027b8:	f00d fcc8 	bl	801014c <osDelay>
 80027bc:	e7fa      	b.n	80027b4 <ejectionFunc+0x8>
	...

080027c0 <transmitDataFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmitDataFunc */
void transmitDataFunc(void *argument)
{
 80027c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027c4:	b0a3      	sub	sp, #140	; 0x8c
 80027c6:	af16      	add	r7, sp, #88	; 0x58
 80027c8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* USER CODE BEGIN transmitDataFunc */
  /* Infinite loop */
  for(;;)
  {
	//S,ACCx,ACCy,ACCz,GYROx,GYROy,GYROz,PRESSURE,LAT,LONG,MIN,SEC,SUBSEC,STATE,CONT,E
	second++;
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <transmitDataFunc+0x100>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3301      	adds	r3, #1
 80027d0:	4a3b      	ldr	r2, [pc, #236]	; (80028c0 <transmitDataFunc+0x100>)
 80027d2:	6013      	str	r3, [r2, #0]
	if(second == 60){
 80027d4:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <transmitDataFunc+0x100>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b3c      	cmp	r3, #60	; 0x3c
 80027da:	d107      	bne.n	80027ec <transmitDataFunc+0x2c>
		second = 0;
 80027dc:	4b38      	ldr	r3, [pc, #224]	; (80028c0 <transmitDataFunc+0x100>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
		minute++;
 80027e2:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <transmitDataFunc+0x104>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	4a36      	ldr	r2, [pc, #216]	; (80028c4 <transmitDataFunc+0x104>)
 80027ea:	6013      	str	r3, [r2, #0]
	}
	sprintf((char*)tx_buffer, "S,%f,%f,%f,%f,%f,%f,%f,%lf,%lf,%d,%d,%d,%d,%d,E",acceleration[0],acceleration[1],acceleration[2],angular_rate[0],angular_rate[1],angular_rate[2],pressure,latitude,longitude,minute,second,0,0,0);
 80027ec:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <transmitDataFunc+0x108>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd feb9 	bl	8000568 <__aeabi_f2d>
 80027f6:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80027fa:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <transmitDataFunc+0x108>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd feb2 	bl	8000568 <__aeabi_f2d>
 8002804:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <transmitDataFunc+0x108>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4618      	mov	r0, r3
 800280e:	f7fd feab 	bl	8000568 <__aeabi_f2d>
 8002812:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002816:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <transmitDataFunc+0x10c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fea4 	bl	8000568 <__aeabi_f2d>
 8002820:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002824:	4b29      	ldr	r3, [pc, #164]	; (80028cc <transmitDataFunc+0x10c>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fe9d 	bl	8000568 <__aeabi_f2d>
 800282e:	e9c7 0100 	strd	r0, r1, [r7]
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <transmitDataFunc+0x10c>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd fe96 	bl	8000568 <__aeabi_f2d>
 800283c:	4682      	mov	sl, r0
 800283e:	468b      	mov	fp, r1
 8002840:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <transmitDataFunc+0x110>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7fd fe8f 	bl	8000568 <__aeabi_f2d>
 800284a:	4680      	mov	r8, r0
 800284c:	4689      	mov	r9, r1
 800284e:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <transmitDataFunc+0x114>)
 8002850:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002854:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <transmitDataFunc+0x118>)
 8002856:	e9d3 0100 	ldrd	r0, r1, [r3]
 800285a:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <transmitDataFunc+0x104>)
 800285c:	681e      	ldr	r6, [r3, #0]
 800285e:	4b18      	ldr	r3, [pc, #96]	; (80028c0 <transmitDataFunc+0x100>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	2300      	movs	r3, #0
 8002864:	9314      	str	r3, [sp, #80]	; 0x50
 8002866:	2300      	movs	r3, #0
 8002868:	9313      	str	r3, [sp, #76]	; 0x4c
 800286a:	2300      	movs	r3, #0
 800286c:	9312      	str	r3, [sp, #72]	; 0x48
 800286e:	9211      	str	r2, [sp, #68]	; 0x44
 8002870:	9610      	str	r6, [sp, #64]	; 0x40
 8002872:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002876:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 800287a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800287e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002882:	ed97 7b00 	vldr	d7, [r7]
 8002886:	ed8d 7b06 	vstr	d7, [sp, #24]
 800288a:	ed97 7b02 	vldr	d7, [r7, #8]
 800288e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002892:	ed97 7b04 	vldr	d7, [r7, #16]
 8002896:	ed8d 7b02 	vstr	d7, [sp, #8]
 800289a:	ed97 7b06 	vldr	d7, [r7, #24]
 800289e:	ed8d 7b00 	vstr	d7, [sp]
 80028a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028a6:	490d      	ldr	r1, [pc, #52]	; (80028dc <transmitDataFunc+0x11c>)
 80028a8:	480d      	ldr	r0, [pc, #52]	; (80028e0 <transmitDataFunc+0x120>)
 80028aa:	f012 fc3f 	bl	801512c <siprintf>
	TxProtocol(tx_buffer,150);
 80028ae:	2196      	movs	r1, #150	; 0x96
 80028b0:	480b      	ldr	r0, [pc, #44]	; (80028e0 <transmitDataFunc+0x120>)
 80028b2:	f000 ff8f 	bl	80037d4 <TxProtocol>
    osDelay(1);
 80028b6:	2001      	movs	r0, #1
 80028b8:	f00d fc48 	bl	801014c <osDelay>
	second++;
 80028bc:	e785      	b.n	80027ca <transmitDataFunc+0xa>
 80028be:	bf00      	nop
 80028c0:	200003e8 	.word	0x200003e8
 80028c4:	200003ec 	.word	0x200003ec
 80028c8:	200003c8 	.word	0x200003c8
 80028cc:	200003d4 	.word	0x200003d4
 80028d0:	200003e0 	.word	0x200003e0
 80028d4:	2000a7a0 	.word	0x2000a7a0
 80028d8:	2000a708 	.word	0x2000a708
 80028dc:	08018a04 	.word	0x08018a04
 80028e0:	2000a61c 	.word	0x2000a61c

080028e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a04      	ldr	r2, [pc, #16]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028f6:	f001 fca3 	bl	8004240 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40001000 	.word	0x40001000

08002908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800290c:	b672      	cpsid	i
}
 800290e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002910:	e7fe      	b.n	8002910 <Error_Handler+0x8>
	...

08002914 <myprintf>:
extern FIL fil;
uint8_t msg_buffer[1000];


// private functions
void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8002914:	b40f      	push	{r0, r1, r2, r3}
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800292a:	480a      	ldr	r0, [pc, #40]	; (8002954 <myprintf+0x40>)
 800292c:	f013 fb64 	bl	8015ff8 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&huart8, (uint8_t*)buffer, strlen(buffer), -1);
 8002930:	4808      	ldr	r0, [pc, #32]	; (8002954 <myprintf+0x40>)
 8002932:	f7fd fc5d 	bl	80001f0 <strlen>
 8002936:	4603      	mov	r3, r0
 8002938:	b29a      	uxth	r2, r3
 800293a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800293e:	4905      	ldr	r1, [pc, #20]	; (8002954 <myprintf+0x40>)
 8002940:	4805      	ldr	r0, [pc, #20]	; (8002958 <myprintf+0x44>)
 8002942:	f006 fc46 	bl	80091d2 <HAL_UART_Transmit>

}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002950:	b004      	add	sp, #16
 8002952:	4770      	bx	lr
 8002954:	200003f0 	.word	0x200003f0
 8002958:	2000a714 	.word	0x2000a714

0800295c <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8002968:	2201      	movs	r2, #1
 800296a:	4932      	ldr	r1, [pc, #200]	; (8002a34 <sd_init_dynamic_filename+0xd8>)
 800296c:	4832      	ldr	r0, [pc, #200]	; (8002a38 <sd_init_dynamic_filename+0xdc>)
 800296e:	f00c fa6b 	bl	800ee48 <f_mount>
 8002972:	4603      	mov	r3, r0
 8002974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8002978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8002980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002984:	4619      	mov	r1, r3
 8002986:	482d      	ldr	r0, [pc, #180]	; (8002a3c <sd_init_dynamic_filename+0xe0>)
 8002988:	f7ff ffc4 	bl	8002914 <myprintf>
		return fres;
 800298c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002990:	e04b      	b.n	8002a2a <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8002996:	f107 0320 	add.w	r3, r7, #32
 800299a:	461a      	mov	r2, r3
 800299c:	68f9      	ldr	r1, [r7, #12]
 800299e:	4825      	ldr	r0, [pc, #148]	; (8002a34 <sd_init_dynamic_filename+0xd8>)
 80029a0:	f000 f89c 	bl	8002adc <scan_files>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	4923      	ldr	r1, [pc, #140]	; (8002a40 <sd_init_dynamic_filename+0xe4>)
 80029b4:	4618      	mov	r0, r3
 80029b6:	f012 fbb9 	bl	801512c <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	4619      	mov	r1, r3
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f012 fc16 	bl	80151f2 <strcpy>
 80029c6:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80029c8:	f107 0310 	add.w	r3, r7, #16
 80029cc:	221a      	movs	r2, #26
 80029ce:	4619      	mov	r1, r3
 80029d0:	481c      	ldr	r0, [pc, #112]	; (8002a44 <sd_init_dynamic_filename+0xe8>)
 80029d2:	f00c fa9d 	bl	800ef10 <f_open>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 80029dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d11a      	bne.n	8002a1a <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 80029e4:	4818      	ldr	r0, [pc, #96]	; (8002a48 <sd_init_dynamic_filename+0xec>)
 80029e6:	f7ff ff95 	bl	8002914 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 80029ea:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <sd_init_dynamic_filename+0xe8>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	4619      	mov	r1, r3
 80029f0:	4814      	ldr	r0, [pc, #80]	; (8002a44 <sd_init_dynamic_filename+0xe8>)
 80029f2:	f00c feae 	bl	800f752 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 80029f6:	4915      	ldr	r1, [pc, #84]	; (8002a4c <sd_init_dynamic_filename+0xf0>)
 80029f8:	4815      	ldr	r0, [pc, #84]	; (8002a50 <sd_init_dynamic_filename+0xf4>)
 80029fa:	f012 fb97 	bl	801512c <siprintf>
	sd_write(&fil, msg_buffer);
 80029fe:	4914      	ldr	r1, [pc, #80]	; (8002a50 <sd_init_dynamic_filename+0xf4>)
 8002a00:	4810      	ldr	r0, [pc, #64]	; (8002a44 <sd_init_dynamic_filename+0xe8>)
 8002a02:	f000 f841 	bl	8002a88 <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	480e      	ldr	r0, [pc, #56]	; (8002a44 <sd_init_dynamic_filename+0xe8>)
 8002a0a:	f000 f83d 	bl	8002a88 <sd_write>
	f_close(&fil);
 8002a0e:	480d      	ldr	r0, [pc, #52]	; (8002a44 <sd_init_dynamic_filename+0xe8>)
 8002a10:	f00c fe70 	bl	800f6f4 <f_close>

	return fres;
 8002a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a18:	e007      	b.n	8002a2a <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8002a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a1e:	4619      	mov	r1, r3
 8002a20:	480c      	ldr	r0, [pc, #48]	; (8002a54 <sd_init_dynamic_filename+0xf8>)
 8002a22:	f7ff ff77 	bl	8002914 <myprintf>
		return fres;
 8002a26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3728      	adds	r7, #40	; 0x28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	08018a34 	.word	0x08018a34
 8002a38:	20009fe8 	.word	0x20009fe8
 8002a3c:	08018a38 	.word	0x08018a38
 8002a40:	08018ab4 	.word	0x08018ab4
 8002a44:	2000a80c 	.word	0x2000a80c
 8002a48:	08018a50 	.word	0x08018a50
 8002a4c:	08018a94 	.word	0x08018a94
 8002a50:	2000aa3c 	.word	0x2000aa3c
 8002a54:	08018a80 	.word	0x08018a80

08002a58 <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8002a60:	2212      	movs	r2, #18
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4807      	ldr	r0, [pc, #28]	; (8002a84 <sd_open_file+0x2c>)
 8002a66:	f00c fa53 	bl	800ef10 <f_open>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <sd_open_file+0x2c>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	4619      	mov	r1, r3
 8002a74:	4803      	ldr	r0, [pc, #12]	; (8002a84 <sd_open_file+0x2c>)
 8002a76:	f00c fe6c 	bl	800f752 <f_lseek>

	return fres;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	2000a80c 	.word	0x2000a80c

08002a88 <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8002a92:	6838      	ldr	r0, [r7, #0]
 8002a94:	f7fd fbac 	bl	80001f0 <strlen>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	6839      	ldr	r1, [r7, #0]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f00c fbfa 	bl	800f29a <f_write>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d107      	bne.n	8002ac0 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4807      	ldr	r0, [pc, #28]	; (8002ad4 <sd_write+0x4c>)
 8002ab6:	f7ff ff2d 	bl	8002914 <myprintf>
		return bytesWrote;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	b25b      	sxtb	r3, r3
 8002abe:	e004      	b.n	8002aca <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8002ac0:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <sd_write+0x50>)
 8002ac2:	f7ff ff27 	bl	8002914 <myprintf>
		return -1;
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	08018ac0 	.word	0x08018ac0
 8002ad8:	08018ae4 	.word	0x08018ae4

08002adc <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8002adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ade:	b099      	sub	sp, #100	; 0x64
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	466b      	mov	r3, sp
 8002aea:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8002aec:	68b8      	ldr	r0, [r7, #8]
 8002aee:	f7fd fb7f 	bl	80001f0 <strlen>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8002af8:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8002afc:	4623      	mov	r3, r4
 8002afe:	3b01      	subs	r3, #1
 8002b00:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b02:	b2e0      	uxtb	r0, r4
 8002b04:	f04f 0100 	mov.w	r1, #0
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	00cb      	lsls	r3, r1, #3
 8002b12:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002b16:	00c2      	lsls	r2, r0, #3
 8002b18:	b2e0      	uxtb	r0, r4
 8002b1a:	f04f 0100 	mov.w	r1, #0
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	00cb      	lsls	r3, r1, #3
 8002b28:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002b2c:	00c2      	lsls	r2, r0, #3
 8002b2e:	4623      	mov	r3, r4
 8002b30:	3307      	adds	r3, #7
 8002b32:	08db      	lsrs	r3, r3, #3
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	ebad 0d03 	sub.w	sp, sp, r3
 8002b3a:	466b      	mov	r3, sp
 8002b3c:	3300      	adds	r3, #0
 8002b3e:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8002b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b42:	4619      	mov	r1, r3
 8002b44:	68b8      	ldr	r0, [r7, #8]
 8002b46:	f000 f8ff 	bl	8002d48 <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8002b54:	f107 0318 	add.w	r3, r7, #24
 8002b58:	68f9      	ldr	r1, [r7, #12]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f00d f84c 	bl	800fbf8 <f_opendir>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8002b66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d16c      	bne.n	8002c48 <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002b6e:	f107 0318 	add.w	r3, r7, #24
 8002b72:	4939      	ldr	r1, [pc, #228]	; (8002c58 <scan_files+0x17c>)
 8002b74:	4618      	mov	r0, r3
 8002b76:	f00d f8e3 	bl	800fd40 <f_readdir>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8002b80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d15a      	bne.n	8002c3e <scan_files+0x162>
 8002b88:	4b33      	ldr	r3, [pc, #204]	; (8002c58 <scan_files+0x17c>)
 8002b8a:	7a5b      	ldrb	r3, [r3, #9]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d056      	beq.n	8002c3e <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8002b90:	4b31      	ldr	r3, [pc, #196]	; (8002c58 <scan_files+0x17c>)
 8002b92:	7a1b      	ldrb	r3, [r3, #8]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d14e      	bne.n	8002c3a <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8002b9c:	466b      	mov	r3, sp
 8002b9e:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8002ba0:	482e      	ldr	r0, [pc, #184]	; (8002c5c <scan_files+0x180>)
 8002ba2:	f7fd fb25 	bl	80001f0 <strlen>
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	4623      	mov	r3, r4
 8002baa:	3b01      	subs	r3, #1
 8002bac:	653b      	str	r3, [r7, #80]	; 0x50
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f04f 0100 	mov.w	r1, #0
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	00cb      	lsls	r3, r1, #3
 8002bbe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002bc2:	00c2      	lsls	r2, r0, #3
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f04f 0100 	mov.w	r1, #0
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	00cb      	lsls	r3, r1, #3
 8002bd4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002bd8:	00c2      	lsls	r2, r0, #3
 8002bda:	1de3      	adds	r3, r4, #7
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	ebad 0d03 	sub.w	sp, sp, r3
 8002be4:	466b      	mov	r3, sp
 8002be6:	3300      	adds	r3, #0
 8002be8:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8002bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bec:	4619      	mov	r1, r3
 8002bee:	481b      	ldr	r0, [pc, #108]	; (8002c5c <scan_files+0x180>)
 8002bf0:	f000 f8aa 	bl	8002d48 <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8002bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4817      	ldr	r0, [pc, #92]	; (8002c5c <scan_files+0x180>)
 8002bfe:	f012 fb00 	bl	8015202 <strncmp>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8002c08:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d112      	bne.n	8002c36 <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8002c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c12:	f107 0214 	add.w	r2, r7, #20
 8002c16:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f820 	bl	8002c60 <extract_filename_suffix>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d202      	bcs.n	8002c36 <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	46b5      	mov	sp, r6
 8002c38:	e799      	b.n	8002b6e <scan_files+0x92>
            	continue; // don't enter directory
 8002c3a:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002c3c:	e797      	b.n	8002b6e <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8002c3e:	f107 0318 	add.w	r3, r7, #24
 8002c42:	4618      	mov	r0, r3
 8002c44:	f00d f851 	bl	800fcea <f_closedir>
    }

    return res;
 8002c48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c4c:	46ad      	mov	sp, r5
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3764      	adds	r7, #100	; 0x64
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c56:	bf00      	nop
 8002c58:	200004f0 	.word	0x200004f0
 8002c5c:	200004f9 	.word	0x200004f9

08002c60 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8002c60:	b5b0      	push	{r4, r5, r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	72fb      	strb	r3, [r7, #11]
 8002c6e:	466b      	mov	r3, sp
 8002c70:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f7fd fabc 	bl	80001f0 <strlen>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8002c80:	7f7c      	ldrb	r4, [r7, #29]
 8002c82:	4623      	mov	r3, r4
 8002c84:	3b01      	subs	r3, #1
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	b2e0      	uxtb	r0, r4
 8002c8a:	f04f 0100 	mov.w	r1, #0
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	00cb      	lsls	r3, r1, #3
 8002c98:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c9c:	00c2      	lsls	r2, r0, #3
 8002c9e:	b2e0      	uxtb	r0, r4
 8002ca0:	f04f 0100 	mov.w	r1, #0
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	00cb      	lsls	r3, r1, #3
 8002cae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002cb2:	00c2      	lsls	r2, r0, #3
 8002cb4:	4623      	mov	r3, r4
 8002cb6:	3307      	adds	r3, #7
 8002cb8:	08db      	lsrs	r3, r3, #3
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	ebad 0d03 	sub.w	sp, sp, r3
 8002cc0:	466b      	mov	r3, sp
 8002cc2:	3300      	adds	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	77fb      	strb	r3, [r7, #31]
 8002cca:	e014      	b.n	8002cf6 <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8002ccc:	7afb      	ldrb	r3, [r7, #11]
 8002cce:	1e5a      	subs	r2, r3, #1
 8002cd0:	7ffb      	ldrb	r3, [r7, #31]
 8002cd2:	441a      	add	r2, r3
 8002cd4:	7fbb      	ldrb	r3, [r7, #30]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	da11      	bge.n	8002d00 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8002cdc:	7afa      	ldrb	r2, [r7, #11]
 8002cde:	7ffb      	ldrb	r3, [r7, #31]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	441a      	add	r2, r3
 8002ce8:	7ffb      	ldrb	r3, [r7, #31]
 8002cea:	7811      	ldrb	r1, [r2, #0]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8002cf0:	7ffb      	ldrb	r3, [r7, #31]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	77fb      	strb	r3, [r7, #31]
 8002cf6:	7ffa      	ldrb	r2, [r7, #31]
 8002cf8:	7f7b      	ldrb	r3, [r7, #29]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d3e6      	bcc.n	8002ccc <extract_filename_suffix+0x6c>
 8002cfe:	e000      	b.n	8002d02 <extract_filename_suffix+0xa2>
		}
		else break;
 8002d00:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f107 0110 	add.w	r1, r7, #16
 8002d08:	220a      	movs	r2, #10
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f013 f93e 	bl	8015f8c <strtol>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d00a      	beq.n	8002d36 <extract_filename_suffix+0xd6>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d28:	d005      	beq.n	8002d36 <extract_filename_suffix+0xd6>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <extract_filename_suffix+0xda>
	{
		return 1;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <extract_filename_suffix+0xdc>
	}

	return 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	46ad      	mov	sp, r5
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3720      	adds	r7, #32
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002d48 <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
 8002d56:	e019      	b.n	8002d8c <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	73bb      	strb	r3, [r7, #14]
 8002d62:	7bbb      	ldrb	r3, [r7, #14]
 8002d64:	3301      	adds	r3, #1
 8002d66:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <str2upper+0x5c>)
 8002d68:	4413      	add	r3, r2
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d102      	bne.n	8002d7a <str2upper+0x32>
 8002d74:	7bbb      	ldrb	r3, [r7, #14]
 8002d76:	3b20      	subs	r3, #32
 8002d78:	e000      	b.n	8002d7c <str2upper+0x34>
 8002d7a:	7bbb      	ldrb	r3, [r7, #14]
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	6839      	ldr	r1, [r7, #0]
 8002d80:	440a      	add	r2, r1
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	7bfc      	ldrb	r4, [r7, #15]
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fd fa2e 	bl	80001f0 <strlen>
 8002d94:	4603      	mov	r3, r0
 8002d96:	429c      	cmp	r4, r3
 8002d98:	d3de      	bcc.n	8002d58 <str2upper+0x10>
	}
}
 8002d9a:	bf00      	nop
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd90      	pop	{r4, r7, pc}
 8002da4:	08018d7c 	.word	0x08018d7c

08002da8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_MspInit+0x54>)
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	4a11      	ldr	r2, [pc, #68]	; (8002dfc <HAL_MspInit+0x54>)
 8002db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <HAL_MspInit+0x54>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_MspInit+0x54>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <HAL_MspInit+0x54>)
 8002dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_MspInit+0x54>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	210f      	movs	r1, #15
 8002dea:	f06f 0001 	mvn.w	r0, #1
 8002dee:	f001 fd95 	bl	800491c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800

08002e00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08a      	sub	sp, #40	; 0x28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <HAL_ADC_MspInit+0x7c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d127      	bne.n	8002e72 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e30:	6453      	str	r3, [r2, #68]	; 0x44
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <HAL_ADC_MspInit+0x80>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e5a:	2340      	movs	r3, #64	; 0x40
 8002e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	f107 0314 	add.w	r3, r7, #20
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4805      	ldr	r0, [pc, #20]	; (8002e84 <HAL_ADC_MspInit+0x84>)
 8002e6e:	f001 fd7f 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e72:	bf00      	nop
 8002e74:	3728      	adds	r7, #40	; 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40012000 	.word	0x40012000
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020000 	.word	0x40020000

08002e88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a29      	ldr	r2, [pc, #164]	; (8002f4c <HAL_I2C_MspInit+0xc4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d14b      	bne.n	8002f42 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <HAL_I2C_MspInit+0xc8>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4a27      	ldr	r2, [pc, #156]	; (8002f50 <HAL_I2C_MspInit+0xc8>)
 8002eb4:	f043 0304 	orr.w	r3, r3, #4
 8002eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eba:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_I2C_MspInit+0xc8>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <HAL_I2C_MspInit+0xc8>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	4a20      	ldr	r2, [pc, #128]	; (8002f50 <HAL_I2C_MspInit+0xc8>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <HAL_I2C_MspInit+0xc8>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ee8:	2312      	movs	r3, #18
 8002eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ef8:	f107 0314 	add.w	r3, r7, #20
 8002efc:	4619      	mov	r1, r3
 8002efe:	4815      	ldr	r0, [pc, #84]	; (8002f54 <HAL_I2C_MspInit+0xcc>)
 8002f00:	f001 fd36 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f0a:	2312      	movs	r3, #18
 8002f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f12:	2303      	movs	r3, #3
 8002f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f16:	2304      	movs	r3, #4
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1a:	f107 0314 	add.w	r3, r7, #20
 8002f1e:	4619      	mov	r1, r3
 8002f20:	480d      	ldr	r0, [pc, #52]	; (8002f58 <HAL_I2C_MspInit+0xd0>)
 8002f22:	f001 fd25 	bl	8004970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_I2C_MspInit+0xc8>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	4a08      	ldr	r2, [pc, #32]	; (8002f50 <HAL_I2C_MspInit+0xc8>)
 8002f30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_I2C_MspInit+0xc8>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002f42:	bf00      	nop
 8002f44:	3728      	adds	r7, #40	; 0x28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40005c00 	.word	0x40005c00
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40020800 	.word	0x40020800
 8002f58:	40020000 	.word	0x40020000

08002f5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08e      	sub	sp, #56	; 0x38
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a4c      	ldr	r2, [pc, #304]	; (80030ac <HAL_SPI_MspInit+0x150>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d12d      	bne.n	8002fda <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	623b      	str	r3, [r7, #32]
 8002f82:	4b4b      	ldr	r3, [pc, #300]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a4a      	ldr	r2, [pc, #296]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 8002f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8e:	4b48      	ldr	r3, [pc, #288]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f96:	623b      	str	r3, [r7, #32]
 8002f98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	4b44      	ldr	r3, [pc, #272]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	4a43      	ldr	r2, [pc, #268]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 8002fa4:	f043 0302 	orr.w	r3, r3, #2
 8002fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002faa:	4b41      	ldr	r3, [pc, #260]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002fb6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fc8:	2305      	movs	r3, #5
 8002fca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4838      	ldr	r0, [pc, #224]	; (80030b4 <HAL_SPI_MspInit+0x158>)
 8002fd4:	f001 fccc 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002fd8:	e064      	b.n	80030a4 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a36      	ldr	r2, [pc, #216]	; (80030b8 <HAL_SPI_MspInit+0x15c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d12d      	bne.n	8003040 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 8002fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fec:	4a30      	ldr	r2, [pc, #192]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 8002fee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ff2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff4:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	4a29      	ldr	r2, [pc, #164]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 800300a:	f043 0310 	orr.w	r3, r3, #16
 800300e:	6313      	str	r3, [r2, #48]	; 0x30
 8003010:	4b27      	ldr	r3, [pc, #156]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800301c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302a:	2303      	movs	r3, #3
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800302e:	2305      	movs	r3, #5
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003036:	4619      	mov	r1, r3
 8003038:	4820      	ldr	r0, [pc, #128]	; (80030bc <HAL_SPI_MspInit+0x160>)
 800303a:	f001 fc99 	bl	8004970 <HAL_GPIO_Init>
}
 800303e:	e031      	b.n	80030a4 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <HAL_SPI_MspInit+0x164>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d12c      	bne.n	80030a4 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	4a17      	ldr	r2, [pc, #92]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 8003054:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003058:	6453      	str	r3, [r2, #68]	; 0x44
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4a10      	ldr	r2, [pc, #64]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 8003070:	f043 0320 	orr.w	r3, r3, #32
 8003074:	6313      	str	r3, [r2, #48]	; 0x30
 8003076:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <HAL_SPI_MspInit+0x154>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003082:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003088:	2302      	movs	r3, #2
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800308c:	2301      	movs	r3, #1
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003090:	2303      	movs	r3, #3
 8003092:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003094:	2305      	movs	r3, #5
 8003096:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800309c:	4619      	mov	r1, r3
 800309e:	4809      	ldr	r0, [pc, #36]	; (80030c4 <HAL_SPI_MspInit+0x168>)
 80030a0:	f001 fc66 	bl	8004970 <HAL_GPIO_Init>
}
 80030a4:	bf00      	nop
 80030a6:	3738      	adds	r7, #56	; 0x38
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40003800 	.word	0x40003800
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40020400 	.word	0x40020400
 80030b8:	40013400 	.word	0x40013400
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40015000 	.word	0x40015000
 80030c4:	40021400 	.word	0x40021400

080030c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d8:	d115      	bne.n	8003106 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <HAL_TIM_Base_MspInit+0x48>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	4a0b      	ldr	r2, [pc, #44]	; (8003110 <HAL_TIM_Base_MspInit+0x48>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_TIM_Base_MspInit+0x48>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80030f6:	2200      	movs	r2, #0
 80030f8:	2105      	movs	r1, #5
 80030fa:	201c      	movs	r0, #28
 80030fc:	f001 fc0e 	bl	800491c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003100:	201c      	movs	r0, #28
 8003102:	f001 fc27 	bl	8004954 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800

08003114 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	f107 030c 	add.w	r3, r7, #12
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003134:	d11d      	bne.n	8003172 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_TIM_MspPostInit+0x68>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	4a0f      	ldr	r2, [pc, #60]	; (800317c <HAL_TIM_MspPostInit+0x68>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6313      	str	r3, [r2, #48]	; 0x30
 8003146:	4b0d      	ldr	r3, [pc, #52]	; (800317c <HAL_TIM_MspPostInit+0x68>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003152:	2304      	movs	r3, #4
 8003154:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003156:	2302      	movs	r3, #2
 8003158:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315e:	2300      	movs	r3, #0
 8003160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003162:	2301      	movs	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003166:	f107 030c 	add.w	r3, r7, #12
 800316a:	4619      	mov	r1, r3
 800316c:	4804      	ldr	r0, [pc, #16]	; (8003180 <HAL_TIM_MspPostInit+0x6c>)
 800316e:	f001 fbff 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003172:	bf00      	nop
 8003174:	3720      	adds	r7, #32
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800
 8003180:	40020000 	.word	0x40020000

08003184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08c      	sub	sp, #48	; 0x30
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 031c 	add.w	r3, r7, #28
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a32      	ldr	r2, [pc, #200]	; (800326c <HAL_UART_MspInit+0xe8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d12c      	bne.n	8003200 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	4b31      	ldr	r3, [pc, #196]	; (8003270 <HAL_UART_MspInit+0xec>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	4a30      	ldr	r2, [pc, #192]	; (8003270 <HAL_UART_MspInit+0xec>)
 80031b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031b4:	6413      	str	r3, [r2, #64]	; 0x40
 80031b6:	4b2e      	ldr	r3, [pc, #184]	; (8003270 <HAL_UART_MspInit+0xec>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031be:	61bb      	str	r3, [r7, #24]
 80031c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <HAL_UART_MspInit+0xec>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a29      	ldr	r2, [pc, #164]	; (8003270 <HAL_UART_MspInit+0xec>)
 80031cc:	f043 0310 	orr.w	r3, r3, #16
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b27      	ldr	r3, [pc, #156]	; (8003270 <HAL_UART_MspInit+0xec>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031de:	2303      	movs	r3, #3
 80031e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e2:	2302      	movs	r3, #2
 80031e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ea:	2303      	movs	r3, #3
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80031ee:	2308      	movs	r3, #8
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031f2:	f107 031c 	add.w	r3, r7, #28
 80031f6:	4619      	mov	r1, r3
 80031f8:	481e      	ldr	r0, [pc, #120]	; (8003274 <HAL_UART_MspInit+0xf0>)
 80031fa:	f001 fbb9 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80031fe:	e030      	b.n	8003262 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1c      	ldr	r2, [pc, #112]	; (8003278 <HAL_UART_MspInit+0xf4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d12b      	bne.n	8003262 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <HAL_UART_MspInit+0xec>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	4a17      	ldr	r2, [pc, #92]	; (8003270 <HAL_UART_MspInit+0xec>)
 8003214:	f043 0320 	orr.w	r3, r3, #32
 8003218:	6453      	str	r3, [r2, #68]	; 0x44
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <HAL_UART_MspInit+0xec>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	4b11      	ldr	r3, [pc, #68]	; (8003270 <HAL_UART_MspInit+0xec>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	4a10      	ldr	r2, [pc, #64]	; (8003270 <HAL_UART_MspInit+0xec>)
 8003230:	f043 0304 	orr.w	r3, r3, #4
 8003234:	6313      	str	r3, [r2, #48]	; 0x30
 8003236:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <HAL_UART_MspInit+0xec>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003242:	23c0      	movs	r3, #192	; 0xc0
 8003244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003246:	2302      	movs	r3, #2
 8003248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324e:	2303      	movs	r3, #3
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003252:	2308      	movs	r3, #8
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003256:	f107 031c 	add.w	r3, r7, #28
 800325a:	4619      	mov	r1, r3
 800325c:	4807      	ldr	r0, [pc, #28]	; (800327c <HAL_UART_MspInit+0xf8>)
 800325e:	f001 fb87 	bl	8004970 <HAL_GPIO_Init>
}
 8003262:	bf00      	nop
 8003264:	3730      	adds	r7, #48	; 0x30
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40007c00 	.word	0x40007c00
 8003270:	40023800 	.word	0x40023800
 8003274:	40021000 	.word	0x40021000
 8003278:	40011400 	.word	0x40011400
 800327c:	40020800 	.word	0x40020800

08003280 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08c      	sub	sp, #48	; 0x30
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003290:	2200      	movs	r2, #0
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	2036      	movs	r0, #54	; 0x36
 8003296:	f001 fb41 	bl	800491c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800329a:	2036      	movs	r0, #54	; 0x36
 800329c:	f001 fb5a 	bl	8004954 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <HAL_InitTick+0xa4>)
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <HAL_InitTick+0xa4>)
 80032aa:	f043 0310 	orr.w	r3, r3, #16
 80032ae:	6413      	str	r3, [r2, #64]	; 0x40
 80032b0:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <HAL_InitTick+0xa4>)
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032bc:	f107 0210 	add.w	r2, r7, #16
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f004 fb84 	bl	80079d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80032cc:	f004 fb5a 	bl	8007984 <HAL_RCC_GetPCLK1Freq>
 80032d0:	4603      	mov	r3, r0
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	4a13      	ldr	r2, [pc, #76]	; (8003328 <HAL_InitTick+0xa8>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	0c9b      	lsrs	r3, r3, #18
 80032e0:	3b01      	subs	r3, #1
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_InitTick+0xac>)
 80032e6:	4a12      	ldr	r2, [pc, #72]	; (8003330 <HAL_InitTick+0xb0>)
 80032e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_InitTick+0xac>)
 80032ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032f0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80032f2:	4a0e      	ldr	r2, [pc, #56]	; (800332c <HAL_InitTick+0xac>)
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <HAL_InitTick+0xac>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_InitTick+0xac>)
 8003300:	2200      	movs	r2, #0
 8003302:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003304:	4809      	ldr	r0, [pc, #36]	; (800332c <HAL_InitTick+0xac>)
 8003306:	f004 ffc9 	bl	800829c <HAL_TIM_Base_Init>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d104      	bne.n	800331a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003310:	4806      	ldr	r0, [pc, #24]	; (800332c <HAL_InitTick+0xac>)
 8003312:	f005 f813 	bl	800833c <HAL_TIM_Base_Start_IT>
 8003316:	4603      	mov	r3, r0
 8003318:	e000      	b.n	800331c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
}
 800331c:	4618      	mov	r0, r3
 800331e:	3730      	adds	r7, #48	; 0x30
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40023800 	.word	0x40023800
 8003328:	431bde83 	.word	0x431bde83
 800332c:	2000ae24 	.word	0x2000ae24
 8003330:	40001000 	.word	0x40001000

08003334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003338:	e7fe      	b.n	8003338 <NMI_Handler+0x4>

0800333a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800333e:	e7fe      	b.n	800333e <HardFault_Handler+0x4>

08003340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003344:	e7fe      	b.n	8003344 <MemManage_Handler+0x4>

08003346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800334a:	e7fe      	b.n	800334a <BusFault_Handler+0x4>

0800334c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003350:	e7fe      	b.n	8003350 <UsageFault_Handler+0x4>

08003352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003352:	b480      	push	{r7}
 8003354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003364:	2001      	movs	r0, #1
 8003366:	f001 fce1 	bl	8004d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003374:	4802      	ldr	r0, [pc, #8]	; (8003380 <TIM2_IRQHandler+0x10>)
 8003376:	f005 f8aa 	bl	80084ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	2000a7a8 	.word	0x2000a7a8

08003384 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003388:	4802      	ldr	r0, [pc, #8]	; (8003394 <TIM6_DAC_IRQHandler+0x10>)
 800338a:	f005 f8a0 	bl	80084ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	2000ae24 	.word	0x2000ae24

08003398 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800339c:	4802      	ldr	r0, [pc, #8]	; (80033a8 <OTG_FS_IRQHandler+0x10>)
 800339e:	f002 fe73 	bl	8006088 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	2000c7f4 	.word	0x2000c7f4

080033ac <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 80033bc:	bf00      	nop
 80033be:	4b18      	ldr	r3, [pc, #96]	; (8003420 <sx126x_hal_write+0x74>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a18      	ldr	r2, [pc, #96]	; (8003424 <sx126x_hal_write+0x78>)
 80033c4:	8812      	ldrh	r2, [r2, #0]
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 fc7d 	bl	8004cc8 <HAL_GPIO_ReadPin>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d0f4      	beq.n	80033be <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 80033d4:	4b14      	ldr	r3, [pc, #80]	; (8003428 <sx126x_hal_write+0x7c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a14      	ldr	r2, [pc, #80]	; (800342c <sx126x_hal_write+0x80>)
 80033da:	8811      	ldrh	r1, [r2, #0]
 80033dc:	2200      	movs	r2, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f001 fc8a 	bl	8004cf8 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 80033e4:	88fa      	ldrh	r2, [r7, #6]
 80033e6:	2364      	movs	r3, #100	; 0x64
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f004 fbad 	bl	8007b4a <HAL_SPI_Transmit>
 80033f0:	4603      	mov	r3, r0
 80033f2:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 80033f4:	8c3a      	ldrh	r2, [r7, #32]
 80033f6:	2364      	movs	r3, #100	; 0x64
 80033f8:	6839      	ldr	r1, [r7, #0]
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f004 fba5 	bl	8007b4a <HAL_SPI_Transmit>
 8003400:	4603      	mov	r3, r0
 8003402:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <sx126x_hal_write+0x7c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a08      	ldr	r2, [pc, #32]	; (800342c <sx126x_hal_write+0x80>)
 800340a:	8811      	ldrh	r1, [r2, #0]
 800340c:	2201      	movs	r2, #1
 800340e:	4618      	mov	r0, r3
 8003410:	f001 fc72 	bl	8004cf8 <HAL_GPIO_WritePin>
    return status;
 8003414:	7dfb      	ldrb	r3, [r7, #23]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	2000051c 	.word	0x2000051c
 8003424:	20000518 	.word	0x20000518
 8003428:	2000050c 	.word	0x2000050c
 800342c:	20000508 	.word	0x20000508

08003430 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 8003440:	bf00      	nop
 8003442:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <sx126x_hal_read+0x8c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1e      	ldr	r2, [pc, #120]	; (80034c0 <sx126x_hal_read+0x90>)
 8003448:	8812      	ldrh	r2, [r2, #0]
 800344a:	4611      	mov	r1, r2
 800344c:	4618      	mov	r0, r3
 800344e:	f001 fc3b 	bl	8004cc8 <HAL_GPIO_ReadPin>
 8003452:	4603      	mov	r3, r0
 8003454:	2b01      	cmp	r3, #1
 8003456:	d0f4      	beq.n	8003442 <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8003458:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <sx126x_hal_read+0x94>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1a      	ldr	r2, [pc, #104]	; (80034c8 <sx126x_hal_read+0x98>)
 800345e:	8811      	ldrh	r1, [r2, #0]
 8003460:	2200      	movs	r2, #0
 8003462:	4618      	mov	r0, r3
 8003464:	f001 fc48 	bl	8004cf8 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 8003468:	f897 3020 	ldrb.w	r3, [r7, #32]
 800346c:	b29a      	uxth	r2, r3
 800346e:	2364      	movs	r3, #100	; 0x64
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f004 fb69 	bl	8007b4a <HAL_SPI_Transmit>
 8003478:	4603      	mov	r3, r0
 800347a:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 800347c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	18d1      	adds	r1, r2, r3
 8003484:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003488:	b29b      	uxth	r3, r3
 800348a:	88fa      	ldrh	r2, [r7, #6]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	b29b      	uxth	r3, r3
 8003490:	2264      	movs	r2, #100	; 0x64
 8003492:	9200      	str	r2, [sp, #0]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f004 fc93 	bl	8007dc2 <HAL_SPI_TransmitReceive>
 800349c:	4603      	mov	r3, r0
 800349e:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 80034a0:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <sx126x_hal_read+0x94>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a08      	ldr	r2, [pc, #32]	; (80034c8 <sx126x_hal_read+0x98>)
 80034a6:	8811      	ldrh	r1, [r2, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 fc24 	bl	8004cf8 <HAL_GPIO_WritePin>
    return status;
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	2000051c 	.word	0x2000051c
 80034c0:	20000518 	.word	0x20000518
 80034c4:	2000050c 	.word	0x2000050c
 80034c8:	20000508 	.word	0x20000508

080034cc <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 80034d8:	4a05      	ldr	r2, [pc, #20]	; (80034f0 <set_NSS_pin+0x24>)
 80034da:	887b      	ldrh	r3, [r7, #2]
 80034dc:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 80034de:	4a05      	ldr	r2, [pc, #20]	; (80034f4 <set_NSS_pin+0x28>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6013      	str	r3, [r2, #0]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	20000508 	.word	0x20000508
 80034f4:	2000050c 	.word	0x2000050c

080034f8 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 8003504:	4a05      	ldr	r2, [pc, #20]	; (800351c <set_BUSY_pin+0x24>)
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 800350a:	4a05      	ldr	r2, [pc, #20]	; (8003520 <set_BUSY_pin+0x28>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6013      	str	r3, [r2, #0]
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	20000518 	.word	0x20000518
 8003520:	2000051c 	.word	0x2000051c

08003524 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 8003530:	4a05      	ldr	r2, [pc, #20]	; (8003548 <set_NRESET_pin+0x24>)
 8003532:	887b      	ldrh	r3, [r7, #2]
 8003534:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 8003536:	4a05      	ldr	r2, [pc, #20]	; (800354c <set_NRESET_pin+0x28>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6013      	str	r3, [r2, #0]
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	20000510 	.word	0x20000510
 800354c:	20000514 	.word	0x20000514

08003550 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 800355c:	4a05      	ldr	r2, [pc, #20]	; (8003574 <set_DIO1_pin+0x24>)
 800355e:	887b      	ldrh	r3, [r7, #2]
 8003560:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 8003562:	4a05      	ldr	r2, [pc, #20]	; (8003578 <set_DIO1_pin+0x28>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6013      	str	r3, [r2, #0]
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	20000520 	.word	0x20000520
 8003578:	20000524 	.word	0x20000524

0800357c <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 800357c:	b084      	sub	sp, #16
 800357e:	b580      	push	{r7, lr}
 8003580:	af00      	add	r7, sp, #0
 8003582:	f107 0c08 	add.w	ip, r7, #8
 8003586:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 800358a:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <set_hspi+0x2c>)
 800358c:	4618      	mov	r0, r3
 800358e:	f107 0308 	add.w	r3, r7, #8
 8003592:	2258      	movs	r2, #88	; 0x58
 8003594:	4619      	mov	r1, r3
 8003596:	f010 fe0f 	bl	80141b8 <memcpy>
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035a2:	b004      	add	sp, #16
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000528 	.word	0x20000528

080035ac <Tx_setup>:

void Tx_setup(){
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 80035b2:	4b66      	ldr	r3, [pc, #408]	; (800374c <Tx_setup+0x1a0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a66      	ldr	r2, [pc, #408]	; (8003750 <Tx_setup+0x1a4>)
 80035b8:	8811      	ldrh	r1, [r2, #0]
 80035ba:	2201      	movs	r2, #1
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 fb9b 	bl	8004cf8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 80035c2:	4b64      	ldr	r3, [pc, #400]	; (8003754 <Tx_setup+0x1a8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a64      	ldr	r2, [pc, #400]	; (8003758 <Tx_setup+0x1ac>)
 80035c8:	8811      	ldrh	r1, [r2, #0]
 80035ca:	2200      	movs	r2, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f001 fb93 	bl	8004cf8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80035d2:	2032      	movs	r0, #50	; 0x32
 80035d4:	f000 fe54 	bl	8004280 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 80035d8:	4b5e      	ldr	r3, [pc, #376]	; (8003754 <Tx_setup+0x1a8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a5e      	ldr	r2, [pc, #376]	; (8003758 <Tx_setup+0x1ac>)
 80035de:	8811      	ldrh	r1, [r2, #0]
 80035e0:	2201      	movs	r2, #1
 80035e2:	4618      	mov	r0, r3
 80035e4:	f001 fb88 	bl	8004cf8 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 80035e8:	2100      	movs	r1, #0
 80035ea:	485c      	ldr	r0, [pc, #368]	; (800375c <Tx_setup+0x1b0>)
 80035ec:	f000 f92e 	bl	800384c <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 80035f0:	4b5b      	ldr	r3, [pc, #364]	; (8003760 <Tx_setup+0x1b4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4619      	mov	r1, r3
 80035f6:	4859      	ldr	r0, [pc, #356]	; (800375c <Tx_setup+0x1b0>)
 80035f8:	f000 fb96 	bl	8003d28 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 80035fc:	4b59      	ldr	r3, [pc, #356]	; (8003764 <Tx_setup+0x1b8>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	4619      	mov	r1, r3
 8003602:	4856      	ldr	r0, [pc, #344]	; (800375c <Tx_setup+0x1b0>)
 8003604:	f000 fbca 	bl	8003d9c <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 8003608:	4b57      	ldr	r3, [pc, #348]	; (8003768 <Tx_setup+0x1bc>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	4619      	mov	r1, r3
 800360e:	4853      	ldr	r0, [pc, #332]	; (800375c <Tx_setup+0x1b0>)
 8003610:	f000 fa1f 	bl	8003a52 <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 8003614:	2101      	movs	r1, #1
 8003616:	4851      	ldr	r0, [pc, #324]	; (800375c <Tx_setup+0x1b0>)
 8003618:	f000 fb44 	bl	8003ca4 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 800361c:	4b53      	ldr	r3, [pc, #332]	; (800376c <Tx_setup+0x1c0>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2264      	movs	r2, #100	; 0x64
 8003622:	4619      	mov	r1, r3
 8003624:	484d      	ldr	r0, [pc, #308]	; (800375c <Tx_setup+0x1b0>)
 8003626:	f000 fb57 	bl	8003cd8 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 800362a:	4b51      	ldr	r3, [pc, #324]	; (8003770 <Tx_setup+0x1c4>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	4619      	mov	r1, r3
 8003630:	484a      	ldr	r0, [pc, #296]	; (800375c <Tx_setup+0x1b0>)
 8003632:	f000 f9ab 	bl	800398c <sx126x_cal>
    HAL_Delay(50);
 8003636:	2032      	movs	r0, #50	; 0x32
 8003638:	f000 fe22 	bl	8004280 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 800363c:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <Tx_setup+0x1c8>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	4619      	mov	r1, r3
 8003642:	4846      	ldr	r0, [pc, #280]	; (800375c <Tx_setup+0x1b0>)
 8003644:	f000 f988 	bl	8003958 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 8003648:	4b4b      	ldr	r3, [pc, #300]	; (8003778 <Tx_setup+0x1cc>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	4a4b      	ldr	r2, [pc, #300]	; (800377c <Tx_setup+0x1d0>)
 800364e:	7812      	ldrb	r2, [r2, #0]
 8003650:	4619      	mov	r1, r3
 8003652:	4842      	ldr	r0, [pc, #264]	; (800375c <Tx_setup+0x1b0>)
 8003654:	f000 f9b4 	bl	80039c0 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 8003658:	2004      	movs	r0, #4
 800365a:	f010 fd9d 	bl	8014198 <malloc>
 800365e:	4603      	mov	r3, r0
 8003660:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 8003662:	4b47      	ldr	r3, [pc, #284]	; (8003780 <Tx_setup+0x1d4>)
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 800366a:	4b46      	ldr	r3, [pc, #280]	; (8003784 <Tx_setup+0x1d8>)
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 8003672:	4b45      	ldr	r3, [pc, #276]	; (8003788 <Tx_setup+0x1dc>)
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 800367a:	4b44      	ldr	r3, [pc, #272]	; (800378c <Tx_setup+0x1e0>)
 800367c:	781a      	ldrb	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 8003682:	68f9      	ldr	r1, [r7, #12]
 8003684:	4835      	ldr	r0, [pc, #212]	; (800375c <Tx_setup+0x1b0>)
 8003686:	f000 f9bf 	bl	8003a08 <sx126x_set_pa_cfg>
    free(params);
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f010 fd8c 	bl	80141a8 <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 8003690:	4b3f      	ldr	r3, [pc, #252]	; (8003790 <Tx_setup+0x1e4>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	b25b      	sxtb	r3, r3
 8003696:	4a3f      	ldr	r2, [pc, #252]	; (8003794 <Tx_setup+0x1e8>)
 8003698:	7812      	ldrb	r2, [r2, #0]
 800369a:	4619      	mov	r1, r3
 800369c:	482f      	ldr	r0, [pc, #188]	; (800375c <Tx_setup+0x1b0>)
 800369e:	f000 fb97 	bl	8003dd0 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 80036a2:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <Tx_setup+0x1ec>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	4a3d      	ldr	r2, [pc, #244]	; (800379c <Tx_setup+0x1f0>)
 80036a8:	7812      	ldrb	r2, [r2, #0]
 80036aa:	4619      	mov	r1, r3
 80036ac:	482b      	ldr	r0, [pc, #172]	; (800375c <Tx_setup+0x1b0>)
 80036ae:	f000 fc4d 	bl	8003f4c <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 80036b2:	2004      	movs	r0, #4
 80036b4:	f010 fd70 	bl	8014198 <malloc>
 80036b8:	4603      	mov	r3, r0
 80036ba:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 80036bc:	4b38      	ldr	r3, [pc, #224]	; (80037a0 <Tx_setup+0x1f4>)
 80036be:	781a      	ldrb	r2, [r3, #0]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 80036c4:	4b37      	ldr	r3, [pc, #220]	; (80037a4 <Tx_setup+0x1f8>)
 80036c6:	781a      	ldrb	r2, [r3, #0]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 80036cc:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <Tx_setup+0x1fc>)
 80036ce:	781a      	ldrb	r2, [r3, #0]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 80036d4:	4b35      	ldr	r3, [pc, #212]	; (80037ac <Tx_setup+0x200>)
 80036d6:	781a      	ldrb	r2, [r3, #0]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	481f      	ldr	r0, [pc, #124]	; (800375c <Tx_setup+0x1b0>)
 80036e0:	f000 fb9a 	bl	8003e18 <sx126x_set_lora_mod_params>
    free(mod_params);
 80036e4:	68b8      	ldr	r0, [r7, #8]
 80036e6:	f010 fd5f 	bl	80141a8 <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 80036ea:	2006      	movs	r0, #6
 80036ec:	f010 fd54 	bl	8014198 <malloc>
 80036f0:	4603      	mov	r3, r0
 80036f2:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 80036f4:	4b2e      	ldr	r3, [pc, #184]	; (80037b0 <Tx_setup+0x204>)
 80036f6:	881a      	ldrh	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 80036fc:	4b2d      	ldr	r3, [pc, #180]	; (80037b4 <Tx_setup+0x208>)
 80036fe:	781a      	ldrb	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 8003704:	4b2c      	ldr	r3, [pc, #176]	; (80037b8 <Tx_setup+0x20c>)
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 800370c:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <Tx_setup+0x210>)
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 8003714:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <Tx_setup+0x214>)
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	480f      	ldr	r0, [pc, #60]	; (800375c <Tx_setup+0x1b0>)
 8003720:	f000 fba6 	bl	8003e70 <sx126x_set_lora_pkt_params>
    free(lora_params);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f010 fd3f 	bl	80141a8 <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 800372a:	4b26      	ldr	r3, [pc, #152]	; (80037c4 <Tx_setup+0x218>)
 800372c:	8819      	ldrh	r1, [r3, #0]
 800372e:	4b26      	ldr	r3, [pc, #152]	; (80037c8 <Tx_setup+0x21c>)
 8003730:	881a      	ldrh	r2, [r3, #0]
 8003732:	4b26      	ldr	r3, [pc, #152]	; (80037cc <Tx_setup+0x220>)
 8003734:	8818      	ldrh	r0, [r3, #0]
 8003736:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <Tx_setup+0x224>)
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4603      	mov	r3, r0
 800373e:	4807      	ldr	r0, [pc, #28]	; (800375c <Tx_setup+0x1b0>)
 8003740:	f000 fa13 	bl	8003b6a <sx126x_set_dio_irq_params>

}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000514 	.word	0x20000514
 8003750:	20000510 	.word	0x20000510
 8003754:	2000050c 	.word	0x2000050c
 8003758:	20000508 	.word	0x20000508
 800375c:	20000528 	.word	0x20000528
 8003760:	20000000 	.word	0x20000000
 8003764:	20000004 	.word	0x20000004
 8003768:	20000005 	.word	0x20000005
 800376c:	20000006 	.word	0x20000006
 8003770:	20000008 	.word	0x20000008
 8003774:	20000007 	.word	0x20000007
 8003778:	20000009 	.word	0x20000009
 800377c:	2000000a 	.word	0x2000000a
 8003780:	2000000b 	.word	0x2000000b
 8003784:	2000000c 	.word	0x2000000c
 8003788:	20000580 	.word	0x20000580
 800378c:	2000000d 	.word	0x2000000d
 8003790:	2000000e 	.word	0x2000000e
 8003794:	2000000f 	.word	0x2000000f
 8003798:	20000581 	.word	0x20000581
 800379c:	20000582 	.word	0x20000582
 80037a0:	20000010 	.word	0x20000010
 80037a4:	20000011 	.word	0x20000011
 80037a8:	20000012 	.word	0x20000012
 80037ac:	20000583 	.word	0x20000583
 80037b0:	20000014 	.word	0x20000014
 80037b4:	20000584 	.word	0x20000584
 80037b8:	20000016 	.word	0x20000016
 80037bc:	20000017 	.word	0x20000017
 80037c0:	20000585 	.word	0x20000585
 80037c4:	20000018 	.word	0x20000018
 80037c8:	2000001a 	.word	0x2000001a
 80037cc:	20000586 	.word	0x20000586
 80037d0:	20000588 	.word	0x20000588

080037d4 <TxProtocol>:

void TxProtocol(uint8_t data[], uint8_t data_length){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	70fb      	strb	r3, [r7, #3]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 80037e0:	4b18      	ldr	r3, [pc, #96]	; (8003844 <TxProtocol+0x70>)
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	4619      	mov	r1, r3
 80037e6:	4818      	ldr	r0, [pc, #96]	; (8003848 <TxProtocol+0x74>)
 80037e8:	f000 fa36 	bl	8003c58 <sx126x_clear_irq_status>
 80037ec:	4603      	mov	r3, r0
 80037ee:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_write_buffer(&hspi, 0, data, data_length); // 0 is the offset
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	2100      	movs	r1, #0
 80037f6:	4814      	ldr	r0, [pc, #80]	; (8003848 <TxProtocol+0x74>)
 80037f8:	f000 f998 	bl	8003b2c <sx126x_write_buffer>
 80037fc:	4603      	mov	r3, r0
 80037fe:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_tx(&hspi, 6000, data_length);
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	461a      	mov	r2, r3
 8003804:	f241 7170 	movw	r1, #6000	; 0x1770
 8003808:	480f      	ldr	r0, [pc, #60]	; (8003848 <TxProtocol+0x74>)
 800380a:	f000 f839 	bl	8003880 <sx126x_set_tx>
 800380e:	4603      	mov	r3, r0
 8003810:	73fb      	strb	r3, [r7, #15]
    osDelay(100);
 8003812:	2064      	movs	r0, #100	; 0x64
 8003814:	f00c fc9a 	bl	801014c <osDelay>

    sx126x_irq_mask_t irq;
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 8003818:	f107 030c 	add.w	r3, r7, #12
 800381c:	4619      	mov	r1, r3
 800381e:	480a      	ldr	r0, [pc, #40]	; (8003848 <TxProtocol+0x74>)
 8003820:	f000 f9e8 	bl	8003bf4 <sx126x_get_irq_status>
 8003824:	4603      	mov	r3, r0
 8003826:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_TX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 8003828:	89bb      	ldrh	r3, [r7, #12]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d104      	bne.n	800383c <TxProtocol+0x68>
 8003832:	89bb      	ldrh	r3, [r7, #12]
 8003834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0ed      	beq.n	8003818 <TxProtocol+0x44>
}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	2000001a 	.word	0x2000001a
 8003848:	20000528 	.word	0x20000528

0800384c <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af02      	add	r7, sp, #8
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 8003858:	2300      	movs	r3, #0
 800385a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 8003864:	f107 010c 	add.w	r1, r7, #12
 8003868:	2300      	movs	r3, #0
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	2300      	movs	r3, #0
 800386e:	2202      	movs	r2, #2
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff fd9b 	bl	80033ac <sx126x_hal_write>
 8003876:	4603      	mov	r3, r0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms , uint8_t lora_data_length)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	4613      	mov	r3, r2
 800388c:	71fb      	strb	r3, [r7, #7]
    if (packet_type == SX126X_PKT_TYPE_LORA) {
 800388e:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <sx126x_set_tx+0x7c>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d11e      	bne.n	80038d4 <sx126x_set_tx+0x54>
        struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8003896:	2006      	movs	r0, #6
 8003898:	f010 fc7e 	bl	8014198 <malloc>
 800389c:	4603      	mov	r3, r0
 800389e:	617b      	str	r3, [r7, #20]
        lora_params->preamble_len_in_symb=pkt_preamble_len;
 80038a0:	4b17      	ldr	r3, [pc, #92]	; (8003900 <sx126x_set_tx+0x80>)
 80038a2:	881a      	ldrh	r2, [r3, #0]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	801a      	strh	r2, [r3, #0]
        lora_params->header_type=header_type;
 80038a8:	4b16      	ldr	r3, [pc, #88]	; (8003904 <sx126x_set_tx+0x84>)
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	709a      	strb	r2, [r3, #2]
        lora_params->pld_len_in_bytes=lora_data_length;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	79fa      	ldrb	r2, [r7, #7]
 80038b4:	70da      	strb	r2, [r3, #3]
        lora_params->crc_is_on=crc_is_on;
 80038b6:	4b14      	ldr	r3, [pc, #80]	; (8003908 <sx126x_set_tx+0x88>)
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	711a      	strb	r2, [r3, #4]
        lora_params->invert_iq_is_on=invert_iq_is_on;
 80038be:	4b13      	ldr	r3, [pc, #76]	; (800390c <sx126x_set_tx+0x8c>)
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	715a      	strb	r2, [r3, #5]
        sx126x_set_lora_pkt_params(&hspi, lora_params);
 80038c6:	6979      	ldr	r1, [r7, #20]
 80038c8:	4811      	ldr	r0, [pc, #68]	; (8003910 <sx126x_set_tx+0x90>)
 80038ca:	f000 fad1 	bl	8003e70 <sx126x_set_lora_pkt_params>
        free(lora_params);
 80038ce:	6978      	ldr	r0, [r7, #20]
 80038d0:	f010 fc6a 	bl	80141a8 <free>
    }

    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038da:	d301      	bcc.n	80038e0 <sx126x_set_tx+0x60>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 80038dc:	2302      	movs	r3, #2
 80038de:	e008      	b.n	80038f2 <sx126x_set_tx+0x72>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 80038e0:	68b8      	ldr	r0, [r7, #8]
 80038e2:	f000 fb7d 	bl	8003fe0 <sx126x_convert_timeout_in_ms_to_rtc_step>
 80038e6:	6138      	str	r0, [r7, #16]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 80038e8:	6939      	ldr	r1, [r7, #16]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f812 	bl	8003914 <sx126x_set_tx_with_timeout_in_rtc_step>
 80038f0:	4603      	mov	r3, r0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000004 	.word	0x20000004
 8003900:	20000014 	.word	0x20000014
 8003904:	20000584 	.word	0x20000584
 8003908:	20000017 	.word	0x20000017
 800390c:	20000585 	.word	0x20000585
 8003910:	20000528 	.word	0x20000528

08003914 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af02      	add	r7, sp, #8
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_TX] = { 0 };
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_TX;
 8003922:	2383      	movs	r3, #131	; 0x83
 8003924:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	b2db      	uxtb	r3, r3
 800392c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	b2db      	uxtb	r3, r3
 8003934:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 800393c:	f107 010c 	add.w	r1, r7, #12
 8003940:	2300      	movs	r3, #0
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2300      	movs	r3, #0
 8003946:	2204      	movs	r2, #4
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff fd2f 	bl	80033ac <sx126x_hal_write>
 800394e:	4603      	mov	r3, r0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af02      	add	r7, sp, #8
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 8003964:	2300      	movs	r3, #0
 8003966:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 8003968:	2396      	movs	r3, #150	; 0x96
 800396a:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 8003970:	f107 010c 	add.w	r1, r7, #12
 8003974:	2300      	movs	r3, #0
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2300      	movs	r3, #0
 800397a:	2202      	movs	r2, #2
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff fd15 	bl	80033ac <sx126x_hal_write>
 8003982:	4603      	mov	r3, r0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af02      	add	r7, sp, #8
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 8003998:	2300      	movs	r3, #0
 800399a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 800399c:	2389      	movs	r3, #137	; 0x89
 800399e:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 80039a4:	f107 010c 	add.w	r1, r7, #12
 80039a8:	2300      	movs	r3, #0
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2300      	movs	r3, #0
 80039ae:	2202      	movs	r2, #2
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff fcfb 	bl	80033ac <sx126x_hal_write>
 80039b6:	4603      	mov	r3, r0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	70fb      	strb	r3, [r7, #3]
 80039cc:	4613      	mov	r3, r2
 80039ce:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <sx126x_cal_img_hex+0x44>)
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	81bb      	strh	r3, [r7, #12]
 80039d6:	2300      	movs	r3, #0
 80039d8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 80039da:	2398      	movs	r3, #152	; 0x98
 80039dc:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 80039e2:	78bb      	ldrb	r3, [r7, #2]
 80039e4:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 80039e6:	f107 010c 	add.w	r1, r7, #12
 80039ea:	2300      	movs	r3, #0
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2300      	movs	r3, #0
 80039f0:	2203      	movs	r2, #3
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fcda 	bl	80033ac <sx126x_hal_write>
 80039f8:	4603      	mov	r3, r0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	08018b78 	.word	0x08018b78

08003a08 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 8003a12:	2300      	movs	r3, #0
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	2300      	movs	r3, #0
 8003a18:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 8003a1a:	2395      	movs	r3, #149	; 0x95
 8003a1c:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	785b      	ldrb	r3, [r3, #1]
 8003a28:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	789b      	ldrb	r3, [r3, #2]
 8003a2e:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	78db      	ldrb	r3, [r3, #3]
 8003a34:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 8003a36:	f107 0108 	add.w	r1, r7, #8
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	2205      	movs	r2, #5
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff fcb2 	bl	80033ac <sx126x_hal_write>
 8003a48:	4603      	mov	r3, r0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b086      	sub	sp, #24
 8003a56:	af02      	add	r7, sp, #8
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 8003a5e:	2300      	movs	r3, #0
 8003a60:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 8003a62:	2393      	movs	r3, #147	; 0x93
 8003a64:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 8003a6a:	f107 010c 	add.w	r1, r7, #12
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	2300      	movs	r3, #0
 8003a74:	2202      	movs	r2, #2
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff fc98 	bl	80033ac <sx126x_hal_write>
 8003a7c:	4603      	mov	r3, r0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	461a      	mov	r2, r3
 8003a94:	460b      	mov	r3, r1
 8003a96:	817b      	strh	r3, [r7, #10]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 8003a9c:	4b0e      	ldr	r3, [pc, #56]	; (8003ad8 <sx126x_write_register+0x50>)
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	82bb      	strh	r3, [r7, #20]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 8003aa6:	230d      	movs	r3, #13
 8003aa8:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 8003aaa:	897b      	ldrh	r3, [r7, #10]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 8003ab4:	897b      	ldrh	r3, [r7, #10]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 8003aba:	7a7b      	ldrb	r3, [r7, #9]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	f107 0114 	add.w	r1, r7, #20
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f7ff fc6f 	bl	80033ac <sx126x_hal_write>
 8003ace:	4603      	mov	r3, r0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	08018b78 	.word	0x08018b78

08003adc <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	607a      	str	r2, [r7, #4]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	460b      	mov	r3, r1
 8003aea:	817b      	strh	r3, [r7, #10]
 8003aec:	4613      	mov	r3, r2
 8003aee:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 8003af4:	2303      	movs	r3, #3
 8003af6:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 8003af8:	231d      	movs	r3, #29
 8003afa:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 8003afc:	897b      	ldrh	r3, [r7, #10]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 8003b06:	897b      	ldrh	r3, [r7, #10]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 8003b0c:	f107 0110 	add.w	r1, r7, #16
 8003b10:	7a7b      	ldrb	r3, [r7, #9]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2204      	movs	r2, #4
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f7ff fc89 	bl	8003430 <sx126x_hal_read>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	75fb      	strb	r3, [r7, #23]

    return status;
 8003b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t buffer_offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	461a      	mov	r2, r3
 8003b38:	460b      	mov	r3, r1
 8003b3a:	72fb      	strb	r3, [r7, #11]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	72bb      	strb	r3, [r7, #10]
    uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = { 0 };
 8003b40:	2300      	movs	r3, #0
 8003b42:	82bb      	strh	r3, [r7, #20]

    buf[0] = SX126X_WRITE_BUFFER;
 8003b44:	230e      	movs	r3, #14
 8003b46:	753b      	strb	r3, [r7, #20]

    buf[1] = buffer_offset;
 8003b48:	7afb      	ldrb	r3, [r7, #11]
 8003b4a:	757b      	strb	r3, [r7, #21]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 8003b4c:	7abb      	ldrb	r3, [r7, #10]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	f107 0114 	add.w	r1, r7, #20
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff fc26 	bl	80033ac <sx126x_hal_write>
 8003b60:	4603      	mov	r3, r0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b08a      	sub	sp, #40	; 0x28
 8003b6e:	af02      	add	r7, sp, #8
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	4608      	mov	r0, r1
 8003b74:	4611      	mov	r1, r2
 8003b76:	461a      	mov	r2, r3
 8003b78:	4603      	mov	r3, r0
 8003b7a:	817b      	strh	r3, [r7, #10]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	813b      	strh	r3, [r7, #8]
 8003b80:	4613      	mov	r3, r2
 8003b82:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	f107 0318 	add.w	r3, r7, #24
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 8003b92:	2308      	movs	r3, #8
 8003b94:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 8003b96:	897b      	ldrh	r3, [r7, #10]
 8003b98:	0a1b      	lsrs	r3, r3, #8
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 8003ba0:	897b      	ldrh	r3, [r7, #10]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 8003ba6:	893b      	ldrh	r3, [r7, #8]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 8003bb0:	893b      	ldrh	r3, [r7, #8]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	0a1b      	lsrs	r3, r3, #8
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 8003bc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 8003bd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 8003bd6:	f107 0114 	add.w	r1, r7, #20
 8003bda:	2300      	movs	r3, #0
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	2300      	movs	r3, #0
 8003be0:	2209      	movs	r2, #9
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff fbe2 	bl	80033ac <sx126x_hal_write>
 8003be8:	4603      	mov	r3, r0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <sx126x_get_irq_status>:

sx126x_status_t sx126x_get_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_IRQ_STATUS]             = { 0x00 }; //0x00 is no operational, its just so that theyre equal
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
    uint8_t         received_buf[sizeof( sx126x_irq_mask_t )+1] = { 0x00 };
 8003c02:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <sx126x_get_irq_status+0x60>)
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	81bb      	strh	r3, [r7, #12]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                      = SX126X_STATUS_ERROR;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_IRQ_STATUS;
 8003c10:	2312      	movs	r3, #18
 8003c12:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_IRQ_STATUS, received_buf,
 8003c14:	f107 030c 	add.w	r3, r7, #12
 8003c18:	f107 0110 	add.w	r1, r7, #16
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	9200      	str	r2, [sp, #0]
 8003c20:	2204      	movs	r2, #4
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff fc04 	bl	8003430 <sx126x_hal_read>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_IRQ_STATUS );

    if( status == SX126X_STATUS_OK )
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10b      	bne.n	8003c4a <sx126x_get_irq_status+0x56>
    {
        *irq = ( ( sx126x_irq_mask_t ) received_buf[1] << 8 ) | ( ( sx126x_irq_mask_t ) received_buf[2] << 0 );
 8003c32:	7b7b      	ldrb	r3, [r7, #13]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	b21a      	sxth	r2, r3
 8003c38:	7bbb      	ldrb	r3, [r7, #14]
 8003c3a:	b21b      	sxth	r3, r3
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	b21b      	sxth	r3, r3
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	801a      	strh	r2, [r3, #0]
        status = received_buf[0]; //its the status
 8003c46:	7b3b      	ldrb	r3, [r7, #12]
 8003c48:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	08018b78 	.word	0x08018b78

08003c58 <sx126x_clear_irq_status>:

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	807b      	strh	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = { 0 };
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <sx126x_clear_irq_status+0x48>)
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	81bb      	strh	r3, [r7, #12]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CLR_IRQ_STATUS;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 8003c72:	887b      	ldrh	r3, [r7, #2]
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 8003c7c:	887b      	ldrh	r3, [r7, #2]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 8003c82:	f107 010c 	add.w	r1, r7, #12
 8003c86:	2300      	movs	r3, #0
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff fb8c 	bl	80033ac <sx126x_hal_write>
 8003c94:	4603      	mov	r3, r0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	08018b78 	.word	0x08018b78

08003ca4 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 8003cb4:	239d      	movs	r3, #157	; 0x9d
 8003cb6:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 8003cbc:	f107 010c 	add.w	r1, r7, #12
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff fb6f 	bl	80033ac <sx126x_hal_write>
 8003cce:	4603      	mov	r3, r0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	2300      	movs	r3, #0
 8003cec:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 8003cee:	2397      	movs	r3, #151	; 0x97
 8003cf0:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 8003cf2:	7afb      	ldrb	r3, [r7, #11]
 8003cf4:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 8003d0c:	f107 0110 	add.w	r1, r7, #16
 8003d10:	2300      	movs	r3, #0
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2300      	movs	r3, #0
 8003d16:	2205      	movs	r2, #5
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7ff fb47 	bl	80033ac <sx126x_hal_write>
 8003d1e:	4603      	mov	r3, r0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 8003d32:	6838      	ldr	r0, [r7, #0]
 8003d34:	f000 f92e 	bl	8003f94 <sx126x_convert_freq_in_hz_to_pll_step>
 8003d38:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f805 	bl	8003d4c <sx126x_set_rf_freq_in_pll_steps>
 8003d42:	4603      	mov	r3, r0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 8003d5e:	2386      	movs	r3, #134	; 0x86
 8003d60:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	0e1b      	lsrs	r3, r3, #24
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	0c1b      	lsrs	r3, r3, #16
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	0a1b      	lsrs	r3, r3, #8
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 8003d80:	f107 0108 	add.w	r1, r7, #8
 8003d84:	2300      	movs	r3, #0
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	2205      	movs	r2, #5
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff fb0d 	bl	80033ac <sx126x_hal_write>
 8003d92:	4603      	mov	r3, r0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 8003da8:	2300      	movs	r3, #0
 8003daa:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 8003dac:	238a      	movs	r3, #138	; 0x8a
 8003dae:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 8003db4:	f107 010c 	add.w	r1, r7, #12
 8003db8:	2300      	movs	r3, #0
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff faf3 	bl	80033ac <sx126x_hal_write>
 8003dc6:	4603      	mov	r3, r0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <sx126x_set_tx_params+0x44>)
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	81bb      	strh	r3, [r7, #12]
 8003de6:	2300      	movs	r3, #0
 8003de8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 8003dea:	238e      	movs	r3, #142	; 0x8e
 8003dec:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 8003df2:	78bb      	ldrb	r3, [r7, #2]
 8003df4:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 8003df6:	f107 010c 	add.w	r1, r7, #12
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	2203      	movs	r2, #3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff fad2 	bl	80033ac <sx126x_hal_write>
 8003e08:	4603      	mov	r3, r0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	08018b78 	.word	0x08018b78

08003e18 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 8003e22:	2303      	movs	r3, #3
 8003e24:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 8003e26:	2300      	movs	r3, #0
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 8003e2e:	238b      	movs	r3, #139	; 0x8b
 8003e30:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	785b      	ldrb	r3, [r3, #1]
 8003e3c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	789b      	ldrb	r3, [r3, #2]
 8003e42:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	78db      	ldrb	r3, [r3, #3]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 8003e50:	f107 0108 	add.w	r1, r7, #8
 8003e54:	2300      	movs	r3, #0
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	2205      	movs	r2, #5
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff faa5 	bl	80033ac <sx126x_hal_write>
 8003e62:	4603      	mov	r3, r0
 8003e64:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	f107 0314 	add.w	r3, r7, #20
 8003e86:	2100      	movs	r1, #0
 8003e88:	460a      	mov	r2, r1
 8003e8a:	801a      	strh	r2, [r3, #0]
 8003e8c:	460a      	mov	r2, r1
 8003e8e:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 8003e90:	238c      	movs	r3, #140	; 0x8c
 8003e92:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	0a1b      	lsrs	r3, r3, #8
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	789b      	ldrb	r3, [r3, #2]
 8003eac:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	78db      	ldrb	r3, [r3, #3]
 8003eb2:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	791b      	ldrb	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <sx126x_set_lora_pkt_params+0x50>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <sx126x_set_lora_pkt_params+0x52>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	795b      	ldrb	r3, [r3, #5]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <sx126x_set_lora_pkt_params+0x60>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <sx126x_set_lora_pkt_params+0x62>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 8003ed4:	f107 0110 	add.w	r1, r7, #16
 8003ed8:	2300      	movs	r3, #0
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	2300      	movs	r3, #0
 8003ede:	2207      	movs	r2, #7
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff fa63 	bl	80033ac <sx126x_hal_write>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d127      	bne.n	8003f40 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 8003ef4:	f107 020f 	add.w	r2, r7, #15
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f240 7136 	movw	r1, #1846	; 0x736
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff fdec 	bl	8003adc <sx126x_read_register>
 8003f04:	4603      	mov	r3, r0
 8003f06:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d118      	bne.n	8003f40 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	795b      	ldrb	r3, [r3, #5]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	f023 0304 	bic.w	r3, r3, #4
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	73fb      	strb	r3, [r7, #15]
 8003f20:	e004      	b.n	8003f2c <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	f043 0304 	orr.w	r3, r3, #4
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 8003f2c:	f107 020f 	add.w	r2, r7, #15
 8003f30:	2301      	movs	r3, #1
 8003f32:	f240 7136 	movw	r1, #1846	; 0x736
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff fda6 	bl	8003a88 <sx126x_write_register>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <sx126x_set_buffer_base_address+0x44>)
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	81bb      	strh	r3, [r7, #12]
 8003f62:	2300      	movs	r3, #0
 8003f64:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 8003f66:	238f      	movs	r3, #143	; 0x8f
 8003f68:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 8003f6e:	78bb      	ldrb	r3, [r7, #2]
 8003f70:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 8003f72:	f107 010c 	add.w	r1, r7, #12
 8003f76:	2300      	movs	r3, #0
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fa14 	bl	80033ac <sx126x_hal_write>
 8003f84:	4603      	mov	r3, r0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	08018b78 	.word	0x08018b78

08003f94 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a0f      	ldr	r2, [pc, #60]	; (8003fdc <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 8003fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa4:	0b1b      	lsrs	r3, r3, #12
 8003fa6:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f643 5209 	movw	r2, #15625	; 0x3d09
 8003fae:	fb02 f303 	mul.w	r3, r2, r3
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	039b      	lsls	r3, r3, #14
 8003fc0:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	4905      	ldr	r1, [pc, #20]	; (8003fdc <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 8003fc8:	fba1 1303 	umull	r1, r3, r1, r3
 8003fcc:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 8003fce:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	431bde83 	.word	0x431bde83

08003fe0 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	019b      	lsls	r3, r3, #6
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
	return 1;
 8003ffc:	2301      	movs	r3, #1
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <_kill>:

int _kill(int pid, int sig)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004012:	f00f ff9d 	bl	8013f50 <__errno>
 8004016:	4603      	mov	r3, r0
 8004018:	2216      	movs	r2, #22
 800401a:	601a      	str	r2, [r3, #0]
	return -1;
 800401c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <_exit>:

void _exit (int status)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004030:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ffe7 	bl	8004008 <_kill>
	while (1) {}		/* Make sure we hang here */
 800403a:	e7fe      	b.n	800403a <_exit+0x12>

0800403c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	e00a      	b.n	8004064 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800404e:	f3af 8000 	nop.w
 8004052:	4601      	mov	r1, r0
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	60ba      	str	r2, [r7, #8]
 800405a:	b2ca      	uxtb	r2, r1
 800405c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	3301      	adds	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	429a      	cmp	r2, r3
 800406a:	dbf0      	blt.n	800404e <_read+0x12>
	}

return len;
 800406c:	687b      	ldr	r3, [r7, #4]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b086      	sub	sp, #24
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	e009      	b.n	800409c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	60ba      	str	r2, [r7, #8]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	3301      	adds	r3, #1
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	dbf1      	blt.n	8004088 <_write+0x12>
	}
	return len;
 80040a4:	687b      	ldr	r3, [r7, #4]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <_close>:

int _close(int file)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
	return -1;
 80040b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040d6:	605a      	str	r2, [r3, #4]
	return 0;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <_isatty>:

int _isatty(int file)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
	return 1;
 80040ee:	2301      	movs	r3, #1
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
	return 0;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004120:	4a14      	ldr	r2, [pc, #80]	; (8004174 <_sbrk+0x5c>)
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <_sbrk+0x60>)
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800412c:	4b13      	ldr	r3, [pc, #76]	; (800417c <_sbrk+0x64>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d102      	bne.n	800413a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004134:	4b11      	ldr	r3, [pc, #68]	; (800417c <_sbrk+0x64>)
 8004136:	4a12      	ldr	r2, [pc, #72]	; (8004180 <_sbrk+0x68>)
 8004138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800413a:	4b10      	ldr	r3, [pc, #64]	; (800417c <_sbrk+0x64>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4413      	add	r3, r2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	429a      	cmp	r2, r3
 8004146:	d207      	bcs.n	8004158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004148:	f00f ff02 	bl	8013f50 <__errno>
 800414c:	4603      	mov	r3, r0
 800414e:	220c      	movs	r2, #12
 8004150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004156:	e009      	b.n	800416c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004158:	4b08      	ldr	r3, [pc, #32]	; (800417c <_sbrk+0x64>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800415e:	4b07      	ldr	r3, [pc, #28]	; (800417c <_sbrk+0x64>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4413      	add	r3, r2
 8004166:	4a05      	ldr	r2, [pc, #20]	; (800417c <_sbrk+0x64>)
 8004168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800416a:	68fb      	ldr	r3, [r7, #12]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20030000 	.word	0x20030000
 8004178:	00000400 	.word	0x00000400
 800417c:	2000058c 	.word	0x2000058c
 8004180:	2000cc10 	.word	0x2000cc10

08004184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <SystemInit+0x20>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	4a05      	ldr	r2, [pc, #20]	; (80041a4 <SystemInit+0x20>)
 8004190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80041a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041ac:	480d      	ldr	r0, [pc, #52]	; (80041e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80041ae:	490e      	ldr	r1, [pc, #56]	; (80041e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80041b0:	4a0e      	ldr	r2, [pc, #56]	; (80041ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041b4:	e002      	b.n	80041bc <LoopCopyDataInit>

080041b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041ba:	3304      	adds	r3, #4

080041bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041c0:	d3f9      	bcc.n	80041b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041c2:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041c4:	4c0b      	ldr	r4, [pc, #44]	; (80041f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041c8:	e001      	b.n	80041ce <LoopFillZerobss>

080041ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041cc:	3204      	adds	r2, #4

080041ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041d0:	d3fb      	bcc.n	80041ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041d2:	f7ff ffd7 	bl	8004184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041d6:	f00f ffb7 	bl	8014148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041da:	f7fd fd91 	bl	8001d00 <main>
  bx  lr    
 80041de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80041e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80041e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041e8:	2000038c 	.word	0x2000038c
  ldr r2, =_sidata
 80041ec:	08019244 	.word	0x08019244
  ldr r2, =_sbss
 80041f0:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 80041f4:	2000cc0c 	.word	0x2000cc0c

080041f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041f8:	e7fe      	b.n	80041f8 <ADC_IRQHandler>
	...

080041fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004200:	4b0e      	ldr	r3, [pc, #56]	; (800423c <HAL_Init+0x40>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a0d      	ldr	r2, [pc, #52]	; (800423c <HAL_Init+0x40>)
 8004206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800420a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_Init+0x40>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a0a      	ldr	r2, [pc, #40]	; (800423c <HAL_Init+0x40>)
 8004212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004218:	4b08      	ldr	r3, [pc, #32]	; (800423c <HAL_Init+0x40>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a07      	ldr	r2, [pc, #28]	; (800423c <HAL_Init+0x40>)
 800421e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004224:	2003      	movs	r0, #3
 8004226:	f000 fb6e 	bl	8004906 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800422a:	200f      	movs	r0, #15
 800422c:	f7ff f828 	bl	8003280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004230:	f7fe fdba 	bl	8002da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023c00 	.word	0x40023c00

08004240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_IncTick+0x20>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_IncTick+0x24>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4413      	add	r3, r2
 8004250:	4a04      	ldr	r2, [pc, #16]	; (8004264 <HAL_IncTick+0x24>)
 8004252:	6013      	str	r3, [r2, #0]
}
 8004254:	bf00      	nop
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000024 	.word	0x20000024
 8004264:	2000ae6c 	.word	0x2000ae6c

08004268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return uwTick;
 800426c:	4b03      	ldr	r3, [pc, #12]	; (800427c <HAL_GetTick+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	2000ae6c 	.word	0x2000ae6c

08004280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004288:	f7ff ffee 	bl	8004268 <HAL_GetTick>
 800428c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004298:	d005      	beq.n	80042a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800429a:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <HAL_Delay+0x44>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042a6:	bf00      	nop
 80042a8:	f7ff ffde 	bl	8004268 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d8f7      	bhi.n	80042a8 <HAL_Delay+0x28>
  {
  }
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000024 	.word	0x20000024

080042c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e033      	b.n	8004346 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fe fd8a 	bl	8002e00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b00      	cmp	r3, #0
 8004304:	d118      	bne.n	8004338 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800430e:	f023 0302 	bic.w	r3, r3, #2
 8004312:	f043 0202 	orr.w	r2, r3, #2
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f94a 	bl	80045b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f023 0303 	bic.w	r3, r3, #3
 800432e:	f043 0201 	orr.w	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40
 8004336:	e001      	b.n	800433c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004344:	7bfb      	ldrb	r3, [r7, #15]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_ADC_ConfigChannel+0x1c>
 8004368:	2302      	movs	r3, #2
 800436a:	e113      	b.n	8004594 <HAL_ADC_ConfigChannel+0x244>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b09      	cmp	r3, #9
 800437a:	d925      	bls.n	80043c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68d9      	ldr	r1, [r3, #12]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	4613      	mov	r3, r2
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	4413      	add	r3, r2
 8004390:	3b1e      	subs	r3, #30
 8004392:	2207      	movs	r2, #7
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43da      	mvns	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	400a      	ands	r2, r1
 80043a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68d9      	ldr	r1, [r3, #12]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	4618      	mov	r0, r3
 80043b4:	4603      	mov	r3, r0
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4403      	add	r3, r0
 80043ba:	3b1e      	subs	r3, #30
 80043bc:	409a      	lsls	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	60da      	str	r2, [r3, #12]
 80043c6:	e022      	b.n	800440e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6919      	ldr	r1, [r3, #16]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	4613      	mov	r3, r2
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	2207      	movs	r2, #7
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43da      	mvns	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	400a      	ands	r2, r1
 80043ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6919      	ldr	r1, [r3, #16]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	4618      	mov	r0, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	4403      	add	r3, r0
 8004404:	409a      	lsls	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b06      	cmp	r3, #6
 8004414:	d824      	bhi.n	8004460 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	3b05      	subs	r3, #5
 8004428:	221f      	movs	r2, #31
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43da      	mvns	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	400a      	ands	r2, r1
 8004436:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	b29b      	uxth	r3, r3
 8004444:	4618      	mov	r0, r3
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	3b05      	subs	r3, #5
 8004452:	fa00 f203 	lsl.w	r2, r0, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	635a      	str	r2, [r3, #52]	; 0x34
 800445e:	e04c      	b.n	80044fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b0c      	cmp	r3, #12
 8004466:	d824      	bhi.n	80044b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	3b23      	subs	r3, #35	; 0x23
 800447a:	221f      	movs	r2, #31
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	43da      	mvns	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	400a      	ands	r2, r1
 8004488:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	4618      	mov	r0, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	3b23      	subs	r3, #35	; 0x23
 80044a4:	fa00 f203 	lsl.w	r2, r0, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
 80044b0:	e023      	b.n	80044fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	3b41      	subs	r3, #65	; 0x41
 80044c4:	221f      	movs	r2, #31
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43da      	mvns	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	400a      	ands	r2, r1
 80044d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	4618      	mov	r0, r3
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	3b41      	subs	r3, #65	; 0x41
 80044ee:	fa00 f203 	lsl.w	r2, r0, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044fa:	4b29      	ldr	r3, [pc, #164]	; (80045a0 <HAL_ADC_ConfigChannel+0x250>)
 80044fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a28      	ldr	r2, [pc, #160]	; (80045a4 <HAL_ADC_ConfigChannel+0x254>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d10f      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x1d8>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b12      	cmp	r3, #18
 800450e:	d10b      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1d      	ldr	r2, [pc, #116]	; (80045a4 <HAL_ADC_ConfigChannel+0x254>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d12b      	bne.n	800458a <HAL_ADC_ConfigChannel+0x23a>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1c      	ldr	r2, [pc, #112]	; (80045a8 <HAL_ADC_ConfigChannel+0x258>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d003      	beq.n	8004544 <HAL_ADC_ConfigChannel+0x1f4>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b11      	cmp	r3, #17
 8004542:	d122      	bne.n	800458a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a11      	ldr	r2, [pc, #68]	; (80045a8 <HAL_ADC_ConfigChannel+0x258>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d111      	bne.n	800458a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004566:	4b11      	ldr	r3, [pc, #68]	; (80045ac <HAL_ADC_ConfigChannel+0x25c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a11      	ldr	r2, [pc, #68]	; (80045b0 <HAL_ADC_ConfigChannel+0x260>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	0c9a      	lsrs	r2, r3, #18
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800457c:	e002      	b.n	8004584 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	3b01      	subs	r3, #1
 8004582:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f9      	bne.n	800457e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	40012300 	.word	0x40012300
 80045a4:	40012000 	.word	0x40012000
 80045a8:	10000012 	.word	0x10000012
 80045ac:	2000001c 	.word	0x2000001c
 80045b0:	431bde83 	.word	0x431bde83

080045b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045bc:	4b79      	ldr	r3, [pc, #484]	; (80047a4 <ADC_Init+0x1f0>)
 80045be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	431a      	orrs	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6859      	ldr	r1, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	021a      	lsls	r2, r3, #8
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800460c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800462e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6899      	ldr	r1, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004646:	4a58      	ldr	r2, [pc, #352]	; (80047a8 <ADC_Init+0x1f4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d022      	beq.n	8004692 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800465a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6899      	ldr	r1, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800467c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6899      	ldr	r1, [r3, #8]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	609a      	str	r2, [r3, #8]
 8004690:	e00f      	b.n	80046b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0202 	bic.w	r2, r2, #2
 80046c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6899      	ldr	r1, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	7e1b      	ldrb	r3, [r3, #24]
 80046cc:	005a      	lsls	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01b      	beq.n	8004718 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80046fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	3b01      	subs	r3, #1
 800470c:	035a      	lsls	r2, r3, #13
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	e007      	b.n	8004728 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004726:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004736:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	3b01      	subs	r3, #1
 8004744:	051a      	lsls	r2, r3, #20
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800475c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6899      	ldr	r1, [r3, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800476a:	025a      	lsls	r2, r3, #9
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004782:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6899      	ldr	r1, [r3, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	029a      	lsls	r2, r3, #10
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	609a      	str	r2, [r3, #8]
}
 8004798:	bf00      	nop
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	40012300 	.word	0x40012300
 80047a8:	0f000001 	.word	0x0f000001

080047ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047bc:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <__NVIC_SetPriorityGrouping+0x44>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047c8:	4013      	ands	r3, r2
 80047ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047de:	4a04      	ldr	r2, [pc, #16]	; (80047f0 <__NVIC_SetPriorityGrouping+0x44>)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	60d3      	str	r3, [r2, #12]
}
 80047e4:	bf00      	nop
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	e000ed00 	.word	0xe000ed00

080047f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047f8:	4b04      	ldr	r3, [pc, #16]	; (800480c <__NVIC_GetPriorityGrouping+0x18>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	f003 0307 	and.w	r3, r3, #7
}
 8004802:	4618      	mov	r0, r3
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	e000ed00 	.word	0xe000ed00

08004810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800481a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481e:	2b00      	cmp	r3, #0
 8004820:	db0b      	blt.n	800483a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004822:	79fb      	ldrb	r3, [r7, #7]
 8004824:	f003 021f 	and.w	r2, r3, #31
 8004828:	4907      	ldr	r1, [pc, #28]	; (8004848 <__NVIC_EnableIRQ+0x38>)
 800482a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	2001      	movs	r0, #1
 8004832:	fa00 f202 	lsl.w	r2, r0, r2
 8004836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	e000e100 	.word	0xe000e100

0800484c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	6039      	str	r1, [r7, #0]
 8004856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485c:	2b00      	cmp	r3, #0
 800485e:	db0a      	blt.n	8004876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	b2da      	uxtb	r2, r3
 8004864:	490c      	ldr	r1, [pc, #48]	; (8004898 <__NVIC_SetPriority+0x4c>)
 8004866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486a:	0112      	lsls	r2, r2, #4
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	440b      	add	r3, r1
 8004870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004874:	e00a      	b.n	800488c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	b2da      	uxtb	r2, r3
 800487a:	4908      	ldr	r1, [pc, #32]	; (800489c <__NVIC_SetPriority+0x50>)
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	3b04      	subs	r3, #4
 8004884:	0112      	lsls	r2, r2, #4
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	440b      	add	r3, r1
 800488a:	761a      	strb	r2, [r3, #24]
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	e000e100 	.word	0xe000e100
 800489c:	e000ed00 	.word	0xe000ed00

080048a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b089      	sub	sp, #36	; 0x24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f1c3 0307 	rsb	r3, r3, #7
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	bf28      	it	cs
 80048be:	2304      	movcs	r3, #4
 80048c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	3304      	adds	r3, #4
 80048c6:	2b06      	cmp	r3, #6
 80048c8:	d902      	bls.n	80048d0 <NVIC_EncodePriority+0x30>
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3b03      	subs	r3, #3
 80048ce:	e000      	b.n	80048d2 <NVIC_EncodePriority+0x32>
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43da      	mvns	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	401a      	ands	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	fa01 f303 	lsl.w	r3, r1, r3
 80048f2:	43d9      	mvns	r1, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048f8:	4313      	orrs	r3, r2
         );
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3724      	adds	r7, #36	; 0x24
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff ff4c 	bl	80047ac <__NVIC_SetPriorityGrouping>
}
 8004914:	bf00      	nop
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	4603      	mov	r3, r0
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800492e:	f7ff ff61 	bl	80047f4 <__NVIC_GetPriorityGrouping>
 8004932:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	6978      	ldr	r0, [r7, #20]
 800493a:	f7ff ffb1 	bl	80048a0 <NVIC_EncodePriority>
 800493e:	4602      	mov	r2, r0
 8004940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004944:	4611      	mov	r1, r2
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff ff80 	bl	800484c <__NVIC_SetPriority>
}
 800494c:	bf00      	nop
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800495e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff ff54 	bl	8004810 <__NVIC_EnableIRQ>
}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004970:	b480      	push	{r7}
 8004972:	b089      	sub	sp, #36	; 0x24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004982:	2300      	movs	r3, #0
 8004984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	e177      	b.n	8004c7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800498c:	2201      	movs	r2, #1
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4013      	ands	r3, r2
 800499e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	f040 8166 	bne.w	8004c76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d005      	beq.n	80049c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d130      	bne.n	8004a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	2203      	movs	r2, #3
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049f8:	2201      	movs	r2, #1
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 0201 	and.w	r2, r3, #1
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d017      	beq.n	8004a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	43db      	mvns	r3, r3
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	4013      	ands	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d123      	bne.n	8004ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	08da      	lsrs	r2, r3, #3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3208      	adds	r2, #8
 8004a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	220f      	movs	r2, #15
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	08da      	lsrs	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3208      	adds	r2, #8
 8004aae:	69b9      	ldr	r1, [r7, #24]
 8004ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	2203      	movs	r2, #3
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 0203 	and.w	r2, r3, #3
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80c0 	beq.w	8004c76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	4b66      	ldr	r3, [pc, #408]	; (8004c94 <HAL_GPIO_Init+0x324>)
 8004afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afe:	4a65      	ldr	r2, [pc, #404]	; (8004c94 <HAL_GPIO_Init+0x324>)
 8004b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b04:	6453      	str	r3, [r2, #68]	; 0x44
 8004b06:	4b63      	ldr	r3, [pc, #396]	; (8004c94 <HAL_GPIO_Init+0x324>)
 8004b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b12:	4a61      	ldr	r2, [pc, #388]	; (8004c98 <HAL_GPIO_Init+0x328>)
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	089b      	lsrs	r3, r3, #2
 8004b18:	3302      	adds	r3, #2
 8004b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	220f      	movs	r2, #15
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a58      	ldr	r2, [pc, #352]	; (8004c9c <HAL_GPIO_Init+0x32c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d037      	beq.n	8004bae <HAL_GPIO_Init+0x23e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a57      	ldr	r2, [pc, #348]	; (8004ca0 <HAL_GPIO_Init+0x330>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d031      	beq.n	8004baa <HAL_GPIO_Init+0x23a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a56      	ldr	r2, [pc, #344]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d02b      	beq.n	8004ba6 <HAL_GPIO_Init+0x236>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a55      	ldr	r2, [pc, #340]	; (8004ca8 <HAL_GPIO_Init+0x338>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d025      	beq.n	8004ba2 <HAL_GPIO_Init+0x232>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a54      	ldr	r2, [pc, #336]	; (8004cac <HAL_GPIO_Init+0x33c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d01f      	beq.n	8004b9e <HAL_GPIO_Init+0x22e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a53      	ldr	r2, [pc, #332]	; (8004cb0 <HAL_GPIO_Init+0x340>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d019      	beq.n	8004b9a <HAL_GPIO_Init+0x22a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a52      	ldr	r2, [pc, #328]	; (8004cb4 <HAL_GPIO_Init+0x344>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <HAL_GPIO_Init+0x226>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a51      	ldr	r2, [pc, #324]	; (8004cb8 <HAL_GPIO_Init+0x348>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00d      	beq.n	8004b92 <HAL_GPIO_Init+0x222>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a50      	ldr	r2, [pc, #320]	; (8004cbc <HAL_GPIO_Init+0x34c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d007      	beq.n	8004b8e <HAL_GPIO_Init+0x21e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a4f      	ldr	r2, [pc, #316]	; (8004cc0 <HAL_GPIO_Init+0x350>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d101      	bne.n	8004b8a <HAL_GPIO_Init+0x21a>
 8004b86:	2309      	movs	r3, #9
 8004b88:	e012      	b.n	8004bb0 <HAL_GPIO_Init+0x240>
 8004b8a:	230a      	movs	r3, #10
 8004b8c:	e010      	b.n	8004bb0 <HAL_GPIO_Init+0x240>
 8004b8e:	2308      	movs	r3, #8
 8004b90:	e00e      	b.n	8004bb0 <HAL_GPIO_Init+0x240>
 8004b92:	2307      	movs	r3, #7
 8004b94:	e00c      	b.n	8004bb0 <HAL_GPIO_Init+0x240>
 8004b96:	2306      	movs	r3, #6
 8004b98:	e00a      	b.n	8004bb0 <HAL_GPIO_Init+0x240>
 8004b9a:	2305      	movs	r3, #5
 8004b9c:	e008      	b.n	8004bb0 <HAL_GPIO_Init+0x240>
 8004b9e:	2304      	movs	r3, #4
 8004ba0:	e006      	b.n	8004bb0 <HAL_GPIO_Init+0x240>
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e004      	b.n	8004bb0 <HAL_GPIO_Init+0x240>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e002      	b.n	8004bb0 <HAL_GPIO_Init+0x240>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <HAL_GPIO_Init+0x240>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	f002 0203 	and.w	r2, r2, #3
 8004bb6:	0092      	lsls	r2, r2, #2
 8004bb8:	4093      	lsls	r3, r2
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bc0:	4935      	ldr	r1, [pc, #212]	; (8004c98 <HAL_GPIO_Init+0x328>)
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	089b      	lsrs	r3, r3, #2
 8004bc6:	3302      	adds	r3, #2
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bce:	4b3d      	ldr	r3, [pc, #244]	; (8004cc4 <HAL_GPIO_Init+0x354>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bf2:	4a34      	ldr	r2, [pc, #208]	; (8004cc4 <HAL_GPIO_Init+0x354>)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004bf8:	4b32      	ldr	r3, [pc, #200]	; (8004cc4 <HAL_GPIO_Init+0x354>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	43db      	mvns	r3, r3
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4013      	ands	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c1c:	4a29      	ldr	r2, [pc, #164]	; (8004cc4 <HAL_GPIO_Init+0x354>)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c22:	4b28      	ldr	r3, [pc, #160]	; (8004cc4 <HAL_GPIO_Init+0x354>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c46:	4a1f      	ldr	r2, [pc, #124]	; (8004cc4 <HAL_GPIO_Init+0x354>)
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c4c:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <HAL_GPIO_Init+0x354>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	43db      	mvns	r3, r3
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c70:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <HAL_GPIO_Init+0x354>)
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	61fb      	str	r3, [r7, #28]
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b0f      	cmp	r3, #15
 8004c80:	f67f ae84 	bls.w	800498c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	3724      	adds	r7, #36	; 0x24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40023800 	.word	0x40023800
 8004c98:	40013800 	.word	0x40013800
 8004c9c:	40020000 	.word	0x40020000
 8004ca0:	40020400 	.word	0x40020400
 8004ca4:	40020800 	.word	0x40020800
 8004ca8:	40020c00 	.word	0x40020c00
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	40021400 	.word	0x40021400
 8004cb4:	40021800 	.word	0x40021800
 8004cb8:	40021c00 	.word	0x40021c00
 8004cbc:	40022000 	.word	0x40022000
 8004cc0:	40022400 	.word	0x40022400
 8004cc4:	40013c00 	.word	0x40013c00

08004cc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	887b      	ldrh	r3, [r7, #2]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
 8004ce4:	e001      	b.n	8004cea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	807b      	strh	r3, [r7, #2]
 8004d04:	4613      	mov	r3, r2
 8004d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d08:	787b      	ldrb	r3, [r7, #1]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d0e:	887a      	ldrh	r2, [r7, #2]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d14:	e003      	b.n	8004d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d16:	887b      	ldrh	r3, [r7, #2]
 8004d18:	041a      	lsls	r2, r3, #16
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	619a      	str	r2, [r3, #24]
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d006      	beq.n	8004d50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d42:	4a05      	ldr	r2, [pc, #20]	; (8004d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f806 	bl	8004d5c <HAL_GPIO_EXTI_Callback>
  }
}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40013c00 	.word	0x40013c00

08004d5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e12b      	b.n	8004fde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fe f874 	bl	8002e88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2224      	movs	r2, #36	; 0x24
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004dd8:	f002 fdd4 	bl	8007984 <HAL_RCC_GetPCLK1Freq>
 8004ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	4a81      	ldr	r2, [pc, #516]	; (8004fe8 <HAL_I2C_Init+0x274>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d807      	bhi.n	8004df8 <HAL_I2C_Init+0x84>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4a80      	ldr	r2, [pc, #512]	; (8004fec <HAL_I2C_Init+0x278>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	bf94      	ite	ls
 8004df0:	2301      	movls	r3, #1
 8004df2:	2300      	movhi	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	e006      	b.n	8004e06 <HAL_I2C_Init+0x92>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4a7d      	ldr	r2, [pc, #500]	; (8004ff0 <HAL_I2C_Init+0x27c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	bf94      	ite	ls
 8004e00:	2301      	movls	r3, #1
 8004e02:	2300      	movhi	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e0e7      	b.n	8004fde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4a78      	ldr	r2, [pc, #480]	; (8004ff4 <HAL_I2C_Init+0x280>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	0c9b      	lsrs	r3, r3, #18
 8004e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4a6a      	ldr	r2, [pc, #424]	; (8004fe8 <HAL_I2C_Init+0x274>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d802      	bhi.n	8004e48 <HAL_I2C_Init+0xd4>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	3301      	adds	r3, #1
 8004e46:	e009      	b.n	8004e5c <HAL_I2C_Init+0xe8>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	4a69      	ldr	r2, [pc, #420]	; (8004ff8 <HAL_I2C_Init+0x284>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	099b      	lsrs	r3, r3, #6
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	430b      	orrs	r3, r1
 8004e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	495c      	ldr	r1, [pc, #368]	; (8004fe8 <HAL_I2C_Init+0x274>)
 8004e78:	428b      	cmp	r3, r1
 8004e7a:	d819      	bhi.n	8004eb0 <HAL_I2C_Init+0x13c>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	1e59      	subs	r1, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e8a:	1c59      	adds	r1, r3, #1
 8004e8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e90:	400b      	ands	r3, r1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <HAL_I2C_Init+0x138>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1e59      	subs	r1, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eaa:	e051      	b.n	8004f50 <HAL_I2C_Init+0x1dc>
 8004eac:	2304      	movs	r3, #4
 8004eae:	e04f      	b.n	8004f50 <HAL_I2C_Init+0x1dc>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d111      	bne.n	8004edc <HAL_I2C_Init+0x168>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1e58      	subs	r0, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6859      	ldr	r1, [r3, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	440b      	add	r3, r1
 8004ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eca:	3301      	adds	r3, #1
 8004ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bf0c      	ite	eq
 8004ed4:	2301      	moveq	r3, #1
 8004ed6:	2300      	movne	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e012      	b.n	8004f02 <HAL_I2C_Init+0x18e>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	1e58      	subs	r0, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6859      	ldr	r1, [r3, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	0099      	lsls	r1, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <HAL_I2C_Init+0x196>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e022      	b.n	8004f50 <HAL_I2C_Init+0x1dc>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10e      	bne.n	8004f30 <HAL_I2C_Init+0x1bc>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	1e58      	subs	r0, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6859      	ldr	r1, [r3, #4]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	440b      	add	r3, r1
 8004f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f24:	3301      	adds	r3, #1
 8004f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2e:	e00f      	b.n	8004f50 <HAL_I2C_Init+0x1dc>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	1e58      	subs	r0, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6859      	ldr	r1, [r3, #4]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	0099      	lsls	r1, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f46:	3301      	adds	r3, #1
 8004f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	6809      	ldr	r1, [r1, #0]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6911      	ldr	r1, [r2, #16]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	68d2      	ldr	r2, [r2, #12]
 8004f8a:	4311      	orrs	r1, r2
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	430b      	orrs	r3, r1
 8004f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	000186a0 	.word	0x000186a0
 8004fec:	001e847f 	.word	0x001e847f
 8004ff0:	003d08ff 	.word	0x003d08ff
 8004ff4:	431bde83 	.word	0x431bde83
 8004ff8:	10624dd3 	.word	0x10624dd3

08004ffc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	4608      	mov	r0, r1
 8005006:	4611      	mov	r1, r2
 8005008:	461a      	mov	r2, r3
 800500a:	4603      	mov	r3, r0
 800500c:	817b      	strh	r3, [r7, #10]
 800500e:	460b      	mov	r3, r1
 8005010:	813b      	strh	r3, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005016:	f7ff f927 	bl	8004268 <HAL_GetTick>
 800501a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b20      	cmp	r3, #32
 8005026:	f040 80d9 	bne.w	80051dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	2319      	movs	r3, #25
 8005030:	2201      	movs	r2, #1
 8005032:	496d      	ldr	r1, [pc, #436]	; (80051e8 <HAL_I2C_Mem_Write+0x1ec>)
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 fc7f 	bl	8005938 <I2C_WaitOnFlagUntilTimeout>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
 8005042:	e0cc      	b.n	80051de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_I2C_Mem_Write+0x56>
 800504e:	2302      	movs	r3, #2
 8005050:	e0c5      	b.n	80051de <HAL_I2C_Mem_Write+0x1e2>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b01      	cmp	r3, #1
 8005066:	d007      	beq.n	8005078 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005086:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2221      	movs	r2, #33	; 0x21
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2240      	movs	r2, #64	; 0x40
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a3a      	ldr	r2, [r7, #32]
 80050a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4a4d      	ldr	r2, [pc, #308]	; (80051ec <HAL_I2C_Mem_Write+0x1f0>)
 80050b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050ba:	88f8      	ldrh	r0, [r7, #6]
 80050bc:	893a      	ldrh	r2, [r7, #8]
 80050be:	8979      	ldrh	r1, [r7, #10]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	4603      	mov	r3, r0
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 fab6 	bl	800563c <I2C_RequestMemoryWrite>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d052      	beq.n	800517c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e081      	b.n	80051de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 fd00 	bl	8005ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00d      	beq.n	8005106 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d107      	bne.n	8005102 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005100:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e06b      	b.n	80051de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	781a      	ldrb	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b04      	cmp	r3, #4
 8005142:	d11b      	bne.n	800517c <HAL_I2C_Mem_Write+0x180>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005148:	2b00      	cmp	r3, #0
 800514a:	d017      	beq.n	800517c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	781a      	ldrb	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1aa      	bne.n	80050da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fcec 	bl	8005b66 <I2C_WaitOnBTFFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00d      	beq.n	80051b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	2b04      	cmp	r3, #4
 800519a:	d107      	bne.n	80051ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e016      	b.n	80051de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	e000      	b.n	80051de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80051dc:	2302      	movs	r3, #2
  }
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	00100002 	.word	0x00100002
 80051ec:	ffff0000 	.word	0xffff0000

080051f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08c      	sub	sp, #48	; 0x30
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	4608      	mov	r0, r1
 80051fa:	4611      	mov	r1, r2
 80051fc:	461a      	mov	r2, r3
 80051fe:	4603      	mov	r3, r0
 8005200:	817b      	strh	r3, [r7, #10]
 8005202:	460b      	mov	r3, r1
 8005204:	813b      	strh	r3, [r7, #8]
 8005206:	4613      	mov	r3, r2
 8005208:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800520a:	f7ff f82d 	bl	8004268 <HAL_GetTick>
 800520e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b20      	cmp	r3, #32
 800521a:	f040 8208 	bne.w	800562e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	2319      	movs	r3, #25
 8005224:	2201      	movs	r2, #1
 8005226:	497b      	ldr	r1, [pc, #492]	; (8005414 <HAL_I2C_Mem_Read+0x224>)
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 fb85 	bl	8005938 <I2C_WaitOnFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005234:	2302      	movs	r3, #2
 8005236:	e1fb      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_I2C_Mem_Read+0x56>
 8005242:	2302      	movs	r3, #2
 8005244:	e1f4      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b01      	cmp	r3, #1
 800525a:	d007      	beq.n	800526c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800527a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2222      	movs	r2, #34	; 0x22
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2240      	movs	r2, #64	; 0x40
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005296:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800529c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4a5b      	ldr	r2, [pc, #364]	; (8005418 <HAL_I2C_Mem_Read+0x228>)
 80052ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052ae:	88f8      	ldrh	r0, [r7, #6]
 80052b0:	893a      	ldrh	r2, [r7, #8]
 80052b2:	8979      	ldrh	r1, [r7, #10]
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	4603      	mov	r3, r0
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fa52 	bl	8005768 <I2C_RequestMemoryRead>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e1b0      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d113      	bne.n	80052fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d6:	2300      	movs	r3, #0
 80052d8:	623b      	str	r3, [r7, #32]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	623b      	str	r3, [r7, #32]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	623b      	str	r3, [r7, #32]
 80052ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	e184      	b.n	8005608 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005302:	2b01      	cmp	r3, #1
 8005304:	d11b      	bne.n	800533e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005316:	2300      	movs	r3, #0
 8005318:	61fb      	str	r3, [r7, #28]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	61fb      	str	r3, [r7, #28]
 800532a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	e164      	b.n	8005608 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005342:	2b02      	cmp	r3, #2
 8005344:	d11b      	bne.n	800537e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005354:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005364:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005366:	2300      	movs	r3, #0
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	e144      	b.n	8005608 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005394:	e138      	b.n	8005608 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539a:	2b03      	cmp	r3, #3
 800539c:	f200 80f1 	bhi.w	8005582 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d123      	bne.n	80053f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 fc1b 	bl	8005be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e139      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053ee:	e10b      	b.n	8005608 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d14e      	bne.n	8005496 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	2200      	movs	r2, #0
 8005400:	4906      	ldr	r1, [pc, #24]	; (800541c <HAL_I2C_Mem_Read+0x22c>)
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fa98 	bl	8005938 <I2C_WaitOnFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e10e      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
 8005412:	bf00      	nop
 8005414:	00100002 	.word	0x00100002
 8005418:	ffff0000 	.word	0xffff0000
 800541c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005494:	e0b8      	b.n	8005608 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	2200      	movs	r2, #0
 800549e:	4966      	ldr	r1, [pc, #408]	; (8005638 <HAL_I2C_Mem_Read+0x448>)
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 fa49 	bl	8005938 <I2C_WaitOnFlagUntilTimeout>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0bf      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691a      	ldr	r2, [r3, #16]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f8:	2200      	movs	r2, #0
 80054fa:	494f      	ldr	r1, [pc, #316]	; (8005638 <HAL_I2C_Mem_Read+0x448>)
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fa1b 	bl	8005938 <I2C_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e091      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005580:	e042      	b.n	8005608 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fb2e 	bl	8005be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e04c      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055be:	b29b      	uxth	r3, r3
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d118      	bne.n	8005608 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560c:	2b00      	cmp	r3, #0
 800560e:	f47f aec2 	bne.w	8005396 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	e000      	b.n	8005630 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800562e:	2302      	movs	r3, #2
  }
}
 8005630:	4618      	mov	r0, r3
 8005632:	3728      	adds	r7, #40	; 0x28
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	00010004 	.word	0x00010004

0800563c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	4608      	mov	r0, r1
 8005646:	4611      	mov	r1, r2
 8005648:	461a      	mov	r2, r3
 800564a:	4603      	mov	r3, r0
 800564c:	817b      	strh	r3, [r7, #10]
 800564e:	460b      	mov	r3, r1
 8005650:	813b      	strh	r3, [r7, #8]
 8005652:	4613      	mov	r3, r2
 8005654:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005664:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	2200      	movs	r2, #0
 800566e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f960 	bl	8005938 <I2C_WaitOnFlagUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00d      	beq.n	800569a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568c:	d103      	bne.n	8005696 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005694:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e05f      	b.n	800575a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800569a:	897b      	ldrh	r3, [r7, #10]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	6a3a      	ldr	r2, [r7, #32]
 80056ae:	492d      	ldr	r1, [pc, #180]	; (8005764 <I2C_RequestMemoryWrite+0x128>)
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f998 	bl	80059e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e04c      	b.n	800575a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d8:	6a39      	ldr	r1, [r7, #32]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fa02 	bl	8005ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00d      	beq.n	8005702 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d107      	bne.n	80056fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e02b      	b.n	800575a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d105      	bne.n	8005714 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005708:	893b      	ldrh	r3, [r7, #8]
 800570a:	b2da      	uxtb	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	611a      	str	r2, [r3, #16]
 8005712:	e021      	b.n	8005758 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005714:	893b      	ldrh	r3, [r7, #8]
 8005716:	0a1b      	lsrs	r3, r3, #8
 8005718:	b29b      	uxth	r3, r3
 800571a:	b2da      	uxtb	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005724:	6a39      	ldr	r1, [r7, #32]
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 f9dc 	bl	8005ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00d      	beq.n	800574e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	2b04      	cmp	r3, #4
 8005738:	d107      	bne.n	800574a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005748:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e005      	b.n	800575a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800574e:	893b      	ldrh	r3, [r7, #8]
 8005750:	b2da      	uxtb	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	00010002 	.word	0x00010002

08005768 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	4608      	mov	r0, r1
 8005772:	4611      	mov	r1, r2
 8005774:	461a      	mov	r2, r3
 8005776:	4603      	mov	r3, r0
 8005778:	817b      	strh	r3, [r7, #10]
 800577a:	460b      	mov	r3, r1
 800577c:	813b      	strh	r3, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005790:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 f8c2 	bl	8005938 <I2C_WaitOnFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00d      	beq.n	80057d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c8:	d103      	bne.n	80057d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e0aa      	b.n	800592c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057d6:	897b      	ldrh	r3, [r7, #10]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	461a      	mov	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	6a3a      	ldr	r2, [r7, #32]
 80057ea:	4952      	ldr	r1, [pc, #328]	; (8005934 <I2C_RequestMemoryRead+0x1cc>)
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f8fa 	bl	80059e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e097      	b.n	800592c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005814:	6a39      	ldr	r1, [r7, #32]
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 f964 	bl	8005ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00d      	beq.n	800583e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	2b04      	cmp	r3, #4
 8005828:	d107      	bne.n	800583a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005838:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e076      	b.n	800592c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d105      	bne.n	8005850 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005844:	893b      	ldrh	r3, [r7, #8]
 8005846:	b2da      	uxtb	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	611a      	str	r2, [r3, #16]
 800584e:	e021      	b.n	8005894 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005850:	893b      	ldrh	r3, [r7, #8]
 8005852:	0a1b      	lsrs	r3, r3, #8
 8005854:	b29b      	uxth	r3, r3
 8005856:	b2da      	uxtb	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800585e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005860:	6a39      	ldr	r1, [r7, #32]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f93e 	bl	8005ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00d      	beq.n	800588a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	2b04      	cmp	r3, #4
 8005874:	d107      	bne.n	8005886 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005884:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e050      	b.n	800592c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800588a:	893b      	ldrh	r3, [r7, #8]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005896:	6a39      	ldr	r1, [r7, #32]
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 f923 	bl	8005ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00d      	beq.n	80058c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d107      	bne.n	80058bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e035      	b.n	800592c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 f82b 	bl	8005938 <I2C_WaitOnFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00d      	beq.n	8005904 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f6:	d103      	bne.n	8005900 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e013      	b.n	800592c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005904:	897b      	ldrh	r3, [r7, #10]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f043 0301 	orr.w	r3, r3, #1
 800590c:	b2da      	uxtb	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	6a3a      	ldr	r2, [r7, #32]
 8005918:	4906      	ldr	r1, [pc, #24]	; (8005934 <I2C_RequestMemoryRead+0x1cc>)
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 f863 	bl	80059e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e000      	b.n	800592c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	00010002 	.word	0x00010002

08005938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005948:	e025      	b.n	8005996 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005950:	d021      	beq.n	8005996 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005952:	f7fe fc89 	bl	8004268 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d302      	bcc.n	8005968 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d116      	bne.n	8005996 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f043 0220 	orr.w	r2, r3, #32
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e023      	b.n	80059de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	0c1b      	lsrs	r3, r3, #16
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b01      	cmp	r3, #1
 800599e:	d10d      	bne.n	80059bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	43da      	mvns	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4013      	ands	r3, r2
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	bf0c      	ite	eq
 80059b2:	2301      	moveq	r3, #1
 80059b4:	2300      	movne	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	e00c      	b.n	80059d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	43da      	mvns	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4013      	ands	r3, r2
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	bf0c      	ite	eq
 80059ce:	2301      	moveq	r3, #1
 80059d0:	2300      	movne	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d0b6      	beq.n	800594a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
 80059f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059f4:	e051      	b.n	8005a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a04:	d123      	bne.n	8005a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	f043 0204 	orr.w	r2, r3, #4
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e046      	b.n	8005adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a54:	d021      	beq.n	8005a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a56:	f7fe fc07 	bl	8004268 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d302      	bcc.n	8005a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d116      	bne.n	8005a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	f043 0220 	orr.w	r2, r3, #32
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e020      	b.n	8005adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	0c1b      	lsrs	r3, r3, #16
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d10c      	bne.n	8005abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	43da      	mvns	r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	bf14      	ite	ne
 8005ab6:	2301      	movne	r3, #1
 8005ab8:	2300      	moveq	r3, #0
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	e00b      	b.n	8005ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	43da      	mvns	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d18d      	bne.n	80059f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005af0:	e02d      	b.n	8005b4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f8ce 	bl	8005c94 <I2C_IsAcknowledgeFailed>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e02d      	b.n	8005b5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b08:	d021      	beq.n	8005b4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0a:	f7fe fbad 	bl	8004268 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d302      	bcc.n	8005b20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d116      	bne.n	8005b4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	f043 0220 	orr.w	r2, r3, #32
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e007      	b.n	8005b5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b58:	2b80      	cmp	r3, #128	; 0x80
 8005b5a:	d1ca      	bne.n	8005af2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b72:	e02d      	b.n	8005bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 f88d 	bl	8005c94 <I2C_IsAcknowledgeFailed>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e02d      	b.n	8005be0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b8a:	d021      	beq.n	8005bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8c:	f7fe fb6c 	bl	8004268 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d302      	bcc.n	8005ba2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d116      	bne.n	8005bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	f043 0220 	orr.w	r2, r3, #32
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e007      	b.n	8005be0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d1ca      	bne.n	8005b74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bf4:	e042      	b.n	8005c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d119      	bne.n	8005c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0210 	mvn.w	r2, #16
 8005c0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e029      	b.n	8005c8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c38:	f7fe fb16 	bl	8004268 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d302      	bcc.n	8005c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d116      	bne.n	8005c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c68:	f043 0220 	orr.w	r2, r3, #32
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e007      	b.n	8005c8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c86:	2b40      	cmp	r3, #64	; 0x40
 8005c88:	d1b5      	bne.n	8005bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005caa:	d11b      	bne.n	8005ce4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	f043 0204 	orr.w	r2, r3, #4
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	d129      	bne.n	8005d5c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2224      	movs	r2, #36	; 0x24
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0201 	bic.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0210 	bic.w	r2, r2, #16
 8005d2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0201 	orr.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e000      	b.n	8005d5e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005d5c:	2302      	movs	r3, #2
  }
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b085      	sub	sp, #20
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d12a      	bne.n	8005dda <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2224      	movs	r2, #36	; 0x24
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0201 	bic.w	r2, r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005da4:	89fb      	ldrh	r3, [r7, #14]
 8005da6:	f023 030f 	bic.w	r3, r3, #15
 8005daa:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	89fb      	ldrh	r3, [r7, #14]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	89fa      	ldrh	r2, [r7, #14]
 8005dbc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0201 	orr.w	r2, r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e000      	b.n	8005ddc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005dda:	2302      	movs	r3, #2
  }
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dea:	b08f      	sub	sp, #60	; 0x3c
 8005dec:	af0a      	add	r7, sp, #40	; 0x28
 8005dee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e10f      	b.n	800601a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d106      	bne.n	8005e1a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f00d fd79 	bl	801390c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d102      	bne.n	8005e34 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f003 fda8 	bl	800998e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	687e      	ldr	r6, [r7, #4]
 8005e46:	466d      	mov	r5, sp
 8005e48:	f106 0410 	add.w	r4, r6, #16
 8005e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e58:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e5c:	1d33      	adds	r3, r6, #4
 8005e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e60:	6838      	ldr	r0, [r7, #0]
 8005e62:	f003 fc7f 	bl	8009764 <USB_CoreInit>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e0d0      	b.n	800601a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f003 fd96 	bl	80099b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e84:	2300      	movs	r3, #0
 8005e86:	73fb      	strb	r3, [r7, #15]
 8005e88:	e04a      	b.n	8005f20 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e8a:	7bfa      	ldrb	r2, [r7, #15]
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	1a9b      	subs	r3, r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	440b      	add	r3, r1
 8005e98:	333d      	adds	r3, #61	; 0x3d
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e9e:	7bfa      	ldrb	r2, [r7, #15]
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	1a9b      	subs	r3, r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	440b      	add	r3, r1
 8005eac:	333c      	adds	r3, #60	; 0x3c
 8005eae:	7bfa      	ldrb	r2, [r7, #15]
 8005eb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005eb2:	7bfa      	ldrb	r2, [r7, #15]
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	b298      	uxth	r0, r3
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	1a9b      	subs	r3, r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	3342      	adds	r3, #66	; 0x42
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005eca:	7bfa      	ldrb	r2, [r7, #15]
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	333f      	adds	r3, #63	; 0x3f
 8005eda:	2200      	movs	r2, #0
 8005edc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ede:	7bfa      	ldrb	r2, [r7, #15]
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	3344      	adds	r3, #68	; 0x44
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ef2:	7bfa      	ldrb	r2, [r7, #15]
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	3348      	adds	r3, #72	; 0x48
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f06:	7bfa      	ldrb	r2, [r7, #15]
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	3350      	adds	r3, #80	; 0x50
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
 8005f20:	7bfa      	ldrb	r2, [r7, #15]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d3af      	bcc.n	8005e8a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]
 8005f2e:	e044      	b.n	8005fba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f30:	7bfa      	ldrb	r2, [r7, #15]
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	4613      	mov	r3, r2
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	1a9b      	subs	r3, r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005f42:	2200      	movs	r2, #0
 8005f44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f46:	7bfa      	ldrb	r2, [r7, #15]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005f58:	7bfa      	ldrb	r2, [r7, #15]
 8005f5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f5c:	7bfa      	ldrb	r2, [r7, #15]
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	1a9b      	subs	r3, r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005f6e:	2200      	movs	r2, #0
 8005f70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f72:	7bfa      	ldrb	r2, [r7, #15]
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	4613      	mov	r3, r2
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	440b      	add	r3, r1
 8005f80:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f88:	7bfa      	ldrb	r2, [r7, #15]
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	1a9b      	subs	r3, r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	440b      	add	r3, r1
 8005f96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f9e:	7bfa      	ldrb	r2, [r7, #15]
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	73fb      	strb	r3, [r7, #15]
 8005fba:	7bfa      	ldrb	r2, [r7, #15]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d3b5      	bcc.n	8005f30 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	687e      	ldr	r6, [r7, #4]
 8005fcc:	466d      	mov	r5, sp
 8005fce:	f106 0410 	add.w	r4, r6, #16
 8005fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fde:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fe2:	1d33      	adds	r3, r6, #4
 8005fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fe6:	6838      	ldr	r0, [r7, #0]
 8005fe8:	f003 fd2e 	bl	8009a48 <USB_DevInit>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e00d      	b.n	800601a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f004 fdaa 	bl	800ab6c <USB_DevDisconnect>

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006022 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006036:	2b01      	cmp	r3, #1
 8006038:	d101      	bne.n	800603e <HAL_PCD_Start+0x1c>
 800603a:	2302      	movs	r3, #2
 800603c:	e020      	b.n	8006080 <HAL_PCD_Start+0x5e>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	2b01      	cmp	r3, #1
 800604c:	d109      	bne.n	8006062 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006052:	2b01      	cmp	r3, #1
 8006054:	d005      	beq.n	8006062 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f003 fc80 	bl	800996c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f004 fd5a 	bl	800ab2a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006088:	b590      	push	{r4, r7, lr}
 800608a:	b08d      	sub	sp, #52	; 0x34
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f004 fe18 	bl	800acd4 <USB_GetMode>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f040 839d 	bne.w	80067e6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f004 fd7c 	bl	800abae <USB_ReadInterrupts>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8393 	beq.w	80067e4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f004 fd73 	bl	800abae <USB_ReadInterrupts>
 80060c8:	4603      	mov	r3, r0
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d107      	bne.n	80060e2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695a      	ldr	r2, [r3, #20]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f002 0202 	and.w	r2, r2, #2
 80060e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f004 fd61 	bl	800abae <USB_ReadInterrupts>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f003 0310 	and.w	r3, r3, #16
 80060f2:	2b10      	cmp	r3, #16
 80060f4:	d161      	bne.n	80061ba <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699a      	ldr	r2, [r3, #24]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0210 	bic.w	r2, r2, #16
 8006104:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	f003 020f 	and.w	r2, r3, #15
 8006112:	4613      	mov	r3, r2
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	4413      	add	r3, r2
 8006122:	3304      	adds	r3, #4
 8006124:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	0c5b      	lsrs	r3, r3, #17
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	2b02      	cmp	r3, #2
 8006130:	d124      	bne.n	800617c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006138:	4013      	ands	r3, r2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d035      	beq.n	80061aa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	091b      	lsrs	r3, r3, #4
 8006146:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006148:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800614c:	b29b      	uxth	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	6a38      	ldr	r0, [r7, #32]
 8006152:	f004 fb98 	bl	800a886 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	091b      	lsrs	r3, r3, #4
 800615e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006162:	441a      	add	r2, r3
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	699a      	ldr	r2, [r3, #24]
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	091b      	lsrs	r3, r3, #4
 8006170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006174:	441a      	add	r2, r3
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	619a      	str	r2, [r3, #24]
 800617a:	e016      	b.n	80061aa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	0c5b      	lsrs	r3, r3, #17
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	2b06      	cmp	r3, #6
 8006186:	d110      	bne.n	80061aa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800618e:	2208      	movs	r2, #8
 8006190:	4619      	mov	r1, r3
 8006192:	6a38      	ldr	r0, [r7, #32]
 8006194:	f004 fb77 	bl	800a886 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	699a      	ldr	r2, [r3, #24]
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	091b      	lsrs	r3, r3, #4
 80061a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061a4:	441a      	add	r2, r3
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699a      	ldr	r2, [r3, #24]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0210 	orr.w	r2, r2, #16
 80061b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4618      	mov	r0, r3
 80061c0:	f004 fcf5 	bl	800abae <USB_ReadInterrupts>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061ce:	d16e      	bne.n	80062ae <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4618      	mov	r0, r3
 80061da:	f004 fcfb 	bl	800abd4 <USB_ReadDevAllOutEpInterrupt>
 80061de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80061e0:	e062      	b.n	80062a8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d057      	beq.n	800629c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	4611      	mov	r1, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f004 fd20 	bl	800ac3c <USB_ReadDevOutEPInterrupt>
 80061fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00c      	beq.n	8006222 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006214:	461a      	mov	r2, r3
 8006216:	2301      	movs	r3, #1
 8006218:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800621a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fdb1 	bl	8006d84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00c      	beq.n	8006246 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006238:	461a      	mov	r2, r3
 800623a:	2308      	movs	r3, #8
 800623c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800623e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 feab 	bl	8006f9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625c:	461a      	mov	r2, r3
 800625e:	2310      	movs	r3, #16
 8006260:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f003 0320 	and.w	r3, r3, #32
 8006268:	2b00      	cmp	r3, #0
 800626a:	d008      	beq.n	800627e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	461a      	mov	r2, r3
 800627a:	2320      	movs	r3, #32
 800627c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d009      	beq.n	800629c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006294:	461a      	mov	r2, r3
 8006296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800629a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	3301      	adds	r3, #1
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d199      	bne.n	80061e2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f004 fc7b 	bl	800abae <USB_ReadInterrupts>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062c2:	f040 80c0 	bne.w	8006446 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f004 fc9c 	bl	800ac08 <USB_ReadDevAllInEpInterrupt>
 80062d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80062d6:	e0b2      	b.n	800643e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 80a7 	beq.w	8006432 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	4611      	mov	r1, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f004 fcc2 	bl	800ac78 <USB_ReadDevInEPInterrupt>
 80062f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d057      	beq.n	80063b0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	2201      	movs	r2, #1
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	43db      	mvns	r3, r3
 800631a:	69f9      	ldr	r1, [r7, #28]
 800631c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006320:	4013      	ands	r3, r2
 8006322:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	461a      	mov	r2, r3
 8006332:	2301      	movs	r3, #1
 8006334:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d132      	bne.n	80063a4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006342:	4613      	mov	r3, r2
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	1a9b      	subs	r3, r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	440b      	add	r3, r1
 800634c:	3348      	adds	r3, #72	; 0x48
 800634e:	6819      	ldr	r1, [r3, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006354:	4613      	mov	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4403      	add	r3, r0
 800635e:	3344      	adds	r3, #68	; 0x44
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4419      	add	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006368:	4613      	mov	r3, r2
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4403      	add	r3, r0
 8006372:	3348      	adds	r3, #72	; 0x48
 8006374:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	2b00      	cmp	r3, #0
 800637a:	d113      	bne.n	80063a4 <HAL_PCD_IRQHandler+0x31c>
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006380:	4613      	mov	r3, r2
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	1a9b      	subs	r3, r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	440b      	add	r3, r1
 800638a:	3350      	adds	r3, #80	; 0x50
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d108      	bne.n	80063a4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800639c:	461a      	mov	r2, r3
 800639e:	2101      	movs	r1, #1
 80063a0:	f004 fcca 	bl	800ad38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	4619      	mov	r1, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f00d fb3d 	bl	8013a2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d008      	beq.n	80063cc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c6:	461a      	mov	r2, r3
 80063c8:	2308      	movs	r3, #8
 80063ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d008      	beq.n	80063e8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e2:	461a      	mov	r2, r3
 80063e4:	2310      	movs	r3, #16
 80063e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d008      	beq.n	8006404 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fe:	461a      	mov	r2, r3
 8006400:	2340      	movs	r3, #64	; 0x40
 8006402:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d008      	beq.n	8006420 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641a:	461a      	mov	r2, r3
 800641c:	2302      	movs	r3, #2
 800641e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800642a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fc1b 	bl	8006c68 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	3301      	adds	r3, #1
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	2b00      	cmp	r3, #0
 8006442:	f47f af49 	bne.w	80062d8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f004 fbaf 	bl	800abae <USB_ReadInterrupts>
 8006450:	4603      	mov	r3, r0
 8006452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800645a:	d122      	bne.n	80064a2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800646a:	f023 0301 	bic.w	r3, r3, #1
 800646e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006476:	2b01      	cmp	r3, #1
 8006478:	d108      	bne.n	800648c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006482:	2100      	movs	r1, #0
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fe27 	bl	80070d8 <HAL_PCDEx_LPM_Callback>
 800648a:	e002      	b.n	8006492 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f00d fb43 	bl	8013b18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	695a      	ldr	r2, [r3, #20]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80064a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f004 fb81 	bl	800abae <USB_ReadInterrupts>
 80064ac:	4603      	mov	r3, r0
 80064ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064b6:	d112      	bne.n	80064de <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d102      	bne.n	80064ce <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f00d faff 	bl	8013acc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695a      	ldr	r2, [r3, #20]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80064dc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f004 fb63 	bl	800abae <USB_ReadInterrupts>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f2:	f040 80c7 	bne.w	8006684 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006504:	f023 0301 	bic.w	r3, r3, #1
 8006508:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2110      	movs	r1, #16
 8006510:	4618      	mov	r0, r3
 8006512:	f003 fbfd 	bl	8009d10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006516:	2300      	movs	r3, #0
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800651a:	e056      	b.n	80065ca <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006528:	461a      	mov	r2, r3
 800652a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800652e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	440a      	add	r2, r1
 8006546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800654a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800654e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006560:	0151      	lsls	r1, r2, #5
 8006562:	69fa      	ldr	r2, [r7, #28]
 8006564:	440a      	add	r2, r1
 8006566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800656e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657c:	461a      	mov	r2, r3
 800657e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006582:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	440a      	add	r2, r1
 800659a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800659e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065b4:	0151      	lsls	r1, r2, #5
 80065b6:	69fa      	ldr	r2, [r7, #28]
 80065b8:	440a      	add	r2, r1
 80065ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	3301      	adds	r3, #1
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d3a3      	bcc.n	800651c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	69fa      	ldr	r2, [r7, #28]
 80065de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80065e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d016      	beq.n	800661e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006600:	f043 030b 	orr.w	r3, r3, #11
 8006604:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006616:	f043 030b 	orr.w	r3, r3, #11
 800661a:	6453      	str	r3, [r2, #68]	; 0x44
 800661c:	e015      	b.n	800664a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800662c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006630:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006634:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006644:	f043 030b 	orr.w	r3, r3, #11
 8006648:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006658:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800665c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800666e:	461a      	mov	r2, r3
 8006670:	f004 fb62 	bl	800ad38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f004 fa90 	bl	800abae <USB_ReadInterrupts>
 800668e:	4603      	mov	r3, r0
 8006690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006698:	d124      	bne.n	80066e4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f004 fb26 	bl	800acf0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f003 fb8e 	bl	8009dca <USB_GetDevSpeed>
 80066ae:	4603      	mov	r3, r0
 80066b0:	461a      	mov	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681c      	ldr	r4, [r3, #0]
 80066ba:	f001 f957 	bl	800796c <HAL_RCC_GetHCLKFreq>
 80066be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	461a      	mov	r2, r3
 80066c8:	4620      	mov	r0, r4
 80066ca:	f003 f8ad 	bl	8009828 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f00d f9d3 	bl	8013a7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80066e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f004 fa60 	bl	800abae <USB_ReadInterrupts>
 80066ee:	4603      	mov	r3, r0
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d10a      	bne.n	800670e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f00d f9b0 	bl	8013a5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695a      	ldr	r2, [r3, #20]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f002 0208 	and.w	r2, r2, #8
 800670c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	f004 fa4b 	bl	800abae <USB_ReadInterrupts>
 8006718:	4603      	mov	r3, r0
 800671a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800671e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006722:	d10f      	bne.n	8006744 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	b2db      	uxtb	r3, r3
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f00d fa12 	bl	8013b58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695a      	ldr	r2, [r3, #20]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4618      	mov	r0, r3
 800674a:	f004 fa30 	bl	800abae <USB_ReadInterrupts>
 800674e:	4603      	mov	r3, r0
 8006750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006758:	d10f      	bne.n	800677a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	b2db      	uxtb	r3, r3
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f00d f9e5 	bl	8013b34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	695a      	ldr	r2, [r3, #20]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4618      	mov	r0, r3
 8006780:	f004 fa15 	bl	800abae <USB_ReadInterrupts>
 8006784:	4603      	mov	r3, r0
 8006786:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800678a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678e:	d10a      	bne.n	80067a6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f00d f9f3 	bl	8013b7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695a      	ldr	r2, [r3, #20]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80067a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f004 f9ff 	bl	800abae <USB_ReadInterrupts>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f003 0304 	and.w	r3, r3, #4
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d115      	bne.n	80067e6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f00d f9e3 	bl	8013b98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6859      	ldr	r1, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
 80067e2:	e000      	b.n	80067e6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80067e4:	bf00      	nop
    }
  }
}
 80067e6:	3734      	adds	r7, #52	; 0x34
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd90      	pop	{r4, r7, pc}

080067ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <HAL_PCD_SetAddress+0x1a>
 8006802:	2302      	movs	r3, #2
 8006804:	e013      	b.n	800682e <HAL_PCD_SetAddress+0x42>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	78fa      	ldrb	r2, [r7, #3]
 8006812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	4611      	mov	r1, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f004 f95d 	bl	800aade <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	4608      	mov	r0, r1
 8006840:	4611      	mov	r1, r2
 8006842:	461a      	mov	r2, r3
 8006844:	4603      	mov	r3, r0
 8006846:	70fb      	strb	r3, [r7, #3]
 8006848:	460b      	mov	r3, r1
 800684a:	803b      	strh	r3, [r7, #0]
 800684c:	4613      	mov	r3, r2
 800684e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006858:	2b00      	cmp	r3, #0
 800685a:	da0f      	bge.n	800687c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	f003 020f 	and.w	r2, r3, #15
 8006862:	4613      	mov	r3, r2
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	1a9b      	subs	r3, r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	3338      	adds	r3, #56	; 0x38
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	4413      	add	r3, r2
 8006870:	3304      	adds	r3, #4
 8006872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2201      	movs	r2, #1
 8006878:	705a      	strb	r2, [r3, #1]
 800687a:	e00f      	b.n	800689c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	f003 020f 	and.w	r2, r3, #15
 8006882:	4613      	mov	r3, r2
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	4413      	add	r3, r2
 8006892:	3304      	adds	r3, #4
 8006894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80068a8:	883a      	ldrh	r2, [r7, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	78ba      	ldrb	r2, [r7, #2]
 80068b2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	785b      	ldrb	r3, [r3, #1]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d004      	beq.n	80068c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80068c6:	78bb      	ldrb	r3, [r7, #2]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d102      	bne.n	80068d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_PCD_EP_Open+0xaa>
 80068dc:	2302      	movs	r3, #2
 80068de:	e00e      	b.n	80068fe <HAL_PCD_EP_Open+0xc8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68f9      	ldr	r1, [r7, #12]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f003 fa90 	bl	8009e14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80068fc:	7afb      	ldrb	r3, [r7, #11]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006916:	2b00      	cmp	r3, #0
 8006918:	da0f      	bge.n	800693a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	f003 020f 	and.w	r2, r3, #15
 8006920:	4613      	mov	r3, r2
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	1a9b      	subs	r3, r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	3338      	adds	r3, #56	; 0x38
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	3304      	adds	r3, #4
 8006930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	705a      	strb	r2, [r3, #1]
 8006938:	e00f      	b.n	800695a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	f003 020f 	and.w	r2, r3, #15
 8006940:	4613      	mov	r3, r2
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	1a9b      	subs	r3, r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	4413      	add	r3, r2
 8006950:	3304      	adds	r3, #4
 8006952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800695a:	78fb      	ldrb	r3, [r7, #3]
 800695c:	f003 030f 	and.w	r3, r3, #15
 8006960:	b2da      	uxtb	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_PCD_EP_Close+0x6e>
 8006970:	2302      	movs	r3, #2
 8006972:	e00e      	b.n	8006992 <HAL_PCD_EP_Close+0x8c>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68f9      	ldr	r1, [r7, #12]
 8006982:	4618      	mov	r0, r3
 8006984:	f003 face 	bl	8009f24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b086      	sub	sp, #24
 800699e:	af00      	add	r7, sp, #0
 80069a0:	60f8      	str	r0, [r7, #12]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	603b      	str	r3, [r7, #0]
 80069a6:	460b      	mov	r3, r1
 80069a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069aa:	7afb      	ldrb	r3, [r7, #11]
 80069ac:	f003 020f 	and.w	r2, r3, #15
 80069b0:	4613      	mov	r3, r2
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	3304      	adds	r3, #4
 80069c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2200      	movs	r2, #0
 80069d4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2200      	movs	r2, #0
 80069da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d102      	bne.n	80069f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80069f6:	7afb      	ldrb	r3, [r7, #11]
 80069f8:	f003 030f 	and.w	r3, r3, #15
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d109      	bne.n	8006a14 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6979      	ldr	r1, [r7, #20]
 8006a0e:	f003 fda9 	bl	800a564 <USB_EP0StartXfer>
 8006a12:	e008      	b.n	8006a26 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6818      	ldr	r0, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6979      	ldr	r1, [r7, #20]
 8006a22:	f003 fb5b 	bl	800a0dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	f003 020f 	and.w	r2, r3, #15
 8006a42:	6879      	ldr	r1, [r7, #4]
 8006a44:	4613      	mov	r3, r2
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	1a9b      	subs	r3, r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	440b      	add	r3, r1
 8006a4e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006a52:	681b      	ldr	r3, [r3, #0]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a70:	7afb      	ldrb	r3, [r7, #11]
 8006a72:	f003 020f 	and.w	r2, r3, #15
 8006a76:	4613      	mov	r3, r2
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	1a9b      	subs	r3, r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	3338      	adds	r3, #56	; 0x38
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	3304      	adds	r3, #4
 8006a86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	2200      	movs	r2, #0
 8006a98:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006aa0:	7afb      	ldrb	r3, [r7, #11]
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d102      	bne.n	8006aba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006aba:	7afb      	ldrb	r3, [r7, #11]
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d109      	bne.n	8006ad8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6818      	ldr	r0, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	461a      	mov	r2, r3
 8006ad0:	6979      	ldr	r1, [r7, #20]
 8006ad2:	f003 fd47 	bl	800a564 <USB_EP0StartXfer>
 8006ad6:	e008      	b.n	8006aea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6818      	ldr	r0, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	6979      	ldr	r1, [r7, #20]
 8006ae6:	f003 faf9 	bl	800a0dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	f003 020f 	and.w	r2, r3, #15
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d901      	bls.n	8006b12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e050      	b.n	8006bb4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	da0f      	bge.n	8006b3a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	f003 020f 	and.w	r2, r3, #15
 8006b20:	4613      	mov	r3, r2
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	1a9b      	subs	r3, r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	3338      	adds	r3, #56	; 0x38
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	3304      	adds	r3, #4
 8006b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2201      	movs	r2, #1
 8006b36:	705a      	strb	r2, [r3, #1]
 8006b38:	e00d      	b.n	8006b56 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b3a:	78fa      	ldrb	r2, [r7, #3]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	1a9b      	subs	r3, r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b5c:	78fb      	ldrb	r3, [r7, #3]
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <HAL_PCD_EP_SetStall+0x82>
 8006b72:	2302      	movs	r3, #2
 8006b74:	e01e      	b.n	8006bb4 <HAL_PCD_EP_SetStall+0xc0>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f003 fed6 	bl	800a936 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10a      	bne.n	8006baa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6818      	ldr	r0, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	b2d9      	uxtb	r1, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f004 f8c7 	bl	800ad38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006bc8:	78fb      	ldrb	r3, [r7, #3]
 8006bca:	f003 020f 	and.w	r2, r3, #15
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d901      	bls.n	8006bda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e042      	b.n	8006c60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006bda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	da0f      	bge.n	8006c02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	f003 020f 	and.w	r2, r3, #15
 8006be8:	4613      	mov	r3, r2
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	1a9b      	subs	r3, r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	3338      	adds	r3, #56	; 0x38
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	705a      	strb	r2, [r3, #1]
 8006c00:	e00f      	b.n	8006c22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c02:	78fb      	ldrb	r3, [r7, #3]
 8006c04:	f003 020f 	and.w	r2, r3, #15
 8006c08:	4613      	mov	r3, r2
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	1a9b      	subs	r3, r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	4413      	add	r3, r2
 8006c18:	3304      	adds	r3, #4
 8006c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_PCD_EP_ClrStall+0x86>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e00e      	b.n	8006c60 <HAL_PCD_EP_ClrStall+0xa4>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f003 fede 	bl	800aa12 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08a      	sub	sp, #40	; 0x28
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	1a9b      	subs	r3, r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	3338      	adds	r3, #56	; 0x38
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	699a      	ldr	r2, [r3, #24]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d901      	bls.n	8006ca0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e06c      	b.n	8006d7a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	695a      	ldr	r2, [r3, #20]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d902      	bls.n	8006cbc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	3303      	adds	r3, #3
 8006cc0:	089b      	lsrs	r3, r3, #2
 8006cc2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006cc4:	e02b      	b.n	8006d1e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	695a      	ldr	r2, [r3, #20]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d902      	bls.n	8006ce2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	3303      	adds	r3, #3
 8006ce6:	089b      	lsrs	r3, r3, #2
 8006ce8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	68d9      	ldr	r1, [r3, #12]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	4603      	mov	r3, r0
 8006d00:	6978      	ldr	r0, [r7, #20]
 8006d02:	f003 fd82 	bl	800a80a <USB_WritePacket>

    ep->xfer_buff  += len;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	441a      	add	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	441a      	add	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d809      	bhi.n	8006d48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	699a      	ldr	r2, [r3, #24]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d203      	bcs.n	8006d48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1be      	bne.n	8006cc6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	695a      	ldr	r2, [r3, #20]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d811      	bhi.n	8006d78 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	6939      	ldr	r1, [r7, #16]
 8006d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d74:	4013      	ands	r3, r2
 8006d76:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3720      	adds	r7, #32
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	333c      	adds	r3, #60	; 0x3c
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	f040 80a0 	bne.w	8006efc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d015      	beq.n	8006df2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4a72      	ldr	r2, [pc, #456]	; (8006f94 <PCD_EP_OutXfrComplete_int+0x210>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	f240 80dd 	bls.w	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 80d7 	beq.w	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de8:	461a      	mov	r2, r3
 8006dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dee:	6093      	str	r3, [r2, #8]
 8006df0:	e0cb      	b.n	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f003 0320 	and.w	r3, r3, #32
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d009      	beq.n	8006e10 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e08:	461a      	mov	r2, r3
 8006e0a:	2320      	movs	r3, #32
 8006e0c:	6093      	str	r3, [r2, #8]
 8006e0e:	e0bc      	b.n	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 80b7 	bne.w	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4a5d      	ldr	r2, [pc, #372]	; (8006f94 <PCD_EP_OutXfrComplete_int+0x210>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d90f      	bls.n	8006e44 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e40:	6093      	str	r3, [r2, #8]
 8006e42:	e0a2      	b.n	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	1a9b      	subs	r3, r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	440b      	add	r3, r1
 8006e52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006e56:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	0159      	lsls	r1, r3, #5
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	440b      	add	r3, r1
 8006e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006e6a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	4613      	mov	r3, r2
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4403      	add	r3, r0
 8006e7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006e7e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	4613      	mov	r3, r2
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e92:	6819      	ldr	r1, [r3, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	1a9b      	subs	r3, r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4403      	add	r3, r0
 8006ea2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4419      	add	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	1a9b      	subs	r3, r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4403      	add	r3, r0
 8006eb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ebc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d114      	bne.n	8006eee <PCD_EP_OutXfrComplete_int+0x16a>
 8006ec4:	6879      	ldr	r1, [r7, #4]
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	1a9b      	subs	r3, r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	440b      	add	r3, r1
 8006ed2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d108      	bne.n	8006eee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6818      	ldr	r0, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	2101      	movs	r1, #1
 8006eea:	f003 ff25 	bl	800ad38 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f00c fd7d 	bl	80139f4 <HAL_PCD_DataOutStageCallback>
 8006efa:	e046      	b.n	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4a26      	ldr	r2, [pc, #152]	; (8006f98 <PCD_EP_OutXfrComplete_int+0x214>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d124      	bne.n	8006f4e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f20:	6093      	str	r3, [r2, #8]
 8006f22:	e032      	b.n	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f003 0320 	and.w	r3, r3, #32
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d008      	beq.n	8006f40 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	2320      	movs	r3, #32
 8006f3e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f00c fd54 	bl	80139f4 <HAL_PCD_DataOutStageCallback>
 8006f4c:	e01d      	b.n	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d114      	bne.n	8006f7e <PCD_EP_OutXfrComplete_int+0x1fa>
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d108      	bne.n	8006f7e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6818      	ldr	r0, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f76:	461a      	mov	r2, r3
 8006f78:	2100      	movs	r1, #0
 8006f7a:	f003 fedd 	bl	800ad38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f00c fd35 	bl	80139f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	4f54300a 	.word	0x4f54300a
 8006f98:	4f54310a 	.word	0x4f54310a

08006f9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	333c      	adds	r3, #60	; 0x3c
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4a15      	ldr	r2, [pc, #84]	; (8007024 <PCD_EP_OutSetupPacket_int+0x88>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d90e      	bls.n	8006ff0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d009      	beq.n	8006ff0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f00c fced 	bl	80139d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4a0a      	ldr	r2, [pc, #40]	; (8007024 <PCD_EP_OutSetupPacket_int+0x88>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d90c      	bls.n	8007018 <PCD_EP_OutSetupPacket_int+0x7c>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d108      	bne.n	8007018 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007010:	461a      	mov	r2, r3
 8007012:	2101      	movs	r1, #1
 8007014:	f003 fe90 	bl	800ad38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	4f54300a 	.word	0x4f54300a

08007028 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
 8007034:	4613      	mov	r3, r2
 8007036:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d107      	bne.n	8007056 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007046:	883b      	ldrh	r3, [r7, #0]
 8007048:	0419      	lsls	r1, r3, #16
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	430a      	orrs	r2, r1
 8007052:	629a      	str	r2, [r3, #40]	; 0x28
 8007054:	e028      	b.n	80070a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705c:	0c1b      	lsrs	r3, r3, #16
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	4413      	add	r3, r2
 8007062:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]
 8007068:	e00d      	b.n	8007086 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	7bfb      	ldrb	r3, [r7, #15]
 8007070:	3340      	adds	r3, #64	; 0x40
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	0c1b      	lsrs	r3, r3, #16
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	4413      	add	r3, r2
 800707e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	3301      	adds	r3, #1
 8007084:	73fb      	strb	r3, [r7, #15]
 8007086:	7bfa      	ldrb	r2, [r7, #15]
 8007088:	78fb      	ldrb	r3, [r7, #3]
 800708a:	3b01      	subs	r3, #1
 800708c:	429a      	cmp	r2, r3
 800708e:	d3ec      	bcc.n	800706a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007090:	883b      	ldrh	r3, [r7, #0]
 8007092:	0418      	lsls	r0, r3, #16
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6819      	ldr	r1, [r3, #0]
 8007098:	78fb      	ldrb	r3, [r7, #3]
 800709a:	3b01      	subs	r3, #1
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	4302      	orrs	r2, r0
 80070a0:	3340      	adds	r3, #64	; 0x40
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	440b      	add	r3, r1
 80070a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	460b      	mov	r3, r1
 80070c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	887a      	ldrh	r2, [r7, #2]
 80070c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e264      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d075      	beq.n	80071fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800710e:	4ba3      	ldr	r3, [pc, #652]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 030c 	and.w	r3, r3, #12
 8007116:	2b04      	cmp	r3, #4
 8007118:	d00c      	beq.n	8007134 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800711a:	4ba0      	ldr	r3, [pc, #640]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007122:	2b08      	cmp	r3, #8
 8007124:	d112      	bne.n	800714c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007126:	4b9d      	ldr	r3, [pc, #628]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800712e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007132:	d10b      	bne.n	800714c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007134:	4b99      	ldr	r3, [pc, #612]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d05b      	beq.n	80071f8 <HAL_RCC_OscConfig+0x108>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d157      	bne.n	80071f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e23f      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007154:	d106      	bne.n	8007164 <HAL_RCC_OscConfig+0x74>
 8007156:	4b91      	ldr	r3, [pc, #580]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a90      	ldr	r2, [pc, #576]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800715c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	e01d      	b.n	80071a0 <HAL_RCC_OscConfig+0xb0>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800716c:	d10c      	bne.n	8007188 <HAL_RCC_OscConfig+0x98>
 800716e:	4b8b      	ldr	r3, [pc, #556]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a8a      	ldr	r2, [pc, #552]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	4b88      	ldr	r3, [pc, #544]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a87      	ldr	r2, [pc, #540]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	e00b      	b.n	80071a0 <HAL_RCC_OscConfig+0xb0>
 8007188:	4b84      	ldr	r3, [pc, #528]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a83      	ldr	r2, [pc, #524]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800718e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	4b81      	ldr	r3, [pc, #516]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a80      	ldr	r2, [pc, #512]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800719a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800719e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d013      	beq.n	80071d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071a8:	f7fd f85e 	bl	8004268 <HAL_GetTick>
 80071ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ae:	e008      	b.n	80071c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071b0:	f7fd f85a 	bl	8004268 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b64      	cmp	r3, #100	; 0x64
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e204      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071c2:	4b76      	ldr	r3, [pc, #472]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0f0      	beq.n	80071b0 <HAL_RCC_OscConfig+0xc0>
 80071ce:	e014      	b.n	80071fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071d0:	f7fd f84a 	bl	8004268 <HAL_GetTick>
 80071d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071d6:	e008      	b.n	80071ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071d8:	f7fd f846 	bl	8004268 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b64      	cmp	r3, #100	; 0x64
 80071e4:	d901      	bls.n	80071ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e1f0      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071ea:	4b6c      	ldr	r3, [pc, #432]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1f0      	bne.n	80071d8 <HAL_RCC_OscConfig+0xe8>
 80071f6:	e000      	b.n	80071fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d063      	beq.n	80072ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007206:	4b65      	ldr	r3, [pc, #404]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f003 030c 	and.w	r3, r3, #12
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007212:	4b62      	ldr	r3, [pc, #392]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800721a:	2b08      	cmp	r3, #8
 800721c:	d11c      	bne.n	8007258 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800721e:	4b5f      	ldr	r3, [pc, #380]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d116      	bne.n	8007258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800722a:	4b5c      	ldr	r3, [pc, #368]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <HAL_RCC_OscConfig+0x152>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d001      	beq.n	8007242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e1c4      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007242:	4b56      	ldr	r3, [pc, #344]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	4952      	ldr	r1, [pc, #328]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007252:	4313      	orrs	r3, r2
 8007254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007256:	e03a      	b.n	80072ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d020      	beq.n	80072a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007260:	4b4f      	ldr	r3, [pc, #316]	; (80073a0 <HAL_RCC_OscConfig+0x2b0>)
 8007262:	2201      	movs	r2, #1
 8007264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007266:	f7fc ffff 	bl	8004268 <HAL_GetTick>
 800726a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800726c:	e008      	b.n	8007280 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800726e:	f7fc fffb 	bl	8004268 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d901      	bls.n	8007280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e1a5      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007280:	4b46      	ldr	r3, [pc, #280]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0f0      	beq.n	800726e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800728c:	4b43      	ldr	r3, [pc, #268]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	4940      	ldr	r1, [pc, #256]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800729c:	4313      	orrs	r3, r2
 800729e:	600b      	str	r3, [r1, #0]
 80072a0:	e015      	b.n	80072ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072a2:	4b3f      	ldr	r3, [pc, #252]	; (80073a0 <HAL_RCC_OscConfig+0x2b0>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a8:	f7fc ffde 	bl	8004268 <HAL_GetTick>
 80072ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072ae:	e008      	b.n	80072c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072b0:	f7fc ffda 	bl	8004268 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d901      	bls.n	80072c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e184      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072c2:	4b36      	ldr	r3, [pc, #216]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1f0      	bne.n	80072b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0308 	and.w	r3, r3, #8
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d030      	beq.n	800733c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d016      	beq.n	8007310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072e2:	4b30      	ldr	r3, [pc, #192]	; (80073a4 <HAL_RCC_OscConfig+0x2b4>)
 80072e4:	2201      	movs	r2, #1
 80072e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e8:	f7fc ffbe 	bl	8004268 <HAL_GetTick>
 80072ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072ee:	e008      	b.n	8007302 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072f0:	f7fc ffba 	bl	8004268 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e164      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007302:	4b26      	ldr	r3, [pc, #152]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0f0      	beq.n	80072f0 <HAL_RCC_OscConfig+0x200>
 800730e:	e015      	b.n	800733c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007310:	4b24      	ldr	r3, [pc, #144]	; (80073a4 <HAL_RCC_OscConfig+0x2b4>)
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007316:	f7fc ffa7 	bl	8004268 <HAL_GetTick>
 800731a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800731c:	e008      	b.n	8007330 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800731e:	f7fc ffa3 	bl	8004268 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d901      	bls.n	8007330 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e14d      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007330:	4b1a      	ldr	r3, [pc, #104]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1f0      	bne.n	800731e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 80a0 	beq.w	800748a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800734a:	2300      	movs	r3, #0
 800734c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800734e:	4b13      	ldr	r3, [pc, #76]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10f      	bne.n	800737a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800735a:	2300      	movs	r3, #0
 800735c:	60bb      	str	r3, [r7, #8]
 800735e:	4b0f      	ldr	r3, [pc, #60]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	4a0e      	ldr	r2, [pc, #56]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007368:	6413      	str	r3, [r2, #64]	; 0x40
 800736a:	4b0c      	ldr	r3, [pc, #48]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007372:	60bb      	str	r3, [r7, #8]
 8007374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007376:	2301      	movs	r3, #1
 8007378:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800737a:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <HAL_RCC_OscConfig+0x2b8>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007382:	2b00      	cmp	r3, #0
 8007384:	d121      	bne.n	80073ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007386:	4b08      	ldr	r3, [pc, #32]	; (80073a8 <HAL_RCC_OscConfig+0x2b8>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a07      	ldr	r2, [pc, #28]	; (80073a8 <HAL_RCC_OscConfig+0x2b8>)
 800738c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007392:	f7fc ff69 	bl	8004268 <HAL_GetTick>
 8007396:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007398:	e011      	b.n	80073be <HAL_RCC_OscConfig+0x2ce>
 800739a:	bf00      	nop
 800739c:	40023800 	.word	0x40023800
 80073a0:	42470000 	.word	0x42470000
 80073a4:	42470e80 	.word	0x42470e80
 80073a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ac:	f7fc ff5c 	bl	8004268 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e106      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073be:	4b85      	ldr	r3, [pc, #532]	; (80075d4 <HAL_RCC_OscConfig+0x4e4>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f0      	beq.n	80073ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d106      	bne.n	80073e0 <HAL_RCC_OscConfig+0x2f0>
 80073d2:	4b81      	ldr	r3, [pc, #516]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d6:	4a80      	ldr	r2, [pc, #512]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 80073d8:	f043 0301 	orr.w	r3, r3, #1
 80073dc:	6713      	str	r3, [r2, #112]	; 0x70
 80073de:	e01c      	b.n	800741a <HAL_RCC_OscConfig+0x32a>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	2b05      	cmp	r3, #5
 80073e6:	d10c      	bne.n	8007402 <HAL_RCC_OscConfig+0x312>
 80073e8:	4b7b      	ldr	r3, [pc, #492]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 80073ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ec:	4a7a      	ldr	r2, [pc, #488]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 80073ee:	f043 0304 	orr.w	r3, r3, #4
 80073f2:	6713      	str	r3, [r2, #112]	; 0x70
 80073f4:	4b78      	ldr	r3, [pc, #480]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 80073f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f8:	4a77      	ldr	r2, [pc, #476]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 80073fa:	f043 0301 	orr.w	r3, r3, #1
 80073fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007400:	e00b      	b.n	800741a <HAL_RCC_OscConfig+0x32a>
 8007402:	4b75      	ldr	r3, [pc, #468]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 8007404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007406:	4a74      	ldr	r2, [pc, #464]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 8007408:	f023 0301 	bic.w	r3, r3, #1
 800740c:	6713      	str	r3, [r2, #112]	; 0x70
 800740e:	4b72      	ldr	r3, [pc, #456]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	4a71      	ldr	r2, [pc, #452]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 8007414:	f023 0304 	bic.w	r3, r3, #4
 8007418:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d015      	beq.n	800744e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007422:	f7fc ff21 	bl	8004268 <HAL_GetTick>
 8007426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007428:	e00a      	b.n	8007440 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800742a:	f7fc ff1d 	bl	8004268 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	f241 3288 	movw	r2, #5000	; 0x1388
 8007438:	4293      	cmp	r3, r2
 800743a:	d901      	bls.n	8007440 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e0c5      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007440:	4b65      	ldr	r3, [pc, #404]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 8007442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d0ee      	beq.n	800742a <HAL_RCC_OscConfig+0x33a>
 800744c:	e014      	b.n	8007478 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800744e:	f7fc ff0b 	bl	8004268 <HAL_GetTick>
 8007452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007454:	e00a      	b.n	800746c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007456:	f7fc ff07 	bl	8004268 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	f241 3288 	movw	r2, #5000	; 0x1388
 8007464:	4293      	cmp	r3, r2
 8007466:	d901      	bls.n	800746c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e0af      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800746c:	4b5a      	ldr	r3, [pc, #360]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 800746e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1ee      	bne.n	8007456 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d105      	bne.n	800748a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800747e:	4b56      	ldr	r3, [pc, #344]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	4a55      	ldr	r2, [pc, #340]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 8007484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007488:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 809b 	beq.w	80075ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007494:	4b50      	ldr	r3, [pc, #320]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 030c 	and.w	r3, r3, #12
 800749c:	2b08      	cmp	r3, #8
 800749e:	d05c      	beq.n	800755a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d141      	bne.n	800752c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074a8:	4b4c      	ldr	r3, [pc, #304]	; (80075dc <HAL_RCC_OscConfig+0x4ec>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ae:	f7fc fedb 	bl	8004268 <HAL_GetTick>
 80074b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074b4:	e008      	b.n	80074c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074b6:	f7fc fed7 	bl	8004268 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e081      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074c8:	4b43      	ldr	r3, [pc, #268]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1f0      	bne.n	80074b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	69da      	ldr	r2, [r3, #28]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	431a      	orrs	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	019b      	lsls	r3, r3, #6
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	3b01      	subs	r3, #1
 80074ee:	041b      	lsls	r3, r3, #16
 80074f0:	431a      	orrs	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f6:	061b      	lsls	r3, r3, #24
 80074f8:	4937      	ldr	r1, [pc, #220]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074fe:	4b37      	ldr	r3, [pc, #220]	; (80075dc <HAL_RCC_OscConfig+0x4ec>)
 8007500:	2201      	movs	r2, #1
 8007502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007504:	f7fc feb0 	bl	8004268 <HAL_GetTick>
 8007508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800750c:	f7fc feac 	bl	8004268 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e056      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800751e:	4b2e      	ldr	r3, [pc, #184]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0f0      	beq.n	800750c <HAL_RCC_OscConfig+0x41c>
 800752a:	e04e      	b.n	80075ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800752c:	4b2b      	ldr	r3, [pc, #172]	; (80075dc <HAL_RCC_OscConfig+0x4ec>)
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007532:	f7fc fe99 	bl	8004268 <HAL_GetTick>
 8007536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007538:	e008      	b.n	800754c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800753a:	f7fc fe95 	bl	8004268 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e03f      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800754c:	4b22      	ldr	r3, [pc, #136]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1f0      	bne.n	800753a <HAL_RCC_OscConfig+0x44a>
 8007558:	e037      	b.n	80075ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d101      	bne.n	8007566 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e032      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007566:	4b1c      	ldr	r3, [pc, #112]	; (80075d8 <HAL_RCC_OscConfig+0x4e8>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d028      	beq.n	80075c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800757e:	429a      	cmp	r2, r3
 8007580:	d121      	bne.n	80075c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800758c:	429a      	cmp	r2, r3
 800758e:	d11a      	bne.n	80075c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007596:	4013      	ands	r3, r2
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800759c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800759e:	4293      	cmp	r3, r2
 80075a0:	d111      	bne.n	80075c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ac:	085b      	lsrs	r3, r3, #1
 80075ae:	3b01      	subs	r3, #1
 80075b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d107      	bne.n	80075c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d001      	beq.n	80075ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e000      	b.n	80075cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	40007000 	.word	0x40007000
 80075d8:	40023800 	.word	0x40023800
 80075dc:	42470060 	.word	0x42470060

080075e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e0cc      	b.n	800778e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075f4:	4b68      	ldr	r3, [pc, #416]	; (8007798 <HAL_RCC_ClockConfig+0x1b8>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 030f 	and.w	r3, r3, #15
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d90c      	bls.n	800761c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007602:	4b65      	ldr	r3, [pc, #404]	; (8007798 <HAL_RCC_ClockConfig+0x1b8>)
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	b2d2      	uxtb	r2, r2
 8007608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800760a:	4b63      	ldr	r3, [pc, #396]	; (8007798 <HAL_RCC_ClockConfig+0x1b8>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 030f 	and.w	r3, r3, #15
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	429a      	cmp	r2, r3
 8007616:	d001      	beq.n	800761c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e0b8      	b.n	800778e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d020      	beq.n	800766a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	d005      	beq.n	8007640 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007634:	4b59      	ldr	r3, [pc, #356]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	4a58      	ldr	r2, [pc, #352]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 800763a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800763e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0308 	and.w	r3, r3, #8
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800764c:	4b53      	ldr	r3, [pc, #332]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	4a52      	ldr	r2, [pc, #328]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 8007652:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007656:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007658:	4b50      	ldr	r3, [pc, #320]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	494d      	ldr	r1, [pc, #308]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 8007666:	4313      	orrs	r3, r2
 8007668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	d044      	beq.n	8007700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d107      	bne.n	800768e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800767e:	4b47      	ldr	r3, [pc, #284]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d119      	bne.n	80076be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e07f      	b.n	800778e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d003      	beq.n	800769e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800769a:	2b03      	cmp	r3, #3
 800769c:	d107      	bne.n	80076ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800769e:	4b3f      	ldr	r3, [pc, #252]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d109      	bne.n	80076be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e06f      	b.n	800778e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ae:	4b3b      	ldr	r3, [pc, #236]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e067      	b.n	800778e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076be:	4b37      	ldr	r3, [pc, #220]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f023 0203 	bic.w	r2, r3, #3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	4934      	ldr	r1, [pc, #208]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076d0:	f7fc fdca 	bl	8004268 <HAL_GetTick>
 80076d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076d6:	e00a      	b.n	80076ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076d8:	f7fc fdc6 	bl	8004268 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e04f      	b.n	800778e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ee:	4b2b      	ldr	r3, [pc, #172]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f003 020c 	and.w	r2, r3, #12
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d1eb      	bne.n	80076d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007700:	4b25      	ldr	r3, [pc, #148]	; (8007798 <HAL_RCC_ClockConfig+0x1b8>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 030f 	and.w	r3, r3, #15
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	429a      	cmp	r2, r3
 800770c:	d20c      	bcs.n	8007728 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800770e:	4b22      	ldr	r3, [pc, #136]	; (8007798 <HAL_RCC_ClockConfig+0x1b8>)
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	b2d2      	uxtb	r2, r2
 8007714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007716:	4b20      	ldr	r3, [pc, #128]	; (8007798 <HAL_RCC_ClockConfig+0x1b8>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d001      	beq.n	8007728 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e032      	b.n	800778e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	2b00      	cmp	r3, #0
 8007732:	d008      	beq.n	8007746 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007734:	4b19      	ldr	r3, [pc, #100]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	4916      	ldr	r1, [pc, #88]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 8007742:	4313      	orrs	r3, r2
 8007744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	2b00      	cmp	r3, #0
 8007750:	d009      	beq.n	8007766 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007752:	4b12      	ldr	r3, [pc, #72]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	490e      	ldr	r1, [pc, #56]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 8007762:	4313      	orrs	r3, r2
 8007764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007766:	f000 f821 	bl	80077ac <HAL_RCC_GetSysClockFreq>
 800776a:	4602      	mov	r2, r0
 800776c:	4b0b      	ldr	r3, [pc, #44]	; (800779c <HAL_RCC_ClockConfig+0x1bc>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	091b      	lsrs	r3, r3, #4
 8007772:	f003 030f 	and.w	r3, r3, #15
 8007776:	490a      	ldr	r1, [pc, #40]	; (80077a0 <HAL_RCC_ClockConfig+0x1c0>)
 8007778:	5ccb      	ldrb	r3, [r1, r3]
 800777a:	fa22 f303 	lsr.w	r3, r2, r3
 800777e:	4a09      	ldr	r2, [pc, #36]	; (80077a4 <HAL_RCC_ClockConfig+0x1c4>)
 8007780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007782:	4b09      	ldr	r3, [pc, #36]	; (80077a8 <HAL_RCC_ClockConfig+0x1c8>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4618      	mov	r0, r3
 8007788:	f7fb fd7a 	bl	8003280 <HAL_InitTick>

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	40023c00 	.word	0x40023c00
 800779c:	40023800 	.word	0x40023800
 80077a0:	08018ce4 	.word	0x08018ce4
 80077a4:	2000001c 	.word	0x2000001c
 80077a8:	20000020 	.word	0x20000020

080077ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	607b      	str	r3, [r7, #4]
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	2300      	movs	r3, #0
 80077be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077c4:	4b67      	ldr	r3, [pc, #412]	; (8007964 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f003 030c 	and.w	r3, r3, #12
 80077cc:	2b08      	cmp	r3, #8
 80077ce:	d00d      	beq.n	80077ec <HAL_RCC_GetSysClockFreq+0x40>
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	f200 80bd 	bhi.w	8007950 <HAL_RCC_GetSysClockFreq+0x1a4>
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <HAL_RCC_GetSysClockFreq+0x34>
 80077da:	2b04      	cmp	r3, #4
 80077dc:	d003      	beq.n	80077e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80077de:	e0b7      	b.n	8007950 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077e0:	4b61      	ldr	r3, [pc, #388]	; (8007968 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80077e2:	60bb      	str	r3, [r7, #8]
       break;
 80077e4:	e0b7      	b.n	8007956 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077e6:	4b60      	ldr	r3, [pc, #384]	; (8007968 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80077e8:	60bb      	str	r3, [r7, #8]
      break;
 80077ea:	e0b4      	b.n	8007956 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077ec:	4b5d      	ldr	r3, [pc, #372]	; (8007964 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077f6:	4b5b      	ldr	r3, [pc, #364]	; (8007964 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d04d      	beq.n	800789e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007802:	4b58      	ldr	r3, [pc, #352]	; (8007964 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	099b      	lsrs	r3, r3, #6
 8007808:	461a      	mov	r2, r3
 800780a:	f04f 0300 	mov.w	r3, #0
 800780e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007812:	f04f 0100 	mov.w	r1, #0
 8007816:	ea02 0800 	and.w	r8, r2, r0
 800781a:	ea03 0901 	and.w	r9, r3, r1
 800781e:	4640      	mov	r0, r8
 8007820:	4649      	mov	r1, r9
 8007822:	f04f 0200 	mov.w	r2, #0
 8007826:	f04f 0300 	mov.w	r3, #0
 800782a:	014b      	lsls	r3, r1, #5
 800782c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007830:	0142      	lsls	r2, r0, #5
 8007832:	4610      	mov	r0, r2
 8007834:	4619      	mov	r1, r3
 8007836:	ebb0 0008 	subs.w	r0, r0, r8
 800783a:	eb61 0109 	sbc.w	r1, r1, r9
 800783e:	f04f 0200 	mov.w	r2, #0
 8007842:	f04f 0300 	mov.w	r3, #0
 8007846:	018b      	lsls	r3, r1, #6
 8007848:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800784c:	0182      	lsls	r2, r0, #6
 800784e:	1a12      	subs	r2, r2, r0
 8007850:	eb63 0301 	sbc.w	r3, r3, r1
 8007854:	f04f 0000 	mov.w	r0, #0
 8007858:	f04f 0100 	mov.w	r1, #0
 800785c:	00d9      	lsls	r1, r3, #3
 800785e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007862:	00d0      	lsls	r0, r2, #3
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	eb12 0208 	adds.w	r2, r2, r8
 800786c:	eb43 0309 	adc.w	r3, r3, r9
 8007870:	f04f 0000 	mov.w	r0, #0
 8007874:	f04f 0100 	mov.w	r1, #0
 8007878:	0299      	lsls	r1, r3, #10
 800787a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800787e:	0290      	lsls	r0, r2, #10
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	4610      	mov	r0, r2
 8007886:	4619      	mov	r1, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	461a      	mov	r2, r3
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	f7f9 fa0a 	bl	8000ca8 <__aeabi_uldivmod>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4613      	mov	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	e04a      	b.n	8007934 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800789e:	4b31      	ldr	r3, [pc, #196]	; (8007964 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	099b      	lsrs	r3, r3, #6
 80078a4:	461a      	mov	r2, r3
 80078a6:	f04f 0300 	mov.w	r3, #0
 80078aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80078ae:	f04f 0100 	mov.w	r1, #0
 80078b2:	ea02 0400 	and.w	r4, r2, r0
 80078b6:	ea03 0501 	and.w	r5, r3, r1
 80078ba:	4620      	mov	r0, r4
 80078bc:	4629      	mov	r1, r5
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	f04f 0300 	mov.w	r3, #0
 80078c6:	014b      	lsls	r3, r1, #5
 80078c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80078cc:	0142      	lsls	r2, r0, #5
 80078ce:	4610      	mov	r0, r2
 80078d0:	4619      	mov	r1, r3
 80078d2:	1b00      	subs	r0, r0, r4
 80078d4:	eb61 0105 	sbc.w	r1, r1, r5
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	f04f 0300 	mov.w	r3, #0
 80078e0:	018b      	lsls	r3, r1, #6
 80078e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80078e6:	0182      	lsls	r2, r0, #6
 80078e8:	1a12      	subs	r2, r2, r0
 80078ea:	eb63 0301 	sbc.w	r3, r3, r1
 80078ee:	f04f 0000 	mov.w	r0, #0
 80078f2:	f04f 0100 	mov.w	r1, #0
 80078f6:	00d9      	lsls	r1, r3, #3
 80078f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80078fc:	00d0      	lsls	r0, r2, #3
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	1912      	adds	r2, r2, r4
 8007904:	eb45 0303 	adc.w	r3, r5, r3
 8007908:	f04f 0000 	mov.w	r0, #0
 800790c:	f04f 0100 	mov.w	r1, #0
 8007910:	0299      	lsls	r1, r3, #10
 8007912:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007916:	0290      	lsls	r0, r2, #10
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	4610      	mov	r0, r2
 800791e:	4619      	mov	r1, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	461a      	mov	r2, r3
 8007924:	f04f 0300 	mov.w	r3, #0
 8007928:	f7f9 f9be 	bl	8000ca8 <__aeabi_uldivmod>
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	4613      	mov	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007934:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	0c1b      	lsrs	r3, r3, #16
 800793a:	f003 0303 	and.w	r3, r3, #3
 800793e:	3301      	adds	r3, #1
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	fbb2 f3f3 	udiv	r3, r2, r3
 800794c:	60bb      	str	r3, [r7, #8]
      break;
 800794e:	e002      	b.n	8007956 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007950:	4b05      	ldr	r3, [pc, #20]	; (8007968 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007952:	60bb      	str	r3, [r7, #8]
      break;
 8007954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007956:	68bb      	ldr	r3, [r7, #8]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007962:	bf00      	nop
 8007964:	40023800 	.word	0x40023800
 8007968:	00f42400 	.word	0x00f42400

0800796c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007970:	4b03      	ldr	r3, [pc, #12]	; (8007980 <HAL_RCC_GetHCLKFreq+0x14>)
 8007972:	681b      	ldr	r3, [r3, #0]
}
 8007974:	4618      	mov	r0, r3
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	2000001c 	.word	0x2000001c

08007984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007988:	f7ff fff0 	bl	800796c <HAL_RCC_GetHCLKFreq>
 800798c:	4602      	mov	r2, r0
 800798e:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	0a9b      	lsrs	r3, r3, #10
 8007994:	f003 0307 	and.w	r3, r3, #7
 8007998:	4903      	ldr	r1, [pc, #12]	; (80079a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800799a:	5ccb      	ldrb	r3, [r1, r3]
 800799c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	40023800 	.word	0x40023800
 80079a8:	08018cf4 	.word	0x08018cf4

080079ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80079b0:	f7ff ffdc 	bl	800796c <HAL_RCC_GetHCLKFreq>
 80079b4:	4602      	mov	r2, r0
 80079b6:	4b05      	ldr	r3, [pc, #20]	; (80079cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	0b5b      	lsrs	r3, r3, #13
 80079bc:	f003 0307 	and.w	r3, r3, #7
 80079c0:	4903      	ldr	r1, [pc, #12]	; (80079d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079c2:	5ccb      	ldrb	r3, [r1, r3]
 80079c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	40023800 	.word	0x40023800
 80079d0:	08018cf4 	.word	0x08018cf4

080079d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	220f      	movs	r2, #15
 80079e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079e4:	4b12      	ldr	r3, [pc, #72]	; (8007a30 <HAL_RCC_GetClockConfig+0x5c>)
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f003 0203 	and.w	r2, r3, #3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80079f0:	4b0f      	ldr	r3, [pc, #60]	; (8007a30 <HAL_RCC_GetClockConfig+0x5c>)
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80079fc:	4b0c      	ldr	r3, [pc, #48]	; (8007a30 <HAL_RCC_GetClockConfig+0x5c>)
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007a08:	4b09      	ldr	r3, [pc, #36]	; (8007a30 <HAL_RCC_GetClockConfig+0x5c>)
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	08db      	lsrs	r3, r3, #3
 8007a0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a16:	4b07      	ldr	r3, [pc, #28]	; (8007a34 <HAL_RCC_GetClockConfig+0x60>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 020f 	and.w	r2, r3, #15
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	601a      	str	r2, [r3, #0]
}
 8007a22:	bf00      	nop
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	40023800 	.word	0x40023800
 8007a34:	40023c00 	.word	0x40023c00

08007a38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e07b      	b.n	8007b42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d108      	bne.n	8007a64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a5a:	d009      	beq.n	8007a70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	61da      	str	r2, [r3, #28]
 8007a62:	e005      	b.n	8007a70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7fb fa66 	bl	8002f5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	431a      	orrs	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aea:	431a      	orrs	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af4:	ea42 0103 	orr.w	r1, r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	0c1b      	lsrs	r3, r3, #16
 8007b0e:	f003 0104 	and.w	r1, r3, #4
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	f003 0210 	and.w	r2, r3, #16
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	69da      	ldr	r2, [r3, #28]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b088      	sub	sp, #32
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	603b      	str	r3, [r7, #0]
 8007b56:	4613      	mov	r3, r2
 8007b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d101      	bne.n	8007b6c <HAL_SPI_Transmit+0x22>
 8007b68:	2302      	movs	r3, #2
 8007b6a:	e126      	b.n	8007dba <HAL_SPI_Transmit+0x270>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b74:	f7fc fb78 	bl	8004268 <HAL_GetTick>
 8007b78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d002      	beq.n	8007b90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b8e:	e10b      	b.n	8007da8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <HAL_SPI_Transmit+0x52>
 8007b96:	88fb      	ldrh	r3, [r7, #6]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d102      	bne.n	8007ba2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ba0:	e102      	b.n	8007da8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2203      	movs	r2, #3
 8007ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	88fa      	ldrh	r2, [r7, #6]
 8007bba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	88fa      	ldrh	r2, [r7, #6]
 8007bc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be8:	d10f      	bne.n	8007c0a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bf8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c14:	2b40      	cmp	r3, #64	; 0x40
 8007c16:	d007      	beq.n	8007c28 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c30:	d14b      	bne.n	8007cca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <HAL_SPI_Transmit+0xf6>
 8007c3a:	8afb      	ldrh	r3, [r7, #22]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d13e      	bne.n	8007cbe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c44:	881a      	ldrh	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c50:	1c9a      	adds	r2, r3, #2
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007c64:	e02b      	b.n	8007cbe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d112      	bne.n	8007c9a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c78:	881a      	ldrh	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c84:	1c9a      	adds	r2, r3, #2
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	3b01      	subs	r3, #1
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	86da      	strh	r2, [r3, #54]	; 0x36
 8007c98:	e011      	b.n	8007cbe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c9a:	f7fc fae5 	bl	8004268 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d803      	bhi.n	8007cb2 <HAL_SPI_Transmit+0x168>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cb0:	d102      	bne.n	8007cb8 <HAL_SPI_Transmit+0x16e>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007cbc:	e074      	b.n	8007da8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1ce      	bne.n	8007c66 <HAL_SPI_Transmit+0x11c>
 8007cc8:	e04c      	b.n	8007d64 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <HAL_SPI_Transmit+0x18e>
 8007cd2:	8afb      	ldrh	r3, [r7, #22]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d140      	bne.n	8007d5a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	330c      	adds	r3, #12
 8007ce2:	7812      	ldrb	r2, [r2, #0]
 8007ce4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007cfe:	e02c      	b.n	8007d5a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d113      	bne.n	8007d36 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	330c      	adds	r3, #12
 8007d18:	7812      	ldrb	r2, [r2, #0]
 8007d1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	86da      	strh	r2, [r3, #54]	; 0x36
 8007d34:	e011      	b.n	8007d5a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d36:	f7fc fa97 	bl	8004268 <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d803      	bhi.n	8007d4e <HAL_SPI_Transmit+0x204>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d4c:	d102      	bne.n	8007d54 <HAL_SPI_Transmit+0x20a>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d102      	bne.n	8007d5a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d58:	e026      	b.n	8007da8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1cd      	bne.n	8007d00 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 fa55 	bl	8008218 <SPI_EndRxTxTransaction>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2220      	movs	r2, #32
 8007d78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10a      	bne.n	8007d98 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d82:	2300      	movs	r3, #0
 8007d84:	613b      	str	r3, [r7, #16]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	613b      	str	r3, [r7, #16]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	613b      	str	r3, [r7, #16]
 8007d96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	77fb      	strb	r3, [r7, #31]
 8007da4:	e000      	b.n	8007da8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007da6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007db8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3720      	adds	r7, #32
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b08c      	sub	sp, #48	; 0x30
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	607a      	str	r2, [r7, #4]
 8007dce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d101      	bne.n	8007de8 <HAL_SPI_TransmitReceive+0x26>
 8007de4:	2302      	movs	r3, #2
 8007de6:	e18a      	b.n	80080fe <HAL_SPI_TransmitReceive+0x33c>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007df0:	f7fc fa3a 	bl	8004268 <HAL_GetTick>
 8007df4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007e06:	887b      	ldrh	r3, [r7, #2]
 8007e08:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d00f      	beq.n	8007e32 <HAL_SPI_TransmitReceive+0x70>
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e18:	d107      	bne.n	8007e2a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d103      	bne.n	8007e2a <HAL_SPI_TransmitReceive+0x68>
 8007e22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e26:	2b04      	cmp	r3, #4
 8007e28:	d003      	beq.n	8007e32 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e30:	e15b      	b.n	80080ea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <HAL_SPI_TransmitReceive+0x82>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d002      	beq.n	8007e44 <HAL_SPI_TransmitReceive+0x82>
 8007e3e:	887b      	ldrh	r3, [r7, #2]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d103      	bne.n	8007e4c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e4a:	e14e      	b.n	80080ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	d003      	beq.n	8007e60 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2205      	movs	r2, #5
 8007e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	887a      	ldrh	r2, [r7, #2]
 8007e70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	887a      	ldrh	r2, [r7, #2]
 8007e76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	887a      	ldrh	r2, [r7, #2]
 8007e82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	887a      	ldrh	r2, [r7, #2]
 8007e88:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea0:	2b40      	cmp	r3, #64	; 0x40
 8007ea2:	d007      	beq.n	8007eb4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ebc:	d178      	bne.n	8007fb0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <HAL_SPI_TransmitReceive+0x10a>
 8007ec6:	8b7b      	ldrh	r3, [r7, #26]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d166      	bne.n	8007f9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed0:	881a      	ldrh	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007edc:	1c9a      	adds	r2, r3, #2
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ef0:	e053      	b.n	8007f9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d11b      	bne.n	8007f38 <HAL_SPI_TransmitReceive+0x176>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d016      	beq.n	8007f38 <HAL_SPI_TransmitReceive+0x176>
 8007f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d113      	bne.n	8007f38 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f14:	881a      	ldrh	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f20:	1c9a      	adds	r2, r3, #2
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d119      	bne.n	8007f7a <HAL_SPI_TransmitReceive+0x1b8>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d014      	beq.n	8007f7a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68da      	ldr	r2, [r3, #12]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5a:	b292      	uxth	r2, r2
 8007f5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f62:	1c9a      	adds	r2, r3, #2
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f76:	2301      	movs	r3, #1
 8007f78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f7a:	f7fc f975 	bl	8004268 <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d807      	bhi.n	8007f9a <HAL_SPI_TransmitReceive+0x1d8>
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f90:	d003      	beq.n	8007f9a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f98:	e0a7      	b.n	80080ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1a6      	bne.n	8007ef2 <HAL_SPI_TransmitReceive+0x130>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1a1      	bne.n	8007ef2 <HAL_SPI_TransmitReceive+0x130>
 8007fae:	e07c      	b.n	80080aa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <HAL_SPI_TransmitReceive+0x1fc>
 8007fb8:	8b7b      	ldrh	r3, [r7, #26]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d16b      	bne.n	8008096 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	330c      	adds	r3, #12
 8007fc8:	7812      	ldrb	r2, [r2, #0]
 8007fca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fe4:	e057      	b.n	8008096 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f003 0302 	and.w	r3, r3, #2
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d11c      	bne.n	800802e <HAL_SPI_TransmitReceive+0x26c>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d017      	beq.n	800802e <HAL_SPI_TransmitReceive+0x26c>
 8007ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008000:	2b01      	cmp	r3, #1
 8008002:	d114      	bne.n	800802e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	330c      	adds	r3, #12
 800800e:	7812      	ldrb	r2, [r2, #0]
 8008010:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008016:	1c5a      	adds	r2, r3, #1
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008020:	b29b      	uxth	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	b29a      	uxth	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b01      	cmp	r3, #1
 800803a:	d119      	bne.n	8008070 <HAL_SPI_TransmitReceive+0x2ae>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008040:	b29b      	uxth	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d014      	beq.n	8008070 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68da      	ldr	r2, [r3, #12]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008050:	b2d2      	uxtb	r2, r2
 8008052:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008062:	b29b      	uxth	r3, r3
 8008064:	3b01      	subs	r3, #1
 8008066:	b29a      	uxth	r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800806c:	2301      	movs	r3, #1
 800806e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008070:	f7fc f8fa 	bl	8004268 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800807c:	429a      	cmp	r2, r3
 800807e:	d803      	bhi.n	8008088 <HAL_SPI_TransmitReceive+0x2c6>
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008086:	d102      	bne.n	800808e <HAL_SPI_TransmitReceive+0x2cc>
 8008088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808a:	2b00      	cmp	r3, #0
 800808c:	d103      	bne.n	8008096 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008094:	e029      	b.n	80080ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800809a:	b29b      	uxth	r3, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1a2      	bne.n	8007fe6 <HAL_SPI_TransmitReceive+0x224>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d19d      	bne.n	8007fe6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 f8b2 	bl	8008218 <SPI_EndRxTxTransaction>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d006      	beq.n	80080c8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2220      	movs	r2, #32
 80080c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80080c6:	e010      	b.n	80080ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10b      	bne.n	80080e8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080d0:	2300      	movs	r3, #0
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	617b      	str	r3, [r7, #20]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	e000      	b.n	80080ea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80080e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80080fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3730      	adds	r7, #48	; 0x30
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	603b      	str	r3, [r7, #0]
 8008114:	4613      	mov	r3, r2
 8008116:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008118:	f7fc f8a6 	bl	8004268 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	1a9b      	subs	r3, r3, r2
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	4413      	add	r3, r2
 8008126:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008128:	f7fc f89e 	bl	8004268 <HAL_GetTick>
 800812c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800812e:	4b39      	ldr	r3, [pc, #228]	; (8008214 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	015b      	lsls	r3, r3, #5
 8008134:	0d1b      	lsrs	r3, r3, #20
 8008136:	69fa      	ldr	r2, [r7, #28]
 8008138:	fb02 f303 	mul.w	r3, r2, r3
 800813c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800813e:	e054      	b.n	80081ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008146:	d050      	beq.n	80081ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008148:	f7fc f88e 	bl	8004268 <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	69fa      	ldr	r2, [r7, #28]
 8008154:	429a      	cmp	r2, r3
 8008156:	d902      	bls.n	800815e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d13d      	bne.n	80081da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800816c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008176:	d111      	bne.n	800819c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008180:	d004      	beq.n	800818c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800818a:	d107      	bne.n	800819c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800819a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081a4:	d10f      	bne.n	80081c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e017      	b.n	800820a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	4013      	ands	r3, r2
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	bf0c      	ite	eq
 80081fa:	2301      	moveq	r3, #1
 80081fc:	2300      	movne	r3, #0
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	461a      	mov	r2, r3
 8008202:	79fb      	ldrb	r3, [r7, #7]
 8008204:	429a      	cmp	r2, r3
 8008206:	d19b      	bne.n	8008140 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3720      	adds	r7, #32
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	2000001c 	.word	0x2000001c

08008218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af02      	add	r7, sp, #8
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008224:	4b1b      	ldr	r3, [pc, #108]	; (8008294 <SPI_EndRxTxTransaction+0x7c>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a1b      	ldr	r2, [pc, #108]	; (8008298 <SPI_EndRxTxTransaction+0x80>)
 800822a:	fba2 2303 	umull	r2, r3, r2, r3
 800822e:	0d5b      	lsrs	r3, r3, #21
 8008230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008234:	fb02 f303 	mul.w	r3, r2, r3
 8008238:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008242:	d112      	bne.n	800826a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2200      	movs	r2, #0
 800824c:	2180      	movs	r1, #128	; 0x80
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f7ff ff5a 	bl	8008108 <SPI_WaitFlagStateUntilTimeout>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d016      	beq.n	8008288 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825e:	f043 0220 	orr.w	r2, r3, #32
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e00f      	b.n	800828a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	3b01      	subs	r3, #1
 8008274:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008280:	2b80      	cmp	r3, #128	; 0x80
 8008282:	d0f2      	beq.n	800826a <SPI_EndRxTxTransaction+0x52>
 8008284:	e000      	b.n	8008288 <SPI_EndRxTxTransaction+0x70>
        break;
 8008286:	bf00      	nop
  }

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	2000001c 	.word	0x2000001c
 8008298:	165e9f81 	.word	0x165e9f81

0800829c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e041      	b.n	8008332 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d106      	bne.n	80082c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7fa ff00 	bl	80030c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	3304      	adds	r3, #4
 80082d8:	4619      	mov	r1, r3
 80082da:	4610      	mov	r0, r2
 80082dc:	f000 fbb2 	bl	8008a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b01      	cmp	r3, #1
 800834e:	d001      	beq.n	8008354 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e04e      	b.n	80083f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2202      	movs	r2, #2
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68da      	ldr	r2, [r3, #12]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f042 0201 	orr.w	r2, r2, #1
 800836a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a23      	ldr	r2, [pc, #140]	; (8008400 <HAL_TIM_Base_Start_IT+0xc4>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d022      	beq.n	80083bc <HAL_TIM_Base_Start_IT+0x80>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800837e:	d01d      	beq.n	80083bc <HAL_TIM_Base_Start_IT+0x80>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a1f      	ldr	r2, [pc, #124]	; (8008404 <HAL_TIM_Base_Start_IT+0xc8>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d018      	beq.n	80083bc <HAL_TIM_Base_Start_IT+0x80>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a1e      	ldr	r2, [pc, #120]	; (8008408 <HAL_TIM_Base_Start_IT+0xcc>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d013      	beq.n	80083bc <HAL_TIM_Base_Start_IT+0x80>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a1c      	ldr	r2, [pc, #112]	; (800840c <HAL_TIM_Base_Start_IT+0xd0>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00e      	beq.n	80083bc <HAL_TIM_Base_Start_IT+0x80>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a1b      	ldr	r2, [pc, #108]	; (8008410 <HAL_TIM_Base_Start_IT+0xd4>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d009      	beq.n	80083bc <HAL_TIM_Base_Start_IT+0x80>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a19      	ldr	r2, [pc, #100]	; (8008414 <HAL_TIM_Base_Start_IT+0xd8>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d004      	beq.n	80083bc <HAL_TIM_Base_Start_IT+0x80>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a18      	ldr	r2, [pc, #96]	; (8008418 <HAL_TIM_Base_Start_IT+0xdc>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d111      	bne.n	80083e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b06      	cmp	r3, #6
 80083cc:	d010      	beq.n	80083f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f042 0201 	orr.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083de:	e007      	b.n	80083f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0201 	orr.w	r2, r2, #1
 80083ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	40010000 	.word	0x40010000
 8008404:	40000400 	.word	0x40000400
 8008408:	40000800 	.word	0x40000800
 800840c:	40000c00 	.word	0x40000c00
 8008410:	40010400 	.word	0x40010400
 8008414:	40014000 	.word	0x40014000
 8008418:	40001800 	.word	0x40001800

0800841c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e041      	b.n	80084b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d106      	bne.n	8008448 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f839 	bl	80084ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3304      	adds	r3, #4
 8008458:	4619      	mov	r1, r3
 800845a:	4610      	mov	r0, r2
 800845c:	f000 faf2 	bl	8008a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80084c2:	bf00      	nop
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b082      	sub	sp, #8
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d122      	bne.n	800852a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d11b      	bne.n	800852a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f06f 0202 	mvn.w	r2, #2
 80084fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	f003 0303 	and.w	r3, r3, #3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d003      	beq.n	8008518 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fa78 	bl	8008a06 <HAL_TIM_IC_CaptureCallback>
 8008516:	e005      	b.n	8008524 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fa6a 	bl	80089f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fa7b 	bl	8008a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	f003 0304 	and.w	r3, r3, #4
 8008534:	2b04      	cmp	r3, #4
 8008536:	d122      	bne.n	800857e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	f003 0304 	and.w	r3, r3, #4
 8008542:	2b04      	cmp	r3, #4
 8008544:	d11b      	bne.n	800857e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f06f 0204 	mvn.w	r2, #4
 800854e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2202      	movs	r2, #2
 8008554:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fa4e 	bl	8008a06 <HAL_TIM_IC_CaptureCallback>
 800856a:	e005      	b.n	8008578 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fa40 	bl	80089f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fa51 	bl	8008a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	f003 0308 	and.w	r3, r3, #8
 8008588:	2b08      	cmp	r3, #8
 800858a:	d122      	bne.n	80085d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f003 0308 	and.w	r3, r3, #8
 8008596:	2b08      	cmp	r3, #8
 8008598:	d11b      	bne.n	80085d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f06f 0208 	mvn.w	r2, #8
 80085a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2204      	movs	r2, #4
 80085a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	f003 0303 	and.w	r3, r3, #3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d003      	beq.n	80085c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fa24 	bl	8008a06 <HAL_TIM_IC_CaptureCallback>
 80085be:	e005      	b.n	80085cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fa16 	bl	80089f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fa27 	bl	8008a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	f003 0310 	and.w	r3, r3, #16
 80085dc:	2b10      	cmp	r3, #16
 80085de:	d122      	bne.n	8008626 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	f003 0310 	and.w	r3, r3, #16
 80085ea:	2b10      	cmp	r3, #16
 80085ec:	d11b      	bne.n	8008626 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f06f 0210 	mvn.w	r2, #16
 80085f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2208      	movs	r2, #8
 80085fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	69db      	ldr	r3, [r3, #28]
 8008604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f9fa 	bl	8008a06 <HAL_TIM_IC_CaptureCallback>
 8008612:	e005      	b.n	8008620 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f9ec 	bl	80089f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f9fd 	bl	8008a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	2b01      	cmp	r3, #1
 8008632:	d10e      	bne.n	8008652 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b01      	cmp	r3, #1
 8008640:	d107      	bne.n	8008652 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f06f 0201 	mvn.w	r2, #1
 800864a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7fa f949 	bl	80028e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800865c:	2b80      	cmp	r3, #128	; 0x80
 800865e:	d10e      	bne.n	800867e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866a:	2b80      	cmp	r3, #128	; 0x80
 800866c:	d107      	bne.n	800867e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fd53 	bl	8009124 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008688:	2b40      	cmp	r3, #64	; 0x40
 800868a:	d10e      	bne.n	80086aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008696:	2b40      	cmp	r3, #64	; 0x40
 8008698:	d107      	bne.n	80086aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f9c2 	bl	8008a2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	f003 0320 	and.w	r3, r3, #32
 80086b4:	2b20      	cmp	r3, #32
 80086b6:	d10e      	bne.n	80086d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f003 0320 	and.w	r3, r3, #32
 80086c2:	2b20      	cmp	r3, #32
 80086c4:	d107      	bne.n	80086d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f06f 0220 	mvn.w	r2, #32
 80086ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fd1d 	bl	8009110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086d6:	bf00      	nop
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d101      	bne.n	80086fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086fa:	2302      	movs	r3, #2
 80086fc:	e0ae      	b.n	800885c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b0c      	cmp	r3, #12
 800870a:	f200 809f 	bhi.w	800884c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800870e:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008714:	08008749 	.word	0x08008749
 8008718:	0800884d 	.word	0x0800884d
 800871c:	0800884d 	.word	0x0800884d
 8008720:	0800884d 	.word	0x0800884d
 8008724:	08008789 	.word	0x08008789
 8008728:	0800884d 	.word	0x0800884d
 800872c:	0800884d 	.word	0x0800884d
 8008730:	0800884d 	.word	0x0800884d
 8008734:	080087cb 	.word	0x080087cb
 8008738:	0800884d 	.word	0x0800884d
 800873c:	0800884d 	.word	0x0800884d
 8008740:	0800884d 	.word	0x0800884d
 8008744:	0800880b 	.word	0x0800880b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68b9      	ldr	r1, [r7, #8]
 800874e:	4618      	mov	r0, r3
 8008750:	f000 fa18 	bl	8008b84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699a      	ldr	r2, [r3, #24]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f042 0208 	orr.w	r2, r2, #8
 8008762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	699a      	ldr	r2, [r3, #24]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f022 0204 	bic.w	r2, r2, #4
 8008772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6999      	ldr	r1, [r3, #24]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	691a      	ldr	r2, [r3, #16]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	619a      	str	r2, [r3, #24]
      break;
 8008786:	e064      	b.n	8008852 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68b9      	ldr	r1, [r7, #8]
 800878e:	4618      	mov	r0, r3
 8008790:	f000 fa68 	bl	8008c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	699a      	ldr	r2, [r3, #24]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6999      	ldr	r1, [r3, #24]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	021a      	lsls	r2, r3, #8
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	430a      	orrs	r2, r1
 80087c6:	619a      	str	r2, [r3, #24]
      break;
 80087c8:	e043      	b.n	8008852 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68b9      	ldr	r1, [r7, #8]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 fabd 	bl	8008d50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	69da      	ldr	r2, [r3, #28]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f042 0208 	orr.w	r2, r2, #8
 80087e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69da      	ldr	r2, [r3, #28]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f022 0204 	bic.w	r2, r2, #4
 80087f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	69d9      	ldr	r1, [r3, #28]
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	691a      	ldr	r2, [r3, #16]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	61da      	str	r2, [r3, #28]
      break;
 8008808:	e023      	b.n	8008852 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68b9      	ldr	r1, [r7, #8]
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fb11 	bl	8008e38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69da      	ldr	r2, [r3, #28]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69da      	ldr	r2, [r3, #28]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69d9      	ldr	r1, [r3, #28]
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	021a      	lsls	r2, r3, #8
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	61da      	str	r2, [r3, #28]
      break;
 800884a:	e002      	b.n	8008852 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	75fb      	strb	r3, [r7, #23]
      break;
 8008850:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800885a:	7dfb      	ldrb	r3, [r7, #23]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3718      	adds	r7, #24
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008878:	2b01      	cmp	r3, #1
 800887a:	d101      	bne.n	8008880 <HAL_TIM_ConfigClockSource+0x1c>
 800887c:	2302      	movs	r3, #2
 800887e:	e0b4      	b.n	80089ea <HAL_TIM_ConfigClockSource+0x186>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800889e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088b8:	d03e      	beq.n	8008938 <HAL_TIM_ConfigClockSource+0xd4>
 80088ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088be:	f200 8087 	bhi.w	80089d0 <HAL_TIM_ConfigClockSource+0x16c>
 80088c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088c6:	f000 8086 	beq.w	80089d6 <HAL_TIM_ConfigClockSource+0x172>
 80088ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ce:	d87f      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x16c>
 80088d0:	2b70      	cmp	r3, #112	; 0x70
 80088d2:	d01a      	beq.n	800890a <HAL_TIM_ConfigClockSource+0xa6>
 80088d4:	2b70      	cmp	r3, #112	; 0x70
 80088d6:	d87b      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x16c>
 80088d8:	2b60      	cmp	r3, #96	; 0x60
 80088da:	d050      	beq.n	800897e <HAL_TIM_ConfigClockSource+0x11a>
 80088dc:	2b60      	cmp	r3, #96	; 0x60
 80088de:	d877      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x16c>
 80088e0:	2b50      	cmp	r3, #80	; 0x50
 80088e2:	d03c      	beq.n	800895e <HAL_TIM_ConfigClockSource+0xfa>
 80088e4:	2b50      	cmp	r3, #80	; 0x50
 80088e6:	d873      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x16c>
 80088e8:	2b40      	cmp	r3, #64	; 0x40
 80088ea:	d058      	beq.n	800899e <HAL_TIM_ConfigClockSource+0x13a>
 80088ec:	2b40      	cmp	r3, #64	; 0x40
 80088ee:	d86f      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x16c>
 80088f0:	2b30      	cmp	r3, #48	; 0x30
 80088f2:	d064      	beq.n	80089be <HAL_TIM_ConfigClockSource+0x15a>
 80088f4:	2b30      	cmp	r3, #48	; 0x30
 80088f6:	d86b      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x16c>
 80088f8:	2b20      	cmp	r3, #32
 80088fa:	d060      	beq.n	80089be <HAL_TIM_ConfigClockSource+0x15a>
 80088fc:	2b20      	cmp	r3, #32
 80088fe:	d867      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x16c>
 8008900:	2b00      	cmp	r3, #0
 8008902:	d05c      	beq.n	80089be <HAL_TIM_ConfigClockSource+0x15a>
 8008904:	2b10      	cmp	r3, #16
 8008906:	d05a      	beq.n	80089be <HAL_TIM_ConfigClockSource+0x15a>
 8008908:	e062      	b.n	80089d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	6899      	ldr	r1, [r3, #8]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f000 fb5d 	bl	8008fd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800892c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	609a      	str	r2, [r3, #8]
      break;
 8008936:	e04f      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6818      	ldr	r0, [r3, #0]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	6899      	ldr	r1, [r3, #8]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	f000 fb46 	bl	8008fd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689a      	ldr	r2, [r3, #8]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800895a:	609a      	str	r2, [r3, #8]
      break;
 800895c:	e03c      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6818      	ldr	r0, [r3, #0]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	6859      	ldr	r1, [r3, #4]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	461a      	mov	r2, r3
 800896c:	f000 faba 	bl	8008ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2150      	movs	r1, #80	; 0x50
 8008976:	4618      	mov	r0, r3
 8008978:	f000 fb13 	bl	8008fa2 <TIM_ITRx_SetConfig>
      break;
 800897c:	e02c      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6818      	ldr	r0, [r3, #0]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	6859      	ldr	r1, [r3, #4]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	461a      	mov	r2, r3
 800898c:	f000 fad9 	bl	8008f42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2160      	movs	r1, #96	; 0x60
 8008996:	4618      	mov	r0, r3
 8008998:	f000 fb03 	bl	8008fa2 <TIM_ITRx_SetConfig>
      break;
 800899c:	e01c      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6818      	ldr	r0, [r3, #0]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	6859      	ldr	r1, [r3, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	461a      	mov	r2, r3
 80089ac:	f000 fa9a 	bl	8008ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2140      	movs	r1, #64	; 0x40
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 faf3 	bl	8008fa2 <TIM_ITRx_SetConfig>
      break;
 80089bc:	e00c      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4619      	mov	r1, r3
 80089c8:	4610      	mov	r0, r2
 80089ca:	f000 faea 	bl	8008fa2 <TIM_ITRx_SetConfig>
      break;
 80089ce:	e003      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	73fb      	strb	r3, [r7, #15]
      break;
 80089d4:	e000      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80089d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089fa:	bf00      	nop
 80089fc:	370c      	adds	r7, #12
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b083      	sub	sp, #12
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a22:	bf00      	nop
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
	...

08008a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a40      	ldr	r2, [pc, #256]	; (8008b58 <TIM_Base_SetConfig+0x114>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d013      	beq.n	8008a84 <TIM_Base_SetConfig+0x40>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a62:	d00f      	beq.n	8008a84 <TIM_Base_SetConfig+0x40>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a3d      	ldr	r2, [pc, #244]	; (8008b5c <TIM_Base_SetConfig+0x118>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d00b      	beq.n	8008a84 <TIM_Base_SetConfig+0x40>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a3c      	ldr	r2, [pc, #240]	; (8008b60 <TIM_Base_SetConfig+0x11c>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d007      	beq.n	8008a84 <TIM_Base_SetConfig+0x40>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a3b      	ldr	r2, [pc, #236]	; (8008b64 <TIM_Base_SetConfig+0x120>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d003      	beq.n	8008a84 <TIM_Base_SetConfig+0x40>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a3a      	ldr	r2, [pc, #232]	; (8008b68 <TIM_Base_SetConfig+0x124>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d108      	bne.n	8008a96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a2f      	ldr	r2, [pc, #188]	; (8008b58 <TIM_Base_SetConfig+0x114>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d02b      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa4:	d027      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a2c      	ldr	r2, [pc, #176]	; (8008b5c <TIM_Base_SetConfig+0x118>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d023      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a2b      	ldr	r2, [pc, #172]	; (8008b60 <TIM_Base_SetConfig+0x11c>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d01f      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a2a      	ldr	r2, [pc, #168]	; (8008b64 <TIM_Base_SetConfig+0x120>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d01b      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a29      	ldr	r2, [pc, #164]	; (8008b68 <TIM_Base_SetConfig+0x124>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d017      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a28      	ldr	r2, [pc, #160]	; (8008b6c <TIM_Base_SetConfig+0x128>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d013      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a27      	ldr	r2, [pc, #156]	; (8008b70 <TIM_Base_SetConfig+0x12c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d00f      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a26      	ldr	r2, [pc, #152]	; (8008b74 <TIM_Base_SetConfig+0x130>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d00b      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a25      	ldr	r2, [pc, #148]	; (8008b78 <TIM_Base_SetConfig+0x134>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d007      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a24      	ldr	r2, [pc, #144]	; (8008b7c <TIM_Base_SetConfig+0x138>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d003      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a23      	ldr	r2, [pc, #140]	; (8008b80 <TIM_Base_SetConfig+0x13c>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d108      	bne.n	8008b08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	689a      	ldr	r2, [r3, #8]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a0a      	ldr	r2, [pc, #40]	; (8008b58 <TIM_Base_SetConfig+0x114>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d003      	beq.n	8008b3c <TIM_Base_SetConfig+0xf8>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a0c      	ldr	r2, [pc, #48]	; (8008b68 <TIM_Base_SetConfig+0x124>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d103      	bne.n	8008b44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	691a      	ldr	r2, [r3, #16]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	615a      	str	r2, [r3, #20]
}
 8008b4a:	bf00      	nop
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	40010000 	.word	0x40010000
 8008b5c:	40000400 	.word	0x40000400
 8008b60:	40000800 	.word	0x40000800
 8008b64:	40000c00 	.word	0x40000c00
 8008b68:	40010400 	.word	0x40010400
 8008b6c:	40014000 	.word	0x40014000
 8008b70:	40014400 	.word	0x40014400
 8008b74:	40014800 	.word	0x40014800
 8008b78:	40001800 	.word	0x40001800
 8008b7c:	40001c00 	.word	0x40001c00
 8008b80:	40002000 	.word	0x40002000

08008b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	f023 0201 	bic.w	r2, r3, #1
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0303 	bic.w	r3, r3, #3
 8008bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f023 0302 	bic.w	r3, r3, #2
 8008bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a20      	ldr	r2, [pc, #128]	; (8008c5c <TIM_OC1_SetConfig+0xd8>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d003      	beq.n	8008be8 <TIM_OC1_SetConfig+0x64>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a1f      	ldr	r2, [pc, #124]	; (8008c60 <TIM_OC1_SetConfig+0xdc>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d10c      	bne.n	8008c02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f023 0308 	bic.w	r3, r3, #8
 8008bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	697a      	ldr	r2, [r7, #20]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f023 0304 	bic.w	r3, r3, #4
 8008c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a15      	ldr	r2, [pc, #84]	; (8008c5c <TIM_OC1_SetConfig+0xd8>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d003      	beq.n	8008c12 <TIM_OC1_SetConfig+0x8e>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a14      	ldr	r2, [pc, #80]	; (8008c60 <TIM_OC1_SetConfig+0xdc>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d111      	bne.n	8008c36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	621a      	str	r2, [r3, #32]
}
 8008c50:	bf00      	nop
 8008c52:	371c      	adds	r7, #28
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	40010000 	.word	0x40010000
 8008c60:	40010400 	.word	0x40010400

08008c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	f023 0210 	bic.w	r2, r3, #16
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	021b      	lsls	r3, r3, #8
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f023 0320 	bic.w	r3, r3, #32
 8008cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	011b      	lsls	r3, r3, #4
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a22      	ldr	r2, [pc, #136]	; (8008d48 <TIM_OC2_SetConfig+0xe4>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d003      	beq.n	8008ccc <TIM_OC2_SetConfig+0x68>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a21      	ldr	r2, [pc, #132]	; (8008d4c <TIM_OC2_SetConfig+0xe8>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d10d      	bne.n	8008ce8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	011b      	lsls	r3, r3, #4
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a17      	ldr	r2, [pc, #92]	; (8008d48 <TIM_OC2_SetConfig+0xe4>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d003      	beq.n	8008cf8 <TIM_OC2_SetConfig+0x94>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a16      	ldr	r2, [pc, #88]	; (8008d4c <TIM_OC2_SetConfig+0xe8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d113      	bne.n	8008d20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	621a      	str	r2, [r3, #32]
}
 8008d3a:	bf00      	nop
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	40010000 	.word	0x40010000
 8008d4c:	40010400 	.word	0x40010400

08008d50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f023 0303 	bic.w	r3, r3, #3
 8008d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	021b      	lsls	r3, r3, #8
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a21      	ldr	r2, [pc, #132]	; (8008e30 <TIM_OC3_SetConfig+0xe0>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d003      	beq.n	8008db6 <TIM_OC3_SetConfig+0x66>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a20      	ldr	r2, [pc, #128]	; (8008e34 <TIM_OC3_SetConfig+0xe4>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d10d      	bne.n	8008dd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	021b      	lsls	r3, r3, #8
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a16      	ldr	r2, [pc, #88]	; (8008e30 <TIM_OC3_SetConfig+0xe0>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d003      	beq.n	8008de2 <TIM_OC3_SetConfig+0x92>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a15      	ldr	r2, [pc, #84]	; (8008e34 <TIM_OC3_SetConfig+0xe4>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d113      	bne.n	8008e0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	011b      	lsls	r3, r3, #4
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	621a      	str	r2, [r3, #32]
}
 8008e24:	bf00      	nop
 8008e26:	371c      	adds	r7, #28
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	40010000 	.word	0x40010000
 8008e34:	40010400 	.word	0x40010400

08008e38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	021b      	lsls	r3, r3, #8
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	031b      	lsls	r3, r3, #12
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a12      	ldr	r2, [pc, #72]	; (8008edc <TIM_OC4_SetConfig+0xa4>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d003      	beq.n	8008ea0 <TIM_OC4_SetConfig+0x68>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a11      	ldr	r2, [pc, #68]	; (8008ee0 <TIM_OC4_SetConfig+0xa8>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d109      	bne.n	8008eb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ea6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	019b      	lsls	r3, r3, #6
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	621a      	str	r2, [r3, #32]
}
 8008ece:	bf00      	nop
 8008ed0:	371c      	adds	r7, #28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	40010000 	.word	0x40010000
 8008ee0:	40010400 	.word	0x40010400

08008ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	f023 0201 	bic.w	r2, r3, #1
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	011b      	lsls	r3, r3, #4
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f023 030a 	bic.w	r3, r3, #10
 8008f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	621a      	str	r2, [r3, #32]
}
 8008f36:	bf00      	nop
 8008f38:	371c      	adds	r7, #28
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b087      	sub	sp, #28
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	60f8      	str	r0, [r7, #12]
 8008f4a:	60b9      	str	r1, [r7, #8]
 8008f4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	f023 0210 	bic.w	r2, r3, #16
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	031b      	lsls	r3, r3, #12
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	011b      	lsls	r3, r3, #4
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	621a      	str	r2, [r3, #32]
}
 8008f96:	bf00      	nop
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b085      	sub	sp, #20
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fba:	683a      	ldr	r2, [r7, #0]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	f043 0307 	orr.w	r3, r3, #7
 8008fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	609a      	str	r2, [r3, #8]
}
 8008fcc:	bf00      	nop
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ff2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	021a      	lsls	r2, r3, #8
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	431a      	orrs	r2, r3
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	4313      	orrs	r3, r2
 8009004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	609a      	str	r2, [r3, #8]
}
 800900c:	bf00      	nop
 800900e:	371c      	adds	r7, #28
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009028:	2b01      	cmp	r3, #1
 800902a:	d101      	bne.n	8009030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800902c:	2302      	movs	r3, #2
 800902e:	e05a      	b.n	80090e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009056:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	4313      	orrs	r3, r2
 8009060:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a21      	ldr	r2, [pc, #132]	; (80090f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d022      	beq.n	80090ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800907c:	d01d      	beq.n	80090ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a1d      	ldr	r2, [pc, #116]	; (80090f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d018      	beq.n	80090ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a1b      	ldr	r2, [pc, #108]	; (80090fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d013      	beq.n	80090ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a1a      	ldr	r2, [pc, #104]	; (8009100 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d00e      	beq.n	80090ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a18      	ldr	r2, [pc, #96]	; (8009104 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d009      	beq.n	80090ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a17      	ldr	r2, [pc, #92]	; (8009108 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d004      	beq.n	80090ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a15      	ldr	r2, [pc, #84]	; (800910c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d10c      	bne.n	80090d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	40010000 	.word	0x40010000
 80090f8:	40000400 	.word	0x40000400
 80090fc:	40000800 	.word	0x40000800
 8009100:	40000c00 	.word	0x40000c00
 8009104:	40010400 	.word	0x40010400
 8009108:	40014000 	.word	0x40014000
 800910c:	40001800 	.word	0x40001800

08009110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d101      	bne.n	800914a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e03f      	b.n	80091ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b00      	cmp	r3, #0
 8009154:	d106      	bne.n	8009164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7fa f810 	bl	8003184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2224      	movs	r2, #36	; 0x24
 8009168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68da      	ldr	r2, [r3, #12]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800917a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f929 	bl	80093d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	691a      	ldr	r2, [r3, #16]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	695a      	ldr	r2, [r3, #20]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68da      	ldr	r2, [r3, #12]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2220      	movs	r2, #32
 80091bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2220      	movs	r2, #32
 80091c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b08a      	sub	sp, #40	; 0x28
 80091d6:	af02      	add	r7, sp, #8
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	603b      	str	r3, [r7, #0]
 80091de:	4613      	mov	r3, r2
 80091e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80091e2:	2300      	movs	r3, #0
 80091e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b20      	cmp	r3, #32
 80091f0:	d17c      	bne.n	80092ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <HAL_UART_Transmit+0x2c>
 80091f8:	88fb      	ldrh	r3, [r7, #6]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e075      	b.n	80092ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009208:	2b01      	cmp	r3, #1
 800920a:	d101      	bne.n	8009210 <HAL_UART_Transmit+0x3e>
 800920c:	2302      	movs	r3, #2
 800920e:	e06e      	b.n	80092ee <HAL_UART_Transmit+0x11c>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2221      	movs	r2, #33	; 0x21
 8009222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009226:	f7fb f81f 	bl	8004268 <HAL_GetTick>
 800922a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	88fa      	ldrh	r2, [r7, #6]
 8009230:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	88fa      	ldrh	r2, [r7, #6]
 8009236:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009240:	d108      	bne.n	8009254 <HAL_UART_Transmit+0x82>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d104      	bne.n	8009254 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800924a:	2300      	movs	r3, #0
 800924c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	61bb      	str	r3, [r7, #24]
 8009252:	e003      	b.n	800925c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009258:	2300      	movs	r3, #0
 800925a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009264:	e02a      	b.n	80092bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2200      	movs	r2, #0
 800926e:	2180      	movs	r1, #128	; 0x80
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 f840 	bl	80092f6 <UART_WaitOnFlagUntilTimeout>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e036      	b.n	80092ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10b      	bne.n	800929e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	881b      	ldrh	r3, [r3, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009294:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	3302      	adds	r3, #2
 800929a:	61bb      	str	r3, [r7, #24]
 800929c:	e007      	b.n	80092ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	781a      	ldrb	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	3301      	adds	r3, #1
 80092ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	3b01      	subs	r3, #1
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1cf      	bne.n	8009266 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2200      	movs	r2, #0
 80092ce:	2140      	movs	r1, #64	; 0x40
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f000 f810 	bl	80092f6 <UART_WaitOnFlagUntilTimeout>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d001      	beq.n	80092e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e006      	b.n	80092ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	e000      	b.n	80092ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80092ec:	2302      	movs	r3, #2
  }
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3720      	adds	r7, #32
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b090      	sub	sp, #64	; 0x40
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	60b9      	str	r1, [r7, #8]
 8009300:	603b      	str	r3, [r7, #0]
 8009302:	4613      	mov	r3, r2
 8009304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009306:	e050      	b.n	80093aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800930a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800930e:	d04c      	beq.n	80093aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009312:	2b00      	cmp	r3, #0
 8009314:	d007      	beq.n	8009326 <UART_WaitOnFlagUntilTimeout+0x30>
 8009316:	f7fa ffa7 	bl	8004268 <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009322:	429a      	cmp	r2, r3
 8009324:	d241      	bcs.n	80093aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	330c      	adds	r3, #12
 800932c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009338:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800933c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	330c      	adds	r3, #12
 8009344:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009346:	637a      	str	r2, [r7, #52]	; 0x34
 8009348:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800934c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800934e:	e841 2300 	strex	r3, r2, [r1]
 8009352:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1e5      	bne.n	8009326 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3314      	adds	r3, #20
 8009360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	e853 3f00 	ldrex	r3, [r3]
 8009368:	613b      	str	r3, [r7, #16]
   return(result);
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	f023 0301 	bic.w	r3, r3, #1
 8009370:	63bb      	str	r3, [r7, #56]	; 0x38
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3314      	adds	r3, #20
 8009378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800937a:	623a      	str	r2, [r7, #32]
 800937c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937e:	69f9      	ldr	r1, [r7, #28]
 8009380:	6a3a      	ldr	r2, [r7, #32]
 8009382:	e841 2300 	strex	r3, r2, [r1]
 8009386:	61bb      	str	r3, [r7, #24]
   return(result);
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1e5      	bne.n	800935a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2220      	movs	r2, #32
 8009392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2220      	movs	r2, #32
 800939a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e00f      	b.n	80093ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	4013      	ands	r3, r2
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	bf0c      	ite	eq
 80093ba:	2301      	moveq	r3, #1
 80093bc:	2300      	movne	r3, #0
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	461a      	mov	r2, r3
 80093c2:	79fb      	ldrb	r3, [r7, #7]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d09f      	beq.n	8009308 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3740      	adds	r7, #64	; 0x40
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d8:	b09f      	sub	sp, #124	; 0x7c
 80093da:	af00      	add	r7, sp, #0
 80093dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80093e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ea:	68d9      	ldr	r1, [r3, #12]
 80093ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	ea40 0301 	orr.w	r3, r0, r1
 80093f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f8:	689a      	ldr	r2, [r3, #8]
 80093fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	431a      	orrs	r2, r3
 8009400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	431a      	orrs	r2, r3
 8009406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	4313      	orrs	r3, r2
 800940c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800940e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009418:	f021 010c 	bic.w	r1, r1, #12
 800941c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009422:	430b      	orrs	r3, r1
 8009424:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009432:	6999      	ldr	r1, [r3, #24]
 8009434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	ea40 0301 	orr.w	r3, r0, r1
 800943c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800943e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	4bc5      	ldr	r3, [pc, #788]	; (8009758 <UART_SetConfig+0x384>)
 8009444:	429a      	cmp	r2, r3
 8009446:	d004      	beq.n	8009452 <UART_SetConfig+0x7e>
 8009448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	4bc3      	ldr	r3, [pc, #780]	; (800975c <UART_SetConfig+0x388>)
 800944e:	429a      	cmp	r2, r3
 8009450:	d103      	bne.n	800945a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009452:	f7fe faab 	bl	80079ac <HAL_RCC_GetPCLK2Freq>
 8009456:	6778      	str	r0, [r7, #116]	; 0x74
 8009458:	e002      	b.n	8009460 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800945a:	f7fe fa93 	bl	8007984 <HAL_RCC_GetPCLK1Freq>
 800945e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009462:	69db      	ldr	r3, [r3, #28]
 8009464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009468:	f040 80b6 	bne.w	80095d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800946c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800946e:	461c      	mov	r4, r3
 8009470:	f04f 0500 	mov.w	r5, #0
 8009474:	4622      	mov	r2, r4
 8009476:	462b      	mov	r3, r5
 8009478:	1891      	adds	r1, r2, r2
 800947a:	6439      	str	r1, [r7, #64]	; 0x40
 800947c:	415b      	adcs	r3, r3
 800947e:	647b      	str	r3, [r7, #68]	; 0x44
 8009480:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009484:	1912      	adds	r2, r2, r4
 8009486:	eb45 0303 	adc.w	r3, r5, r3
 800948a:	f04f 0000 	mov.w	r0, #0
 800948e:	f04f 0100 	mov.w	r1, #0
 8009492:	00d9      	lsls	r1, r3, #3
 8009494:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009498:	00d0      	lsls	r0, r2, #3
 800949a:	4602      	mov	r2, r0
 800949c:	460b      	mov	r3, r1
 800949e:	1911      	adds	r1, r2, r4
 80094a0:	6639      	str	r1, [r7, #96]	; 0x60
 80094a2:	416b      	adcs	r3, r5
 80094a4:	667b      	str	r3, [r7, #100]	; 0x64
 80094a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	461a      	mov	r2, r3
 80094ac:	f04f 0300 	mov.w	r3, #0
 80094b0:	1891      	adds	r1, r2, r2
 80094b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80094b4:	415b      	adcs	r3, r3
 80094b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80094bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80094c0:	f7f7 fbf2 	bl	8000ca8 <__aeabi_uldivmod>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4ba5      	ldr	r3, [pc, #660]	; (8009760 <UART_SetConfig+0x38c>)
 80094ca:	fba3 2302 	umull	r2, r3, r3, r2
 80094ce:	095b      	lsrs	r3, r3, #5
 80094d0:	011e      	lsls	r6, r3, #4
 80094d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094d4:	461c      	mov	r4, r3
 80094d6:	f04f 0500 	mov.w	r5, #0
 80094da:	4622      	mov	r2, r4
 80094dc:	462b      	mov	r3, r5
 80094de:	1891      	adds	r1, r2, r2
 80094e0:	6339      	str	r1, [r7, #48]	; 0x30
 80094e2:	415b      	adcs	r3, r3
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
 80094e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80094ea:	1912      	adds	r2, r2, r4
 80094ec:	eb45 0303 	adc.w	r3, r5, r3
 80094f0:	f04f 0000 	mov.w	r0, #0
 80094f4:	f04f 0100 	mov.w	r1, #0
 80094f8:	00d9      	lsls	r1, r3, #3
 80094fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094fe:	00d0      	lsls	r0, r2, #3
 8009500:	4602      	mov	r2, r0
 8009502:	460b      	mov	r3, r1
 8009504:	1911      	adds	r1, r2, r4
 8009506:	65b9      	str	r1, [r7, #88]	; 0x58
 8009508:	416b      	adcs	r3, r5
 800950a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800950c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	461a      	mov	r2, r3
 8009512:	f04f 0300 	mov.w	r3, #0
 8009516:	1891      	adds	r1, r2, r2
 8009518:	62b9      	str	r1, [r7, #40]	; 0x28
 800951a:	415b      	adcs	r3, r3
 800951c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800951e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009522:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009526:	f7f7 fbbf 	bl	8000ca8 <__aeabi_uldivmod>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	4b8c      	ldr	r3, [pc, #560]	; (8009760 <UART_SetConfig+0x38c>)
 8009530:	fba3 1302 	umull	r1, r3, r3, r2
 8009534:	095b      	lsrs	r3, r3, #5
 8009536:	2164      	movs	r1, #100	; 0x64
 8009538:	fb01 f303 	mul.w	r3, r1, r3
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	00db      	lsls	r3, r3, #3
 8009540:	3332      	adds	r3, #50	; 0x32
 8009542:	4a87      	ldr	r2, [pc, #540]	; (8009760 <UART_SetConfig+0x38c>)
 8009544:	fba2 2303 	umull	r2, r3, r2, r3
 8009548:	095b      	lsrs	r3, r3, #5
 800954a:	005b      	lsls	r3, r3, #1
 800954c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009550:	441e      	add	r6, r3
 8009552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009554:	4618      	mov	r0, r3
 8009556:	f04f 0100 	mov.w	r1, #0
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	1894      	adds	r4, r2, r2
 8009560:	623c      	str	r4, [r7, #32]
 8009562:	415b      	adcs	r3, r3
 8009564:	627b      	str	r3, [r7, #36]	; 0x24
 8009566:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800956a:	1812      	adds	r2, r2, r0
 800956c:	eb41 0303 	adc.w	r3, r1, r3
 8009570:	f04f 0400 	mov.w	r4, #0
 8009574:	f04f 0500 	mov.w	r5, #0
 8009578:	00dd      	lsls	r5, r3, #3
 800957a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800957e:	00d4      	lsls	r4, r2, #3
 8009580:	4622      	mov	r2, r4
 8009582:	462b      	mov	r3, r5
 8009584:	1814      	adds	r4, r2, r0
 8009586:	653c      	str	r4, [r7, #80]	; 0x50
 8009588:	414b      	adcs	r3, r1
 800958a:	657b      	str	r3, [r7, #84]	; 0x54
 800958c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	461a      	mov	r2, r3
 8009592:	f04f 0300 	mov.w	r3, #0
 8009596:	1891      	adds	r1, r2, r2
 8009598:	61b9      	str	r1, [r7, #24]
 800959a:	415b      	adcs	r3, r3
 800959c:	61fb      	str	r3, [r7, #28]
 800959e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80095a6:	f7f7 fb7f 	bl	8000ca8 <__aeabi_uldivmod>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	4b6c      	ldr	r3, [pc, #432]	; (8009760 <UART_SetConfig+0x38c>)
 80095b0:	fba3 1302 	umull	r1, r3, r3, r2
 80095b4:	095b      	lsrs	r3, r3, #5
 80095b6:	2164      	movs	r1, #100	; 0x64
 80095b8:	fb01 f303 	mul.w	r3, r1, r3
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	3332      	adds	r3, #50	; 0x32
 80095c2:	4a67      	ldr	r2, [pc, #412]	; (8009760 <UART_SetConfig+0x38c>)
 80095c4:	fba2 2303 	umull	r2, r3, r2, r3
 80095c8:	095b      	lsrs	r3, r3, #5
 80095ca:	f003 0207 	and.w	r2, r3, #7
 80095ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4432      	add	r2, r6
 80095d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80095d6:	e0b9      	b.n	800974c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095da:	461c      	mov	r4, r3
 80095dc:	f04f 0500 	mov.w	r5, #0
 80095e0:	4622      	mov	r2, r4
 80095e2:	462b      	mov	r3, r5
 80095e4:	1891      	adds	r1, r2, r2
 80095e6:	6139      	str	r1, [r7, #16]
 80095e8:	415b      	adcs	r3, r3
 80095ea:	617b      	str	r3, [r7, #20]
 80095ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095f0:	1912      	adds	r2, r2, r4
 80095f2:	eb45 0303 	adc.w	r3, r5, r3
 80095f6:	f04f 0000 	mov.w	r0, #0
 80095fa:	f04f 0100 	mov.w	r1, #0
 80095fe:	00d9      	lsls	r1, r3, #3
 8009600:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009604:	00d0      	lsls	r0, r2, #3
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	eb12 0804 	adds.w	r8, r2, r4
 800960e:	eb43 0905 	adc.w	r9, r3, r5
 8009612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	4618      	mov	r0, r3
 8009618:	f04f 0100 	mov.w	r1, #0
 800961c:	f04f 0200 	mov.w	r2, #0
 8009620:	f04f 0300 	mov.w	r3, #0
 8009624:	008b      	lsls	r3, r1, #2
 8009626:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800962a:	0082      	lsls	r2, r0, #2
 800962c:	4640      	mov	r0, r8
 800962e:	4649      	mov	r1, r9
 8009630:	f7f7 fb3a 	bl	8000ca8 <__aeabi_uldivmod>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	4b49      	ldr	r3, [pc, #292]	; (8009760 <UART_SetConfig+0x38c>)
 800963a:	fba3 2302 	umull	r2, r3, r3, r2
 800963e:	095b      	lsrs	r3, r3, #5
 8009640:	011e      	lsls	r6, r3, #4
 8009642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009644:	4618      	mov	r0, r3
 8009646:	f04f 0100 	mov.w	r1, #0
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	1894      	adds	r4, r2, r2
 8009650:	60bc      	str	r4, [r7, #8]
 8009652:	415b      	adcs	r3, r3
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800965a:	1812      	adds	r2, r2, r0
 800965c:	eb41 0303 	adc.w	r3, r1, r3
 8009660:	f04f 0400 	mov.w	r4, #0
 8009664:	f04f 0500 	mov.w	r5, #0
 8009668:	00dd      	lsls	r5, r3, #3
 800966a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800966e:	00d4      	lsls	r4, r2, #3
 8009670:	4622      	mov	r2, r4
 8009672:	462b      	mov	r3, r5
 8009674:	1814      	adds	r4, r2, r0
 8009676:	64bc      	str	r4, [r7, #72]	; 0x48
 8009678:	414b      	adcs	r3, r1
 800967a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800967c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	4618      	mov	r0, r3
 8009682:	f04f 0100 	mov.w	r1, #0
 8009686:	f04f 0200 	mov.w	r2, #0
 800968a:	f04f 0300 	mov.w	r3, #0
 800968e:	008b      	lsls	r3, r1, #2
 8009690:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009694:	0082      	lsls	r2, r0, #2
 8009696:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800969a:	f7f7 fb05 	bl	8000ca8 <__aeabi_uldivmod>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4b2f      	ldr	r3, [pc, #188]	; (8009760 <UART_SetConfig+0x38c>)
 80096a4:	fba3 1302 	umull	r1, r3, r3, r2
 80096a8:	095b      	lsrs	r3, r3, #5
 80096aa:	2164      	movs	r1, #100	; 0x64
 80096ac:	fb01 f303 	mul.w	r3, r1, r3
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	011b      	lsls	r3, r3, #4
 80096b4:	3332      	adds	r3, #50	; 0x32
 80096b6:	4a2a      	ldr	r2, [pc, #168]	; (8009760 <UART_SetConfig+0x38c>)
 80096b8:	fba2 2303 	umull	r2, r3, r2, r3
 80096bc:	095b      	lsrs	r3, r3, #5
 80096be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096c2:	441e      	add	r6, r3
 80096c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096c6:	4618      	mov	r0, r3
 80096c8:	f04f 0100 	mov.w	r1, #0
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	1894      	adds	r4, r2, r2
 80096d2:	603c      	str	r4, [r7, #0]
 80096d4:	415b      	adcs	r3, r3
 80096d6:	607b      	str	r3, [r7, #4]
 80096d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096dc:	1812      	adds	r2, r2, r0
 80096de:	eb41 0303 	adc.w	r3, r1, r3
 80096e2:	f04f 0400 	mov.w	r4, #0
 80096e6:	f04f 0500 	mov.w	r5, #0
 80096ea:	00dd      	lsls	r5, r3, #3
 80096ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80096f0:	00d4      	lsls	r4, r2, #3
 80096f2:	4622      	mov	r2, r4
 80096f4:	462b      	mov	r3, r5
 80096f6:	eb12 0a00 	adds.w	sl, r2, r0
 80096fa:	eb43 0b01 	adc.w	fp, r3, r1
 80096fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	4618      	mov	r0, r3
 8009704:	f04f 0100 	mov.w	r1, #0
 8009708:	f04f 0200 	mov.w	r2, #0
 800970c:	f04f 0300 	mov.w	r3, #0
 8009710:	008b      	lsls	r3, r1, #2
 8009712:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009716:	0082      	lsls	r2, r0, #2
 8009718:	4650      	mov	r0, sl
 800971a:	4659      	mov	r1, fp
 800971c:	f7f7 fac4 	bl	8000ca8 <__aeabi_uldivmod>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4b0e      	ldr	r3, [pc, #56]	; (8009760 <UART_SetConfig+0x38c>)
 8009726:	fba3 1302 	umull	r1, r3, r3, r2
 800972a:	095b      	lsrs	r3, r3, #5
 800972c:	2164      	movs	r1, #100	; 0x64
 800972e:	fb01 f303 	mul.w	r3, r1, r3
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	011b      	lsls	r3, r3, #4
 8009736:	3332      	adds	r3, #50	; 0x32
 8009738:	4a09      	ldr	r2, [pc, #36]	; (8009760 <UART_SetConfig+0x38c>)
 800973a:	fba2 2303 	umull	r2, r3, r2, r3
 800973e:	095b      	lsrs	r3, r3, #5
 8009740:	f003 020f 	and.w	r2, r3, #15
 8009744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4432      	add	r2, r6
 800974a:	609a      	str	r2, [r3, #8]
}
 800974c:	bf00      	nop
 800974e:	377c      	adds	r7, #124	; 0x7c
 8009750:	46bd      	mov	sp, r7
 8009752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009756:	bf00      	nop
 8009758:	40011000 	.word	0x40011000
 800975c:	40011400 	.word	0x40011400
 8009760:	51eb851f 	.word	0x51eb851f

08009764 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009764:	b084      	sub	sp, #16
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	f107 001c 	add.w	r0, r7, #28
 8009772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	2b01      	cmp	r3, #1
 800977a:	d122      	bne.n	80097c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009780:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80097a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d105      	bne.n	80097b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f001 fb1c 	bl	800adf4 <USB_CoreReset>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]
 80097c0:	e01a      	b.n	80097f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f001 fb10 	bl	800adf4 <USB_CoreReset>
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80097d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d106      	bne.n	80097ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	639a      	str	r2, [r3, #56]	; 0x38
 80097ea:	e005      	b.n	80097f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80097f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d10b      	bne.n	8009816 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f043 0206 	orr.w	r2, r3, #6
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	f043 0220 	orr.w	r2, r3, #32
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009816:	7bfb      	ldrb	r3, [r7, #15]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009822:	b004      	add	sp, #16
 8009824:	4770      	bx	lr
	...

08009828 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009828:	b480      	push	{r7}
 800982a:	b087      	sub	sp, #28
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	4613      	mov	r3, r2
 8009834:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009836:	79fb      	ldrb	r3, [r7, #7]
 8009838:	2b02      	cmp	r3, #2
 800983a:	d165      	bne.n	8009908 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	4a41      	ldr	r2, [pc, #260]	; (8009944 <USB_SetTurnaroundTime+0x11c>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d906      	bls.n	8009852 <USB_SetTurnaroundTime+0x2a>
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	4a40      	ldr	r2, [pc, #256]	; (8009948 <USB_SetTurnaroundTime+0x120>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d202      	bcs.n	8009852 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800984c:	230f      	movs	r3, #15
 800984e:	617b      	str	r3, [r7, #20]
 8009850:	e062      	b.n	8009918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	4a3c      	ldr	r2, [pc, #240]	; (8009948 <USB_SetTurnaroundTime+0x120>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d306      	bcc.n	8009868 <USB_SetTurnaroundTime+0x40>
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	4a3b      	ldr	r2, [pc, #236]	; (800994c <USB_SetTurnaroundTime+0x124>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d202      	bcs.n	8009868 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009862:	230e      	movs	r3, #14
 8009864:	617b      	str	r3, [r7, #20]
 8009866:	e057      	b.n	8009918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	4a38      	ldr	r2, [pc, #224]	; (800994c <USB_SetTurnaroundTime+0x124>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d306      	bcc.n	800987e <USB_SetTurnaroundTime+0x56>
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	4a37      	ldr	r2, [pc, #220]	; (8009950 <USB_SetTurnaroundTime+0x128>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d202      	bcs.n	800987e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009878:	230d      	movs	r3, #13
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	e04c      	b.n	8009918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	4a33      	ldr	r2, [pc, #204]	; (8009950 <USB_SetTurnaroundTime+0x128>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d306      	bcc.n	8009894 <USB_SetTurnaroundTime+0x6c>
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	4a32      	ldr	r2, [pc, #200]	; (8009954 <USB_SetTurnaroundTime+0x12c>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d802      	bhi.n	8009894 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800988e:	230c      	movs	r3, #12
 8009890:	617b      	str	r3, [r7, #20]
 8009892:	e041      	b.n	8009918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	4a2f      	ldr	r2, [pc, #188]	; (8009954 <USB_SetTurnaroundTime+0x12c>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d906      	bls.n	80098aa <USB_SetTurnaroundTime+0x82>
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	4a2e      	ldr	r2, [pc, #184]	; (8009958 <USB_SetTurnaroundTime+0x130>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d802      	bhi.n	80098aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80098a4:	230b      	movs	r3, #11
 80098a6:	617b      	str	r3, [r7, #20]
 80098a8:	e036      	b.n	8009918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	4a2a      	ldr	r2, [pc, #168]	; (8009958 <USB_SetTurnaroundTime+0x130>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d906      	bls.n	80098c0 <USB_SetTurnaroundTime+0x98>
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	4a29      	ldr	r2, [pc, #164]	; (800995c <USB_SetTurnaroundTime+0x134>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d802      	bhi.n	80098c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80098ba:	230a      	movs	r3, #10
 80098bc:	617b      	str	r3, [r7, #20]
 80098be:	e02b      	b.n	8009918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	4a26      	ldr	r2, [pc, #152]	; (800995c <USB_SetTurnaroundTime+0x134>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d906      	bls.n	80098d6 <USB_SetTurnaroundTime+0xae>
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	4a25      	ldr	r2, [pc, #148]	; (8009960 <USB_SetTurnaroundTime+0x138>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d202      	bcs.n	80098d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80098d0:	2309      	movs	r3, #9
 80098d2:	617b      	str	r3, [r7, #20]
 80098d4:	e020      	b.n	8009918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	4a21      	ldr	r2, [pc, #132]	; (8009960 <USB_SetTurnaroundTime+0x138>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d306      	bcc.n	80098ec <USB_SetTurnaroundTime+0xc4>
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	4a20      	ldr	r2, [pc, #128]	; (8009964 <USB_SetTurnaroundTime+0x13c>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d802      	bhi.n	80098ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80098e6:	2308      	movs	r3, #8
 80098e8:	617b      	str	r3, [r7, #20]
 80098ea:	e015      	b.n	8009918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	4a1d      	ldr	r2, [pc, #116]	; (8009964 <USB_SetTurnaroundTime+0x13c>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d906      	bls.n	8009902 <USB_SetTurnaroundTime+0xda>
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	4a1c      	ldr	r2, [pc, #112]	; (8009968 <USB_SetTurnaroundTime+0x140>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d202      	bcs.n	8009902 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80098fc:	2307      	movs	r3, #7
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	e00a      	b.n	8009918 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009902:	2306      	movs	r3, #6
 8009904:	617b      	str	r3, [r7, #20]
 8009906:	e007      	b.n	8009918 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009908:	79fb      	ldrb	r3, [r7, #7]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d102      	bne.n	8009914 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800990e:	2309      	movs	r3, #9
 8009910:	617b      	str	r3, [r7, #20]
 8009912:	e001      	b.n	8009918 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009914:	2309      	movs	r3, #9
 8009916:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	68da      	ldr	r2, [r3, #12]
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	029b      	lsls	r3, r3, #10
 800992c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009930:	431a      	orrs	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	371c      	adds	r7, #28
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	00d8acbf 	.word	0x00d8acbf
 8009948:	00e4e1c0 	.word	0x00e4e1c0
 800994c:	00f42400 	.word	0x00f42400
 8009950:	01067380 	.word	0x01067380
 8009954:	011a499f 	.word	0x011a499f
 8009958:	01312cff 	.word	0x01312cff
 800995c:	014ca43f 	.word	0x014ca43f
 8009960:	016e3600 	.word	0x016e3600
 8009964:	01a6ab1f 	.word	0x01a6ab1f
 8009968:	01e84800 	.word	0x01e84800

0800996c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f043 0201 	orr.w	r2, r3, #1
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800998e:	b480      	push	{r7}
 8009990:	b083      	sub	sp, #12
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f023 0201 	bic.w	r2, r3, #1
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	460b      	mov	r3, r1
 80099ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80099bc:	2300      	movs	r3, #0
 80099be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80099cc:	78fb      	ldrb	r3, [r7, #3]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d115      	bne.n	80099fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80099de:	2001      	movs	r0, #1
 80099e0:	f7fa fc4e 	bl	8004280 <HAL_Delay>
      ms++;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	3301      	adds	r3, #1
 80099e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f001 f972 	bl	800acd4 <USB_GetMode>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d01e      	beq.n	8009a34 <USB_SetCurrentMode+0x84>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b31      	cmp	r3, #49	; 0x31
 80099fa:	d9f0      	bls.n	80099de <USB_SetCurrentMode+0x2e>
 80099fc:	e01a      	b.n	8009a34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80099fe:	78fb      	ldrb	r3, [r7, #3]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d115      	bne.n	8009a30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a10:	2001      	movs	r0, #1
 8009a12:	f7fa fc35 	bl	8004280 <HAL_Delay>
      ms++;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f001 f959 	bl	800acd4 <USB_GetMode>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d005      	beq.n	8009a34 <USB_SetCurrentMode+0x84>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b31      	cmp	r3, #49	; 0x31
 8009a2c:	d9f0      	bls.n	8009a10 <USB_SetCurrentMode+0x60>
 8009a2e:	e001      	b.n	8009a34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e005      	b.n	8009a40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b32      	cmp	r3, #50	; 0x32
 8009a38:	d101      	bne.n	8009a3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e000      	b.n	8009a40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a48:	b084      	sub	sp, #16
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b086      	sub	sp, #24
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009a62:	2300      	movs	r3, #0
 8009a64:	613b      	str	r3, [r7, #16]
 8009a66:	e009      	b.n	8009a7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	3340      	adds	r3, #64	; 0x40
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	2200      	movs	r2, #0
 8009a74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	613b      	str	r3, [r7, #16]
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	2b0e      	cmp	r3, #14
 8009a80:	d9f2      	bls.n	8009a68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d11c      	bne.n	8009ac2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a96:	f043 0302 	orr.w	r3, r3, #2
 8009a9a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	639a      	str	r2, [r3, #56]	; 0x38
 8009ac0:	e00b      	b.n	8009ada <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aec:	4619      	mov	r1, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009af4:	461a      	mov	r2, r3
 8009af6:	680b      	ldr	r3, [r1, #0]
 8009af8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d10c      	bne.n	8009b1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d104      	bne.n	8009b10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009b06:	2100      	movs	r1, #0
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f945 	bl	8009d98 <USB_SetDevSpeed>
 8009b0e:	e008      	b.n	8009b22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009b10:	2101      	movs	r1, #1
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f940 	bl	8009d98 <USB_SetDevSpeed>
 8009b18:	e003      	b.n	8009b22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b1a:	2103      	movs	r1, #3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f93b 	bl	8009d98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b22:	2110      	movs	r1, #16
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f8f3 	bl	8009d10 <USB_FlushTxFifo>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f90f 	bl	8009d58 <USB_FlushRxFifo>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d001      	beq.n	8009b44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b56:	461a      	mov	r2, r3
 8009b58:	2300      	movs	r3, #0
 8009b5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b62:	461a      	mov	r2, r3
 8009b64:	2300      	movs	r3, #0
 8009b66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b68:	2300      	movs	r3, #0
 8009b6a:	613b      	str	r3, [r7, #16]
 8009b6c:	e043      	b.n	8009bf6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b84:	d118      	bne.n	8009bb8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10a      	bne.n	8009ba2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	015a      	lsls	r2, r3, #5
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	4413      	add	r3, r2
 8009b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b98:	461a      	mov	r2, r3
 8009b9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b9e:	6013      	str	r3, [r2, #0]
 8009ba0:	e013      	b.n	8009bca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	015a      	lsls	r2, r3, #5
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	4413      	add	r3, r2
 8009baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009bb4:	6013      	str	r3, [r2, #0]
 8009bb6:	e008      	b.n	8009bca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	2300      	movs	r3, #0
 8009bda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	015a      	lsls	r2, r3, #5
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	4413      	add	r3, r2
 8009be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be8:	461a      	mov	r2, r3
 8009bea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009bee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	613b      	str	r3, [r7, #16]
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d3b7      	bcc.n	8009b6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bfe:	2300      	movs	r3, #0
 8009c00:	613b      	str	r3, [r7, #16]
 8009c02:	e043      	b.n	8009c8c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c1a:	d118      	bne.n	8009c4e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10a      	bne.n	8009c38 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2e:	461a      	mov	r2, r3
 8009c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	e013      	b.n	8009c60 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c44:	461a      	mov	r2, r3
 8009c46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c4a:	6013      	str	r3, [r2, #0]
 8009c4c:	e008      	b.n	8009c60 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	015a      	lsls	r2, r3, #5
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	4413      	add	r3, r2
 8009c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	015a      	lsls	r2, r3, #5
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4413      	add	r3, r2
 8009c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	2300      	movs	r3, #0
 8009c70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	015a      	lsls	r2, r3, #5
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	4413      	add	r3, r2
 8009c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c7e:	461a      	mov	r2, r3
 8009c80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	613b      	str	r3, [r7, #16]
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d3b7      	bcc.n	8009c04 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ca2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ca6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009cb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d105      	bne.n	8009cc8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	f043 0210 	orr.w	r2, r3, #16
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	699a      	ldr	r2, [r3, #24]
 8009ccc:	4b0f      	ldr	r3, [pc, #60]	; (8009d0c <USB_DevInit+0x2c4>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d005      	beq.n	8009ce6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	f043 0208 	orr.w	r2, r3, #8
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d107      	bne.n	8009cfc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	699b      	ldr	r3, [r3, #24]
 8009cf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009cf4:	f043 0304 	orr.w	r3, r3, #4
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3718      	adds	r7, #24
 8009d02:	46bd      	mov	sp, r7
 8009d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d08:	b004      	add	sp, #16
 8009d0a:	4770      	bx	lr
 8009d0c:	803c3800 	.word	0x803c3800

08009d10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	019b      	lsls	r3, r3, #6
 8009d22:	f043 0220 	orr.w	r2, r3, #32
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	60fb      	str	r3, [r7, #12]
 8009d30:	4a08      	ldr	r2, [pc, #32]	; (8009d54 <USB_FlushTxFifo+0x44>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d901      	bls.n	8009d3a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8009d36:	2303      	movs	r3, #3
 8009d38:	e006      	b.n	8009d48 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	f003 0320 	and.w	r3, r3, #32
 8009d42:	2b20      	cmp	r3, #32
 8009d44:	d0f1      	beq.n	8009d2a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	00030d40 	.word	0x00030d40

08009d58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d60:	2300      	movs	r3, #0
 8009d62:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2210      	movs	r2, #16
 8009d68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	60fb      	str	r3, [r7, #12]
 8009d70:	4a08      	ldr	r2, [pc, #32]	; (8009d94 <USB_FlushRxFifo+0x3c>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d901      	bls.n	8009d7a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8009d76:	2303      	movs	r3, #3
 8009d78:	e006      	b.n	8009d88 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	f003 0310 	and.w	r3, r3, #16
 8009d82:	2b10      	cmp	r3, #16
 8009d84:	d0f1      	beq.n	8009d6a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	00030d40 	.word	0x00030d40

08009d98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	460b      	mov	r3, r1
 8009da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	78fb      	ldrb	r3, [r7, #3]
 8009db2:	68f9      	ldr	r1, [r7, #12]
 8009db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009db8:	4313      	orrs	r3, r2
 8009dba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b087      	sub	sp, #28
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	f003 0306 	and.w	r3, r3, #6
 8009de2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d102      	bne.n	8009df0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009dea:	2300      	movs	r3, #0
 8009dec:	75fb      	strb	r3, [r7, #23]
 8009dee:	e00a      	b.n	8009e06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d002      	beq.n	8009dfc <USB_GetDevSpeed+0x32>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2b06      	cmp	r3, #6
 8009dfa:	d102      	bne.n	8009e02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	75fb      	strb	r3, [r7, #23]
 8009e00:	e001      	b.n	8009e06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009e02:	230f      	movs	r3, #15
 8009e04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	371c      	adds	r7, #28
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	785b      	ldrb	r3, [r3, #1]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d13a      	bne.n	8009ea6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e36:	69da      	ldr	r2, [r3, #28]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	f003 030f 	and.w	r3, r3, #15
 8009e40:	2101      	movs	r1, #1
 8009e42:	fa01 f303 	lsl.w	r3, r1, r3
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	68f9      	ldr	r1, [r7, #12]
 8009e4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	015a      	lsls	r2, r3, #5
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	4413      	add	r3, r2
 8009e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d155      	bne.n	8009f14 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	78db      	ldrb	r3, [r3, #3]
 8009e82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	059b      	lsls	r3, r3, #22
 8009e8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	0151      	lsls	r1, r2, #5
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	440a      	add	r2, r1
 8009e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ea2:	6013      	str	r3, [r2, #0]
 8009ea4:	e036      	b.n	8009f14 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eac:	69da      	ldr	r2, [r3, #28]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	f003 030f 	and.w	r3, r3, #15
 8009eb6:	2101      	movs	r1, #1
 8009eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ebc:	041b      	lsls	r3, r3, #16
 8009ebe:	68f9      	ldr	r1, [r7, #12]
 8009ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	015a      	lsls	r2, r3, #5
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	4413      	add	r3, r2
 8009ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d11a      	bne.n	8009f14 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	015a      	lsls	r2, r3, #5
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	78db      	ldrb	r3, [r3, #3]
 8009ef8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009efa:	430b      	orrs	r3, r1
 8009efc:	4313      	orrs	r3, r2
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	0151      	lsls	r1, r2, #5
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	440a      	add	r2, r1
 8009f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f12:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
	...

08009f24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	785b      	ldrb	r3, [r3, #1]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d161      	bne.n	800a004 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	015a      	lsls	r2, r3, #5
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	4413      	add	r3, r2
 8009f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f56:	d11f      	bne.n	8009f98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	0151      	lsls	r1, r2, #5
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	440a      	add	r2, r1
 8009f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	015a      	lsls	r2, r3, #5
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4413      	add	r3, r2
 8009f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	0151      	lsls	r1, r2, #5
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	440a      	add	r2, r1
 8009f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	f003 030f 	and.w	r3, r3, #15
 8009fa8:	2101      	movs	r1, #1
 8009faa:	fa01 f303 	lsl.w	r3, r1, r3
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	43db      	mvns	r3, r3
 8009fb2:	68f9      	ldr	r1, [r7, #12]
 8009fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fb8:	4013      	ands	r3, r2
 8009fba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc2:	69da      	ldr	r2, [r3, #28]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	f003 030f 	and.w	r3, r3, #15
 8009fcc:	2101      	movs	r1, #1
 8009fce:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	43db      	mvns	r3, r3
 8009fd6:	68f9      	ldr	r1, [r7, #12]
 8009fd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fdc:	4013      	ands	r3, r2
 8009fde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	0159      	lsls	r1, r3, #5
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	440b      	add	r3, r1
 8009ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	4b35      	ldr	r3, [pc, #212]	; (800a0d4 <USB_DeactivateEndpoint+0x1b0>)
 8009ffe:	4013      	ands	r3, r2
 800a000:	600b      	str	r3, [r1, #0]
 800a002:	e060      	b.n	800a0c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a016:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a01a:	d11f      	bne.n	800a05c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	015a      	lsls	r2, r3, #5
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	4413      	add	r3, r2
 800a024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	0151      	lsls	r1, r2, #5
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	440a      	add	r2, r1
 800a032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a036:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a03a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	015a      	lsls	r2, r3, #5
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4413      	add	r3, r2
 800a044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	0151      	lsls	r1, r2, #5
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	440a      	add	r2, r1
 800a052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a056:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a05a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	f003 030f 	and.w	r3, r3, #15
 800a06c:	2101      	movs	r1, #1
 800a06e:	fa01 f303 	lsl.w	r3, r1, r3
 800a072:	041b      	lsls	r3, r3, #16
 800a074:	43db      	mvns	r3, r3
 800a076:	68f9      	ldr	r1, [r7, #12]
 800a078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a07c:	4013      	ands	r3, r2
 800a07e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a086:	69da      	ldr	r2, [r3, #28]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	f003 030f 	and.w	r3, r3, #15
 800a090:	2101      	movs	r1, #1
 800a092:	fa01 f303 	lsl.w	r3, r1, r3
 800a096:	041b      	lsls	r3, r3, #16
 800a098:	43db      	mvns	r3, r3
 800a09a:	68f9      	ldr	r1, [r7, #12]
 800a09c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	0159      	lsls	r1, r3, #5
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	440b      	add	r3, r1
 800a0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4b05      	ldr	r3, [pc, #20]	; (800a0d8 <USB_DeactivateEndpoint+0x1b4>)
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr
 800a0d4:	ec337800 	.word	0xec337800
 800a0d8:	eff37800 	.word	0xeff37800

0800a0dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b08a      	sub	sp, #40	; 0x28
 800a0e0:	af02      	add	r7, sp, #8
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	785b      	ldrb	r3, [r3, #1]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	f040 815c 	bne.w	800a3b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d132      	bne.n	800a16c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	015a      	lsls	r2, r3, #5
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	4413      	add	r3, r2
 800a10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	69ba      	ldr	r2, [r7, #24]
 800a116:	0151      	lsls	r1, r2, #5
 800a118:	69fa      	ldr	r2, [r7, #28]
 800a11a:	440a      	add	r2, r1
 800a11c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a120:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a124:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a128:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	4413      	add	r3, r2
 800a132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	69ba      	ldr	r2, [r7, #24]
 800a13a:	0151      	lsls	r1, r2, #5
 800a13c:	69fa      	ldr	r2, [r7, #28]
 800a13e:	440a      	add	r2, r1
 800a140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a144:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a148:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	015a      	lsls	r2, r3, #5
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	4413      	add	r3, r2
 800a152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	0151      	lsls	r1, r2, #5
 800a15c:	69fa      	ldr	r2, [r7, #28]
 800a15e:	440a      	add	r2, r1
 800a160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a164:	0cdb      	lsrs	r3, r3, #19
 800a166:	04db      	lsls	r3, r3, #19
 800a168:	6113      	str	r3, [r2, #16]
 800a16a:	e074      	b.n	800a256 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	015a      	lsls	r2, r3, #5
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	4413      	add	r3, r2
 800a174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	69ba      	ldr	r2, [r7, #24]
 800a17c:	0151      	lsls	r1, r2, #5
 800a17e:	69fa      	ldr	r2, [r7, #28]
 800a180:	440a      	add	r2, r1
 800a182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a186:	0cdb      	lsrs	r3, r3, #19
 800a188:	04db      	lsls	r3, r3, #19
 800a18a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	015a      	lsls	r2, r3, #5
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	4413      	add	r3, r2
 800a194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a198:	691b      	ldr	r3, [r3, #16]
 800a19a:	69ba      	ldr	r2, [r7, #24]
 800a19c:	0151      	lsls	r1, r2, #5
 800a19e:	69fa      	ldr	r2, [r7, #28]
 800a1a0:	440a      	add	r2, r1
 800a1a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	015a      	lsls	r2, r3, #5
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	6959      	ldr	r1, [r3, #20]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	440b      	add	r3, r1
 800a1c8:	1e59      	subs	r1, r3, #1
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a1d4:	4b9d      	ldr	r3, [pc, #628]	; (800a44c <USB_EPStartXfer+0x370>)
 800a1d6:	400b      	ands	r3, r1
 800a1d8:	69b9      	ldr	r1, [r7, #24]
 800a1da:	0148      	lsls	r0, r1, #5
 800a1dc:	69f9      	ldr	r1, [r7, #28]
 800a1de:	4401      	add	r1, r0
 800a1e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	015a      	lsls	r2, r3, #5
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f4:	691a      	ldr	r2, [r3, #16]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1fe:	69b9      	ldr	r1, [r7, #24]
 800a200:	0148      	lsls	r0, r1, #5
 800a202:	69f9      	ldr	r1, [r7, #28]
 800a204:	4401      	add	r1, r0
 800a206:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a20a:	4313      	orrs	r3, r2
 800a20c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	78db      	ldrb	r3, [r3, #3]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d11f      	bne.n	800a256 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	015a      	lsls	r2, r3, #5
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	4413      	add	r3, r2
 800a21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	69ba      	ldr	r2, [r7, #24]
 800a226:	0151      	lsls	r1, r2, #5
 800a228:	69fa      	ldr	r2, [r7, #28]
 800a22a:	440a      	add	r2, r1
 800a22c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a230:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a234:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	015a      	lsls	r2, r3, #5
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	4413      	add	r3, r2
 800a23e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	69ba      	ldr	r2, [r7, #24]
 800a246:	0151      	lsls	r1, r2, #5
 800a248:	69fa      	ldr	r2, [r7, #28]
 800a24a:	440a      	add	r2, r1
 800a24c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a250:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a254:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a256:	79fb      	ldrb	r3, [r7, #7]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d14b      	bne.n	800a2f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d009      	beq.n	800a278 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a270:	461a      	mov	r2, r3
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	78db      	ldrb	r3, [r3, #3]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d128      	bne.n	800a2d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d110      	bne.n	800a2b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	015a      	lsls	r2, r3, #5
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	4413      	add	r3, r2
 800a298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	69ba      	ldr	r2, [r7, #24]
 800a2a0:	0151      	lsls	r1, r2, #5
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	440a      	add	r2, r1
 800a2a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	e00f      	b.n	800a2d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	015a      	lsls	r2, r3, #5
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	69ba      	ldr	r2, [r7, #24]
 800a2c2:	0151      	lsls	r1, r2, #5
 800a2c4:	69fa      	ldr	r2, [r7, #28]
 800a2c6:	440a      	add	r2, r1
 800a2c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	015a      	lsls	r2, r3, #5
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	4413      	add	r3, r2
 800a2da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	69ba      	ldr	r2, [r7, #24]
 800a2e2:	0151      	lsls	r1, r2, #5
 800a2e4:	69fa      	ldr	r2, [r7, #28]
 800a2e6:	440a      	add	r2, r1
 800a2e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2f0:	6013      	str	r3, [r2, #0]
 800a2f2:	e12f      	b.n	800a554 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	69ba      	ldr	r2, [r7, #24]
 800a304:	0151      	lsls	r1, r2, #5
 800a306:	69fa      	ldr	r2, [r7, #28]
 800a308:	440a      	add	r2, r1
 800a30a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a30e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a312:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	78db      	ldrb	r3, [r3, #3]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d015      	beq.n	800a348 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	2b00      	cmp	r3, #0
 800a322:	f000 8117 	beq.w	800a554 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a32c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	f003 030f 	and.w	r3, r3, #15
 800a336:	2101      	movs	r1, #1
 800a338:	fa01 f303 	lsl.w	r3, r1, r3
 800a33c:	69f9      	ldr	r1, [r7, #28]
 800a33e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a342:	4313      	orrs	r3, r2
 800a344:	634b      	str	r3, [r1, #52]	; 0x34
 800a346:	e105      	b.n	800a554 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a354:	2b00      	cmp	r3, #0
 800a356:	d110      	bne.n	800a37a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	4413      	add	r3, r2
 800a360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	69ba      	ldr	r2, [r7, #24]
 800a368:	0151      	lsls	r1, r2, #5
 800a36a:	69fa      	ldr	r2, [r7, #28]
 800a36c:	440a      	add	r2, r1
 800a36e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a372:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	e00f      	b.n	800a39a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	015a      	lsls	r2, r3, #5
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	4413      	add	r3, r2
 800a382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	69ba      	ldr	r2, [r7, #24]
 800a38a:	0151      	lsls	r1, r2, #5
 800a38c:	69fa      	ldr	r2, [r7, #28]
 800a38e:	440a      	add	r2, r1
 800a390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a398:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	68d9      	ldr	r1, [r3, #12]
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	781a      	ldrb	r2, [r3, #0]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	b298      	uxth	r0, r3
 800a3a8:	79fb      	ldrb	r3, [r7, #7]
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f000 fa2b 	bl	800a80a <USB_WritePacket>
 800a3b4:	e0ce      	b.n	800a554 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	015a      	lsls	r2, r3, #5
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	4413      	add	r3, r2
 800a3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	69ba      	ldr	r2, [r7, #24]
 800a3c6:	0151      	lsls	r1, r2, #5
 800a3c8:	69fa      	ldr	r2, [r7, #28]
 800a3ca:	440a      	add	r2, r1
 800a3cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3d0:	0cdb      	lsrs	r3, r3, #19
 800a3d2:	04db      	lsls	r3, r3, #19
 800a3d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	015a      	lsls	r2, r3, #5
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	4413      	add	r3, r2
 800a3de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	69ba      	ldr	r2, [r7, #24]
 800a3e6:	0151      	lsls	r1, r2, #5
 800a3e8:	69fa      	ldr	r2, [r7, #28]
 800a3ea:	440a      	add	r2, r1
 800a3ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a3f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d126      	bne.n	800a450 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	015a      	lsls	r2, r3, #5
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	4413      	add	r3, r2
 800a40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a40e:	691a      	ldr	r2, [r3, #16]
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a418:	69b9      	ldr	r1, [r7, #24]
 800a41a:	0148      	lsls	r0, r1, #5
 800a41c:	69f9      	ldr	r1, [r7, #28]
 800a41e:	4401      	add	r1, r0
 800a420:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a424:	4313      	orrs	r3, r2
 800a426:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	015a      	lsls	r2, r3, #5
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	4413      	add	r3, r2
 800a430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	69ba      	ldr	r2, [r7, #24]
 800a438:	0151      	lsls	r1, r2, #5
 800a43a:	69fa      	ldr	r2, [r7, #28]
 800a43c:	440a      	add	r2, r1
 800a43e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a442:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a446:	6113      	str	r3, [r2, #16]
 800a448:	e036      	b.n	800a4b8 <USB_EPStartXfer+0x3dc>
 800a44a:	bf00      	nop
 800a44c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	695a      	ldr	r2, [r3, #20]
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	4413      	add	r3, r2
 800a45a:	1e5a      	subs	r2, r3, #1
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	fbb2 f3f3 	udiv	r3, r2, r3
 800a464:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a472:	691a      	ldr	r2, [r3, #16]
 800a474:	8afb      	ldrh	r3, [r7, #22]
 800a476:	04d9      	lsls	r1, r3, #19
 800a478:	4b39      	ldr	r3, [pc, #228]	; (800a560 <USB_EPStartXfer+0x484>)
 800a47a:	400b      	ands	r3, r1
 800a47c:	69b9      	ldr	r1, [r7, #24]
 800a47e:	0148      	lsls	r0, r1, #5
 800a480:	69f9      	ldr	r1, [r7, #28]
 800a482:	4401      	add	r1, r0
 800a484:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a488:	4313      	orrs	r3, r2
 800a48a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	015a      	lsls	r2, r3, #5
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	4413      	add	r3, r2
 800a494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a498:	691a      	ldr	r2, [r3, #16]
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	8af9      	ldrh	r1, [r7, #22]
 800a4a0:	fb01 f303 	mul.w	r3, r1, r3
 800a4a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4a8:	69b9      	ldr	r1, [r7, #24]
 800a4aa:	0148      	lsls	r0, r1, #5
 800a4ac:	69f9      	ldr	r1, [r7, #28]
 800a4ae:	4401      	add	r1, r0
 800a4b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a4b8:	79fb      	ldrb	r3, [r7, #7]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d10d      	bne.n	800a4da <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d009      	beq.n	800a4da <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	68d9      	ldr	r1, [r3, #12]
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	015a      	lsls	r2, r3, #5
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d6:	460a      	mov	r2, r1
 800a4d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	78db      	ldrb	r3, [r3, #3]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d128      	bne.n	800a534 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d110      	bne.n	800a514 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	015a      	lsls	r2, r3, #5
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	69ba      	ldr	r2, [r7, #24]
 800a502:	0151      	lsls	r1, r2, #5
 800a504:	69fa      	ldr	r2, [r7, #28]
 800a506:	440a      	add	r2, r1
 800a508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a50c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a510:	6013      	str	r3, [r2, #0]
 800a512:	e00f      	b.n	800a534 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	015a      	lsls	r2, r3, #5
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	4413      	add	r3, r2
 800a51c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	69ba      	ldr	r2, [r7, #24]
 800a524:	0151      	lsls	r1, r2, #5
 800a526:	69fa      	ldr	r2, [r7, #28]
 800a528:	440a      	add	r2, r1
 800a52a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a52e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a532:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	015a      	lsls	r2, r3, #5
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	69ba      	ldr	r2, [r7, #24]
 800a544:	0151      	lsls	r1, r2, #5
 800a546:	69fa      	ldr	r2, [r7, #28]
 800a548:	440a      	add	r2, r1
 800a54a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a54e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a552:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3720      	adds	r7, #32
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	1ff80000 	.word	0x1ff80000

0800a564 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a564:	b480      	push	{r7}
 800a566:	b087      	sub	sp, #28
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	4613      	mov	r3, r2
 800a570:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	785b      	ldrb	r3, [r3, #1]
 800a580:	2b01      	cmp	r3, #1
 800a582:	f040 80cd 	bne.w	800a720 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d132      	bne.n	800a5f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	015a      	lsls	r2, r3, #5
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	4413      	add	r3, r2
 800a596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	0151      	lsls	r1, r2, #5
 800a5a0:	697a      	ldr	r2, [r7, #20]
 800a5a2:	440a      	add	r2, r1
 800a5a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	015a      	lsls	r2, r3, #5
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	0151      	lsls	r1, r2, #5
 800a5c4:	697a      	ldr	r2, [r7, #20]
 800a5c6:	440a      	add	r2, r1
 800a5c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	693a      	ldr	r2, [r7, #16]
 800a5e2:	0151      	lsls	r1, r2, #5
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	440a      	add	r2, r1
 800a5e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5ec:	0cdb      	lsrs	r3, r3, #19
 800a5ee:	04db      	lsls	r3, r3, #19
 800a5f0:	6113      	str	r3, [r2, #16]
 800a5f2:	e04e      	b.n	800a692 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	015a      	lsls	r2, r3, #5
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	693a      	ldr	r2, [r7, #16]
 800a604:	0151      	lsls	r1, r2, #5
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	440a      	add	r2, r1
 800a60a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a60e:	0cdb      	lsrs	r3, r3, #19
 800a610:	04db      	lsls	r3, r3, #19
 800a612:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	015a      	lsls	r2, r3, #5
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	4413      	add	r3, r2
 800a61c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	0151      	lsls	r1, r2, #5
 800a626:	697a      	ldr	r2, [r7, #20]
 800a628:	440a      	add	r2, r1
 800a62a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a62e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a632:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a636:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	695a      	ldr	r2, [r3, #20]
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	429a      	cmp	r2, r3
 800a642:	d903      	bls.n	800a64c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	689a      	ldr	r2, [r3, #8]
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	015a      	lsls	r2, r3, #5
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	4413      	add	r3, r2
 800a654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	0151      	lsls	r1, r2, #5
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	440a      	add	r2, r1
 800a662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a666:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a66a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	015a      	lsls	r2, r3, #5
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	4413      	add	r3, r2
 800a674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a678:	691a      	ldr	r2, [r3, #16]
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a682:	6939      	ldr	r1, [r7, #16]
 800a684:	0148      	lsls	r0, r1, #5
 800a686:	6979      	ldr	r1, [r7, #20]
 800a688:	4401      	add	r1, r0
 800a68a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a68e:	4313      	orrs	r3, r2
 800a690:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a692:	79fb      	ldrb	r3, [r7, #7]
 800a694:	2b01      	cmp	r3, #1
 800a696:	d11e      	bne.n	800a6d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d009      	beq.n	800a6b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	015a      	lsls	r2, r3, #5
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	015a      	lsls	r2, r3, #5
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	693a      	ldr	r2, [r7, #16]
 800a6c4:	0151      	lsls	r1, r2, #5
 800a6c6:	697a      	ldr	r2, [r7, #20]
 800a6c8:	440a      	add	r2, r1
 800a6ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a6d2:	6013      	str	r3, [r2, #0]
 800a6d4:	e092      	b.n	800a7fc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	015a      	lsls	r2, r3, #5
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	0151      	lsls	r1, r2, #5
 800a6e8:	697a      	ldr	r2, [r7, #20]
 800a6ea:	440a      	add	r2, r1
 800a6ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a6f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d07e      	beq.n	800a7fc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	f003 030f 	and.w	r3, r3, #15
 800a70e:	2101      	movs	r1, #1
 800a710:	fa01 f303 	lsl.w	r3, r1, r3
 800a714:	6979      	ldr	r1, [r7, #20]
 800a716:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a71a:	4313      	orrs	r3, r2
 800a71c:	634b      	str	r3, [r1, #52]	; 0x34
 800a71e:	e06d      	b.n	800a7fc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	015a      	lsls	r2, r3, #5
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	4413      	add	r3, r2
 800a728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	0151      	lsls	r1, r2, #5
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	440a      	add	r2, r1
 800a736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a73a:	0cdb      	lsrs	r3, r3, #19
 800a73c:	04db      	lsls	r3, r3, #19
 800a73e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	015a      	lsls	r2, r3, #5
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	4413      	add	r3, r2
 800a748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	0151      	lsls	r1, r2, #5
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	440a      	add	r2, r1
 800a756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a75a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a75e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a762:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	695b      	ldr	r3, [r3, #20]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d003      	beq.n	800a774 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	689a      	ldr	r2, [r3, #8]
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	015a      	lsls	r2, r3, #5
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	4413      	add	r3, r2
 800a77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	0151      	lsls	r1, r2, #5
 800a786:	697a      	ldr	r2, [r7, #20]
 800a788:	440a      	add	r2, r1
 800a78a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a78e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a792:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	015a      	lsls	r2, r3, #5
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	4413      	add	r3, r2
 800a79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a0:	691a      	ldr	r2, [r3, #16]
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7aa:	6939      	ldr	r1, [r7, #16]
 800a7ac:	0148      	lsls	r0, r1, #5
 800a7ae:	6979      	ldr	r1, [r7, #20]
 800a7b0:	4401      	add	r1, r0
 800a7b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a7ba:	79fb      	ldrb	r3, [r7, #7]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d10d      	bne.n	800a7dc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d009      	beq.n	800a7dc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	68d9      	ldr	r1, [r3, #12]
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d8:	460a      	mov	r2, r1
 800a7da:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	015a      	lsls	r2, r3, #5
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	0151      	lsls	r1, r2, #5
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	440a      	add	r2, r1
 800a7f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a7fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	371c      	adds	r7, #28
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a80a:	b480      	push	{r7}
 800a80c:	b089      	sub	sp, #36	; 0x24
 800a80e:	af00      	add	r7, sp, #0
 800a810:	60f8      	str	r0, [r7, #12]
 800a812:	60b9      	str	r1, [r7, #8]
 800a814:	4611      	mov	r1, r2
 800a816:	461a      	mov	r2, r3
 800a818:	460b      	mov	r3, r1
 800a81a:	71fb      	strb	r3, [r7, #7]
 800a81c:	4613      	mov	r3, r2
 800a81e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a828:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d123      	bne.n	800a878 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a830:	88bb      	ldrh	r3, [r7, #4]
 800a832:	3303      	adds	r3, #3
 800a834:	089b      	lsrs	r3, r3, #2
 800a836:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a838:	2300      	movs	r3, #0
 800a83a:	61bb      	str	r3, [r7, #24]
 800a83c:	e018      	b.n	800a870 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a83e:	79fb      	ldrb	r3, [r7, #7]
 800a840:	031a      	lsls	r2, r3, #12
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	4413      	add	r3, r2
 800a846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a84a:	461a      	mov	r2, r3
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	3301      	adds	r3, #1
 800a856:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	3301      	adds	r3, #1
 800a85c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	3301      	adds	r3, #1
 800a862:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	3301      	adds	r3, #1
 800a868:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	3301      	adds	r3, #1
 800a86e:	61bb      	str	r3, [r7, #24]
 800a870:	69ba      	ldr	r2, [r7, #24]
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	429a      	cmp	r2, r3
 800a876:	d3e2      	bcc.n	800a83e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3724      	adds	r7, #36	; 0x24
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr

0800a886 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a886:	b480      	push	{r7}
 800a888:	b08b      	sub	sp, #44	; 0x2c
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	60f8      	str	r0, [r7, #12]
 800a88e:	60b9      	str	r1, [r7, #8]
 800a890:	4613      	mov	r3, r2
 800a892:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a89c:	88fb      	ldrh	r3, [r7, #6]
 800a89e:	089b      	lsrs	r3, r3, #2
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a8a4:	88fb      	ldrh	r3, [r7, #6]
 800a8a6:	f003 0303 	and.w	r3, r3, #3
 800a8aa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	623b      	str	r3, [r7, #32]
 800a8b0:	e014      	b.n	800a8dc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	601a      	str	r2, [r3, #0]
    pDest++;
 800a8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a8d6:	6a3b      	ldr	r3, [r7, #32]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	623b      	str	r3, [r7, #32]
 800a8dc:	6a3a      	ldr	r2, [r7, #32]
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d3e6      	bcc.n	800a8b2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a8e4:	8bfb      	ldrh	r3, [r7, #30]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d01e      	beq.n	800a928 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	f107 0310 	add.w	r3, r7, #16
 800a8fa:	6812      	ldr	r2, [r2, #0]
 800a8fc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a8fe:	693a      	ldr	r2, [r7, #16]
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	b2db      	uxtb	r3, r3
 800a904:	00db      	lsls	r3, r3, #3
 800a906:	fa22 f303 	lsr.w	r3, r2, r3
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90e:	701a      	strb	r2, [r3, #0]
      i++;
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	3301      	adds	r3, #1
 800a914:	623b      	str	r3, [r7, #32]
      pDest++;
 800a916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a918:	3301      	adds	r3, #1
 800a91a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a91c:	8bfb      	ldrh	r3, [r7, #30]
 800a91e:	3b01      	subs	r3, #1
 800a920:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a922:	8bfb      	ldrh	r3, [r7, #30]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1ea      	bne.n	800a8fe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	372c      	adds	r7, #44	; 0x2c
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr

0800a936 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a936:	b480      	push	{r7}
 800a938:	b085      	sub	sp, #20
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	785b      	ldrb	r3, [r3, #1]
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d12c      	bne.n	800a9ac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	015a      	lsls	r2, r3, #5
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4413      	add	r3, r2
 800a95a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	db12      	blt.n	800a98a <USB_EPSetStall+0x54>
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00f      	beq.n	800a98a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	015a      	lsls	r2, r3, #5
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4413      	add	r3, r2
 800a972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	0151      	lsls	r1, r2, #5
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	440a      	add	r2, r1
 800a980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a984:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a988:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	015a      	lsls	r2, r3, #5
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	4413      	add	r3, r2
 800a992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	0151      	lsls	r1, r2, #5
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	440a      	add	r2, r1
 800a9a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9a8:	6013      	str	r3, [r2, #0]
 800a9aa:	e02b      	b.n	800aa04 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	db12      	blt.n	800a9e4 <USB_EPSetStall+0xae>
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00f      	beq.n	800a9e4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	015a      	lsls	r2, r3, #5
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	0151      	lsls	r1, r2, #5
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	440a      	add	r2, r1
 800a9da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a9e2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	0151      	lsls	r1, r2, #5
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	440a      	add	r2, r1
 800a9fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3714      	adds	r7, #20
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr

0800aa12 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa12:	b480      	push	{r7}
 800aa14:	b085      	sub	sp, #20
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
 800aa1a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	785b      	ldrb	r3, [r3, #1]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d128      	bne.n	800aa80 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	015a      	lsls	r2, r3, #5
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	4413      	add	r3, r2
 800aa36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	0151      	lsls	r1, r2, #5
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	440a      	add	r2, r1
 800aa44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	78db      	ldrb	r3, [r3, #3]
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d003      	beq.n	800aa5e <USB_EPClearStall+0x4c>
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	78db      	ldrb	r3, [r3, #3]
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d138      	bne.n	800aad0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	015a      	lsls	r2, r3, #5
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	4413      	add	r3, r2
 800aa66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	0151      	lsls	r1, r2, #5
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	440a      	add	r2, r1
 800aa74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	e027      	b.n	800aad0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	015a      	lsls	r2, r3, #5
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	0151      	lsls	r1, r2, #5
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	440a      	add	r2, r1
 800aa96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	78db      	ldrb	r3, [r3, #3]
 800aaa4:	2b03      	cmp	r3, #3
 800aaa6:	d003      	beq.n	800aab0 <USB_EPClearStall+0x9e>
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	78db      	ldrb	r3, [r3, #3]
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d10f      	bne.n	800aad0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	015a      	lsls	r2, r3, #5
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	4413      	add	r3, r2
 800aab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	0151      	lsls	r1, r2, #5
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	440a      	add	r2, r1
 800aac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aace:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3714      	adds	r7, #20
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aade:	b480      	push	{r7}
 800aae0:	b085      	sub	sp, #20
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	460b      	mov	r3, r1
 800aae8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aafc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ab00:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	78fb      	ldrb	r3, [r7, #3]
 800ab0c:	011b      	lsls	r3, r3, #4
 800ab0e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ab12:	68f9      	ldr	r1, [r7, #12]
 800ab14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b085      	sub	sp, #20
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab44:	f023 0303 	bic.w	r3, r3, #3
 800ab48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab58:	f023 0302 	bic.w	r3, r3, #2
 800ab5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab86:	f023 0303 	bic.w	r3, r3, #3
 800ab8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab9a:	f043 0302 	orr.w	r3, r3, #2
 800ab9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3714      	adds	r7, #20
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800abae:	b480      	push	{r7}
 800abb0:	b085      	sub	sp, #20
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	4013      	ands	r3, r2
 800abc4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800abc6:	68fb      	ldr	r3, [r7, #12]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	4013      	ands	r3, r2
 800abf6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	0c1b      	lsrs	r3, r3, #16
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	68ba      	ldr	r2, [r7, #8]
 800ac28:	4013      	ands	r3, r2
 800ac2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	b29b      	uxth	r3, r3
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	460b      	mov	r3, r1
 800ac46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac4c:	78fb      	ldrb	r3, [r7, #3]
 800ac4e:	015a      	lsls	r2, r3, #5
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	4413      	add	r3, r2
 800ac54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac62:	695b      	ldr	r3, [r3, #20]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	4013      	ands	r3, r2
 800ac68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac6a:	68bb      	ldr	r3, [r7, #8]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b087      	sub	sp, #28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	460b      	mov	r3, r1
 800ac82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac9a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ac9c:	78fb      	ldrb	r3, [r7, #3]
 800ac9e:	f003 030f 	and.w	r3, r3, #15
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	fa22 f303 	lsr.w	r3, r2, r3
 800aca8:	01db      	lsls	r3, r3, #7
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	4313      	orrs	r3, r2
 800acb0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800acb2:	78fb      	ldrb	r3, [r7, #3]
 800acb4:	015a      	lsls	r2, r3, #5
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	4413      	add	r3, r2
 800acba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	693a      	ldr	r2, [r7, #16]
 800acc2:	4013      	ands	r3, r2
 800acc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800acc6:	68bb      	ldr	r3, [r7, #8]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	371c      	adds	r7, #28
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	f003 0301 	and.w	r3, r3, #1
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b085      	sub	sp, #20
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ad0e:	f023 0307 	bic.w	r3, r3, #7
 800ad12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
	...

0800ad38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b087      	sub	sp, #28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	460b      	mov	r3, r1
 800ad42:	607a      	str	r2, [r7, #4]
 800ad44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	333c      	adds	r3, #60	; 0x3c
 800ad4e:	3304      	adds	r3, #4
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	4a26      	ldr	r2, [pc, #152]	; (800adf0 <USB_EP0_OutStart+0xb8>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d90a      	bls.n	800ad72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad6c:	d101      	bne.n	800ad72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	e037      	b.n	800ade2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad78:	461a      	mov	r2, r3
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ada0:	f043 0318 	orr.w	r3, r3, #24
 800ada4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800adb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800adba:	7afb      	ldrb	r3, [r7, #11]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d10f      	bne.n	800ade0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adc6:	461a      	mov	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800adde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	371c      	adds	r7, #28
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	4f54300a 	.word	0x4f54300a

0800adf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800adfc:	2300      	movs	r3, #0
 800adfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	3301      	adds	r3, #1
 800ae04:	60fb      	str	r3, [r7, #12]
 800ae06:	4a13      	ldr	r2, [pc, #76]	; (800ae54 <USB_CoreReset+0x60>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d901      	bls.n	800ae10 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	e01a      	b.n	800ae46 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	daf3      	bge.n	800ae00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	f043 0201 	orr.w	r2, r3, #1
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	60fb      	str	r3, [r7, #12]
 800ae2e:	4a09      	ldr	r2, [pc, #36]	; (800ae54 <USB_CoreReset+0x60>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d901      	bls.n	800ae38 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800ae34:	2303      	movs	r3, #3
 800ae36:	e006      	b.n	800ae46 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	f003 0301 	and.w	r3, r3, #1
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d0f1      	beq.n	800ae28 <USB_CoreReset+0x34>

  return HAL_OK;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	00030d40 	.word	0x00030d40

0800ae58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ae5c:	4904      	ldr	r1, [pc, #16]	; (800ae70 <MX_FATFS_Init+0x18>)
 800ae5e:	4805      	ldr	r0, [pc, #20]	; (800ae74 <MX_FATFS_Init+0x1c>)
 800ae60:	f004 fffe 	bl	800fe60 <FATFS_LinkDriver>
 800ae64:	4603      	mov	r3, r0
 800ae66:	461a      	mov	r2, r3
 800ae68:	4b03      	ldr	r3, [pc, #12]	; (800ae78 <MX_FATFS_Init+0x20>)
 800ae6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ae6c:	bf00      	nop
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	2000ae70 	.word	0x2000ae70
 800ae74:	20000028 	.word	0x20000028
 800ae78:	2000ae74 	.word	0x2000ae74

0800ae7c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ae80:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	4603      	mov	r3, r0
 800ae94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800ae96:	79fb      	ldrb	r3, [r7, #7]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f000 f9dd 	bl	800b258 <USER_SPI_initialize>
 800ae9e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	4603      	mov	r3, r0
 800aeb0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800aeb2:	79fb      	ldrb	r3, [r7, #7]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 fab9 	bl	800b42c <USER_SPI_status>
 800aeba:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60b9      	str	r1, [r7, #8]
 800aecc:	607a      	str	r2, [r7, #4]
 800aece:	603b      	str	r3, [r7, #0]
 800aed0:	4603      	mov	r3, r0
 800aed2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800aed4:	7bf8      	ldrb	r0, [r7, #15]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	68b9      	ldr	r1, [r7, #8]
 800aedc:	f000 fabc 	bl	800b458 <USER_SPI_read>
 800aee0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
 800aef4:	603b      	str	r3, [r7, #0]
 800aef6:	4603      	mov	r3, r0
 800aef8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800aefa:	7bf8      	ldrb	r0, [r7, #15]
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	68b9      	ldr	r1, [r7, #8]
 800af02:	f000 fb0f 	bl	800b524 <USER_SPI_write>
 800af06:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	4603      	mov	r3, r0
 800af18:	603a      	str	r2, [r7, #0]
 800af1a:	71fb      	strb	r3, [r7, #7]
 800af1c:	460b      	mov	r3, r1
 800af1e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800af20:	79b9      	ldrb	r1, [r7, #6]
 800af22:	79fb      	ldrb	r3, [r7, #7]
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	4618      	mov	r0, r3
 800af28:	f000 fb78 	bl	800b61c <USER_SPI_ioctl>
 800af2c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
	...

0800af38 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800af40:	f7f9 f992 	bl	8004268 <HAL_GetTick>
 800af44:	4603      	mov	r3, r0
 800af46:	4a04      	ldr	r2, [pc, #16]	; (800af58 <SPI_Timer_On+0x20>)
 800af48:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800af4a:	4a04      	ldr	r2, [pc, #16]	; (800af5c <SPI_Timer_On+0x24>)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6013      	str	r3, [r2, #0]
}
 800af50:	bf00      	nop
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	2000b2dc 	.word	0x2000b2dc
 800af5c:	2000b2e0 	.word	0x2000b2e0

0800af60 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800af60:	b580      	push	{r7, lr}
 800af62:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800af64:	f7f9 f980 	bl	8004268 <HAL_GetTick>
 800af68:	4602      	mov	r2, r0
 800af6a:	4b06      	ldr	r3, [pc, #24]	; (800af84 <SPI_Timer_Status+0x24>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	1ad2      	subs	r2, r2, r3
 800af70:	4b05      	ldr	r3, [pc, #20]	; (800af88 <SPI_Timer_Status+0x28>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	429a      	cmp	r2, r3
 800af76:	bf34      	ite	cc
 800af78:	2301      	movcc	r3, #1
 800af7a:	2300      	movcs	r3, #0
 800af7c:	b2db      	uxtb	r3, r3
}
 800af7e:	4618      	mov	r0, r3
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	2000b2dc 	.word	0x2000b2dc
 800af88:	2000b2e0 	.word	0x2000b2e0

0800af8c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af02      	add	r7, sp, #8
 800af92:	4603      	mov	r3, r0
 800af94:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800af96:	f107 020f 	add.w	r2, r7, #15
 800af9a:	1df9      	adds	r1, r7, #7
 800af9c:	2332      	movs	r3, #50	; 0x32
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	2301      	movs	r3, #1
 800afa2:	4804      	ldr	r0, [pc, #16]	; (800afb4 <xchg_spi+0x28>)
 800afa4:	f7fc ff0d 	bl	8007dc2 <HAL_SPI_TransmitReceive>
    return rxDat;
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20009f88 	.word	0x20009f88

0800afb8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800afb8:	b590      	push	{r4, r7, lr}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800afc2:	2300      	movs	r3, #0
 800afc4:	60fb      	str	r3, [r7, #12]
 800afc6:	e00a      	b.n	800afde <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	18d4      	adds	r4, r2, r3
 800afce:	20ff      	movs	r0, #255	; 0xff
 800afd0:	f7ff ffdc 	bl	800af8c <xchg_spi>
 800afd4:	4603      	mov	r3, r0
 800afd6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	3301      	adds	r3, #1
 800afdc:	60fb      	str	r3, [r7, #12]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d3f0      	bcc.n	800afc8 <rcvr_spi_multi+0x10>
	}
}
 800afe6:	bf00      	nop
 800afe8:	bf00      	nop
 800afea:	3714      	adds	r7, #20
 800afec:	46bd      	mov	sp, r7
 800afee:	bd90      	pop	{r4, r7, pc}

0800aff0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800affa:	2300      	movs	r3, #0
 800affc:	60fb      	str	r3, [r7, #12]
 800affe:	e009      	b.n	800b014 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	4413      	add	r3, r2
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	4618      	mov	r0, r3
 800b00a:	f7ff ffbf 	bl	800af8c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	3301      	adds	r3, #1
 800b012:	60fb      	str	r3, [r7, #12]
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d3f1      	bcc.n	800b000 <xmit_spi_multi+0x10>
	}
}
 800b01c:	bf00      	nop
 800b01e:	bf00      	nop
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b086      	sub	sp, #24
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800b02e:	f7f9 f91b 	bl	8004268 <HAL_GetTick>
 800b032:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800b038:	20ff      	movs	r0, #255	; 0xff
 800b03a:	f7ff ffa7 	bl	800af8c <xchg_spi>
 800b03e:	4603      	mov	r3, r0
 800b040:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800b042:	7bfb      	ldrb	r3, [r7, #15]
 800b044:	2bff      	cmp	r3, #255	; 0xff
 800b046:	d007      	beq.n	800b058 <wait_ready+0x32>
 800b048:	f7f9 f90e 	bl	8004268 <HAL_GetTick>
 800b04c:	4602      	mov	r2, r0
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	429a      	cmp	r2, r3
 800b056:	d8ef      	bhi.n	800b038 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800b058:	7bfb      	ldrb	r3, [r7, #15]
 800b05a:	2bff      	cmp	r3, #255	; 0xff
 800b05c:	bf0c      	ite	eq
 800b05e:	2301      	moveq	r3, #1
 800b060:	2300      	movne	r3, #0
 800b062:	b2db      	uxtb	r3, r3
}
 800b064:	4618      	mov	r0, r3
 800b066:	3718      	adds	r7, #24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800b070:	2201      	movs	r2, #1
 800b072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b076:	4804      	ldr	r0, [pc, #16]	; (800b088 <despiselect+0x1c>)
 800b078:	f7f9 fe3e 	bl	8004cf8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800b07c:	20ff      	movs	r0, #255	; 0xff
 800b07e:	f7ff ff85 	bl	800af8c <xchg_spi>

}
 800b082:	bf00      	nop
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	40021400 	.word	0x40021400

0800b08c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800b090:	2200      	movs	r2, #0
 800b092:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b096:	480a      	ldr	r0, [pc, #40]	; (800b0c0 <spiselect+0x34>)
 800b098:	f7f9 fe2e 	bl	8004cf8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800b09c:	20ff      	movs	r0, #255	; 0xff
 800b09e:	f7ff ff75 	bl	800af8c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800b0a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b0a6:	f7ff ffbe 	bl	800b026 <wait_ready>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d001      	beq.n	800b0b4 <spiselect+0x28>
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e002      	b.n	800b0ba <spiselect+0x2e>

	despiselect();
 800b0b4:	f7ff ffda 	bl	800b06c <despiselect>
	return 0;	/* Timeout */
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	40021400 	.word	0x40021400

0800b0c4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800b0ce:	20c8      	movs	r0, #200	; 0xc8
 800b0d0:	f7ff ff32 	bl	800af38 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800b0d4:	20ff      	movs	r0, #255	; 0xff
 800b0d6:	f7ff ff59 	bl	800af8c <xchg_spi>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
 800b0e0:	2bff      	cmp	r3, #255	; 0xff
 800b0e2:	d104      	bne.n	800b0ee <rcvr_datablock+0x2a>
 800b0e4:	f7ff ff3c 	bl	800af60 <SPI_Timer_Status>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1f2      	bne.n	800b0d4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800b0ee:	7bfb      	ldrb	r3, [r7, #15]
 800b0f0:	2bfe      	cmp	r3, #254	; 0xfe
 800b0f2:	d001      	beq.n	800b0f8 <rcvr_datablock+0x34>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	e00a      	b.n	800b10e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f7ff ff5c 	bl	800afb8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800b100:	20ff      	movs	r0, #255	; 0xff
 800b102:	f7ff ff43 	bl	800af8c <xchg_spi>
 800b106:	20ff      	movs	r0, #255	; 0xff
 800b108:	f7ff ff40 	bl	800af8c <xchg_spi>

	return 1;						/* Function succeeded */
 800b10c:	2301      	movs	r3, #1
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b084      	sub	sp, #16
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
 800b11e:	460b      	mov	r3, r1
 800b120:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800b122:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b126:	f7ff ff7e 	bl	800b026 <wait_ready>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <xmit_datablock+0x1e>
 800b130:	2300      	movs	r3, #0
 800b132:	e01e      	b.n	800b172 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800b134:	78fb      	ldrb	r3, [r7, #3]
 800b136:	4618      	mov	r0, r3
 800b138:	f7ff ff28 	bl	800af8c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800b13c:	78fb      	ldrb	r3, [r7, #3]
 800b13e:	2bfd      	cmp	r3, #253	; 0xfd
 800b140:	d016      	beq.n	800b170 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800b142:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f7ff ff52 	bl	800aff0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800b14c:	20ff      	movs	r0, #255	; 0xff
 800b14e:	f7ff ff1d 	bl	800af8c <xchg_spi>
 800b152:	20ff      	movs	r0, #255	; 0xff
 800b154:	f7ff ff1a 	bl	800af8c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800b158:	20ff      	movs	r0, #255	; 0xff
 800b15a:	f7ff ff17 	bl	800af8c <xchg_spi>
 800b15e:	4603      	mov	r3, r0
 800b160:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	f003 031f 	and.w	r3, r3, #31
 800b168:	2b05      	cmp	r3, #5
 800b16a:	d001      	beq.n	800b170 <xmit_datablock+0x5a>
 800b16c:	2300      	movs	r3, #0
 800b16e:	e000      	b.n	800b172 <xmit_datablock+0x5c>
	}
	return 1;
 800b170:	2301      	movs	r3, #1
}
 800b172:	4618      	mov	r0, r3
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b084      	sub	sp, #16
 800b17e:	af00      	add	r7, sp, #0
 800b180:	4603      	mov	r3, r0
 800b182:	6039      	str	r1, [r7, #0]
 800b184:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800b186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	da0e      	bge.n	800b1ac <send_cmd+0x32>
		cmd &= 0x7F;
 800b18e:	79fb      	ldrb	r3, [r7, #7]
 800b190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b194:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800b196:	2100      	movs	r1, #0
 800b198:	2037      	movs	r0, #55	; 0x37
 800b19a:	f7ff ffee 	bl	800b17a <send_cmd>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800b1a2:	7bbb      	ldrb	r3, [r7, #14]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d901      	bls.n	800b1ac <send_cmd+0x32>
 800b1a8:	7bbb      	ldrb	r3, [r7, #14]
 800b1aa:	e051      	b.n	800b250 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800b1ac:	79fb      	ldrb	r3, [r7, #7]
 800b1ae:	2b0c      	cmp	r3, #12
 800b1b0:	d008      	beq.n	800b1c4 <send_cmd+0x4a>
		despiselect();
 800b1b2:	f7ff ff5b 	bl	800b06c <despiselect>
		if (!spiselect()) return 0xFF;
 800b1b6:	f7ff ff69 	bl	800b08c <spiselect>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d101      	bne.n	800b1c4 <send_cmd+0x4a>
 800b1c0:	23ff      	movs	r3, #255	; 0xff
 800b1c2:	e045      	b.n	800b250 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800b1c4:	79fb      	ldrb	r3, [r7, #7]
 800b1c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7ff fedd 	bl	800af8c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	0e1b      	lsrs	r3, r3, #24
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff fed7 	bl	800af8c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	0c1b      	lsrs	r3, r3, #16
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff fed1 	bl	800af8c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	0a1b      	lsrs	r3, r3, #8
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff fecb 	bl	800af8c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7ff fec6 	bl	800af8c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800b200:	2301      	movs	r3, #1
 800b202:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800b204:	79fb      	ldrb	r3, [r7, #7]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d101      	bne.n	800b20e <send_cmd+0x94>
 800b20a:	2395      	movs	r3, #149	; 0x95
 800b20c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800b20e:	79fb      	ldrb	r3, [r7, #7]
 800b210:	2b08      	cmp	r3, #8
 800b212:	d101      	bne.n	800b218 <send_cmd+0x9e>
 800b214:	2387      	movs	r3, #135	; 0x87
 800b216:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7ff feb6 	bl	800af8c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800b220:	79fb      	ldrb	r3, [r7, #7]
 800b222:	2b0c      	cmp	r3, #12
 800b224:	d102      	bne.n	800b22c <send_cmd+0xb2>
 800b226:	20ff      	movs	r0, #255	; 0xff
 800b228:	f7ff feb0 	bl	800af8c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800b22c:	230a      	movs	r3, #10
 800b22e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800b230:	20ff      	movs	r0, #255	; 0xff
 800b232:	f7ff feab 	bl	800af8c <xchg_spi>
 800b236:	4603      	mov	r3, r0
 800b238:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800b23a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	da05      	bge.n	800b24e <send_cmd+0xd4>
 800b242:	7bfb      	ldrb	r3, [r7, #15]
 800b244:	3b01      	subs	r3, #1
 800b246:	73fb      	strb	r3, [r7, #15]
 800b248:	7bfb      	ldrb	r3, [r7, #15]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1f0      	bne.n	800b230 <send_cmd+0xb6>

	return res;							/* Return received response */
 800b24e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b258:	b590      	push	{r4, r7, lr}
 800b25a:	b085      	sub	sp, #20
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800b262:	79fb      	ldrb	r3, [r7, #7]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d001      	beq.n	800b26c <USER_SPI_initialize+0x14>
 800b268:	2301      	movs	r3, #1
 800b26a:	e0d4      	b.n	800b416 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800b26c:	4b6c      	ldr	r3, [pc, #432]	; (800b420 <USER_SPI_initialize+0x1c8>)
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	b2db      	uxtb	r3, r3
 800b272:	f003 0302 	and.w	r3, r3, #2
 800b276:	2b00      	cmp	r3, #0
 800b278:	d003      	beq.n	800b282 <USER_SPI_initialize+0x2a>
 800b27a:	4b69      	ldr	r3, [pc, #420]	; (800b420 <USER_SPI_initialize+0x1c8>)
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	e0c9      	b.n	800b416 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800b282:	4b68      	ldr	r3, [pc, #416]	; (800b424 <USER_SPI_initialize+0x1cc>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	4b66      	ldr	r3, [pc, #408]	; (800b424 <USER_SPI_initialize+0x1cc>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800b290:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800b292:	230a      	movs	r3, #10
 800b294:	73fb      	strb	r3, [r7, #15]
 800b296:	e005      	b.n	800b2a4 <USER_SPI_initialize+0x4c>
 800b298:	20ff      	movs	r0, #255	; 0xff
 800b29a:	f7ff fe77 	bl	800af8c <xchg_spi>
 800b29e:	7bfb      	ldrb	r3, [r7, #15]
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	73fb      	strb	r3, [r7, #15]
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1f6      	bne.n	800b298 <USER_SPI_initialize+0x40>

	ty = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	f7ff ff62 	bl	800b17a <send_cmd>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	f040 808b 	bne.w	800b3d4 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800b2be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b2c2:	f7ff fe39 	bl	800af38 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800b2c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b2ca:	2008      	movs	r0, #8
 800b2cc:	f7ff ff55 	bl	800b17a <send_cmd>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d151      	bne.n	800b37a <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	73fb      	strb	r3, [r7, #15]
 800b2da:	e00d      	b.n	800b2f8 <USER_SPI_initialize+0xa0>
 800b2dc:	7bfc      	ldrb	r4, [r7, #15]
 800b2de:	20ff      	movs	r0, #255	; 0xff
 800b2e0:	f7ff fe54 	bl	800af8c <xchg_spi>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	f107 0310 	add.w	r3, r7, #16
 800b2ec:	4423      	add	r3, r4
 800b2ee:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b2f2:	7bfb      	ldrb	r3, [r7, #15]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	73fb      	strb	r3, [r7, #15]
 800b2f8:	7bfb      	ldrb	r3, [r7, #15]
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	d9ee      	bls.n	800b2dc <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800b2fe:	7abb      	ldrb	r3, [r7, #10]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d167      	bne.n	800b3d4 <USER_SPI_initialize+0x17c>
 800b304:	7afb      	ldrb	r3, [r7, #11]
 800b306:	2baa      	cmp	r3, #170	; 0xaa
 800b308:	d164      	bne.n	800b3d4 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800b30a:	bf00      	nop
 800b30c:	f7ff fe28 	bl	800af60 <SPI_Timer_Status>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d007      	beq.n	800b326 <USER_SPI_initialize+0xce>
 800b316:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b31a:	20a9      	movs	r0, #169	; 0xa9
 800b31c:	f7ff ff2d 	bl	800b17a <send_cmd>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1f2      	bne.n	800b30c <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800b326:	f7ff fe1b 	bl	800af60 <SPI_Timer_Status>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d051      	beq.n	800b3d4 <USER_SPI_initialize+0x17c>
 800b330:	2100      	movs	r1, #0
 800b332:	203a      	movs	r0, #58	; 0x3a
 800b334:	f7ff ff21 	bl	800b17a <send_cmd>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d14a      	bne.n	800b3d4 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800b33e:	2300      	movs	r3, #0
 800b340:	73fb      	strb	r3, [r7, #15]
 800b342:	e00d      	b.n	800b360 <USER_SPI_initialize+0x108>
 800b344:	7bfc      	ldrb	r4, [r7, #15]
 800b346:	20ff      	movs	r0, #255	; 0xff
 800b348:	f7ff fe20 	bl	800af8c <xchg_spi>
 800b34c:	4603      	mov	r3, r0
 800b34e:	461a      	mov	r2, r3
 800b350:	f107 0310 	add.w	r3, r7, #16
 800b354:	4423      	add	r3, r4
 800b356:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b35a:	7bfb      	ldrb	r3, [r7, #15]
 800b35c:	3301      	adds	r3, #1
 800b35e:	73fb      	strb	r3, [r7, #15]
 800b360:	7bfb      	ldrb	r3, [r7, #15]
 800b362:	2b03      	cmp	r3, #3
 800b364:	d9ee      	bls.n	800b344 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800b366:	7a3b      	ldrb	r3, [r7, #8]
 800b368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <USER_SPI_initialize+0x11c>
 800b370:	230c      	movs	r3, #12
 800b372:	e000      	b.n	800b376 <USER_SPI_initialize+0x11e>
 800b374:	2304      	movs	r3, #4
 800b376:	737b      	strb	r3, [r7, #13]
 800b378:	e02c      	b.n	800b3d4 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800b37a:	2100      	movs	r1, #0
 800b37c:	20a9      	movs	r0, #169	; 0xa9
 800b37e:	f7ff fefc 	bl	800b17a <send_cmd>
 800b382:	4603      	mov	r3, r0
 800b384:	2b01      	cmp	r3, #1
 800b386:	d804      	bhi.n	800b392 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800b388:	2302      	movs	r3, #2
 800b38a:	737b      	strb	r3, [r7, #13]
 800b38c:	23a9      	movs	r3, #169	; 0xa9
 800b38e:	73bb      	strb	r3, [r7, #14]
 800b390:	e003      	b.n	800b39a <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800b392:	2301      	movs	r3, #1
 800b394:	737b      	strb	r3, [r7, #13]
 800b396:	2301      	movs	r3, #1
 800b398:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800b39a:	bf00      	nop
 800b39c:	f7ff fde0 	bl	800af60 <SPI_Timer_Status>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d007      	beq.n	800b3b6 <USER_SPI_initialize+0x15e>
 800b3a6:	7bbb      	ldrb	r3, [r7, #14]
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7ff fee5 	bl	800b17a <send_cmd>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1f2      	bne.n	800b39c <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800b3b6:	f7ff fdd3 	bl	800af60 <SPI_Timer_Status>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d007      	beq.n	800b3d0 <USER_SPI_initialize+0x178>
 800b3c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b3c4:	2010      	movs	r0, #16
 800b3c6:	f7ff fed8 	bl	800b17a <send_cmd>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d001      	beq.n	800b3d4 <USER_SPI_initialize+0x17c>
				ty = 0;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800b3d4:	4a14      	ldr	r2, [pc, #80]	; (800b428 <USER_SPI_initialize+0x1d0>)
 800b3d6:	7b7b      	ldrb	r3, [r7, #13]
 800b3d8:	7013      	strb	r3, [r2, #0]
	despiselect();
 800b3da:	f7ff fe47 	bl	800b06c <despiselect>

	if (ty) {			/* OK */
 800b3de:	7b7b      	ldrb	r3, [r7, #13]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d012      	beq.n	800b40a <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800b3e4:	4b0f      	ldr	r3, [pc, #60]	; (800b424 <USER_SPI_initialize+0x1cc>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b3ee:	4b0d      	ldr	r3, [pc, #52]	; (800b424 <USER_SPI_initialize+0x1cc>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f042 0218 	orr.w	r2, r2, #24
 800b3f6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800b3f8:	4b09      	ldr	r3, [pc, #36]	; (800b420 <USER_SPI_initialize+0x1c8>)
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	f023 0301 	bic.w	r3, r3, #1
 800b402:	b2da      	uxtb	r2, r3
 800b404:	4b06      	ldr	r3, [pc, #24]	; (800b420 <USER_SPI_initialize+0x1c8>)
 800b406:	701a      	strb	r2, [r3, #0]
 800b408:	e002      	b.n	800b410 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800b40a:	4b05      	ldr	r3, [pc, #20]	; (800b420 <USER_SPI_initialize+0x1c8>)
 800b40c:	2201      	movs	r2, #1
 800b40e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800b410:	4b03      	ldr	r3, [pc, #12]	; (800b420 <USER_SPI_initialize+0x1c8>)
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	b2db      	uxtb	r3, r3
}
 800b416:	4618      	mov	r0, r3
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd90      	pop	{r4, r7, pc}
 800b41e:	bf00      	nop
 800b420:	2000003c 	.word	0x2000003c
 800b424:	20009f88 	.word	0x20009f88
 800b428:	20000590 	.word	0x20000590

0800b42c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800b436:	79fb      	ldrb	r3, [r7, #7]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d001      	beq.n	800b440 <USER_SPI_status+0x14>
 800b43c:	2301      	movs	r3, #1
 800b43e:	e002      	b.n	800b446 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800b440:	4b04      	ldr	r3, [pc, #16]	; (800b454 <USER_SPI_status+0x28>)
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	b2db      	uxtb	r3, r3
}
 800b446:	4618      	mov	r0, r3
 800b448:	370c      	adds	r7, #12
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	2000003c 	.word	0x2000003c

0800b458 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60b9      	str	r1, [r7, #8]
 800b460:	607a      	str	r2, [r7, #4]
 800b462:	603b      	str	r3, [r7, #0]
 800b464:	4603      	mov	r3, r0
 800b466:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b468:	7bfb      	ldrb	r3, [r7, #15]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d102      	bne.n	800b474 <USER_SPI_read+0x1c>
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d101      	bne.n	800b478 <USER_SPI_read+0x20>
 800b474:	2304      	movs	r3, #4
 800b476:	e04d      	b.n	800b514 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b478:	4b28      	ldr	r3, [pc, #160]	; (800b51c <USER_SPI_read+0xc4>)
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	f003 0301 	and.w	r3, r3, #1
 800b482:	2b00      	cmp	r3, #0
 800b484:	d001      	beq.n	800b48a <USER_SPI_read+0x32>
 800b486:	2303      	movs	r3, #3
 800b488:	e044      	b.n	800b514 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800b48a:	4b25      	ldr	r3, [pc, #148]	; (800b520 <USER_SPI_read+0xc8>)
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	f003 0308 	and.w	r3, r3, #8
 800b492:	2b00      	cmp	r3, #0
 800b494:	d102      	bne.n	800b49c <USER_SPI_read+0x44>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	025b      	lsls	r3, r3, #9
 800b49a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d111      	bne.n	800b4c6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800b4a2:	6879      	ldr	r1, [r7, #4]
 800b4a4:	2011      	movs	r0, #17
 800b4a6:	f7ff fe68 	bl	800b17a <send_cmd>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d129      	bne.n	800b504 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800b4b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b4b4:	68b8      	ldr	r0, [r7, #8]
 800b4b6:	f7ff fe05 	bl	800b0c4 <rcvr_datablock>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d021      	beq.n	800b504 <USER_SPI_read+0xac>
			count = 0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	603b      	str	r3, [r7, #0]
 800b4c4:	e01e      	b.n	800b504 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800b4c6:	6879      	ldr	r1, [r7, #4]
 800b4c8:	2012      	movs	r0, #18
 800b4ca:	f7ff fe56 	bl	800b17a <send_cmd>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d117      	bne.n	800b504 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800b4d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b4d8:	68b8      	ldr	r0, [r7, #8]
 800b4da:	f7ff fdf3 	bl	800b0c4 <rcvr_datablock>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00a      	beq.n	800b4fa <USER_SPI_read+0xa2>
				buff += 512;
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b4ea:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	603b      	str	r3, [r7, #0]
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1ed      	bne.n	800b4d4 <USER_SPI_read+0x7c>
 800b4f8:	e000      	b.n	800b4fc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800b4fa:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	200c      	movs	r0, #12
 800b500:	f7ff fe3b 	bl	800b17a <send_cmd>
		}
	}
	despiselect();
 800b504:	f7ff fdb2 	bl	800b06c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	bf14      	ite	ne
 800b50e:	2301      	movne	r3, #1
 800b510:	2300      	moveq	r3, #0
 800b512:	b2db      	uxtb	r3, r3
}
 800b514:	4618      	mov	r0, r3
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	2000003c 	.word	0x2000003c
 800b520:	20000590 	.word	0x20000590

0800b524 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60b9      	str	r1, [r7, #8]
 800b52c:	607a      	str	r2, [r7, #4]
 800b52e:	603b      	str	r3, [r7, #0]
 800b530:	4603      	mov	r3, r0
 800b532:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b534:	7bfb      	ldrb	r3, [r7, #15]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d102      	bne.n	800b540 <USER_SPI_write+0x1c>
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d101      	bne.n	800b544 <USER_SPI_write+0x20>
 800b540:	2304      	movs	r3, #4
 800b542:	e063      	b.n	800b60c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800b544:	4b33      	ldr	r3, [pc, #204]	; (800b614 <USER_SPI_write+0xf0>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	f003 0301 	and.w	r3, r3, #1
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <USER_SPI_write+0x32>
 800b552:	2303      	movs	r3, #3
 800b554:	e05a      	b.n	800b60c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800b556:	4b2f      	ldr	r3, [pc, #188]	; (800b614 <USER_SPI_write+0xf0>)
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	f003 0304 	and.w	r3, r3, #4
 800b560:	2b00      	cmp	r3, #0
 800b562:	d001      	beq.n	800b568 <USER_SPI_write+0x44>
 800b564:	2302      	movs	r3, #2
 800b566:	e051      	b.n	800b60c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800b568:	4b2b      	ldr	r3, [pc, #172]	; (800b618 <USER_SPI_write+0xf4>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	f003 0308 	and.w	r3, r3, #8
 800b570:	2b00      	cmp	r3, #0
 800b572:	d102      	bne.n	800b57a <USER_SPI_write+0x56>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	025b      	lsls	r3, r3, #9
 800b578:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d110      	bne.n	800b5a2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800b580:	6879      	ldr	r1, [r7, #4]
 800b582:	2018      	movs	r0, #24
 800b584:	f7ff fdf9 	bl	800b17a <send_cmd>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d136      	bne.n	800b5fc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800b58e:	21fe      	movs	r1, #254	; 0xfe
 800b590:	68b8      	ldr	r0, [r7, #8]
 800b592:	f7ff fdc0 	bl	800b116 <xmit_datablock>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d02f      	beq.n	800b5fc <USER_SPI_write+0xd8>
			count = 0;
 800b59c:	2300      	movs	r3, #0
 800b59e:	603b      	str	r3, [r7, #0]
 800b5a0:	e02c      	b.n	800b5fc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800b5a2:	4b1d      	ldr	r3, [pc, #116]	; (800b618 <USER_SPI_write+0xf4>)
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	f003 0306 	and.w	r3, r3, #6
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d003      	beq.n	800b5b6 <USER_SPI_write+0x92>
 800b5ae:	6839      	ldr	r1, [r7, #0]
 800b5b0:	2097      	movs	r0, #151	; 0x97
 800b5b2:	f7ff fde2 	bl	800b17a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800b5b6:	6879      	ldr	r1, [r7, #4]
 800b5b8:	2019      	movs	r0, #25
 800b5ba:	f7ff fdde 	bl	800b17a <send_cmd>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d11b      	bne.n	800b5fc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800b5c4:	21fc      	movs	r1, #252	; 0xfc
 800b5c6:	68b8      	ldr	r0, [r7, #8]
 800b5c8:	f7ff fda5 	bl	800b116 <xmit_datablock>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00a      	beq.n	800b5e8 <USER_SPI_write+0xc4>
				buff += 512;
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b5d8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	603b      	str	r3, [r7, #0]
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d1ee      	bne.n	800b5c4 <USER_SPI_write+0xa0>
 800b5e6:	e000      	b.n	800b5ea <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800b5e8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800b5ea:	21fd      	movs	r1, #253	; 0xfd
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	f7ff fd92 	bl	800b116 <xmit_datablock>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d101      	bne.n	800b5fc <USER_SPI_write+0xd8>
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800b5fc:	f7ff fd36 	bl	800b06c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	bf14      	ite	ne
 800b606:	2301      	movne	r3, #1
 800b608:	2300      	moveq	r3, #0
 800b60a:	b2db      	uxtb	r3, r3
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	2000003c 	.word	0x2000003c
 800b618:	20000590 	.word	0x20000590

0800b61c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b08c      	sub	sp, #48	; 0x30
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	603a      	str	r2, [r7, #0]
 800b626:	71fb      	strb	r3, [r7, #7]
 800b628:	460b      	mov	r3, r1
 800b62a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800b62c:	79fb      	ldrb	r3, [r7, #7]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <USER_SPI_ioctl+0x1a>
 800b632:	2304      	movs	r3, #4
 800b634:	e15a      	b.n	800b8ec <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b636:	4baf      	ldr	r3, [pc, #700]	; (800b8f4 <USER_SPI_ioctl+0x2d8>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	f003 0301 	and.w	r3, r3, #1
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <USER_SPI_ioctl+0x2c>
 800b644:	2303      	movs	r3, #3
 800b646:	e151      	b.n	800b8ec <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800b648:	2301      	movs	r3, #1
 800b64a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800b64e:	79bb      	ldrb	r3, [r7, #6]
 800b650:	2b04      	cmp	r3, #4
 800b652:	f200 8136 	bhi.w	800b8c2 <USER_SPI_ioctl+0x2a6>
 800b656:	a201      	add	r2, pc, #4	; (adr r2, 800b65c <USER_SPI_ioctl+0x40>)
 800b658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b65c:	0800b671 	.word	0x0800b671
 800b660:	0800b685 	.word	0x0800b685
 800b664:	0800b8c3 	.word	0x0800b8c3
 800b668:	0800b731 	.word	0x0800b731
 800b66c:	0800b827 	.word	0x0800b827
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800b670:	f7ff fd0c 	bl	800b08c <spiselect>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	f000 8127 	beq.w	800b8ca <USER_SPI_ioctl+0x2ae>
 800b67c:	2300      	movs	r3, #0
 800b67e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800b682:	e122      	b.n	800b8ca <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800b684:	2100      	movs	r1, #0
 800b686:	2009      	movs	r0, #9
 800b688:	f7ff fd77 	bl	800b17a <send_cmd>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	f040 811d 	bne.w	800b8ce <USER_SPI_ioctl+0x2b2>
 800b694:	f107 030c 	add.w	r3, r7, #12
 800b698:	2110      	movs	r1, #16
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7ff fd12 	bl	800b0c4 <rcvr_datablock>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f000 8113 	beq.w	800b8ce <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800b6a8:	7b3b      	ldrb	r3, [r7, #12]
 800b6aa:	099b      	lsrs	r3, r3, #6
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d111      	bne.n	800b6d6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b6b2:	7d7b      	ldrb	r3, [r7, #21]
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	7d3b      	ldrb	r3, [r7, #20]
 800b6b8:	021b      	lsls	r3, r3, #8
 800b6ba:	4413      	add	r3, r2
 800b6bc:	461a      	mov	r2, r3
 800b6be:	7cfb      	ldrb	r3, [r7, #19]
 800b6c0:	041b      	lsls	r3, r3, #16
 800b6c2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800b6c6:	4413      	add	r3, r2
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	029a      	lsls	r2, r3, #10
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	e028      	b.n	800b728 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b6d6:	7c7b      	ldrb	r3, [r7, #17]
 800b6d8:	f003 030f 	and.w	r3, r3, #15
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	7dbb      	ldrb	r3, [r7, #22]
 800b6e0:	09db      	lsrs	r3, r3, #7
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	4413      	add	r3, r2
 800b6e6:	b2da      	uxtb	r2, r3
 800b6e8:	7d7b      	ldrb	r3, [r7, #21]
 800b6ea:	005b      	lsls	r3, r3, #1
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	f003 0306 	and.w	r3, r3, #6
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	4413      	add	r3, r2
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	3302      	adds	r3, #2
 800b6fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b6fe:	7d3b      	ldrb	r3, [r7, #20]
 800b700:	099b      	lsrs	r3, r3, #6
 800b702:	b2db      	uxtb	r3, r3
 800b704:	461a      	mov	r2, r3
 800b706:	7cfb      	ldrb	r3, [r7, #19]
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	441a      	add	r2, r3
 800b70c:	7cbb      	ldrb	r3, [r7, #18]
 800b70e:	029b      	lsls	r3, r3, #10
 800b710:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b714:	4413      	add	r3, r2
 800b716:	3301      	adds	r3, #1
 800b718:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800b71a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b71e:	3b09      	subs	r3, #9
 800b720:	69fa      	ldr	r2, [r7, #28]
 800b722:	409a      	lsls	r2, r3
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800b728:	2300      	movs	r3, #0
 800b72a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800b72e:	e0ce      	b.n	800b8ce <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800b730:	4b71      	ldr	r3, [pc, #452]	; (800b8f8 <USER_SPI_ioctl+0x2dc>)
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	f003 0304 	and.w	r3, r3, #4
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d031      	beq.n	800b7a0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800b73c:	2100      	movs	r1, #0
 800b73e:	208d      	movs	r0, #141	; 0x8d
 800b740:	f7ff fd1b 	bl	800b17a <send_cmd>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	f040 80c3 	bne.w	800b8d2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800b74c:	20ff      	movs	r0, #255	; 0xff
 800b74e:	f7ff fc1d 	bl	800af8c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800b752:	f107 030c 	add.w	r3, r7, #12
 800b756:	2110      	movs	r1, #16
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff fcb3 	bl	800b0c4 <rcvr_datablock>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	f000 80b6 	beq.w	800b8d2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800b766:	2330      	movs	r3, #48	; 0x30
 800b768:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b76c:	e007      	b.n	800b77e <USER_SPI_ioctl+0x162>
 800b76e:	20ff      	movs	r0, #255	; 0xff
 800b770:	f7ff fc0c 	bl	800af8c <xchg_spi>
 800b774:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b778:	3b01      	subs	r3, #1
 800b77a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b77e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1f3      	bne.n	800b76e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b786:	7dbb      	ldrb	r3, [r7, #22]
 800b788:	091b      	lsrs	r3, r3, #4
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	461a      	mov	r2, r3
 800b78e:	2310      	movs	r3, #16
 800b790:	fa03 f202 	lsl.w	r2, r3, r2
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800b79e:	e098      	b.n	800b8d2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	2009      	movs	r0, #9
 800b7a4:	f7ff fce9 	bl	800b17a <send_cmd>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f040 8091 	bne.w	800b8d2 <USER_SPI_ioctl+0x2b6>
 800b7b0:	f107 030c 	add.w	r3, r7, #12
 800b7b4:	2110      	movs	r1, #16
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7ff fc84 	bl	800b0c4 <rcvr_datablock>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f000 8087 	beq.w	800b8d2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800b7c4:	4b4c      	ldr	r3, [pc, #304]	; (800b8f8 <USER_SPI_ioctl+0x2dc>)
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	f003 0302 	and.w	r3, r3, #2
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d012      	beq.n	800b7f6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b7d0:	7dbb      	ldrb	r3, [r7, #22]
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b7d8:	7dfa      	ldrb	r2, [r7, #23]
 800b7da:	09d2      	lsrs	r2, r2, #7
 800b7dc:	b2d2      	uxtb	r2, r2
 800b7de:	4413      	add	r3, r2
 800b7e0:	1c5a      	adds	r2, r3, #1
 800b7e2:	7e7b      	ldrb	r3, [r7, #25]
 800b7e4:	099b      	lsrs	r3, r3, #6
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	601a      	str	r2, [r3, #0]
 800b7f4:	e013      	b.n	800b81e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b7f6:	7dbb      	ldrb	r3, [r7, #22]
 800b7f8:	109b      	asrs	r3, r3, #2
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	f003 031f 	and.w	r3, r3, #31
 800b800:	3301      	adds	r3, #1
 800b802:	7dfa      	ldrb	r2, [r7, #23]
 800b804:	00d2      	lsls	r2, r2, #3
 800b806:	f002 0218 	and.w	r2, r2, #24
 800b80a:	7df9      	ldrb	r1, [r7, #23]
 800b80c:	0949      	lsrs	r1, r1, #5
 800b80e:	b2c9      	uxtb	r1, r1
 800b810:	440a      	add	r2, r1
 800b812:	3201      	adds	r2, #1
 800b814:	fb02 f303 	mul.w	r3, r2, r3
 800b818:	461a      	mov	r2, r3
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800b824:	e055      	b.n	800b8d2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b826:	4b34      	ldr	r3, [pc, #208]	; (800b8f8 <USER_SPI_ioctl+0x2dc>)
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	f003 0306 	and.w	r3, r3, #6
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d051      	beq.n	800b8d6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b832:	f107 020c 	add.w	r2, r7, #12
 800b836:	79fb      	ldrb	r3, [r7, #7]
 800b838:	210b      	movs	r1, #11
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7ff feee 	bl	800b61c <USER_SPI_ioctl>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d149      	bne.n	800b8da <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b846:	7b3b      	ldrb	r3, [r7, #12]
 800b848:	099b      	lsrs	r3, r3, #6
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d104      	bne.n	800b85a <USER_SPI_ioctl+0x23e>
 800b850:	7dbb      	ldrb	r3, [r7, #22]
 800b852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b856:	2b00      	cmp	r3, #0
 800b858:	d041      	beq.n	800b8de <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	623b      	str	r3, [r7, #32]
 800b85e:	6a3b      	ldr	r3, [r7, #32]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	62bb      	str	r3, [r7, #40]	; 0x28
 800b864:	6a3b      	ldr	r3, [r7, #32]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800b86a:	4b23      	ldr	r3, [pc, #140]	; (800b8f8 <USER_SPI_ioctl+0x2dc>)
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	f003 0308 	and.w	r3, r3, #8
 800b872:	2b00      	cmp	r3, #0
 800b874:	d105      	bne.n	800b882 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800b876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b878:	025b      	lsls	r3, r3, #9
 800b87a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	025b      	lsls	r3, r3, #9
 800b880:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800b882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b884:	2020      	movs	r0, #32
 800b886:	f7ff fc78 	bl	800b17a <send_cmd>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d128      	bne.n	800b8e2 <USER_SPI_ioctl+0x2c6>
 800b890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b892:	2021      	movs	r0, #33	; 0x21
 800b894:	f7ff fc71 	bl	800b17a <send_cmd>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d121      	bne.n	800b8e2 <USER_SPI_ioctl+0x2c6>
 800b89e:	2100      	movs	r1, #0
 800b8a0:	2026      	movs	r0, #38	; 0x26
 800b8a2:	f7ff fc6a 	bl	800b17a <send_cmd>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d11a      	bne.n	800b8e2 <USER_SPI_ioctl+0x2c6>
 800b8ac:	f247 5030 	movw	r0, #30000	; 0x7530
 800b8b0:	f7ff fbb9 	bl	800b026 <wait_ready>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d013      	beq.n	800b8e2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800b8c0:	e00f      	b.n	800b8e2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800b8c2:	2304      	movs	r3, #4
 800b8c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b8c8:	e00c      	b.n	800b8e4 <USER_SPI_ioctl+0x2c8>
		break;
 800b8ca:	bf00      	nop
 800b8cc:	e00a      	b.n	800b8e4 <USER_SPI_ioctl+0x2c8>
		break;
 800b8ce:	bf00      	nop
 800b8d0:	e008      	b.n	800b8e4 <USER_SPI_ioctl+0x2c8>
		break;
 800b8d2:	bf00      	nop
 800b8d4:	e006      	b.n	800b8e4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b8d6:	bf00      	nop
 800b8d8:	e004      	b.n	800b8e4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b8da:	bf00      	nop
 800b8dc:	e002      	b.n	800b8e4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b8de:	bf00      	nop
 800b8e0:	e000      	b.n	800b8e4 <USER_SPI_ioctl+0x2c8>
		break;
 800b8e2:	bf00      	nop
	}

	despiselect();
 800b8e4:	f7ff fbc2 	bl	800b06c <despiselect>

	return res;
 800b8e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3730      	adds	r7, #48	; 0x30
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	2000003c 	.word	0x2000003c
 800b8f8:	20000590 	.word	0x20000590

0800b8fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	460b      	mov	r3, r1
 800b906:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b908:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b90c:	f008 fadc 	bl	8013ec8 <USBD_static_malloc>
 800b910:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d105      	bne.n	800b924 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b920:	2302      	movs	r3, #2
 800b922:	e066      	b.n	800b9f2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	7c1b      	ldrb	r3, [r3, #16]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d119      	bne.n	800b968 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b934:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b938:	2202      	movs	r2, #2
 800b93a:	2181      	movs	r1, #129	; 0x81
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f008 f9a0 	bl	8013c82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2201      	movs	r2, #1
 800b946:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b94c:	2202      	movs	r2, #2
 800b94e:	2101      	movs	r1, #1
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f008 f996 	bl	8013c82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2201      	movs	r2, #1
 800b95a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2210      	movs	r2, #16
 800b962:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b966:	e016      	b.n	800b996 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b968:	2340      	movs	r3, #64	; 0x40
 800b96a:	2202      	movs	r2, #2
 800b96c:	2181      	movs	r1, #129	; 0x81
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f008 f987 	bl	8013c82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2201      	movs	r2, #1
 800b978:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b97a:	2340      	movs	r3, #64	; 0x40
 800b97c:	2202      	movs	r2, #2
 800b97e:	2101      	movs	r1, #1
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f008 f97e 	bl	8013c82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2201      	movs	r2, #1
 800b98a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2210      	movs	r2, #16
 800b992:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b996:	2308      	movs	r3, #8
 800b998:	2203      	movs	r2, #3
 800b99a:	2182      	movs	r1, #130	; 0x82
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f008 f970 	bl	8013c82 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	7c1b      	ldrb	r3, [r3, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d109      	bne.n	800b9e0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9d6:	2101      	movs	r1, #1
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f008 fa41 	bl	8013e60 <USBD_LL_PrepareReceive>
 800b9de:	e007      	b.n	800b9f0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9e6:	2340      	movs	r3, #64	; 0x40
 800b9e8:	2101      	movs	r1, #1
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f008 fa38 	bl	8013e60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b082      	sub	sp, #8
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
 800ba02:	460b      	mov	r3, r1
 800ba04:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ba06:	2181      	movs	r1, #129	; 0x81
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f008 f960 	bl	8013cce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ba14:	2101      	movs	r1, #1
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f008 f959 	bl	8013cce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ba24:	2182      	movs	r1, #130	; 0x82
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f008 f951 	bl	8013cce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d00e      	beq.n	800ba64 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba56:	4618      	mov	r0, r3
 800ba58:	f008 fa44 	bl	8013ee4 <USBD_static_free>
    pdev->pClassData = NULL;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
	...

0800ba70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b086      	sub	sp, #24
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ba82:	2300      	movs	r3, #0
 800ba84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ba86:	2300      	movs	r3, #0
 800ba88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d101      	bne.n	800ba98 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ba94:	2303      	movs	r3, #3
 800ba96:	e0af      	b.n	800bbf8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d03f      	beq.n	800bb24 <USBD_CDC_Setup+0xb4>
 800baa4:	2b20      	cmp	r3, #32
 800baa6:	f040 809f 	bne.w	800bbe8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	88db      	ldrh	r3, [r3, #6]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d02e      	beq.n	800bb10 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	b25b      	sxtb	r3, r3
 800bab8:	2b00      	cmp	r3, #0
 800baba:	da16      	bge.n	800baea <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	683a      	ldr	r2, [r7, #0]
 800bac6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bac8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800baca:	683a      	ldr	r2, [r7, #0]
 800bacc:	88d2      	ldrh	r2, [r2, #6]
 800bace:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	88db      	ldrh	r3, [r3, #6]
 800bad4:	2b07      	cmp	r3, #7
 800bad6:	bf28      	it	cs
 800bad8:	2307      	movcs	r3, #7
 800bada:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	89fa      	ldrh	r2, [r7, #14]
 800bae0:	4619      	mov	r1, r3
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f001 fae9 	bl	800d0ba <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bae8:	e085      	b.n	800bbf6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	785a      	ldrb	r2, [r3, #1]
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	88db      	ldrh	r3, [r3, #6]
 800baf8:	b2da      	uxtb	r2, r3
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bb00:	6939      	ldr	r1, [r7, #16]
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	88db      	ldrh	r3, [r3, #6]
 800bb06:	461a      	mov	r2, r3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f001 fb02 	bl	800d112 <USBD_CtlPrepareRx>
      break;
 800bb0e:	e072      	b.n	800bbf6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	683a      	ldr	r2, [r7, #0]
 800bb1a:	7850      	ldrb	r0, [r2, #1]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	4798      	blx	r3
      break;
 800bb22:	e068      	b.n	800bbf6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	785b      	ldrb	r3, [r3, #1]
 800bb28:	2b0b      	cmp	r3, #11
 800bb2a:	d852      	bhi.n	800bbd2 <USBD_CDC_Setup+0x162>
 800bb2c:	a201      	add	r2, pc, #4	; (adr r2, 800bb34 <USBD_CDC_Setup+0xc4>)
 800bb2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb32:	bf00      	nop
 800bb34:	0800bb65 	.word	0x0800bb65
 800bb38:	0800bbe1 	.word	0x0800bbe1
 800bb3c:	0800bbd3 	.word	0x0800bbd3
 800bb40:	0800bbd3 	.word	0x0800bbd3
 800bb44:	0800bbd3 	.word	0x0800bbd3
 800bb48:	0800bbd3 	.word	0x0800bbd3
 800bb4c:	0800bbd3 	.word	0x0800bbd3
 800bb50:	0800bbd3 	.word	0x0800bbd3
 800bb54:	0800bbd3 	.word	0x0800bbd3
 800bb58:	0800bbd3 	.word	0x0800bbd3
 800bb5c:	0800bb8f 	.word	0x0800bb8f
 800bb60:	0800bbb9 	.word	0x0800bbb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	d107      	bne.n	800bb80 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bb70:	f107 030a 	add.w	r3, r7, #10
 800bb74:	2202      	movs	r2, #2
 800bb76:	4619      	mov	r1, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f001 fa9e 	bl	800d0ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb7e:	e032      	b.n	800bbe6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f001 fa28 	bl	800cfd8 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	75fb      	strb	r3, [r7, #23]
          break;
 800bb8c:	e02b      	b.n	800bbe6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b03      	cmp	r3, #3
 800bb98:	d107      	bne.n	800bbaa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bb9a:	f107 030d 	add.w	r3, r7, #13
 800bb9e:	2201      	movs	r2, #1
 800bba0:	4619      	mov	r1, r3
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f001 fa89 	bl	800d0ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bba8:	e01d      	b.n	800bbe6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bbaa:	6839      	ldr	r1, [r7, #0]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f001 fa13 	bl	800cfd8 <USBD_CtlError>
            ret = USBD_FAIL;
 800bbb2:	2303      	movs	r3, #3
 800bbb4:	75fb      	strb	r3, [r7, #23]
          break;
 800bbb6:	e016      	b.n	800bbe6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	2b03      	cmp	r3, #3
 800bbc2:	d00f      	beq.n	800bbe4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f001 fa06 	bl	800cfd8 <USBD_CtlError>
            ret = USBD_FAIL;
 800bbcc:	2303      	movs	r3, #3
 800bbce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bbd0:	e008      	b.n	800bbe4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bbd2:	6839      	ldr	r1, [r7, #0]
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f001 f9ff 	bl	800cfd8 <USBD_CtlError>
          ret = USBD_FAIL;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	75fb      	strb	r3, [r7, #23]
          break;
 800bbde:	e002      	b.n	800bbe6 <USBD_CDC_Setup+0x176>
          break;
 800bbe0:	bf00      	nop
 800bbe2:	e008      	b.n	800bbf6 <USBD_CDC_Setup+0x186>
          break;
 800bbe4:	bf00      	nop
      }
      break;
 800bbe6:	e006      	b.n	800bbf6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bbe8:	6839      	ldr	r1, [r7, #0]
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f001 f9f4 	bl	800cfd8 <USBD_CtlError>
      ret = USBD_FAIL;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	75fb      	strb	r3, [r7, #23]
      break;
 800bbf4:	bf00      	nop
  }

  return (uint8_t)ret;
 800bbf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3718      	adds	r7, #24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d101      	bne.n	800bc22 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bc1e:	2303      	movs	r3, #3
 800bc20:	e04f      	b.n	800bcc2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bc2a:	78fa      	ldrb	r2, [r7, #3]
 800bc2c:	6879      	ldr	r1, [r7, #4]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	4413      	add	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	440b      	add	r3, r1
 800bc38:	3318      	adds	r3, #24
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d029      	beq.n	800bc94 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bc40:	78fa      	ldrb	r2, [r7, #3]
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	4613      	mov	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4413      	add	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	440b      	add	r3, r1
 800bc4e:	3318      	adds	r3, #24
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	78f9      	ldrb	r1, [r7, #3]
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	460b      	mov	r3, r1
 800bc58:	00db      	lsls	r3, r3, #3
 800bc5a:	1a5b      	subs	r3, r3, r1
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	4403      	add	r3, r0
 800bc60:	3344      	adds	r3, #68	; 0x44
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	fbb2 f1f3 	udiv	r1, r2, r3
 800bc68:	fb03 f301 	mul.w	r3, r3, r1
 800bc6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d110      	bne.n	800bc94 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bc72:	78fa      	ldrb	r2, [r7, #3]
 800bc74:	6879      	ldr	r1, [r7, #4]
 800bc76:	4613      	mov	r3, r2
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	440b      	add	r3, r1
 800bc80:	3318      	adds	r3, #24
 800bc82:	2200      	movs	r2, #0
 800bc84:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bc86:	78f9      	ldrb	r1, [r7, #3]
 800bc88:	2300      	movs	r3, #0
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f008 f8c6 	bl	8013e1e <USBD_LL_Transmit>
 800bc92:	e015      	b.n	800bcc0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00b      	beq.n	800bcc0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bcb6:	68ba      	ldr	r2, [r7, #8]
 800bcb8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bcbc:	78fa      	ldrb	r2, [r7, #3]
 800bcbe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b084      	sub	sp, #16
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d101      	bne.n	800bcec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bce8:	2303      	movs	r3, #3
 800bcea:	e015      	b.n	800bd18 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bcec:	78fb      	ldrb	r3, [r7, #3]
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f008 f8d6 	bl	8013ea2 <USBD_LL_GetRxDataSize>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bd12:	4611      	mov	r1, r2
 800bd14:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd2e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d101      	bne.n	800bd3a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bd36:	2303      	movs	r3, #3
 800bd38:	e01b      	b.n	800bd72 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d015      	beq.n	800bd70 <USBD_CDC_EP0_RxReady+0x50>
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bd4a:	2bff      	cmp	r3, #255	; 0xff
 800bd4c:	d010      	beq.n	800bd70 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd54:	689b      	ldr	r3, [r3, #8]
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bd5c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bd64:	b292      	uxth	r2, r2
 800bd66:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	22ff      	movs	r2, #255	; 0xff
 800bd6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
	...

0800bd7c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2243      	movs	r2, #67	; 0x43
 800bd88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bd8a:	4b03      	ldr	r3, [pc, #12]	; (800bd98 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr
 800bd98:	200000c8 	.word	0x200000c8

0800bd9c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2243      	movs	r2, #67	; 0x43
 800bda8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bdaa:	4b03      	ldr	r3, [pc, #12]	; (800bdb8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr
 800bdb8:	20000084 	.word	0x20000084

0800bdbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2243      	movs	r2, #67	; 0x43
 800bdc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bdca:	4b03      	ldr	r3, [pc, #12]	; (800bdd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr
 800bdd8:	2000010c 	.word	0x2000010c

0800bddc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	220a      	movs	r2, #10
 800bde8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bdea:	4b03      	ldr	r3, [pc, #12]	; (800bdf8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr
 800bdf8:	20000040 	.word	0x20000040

0800bdfc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d101      	bne.n	800be10 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800be0c:	2303      	movs	r3, #3
 800be0e:	e004      	b.n	800be1a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	370c      	adds	r7, #12
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr

0800be26 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800be26:	b480      	push	{r7}
 800be28:	b087      	sub	sp, #28
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	60f8      	str	r0, [r7, #12]
 800be2e:	60b9      	str	r1, [r7, #8]
 800be30:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be38:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d101      	bne.n	800be44 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800be40:	2303      	movs	r3, #3
 800be42:	e008      	b.n	800be56 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	68ba      	ldr	r2, [r7, #8]
 800be48:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	371c      	adds	r7, #28
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800be62:	b480      	push	{r7}
 800be64:	b085      	sub	sp, #20
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
 800be6a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800be7a:	2303      	movs	r3, #3
 800be7c:	e004      	b.n	800be88 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800be86:	2300      	movs	r3, #0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3714      	adds	r7, #20
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bea2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d101      	bne.n	800beb2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800beae:	2303      	movs	r3, #3
 800beb0:	e016      	b.n	800bee0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	7c1b      	ldrb	r3, [r3, #16]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d109      	bne.n	800bece <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bec4:	2101      	movs	r1, #1
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f007 ffca 	bl	8013e60 <USBD_LL_PrepareReceive>
 800becc:	e007      	b.n	800bede <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bed4:	2340      	movs	r3, #64	; 0x40
 800bed6:	2101      	movs	r1, #1
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f007 ffc1 	bl	8013e60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3710      	adds	r7, #16
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	4613      	mov	r3, r2
 800bef4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d101      	bne.n	800bf00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800befc:	2303      	movs	r3, #3
 800befe:	e01f      	b.n	800bf40 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d003      	beq.n	800bf26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	68ba      	ldr	r2, [r7, #8]
 800bf22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2201      	movs	r2, #1
 800bf2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	79fa      	ldrb	r2, [r7, #7]
 800bf32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f007 fe3d 	bl	8013bb4 <USBD_LL_Init>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bf3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3718      	adds	r7, #24
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf52:	2300      	movs	r3, #0
 800bf54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d101      	bne.n	800bf60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	e016      	b.n	800bf8e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	683a      	ldr	r2, [r7, #0]
 800bf64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d00b      	beq.n	800bf8c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7c:	f107 020e 	add.w	r2, r7, #14
 800bf80:	4610      	mov	r0, r2
 800bf82:	4798      	blx	r3
 800bf84:	4602      	mov	r2, r0
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b082      	sub	sp, #8
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f007 fe54 	bl	8013c4c <USBD_LL_Start>
 800bfa4:	4603      	mov	r3, r0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3708      	adds	r7, #8
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bfae:	b480      	push	{r7}
 800bfb0:	b083      	sub	sp, #12
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d009      	beq.n	800bff2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	78fa      	ldrb	r2, [r7, #3]
 800bfe8:	4611      	mov	r1, r2
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	4798      	blx	r3
 800bfee:	4603      	mov	r3, r0
 800bff0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bff2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3710      	adds	r7, #16
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	460b      	mov	r3, r1
 800c006:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d007      	beq.n	800c022 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	78fa      	ldrb	r2, [r7, #3]
 800c01c:	4611      	mov	r1, r2
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	4798      	blx	r3
  }

  return USBD_OK;
 800c022:	2300      	movs	r3, #0
}
 800c024:	4618      	mov	r0, r3
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	4618      	mov	r0, r3
 800c040:	f000 ff90 	bl	800cf64 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2201      	movs	r2, #1
 800c048:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c052:	461a      	mov	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c060:	f003 031f 	and.w	r3, r3, #31
 800c064:	2b02      	cmp	r3, #2
 800c066:	d01a      	beq.n	800c09e <USBD_LL_SetupStage+0x72>
 800c068:	2b02      	cmp	r3, #2
 800c06a:	d822      	bhi.n	800c0b2 <USBD_LL_SetupStage+0x86>
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d002      	beq.n	800c076 <USBD_LL_SetupStage+0x4a>
 800c070:	2b01      	cmp	r3, #1
 800c072:	d00a      	beq.n	800c08a <USBD_LL_SetupStage+0x5e>
 800c074:	e01d      	b.n	800c0b2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c07c:	4619      	mov	r1, r3
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fa62 	bl	800c548 <USBD_StdDevReq>
 800c084:	4603      	mov	r3, r0
 800c086:	73fb      	strb	r3, [r7, #15]
      break;
 800c088:	e020      	b.n	800c0cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c090:	4619      	mov	r1, r3
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fac6 	bl	800c624 <USBD_StdItfReq>
 800c098:	4603      	mov	r3, r0
 800c09a:	73fb      	strb	r3, [r7, #15]
      break;
 800c09c:	e016      	b.n	800c0cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fb05 	bl	800c6b6 <USBD_StdEPReq>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c0b0:	e00c      	b.n	800c0cc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c0b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	4619      	mov	r1, r3
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f007 fe23 	bl	8013d0c <USBD_LL_StallEP>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	73fb      	strb	r3, [r7, #15]
      break;
 800c0ca:	bf00      	nop
  }

  return ret;
 800c0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b086      	sub	sp, #24
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	60f8      	str	r0, [r7, #12]
 800c0de:	460b      	mov	r3, r1
 800c0e0:	607a      	str	r2, [r7, #4]
 800c0e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c0e4:	7afb      	ldrb	r3, [r7, #11]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d138      	bne.n	800c15c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c0f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c0f8:	2b03      	cmp	r3, #3
 800c0fa:	d14a      	bne.n	800c192 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	689a      	ldr	r2, [r3, #8]
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	429a      	cmp	r2, r3
 800c106:	d913      	bls.n	800c130 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	689a      	ldr	r2, [r3, #8]
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	1ad2      	subs	r2, r2, r3
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	68da      	ldr	r2, [r3, #12]
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	4293      	cmp	r3, r2
 800c120:	bf28      	it	cs
 800c122:	4613      	movcs	r3, r2
 800c124:	461a      	mov	r2, r3
 800c126:	6879      	ldr	r1, [r7, #4]
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	f001 f80f 	bl	800d14c <USBD_CtlContinueRx>
 800c12e:	e030      	b.n	800c192 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c136:	b2db      	uxtb	r3, r3
 800c138:	2b03      	cmp	r3, #3
 800c13a:	d10b      	bne.n	800c154 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c142:	691b      	ldr	r3, [r3, #16]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d005      	beq.n	800c154 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	68f8      	ldr	r0, [r7, #12]
 800c152:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f001 f80a 	bl	800d16e <USBD_CtlSendStatus>
 800c15a:	e01a      	b.n	800c192 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c162:	b2db      	uxtb	r3, r3
 800c164:	2b03      	cmp	r3, #3
 800c166:	d114      	bne.n	800c192 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c16e:	699b      	ldr	r3, [r3, #24]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00e      	beq.n	800c192 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c17a:	699b      	ldr	r3, [r3, #24]
 800c17c:	7afa      	ldrb	r2, [r7, #11]
 800c17e:	4611      	mov	r1, r2
 800c180:	68f8      	ldr	r0, [r7, #12]
 800c182:	4798      	blx	r3
 800c184:	4603      	mov	r3, r0
 800c186:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c188:	7dfb      	ldrb	r3, [r7, #23]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d001      	beq.n	800c192 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c18e:	7dfb      	ldrb	r3, [r7, #23]
 800c190:	e000      	b.n	800c194 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3718      	adds	r7, #24
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b086      	sub	sp, #24
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	607a      	str	r2, [r7, #4]
 800c1a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c1aa:	7afb      	ldrb	r3, [r7, #11]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d16b      	bne.n	800c288 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	3314      	adds	r3, #20
 800c1b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	d156      	bne.n	800c26e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	689a      	ldr	r2, [r3, #8]
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d914      	bls.n	800c1f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	689a      	ldr	r2, [r3, #8]
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	1ad2      	subs	r2, r2, r3
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	689b      	ldr	r3, [r3, #8]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	6879      	ldr	r1, [r7, #4]
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f000 ff84 	bl	800d0f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f007 fe36 	bl	8013e60 <USBD_LL_PrepareReceive>
 800c1f4:	e03b      	b.n	800c26e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	68da      	ldr	r2, [r3, #12]
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d11c      	bne.n	800c23c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	685a      	ldr	r2, [r3, #4]
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d316      	bcc.n	800c23c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	685a      	ldr	r2, [r3, #4]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c218:	429a      	cmp	r2, r3
 800c21a:	d20f      	bcs.n	800c23c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c21c:	2200      	movs	r2, #0
 800c21e:	2100      	movs	r1, #0
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	f000 ff65 	bl	800d0f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2200      	movs	r2, #0
 800c22a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c22e:	2300      	movs	r3, #0
 800c230:	2200      	movs	r2, #0
 800c232:	2100      	movs	r1, #0
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	f007 fe13 	bl	8013e60 <USBD_LL_PrepareReceive>
 800c23a:	e018      	b.n	800c26e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c242:	b2db      	uxtb	r3, r3
 800c244:	2b03      	cmp	r3, #3
 800c246:	d10b      	bne.n	800c260 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d005      	beq.n	800c260 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c260:	2180      	movs	r1, #128	; 0x80
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f007 fd52 	bl	8013d0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f000 ff93 	bl	800d194 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c274:	2b01      	cmp	r3, #1
 800c276:	d122      	bne.n	800c2be <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c278:	68f8      	ldr	r0, [r7, #12]
 800c27a:	f7ff fe98 	bl	800bfae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2200      	movs	r2, #0
 800c282:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c286:	e01a      	b.n	800c2be <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	2b03      	cmp	r3, #3
 800c292:	d114      	bne.n	800c2be <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c29a:	695b      	ldr	r3, [r3, #20]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00e      	beq.n	800c2be <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2a6:	695b      	ldr	r3, [r3, #20]
 800c2a8:	7afa      	ldrb	r2, [r7, #11]
 800c2aa:	4611      	mov	r1, r2
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	4798      	blx	r3
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c2b4:	7dfb      	ldrb	r3, [r7, #23]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d001      	beq.n	800c2be <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c2ba:	7dfb      	ldrb	r3, [r7, #23]
 800c2bc:	e000      	b.n	800c2c0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3718      	adds	r7, #24
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	e02f      	b.n	800c35c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00f      	beq.n	800c326 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d009      	beq.n	800c326 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	6852      	ldr	r2, [r2, #4]
 800c31e:	b2d2      	uxtb	r2, r2
 800c320:	4611      	mov	r1, r2
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c326:	2340      	movs	r3, #64	; 0x40
 800c328:	2200      	movs	r2, #0
 800c32a:	2100      	movs	r1, #0
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f007 fca8 	bl	8013c82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2201      	movs	r2, #1
 800c336:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2240      	movs	r2, #64	; 0x40
 800c33e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c342:	2340      	movs	r3, #64	; 0x40
 800c344:	2200      	movs	r2, #0
 800c346:	2180      	movs	r1, #128	; 0x80
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f007 fc9a 	bl	8013c82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2201      	movs	r2, #1
 800c352:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2240      	movs	r2, #64	; 0x40
 800c358:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	460b      	mov	r3, r1
 800c36e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	78fa      	ldrb	r2, [r7, #3]
 800c374:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c392:	b2da      	uxtb	r2, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2204      	movs	r2, #4
 800c39e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c3a2:	2300      	movs	r3, #0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	2b04      	cmp	r3, #4
 800c3c2:	d106      	bne.n	800c3d2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d101      	bne.n	800c3f6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c3f2:	2303      	movs	r3, #3
 800c3f4:	e012      	b.n	800c41c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	2b03      	cmp	r3, #3
 800c400:	d10b      	bne.n	800c41a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c408:	69db      	ldr	r3, [r3, #28]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d005      	beq.n	800c41a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c414:	69db      	ldr	r3, [r3, #28]
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	460b      	mov	r3, r1
 800c42e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c436:	2b00      	cmp	r3, #0
 800c438:	d101      	bne.n	800c43e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c43a:	2303      	movs	r3, #3
 800c43c:	e014      	b.n	800c468 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c444:	b2db      	uxtb	r3, r3
 800c446:	2b03      	cmp	r3, #3
 800c448:	d10d      	bne.n	800c466 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c450:	6a1b      	ldr	r3, [r3, #32]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d007      	beq.n	800c466 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c45c:	6a1b      	ldr	r3, [r3, #32]
 800c45e:	78fa      	ldrb	r2, [r7, #3]
 800c460:	4611      	mov	r1, r2
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	460b      	mov	r3, r1
 800c47a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c482:	2b00      	cmp	r3, #0
 800c484:	d101      	bne.n	800c48a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c486:	2303      	movs	r3, #3
 800c488:	e014      	b.n	800c4b4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c490:	b2db      	uxtb	r3, r3
 800c492:	2b03      	cmp	r3, #3
 800c494:	d10d      	bne.n	800c4b2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d007      	beq.n	800c4b2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4aa:	78fa      	ldrb	r2, [r7, #3]
 800c4ac:	4611      	mov	r1, r2
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c4b2:	2300      	movs	r3, #0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b082      	sub	sp, #8
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d009      	beq.n	800c500 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	6852      	ldr	r2, [r2, #4]
 800c4f8:	b2d2      	uxtb	r2, r2
 800c4fa:	4611      	mov	r1, r2
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	4798      	blx	r3
  }

  return USBD_OK;
 800c500:	2300      	movs	r3, #0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c50a:	b480      	push	{r7}
 800c50c:	b087      	sub	sp, #28
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	3301      	adds	r3, #1
 800c520:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c528:	8a3b      	ldrh	r3, [r7, #16]
 800c52a:	021b      	lsls	r3, r3, #8
 800c52c:	b21a      	sxth	r2, r3
 800c52e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c532:	4313      	orrs	r3, r2
 800c534:	b21b      	sxth	r3, r3
 800c536:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c538:	89fb      	ldrh	r3, [r7, #14]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	371c      	adds	r7, #28
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
	...

0800c548 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c55e:	2b40      	cmp	r3, #64	; 0x40
 800c560:	d005      	beq.n	800c56e <USBD_StdDevReq+0x26>
 800c562:	2b40      	cmp	r3, #64	; 0x40
 800c564:	d853      	bhi.n	800c60e <USBD_StdDevReq+0xc6>
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00b      	beq.n	800c582 <USBD_StdDevReq+0x3a>
 800c56a:	2b20      	cmp	r3, #32
 800c56c:	d14f      	bne.n	800c60e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c574:	689b      	ldr	r3, [r3, #8]
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	4798      	blx	r3
 800c57c:	4603      	mov	r3, r0
 800c57e:	73fb      	strb	r3, [r7, #15]
      break;
 800c580:	e04a      	b.n	800c618 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	785b      	ldrb	r3, [r3, #1]
 800c586:	2b09      	cmp	r3, #9
 800c588:	d83b      	bhi.n	800c602 <USBD_StdDevReq+0xba>
 800c58a:	a201      	add	r2, pc, #4	; (adr r2, 800c590 <USBD_StdDevReq+0x48>)
 800c58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c590:	0800c5e5 	.word	0x0800c5e5
 800c594:	0800c5f9 	.word	0x0800c5f9
 800c598:	0800c603 	.word	0x0800c603
 800c59c:	0800c5ef 	.word	0x0800c5ef
 800c5a0:	0800c603 	.word	0x0800c603
 800c5a4:	0800c5c3 	.word	0x0800c5c3
 800c5a8:	0800c5b9 	.word	0x0800c5b9
 800c5ac:	0800c603 	.word	0x0800c603
 800c5b0:	0800c5db 	.word	0x0800c5db
 800c5b4:	0800c5cd 	.word	0x0800c5cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c5b8:	6839      	ldr	r1, [r7, #0]
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f9de 	bl	800c97c <USBD_GetDescriptor>
          break;
 800c5c0:	e024      	b.n	800c60c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c5c2:	6839      	ldr	r1, [r7, #0]
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fb43 	bl	800cc50 <USBD_SetAddress>
          break;
 800c5ca:	e01f      	b.n	800c60c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fb82 	bl	800ccd8 <USBD_SetConfig>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	73fb      	strb	r3, [r7, #15]
          break;
 800c5d8:	e018      	b.n	800c60c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c5da:	6839      	ldr	r1, [r7, #0]
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 fc21 	bl	800ce24 <USBD_GetConfig>
          break;
 800c5e2:	e013      	b.n	800c60c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c5e4:	6839      	ldr	r1, [r7, #0]
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fc52 	bl	800ce90 <USBD_GetStatus>
          break;
 800c5ec:	e00e      	b.n	800c60c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c5ee:	6839      	ldr	r1, [r7, #0]
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 fc81 	bl	800cef8 <USBD_SetFeature>
          break;
 800c5f6:	e009      	b.n	800c60c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c5f8:	6839      	ldr	r1, [r7, #0]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 fc90 	bl	800cf20 <USBD_ClrFeature>
          break;
 800c600:	e004      	b.n	800c60c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c602:	6839      	ldr	r1, [r7, #0]
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 fce7 	bl	800cfd8 <USBD_CtlError>
          break;
 800c60a:	bf00      	nop
      }
      break;
 800c60c:	e004      	b.n	800c618 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c60e:	6839      	ldr	r1, [r7, #0]
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 fce1 	bl	800cfd8 <USBD_CtlError>
      break;
 800c616:	bf00      	nop
  }

  return ret;
 800c618:	7bfb      	ldrb	r3, [r7, #15]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop

0800c624 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c62e:	2300      	movs	r3, #0
 800c630:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c63a:	2b40      	cmp	r3, #64	; 0x40
 800c63c:	d005      	beq.n	800c64a <USBD_StdItfReq+0x26>
 800c63e:	2b40      	cmp	r3, #64	; 0x40
 800c640:	d82f      	bhi.n	800c6a2 <USBD_StdItfReq+0x7e>
 800c642:	2b00      	cmp	r3, #0
 800c644:	d001      	beq.n	800c64a <USBD_StdItfReq+0x26>
 800c646:	2b20      	cmp	r3, #32
 800c648:	d12b      	bne.n	800c6a2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c650:	b2db      	uxtb	r3, r3
 800c652:	3b01      	subs	r3, #1
 800c654:	2b02      	cmp	r3, #2
 800c656:	d81d      	bhi.n	800c694 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	889b      	ldrh	r3, [r3, #4]
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d813      	bhi.n	800c68a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	6839      	ldr	r1, [r7, #0]
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	4798      	blx	r3
 800c670:	4603      	mov	r3, r0
 800c672:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	88db      	ldrh	r3, [r3, #6]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d110      	bne.n	800c69e <USBD_StdItfReq+0x7a>
 800c67c:	7bfb      	ldrb	r3, [r7, #15]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10d      	bne.n	800c69e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 fd73 	bl	800d16e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c688:	e009      	b.n	800c69e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c68a:	6839      	ldr	r1, [r7, #0]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fca3 	bl	800cfd8 <USBD_CtlError>
          break;
 800c692:	e004      	b.n	800c69e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c694:	6839      	ldr	r1, [r7, #0]
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 fc9e 	bl	800cfd8 <USBD_CtlError>
          break;
 800c69c:	e000      	b.n	800c6a0 <USBD_StdItfReq+0x7c>
          break;
 800c69e:	bf00      	nop
      }
      break;
 800c6a0:	e004      	b.n	800c6ac <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 fc97 	bl	800cfd8 <USBD_CtlError>
      break;
 800c6aa:	bf00      	nop
  }

  return ret;
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b084      	sub	sp, #16
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
 800c6be:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	889b      	ldrh	r3, [r3, #4]
 800c6c8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c6d2:	2b40      	cmp	r3, #64	; 0x40
 800c6d4:	d007      	beq.n	800c6e6 <USBD_StdEPReq+0x30>
 800c6d6:	2b40      	cmp	r3, #64	; 0x40
 800c6d8:	f200 8145 	bhi.w	800c966 <USBD_StdEPReq+0x2b0>
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00c      	beq.n	800c6fa <USBD_StdEPReq+0x44>
 800c6e0:	2b20      	cmp	r3, #32
 800c6e2:	f040 8140 	bne.w	800c966 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	4798      	blx	r3
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	73fb      	strb	r3, [r7, #15]
      break;
 800c6f8:	e13a      	b.n	800c970 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	785b      	ldrb	r3, [r3, #1]
 800c6fe:	2b03      	cmp	r3, #3
 800c700:	d007      	beq.n	800c712 <USBD_StdEPReq+0x5c>
 800c702:	2b03      	cmp	r3, #3
 800c704:	f300 8129 	bgt.w	800c95a <USBD_StdEPReq+0x2a4>
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d07f      	beq.n	800c80c <USBD_StdEPReq+0x156>
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d03c      	beq.n	800c78a <USBD_StdEPReq+0xd4>
 800c710:	e123      	b.n	800c95a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d002      	beq.n	800c724 <USBD_StdEPReq+0x6e>
 800c71e:	2b03      	cmp	r3, #3
 800c720:	d016      	beq.n	800c750 <USBD_StdEPReq+0x9a>
 800c722:	e02c      	b.n	800c77e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c724:	7bbb      	ldrb	r3, [r7, #14]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00d      	beq.n	800c746 <USBD_StdEPReq+0x90>
 800c72a:	7bbb      	ldrb	r3, [r7, #14]
 800c72c:	2b80      	cmp	r3, #128	; 0x80
 800c72e:	d00a      	beq.n	800c746 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c730:	7bbb      	ldrb	r3, [r7, #14]
 800c732:	4619      	mov	r1, r3
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f007 fae9 	bl	8013d0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c73a:	2180      	movs	r1, #128	; 0x80
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f007 fae5 	bl	8013d0c <USBD_LL_StallEP>
 800c742:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c744:	e020      	b.n	800c788 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c746:	6839      	ldr	r1, [r7, #0]
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 fc45 	bl	800cfd8 <USBD_CtlError>
              break;
 800c74e:	e01b      	b.n	800c788 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	885b      	ldrh	r3, [r3, #2]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10e      	bne.n	800c776 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c758:	7bbb      	ldrb	r3, [r7, #14]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00b      	beq.n	800c776 <USBD_StdEPReq+0xc0>
 800c75e:	7bbb      	ldrb	r3, [r7, #14]
 800c760:	2b80      	cmp	r3, #128	; 0x80
 800c762:	d008      	beq.n	800c776 <USBD_StdEPReq+0xc0>
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	88db      	ldrh	r3, [r3, #6]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d104      	bne.n	800c776 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c76c:	7bbb      	ldrb	r3, [r7, #14]
 800c76e:	4619      	mov	r1, r3
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f007 facb 	bl	8013d0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fcf9 	bl	800d16e <USBD_CtlSendStatus>

              break;
 800c77c:	e004      	b.n	800c788 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c77e:	6839      	ldr	r1, [r7, #0]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 fc29 	bl	800cfd8 <USBD_CtlError>
              break;
 800c786:	bf00      	nop
          }
          break;
 800c788:	e0ec      	b.n	800c964 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c790:	b2db      	uxtb	r3, r3
 800c792:	2b02      	cmp	r3, #2
 800c794:	d002      	beq.n	800c79c <USBD_StdEPReq+0xe6>
 800c796:	2b03      	cmp	r3, #3
 800c798:	d016      	beq.n	800c7c8 <USBD_StdEPReq+0x112>
 800c79a:	e030      	b.n	800c7fe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c79c:	7bbb      	ldrb	r3, [r7, #14]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00d      	beq.n	800c7be <USBD_StdEPReq+0x108>
 800c7a2:	7bbb      	ldrb	r3, [r7, #14]
 800c7a4:	2b80      	cmp	r3, #128	; 0x80
 800c7a6:	d00a      	beq.n	800c7be <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c7a8:	7bbb      	ldrb	r3, [r7, #14]
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f007 faad 	bl	8013d0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7b2:	2180      	movs	r1, #128	; 0x80
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f007 faa9 	bl	8013d0c <USBD_LL_StallEP>
 800c7ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c7bc:	e025      	b.n	800c80a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c7be:	6839      	ldr	r1, [r7, #0]
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 fc09 	bl	800cfd8 <USBD_CtlError>
              break;
 800c7c6:	e020      	b.n	800c80a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	885b      	ldrh	r3, [r3, #2]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d11b      	bne.n	800c808 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c7d0:	7bbb      	ldrb	r3, [r7, #14]
 800c7d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d004      	beq.n	800c7e4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c7da:	7bbb      	ldrb	r3, [r7, #14]
 800c7dc:	4619      	mov	r1, r3
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f007 fab3 	bl	8013d4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 fcc2 	bl	800d16e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	6839      	ldr	r1, [r7, #0]
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	4798      	blx	r3
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c7fc:	e004      	b.n	800c808 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c7fe:	6839      	ldr	r1, [r7, #0]
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 fbe9 	bl	800cfd8 <USBD_CtlError>
              break;
 800c806:	e000      	b.n	800c80a <USBD_StdEPReq+0x154>
              break;
 800c808:	bf00      	nop
          }
          break;
 800c80a:	e0ab      	b.n	800c964 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c812:	b2db      	uxtb	r3, r3
 800c814:	2b02      	cmp	r3, #2
 800c816:	d002      	beq.n	800c81e <USBD_StdEPReq+0x168>
 800c818:	2b03      	cmp	r3, #3
 800c81a:	d032      	beq.n	800c882 <USBD_StdEPReq+0x1cc>
 800c81c:	e097      	b.n	800c94e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c81e:	7bbb      	ldrb	r3, [r7, #14]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d007      	beq.n	800c834 <USBD_StdEPReq+0x17e>
 800c824:	7bbb      	ldrb	r3, [r7, #14]
 800c826:	2b80      	cmp	r3, #128	; 0x80
 800c828:	d004      	beq.n	800c834 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 fbd3 	bl	800cfd8 <USBD_CtlError>
                break;
 800c832:	e091      	b.n	800c958 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	da0b      	bge.n	800c854 <USBD_StdEPReq+0x19e>
 800c83c:	7bbb      	ldrb	r3, [r7, #14]
 800c83e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c842:	4613      	mov	r3, r2
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	4413      	add	r3, r2
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	3310      	adds	r3, #16
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	4413      	add	r3, r2
 800c850:	3304      	adds	r3, #4
 800c852:	e00b      	b.n	800c86c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c854:	7bbb      	ldrb	r3, [r7, #14]
 800c856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c85a:	4613      	mov	r3, r2
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	4413      	add	r3, r2
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	4413      	add	r3, r2
 800c86a:	3304      	adds	r3, #4
 800c86c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	2200      	movs	r2, #0
 800c872:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	2202      	movs	r2, #2
 800c878:	4619      	mov	r1, r3
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fc1d 	bl	800d0ba <USBD_CtlSendData>
              break;
 800c880:	e06a      	b.n	800c958 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c882:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c886:	2b00      	cmp	r3, #0
 800c888:	da11      	bge.n	800c8ae <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c88a:	7bbb      	ldrb	r3, [r7, #14]
 800c88c:	f003 020f 	and.w	r2, r3, #15
 800c890:	6879      	ldr	r1, [r7, #4]
 800c892:	4613      	mov	r3, r2
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	4413      	add	r3, r2
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	440b      	add	r3, r1
 800c89c:	3324      	adds	r3, #36	; 0x24
 800c89e:	881b      	ldrh	r3, [r3, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d117      	bne.n	800c8d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c8a4:	6839      	ldr	r1, [r7, #0]
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 fb96 	bl	800cfd8 <USBD_CtlError>
                  break;
 800c8ac:	e054      	b.n	800c958 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c8ae:	7bbb      	ldrb	r3, [r7, #14]
 800c8b0:	f003 020f 	and.w	r2, r3, #15
 800c8b4:	6879      	ldr	r1, [r7, #4]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4413      	add	r3, r2
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	440b      	add	r3, r1
 800c8c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c8c4:	881b      	ldrh	r3, [r3, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d104      	bne.n	800c8d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c8ca:	6839      	ldr	r1, [r7, #0]
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 fb83 	bl	800cfd8 <USBD_CtlError>
                  break;
 800c8d2:	e041      	b.n	800c958 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	da0b      	bge.n	800c8f4 <USBD_StdEPReq+0x23e>
 800c8dc:	7bbb      	ldrb	r3, [r7, #14]
 800c8de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	4413      	add	r3, r2
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	3310      	adds	r3, #16
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	3304      	adds	r3, #4
 800c8f2:	e00b      	b.n	800c90c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c8f4:	7bbb      	ldrb	r3, [r7, #14]
 800c8f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	4413      	add	r3, r2
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	4413      	add	r3, r2
 800c90a:	3304      	adds	r3, #4
 800c90c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c90e:	7bbb      	ldrb	r3, [r7, #14]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d002      	beq.n	800c91a <USBD_StdEPReq+0x264>
 800c914:	7bbb      	ldrb	r3, [r7, #14]
 800c916:	2b80      	cmp	r3, #128	; 0x80
 800c918:	d103      	bne.n	800c922 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	2200      	movs	r2, #0
 800c91e:	601a      	str	r2, [r3, #0]
 800c920:	e00e      	b.n	800c940 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c922:	7bbb      	ldrb	r3, [r7, #14]
 800c924:	4619      	mov	r1, r3
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f007 fa2e 	bl	8013d88 <USBD_LL_IsStallEP>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d003      	beq.n	800c93a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	2201      	movs	r2, #1
 800c936:	601a      	str	r2, [r3, #0]
 800c938:	e002      	b.n	800c940 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	2200      	movs	r2, #0
 800c93e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	2202      	movs	r2, #2
 800c944:	4619      	mov	r1, r3
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 fbb7 	bl	800d0ba <USBD_CtlSendData>
              break;
 800c94c:	e004      	b.n	800c958 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c94e:	6839      	ldr	r1, [r7, #0]
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 fb41 	bl	800cfd8 <USBD_CtlError>
              break;
 800c956:	bf00      	nop
          }
          break;
 800c958:	e004      	b.n	800c964 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c95a:	6839      	ldr	r1, [r7, #0]
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 fb3b 	bl	800cfd8 <USBD_CtlError>
          break;
 800c962:	bf00      	nop
      }
      break;
 800c964:	e004      	b.n	800c970 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c966:	6839      	ldr	r1, [r7, #0]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fb35 	bl	800cfd8 <USBD_CtlError>
      break;
 800c96e:	bf00      	nop
  }

  return ret;
 800c970:	7bfb      	ldrb	r3, [r7, #15]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
	...

0800c97c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c986:	2300      	movs	r3, #0
 800c988:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c98a:	2300      	movs	r3, #0
 800c98c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c98e:	2300      	movs	r3, #0
 800c990:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	885b      	ldrh	r3, [r3, #2]
 800c996:	0a1b      	lsrs	r3, r3, #8
 800c998:	b29b      	uxth	r3, r3
 800c99a:	3b01      	subs	r3, #1
 800c99c:	2b06      	cmp	r3, #6
 800c99e:	f200 8128 	bhi.w	800cbf2 <USBD_GetDescriptor+0x276>
 800c9a2:	a201      	add	r2, pc, #4	; (adr r2, 800c9a8 <USBD_GetDescriptor+0x2c>)
 800c9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a8:	0800c9c5 	.word	0x0800c9c5
 800c9ac:	0800c9dd 	.word	0x0800c9dd
 800c9b0:	0800ca1d 	.word	0x0800ca1d
 800c9b4:	0800cbf3 	.word	0x0800cbf3
 800c9b8:	0800cbf3 	.word	0x0800cbf3
 800c9bc:	0800cb93 	.word	0x0800cb93
 800c9c0:	0800cbbf 	.word	0x0800cbbf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	7c12      	ldrb	r2, [r2, #16]
 800c9d0:	f107 0108 	add.w	r1, r7, #8
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	4798      	blx	r3
 800c9d8:	60f8      	str	r0, [r7, #12]
      break;
 800c9da:	e112      	b.n	800cc02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	7c1b      	ldrb	r3, [r3, #16]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d10d      	bne.n	800ca00 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ec:	f107 0208 	add.w	r2, r7, #8
 800c9f0:	4610      	mov	r0, r2
 800c9f2:	4798      	blx	r3
 800c9f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	2202      	movs	r2, #2
 800c9fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c9fe:	e100      	b.n	800cc02 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca08:	f107 0208 	add.w	r2, r7, #8
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	4798      	blx	r3
 800ca10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	3301      	adds	r3, #1
 800ca16:	2202      	movs	r2, #2
 800ca18:	701a      	strb	r2, [r3, #0]
      break;
 800ca1a:	e0f2      	b.n	800cc02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	885b      	ldrh	r3, [r3, #2]
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	2b05      	cmp	r3, #5
 800ca24:	f200 80ac 	bhi.w	800cb80 <USBD_GetDescriptor+0x204>
 800ca28:	a201      	add	r2, pc, #4	; (adr r2, 800ca30 <USBD_GetDescriptor+0xb4>)
 800ca2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2e:	bf00      	nop
 800ca30:	0800ca49 	.word	0x0800ca49
 800ca34:	0800ca7d 	.word	0x0800ca7d
 800ca38:	0800cab1 	.word	0x0800cab1
 800ca3c:	0800cae5 	.word	0x0800cae5
 800ca40:	0800cb19 	.word	0x0800cb19
 800ca44:	0800cb4d 	.word	0x0800cb4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d00b      	beq.n	800ca6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	7c12      	ldrb	r2, [r2, #16]
 800ca60:	f107 0108 	add.w	r1, r7, #8
 800ca64:	4610      	mov	r0, r2
 800ca66:	4798      	blx	r3
 800ca68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca6a:	e091      	b.n	800cb90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 fab2 	bl	800cfd8 <USBD_CtlError>
            err++;
 800ca74:	7afb      	ldrb	r3, [r7, #11]
 800ca76:	3301      	adds	r3, #1
 800ca78:	72fb      	strb	r3, [r7, #11]
          break;
 800ca7a:	e089      	b.n	800cb90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00b      	beq.n	800caa0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	7c12      	ldrb	r2, [r2, #16]
 800ca94:	f107 0108 	add.w	r1, r7, #8
 800ca98:	4610      	mov	r0, r2
 800ca9a:	4798      	blx	r3
 800ca9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca9e:	e077      	b.n	800cb90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800caa0:	6839      	ldr	r1, [r7, #0]
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 fa98 	bl	800cfd8 <USBD_CtlError>
            err++;
 800caa8:	7afb      	ldrb	r3, [r7, #11]
 800caaa:	3301      	adds	r3, #1
 800caac:	72fb      	strb	r3, [r7, #11]
          break;
 800caae:	e06f      	b.n	800cb90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00b      	beq.n	800cad4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	7c12      	ldrb	r2, [r2, #16]
 800cac8:	f107 0108 	add.w	r1, r7, #8
 800cacc:	4610      	mov	r0, r2
 800cace:	4798      	blx	r3
 800cad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cad2:	e05d      	b.n	800cb90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cad4:	6839      	ldr	r1, [r7, #0]
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 fa7e 	bl	800cfd8 <USBD_CtlError>
            err++;
 800cadc:	7afb      	ldrb	r3, [r7, #11]
 800cade:	3301      	adds	r3, #1
 800cae0:	72fb      	strb	r3, [r7, #11]
          break;
 800cae2:	e055      	b.n	800cb90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800caea:	691b      	ldr	r3, [r3, #16]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d00b      	beq.n	800cb08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	7c12      	ldrb	r2, [r2, #16]
 800cafc:	f107 0108 	add.w	r1, r7, #8
 800cb00:	4610      	mov	r0, r2
 800cb02:	4798      	blx	r3
 800cb04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb06:	e043      	b.n	800cb90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 fa64 	bl	800cfd8 <USBD_CtlError>
            err++;
 800cb10:	7afb      	ldrb	r3, [r7, #11]
 800cb12:	3301      	adds	r3, #1
 800cb14:	72fb      	strb	r3, [r7, #11]
          break;
 800cb16:	e03b      	b.n	800cb90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00b      	beq.n	800cb3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb2a:	695b      	ldr	r3, [r3, #20]
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	7c12      	ldrb	r2, [r2, #16]
 800cb30:	f107 0108 	add.w	r1, r7, #8
 800cb34:	4610      	mov	r0, r2
 800cb36:	4798      	blx	r3
 800cb38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb3a:	e029      	b.n	800cb90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb3c:	6839      	ldr	r1, [r7, #0]
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 fa4a 	bl	800cfd8 <USBD_CtlError>
            err++;
 800cb44:	7afb      	ldrb	r3, [r7, #11]
 800cb46:	3301      	adds	r3, #1
 800cb48:	72fb      	strb	r3, [r7, #11]
          break;
 800cb4a:	e021      	b.n	800cb90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb52:	699b      	ldr	r3, [r3, #24]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d00b      	beq.n	800cb70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb5e:	699b      	ldr	r3, [r3, #24]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	7c12      	ldrb	r2, [r2, #16]
 800cb64:	f107 0108 	add.w	r1, r7, #8
 800cb68:	4610      	mov	r0, r2
 800cb6a:	4798      	blx	r3
 800cb6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb6e:	e00f      	b.n	800cb90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb70:	6839      	ldr	r1, [r7, #0]
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f000 fa30 	bl	800cfd8 <USBD_CtlError>
            err++;
 800cb78:	7afb      	ldrb	r3, [r7, #11]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	72fb      	strb	r3, [r7, #11]
          break;
 800cb7e:	e007      	b.n	800cb90 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cb80:	6839      	ldr	r1, [r7, #0]
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fa28 	bl	800cfd8 <USBD_CtlError>
          err++;
 800cb88:	7afb      	ldrb	r3, [r7, #11]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cb8e:	bf00      	nop
      }
      break;
 800cb90:	e037      	b.n	800cc02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	7c1b      	ldrb	r3, [r3, #16]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d109      	bne.n	800cbae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cba2:	f107 0208 	add.w	r2, r7, #8
 800cba6:	4610      	mov	r0, r2
 800cba8:	4798      	blx	r3
 800cbaa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbac:	e029      	b.n	800cc02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cbae:	6839      	ldr	r1, [r7, #0]
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 fa11 	bl	800cfd8 <USBD_CtlError>
        err++;
 800cbb6:	7afb      	ldrb	r3, [r7, #11]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	72fb      	strb	r3, [r7, #11]
      break;
 800cbbc:	e021      	b.n	800cc02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	7c1b      	ldrb	r3, [r3, #16]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d10d      	bne.n	800cbe2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbce:	f107 0208 	add.w	r2, r7, #8
 800cbd2:	4610      	mov	r0, r2
 800cbd4:	4798      	blx	r3
 800cbd6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	2207      	movs	r2, #7
 800cbde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbe0:	e00f      	b.n	800cc02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cbe2:	6839      	ldr	r1, [r7, #0]
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 f9f7 	bl	800cfd8 <USBD_CtlError>
        err++;
 800cbea:	7afb      	ldrb	r3, [r7, #11]
 800cbec:	3301      	adds	r3, #1
 800cbee:	72fb      	strb	r3, [r7, #11]
      break;
 800cbf0:	e007      	b.n	800cc02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cbf2:	6839      	ldr	r1, [r7, #0]
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 f9ef 	bl	800cfd8 <USBD_CtlError>
      err++;
 800cbfa:	7afb      	ldrb	r3, [r7, #11]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	72fb      	strb	r3, [r7, #11]
      break;
 800cc00:	bf00      	nop
  }

  if (err != 0U)
 800cc02:	7afb      	ldrb	r3, [r7, #11]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d11e      	bne.n	800cc46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	88db      	ldrh	r3, [r3, #6]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d016      	beq.n	800cc3e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cc10:	893b      	ldrh	r3, [r7, #8]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00e      	beq.n	800cc34 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	88da      	ldrh	r2, [r3, #6]
 800cc1a:	893b      	ldrh	r3, [r7, #8]
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	bf28      	it	cs
 800cc20:	4613      	movcs	r3, r2
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cc26:	893b      	ldrh	r3, [r7, #8]
 800cc28:	461a      	mov	r2, r3
 800cc2a:	68f9      	ldr	r1, [r7, #12]
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 fa44 	bl	800d0ba <USBD_CtlSendData>
 800cc32:	e009      	b.n	800cc48 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cc34:	6839      	ldr	r1, [r7, #0]
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f9ce 	bl	800cfd8 <USBD_CtlError>
 800cc3c:	e004      	b.n	800cc48 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 fa95 	bl	800d16e <USBD_CtlSendStatus>
 800cc44:	e000      	b.n	800cc48 <USBD_GetDescriptor+0x2cc>
    return;
 800cc46:	bf00      	nop
  }
}
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop

0800cc50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	889b      	ldrh	r3, [r3, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d131      	bne.n	800ccc6 <USBD_SetAddress+0x76>
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	88db      	ldrh	r3, [r3, #6]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d12d      	bne.n	800ccc6 <USBD_SetAddress+0x76>
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	885b      	ldrh	r3, [r3, #2]
 800cc6e:	2b7f      	cmp	r3, #127	; 0x7f
 800cc70:	d829      	bhi.n	800ccc6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	885b      	ldrh	r3, [r3, #2]
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	2b03      	cmp	r3, #3
 800cc88:	d104      	bne.n	800cc94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 f9a3 	bl	800cfd8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc92:	e01d      	b.n	800ccd0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	7bfa      	ldrb	r2, [r7, #15]
 800cc98:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f007 f89d 	bl	8013de0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 fa61 	bl	800d16e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ccac:	7bfb      	ldrb	r3, [r7, #15]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d004      	beq.n	800ccbc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2202      	movs	r2, #2
 800ccb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccba:	e009      	b.n	800ccd0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccc4:	e004      	b.n	800ccd0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ccc6:	6839      	ldr	r1, [r7, #0]
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 f985 	bl	800cfd8 <USBD_CtlError>
  }
}
 800ccce:	bf00      	nop
 800ccd0:	bf00      	nop
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	885b      	ldrh	r3, [r3, #2]
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	4b4c      	ldr	r3, [pc, #304]	; (800ce20 <USBD_SetConfig+0x148>)
 800ccee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ccf0:	4b4b      	ldr	r3, [pc, #300]	; (800ce20 <USBD_SetConfig+0x148>)
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d905      	bls.n	800cd04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ccf8:	6839      	ldr	r1, [r7, #0]
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 f96c 	bl	800cfd8 <USBD_CtlError>
    return USBD_FAIL;
 800cd00:	2303      	movs	r3, #3
 800cd02:	e088      	b.n	800ce16 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	d002      	beq.n	800cd16 <USBD_SetConfig+0x3e>
 800cd10:	2b03      	cmp	r3, #3
 800cd12:	d025      	beq.n	800cd60 <USBD_SetConfig+0x88>
 800cd14:	e071      	b.n	800cdfa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cd16:	4b42      	ldr	r3, [pc, #264]	; (800ce20 <USBD_SetConfig+0x148>)
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d01c      	beq.n	800cd58 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cd1e:	4b40      	ldr	r3, [pc, #256]	; (800ce20 <USBD_SetConfig+0x148>)
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	461a      	mov	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd28:	4b3d      	ldr	r3, [pc, #244]	; (800ce20 <USBD_SetConfig+0x148>)
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7ff f948 	bl	800bfc4 <USBD_SetClassConfig>
 800cd34:	4603      	mov	r3, r0
 800cd36:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d004      	beq.n	800cd48 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cd3e:	6839      	ldr	r1, [r7, #0]
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f949 	bl	800cfd8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd46:	e065      	b.n	800ce14 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 fa10 	bl	800d16e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2203      	movs	r2, #3
 800cd52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cd56:	e05d      	b.n	800ce14 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 fa08 	bl	800d16e <USBD_CtlSendStatus>
      break;
 800cd5e:	e059      	b.n	800ce14 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cd60:	4b2f      	ldr	r3, [pc, #188]	; (800ce20 <USBD_SetConfig+0x148>)
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d112      	bne.n	800cd8e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cd70:	4b2b      	ldr	r3, [pc, #172]	; (800ce20 <USBD_SetConfig+0x148>)
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	461a      	mov	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd7a:	4b29      	ldr	r3, [pc, #164]	; (800ce20 <USBD_SetConfig+0x148>)
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	4619      	mov	r1, r3
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f7ff f93b 	bl	800bffc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 f9f1 	bl	800d16e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd8c:	e042      	b.n	800ce14 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cd8e:	4b24      	ldr	r3, [pc, #144]	; (800ce20 <USBD_SetConfig+0x148>)
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	461a      	mov	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d02a      	beq.n	800cdf2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	4619      	mov	r1, r3
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f7ff f929 	bl	800bffc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cdaa:	4b1d      	ldr	r3, [pc, #116]	; (800ce20 <USBD_SetConfig+0x148>)
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	461a      	mov	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cdb4:	4b1a      	ldr	r3, [pc, #104]	; (800ce20 <USBD_SetConfig+0x148>)
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	4619      	mov	r1, r3
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7ff f902 	bl	800bfc4 <USBD_SetClassConfig>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00f      	beq.n	800cdea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cdca:	6839      	ldr	r1, [r7, #0]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 f903 	bl	800cfd8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	4619      	mov	r1, r3
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7ff f90e 	bl	800bffc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2202      	movs	r2, #2
 800cde4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cde8:	e014      	b.n	800ce14 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 f9bf 	bl	800d16e <USBD_CtlSendStatus>
      break;
 800cdf0:	e010      	b.n	800ce14 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 f9bb 	bl	800d16e <USBD_CtlSendStatus>
      break;
 800cdf8:	e00c      	b.n	800ce14 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cdfa:	6839      	ldr	r1, [r7, #0]
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 f8eb 	bl	800cfd8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ce02:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <USBD_SetConfig+0x148>)
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	4619      	mov	r1, r3
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff f8f7 	bl	800bffc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ce0e:	2303      	movs	r3, #3
 800ce10:	73fb      	strb	r3, [r7, #15]
      break;
 800ce12:	bf00      	nop
  }

  return ret;
 800ce14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3710      	adds	r7, #16
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	20000591 	.word	0x20000591

0800ce24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	88db      	ldrh	r3, [r3, #6]
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d004      	beq.n	800ce40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ce36:	6839      	ldr	r1, [r7, #0]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f8cd 	bl	800cfd8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ce3e:	e023      	b.n	800ce88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	dc02      	bgt.n	800ce52 <USBD_GetConfig+0x2e>
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	dc03      	bgt.n	800ce58 <USBD_GetConfig+0x34>
 800ce50:	e015      	b.n	800ce7e <USBD_GetConfig+0x5a>
 800ce52:	2b03      	cmp	r3, #3
 800ce54:	d00b      	beq.n	800ce6e <USBD_GetConfig+0x4a>
 800ce56:	e012      	b.n	800ce7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	3308      	adds	r3, #8
 800ce62:	2201      	movs	r2, #1
 800ce64:	4619      	mov	r1, r3
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 f927 	bl	800d0ba <USBD_CtlSendData>
        break;
 800ce6c:	e00c      	b.n	800ce88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	3304      	adds	r3, #4
 800ce72:	2201      	movs	r2, #1
 800ce74:	4619      	mov	r1, r3
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 f91f 	bl	800d0ba <USBD_CtlSendData>
        break;
 800ce7c:	e004      	b.n	800ce88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ce7e:	6839      	ldr	r1, [r7, #0]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 f8a9 	bl	800cfd8 <USBD_CtlError>
        break;
 800ce86:	bf00      	nop
}
 800ce88:	bf00      	nop
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	3b01      	subs	r3, #1
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d81e      	bhi.n	800cee6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	88db      	ldrh	r3, [r3, #6]
 800ceac:	2b02      	cmp	r3, #2
 800ceae:	d004      	beq.n	800ceba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ceb0:	6839      	ldr	r1, [r7, #0]
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 f890 	bl	800cfd8 <USBD_CtlError>
        break;
 800ceb8:	e01a      	b.n	800cef0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2201      	movs	r2, #1
 800cebe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d005      	beq.n	800ced6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	f043 0202 	orr.w	r2, r3, #2
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	330c      	adds	r3, #12
 800ceda:	2202      	movs	r2, #2
 800cedc:	4619      	mov	r1, r3
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 f8eb 	bl	800d0ba <USBD_CtlSendData>
      break;
 800cee4:	e004      	b.n	800cef0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cee6:	6839      	ldr	r1, [r7, #0]
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f000 f875 	bl	800cfd8 <USBD_CtlError>
      break;
 800ceee:	bf00      	nop
  }
}
 800cef0:	bf00      	nop
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	885b      	ldrh	r3, [r3, #2]
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d106      	bne.n	800cf18 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 f92b 	bl	800d16e <USBD_CtlSendStatus>
  }
}
 800cf18:	bf00      	nop
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	3b01      	subs	r3, #1
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	d80b      	bhi.n	800cf50 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	885b      	ldrh	r3, [r3, #2]
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d10c      	bne.n	800cf5a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 f910 	bl	800d16e <USBD_CtlSendStatus>
      }
      break;
 800cf4e:	e004      	b.n	800cf5a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cf50:	6839      	ldr	r1, [r7, #0]
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 f840 	bl	800cfd8 <USBD_CtlError>
      break;
 800cf58:	e000      	b.n	800cf5c <USBD_ClrFeature+0x3c>
      break;
 800cf5a:	bf00      	nop
  }
}
 800cf5c:	bf00      	nop
 800cf5e:	3708      	adds	r7, #8
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	781a      	ldrb	r2, [r3, #0]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	781a      	ldrb	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cf8e:	68f8      	ldr	r0, [r7, #12]
 800cf90:	f7ff fabb 	bl	800c50a <SWAPBYTE>
 800cf94:	4603      	mov	r3, r0
 800cf96:	461a      	mov	r2, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f7ff faae 	bl	800c50a <SWAPBYTE>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cfc2:	68f8      	ldr	r0, [r7, #12]
 800cfc4:	f7ff faa1 	bl	800c50a <SWAPBYTE>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	461a      	mov	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	80da      	strh	r2, [r3, #6]
}
 800cfd0:	bf00      	nop
 800cfd2:	3710      	adds	r7, #16
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cfe2:	2180      	movs	r1, #128	; 0x80
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f006 fe91 	bl	8013d0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cfea:	2100      	movs	r1, #0
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f006 fe8d 	bl	8013d0c <USBD_LL_StallEP>
}
 800cff2:	bf00      	nop
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b086      	sub	sp, #24
 800cffe:	af00      	add	r7, sp, #0
 800d000:	60f8      	str	r0, [r7, #12]
 800d002:	60b9      	str	r1, [r7, #8]
 800d004:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d006:	2300      	movs	r3, #0
 800d008:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d036      	beq.n	800d07e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d014:	6938      	ldr	r0, [r7, #16]
 800d016:	f000 f836 	bl	800d086 <USBD_GetLen>
 800d01a:	4603      	mov	r3, r0
 800d01c:	3301      	adds	r3, #1
 800d01e:	b29b      	uxth	r3, r3
 800d020:	005b      	lsls	r3, r3, #1
 800d022:	b29a      	uxth	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d028:	7dfb      	ldrb	r3, [r7, #23]
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	4413      	add	r3, r2
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	7812      	ldrb	r2, [r2, #0]
 800d032:	701a      	strb	r2, [r3, #0]
  idx++;
 800d034:	7dfb      	ldrb	r3, [r7, #23]
 800d036:	3301      	adds	r3, #1
 800d038:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d03a:	7dfb      	ldrb	r3, [r7, #23]
 800d03c:	68ba      	ldr	r2, [r7, #8]
 800d03e:	4413      	add	r3, r2
 800d040:	2203      	movs	r2, #3
 800d042:	701a      	strb	r2, [r3, #0]
  idx++;
 800d044:	7dfb      	ldrb	r3, [r7, #23]
 800d046:	3301      	adds	r3, #1
 800d048:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d04a:	e013      	b.n	800d074 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d04c:	7dfb      	ldrb	r3, [r7, #23]
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	4413      	add	r3, r2
 800d052:	693a      	ldr	r2, [r7, #16]
 800d054:	7812      	ldrb	r2, [r2, #0]
 800d056:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	3301      	adds	r3, #1
 800d05c:	613b      	str	r3, [r7, #16]
    idx++;
 800d05e:	7dfb      	ldrb	r3, [r7, #23]
 800d060:	3301      	adds	r3, #1
 800d062:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d064:	7dfb      	ldrb	r3, [r7, #23]
 800d066:	68ba      	ldr	r2, [r7, #8]
 800d068:	4413      	add	r3, r2
 800d06a:	2200      	movs	r2, #0
 800d06c:	701a      	strb	r2, [r3, #0]
    idx++;
 800d06e:	7dfb      	ldrb	r3, [r7, #23]
 800d070:	3301      	adds	r3, #1
 800d072:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1e7      	bne.n	800d04c <USBD_GetString+0x52>
 800d07c:	e000      	b.n	800d080 <USBD_GetString+0x86>
    return;
 800d07e:	bf00      	nop
  }
}
 800d080:	3718      	adds	r7, #24
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d086:	b480      	push	{r7}
 800d088:	b085      	sub	sp, #20
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d08e:	2300      	movs	r3, #0
 800d090:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d096:	e005      	b.n	800d0a4 <USBD_GetLen+0x1e>
  {
    len++;
 800d098:	7bfb      	ldrb	r3, [r7, #15]
 800d09a:	3301      	adds	r3, #1
 800d09c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1f5      	bne.n	800d098 <USBD_GetLen+0x12>
  }

  return len;
 800d0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3714      	adds	r7, #20
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b084      	sub	sp, #16
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	60f8      	str	r0, [r7, #12]
 800d0c2:	60b9      	str	r1, [r7, #8]
 800d0c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2202      	movs	r2, #2
 800d0ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	68ba      	ldr	r2, [r7, #8]
 800d0de:	2100      	movs	r1, #0
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f006 fe9c 	bl	8013e1e <USBD_LL_Transmit>

  return USBD_OK;
 800d0e6:	2300      	movs	r3, #0
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3710      	adds	r7, #16
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	68ba      	ldr	r2, [r7, #8]
 800d100:	2100      	movs	r1, #0
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f006 fe8b 	bl	8013e1e <USBD_LL_Transmit>

  return USBD_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b084      	sub	sp, #16
 800d116:	af00      	add	r7, sp, #0
 800d118:	60f8      	str	r0, [r7, #12]
 800d11a:	60b9      	str	r1, [r7, #8]
 800d11c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2203      	movs	r2, #3
 800d122:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	68ba      	ldr	r2, [r7, #8]
 800d13a:	2100      	movs	r1, #0
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f006 fe8f 	bl	8013e60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d142:	2300      	movs	r3, #0
}
 800d144:	4618      	mov	r0, r3
 800d146:	3710      	adds	r7, #16
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	2100      	movs	r1, #0
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	f006 fe7e 	bl	8013e60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b082      	sub	sp, #8
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2204      	movs	r2, #4
 800d17a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d17e:	2300      	movs	r3, #0
 800d180:	2200      	movs	r2, #0
 800d182:	2100      	movs	r1, #0
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f006 fe4a 	bl	8013e1e <USBD_LL_Transmit>

  return USBD_OK;
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2205      	movs	r2, #5
 800d1a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f006 fe58 	bl	8013e60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3708      	adds	r7, #8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
	...

0800d1bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d1c6:	79fb      	ldrb	r3, [r7, #7]
 800d1c8:	4a08      	ldr	r2, [pc, #32]	; (800d1ec <disk_status+0x30>)
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4413      	add	r3, r2
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	79fa      	ldrb	r2, [r7, #7]
 800d1d4:	4905      	ldr	r1, [pc, #20]	; (800d1ec <disk_status+0x30>)
 800d1d6:	440a      	add	r2, r1
 800d1d8:	7a12      	ldrb	r2, [r2, #8]
 800d1da:	4610      	mov	r0, r2
 800d1dc:	4798      	blx	r3
 800d1de:	4603      	mov	r3, r0
 800d1e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	200005bc 	.word	0x200005bc

0800d1f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d1fe:	79fb      	ldrb	r3, [r7, #7]
 800d200:	4a0d      	ldr	r2, [pc, #52]	; (800d238 <disk_initialize+0x48>)
 800d202:	5cd3      	ldrb	r3, [r2, r3]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d111      	bne.n	800d22c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d208:	79fb      	ldrb	r3, [r7, #7]
 800d20a:	4a0b      	ldr	r2, [pc, #44]	; (800d238 <disk_initialize+0x48>)
 800d20c:	2101      	movs	r1, #1
 800d20e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d210:	79fb      	ldrb	r3, [r7, #7]
 800d212:	4a09      	ldr	r2, [pc, #36]	; (800d238 <disk_initialize+0x48>)
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	4413      	add	r3, r2
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	79fa      	ldrb	r2, [r7, #7]
 800d21e:	4906      	ldr	r1, [pc, #24]	; (800d238 <disk_initialize+0x48>)
 800d220:	440a      	add	r2, r1
 800d222:	7a12      	ldrb	r2, [r2, #8]
 800d224:	4610      	mov	r0, r2
 800d226:	4798      	blx	r3
 800d228:	4603      	mov	r3, r0
 800d22a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	200005bc 	.word	0x200005bc

0800d23c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d23c:	b590      	push	{r4, r7, lr}
 800d23e:	b087      	sub	sp, #28
 800d240:	af00      	add	r7, sp, #0
 800d242:	60b9      	str	r1, [r7, #8]
 800d244:	607a      	str	r2, [r7, #4]
 800d246:	603b      	str	r3, [r7, #0]
 800d248:	4603      	mov	r3, r0
 800d24a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d24c:	7bfb      	ldrb	r3, [r7, #15]
 800d24e:	4a0a      	ldr	r2, [pc, #40]	; (800d278 <disk_read+0x3c>)
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	4413      	add	r3, r2
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	689c      	ldr	r4, [r3, #8]
 800d258:	7bfb      	ldrb	r3, [r7, #15]
 800d25a:	4a07      	ldr	r2, [pc, #28]	; (800d278 <disk_read+0x3c>)
 800d25c:	4413      	add	r3, r2
 800d25e:	7a18      	ldrb	r0, [r3, #8]
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	68b9      	ldr	r1, [r7, #8]
 800d266:	47a0      	blx	r4
 800d268:	4603      	mov	r3, r0
 800d26a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d26c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d26e:	4618      	mov	r0, r3
 800d270:	371c      	adds	r7, #28
 800d272:	46bd      	mov	sp, r7
 800d274:	bd90      	pop	{r4, r7, pc}
 800d276:	bf00      	nop
 800d278:	200005bc 	.word	0x200005bc

0800d27c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d27c:	b590      	push	{r4, r7, lr}
 800d27e:	b087      	sub	sp, #28
 800d280:	af00      	add	r7, sp, #0
 800d282:	60b9      	str	r1, [r7, #8]
 800d284:	607a      	str	r2, [r7, #4]
 800d286:	603b      	str	r3, [r7, #0]
 800d288:	4603      	mov	r3, r0
 800d28a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d28c:	7bfb      	ldrb	r3, [r7, #15]
 800d28e:	4a0a      	ldr	r2, [pc, #40]	; (800d2b8 <disk_write+0x3c>)
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	4413      	add	r3, r2
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	68dc      	ldr	r4, [r3, #12]
 800d298:	7bfb      	ldrb	r3, [r7, #15]
 800d29a:	4a07      	ldr	r2, [pc, #28]	; (800d2b8 <disk_write+0x3c>)
 800d29c:	4413      	add	r3, r2
 800d29e:	7a18      	ldrb	r0, [r3, #8]
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	68b9      	ldr	r1, [r7, #8]
 800d2a6:	47a0      	blx	r4
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800d2ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	371c      	adds	r7, #28
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd90      	pop	{r4, r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	200005bc 	.word	0x200005bc

0800d2bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	603a      	str	r2, [r7, #0]
 800d2c6:	71fb      	strb	r3, [r7, #7]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d2cc:	79fb      	ldrb	r3, [r7, #7]
 800d2ce:	4a09      	ldr	r2, [pc, #36]	; (800d2f4 <disk_ioctl+0x38>)
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	4413      	add	r3, r2
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	691b      	ldr	r3, [r3, #16]
 800d2d8:	79fa      	ldrb	r2, [r7, #7]
 800d2da:	4906      	ldr	r1, [pc, #24]	; (800d2f4 <disk_ioctl+0x38>)
 800d2dc:	440a      	add	r2, r1
 800d2de:	7a10      	ldrb	r0, [r2, #8]
 800d2e0:	79b9      	ldrb	r1, [r7, #6]
 800d2e2:	683a      	ldr	r2, [r7, #0]
 800d2e4:	4798      	blx	r3
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	73fb      	strb	r3, [r7, #15]
  return res;
 800d2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3710      	adds	r7, #16
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	200005bc 	.word	0x200005bc

0800d2f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	3301      	adds	r3, #1
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d308:	89fb      	ldrh	r3, [r7, #14]
 800d30a:	021b      	lsls	r3, r3, #8
 800d30c:	b21a      	sxth	r2, r3
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	b21b      	sxth	r3, r3
 800d314:	4313      	orrs	r3, r2
 800d316:	b21b      	sxth	r3, r3
 800d318:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d31a:	89fb      	ldrh	r3, [r7, #14]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3714      	adds	r7, #20
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d328:	b480      	push	{r7}
 800d32a:	b085      	sub	sp, #20
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	3303      	adds	r3, #3
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	021b      	lsls	r3, r3, #8
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	3202      	adds	r2, #2
 800d340:	7812      	ldrb	r2, [r2, #0]
 800d342:	4313      	orrs	r3, r2
 800d344:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	021b      	lsls	r3, r3, #8
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	3201      	adds	r2, #1
 800d34e:	7812      	ldrb	r2, [r2, #0]
 800d350:	4313      	orrs	r3, r2
 800d352:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	021b      	lsls	r3, r3, #8
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	7812      	ldrb	r2, [r2, #0]
 800d35c:	4313      	orrs	r3, r2
 800d35e:	60fb      	str	r3, [r7, #12]
	return rv;
 800d360:	68fb      	ldr	r3, [r7, #12]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3714      	adds	r7, #20
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr

0800d36e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d36e:	b480      	push	{r7}
 800d370:	b083      	sub	sp, #12
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
 800d376:	460b      	mov	r3, r1
 800d378:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	1c5a      	adds	r2, r3, #1
 800d37e:	607a      	str	r2, [r7, #4]
 800d380:	887a      	ldrh	r2, [r7, #2]
 800d382:	b2d2      	uxtb	r2, r2
 800d384:	701a      	strb	r2, [r3, #0]
 800d386:	887b      	ldrh	r3, [r7, #2]
 800d388:	0a1b      	lsrs	r3, r3, #8
 800d38a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	1c5a      	adds	r2, r3, #1
 800d390:	607a      	str	r2, [r7, #4]
 800d392:	887a      	ldrh	r2, [r7, #2]
 800d394:	b2d2      	uxtb	r2, r2
 800d396:	701a      	strb	r2, [r3, #0]
}
 800d398:	bf00      	nop
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	1c5a      	adds	r2, r3, #1
 800d3b2:	607a      	str	r2, [r7, #4]
 800d3b4:	683a      	ldr	r2, [r7, #0]
 800d3b6:	b2d2      	uxtb	r2, r2
 800d3b8:	701a      	strb	r2, [r3, #0]
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	0a1b      	lsrs	r3, r3, #8
 800d3be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	1c5a      	adds	r2, r3, #1
 800d3c4:	607a      	str	r2, [r7, #4]
 800d3c6:	683a      	ldr	r2, [r7, #0]
 800d3c8:	b2d2      	uxtb	r2, r2
 800d3ca:	701a      	strb	r2, [r3, #0]
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	0a1b      	lsrs	r3, r3, #8
 800d3d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	1c5a      	adds	r2, r3, #1
 800d3d6:	607a      	str	r2, [r7, #4]
 800d3d8:	683a      	ldr	r2, [r7, #0]
 800d3da:	b2d2      	uxtb	r2, r2
 800d3dc:	701a      	strb	r2, [r3, #0]
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	0a1b      	lsrs	r3, r3, #8
 800d3e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	1c5a      	adds	r2, r3, #1
 800d3e8:	607a      	str	r2, [r7, #4]
 800d3ea:	683a      	ldr	r2, [r7, #0]
 800d3ec:	b2d2      	uxtb	r2, r2
 800d3ee:	701a      	strb	r2, [r3, #0]
}
 800d3f0:	bf00      	nop
 800d3f2:	370c      	adds	r7, #12
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d3fc:	b480      	push	{r7}
 800d3fe:	b087      	sub	sp, #28
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d00d      	beq.n	800d432 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d416:	693a      	ldr	r2, [r7, #16]
 800d418:	1c53      	adds	r3, r2, #1
 800d41a:	613b      	str	r3, [r7, #16]
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	1c59      	adds	r1, r3, #1
 800d420:	6179      	str	r1, [r7, #20]
 800d422:	7812      	ldrb	r2, [r2, #0]
 800d424:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	3b01      	subs	r3, #1
 800d42a:	607b      	str	r3, [r7, #4]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d1f1      	bne.n	800d416 <mem_cpy+0x1a>
	}
}
 800d432:	bf00      	nop
 800d434:	371c      	adds	r7, #28
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr

0800d43e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d43e:	b480      	push	{r7}
 800d440:	b087      	sub	sp, #28
 800d442:	af00      	add	r7, sp, #0
 800d444:	60f8      	str	r0, [r7, #12]
 800d446:	60b9      	str	r1, [r7, #8]
 800d448:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	1c5a      	adds	r2, r3, #1
 800d452:	617a      	str	r2, [r7, #20]
 800d454:	68ba      	ldr	r2, [r7, #8]
 800d456:	b2d2      	uxtb	r2, r2
 800d458:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	3b01      	subs	r3, #1
 800d45e:	607b      	str	r3, [r7, #4]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1f3      	bne.n	800d44e <mem_set+0x10>
}
 800d466:	bf00      	nop
 800d468:	bf00      	nop
 800d46a:	371c      	adds	r7, #28
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d474:	b480      	push	{r7}
 800d476:	b089      	sub	sp, #36	; 0x24
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	61fb      	str	r3, [r7, #28]
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d488:	2300      	movs	r3, #0
 800d48a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	1c5a      	adds	r2, r3, #1
 800d490:	61fa      	str	r2, [r7, #28]
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	4619      	mov	r1, r3
 800d496:	69bb      	ldr	r3, [r7, #24]
 800d498:	1c5a      	adds	r2, r3, #1
 800d49a:	61ba      	str	r2, [r7, #24]
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	1acb      	subs	r3, r1, r3
 800d4a0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	3b01      	subs	r3, #1
 800d4a6:	607b      	str	r3, [r7, #4]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d002      	beq.n	800d4b4 <mem_cmp+0x40>
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d0eb      	beq.n	800d48c <mem_cmp+0x18>

	return r;
 800d4b4:	697b      	ldr	r3, [r7, #20]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3724      	adds	r7, #36	; 0x24
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr

0800d4c2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d4c2:	b480      	push	{r7}
 800d4c4:	b083      	sub	sp, #12
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	6078      	str	r0, [r7, #4]
 800d4ca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d4cc:	e002      	b.n	800d4d4 <chk_chr+0x12>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	607b      	str	r3, [r7, #4]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d005      	beq.n	800d4e8 <chk_chr+0x26>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d1f2      	bne.n	800d4ce <chk_chr+0xc>
	return *str;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	781b      	ldrb	r3, [r3, #0]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	370c      	adds	r7, #12
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d009      	beq.n	800d51a <lock_fs+0x22>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	68db      	ldr	r3, [r3, #12]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f002 fcde 	bl	800fecc <ff_req_grant>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d001      	beq.n	800d51a <lock_fs+0x22>
 800d516:	2301      	movs	r3, #1
 800d518:	e000      	b.n	800d51c <lock_fs+0x24>
 800d51a:	2300      	movs	r3, #0
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	460b      	mov	r3, r1
 800d52e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00d      	beq.n	800d552 <unlock_fs+0x2e>
 800d536:	78fb      	ldrb	r3, [r7, #3]
 800d538:	2b0c      	cmp	r3, #12
 800d53a:	d00a      	beq.n	800d552 <unlock_fs+0x2e>
 800d53c:	78fb      	ldrb	r3, [r7, #3]
 800d53e:	2b0b      	cmp	r3, #11
 800d540:	d007      	beq.n	800d552 <unlock_fs+0x2e>
 800d542:	78fb      	ldrb	r3, [r7, #3]
 800d544:	2b0f      	cmp	r3, #15
 800d546:	d004      	beq.n	800d552 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	68db      	ldr	r3, [r3, #12]
 800d54c:	4618      	mov	r0, r3
 800d54e:	f002 fcd2 	bl	800fef6 <ff_rel_grant>
	}
}
 800d552:	bf00      	nop
 800d554:	3708      	adds	r7, #8
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
	...

0800d55c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b085      	sub	sp, #20
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d566:	2300      	movs	r3, #0
 800d568:	60bb      	str	r3, [r7, #8]
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	60fb      	str	r3, [r7, #12]
 800d56e:	e029      	b.n	800d5c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d570:	4a27      	ldr	r2, [pc, #156]	; (800d610 <chk_lock+0xb4>)
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	011b      	lsls	r3, r3, #4
 800d576:	4413      	add	r3, r2
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d01d      	beq.n	800d5ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d57e:	4a24      	ldr	r2, [pc, #144]	; (800d610 <chk_lock+0xb4>)
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	011b      	lsls	r3, r3, #4
 800d584:	4413      	add	r3, r2
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d116      	bne.n	800d5be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d590:	4a1f      	ldr	r2, [pc, #124]	; (800d610 <chk_lock+0xb4>)
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	011b      	lsls	r3, r3, #4
 800d596:	4413      	add	r3, r2
 800d598:	3304      	adds	r3, #4
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d10c      	bne.n	800d5be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d5a4:	4a1a      	ldr	r2, [pc, #104]	; (800d610 <chk_lock+0xb4>)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	011b      	lsls	r3, r3, #4
 800d5aa:	4413      	add	r3, r2
 800d5ac:	3308      	adds	r3, #8
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d102      	bne.n	800d5be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d5b8:	e007      	b.n	800d5ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	60fb      	str	r3, [r7, #12]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2b01      	cmp	r3, #1
 800d5c8:	d9d2      	bls.n	800d570 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2b02      	cmp	r3, #2
 800d5ce:	d109      	bne.n	800d5e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d102      	bne.n	800d5dc <chk_lock+0x80>
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	2b02      	cmp	r3, #2
 800d5da:	d101      	bne.n	800d5e0 <chk_lock+0x84>
 800d5dc:	2300      	movs	r3, #0
 800d5de:	e010      	b.n	800d602 <chk_lock+0xa6>
 800d5e0:	2312      	movs	r3, #18
 800d5e2:	e00e      	b.n	800d602 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d108      	bne.n	800d5fc <chk_lock+0xa0>
 800d5ea:	4a09      	ldr	r2, [pc, #36]	; (800d610 <chk_lock+0xb4>)
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	011b      	lsls	r3, r3, #4
 800d5f0:	4413      	add	r3, r2
 800d5f2:	330c      	adds	r3, #12
 800d5f4:	881b      	ldrh	r3, [r3, #0]
 800d5f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5fa:	d101      	bne.n	800d600 <chk_lock+0xa4>
 800d5fc:	2310      	movs	r3, #16
 800d5fe:	e000      	b.n	800d602 <chk_lock+0xa6>
 800d600:	2300      	movs	r3, #0
}
 800d602:	4618      	mov	r0, r3
 800d604:	3714      	adds	r7, #20
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	2000059c 	.word	0x2000059c

0800d614 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d61a:	2300      	movs	r3, #0
 800d61c:	607b      	str	r3, [r7, #4]
 800d61e:	e002      	b.n	800d626 <enq_lock+0x12>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	3301      	adds	r3, #1
 800d624:	607b      	str	r3, [r7, #4]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d806      	bhi.n	800d63a <enq_lock+0x26>
 800d62c:	4a09      	ldr	r2, [pc, #36]	; (800d654 <enq_lock+0x40>)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	011b      	lsls	r3, r3, #4
 800d632:	4413      	add	r3, r2
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1f2      	bne.n	800d620 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2b02      	cmp	r3, #2
 800d63e:	bf14      	ite	ne
 800d640:	2301      	movne	r3, #1
 800d642:	2300      	moveq	r3, #0
 800d644:	b2db      	uxtb	r3, r3
}
 800d646:	4618      	mov	r0, r3
 800d648:	370c      	adds	r7, #12
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	2000059c 	.word	0x2000059c

0800d658 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d662:	2300      	movs	r3, #0
 800d664:	60fb      	str	r3, [r7, #12]
 800d666:	e01f      	b.n	800d6a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d668:	4a41      	ldr	r2, [pc, #260]	; (800d770 <inc_lock+0x118>)
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	011b      	lsls	r3, r3, #4
 800d66e:	4413      	add	r3, r2
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	429a      	cmp	r2, r3
 800d678:	d113      	bne.n	800d6a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d67a:	4a3d      	ldr	r2, [pc, #244]	; (800d770 <inc_lock+0x118>)
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	011b      	lsls	r3, r3, #4
 800d680:	4413      	add	r3, r2
 800d682:	3304      	adds	r3, #4
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d109      	bne.n	800d6a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d68e:	4a38      	ldr	r2, [pc, #224]	; (800d770 <inc_lock+0x118>)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	011b      	lsls	r3, r3, #4
 800d694:	4413      	add	r3, r2
 800d696:	3308      	adds	r3, #8
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d006      	beq.n	800d6b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	60fb      	str	r3, [r7, #12]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d9dc      	bls.n	800d668 <inc_lock+0x10>
 800d6ae:	e000      	b.n	800d6b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d6b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d132      	bne.n	800d71e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	e002      	b.n	800d6c4 <inc_lock+0x6c>
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	60fb      	str	r3, [r7, #12]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d806      	bhi.n	800d6d8 <inc_lock+0x80>
 800d6ca:	4a29      	ldr	r2, [pc, #164]	; (800d770 <inc_lock+0x118>)
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	011b      	lsls	r3, r3, #4
 800d6d0:	4413      	add	r3, r2
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d1f2      	bne.n	800d6be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2b02      	cmp	r3, #2
 800d6dc:	d101      	bne.n	800d6e2 <inc_lock+0x8a>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	e040      	b.n	800d764 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	4922      	ldr	r1, [pc, #136]	; (800d770 <inc_lock+0x118>)
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	011b      	lsls	r3, r3, #4
 800d6ec:	440b      	add	r3, r1
 800d6ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	689a      	ldr	r2, [r3, #8]
 800d6f4:	491e      	ldr	r1, [pc, #120]	; (800d770 <inc_lock+0x118>)
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	011b      	lsls	r3, r3, #4
 800d6fa:	440b      	add	r3, r1
 800d6fc:	3304      	adds	r3, #4
 800d6fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	695a      	ldr	r2, [r3, #20]
 800d704:	491a      	ldr	r1, [pc, #104]	; (800d770 <inc_lock+0x118>)
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	011b      	lsls	r3, r3, #4
 800d70a:	440b      	add	r3, r1
 800d70c:	3308      	adds	r3, #8
 800d70e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d710:	4a17      	ldr	r2, [pc, #92]	; (800d770 <inc_lock+0x118>)
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	011b      	lsls	r3, r3, #4
 800d716:	4413      	add	r3, r2
 800d718:	330c      	adds	r3, #12
 800d71a:	2200      	movs	r2, #0
 800d71c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d009      	beq.n	800d738 <inc_lock+0xe0>
 800d724:	4a12      	ldr	r2, [pc, #72]	; (800d770 <inc_lock+0x118>)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	011b      	lsls	r3, r3, #4
 800d72a:	4413      	add	r3, r2
 800d72c:	330c      	adds	r3, #12
 800d72e:	881b      	ldrh	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d001      	beq.n	800d738 <inc_lock+0xe0>
 800d734:	2300      	movs	r3, #0
 800d736:	e015      	b.n	800d764 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d108      	bne.n	800d750 <inc_lock+0xf8>
 800d73e:	4a0c      	ldr	r2, [pc, #48]	; (800d770 <inc_lock+0x118>)
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	011b      	lsls	r3, r3, #4
 800d744:	4413      	add	r3, r2
 800d746:	330c      	adds	r3, #12
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	3301      	adds	r3, #1
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	e001      	b.n	800d754 <inc_lock+0xfc>
 800d750:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d754:	4906      	ldr	r1, [pc, #24]	; (800d770 <inc_lock+0x118>)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	011b      	lsls	r3, r3, #4
 800d75a:	440b      	add	r3, r1
 800d75c:	330c      	adds	r3, #12
 800d75e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	3301      	adds	r3, #1
}
 800d764:	4618      	mov	r0, r3
 800d766:	3714      	adds	r7, #20
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr
 800d770:	2000059c 	.word	0x2000059c

0800d774 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d774:	b480      	push	{r7}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	3b01      	subs	r3, #1
 800d780:	607b      	str	r3, [r7, #4]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2b01      	cmp	r3, #1
 800d786:	d825      	bhi.n	800d7d4 <dec_lock+0x60>
		n = Files[i].ctr;
 800d788:	4a17      	ldr	r2, [pc, #92]	; (800d7e8 <dec_lock+0x74>)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	011b      	lsls	r3, r3, #4
 800d78e:	4413      	add	r3, r2
 800d790:	330c      	adds	r3, #12
 800d792:	881b      	ldrh	r3, [r3, #0]
 800d794:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d796:	89fb      	ldrh	r3, [r7, #14]
 800d798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d79c:	d101      	bne.n	800d7a2 <dec_lock+0x2e>
 800d79e:	2300      	movs	r3, #0
 800d7a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d7a2:	89fb      	ldrh	r3, [r7, #14]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <dec_lock+0x3a>
 800d7a8:	89fb      	ldrh	r3, [r7, #14]
 800d7aa:	3b01      	subs	r3, #1
 800d7ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d7ae:	4a0e      	ldr	r2, [pc, #56]	; (800d7e8 <dec_lock+0x74>)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	011b      	lsls	r3, r3, #4
 800d7b4:	4413      	add	r3, r2
 800d7b6:	330c      	adds	r3, #12
 800d7b8:	89fa      	ldrh	r2, [r7, #14]
 800d7ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d7bc:	89fb      	ldrh	r3, [r7, #14]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d105      	bne.n	800d7ce <dec_lock+0x5a>
 800d7c2:	4a09      	ldr	r2, [pc, #36]	; (800d7e8 <dec_lock+0x74>)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	011b      	lsls	r3, r3, #4
 800d7c8:	4413      	add	r3, r2
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	737b      	strb	r3, [r7, #13]
 800d7d2:	e001      	b.n	800d7d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d7d4:	2302      	movs	r3, #2
 800d7d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d7d8:	7b7b      	ldrb	r3, [r7, #13]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3714      	adds	r7, #20
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop
 800d7e8:	2000059c 	.word	0x2000059c

0800d7ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b085      	sub	sp, #20
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	60fb      	str	r3, [r7, #12]
 800d7f8:	e010      	b.n	800d81c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d7fa:	4a0d      	ldr	r2, [pc, #52]	; (800d830 <clear_lock+0x44>)
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	011b      	lsls	r3, r3, #4
 800d800:	4413      	add	r3, r2
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	429a      	cmp	r2, r3
 800d808:	d105      	bne.n	800d816 <clear_lock+0x2a>
 800d80a:	4a09      	ldr	r2, [pc, #36]	; (800d830 <clear_lock+0x44>)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	011b      	lsls	r3, r3, #4
 800d810:	4413      	add	r3, r2
 800d812:	2200      	movs	r2, #0
 800d814:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	3301      	adds	r3, #1
 800d81a:	60fb      	str	r3, [r7, #12]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d9eb      	bls.n	800d7fa <clear_lock+0xe>
	}
}
 800d822:	bf00      	nop
 800d824:	bf00      	nop
 800d826:	3714      	adds	r7, #20
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr
 800d830:	2000059c 	.word	0x2000059c

0800d834 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d83c:	2300      	movs	r3, #0
 800d83e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	78db      	ldrb	r3, [r3, #3]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d034      	beq.n	800d8b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d84c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	7858      	ldrb	r0, [r3, #1]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d858:	2301      	movs	r3, #1
 800d85a:	697a      	ldr	r2, [r7, #20]
 800d85c:	f7ff fd0e 	bl	800d27c <disk_write>
 800d860:	4603      	mov	r3, r0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d002      	beq.n	800d86c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d866:	2301      	movs	r3, #1
 800d868:	73fb      	strb	r3, [r7, #15]
 800d86a:	e022      	b.n	800d8b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2200      	movs	r2, #0
 800d870:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d876:	697a      	ldr	r2, [r7, #20]
 800d878:	1ad2      	subs	r2, r2, r3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	69db      	ldr	r3, [r3, #28]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d217      	bcs.n	800d8b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	789b      	ldrb	r3, [r3, #2]
 800d886:	613b      	str	r3, [r7, #16]
 800d888:	e010      	b.n	800d8ac <sync_window+0x78>
					wsect += fs->fsize;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	69db      	ldr	r3, [r3, #28]
 800d88e:	697a      	ldr	r2, [r7, #20]
 800d890:	4413      	add	r3, r2
 800d892:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	7858      	ldrb	r0, [r3, #1]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d89e:	2301      	movs	r3, #1
 800d8a0:	697a      	ldr	r2, [r7, #20]
 800d8a2:	f7ff fceb 	bl	800d27c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	3b01      	subs	r3, #1
 800d8aa:	613b      	str	r3, [r7, #16]
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d8eb      	bhi.n	800d88a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3718      	adds	r7, #24
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d01b      	beq.n	800d90c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f7ff ffad 	bl	800d834 <sync_window>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d8de:	7bfb      	ldrb	r3, [r7, #15]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d113      	bne.n	800d90c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	7858      	ldrb	r0, [r3, #1]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	683a      	ldr	r2, [r7, #0]
 800d8f2:	f7ff fca3 	bl	800d23c <disk_read>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d004      	beq.n	800d906 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d8fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d900:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d902:	2301      	movs	r3, #1
 800d904:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	683a      	ldr	r2, [r7, #0]
 800d90a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
	...

0800d918 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f7ff ff87 	bl	800d834 <sync_window>
 800d926:	4603      	mov	r3, r0
 800d928:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d92a:	7bfb      	ldrb	r3, [r7, #15]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d158      	bne.n	800d9e2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	2b03      	cmp	r3, #3
 800d936:	d148      	bne.n	800d9ca <sync_fs+0xb2>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	791b      	ldrb	r3, [r3, #4]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d144      	bne.n	800d9ca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	3334      	adds	r3, #52	; 0x34
 800d944:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d948:	2100      	movs	r1, #0
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7ff fd77 	bl	800d43e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	3334      	adds	r3, #52	; 0x34
 800d954:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d958:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7ff fd06 	bl	800d36e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	3334      	adds	r3, #52	; 0x34
 800d966:	4921      	ldr	r1, [pc, #132]	; (800d9ec <sync_fs+0xd4>)
 800d968:	4618      	mov	r0, r3
 800d96a:	f7ff fd1b 	bl	800d3a4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	3334      	adds	r3, #52	; 0x34
 800d972:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d976:	491e      	ldr	r1, [pc, #120]	; (800d9f0 <sync_fs+0xd8>)
 800d978:	4618      	mov	r0, r3
 800d97a:	f7ff fd13 	bl	800d3a4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	3334      	adds	r3, #52	; 0x34
 800d982:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	695b      	ldr	r3, [r3, #20]
 800d98a:	4619      	mov	r1, r3
 800d98c:	4610      	mov	r0, r2
 800d98e:	f7ff fd09 	bl	800d3a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	3334      	adds	r3, #52	; 0x34
 800d996:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	4619      	mov	r1, r3
 800d9a0:	4610      	mov	r0, r2
 800d9a2:	f7ff fcff 	bl	800d3a4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6a1b      	ldr	r3, [r3, #32]
 800d9aa:	1c5a      	adds	r2, r3, #1
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	7858      	ldrb	r0, [r3, #1]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9be:	2301      	movs	r3, #1
 800d9c0:	f7ff fc5c 	bl	800d27c <disk_write>
			fs->fsi_flag = 0;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	785b      	ldrb	r3, [r3, #1]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7ff fc72 	bl	800d2bc <disk_ioctl>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d001      	beq.n	800d9e2 <sync_fs+0xca>
 800d9de:	2301      	movs	r3, #1
 800d9e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3710      	adds	r7, #16
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	41615252 	.word	0x41615252
 800d9f0:	61417272 	.word	0x61417272

0800d9f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	3b02      	subs	r3, #2
 800da02:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	699b      	ldr	r3, [r3, #24]
 800da08:	3b02      	subs	r3, #2
 800da0a:	683a      	ldr	r2, [r7, #0]
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d301      	bcc.n	800da14 <clust2sect+0x20>
 800da10:	2300      	movs	r3, #0
 800da12:	e008      	b.n	800da26 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	895b      	ldrh	r3, [r3, #10]
 800da18:	461a      	mov	r2, r3
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	fb03 f202 	mul.w	r2, r3, r2
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da24:	4413      	add	r3, r2
}
 800da26:	4618      	mov	r0, r3
 800da28:	370c      	adds	r7, #12
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr

0800da32 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800da32:	b580      	push	{r7, lr}
 800da34:	b086      	sub	sp, #24
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
 800da3a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	2b01      	cmp	r3, #1
 800da46:	d904      	bls.n	800da52 <get_fat+0x20>
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	699b      	ldr	r3, [r3, #24]
 800da4c:	683a      	ldr	r2, [r7, #0]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d302      	bcc.n	800da58 <get_fat+0x26>
		val = 1;	/* Internal error */
 800da52:	2301      	movs	r3, #1
 800da54:	617b      	str	r3, [r7, #20]
 800da56:	e08f      	b.n	800db78 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800da58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da5c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	2b03      	cmp	r3, #3
 800da64:	d062      	beq.n	800db2c <get_fat+0xfa>
 800da66:	2b03      	cmp	r3, #3
 800da68:	dc7c      	bgt.n	800db64 <get_fat+0x132>
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d002      	beq.n	800da74 <get_fat+0x42>
 800da6e:	2b02      	cmp	r3, #2
 800da70:	d042      	beq.n	800daf8 <get_fat+0xc6>
 800da72:	e077      	b.n	800db64 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	60fb      	str	r3, [r7, #12]
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	085b      	lsrs	r3, r3, #1
 800da7c:	68fa      	ldr	r2, [r7, #12]
 800da7e:	4413      	add	r3, r2
 800da80:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	0a5b      	lsrs	r3, r3, #9
 800da8a:	4413      	add	r3, r2
 800da8c:	4619      	mov	r1, r3
 800da8e:	6938      	ldr	r0, [r7, #16]
 800da90:	f7ff ff14 	bl	800d8bc <move_window>
 800da94:	4603      	mov	r3, r0
 800da96:	2b00      	cmp	r3, #0
 800da98:	d167      	bne.n	800db6a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	1c5a      	adds	r2, r3, #1
 800da9e:	60fa      	str	r2, [r7, #12]
 800daa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daa4:	693a      	ldr	r2, [r7, #16]
 800daa6:	4413      	add	r3, r2
 800daa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800daac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	0a5b      	lsrs	r3, r3, #9
 800dab6:	4413      	add	r3, r2
 800dab8:	4619      	mov	r1, r3
 800daba:	6938      	ldr	r0, [r7, #16]
 800dabc:	f7ff fefe 	bl	800d8bc <move_window>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d153      	bne.n	800db6e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dacc:	693a      	ldr	r2, [r7, #16]
 800dace:	4413      	add	r3, r2
 800dad0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dad4:	021b      	lsls	r3, r3, #8
 800dad6:	461a      	mov	r2, r3
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	4313      	orrs	r3, r2
 800dadc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	f003 0301 	and.w	r3, r3, #1
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d002      	beq.n	800daee <get_fat+0xbc>
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	091b      	lsrs	r3, r3, #4
 800daec:	e002      	b.n	800daf4 <get_fat+0xc2>
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800daf4:	617b      	str	r3, [r7, #20]
			break;
 800daf6:	e03f      	b.n	800db78 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	0a1b      	lsrs	r3, r3, #8
 800db00:	4413      	add	r3, r2
 800db02:	4619      	mov	r1, r3
 800db04:	6938      	ldr	r0, [r7, #16]
 800db06:	f7ff fed9 	bl	800d8bc <move_window>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d130      	bne.n	800db72 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	005b      	lsls	r3, r3, #1
 800db1a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800db1e:	4413      	add	r3, r2
 800db20:	4618      	mov	r0, r3
 800db22:	f7ff fbe9 	bl	800d2f8 <ld_word>
 800db26:	4603      	mov	r3, r0
 800db28:	617b      	str	r3, [r7, #20]
			break;
 800db2a:	e025      	b.n	800db78 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	09db      	lsrs	r3, r3, #7
 800db34:	4413      	add	r3, r2
 800db36:	4619      	mov	r1, r3
 800db38:	6938      	ldr	r0, [r7, #16]
 800db3a:	f7ff febf 	bl	800d8bc <move_window>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d118      	bne.n	800db76 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800db52:	4413      	add	r3, r2
 800db54:	4618      	mov	r0, r3
 800db56:	f7ff fbe7 	bl	800d328 <ld_dword>
 800db5a:	4603      	mov	r3, r0
 800db5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800db60:	617b      	str	r3, [r7, #20]
			break;
 800db62:	e009      	b.n	800db78 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800db64:	2301      	movs	r3, #1
 800db66:	617b      	str	r3, [r7, #20]
 800db68:	e006      	b.n	800db78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db6a:	bf00      	nop
 800db6c:	e004      	b.n	800db78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db6e:	bf00      	nop
 800db70:	e002      	b.n	800db78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800db72:	bf00      	nop
 800db74:	e000      	b.n	800db78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800db76:	bf00      	nop
		}
	}

	return val;
 800db78:	697b      	ldr	r3, [r7, #20]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3718      	adds	r7, #24
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800db82:	b590      	push	{r4, r7, lr}
 800db84:	b089      	sub	sp, #36	; 0x24
 800db86:	af00      	add	r7, sp, #0
 800db88:	60f8      	str	r0, [r7, #12]
 800db8a:	60b9      	str	r1, [r7, #8]
 800db8c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800db8e:	2302      	movs	r3, #2
 800db90:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	2b01      	cmp	r3, #1
 800db96:	f240 80d2 	bls.w	800dd3e <put_fat+0x1bc>
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	699b      	ldr	r3, [r3, #24]
 800db9e:	68ba      	ldr	r2, [r7, #8]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	f080 80cc 	bcs.w	800dd3e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	2b03      	cmp	r3, #3
 800dbac:	f000 8096 	beq.w	800dcdc <put_fat+0x15a>
 800dbb0:	2b03      	cmp	r3, #3
 800dbb2:	f300 80cd 	bgt.w	800dd50 <put_fat+0x1ce>
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d002      	beq.n	800dbc0 <put_fat+0x3e>
 800dbba:	2b02      	cmp	r3, #2
 800dbbc:	d06e      	beq.n	800dc9c <put_fat+0x11a>
 800dbbe:	e0c7      	b.n	800dd50 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	61bb      	str	r3, [r7, #24]
 800dbc4:	69bb      	ldr	r3, [r7, #24]
 800dbc6:	085b      	lsrs	r3, r3, #1
 800dbc8:	69ba      	ldr	r2, [r7, #24]
 800dbca:	4413      	add	r3, r2
 800dbcc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	0a5b      	lsrs	r3, r3, #9
 800dbd6:	4413      	add	r3, r2
 800dbd8:	4619      	mov	r1, r3
 800dbda:	68f8      	ldr	r0, [r7, #12]
 800dbdc:	f7ff fe6e 	bl	800d8bc <move_window>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dbe4:	7ffb      	ldrb	r3, [r7, #31]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	f040 80ab 	bne.w	800dd42 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dbf2:	69bb      	ldr	r3, [r7, #24]
 800dbf4:	1c59      	adds	r1, r3, #1
 800dbf6:	61b9      	str	r1, [r7, #24]
 800dbf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbfc:	4413      	add	r3, r2
 800dbfe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	f003 0301 	and.w	r3, r3, #1
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d00d      	beq.n	800dc26 <put_fat+0xa4>
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	b25b      	sxtb	r3, r3
 800dc10:	f003 030f 	and.w	r3, r3, #15
 800dc14:	b25a      	sxtb	r2, r3
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	011b      	lsls	r3, r3, #4
 800dc1c:	b25b      	sxtb	r3, r3
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	b25b      	sxtb	r3, r3
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	e001      	b.n	800dc2a <put_fat+0xa8>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	697a      	ldr	r2, [r7, #20]
 800dc2c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2201      	movs	r2, #1
 800dc32:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	0a5b      	lsrs	r3, r3, #9
 800dc3c:	4413      	add	r3, r2
 800dc3e:	4619      	mov	r1, r3
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f7ff fe3b 	bl	800d8bc <move_window>
 800dc46:	4603      	mov	r3, r0
 800dc48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc4a:	7ffb      	ldrb	r3, [r7, #31]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d17a      	bne.n	800dd46 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc5c:	4413      	add	r3, r2
 800dc5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	f003 0301 	and.w	r3, r3, #1
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d003      	beq.n	800dc72 <put_fat+0xf0>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	091b      	lsrs	r3, r3, #4
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	e00e      	b.n	800dc90 <put_fat+0x10e>
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	b25b      	sxtb	r3, r3
 800dc78:	f023 030f 	bic.w	r3, r3, #15
 800dc7c:	b25a      	sxtb	r2, r3
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	0a1b      	lsrs	r3, r3, #8
 800dc82:	b25b      	sxtb	r3, r3
 800dc84:	f003 030f 	and.w	r3, r3, #15
 800dc88:	b25b      	sxtb	r3, r3
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	b25b      	sxtb	r3, r3
 800dc8e:	b2db      	uxtb	r3, r3
 800dc90:	697a      	ldr	r2, [r7, #20]
 800dc92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2201      	movs	r2, #1
 800dc98:	70da      	strb	r2, [r3, #3]
			break;
 800dc9a:	e059      	b.n	800dd50 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	0a1b      	lsrs	r3, r3, #8
 800dca4:	4413      	add	r3, r2
 800dca6:	4619      	mov	r1, r3
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	f7ff fe07 	bl	800d8bc <move_window>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dcb2:	7ffb      	ldrb	r3, [r7, #31]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d148      	bne.n	800dd4a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	005b      	lsls	r3, r3, #1
 800dcc2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dcc6:	4413      	add	r3, r2
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	b292      	uxth	r2, r2
 800dccc:	4611      	mov	r1, r2
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7ff fb4d 	bl	800d36e <st_word>
			fs->wflag = 1;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	70da      	strb	r2, [r3, #3]
			break;
 800dcda:	e039      	b.n	800dd50 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	09db      	lsrs	r3, r3, #7
 800dce4:	4413      	add	r3, r2
 800dce6:	4619      	mov	r1, r3
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	f7ff fde7 	bl	800d8bc <move_window>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dcf2:	7ffb      	ldrb	r3, [r7, #31]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d12a      	bne.n	800dd4e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dd0c:	4413      	add	r3, r2
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7ff fb0a 	bl	800d328 <ld_dword>
 800dd14:	4603      	mov	r3, r0
 800dd16:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dd1a:	4323      	orrs	r3, r4
 800dd1c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dd2c:	4413      	add	r3, r2
 800dd2e:	6879      	ldr	r1, [r7, #4]
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff fb37 	bl	800d3a4 <st_dword>
			fs->wflag = 1;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2201      	movs	r2, #1
 800dd3a:	70da      	strb	r2, [r3, #3]
			break;
 800dd3c:	e008      	b.n	800dd50 <put_fat+0x1ce>
		}
	}
 800dd3e:	bf00      	nop
 800dd40:	e006      	b.n	800dd50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800dd42:	bf00      	nop
 800dd44:	e004      	b.n	800dd50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800dd46:	bf00      	nop
 800dd48:	e002      	b.n	800dd50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800dd4a:	bf00      	nop
 800dd4c:	e000      	b.n	800dd50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800dd4e:	bf00      	nop
	return res;
 800dd50:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3724      	adds	r7, #36	; 0x24
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd90      	pop	{r4, r7, pc}

0800dd5a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b088      	sub	sp, #32
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	60f8      	str	r0, [r7, #12]
 800dd62:	60b9      	str	r1, [r7, #8]
 800dd64:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dd66:	2300      	movs	r3, #0
 800dd68:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d904      	bls.n	800dd80 <remove_chain+0x26>
 800dd76:	69bb      	ldr	r3, [r7, #24]
 800dd78:	699b      	ldr	r3, [r3, #24]
 800dd7a:	68ba      	ldr	r2, [r7, #8]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d301      	bcc.n	800dd84 <remove_chain+0x2a>
 800dd80:	2302      	movs	r3, #2
 800dd82:	e04b      	b.n	800de1c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d00c      	beq.n	800dda4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dd8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd8e:	6879      	ldr	r1, [r7, #4]
 800dd90:	69b8      	ldr	r0, [r7, #24]
 800dd92:	f7ff fef6 	bl	800db82 <put_fat>
 800dd96:	4603      	mov	r3, r0
 800dd98:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dd9a:	7ffb      	ldrb	r3, [r7, #31]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d001      	beq.n	800dda4 <remove_chain+0x4a>
 800dda0:	7ffb      	ldrb	r3, [r7, #31]
 800dda2:	e03b      	b.n	800de1c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dda4:	68b9      	ldr	r1, [r7, #8]
 800dda6:	68f8      	ldr	r0, [r7, #12]
 800dda8:	f7ff fe43 	bl	800da32 <get_fat>
 800ddac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d031      	beq.n	800de18 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d101      	bne.n	800ddbe <remove_chain+0x64>
 800ddba:	2302      	movs	r3, #2
 800ddbc:	e02e      	b.n	800de1c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddc4:	d101      	bne.n	800ddca <remove_chain+0x70>
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	e028      	b.n	800de1c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ddca:	2200      	movs	r2, #0
 800ddcc:	68b9      	ldr	r1, [r7, #8]
 800ddce:	69b8      	ldr	r0, [r7, #24]
 800ddd0:	f7ff fed7 	bl	800db82 <put_fat>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ddd8:	7ffb      	ldrb	r3, [r7, #31]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d001      	beq.n	800dde2 <remove_chain+0x88>
 800ddde:	7ffb      	ldrb	r3, [r7, #31]
 800dde0:	e01c      	b.n	800de1c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	695a      	ldr	r2, [r3, #20]
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	699b      	ldr	r3, [r3, #24]
 800ddea:	3b02      	subs	r3, #2
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d20b      	bcs.n	800de08 <remove_chain+0xae>
			fs->free_clst++;
 800ddf0:	69bb      	ldr	r3, [r7, #24]
 800ddf2:	695b      	ldr	r3, [r3, #20]
 800ddf4:	1c5a      	adds	r2, r3, #1
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ddfa:	69bb      	ldr	r3, [r7, #24]
 800ddfc:	791b      	ldrb	r3, [r3, #4]
 800ddfe:	f043 0301 	orr.w	r3, r3, #1
 800de02:	b2da      	uxtb	r2, r3
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	699b      	ldr	r3, [r3, #24]
 800de10:	68ba      	ldr	r2, [r7, #8]
 800de12:	429a      	cmp	r2, r3
 800de14:	d3c6      	bcc.n	800dda4 <remove_chain+0x4a>
 800de16:	e000      	b.n	800de1a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800de18:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800de1a:	2300      	movs	r3, #0
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3720      	adds	r7, #32
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b088      	sub	sp, #32
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d10d      	bne.n	800de56 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	691b      	ldr	r3, [r3, #16]
 800de3e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d004      	beq.n	800de50 <create_chain+0x2c>
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	699b      	ldr	r3, [r3, #24]
 800de4a:	69ba      	ldr	r2, [r7, #24]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d31b      	bcc.n	800de88 <create_chain+0x64>
 800de50:	2301      	movs	r3, #1
 800de52:	61bb      	str	r3, [r7, #24]
 800de54:	e018      	b.n	800de88 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800de56:	6839      	ldr	r1, [r7, #0]
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f7ff fdea 	bl	800da32 <get_fat>
 800de5e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2b01      	cmp	r3, #1
 800de64:	d801      	bhi.n	800de6a <create_chain+0x46>
 800de66:	2301      	movs	r3, #1
 800de68:	e070      	b.n	800df4c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de70:	d101      	bne.n	800de76 <create_chain+0x52>
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	e06a      	b.n	800df4c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	699b      	ldr	r3, [r3, #24]
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d201      	bcs.n	800de84 <create_chain+0x60>
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	e063      	b.n	800df4c <create_chain+0x128>
		scl = clst;
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	3301      	adds	r3, #1
 800de90:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	699b      	ldr	r3, [r3, #24]
 800de96:	69fa      	ldr	r2, [r7, #28]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d307      	bcc.n	800deac <create_chain+0x88>
				ncl = 2;
 800de9c:	2302      	movs	r3, #2
 800de9e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dea0:	69fa      	ldr	r2, [r7, #28]
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d901      	bls.n	800deac <create_chain+0x88>
 800dea8:	2300      	movs	r3, #0
 800deaa:	e04f      	b.n	800df4c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800deac:	69f9      	ldr	r1, [r7, #28]
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f7ff fdbf 	bl	800da32 <get_fat>
 800deb4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d00e      	beq.n	800deda <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d003      	beq.n	800deca <create_chain+0xa6>
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dec8:	d101      	bne.n	800dece <create_chain+0xaa>
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	e03e      	b.n	800df4c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dece:	69fa      	ldr	r2, [r7, #28]
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d1da      	bne.n	800de8c <create_chain+0x68>
 800ded6:	2300      	movs	r3, #0
 800ded8:	e038      	b.n	800df4c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800deda:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dedc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dee0:	69f9      	ldr	r1, [r7, #28]
 800dee2:	6938      	ldr	r0, [r7, #16]
 800dee4:	f7ff fe4d 	bl	800db82 <put_fat>
 800dee8:	4603      	mov	r3, r0
 800deea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800deec:	7dfb      	ldrb	r3, [r7, #23]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d109      	bne.n	800df06 <create_chain+0xe2>
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d006      	beq.n	800df06 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800def8:	69fa      	ldr	r2, [r7, #28]
 800defa:	6839      	ldr	r1, [r7, #0]
 800defc:	6938      	ldr	r0, [r7, #16]
 800defe:	f7ff fe40 	bl	800db82 <put_fat>
 800df02:	4603      	mov	r3, r0
 800df04:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800df06:	7dfb      	ldrb	r3, [r7, #23]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d116      	bne.n	800df3a <create_chain+0x116>
		fs->last_clst = ncl;
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	69fa      	ldr	r2, [r7, #28]
 800df10:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	695a      	ldr	r2, [r3, #20]
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	699b      	ldr	r3, [r3, #24]
 800df1a:	3b02      	subs	r3, #2
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d804      	bhi.n	800df2a <create_chain+0x106>
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	695b      	ldr	r3, [r3, #20]
 800df24:	1e5a      	subs	r2, r3, #1
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	791b      	ldrb	r3, [r3, #4]
 800df2e:	f043 0301 	orr.w	r3, r3, #1
 800df32:	b2da      	uxtb	r2, r3
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	711a      	strb	r2, [r3, #4]
 800df38:	e007      	b.n	800df4a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800df3a:	7dfb      	ldrb	r3, [r7, #23]
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d102      	bne.n	800df46 <create_chain+0x122>
 800df40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df44:	e000      	b.n	800df48 <create_chain+0x124>
 800df46:	2301      	movs	r3, #1
 800df48:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800df4a:	69fb      	ldr	r3, [r7, #28]
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3720      	adds	r7, #32
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800df54:	b480      	push	{r7}
 800df56:	b087      	sub	sp, #28
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df68:	3304      	adds	r3, #4
 800df6a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	0a5b      	lsrs	r3, r3, #9
 800df70:	68fa      	ldr	r2, [r7, #12]
 800df72:	8952      	ldrh	r2, [r2, #10]
 800df74:	fbb3 f3f2 	udiv	r3, r3, r2
 800df78:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	1d1a      	adds	r2, r3, #4
 800df7e:	613a      	str	r2, [r7, #16]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d101      	bne.n	800df8e <clmt_clust+0x3a>
 800df8a:	2300      	movs	r3, #0
 800df8c:	e010      	b.n	800dfb0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800df8e:	697a      	ldr	r2, [r7, #20]
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	429a      	cmp	r2, r3
 800df94:	d307      	bcc.n	800dfa6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800df96:	697a      	ldr	r2, [r7, #20]
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	1ad3      	subs	r3, r2, r3
 800df9c:	617b      	str	r3, [r7, #20]
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	3304      	adds	r3, #4
 800dfa2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dfa4:	e7e9      	b.n	800df7a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800dfa6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	4413      	add	r3, r2
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	371c      	adds	r7, #28
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr

0800dfbc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b086      	sub	sp, #24
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dfd2:	d204      	bcs.n	800dfde <dir_sdi+0x22>
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	f003 031f 	and.w	r3, r3, #31
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d001      	beq.n	800dfe2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800dfde:	2302      	movs	r3, #2
 800dfe0:	e063      	b.n	800e0aa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	683a      	ldr	r2, [r7, #0]
 800dfe6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d106      	bne.n	800e002 <dir_sdi+0x46>
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	2b02      	cmp	r3, #2
 800dffa:	d902      	bls.n	800e002 <dir_sdi+0x46>
		clst = fs->dirbase;
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e000:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d10c      	bne.n	800e022 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	095b      	lsrs	r3, r3, #5
 800e00c:	693a      	ldr	r2, [r7, #16]
 800e00e:	8912      	ldrh	r2, [r2, #8]
 800e010:	4293      	cmp	r3, r2
 800e012:	d301      	bcc.n	800e018 <dir_sdi+0x5c>
 800e014:	2302      	movs	r3, #2
 800e016:	e048      	b.n	800e0aa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	61da      	str	r2, [r3, #28]
 800e020:	e029      	b.n	800e076 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	895b      	ldrh	r3, [r3, #10]
 800e026:	025b      	lsls	r3, r3, #9
 800e028:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e02a:	e019      	b.n	800e060 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6979      	ldr	r1, [r7, #20]
 800e030:	4618      	mov	r0, r3
 800e032:	f7ff fcfe 	bl	800da32 <get_fat>
 800e036:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e03e:	d101      	bne.n	800e044 <dir_sdi+0x88>
 800e040:	2301      	movs	r3, #1
 800e042:	e032      	b.n	800e0aa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	2b01      	cmp	r3, #1
 800e048:	d904      	bls.n	800e054 <dir_sdi+0x98>
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	699b      	ldr	r3, [r3, #24]
 800e04e:	697a      	ldr	r2, [r7, #20]
 800e050:	429a      	cmp	r2, r3
 800e052:	d301      	bcc.n	800e058 <dir_sdi+0x9c>
 800e054:	2302      	movs	r3, #2
 800e056:	e028      	b.n	800e0aa <dir_sdi+0xee>
			ofs -= csz;
 800e058:	683a      	ldr	r2, [r7, #0]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	1ad3      	subs	r3, r2, r3
 800e05e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e060:	683a      	ldr	r2, [r7, #0]
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	429a      	cmp	r2, r3
 800e066:	d2e1      	bcs.n	800e02c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e068:	6979      	ldr	r1, [r7, #20]
 800e06a:	6938      	ldr	r0, [r7, #16]
 800e06c:	f7ff fcc2 	bl	800d9f4 <clust2sect>
 800e070:	4602      	mov	r2, r0
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	697a      	ldr	r2, [r7, #20]
 800e07a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	69db      	ldr	r3, [r3, #28]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d101      	bne.n	800e088 <dir_sdi+0xcc>
 800e084:	2302      	movs	r3, #2
 800e086:	e010      	b.n	800e0aa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	69da      	ldr	r2, [r3, #28]
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	0a5b      	lsrs	r3, r3, #9
 800e090:	441a      	add	r2, r3
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0a2:	441a      	add	r2, r3
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3718      	adds	r7, #24
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b086      	sub	sp, #24
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
 800e0ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	695b      	ldr	r3, [r3, #20]
 800e0c6:	3320      	adds	r3, #32
 800e0c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	69db      	ldr	r3, [r3, #28]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d003      	beq.n	800e0da <dir_next+0x28>
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e0d8:	d301      	bcc.n	800e0de <dir_next+0x2c>
 800e0da:	2304      	movs	r3, #4
 800e0dc:	e0aa      	b.n	800e234 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f040 8098 	bne.w	800e21a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	69db      	ldr	r3, [r3, #28]
 800e0ee:	1c5a      	adds	r2, r3, #1
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	699b      	ldr	r3, [r3, #24]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d10b      	bne.n	800e114 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	095b      	lsrs	r3, r3, #5
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	8912      	ldrh	r2, [r2, #8]
 800e104:	4293      	cmp	r3, r2
 800e106:	f0c0 8088 	bcc.w	800e21a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2200      	movs	r2, #0
 800e10e:	61da      	str	r2, [r3, #28]
 800e110:	2304      	movs	r3, #4
 800e112:	e08f      	b.n	800e234 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	0a5b      	lsrs	r3, r3, #9
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	8952      	ldrh	r2, [r2, #10]
 800e11c:	3a01      	subs	r2, #1
 800e11e:	4013      	ands	r3, r2
 800e120:	2b00      	cmp	r3, #0
 800e122:	d17a      	bne.n	800e21a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	699b      	ldr	r3, [r3, #24]
 800e12a:	4619      	mov	r1, r3
 800e12c:	4610      	mov	r0, r2
 800e12e:	f7ff fc80 	bl	800da32 <get_fat>
 800e132:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	2b01      	cmp	r3, #1
 800e138:	d801      	bhi.n	800e13e <dir_next+0x8c>
 800e13a:	2302      	movs	r3, #2
 800e13c:	e07a      	b.n	800e234 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e144:	d101      	bne.n	800e14a <dir_next+0x98>
 800e146:	2301      	movs	r3, #1
 800e148:	e074      	b.n	800e234 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	699b      	ldr	r3, [r3, #24]
 800e14e:	697a      	ldr	r2, [r7, #20]
 800e150:	429a      	cmp	r2, r3
 800e152:	d358      	bcc.n	800e206 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d104      	bne.n	800e164 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2200      	movs	r2, #0
 800e15e:	61da      	str	r2, [r3, #28]
 800e160:	2304      	movs	r3, #4
 800e162:	e067      	b.n	800e234 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	699b      	ldr	r3, [r3, #24]
 800e16a:	4619      	mov	r1, r3
 800e16c:	4610      	mov	r0, r2
 800e16e:	f7ff fe59 	bl	800de24 <create_chain>
 800e172:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d101      	bne.n	800e17e <dir_next+0xcc>
 800e17a:	2307      	movs	r3, #7
 800e17c:	e05a      	b.n	800e234 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	2b01      	cmp	r3, #1
 800e182:	d101      	bne.n	800e188 <dir_next+0xd6>
 800e184:	2302      	movs	r3, #2
 800e186:	e055      	b.n	800e234 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e18e:	d101      	bne.n	800e194 <dir_next+0xe2>
 800e190:	2301      	movs	r3, #1
 800e192:	e04f      	b.n	800e234 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f7ff fb4d 	bl	800d834 <sync_window>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d001      	beq.n	800e1a4 <dir_next+0xf2>
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e047      	b.n	800e234 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	3334      	adds	r3, #52	; 0x34
 800e1a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1ac:	2100      	movs	r1, #0
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7ff f945 	bl	800d43e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	613b      	str	r3, [r7, #16]
 800e1b8:	6979      	ldr	r1, [r7, #20]
 800e1ba:	68f8      	ldr	r0, [r7, #12]
 800e1bc:	f7ff fc1a 	bl	800d9f4 <clust2sect>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	631a      	str	r2, [r3, #48]	; 0x30
 800e1c6:	e012      	b.n	800e1ee <dir_next+0x13c>
						fs->wflag = 1;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f7ff fb30 	bl	800d834 <sync_window>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d001      	beq.n	800e1de <dir_next+0x12c>
 800e1da:	2301      	movs	r3, #1
 800e1dc:	e02a      	b.n	800e234 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	613b      	str	r3, [r7, #16]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1e8:	1c5a      	adds	r2, r3, #1
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	631a      	str	r2, [r3, #48]	; 0x30
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	895b      	ldrh	r3, [r3, #10]
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d3e6      	bcc.n	800e1c8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	1ad2      	subs	r2, r2, r3
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	697a      	ldr	r2, [r7, #20]
 800e20a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e20c:	6979      	ldr	r1, [r7, #20]
 800e20e:	68f8      	ldr	r0, [r7, #12]
 800e210:	f7ff fbf0 	bl	800d9f4 <clust2sect>
 800e214:	4602      	mov	r2, r0
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	68ba      	ldr	r2, [r7, #8]
 800e21e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e22c:	441a      	add	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e232:	2300      	movs	r3, #0
}
 800e234:	4618      	mov	r0, r3
 800e236:	3718      	adds	r7, #24
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b086      	sub	sp, #24
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e24c:	2100      	movs	r1, #0
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7ff feb4 	bl	800dfbc <dir_sdi>
 800e254:	4603      	mov	r3, r0
 800e256:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e258:	7dfb      	ldrb	r3, [r7, #23]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d12b      	bne.n	800e2b6 <dir_alloc+0x7a>
		n = 0;
 800e25e:	2300      	movs	r3, #0
 800e260:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	69db      	ldr	r3, [r3, #28]
 800e266:	4619      	mov	r1, r3
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	f7ff fb27 	bl	800d8bc <move_window>
 800e26e:	4603      	mov	r3, r0
 800e270:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e272:	7dfb      	ldrb	r3, [r7, #23]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d11d      	bne.n	800e2b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6a1b      	ldr	r3, [r3, #32]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	2be5      	cmp	r3, #229	; 0xe5
 800e280:	d004      	beq.n	800e28c <dir_alloc+0x50>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6a1b      	ldr	r3, [r3, #32]
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d107      	bne.n	800e29c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	3301      	adds	r3, #1
 800e290:	613b      	str	r3, [r7, #16]
 800e292:	693a      	ldr	r2, [r7, #16]
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	429a      	cmp	r2, r3
 800e298:	d102      	bne.n	800e2a0 <dir_alloc+0x64>
 800e29a:	e00c      	b.n	800e2b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e29c:	2300      	movs	r3, #0
 800e29e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e2a0:	2101      	movs	r1, #1
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f7ff ff05 	bl	800e0b2 <dir_next>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e2ac:	7dfb      	ldrb	r3, [r7, #23]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d0d7      	beq.n	800e262 <dir_alloc+0x26>
 800e2b2:	e000      	b.n	800e2b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e2b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e2b6:	7dfb      	ldrb	r3, [r7, #23]
 800e2b8:	2b04      	cmp	r3, #4
 800e2ba:	d101      	bne.n	800e2c0 <dir_alloc+0x84>
 800e2bc:	2307      	movs	r3, #7
 800e2be:	75fb      	strb	r3, [r7, #23]
	return res;
 800e2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3718      	adds	r7, #24
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b084      	sub	sp, #16
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	331a      	adds	r3, #26
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7ff f80d 	bl	800d2f8 <ld_word>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	2b03      	cmp	r3, #3
 800e2e8:	d109      	bne.n	800e2fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	3314      	adds	r3, #20
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7ff f802 	bl	800d2f8 <ld_word>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	041b      	lsls	r3, r3, #16
 800e2f8:	68fa      	ldr	r2, [r7, #12]
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
}
 800e300:	4618      	mov	r0, r3
 800e302:	3710      	adds	r7, #16
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	331a      	adds	r3, #26
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	b292      	uxth	r2, r2
 800e31c:	4611      	mov	r1, r2
 800e31e:	4618      	mov	r0, r3
 800e320:	f7ff f825 	bl	800d36e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	2b03      	cmp	r3, #3
 800e32a:	d109      	bne.n	800e340 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	f103 0214 	add.w	r2, r3, #20
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	0c1b      	lsrs	r3, r3, #16
 800e336:	b29b      	uxth	r3, r3
 800e338:	4619      	mov	r1, r3
 800e33a:	4610      	mov	r0, r2
 800e33c:	f7ff f817 	bl	800d36e <st_word>
	}
}
 800e340:	bf00      	nop
 800e342:	3710      	adds	r7, #16
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b086      	sub	sp, #24
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e352:	2304      	movs	r3, #4
 800e354:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800e35c:	e03c      	b.n	800e3d8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	69db      	ldr	r3, [r3, #28]
 800e362:	4619      	mov	r1, r3
 800e364:	6938      	ldr	r0, [r7, #16]
 800e366:	f7ff faa9 	bl	800d8bc <move_window>
 800e36a:	4603      	mov	r3, r0
 800e36c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e36e:	7dfb      	ldrb	r3, [r7, #23]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d136      	bne.n	800e3e2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6a1b      	ldr	r3, [r3, #32]
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800e37c:	7bfb      	ldrb	r3, [r7, #15]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d102      	bne.n	800e388 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e382:	2304      	movs	r3, #4
 800e384:	75fb      	strb	r3, [r7, #23]
 800e386:	e031      	b.n	800e3ec <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6a1b      	ldr	r3, [r3, #32]
 800e38c:	330b      	adds	r3, #11
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e394:	73bb      	strb	r3, [r7, #14]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	7bba      	ldrb	r2, [r7, #14]
 800e39a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800e39c:	7bfb      	ldrb	r3, [r7, #15]
 800e39e:	2be5      	cmp	r3, #229	; 0xe5
 800e3a0:	d011      	beq.n	800e3c6 <dir_read+0x7e>
 800e3a2:	7bfb      	ldrb	r3, [r7, #15]
 800e3a4:	2b2e      	cmp	r3, #46	; 0x2e
 800e3a6:	d00e      	beq.n	800e3c6 <dir_read+0x7e>
 800e3a8:	7bbb      	ldrb	r3, [r7, #14]
 800e3aa:	2b0f      	cmp	r3, #15
 800e3ac:	d00b      	beq.n	800e3c6 <dir_read+0x7e>
 800e3ae:	7bbb      	ldrb	r3, [r7, #14]
 800e3b0:	f023 0320 	bic.w	r3, r3, #32
 800e3b4:	2b08      	cmp	r3, #8
 800e3b6:	bf0c      	ite	eq
 800e3b8:	2301      	moveq	r3, #1
 800e3ba:	2300      	movne	r3, #0
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	461a      	mov	r2, r3
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d00f      	beq.n	800e3e6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f7ff fe72 	bl	800e0b2 <dir_next>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e3d2:	7dfb      	ldrb	r3, [r7, #23]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d108      	bne.n	800e3ea <dir_read+0xa2>
	while (dp->sect) {
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	69db      	ldr	r3, [r3, #28]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d1be      	bne.n	800e35e <dir_read+0x16>
 800e3e0:	e004      	b.n	800e3ec <dir_read+0xa4>
		if (res != FR_OK) break;
 800e3e2:	bf00      	nop
 800e3e4:	e002      	b.n	800e3ec <dir_read+0xa4>
				break;
 800e3e6:	bf00      	nop
 800e3e8:	e000      	b.n	800e3ec <dir_read+0xa4>
		if (res != FR_OK) break;
 800e3ea:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e3ec:	7dfb      	ldrb	r3, [r7, #23]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d002      	beq.n	800e3f8 <dir_read+0xb0>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	61da      	str	r2, [r3, #28]
	return res;
 800e3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3718      	adds	r7, #24
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}

0800e402 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e402:	b580      	push	{r7, lr}
 800e404:	b086      	sub	sp, #24
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e410:	2100      	movs	r1, #0
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f7ff fdd2 	bl	800dfbc <dir_sdi>
 800e418:	4603      	mov	r3, r0
 800e41a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e41c:	7dfb      	ldrb	r3, [r7, #23]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <dir_find+0x24>
 800e422:	7dfb      	ldrb	r3, [r7, #23]
 800e424:	e03e      	b.n	800e4a4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	69db      	ldr	r3, [r3, #28]
 800e42a:	4619      	mov	r1, r3
 800e42c:	6938      	ldr	r0, [r7, #16]
 800e42e:	f7ff fa45 	bl	800d8bc <move_window>
 800e432:	4603      	mov	r3, r0
 800e434:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e436:	7dfb      	ldrb	r3, [r7, #23]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d12f      	bne.n	800e49c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6a1b      	ldr	r3, [r3, #32]
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e444:	7bfb      	ldrb	r3, [r7, #15]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d102      	bne.n	800e450 <dir_find+0x4e>
 800e44a:	2304      	movs	r3, #4
 800e44c:	75fb      	strb	r3, [r7, #23]
 800e44e:	e028      	b.n	800e4a2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6a1b      	ldr	r3, [r3, #32]
 800e454:	330b      	adds	r3, #11
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e45c:	b2da      	uxtb	r2, r3
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6a1b      	ldr	r3, [r3, #32]
 800e466:	330b      	adds	r3, #11
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	f003 0308 	and.w	r3, r3, #8
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d10a      	bne.n	800e488 <dir_find+0x86>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6a18      	ldr	r0, [r3, #32]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	3324      	adds	r3, #36	; 0x24
 800e47a:	220b      	movs	r2, #11
 800e47c:	4619      	mov	r1, r3
 800e47e:	f7fe fff9 	bl	800d474 <mem_cmp>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d00b      	beq.n	800e4a0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e488:	2100      	movs	r1, #0
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f7ff fe11 	bl	800e0b2 <dir_next>
 800e490:	4603      	mov	r3, r0
 800e492:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e494:	7dfb      	ldrb	r3, [r7, #23]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d0c5      	beq.n	800e426 <dir_find+0x24>
 800e49a:	e002      	b.n	800e4a2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e49c:	bf00      	nop
 800e49e:	e000      	b.n	800e4a2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e4a0:	bf00      	nop

	return res;
 800e4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3718      	adds	r7, #24
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b084      	sub	sp, #16
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e4ba:	2101      	movs	r1, #1
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f7ff febd 	bl	800e23c <dir_alloc>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e4c6:	7bfb      	ldrb	r3, [r7, #15]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d11c      	bne.n	800e506 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	69db      	ldr	r3, [r3, #28]
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	68b8      	ldr	r0, [r7, #8]
 800e4d4:	f7ff f9f2 	bl	800d8bc <move_window>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e4dc:	7bfb      	ldrb	r3, [r7, #15]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d111      	bne.n	800e506 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6a1b      	ldr	r3, [r3, #32]
 800e4e6:	2220      	movs	r2, #32
 800e4e8:	2100      	movs	r1, #0
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7fe ffa7 	bl	800d43e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6a18      	ldr	r0, [r3, #32]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	3324      	adds	r3, #36	; 0x24
 800e4f8:	220b      	movs	r2, #11
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	f7fe ff7e 	bl	800d3fc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	2201      	movs	r2, #1
 800e504:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e506:	7bfb      	ldrb	r3, [r7, #15]
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3710      	adds	r7, #16
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b086      	sub	sp, #24
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	2200      	movs	r2, #0
 800e51e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	69db      	ldr	r3, [r3, #28]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d04e      	beq.n	800e5c6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800e528:	2300      	movs	r3, #0
 800e52a:	613b      	str	r3, [r7, #16]
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800e530:	e021      	b.n	800e576 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6a1a      	ldr	r2, [r3, #32]
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	1c59      	adds	r1, r3, #1
 800e53a:	6179      	str	r1, [r7, #20]
 800e53c:	4413      	add	r3, r2
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e542:	7bfb      	ldrb	r3, [r7, #15]
 800e544:	2b20      	cmp	r3, #32
 800e546:	d100      	bne.n	800e54a <get_fileinfo+0x3a>
 800e548:	e015      	b.n	800e576 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e54a:	7bfb      	ldrb	r3, [r7, #15]
 800e54c:	2b05      	cmp	r3, #5
 800e54e:	d101      	bne.n	800e554 <get_fileinfo+0x44>
 800e550:	23e5      	movs	r3, #229	; 0xe5
 800e552:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	2b09      	cmp	r3, #9
 800e558:	d106      	bne.n	800e568 <get_fileinfo+0x58>
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	1c5a      	adds	r2, r3, #1
 800e55e:	613a      	str	r2, [r7, #16]
 800e560:	683a      	ldr	r2, [r7, #0]
 800e562:	4413      	add	r3, r2
 800e564:	222e      	movs	r2, #46	; 0x2e
 800e566:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	1c5a      	adds	r2, r3, #1
 800e56c:	613a      	str	r2, [r7, #16]
 800e56e:	683a      	ldr	r2, [r7, #0]
 800e570:	4413      	add	r3, r2
 800e572:	7bfa      	ldrb	r2, [r7, #15]
 800e574:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	2b0a      	cmp	r3, #10
 800e57a:	d9da      	bls.n	800e532 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800e57c:	683a      	ldr	r2, [r7, #0]
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	4413      	add	r3, r2
 800e582:	3309      	adds	r3, #9
 800e584:	2200      	movs	r2, #0
 800e586:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6a1b      	ldr	r3, [r3, #32]
 800e58c:	7ada      	ldrb	r2, [r3, #11]
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6a1b      	ldr	r3, [r3, #32]
 800e596:	331c      	adds	r3, #28
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fe fec5 	bl	800d328 <ld_dword>
 800e59e:	4602      	mov	r2, r0
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6a1b      	ldr	r3, [r3, #32]
 800e5a8:	3316      	adds	r3, #22
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fe febc 	bl	800d328 <ld_dword>
 800e5b0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	b29a      	uxth	r2, r3
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	80da      	strh	r2, [r3, #6]
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	0c1b      	lsrs	r3, r3, #16
 800e5be:	b29a      	uxth	r2, r3
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	809a      	strh	r2, [r3, #4]
 800e5c4:	e000      	b.n	800e5c8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e5c6:	bf00      	nop
}
 800e5c8:	3718      	adds	r7, #24
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
	...

0800e5d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b088      	sub	sp, #32
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	60fb      	str	r3, [r7, #12]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	3324      	adds	r3, #36	; 0x24
 800e5e4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e5e6:	220b      	movs	r2, #11
 800e5e8:	2120      	movs	r1, #32
 800e5ea:	68b8      	ldr	r0, [r7, #8]
 800e5ec:	f7fe ff27 	bl	800d43e <mem_set>
	si = i = 0; ni = 8;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	613b      	str	r3, [r7, #16]
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	61fb      	str	r3, [r7, #28]
 800e5f8:	2308      	movs	r3, #8
 800e5fa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e5fc:	69fb      	ldr	r3, [r7, #28]
 800e5fe:	1c5a      	adds	r2, r3, #1
 800e600:	61fa      	str	r2, [r7, #28]
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	4413      	add	r3, r2
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e60a:	7efb      	ldrb	r3, [r7, #27]
 800e60c:	2b20      	cmp	r3, #32
 800e60e:	d94e      	bls.n	800e6ae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e610:	7efb      	ldrb	r3, [r7, #27]
 800e612:	2b2f      	cmp	r3, #47	; 0x2f
 800e614:	d006      	beq.n	800e624 <create_name+0x54>
 800e616:	7efb      	ldrb	r3, [r7, #27]
 800e618:	2b5c      	cmp	r3, #92	; 0x5c
 800e61a:	d110      	bne.n	800e63e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e61c:	e002      	b.n	800e624 <create_name+0x54>
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	3301      	adds	r3, #1
 800e622:	61fb      	str	r3, [r7, #28]
 800e624:	68fa      	ldr	r2, [r7, #12]
 800e626:	69fb      	ldr	r3, [r7, #28]
 800e628:	4413      	add	r3, r2
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	2b2f      	cmp	r3, #47	; 0x2f
 800e62e:	d0f6      	beq.n	800e61e <create_name+0x4e>
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	69fb      	ldr	r3, [r7, #28]
 800e634:	4413      	add	r3, r2
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	2b5c      	cmp	r3, #92	; 0x5c
 800e63a:	d0f0      	beq.n	800e61e <create_name+0x4e>
			break;
 800e63c:	e038      	b.n	800e6b0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e63e:	7efb      	ldrb	r3, [r7, #27]
 800e640:	2b2e      	cmp	r3, #46	; 0x2e
 800e642:	d003      	beq.n	800e64c <create_name+0x7c>
 800e644:	693a      	ldr	r2, [r7, #16]
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	429a      	cmp	r2, r3
 800e64a:	d30c      	bcc.n	800e666 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	2b0b      	cmp	r3, #11
 800e650:	d002      	beq.n	800e658 <create_name+0x88>
 800e652:	7efb      	ldrb	r3, [r7, #27]
 800e654:	2b2e      	cmp	r3, #46	; 0x2e
 800e656:	d001      	beq.n	800e65c <create_name+0x8c>
 800e658:	2306      	movs	r3, #6
 800e65a:	e044      	b.n	800e6e6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e65c:	2308      	movs	r3, #8
 800e65e:	613b      	str	r3, [r7, #16]
 800e660:	230b      	movs	r3, #11
 800e662:	617b      	str	r3, [r7, #20]
			continue;
 800e664:	e022      	b.n	800e6ac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e666:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	da04      	bge.n	800e678 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e66e:	7efb      	ldrb	r3, [r7, #27]
 800e670:	3b80      	subs	r3, #128	; 0x80
 800e672:	4a1f      	ldr	r2, [pc, #124]	; (800e6f0 <create_name+0x120>)
 800e674:	5cd3      	ldrb	r3, [r2, r3]
 800e676:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e678:	7efb      	ldrb	r3, [r7, #27]
 800e67a:	4619      	mov	r1, r3
 800e67c:	481d      	ldr	r0, [pc, #116]	; (800e6f4 <create_name+0x124>)
 800e67e:	f7fe ff20 	bl	800d4c2 <chk_chr>
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	d001      	beq.n	800e68c <create_name+0xbc>
 800e688:	2306      	movs	r3, #6
 800e68a:	e02c      	b.n	800e6e6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e68c:	7efb      	ldrb	r3, [r7, #27]
 800e68e:	2b60      	cmp	r3, #96	; 0x60
 800e690:	d905      	bls.n	800e69e <create_name+0xce>
 800e692:	7efb      	ldrb	r3, [r7, #27]
 800e694:	2b7a      	cmp	r3, #122	; 0x7a
 800e696:	d802      	bhi.n	800e69e <create_name+0xce>
 800e698:	7efb      	ldrb	r3, [r7, #27]
 800e69a:	3b20      	subs	r3, #32
 800e69c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	1c5a      	adds	r2, r3, #1
 800e6a2:	613a      	str	r2, [r7, #16]
 800e6a4:	68ba      	ldr	r2, [r7, #8]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	7efa      	ldrb	r2, [r7, #27]
 800e6aa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e6ac:	e7a6      	b.n	800e5fc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e6ae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	441a      	add	r2, r3
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d101      	bne.n	800e6c4 <create_name+0xf4>
 800e6c0:	2306      	movs	r3, #6
 800e6c2:	e010      	b.n	800e6e6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	2be5      	cmp	r3, #229	; 0xe5
 800e6ca:	d102      	bne.n	800e6d2 <create_name+0x102>
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	2205      	movs	r2, #5
 800e6d0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e6d2:	7efb      	ldrb	r3, [r7, #27]
 800e6d4:	2b20      	cmp	r3, #32
 800e6d6:	d801      	bhi.n	800e6dc <create_name+0x10c>
 800e6d8:	2204      	movs	r2, #4
 800e6da:	e000      	b.n	800e6de <create_name+0x10e>
 800e6dc:	2200      	movs	r2, #0
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	330b      	adds	r3, #11
 800e6e2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e6e4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3720      	adds	r7, #32
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	08018cfc 	.word	0x08018cfc
 800e6f4:	08018b7c 	.word	0x08018b7c

0800e6f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b086      	sub	sp, #24
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e70c:	e002      	b.n	800e714 <follow_path+0x1c>
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	3301      	adds	r3, #1
 800e712:	603b      	str	r3, [r7, #0]
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	2b2f      	cmp	r3, #47	; 0x2f
 800e71a:	d0f8      	beq.n	800e70e <follow_path+0x16>
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	2b5c      	cmp	r3, #92	; 0x5c
 800e722:	d0f4      	beq.n	800e70e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	2200      	movs	r2, #0
 800e728:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	2b1f      	cmp	r3, #31
 800e730:	d80a      	bhi.n	800e748 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2280      	movs	r2, #128	; 0x80
 800e736:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e73a:	2100      	movs	r1, #0
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f7ff fc3d 	bl	800dfbc <dir_sdi>
 800e742:	4603      	mov	r3, r0
 800e744:	75fb      	strb	r3, [r7, #23]
 800e746:	e043      	b.n	800e7d0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e748:	463b      	mov	r3, r7
 800e74a:	4619      	mov	r1, r3
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f7ff ff3f 	bl	800e5d0 <create_name>
 800e752:	4603      	mov	r3, r0
 800e754:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e756:	7dfb      	ldrb	r3, [r7, #23]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d134      	bne.n	800e7c6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f7ff fe50 	bl	800e402 <dir_find>
 800e762:	4603      	mov	r3, r0
 800e764:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e76c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e76e:	7dfb      	ldrb	r3, [r7, #23]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d00a      	beq.n	800e78a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e774:	7dfb      	ldrb	r3, [r7, #23]
 800e776:	2b04      	cmp	r3, #4
 800e778:	d127      	bne.n	800e7ca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e77a:	7afb      	ldrb	r3, [r7, #11]
 800e77c:	f003 0304 	and.w	r3, r3, #4
 800e780:	2b00      	cmp	r3, #0
 800e782:	d122      	bne.n	800e7ca <follow_path+0xd2>
 800e784:	2305      	movs	r3, #5
 800e786:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e788:	e01f      	b.n	800e7ca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e78a:	7afb      	ldrb	r3, [r7, #11]
 800e78c:	f003 0304 	and.w	r3, r3, #4
 800e790:	2b00      	cmp	r3, #0
 800e792:	d11c      	bne.n	800e7ce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	799b      	ldrb	r3, [r3, #6]
 800e798:	f003 0310 	and.w	r3, r3, #16
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d102      	bne.n	800e7a6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e7a0:	2305      	movs	r3, #5
 800e7a2:	75fb      	strb	r3, [r7, #23]
 800e7a4:	e014      	b.n	800e7d0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	695b      	ldr	r3, [r3, #20]
 800e7b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7b4:	4413      	add	r3, r2
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f7ff fd86 	bl	800e2ca <ld_clust>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e7c4:	e7c0      	b.n	800e748 <follow_path+0x50>
			if (res != FR_OK) break;
 800e7c6:	bf00      	nop
 800e7c8:	e002      	b.n	800e7d0 <follow_path+0xd8>
				break;
 800e7ca:	bf00      	nop
 800e7cc:	e000      	b.n	800e7d0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e7ce:	bf00      	nop
			}
		}
	}

	return res;
 800e7d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3718      	adds	r7, #24
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}

0800e7da <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e7da:	b480      	push	{r7}
 800e7dc:	b087      	sub	sp, #28
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e7e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7e6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d031      	beq.n	800e854 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	617b      	str	r3, [r7, #20]
 800e7f6:	e002      	b.n	800e7fe <get_ldnumber+0x24>
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	617b      	str	r3, [r7, #20]
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	2b20      	cmp	r3, #32
 800e804:	d903      	bls.n	800e80e <get_ldnumber+0x34>
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	2b3a      	cmp	r3, #58	; 0x3a
 800e80c:	d1f4      	bne.n	800e7f8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	2b3a      	cmp	r3, #58	; 0x3a
 800e814:	d11c      	bne.n	800e850 <get_ldnumber+0x76>
			tp = *path;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	1c5a      	adds	r2, r3, #1
 800e820:	60fa      	str	r2, [r7, #12]
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	3b30      	subs	r3, #48	; 0x30
 800e826:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	2b09      	cmp	r3, #9
 800e82c:	d80e      	bhi.n	800e84c <get_ldnumber+0x72>
 800e82e:	68fa      	ldr	r2, [r7, #12]
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	429a      	cmp	r2, r3
 800e834:	d10a      	bne.n	800e84c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d107      	bne.n	800e84c <get_ldnumber+0x72>
					vol = (int)i;
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	3301      	adds	r3, #1
 800e844:	617b      	str	r3, [r7, #20]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	697a      	ldr	r2, [r7, #20]
 800e84a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	e002      	b.n	800e856 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e850:	2300      	movs	r3, #0
 800e852:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e854:	693b      	ldr	r3, [r7, #16]
}
 800e856:	4618      	mov	r0, r3
 800e858:	371c      	adds	r7, #28
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr
	...

0800e864 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2200      	movs	r2, #0
 800e872:	70da      	strb	r2, [r3, #3]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e87a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e87c:	6839      	ldr	r1, [r7, #0]
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f7ff f81c 	bl	800d8bc <move_window>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d001      	beq.n	800e88e <check_fs+0x2a>
 800e88a:	2304      	movs	r3, #4
 800e88c:	e038      	b.n	800e900 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	3334      	adds	r3, #52	; 0x34
 800e892:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e896:	4618      	mov	r0, r3
 800e898:	f7fe fd2e 	bl	800d2f8 <ld_word>
 800e89c:	4603      	mov	r3, r0
 800e89e:	461a      	mov	r2, r3
 800e8a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d001      	beq.n	800e8ac <check_fs+0x48>
 800e8a8:	2303      	movs	r3, #3
 800e8aa:	e029      	b.n	800e900 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8b2:	2be9      	cmp	r3, #233	; 0xe9
 800e8b4:	d009      	beq.n	800e8ca <check_fs+0x66>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8bc:	2beb      	cmp	r3, #235	; 0xeb
 800e8be:	d11e      	bne.n	800e8fe <check_fs+0x9a>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e8c6:	2b90      	cmp	r3, #144	; 0x90
 800e8c8:	d119      	bne.n	800e8fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	3334      	adds	r3, #52	; 0x34
 800e8ce:	3336      	adds	r3, #54	; 0x36
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fe fd29 	bl	800d328 <ld_dword>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e8dc:	4a0a      	ldr	r2, [pc, #40]	; (800e908 <check_fs+0xa4>)
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	d101      	bne.n	800e8e6 <check_fs+0x82>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	e00c      	b.n	800e900 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	3334      	adds	r3, #52	; 0x34
 800e8ea:	3352      	adds	r3, #82	; 0x52
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7fe fd1b 	bl	800d328 <ld_dword>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	4a05      	ldr	r2, [pc, #20]	; (800e90c <check_fs+0xa8>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d101      	bne.n	800e8fe <check_fs+0x9a>
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	e000      	b.n	800e900 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e8fe:	2302      	movs	r3, #2
}
 800e900:	4618      	mov	r0, r3
 800e902:	3708      	adds	r7, #8
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	00544146 	.word	0x00544146
 800e90c:	33544146 	.word	0x33544146

0800e910 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b096      	sub	sp, #88	; 0x58
 800e914:	af00      	add	r7, sp, #0
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	60b9      	str	r1, [r7, #8]
 800e91a:	4613      	mov	r3, r2
 800e91c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	2200      	movs	r2, #0
 800e922:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e924:	68f8      	ldr	r0, [r7, #12]
 800e926:	f7ff ff58 	bl	800e7da <get_ldnumber>
 800e92a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e92e:	2b00      	cmp	r3, #0
 800e930:	da01      	bge.n	800e936 <find_volume+0x26>
 800e932:	230b      	movs	r3, #11
 800e934:	e236      	b.n	800eda4 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e936:	4aac      	ldr	r2, [pc, #688]	; (800ebe8 <find_volume+0x2d8>)
 800e938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e93a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e93e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e942:	2b00      	cmp	r3, #0
 800e944:	d101      	bne.n	800e94a <find_volume+0x3a>
 800e946:	230c      	movs	r3, #12
 800e948:	e22c      	b.n	800eda4 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800e94a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e94c:	f7fe fdd4 	bl	800d4f8 <lock_fs>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d101      	bne.n	800e95a <find_volume+0x4a>
 800e956:	230f      	movs	r3, #15
 800e958:	e224      	b.n	800eda4 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e95e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e960:	79fb      	ldrb	r3, [r7, #7]
 800e962:	f023 0301 	bic.w	r3, r3, #1
 800e966:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d01a      	beq.n	800e9a6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800e970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e972:	785b      	ldrb	r3, [r3, #1]
 800e974:	4618      	mov	r0, r3
 800e976:	f7fe fc21 	bl	800d1bc <disk_status>
 800e97a:	4603      	mov	r3, r0
 800e97c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e980:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e984:	f003 0301 	and.w	r3, r3, #1
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d10c      	bne.n	800e9a6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e98c:	79fb      	ldrb	r3, [r7, #7]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d007      	beq.n	800e9a2 <find_volume+0x92>
 800e992:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e996:	f003 0304 	and.w	r3, r3, #4
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d001      	beq.n	800e9a2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800e99e:	230a      	movs	r3, #10
 800e9a0:	e200      	b.n	800eda4 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	e1fe      	b.n	800eda4 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9ae:	b2da      	uxtb	r2, r3
 800e9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b6:	785b      	ldrb	r3, [r3, #1]
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7fe fc19 	bl	800d1f0 <disk_initialize>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e9c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9c8:	f003 0301 	and.w	r3, r3, #1
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d001      	beq.n	800e9d4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e9d0:	2303      	movs	r3, #3
 800e9d2:	e1e7      	b.n	800eda4 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e9d4:	79fb      	ldrb	r3, [r7, #7]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d007      	beq.n	800e9ea <find_volume+0xda>
 800e9da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9de:	f003 0304 	and.w	r3, r3, #4
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d001      	beq.n	800e9ea <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800e9e6:	230a      	movs	r3, #10
 800e9e8:	e1dc      	b.n	800eda4 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e9ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e9f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e9f2:	f7ff ff37 	bl	800e864 <check_fs>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e9fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ea00:	2b02      	cmp	r3, #2
 800ea02:	d14b      	bne.n	800ea9c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ea04:	2300      	movs	r3, #0
 800ea06:	643b      	str	r3, [r7, #64]	; 0x40
 800ea08:	e01f      	b.n	800ea4a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ea0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ea10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea12:	011b      	lsls	r3, r3, #4
 800ea14:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ea18:	4413      	add	r3, r2
 800ea1a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ea1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1e:	3304      	adds	r3, #4
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d006      	beq.n	800ea34 <find_volume+0x124>
 800ea26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea28:	3308      	adds	r3, #8
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe fc7c 	bl	800d328 <ld_dword>
 800ea30:	4602      	mov	r2, r0
 800ea32:	e000      	b.n	800ea36 <find_volume+0x126>
 800ea34:	2200      	movs	r2, #0
 800ea36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ea3e:	440b      	add	r3, r1
 800ea40:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ea44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea46:	3301      	adds	r3, #1
 800ea48:	643b      	str	r3, [r7, #64]	; 0x40
 800ea4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea4c:	2b03      	cmp	r3, #3
 800ea4e:	d9dc      	bls.n	800ea0a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ea50:	2300      	movs	r3, #0
 800ea52:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ea54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d002      	beq.n	800ea60 <find_volume+0x150>
 800ea5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea5c:	3b01      	subs	r3, #1
 800ea5e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ea60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ea68:	4413      	add	r3, r2
 800ea6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ea6e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ea70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d005      	beq.n	800ea82 <find_volume+0x172>
 800ea76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ea78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea7a:	f7ff fef3 	bl	800e864 <check_fs>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	e000      	b.n	800ea84 <find_volume+0x174>
 800ea82:	2303      	movs	r3, #3
 800ea84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ea88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d905      	bls.n	800ea9c <find_volume+0x18c>
 800ea90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea92:	3301      	adds	r3, #1
 800ea94:	643b      	str	r3, [r7, #64]	; 0x40
 800ea96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea98:	2b03      	cmp	r3, #3
 800ea9a:	d9e1      	bls.n	800ea60 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ea9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eaa0:	2b04      	cmp	r3, #4
 800eaa2:	d101      	bne.n	800eaa8 <find_volume+0x198>
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	e17d      	b.n	800eda4 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800eaa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d901      	bls.n	800eab4 <find_volume+0x1a4>
 800eab0:	230d      	movs	r3, #13
 800eab2:	e177      	b.n	800eda4 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800eab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab6:	3334      	adds	r3, #52	; 0x34
 800eab8:	330b      	adds	r3, #11
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fe fc1c 	bl	800d2f8 <ld_word>
 800eac0:	4603      	mov	r3, r0
 800eac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eac6:	d001      	beq.n	800eacc <find_volume+0x1bc>
 800eac8:	230d      	movs	r3, #13
 800eaca:	e16b      	b.n	800eda4 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800eacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eace:	3334      	adds	r3, #52	; 0x34
 800ead0:	3316      	adds	r3, #22
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7fe fc10 	bl	800d2f8 <ld_word>
 800ead8:	4603      	mov	r3, r0
 800eada:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800eadc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d106      	bne.n	800eaf0 <find_volume+0x1e0>
 800eae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae4:	3334      	adds	r3, #52	; 0x34
 800eae6:	3324      	adds	r3, #36	; 0x24
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7fe fc1d 	bl	800d328 <ld_dword>
 800eaee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800eaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eaf4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800eaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800eafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eafe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800eb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb02:	789b      	ldrb	r3, [r3, #2]
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d005      	beq.n	800eb14 <find_volume+0x204>
 800eb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb0a:	789b      	ldrb	r3, [r3, #2]
 800eb0c:	2b02      	cmp	r3, #2
 800eb0e:	d001      	beq.n	800eb14 <find_volume+0x204>
 800eb10:	230d      	movs	r3, #13
 800eb12:	e147      	b.n	800eda4 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800eb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb16:	789b      	ldrb	r3, [r3, #2]
 800eb18:	461a      	mov	r2, r3
 800eb1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb1c:	fb02 f303 	mul.w	r3, r2, r3
 800eb20:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800eb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb28:	b29a      	uxth	r2, r3
 800eb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800eb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb30:	895b      	ldrh	r3, [r3, #10]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d008      	beq.n	800eb48 <find_volume+0x238>
 800eb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb38:	895b      	ldrh	r3, [r3, #10]
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3e:	895b      	ldrh	r3, [r3, #10]
 800eb40:	3b01      	subs	r3, #1
 800eb42:	4013      	ands	r3, r2
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d001      	beq.n	800eb4c <find_volume+0x23c>
 800eb48:	230d      	movs	r3, #13
 800eb4a:	e12b      	b.n	800eda4 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800eb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb4e:	3334      	adds	r3, #52	; 0x34
 800eb50:	3311      	adds	r3, #17
 800eb52:	4618      	mov	r0, r3
 800eb54:	f7fe fbd0 	bl	800d2f8 <ld_word>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb5e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800eb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb62:	891b      	ldrh	r3, [r3, #8]
 800eb64:	f003 030f 	and.w	r3, r3, #15
 800eb68:	b29b      	uxth	r3, r3
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d001      	beq.n	800eb72 <find_volume+0x262>
 800eb6e:	230d      	movs	r3, #13
 800eb70:	e118      	b.n	800eda4 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800eb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb74:	3334      	adds	r3, #52	; 0x34
 800eb76:	3313      	adds	r3, #19
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fe fbbd 	bl	800d2f8 <ld_word>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800eb82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d106      	bne.n	800eb96 <find_volume+0x286>
 800eb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb8a:	3334      	adds	r3, #52	; 0x34
 800eb8c:	3320      	adds	r3, #32
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7fe fbca 	bl	800d328 <ld_dword>
 800eb94:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800eb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb98:	3334      	adds	r3, #52	; 0x34
 800eb9a:	330e      	adds	r3, #14
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7fe fbab 	bl	800d2f8 <ld_word>
 800eba2:	4603      	mov	r3, r0
 800eba4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800eba6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d101      	bne.n	800ebb0 <find_volume+0x2a0>
 800ebac:	230d      	movs	r3, #13
 800ebae:	e0f9      	b.n	800eda4 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ebb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ebb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebb4:	4413      	add	r3, r2
 800ebb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebb8:	8912      	ldrh	r2, [r2, #8]
 800ebba:	0912      	lsrs	r2, r2, #4
 800ebbc:	b292      	uxth	r2, r2
 800ebbe:	4413      	add	r3, r2
 800ebc0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ebc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d201      	bcs.n	800ebce <find_volume+0x2be>
 800ebca:	230d      	movs	r3, #13
 800ebcc:	e0ea      	b.n	800eda4 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ebce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd2:	1ad3      	subs	r3, r2, r3
 800ebd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebd6:	8952      	ldrh	r2, [r2, #10]
 800ebd8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ebdc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ebde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d103      	bne.n	800ebec <find_volume+0x2dc>
 800ebe4:	230d      	movs	r3, #13
 800ebe6:	e0dd      	b.n	800eda4 <find_volume+0x494>
 800ebe8:	20000594 	.word	0x20000594
		fmt = FS_FAT32;
 800ebec:	2303      	movs	r3, #3
 800ebee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ebf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d802      	bhi.n	800ec02 <find_volume+0x2f2>
 800ebfc:	2302      	movs	r3, #2
 800ebfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ec02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec04:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ec08:	4293      	cmp	r3, r2
 800ec0a:	d802      	bhi.n	800ec12 <find_volume+0x302>
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ec12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec14:	1c9a      	adds	r2, r3, #2
 800ec16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec18:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ec1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec1e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ec20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ec22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec24:	441a      	add	r2, r3
 800ec26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec28:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ec2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2e:	441a      	add	r2, r3
 800ec30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec32:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ec34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec38:	2b03      	cmp	r3, #3
 800ec3a:	d11e      	bne.n	800ec7a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ec3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3e:	3334      	adds	r3, #52	; 0x34
 800ec40:	332a      	adds	r3, #42	; 0x2a
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7fe fb58 	bl	800d2f8 <ld_word>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d001      	beq.n	800ec52 <find_volume+0x342>
 800ec4e:	230d      	movs	r3, #13
 800ec50:	e0a8      	b.n	800eda4 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ec52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec54:	891b      	ldrh	r3, [r3, #8]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d001      	beq.n	800ec5e <find_volume+0x34e>
 800ec5a:	230d      	movs	r3, #13
 800ec5c:	e0a2      	b.n	800eda4 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ec5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec60:	3334      	adds	r3, #52	; 0x34
 800ec62:	332c      	adds	r3, #44	; 0x2c
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7fe fb5f 	bl	800d328 <ld_dword>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec6e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ec70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec72:	699b      	ldr	r3, [r3, #24]
 800ec74:	009b      	lsls	r3, r3, #2
 800ec76:	647b      	str	r3, [r7, #68]	; 0x44
 800ec78:	e01f      	b.n	800ecba <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ec7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec7c:	891b      	ldrh	r3, [r3, #8]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d101      	bne.n	800ec86 <find_volume+0x376>
 800ec82:	230d      	movs	r3, #13
 800ec84:	e08e      	b.n	800eda4 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ec86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec8c:	441a      	add	r2, r3
 800ec8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec90:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ec92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec96:	2b02      	cmp	r3, #2
 800ec98:	d103      	bne.n	800eca2 <find_volume+0x392>
 800ec9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9c:	699b      	ldr	r3, [r3, #24]
 800ec9e:	005b      	lsls	r3, r3, #1
 800eca0:	e00a      	b.n	800ecb8 <find_volume+0x3a8>
 800eca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca4:	699a      	ldr	r2, [r3, #24]
 800eca6:	4613      	mov	r3, r2
 800eca8:	005b      	lsls	r3, r3, #1
 800ecaa:	4413      	add	r3, r2
 800ecac:	085a      	lsrs	r2, r3, #1
 800ecae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb0:	699b      	ldr	r3, [r3, #24]
 800ecb2:	f003 0301 	and.w	r3, r3, #1
 800ecb6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ecb8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ecba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecbc:	69da      	ldr	r2, [r3, #28]
 800ecbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecc0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ecc4:	0a5b      	lsrs	r3, r3, #9
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d201      	bcs.n	800ecce <find_volume+0x3be>
 800ecca:	230d      	movs	r3, #13
 800eccc:	e06a      	b.n	800eda4 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ecce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ecd4:	615a      	str	r2, [r3, #20]
 800ecd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd8:	695a      	ldr	r2, [r3, #20]
 800ecda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecdc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ecde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece0:	2280      	movs	r2, #128	; 0x80
 800ece2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ece4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ece8:	2b03      	cmp	r3, #3
 800ecea:	d149      	bne.n	800ed80 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ecec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecee:	3334      	adds	r3, #52	; 0x34
 800ecf0:	3330      	adds	r3, #48	; 0x30
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7fe fb00 	bl	800d2f8 <ld_word>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b01      	cmp	r3, #1
 800ecfc:	d140      	bne.n	800ed80 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ecfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed00:	3301      	adds	r3, #1
 800ed02:	4619      	mov	r1, r3
 800ed04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed06:	f7fe fdd9 	bl	800d8bc <move_window>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d137      	bne.n	800ed80 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800ed10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed12:	2200      	movs	r2, #0
 800ed14:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ed16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed18:	3334      	adds	r3, #52	; 0x34
 800ed1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7fe faea 	bl	800d2f8 <ld_word>
 800ed24:	4603      	mov	r3, r0
 800ed26:	461a      	mov	r2, r3
 800ed28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d127      	bne.n	800ed80 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ed30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed32:	3334      	adds	r3, #52	; 0x34
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7fe faf7 	bl	800d328 <ld_dword>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	4a1b      	ldr	r2, [pc, #108]	; (800edac <find_volume+0x49c>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d11e      	bne.n	800ed80 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ed42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed44:	3334      	adds	r3, #52	; 0x34
 800ed46:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fe faec 	bl	800d328 <ld_dword>
 800ed50:	4603      	mov	r3, r0
 800ed52:	4a17      	ldr	r2, [pc, #92]	; (800edb0 <find_volume+0x4a0>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d113      	bne.n	800ed80 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ed58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed5a:	3334      	adds	r3, #52	; 0x34
 800ed5c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7fe fae1 	bl	800d328 <ld_dword>
 800ed66:	4602      	mov	r2, r0
 800ed68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ed6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6e:	3334      	adds	r3, #52	; 0x34
 800ed70:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7fe fad7 	bl	800d328 <ld_dword>
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ed80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed82:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ed86:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ed88:	4b0a      	ldr	r3, [pc, #40]	; (800edb4 <find_volume+0x4a4>)
 800ed8a:	881b      	ldrh	r3, [r3, #0]
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	b29a      	uxth	r2, r3
 800ed90:	4b08      	ldr	r3, [pc, #32]	; (800edb4 <find_volume+0x4a4>)
 800ed92:	801a      	strh	r2, [r3, #0]
 800ed94:	4b07      	ldr	r3, [pc, #28]	; (800edb4 <find_volume+0x4a4>)
 800ed96:	881a      	ldrh	r2, [r3, #0]
 800ed98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ed9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed9e:	f7fe fd25 	bl	800d7ec <clear_lock>
#endif
	return FR_OK;
 800eda2:	2300      	movs	r3, #0
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3758      	adds	r7, #88	; 0x58
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	41615252 	.word	0x41615252
 800edb0:	61417272 	.word	0x61417272
 800edb4:	20000598 	.word	0x20000598

0800edb8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b084      	sub	sp, #16
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800edc2:	2309      	movs	r3, #9
 800edc4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d02e      	beq.n	800ee2a <validate+0x72>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d02a      	beq.n	800ee2a <validate+0x72>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d025      	beq.n	800ee2a <validate+0x72>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	889a      	ldrh	r2, [r3, #4]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	88db      	ldrh	r3, [r3, #6]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d11e      	bne.n	800ee2a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7fe fb81 	bl	800d4f8 <lock_fs>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d014      	beq.n	800ee26 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	785b      	ldrb	r3, [r3, #1]
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7fe f9da 	bl	800d1bc <disk_status>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	f003 0301 	and.w	r3, r3, #1
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d102      	bne.n	800ee18 <validate+0x60>
				res = FR_OK;
 800ee12:	2300      	movs	r3, #0
 800ee14:	73fb      	strb	r3, [r7, #15]
 800ee16:	e008      	b.n	800ee2a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	2100      	movs	r1, #0
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fe fb80 	bl	800d524 <unlock_fs>
 800ee24:	e001      	b.n	800ee2a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800ee26:	230f      	movs	r3, #15
 800ee28:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ee2a:	7bfb      	ldrb	r3, [r7, #15]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d102      	bne.n	800ee36 <validate+0x7e>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	e000      	b.n	800ee38 <validate+0x80>
 800ee36:	2300      	movs	r3, #0
 800ee38:	683a      	ldr	r2, [r7, #0]
 800ee3a:	6013      	str	r3, [r2, #0]
	return res;
 800ee3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
	...

0800ee48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b088      	sub	sp, #32
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	60b9      	str	r1, [r7, #8]
 800ee52:	4613      	mov	r3, r2
 800ee54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ee5a:	f107 0310 	add.w	r3, r7, #16
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7ff fcbb 	bl	800e7da <get_ldnumber>
 800ee64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	da01      	bge.n	800ee70 <f_mount+0x28>
 800ee6c:	230b      	movs	r3, #11
 800ee6e:	e048      	b.n	800ef02 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ee70:	4a26      	ldr	r2, [pc, #152]	; (800ef0c <f_mount+0xc4>)
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d00f      	beq.n	800eea0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ee80:	69b8      	ldr	r0, [r7, #24]
 800ee82:	f7fe fcb3 	bl	800d7ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f001 f812 	bl	800feb4 <ff_del_syncobj>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d101      	bne.n	800ee9a <f_mount+0x52>
 800ee96:	2302      	movs	r3, #2
 800ee98:	e033      	b.n	800ef02 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ee9a:	69bb      	ldr	r3, [r7, #24]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d00f      	beq.n	800eec6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800eeac:	69fb      	ldr	r3, [r7, #28]
 800eeae:	b2da      	uxtb	r2, r3
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	330c      	adds	r3, #12
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	4610      	mov	r0, r2
 800eeb8:	f000 ffe1 	bl	800fe7e <ff_cre_syncobj>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d101      	bne.n	800eec6 <f_mount+0x7e>
 800eec2:	2302      	movs	r3, #2
 800eec4:	e01d      	b.n	800ef02 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800eec6:	68fa      	ldr	r2, [r7, #12]
 800eec8:	4910      	ldr	r1, [pc, #64]	; (800ef0c <f_mount+0xc4>)
 800eeca:	69fb      	ldr	r3, [r7, #28]
 800eecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d002      	beq.n	800eedc <f_mount+0x94>
 800eed6:	79fb      	ldrb	r3, [r7, #7]
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d001      	beq.n	800eee0 <f_mount+0x98>
 800eedc:	2300      	movs	r3, #0
 800eede:	e010      	b.n	800ef02 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800eee0:	f107 010c 	add.w	r1, r7, #12
 800eee4:	f107 0308 	add.w	r3, r7, #8
 800eee8:	2200      	movs	r2, #0
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7ff fd10 	bl	800e910 <find_volume>
 800eef0:	4603      	mov	r3, r0
 800eef2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	7dfa      	ldrb	r2, [r7, #23]
 800eef8:	4611      	mov	r1, r2
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7fe fb12 	bl	800d524 <unlock_fs>
 800ef00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3720      	adds	r7, #32
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}
 800ef0a:	bf00      	nop
 800ef0c:	20000594 	.word	0x20000594

0800ef10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b098      	sub	sp, #96	; 0x60
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	60f8      	str	r0, [r7, #12]
 800ef18:	60b9      	str	r1, [r7, #8]
 800ef1a:	4613      	mov	r3, r2
 800ef1c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d101      	bne.n	800ef28 <f_open+0x18>
 800ef24:	2309      	movs	r3, #9
 800ef26:	e1b4      	b.n	800f292 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ef28:	79fb      	ldrb	r3, [r7, #7]
 800ef2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef2e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ef30:	79fa      	ldrb	r2, [r7, #7]
 800ef32:	f107 0110 	add.w	r1, r7, #16
 800ef36:	f107 0308 	add.w	r3, r7, #8
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7ff fce8 	bl	800e910 <find_volume>
 800ef40:	4603      	mov	r3, r0
 800ef42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ef46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	f040 8191 	bne.w	800f272 <f_open+0x362>
		dj.obj.fs = fs;
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ef54:	68ba      	ldr	r2, [r7, #8]
 800ef56:	f107 0314 	add.w	r3, r7, #20
 800ef5a:	4611      	mov	r1, r2
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7ff fbcb 	bl	800e6f8 <follow_path>
 800ef62:	4603      	mov	r3, r0
 800ef64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ef68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d11a      	bne.n	800efa6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ef70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ef74:	b25b      	sxtb	r3, r3
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	da03      	bge.n	800ef82 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ef7a:	2306      	movs	r3, #6
 800ef7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ef80:	e011      	b.n	800efa6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ef82:	79fb      	ldrb	r3, [r7, #7]
 800ef84:	f023 0301 	bic.w	r3, r3, #1
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	bf14      	ite	ne
 800ef8c:	2301      	movne	r3, #1
 800ef8e:	2300      	moveq	r3, #0
 800ef90:	b2db      	uxtb	r3, r3
 800ef92:	461a      	mov	r2, r3
 800ef94:	f107 0314 	add.w	r3, r7, #20
 800ef98:	4611      	mov	r1, r2
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7fe fade 	bl	800d55c <chk_lock>
 800efa0:	4603      	mov	r3, r0
 800efa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800efa6:	79fb      	ldrb	r3, [r7, #7]
 800efa8:	f003 031c 	and.w	r3, r3, #28
 800efac:	2b00      	cmp	r3, #0
 800efae:	d07f      	beq.n	800f0b0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800efb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d017      	beq.n	800efe8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800efb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800efbc:	2b04      	cmp	r3, #4
 800efbe:	d10e      	bne.n	800efde <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800efc0:	f7fe fb28 	bl	800d614 <enq_lock>
 800efc4:	4603      	mov	r3, r0
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d006      	beq.n	800efd8 <f_open+0xc8>
 800efca:	f107 0314 	add.w	r3, r7, #20
 800efce:	4618      	mov	r0, r3
 800efd0:	f7ff fa6c 	bl	800e4ac <dir_register>
 800efd4:	4603      	mov	r3, r0
 800efd6:	e000      	b.n	800efda <f_open+0xca>
 800efd8:	2312      	movs	r3, #18
 800efda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800efde:	79fb      	ldrb	r3, [r7, #7]
 800efe0:	f043 0308 	orr.w	r3, r3, #8
 800efe4:	71fb      	strb	r3, [r7, #7]
 800efe6:	e010      	b.n	800f00a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800efe8:	7ebb      	ldrb	r3, [r7, #26]
 800efea:	f003 0311 	and.w	r3, r3, #17
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d003      	beq.n	800effa <f_open+0xea>
					res = FR_DENIED;
 800eff2:	2307      	movs	r3, #7
 800eff4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800eff8:	e007      	b.n	800f00a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800effa:	79fb      	ldrb	r3, [r7, #7]
 800effc:	f003 0304 	and.w	r3, r3, #4
 800f000:	2b00      	cmp	r3, #0
 800f002:	d002      	beq.n	800f00a <f_open+0xfa>
 800f004:	2308      	movs	r3, #8
 800f006:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f00a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d168      	bne.n	800f0e4 <f_open+0x1d4>
 800f012:	79fb      	ldrb	r3, [r7, #7]
 800f014:	f003 0308 	and.w	r3, r3, #8
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d063      	beq.n	800f0e4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f01c:	f7fb ff2e 	bl	800ae7c <get_fattime>
 800f020:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f024:	330e      	adds	r3, #14
 800f026:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fe f9bb 	bl	800d3a4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f030:	3316      	adds	r3, #22
 800f032:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f034:	4618      	mov	r0, r3
 800f036:	f7fe f9b5 	bl	800d3a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f03c:	330b      	adds	r3, #11
 800f03e:	2220      	movs	r2, #32
 800f040:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f046:	4611      	mov	r1, r2
 800f048:	4618      	mov	r0, r3
 800f04a:	f7ff f93e 	bl	800e2ca <ld_clust>
 800f04e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f054:	2200      	movs	r2, #0
 800f056:	4618      	mov	r0, r3
 800f058:	f7ff f956 	bl	800e308 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f05e:	331c      	adds	r3, #28
 800f060:	2100      	movs	r1, #0
 800f062:	4618      	mov	r0, r3
 800f064:	f7fe f99e 	bl	800d3a4 <st_dword>
					fs->wflag = 1;
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	2201      	movs	r2, #1
 800f06c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f070:	2b00      	cmp	r3, #0
 800f072:	d037      	beq.n	800f0e4 <f_open+0x1d4>
						dw = fs->winsect;
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f078:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f07a:	f107 0314 	add.w	r3, r7, #20
 800f07e:	2200      	movs	r2, #0
 800f080:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f082:	4618      	mov	r0, r3
 800f084:	f7fe fe69 	bl	800dd5a <remove_chain>
 800f088:	4603      	mov	r3, r0
 800f08a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f08e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f092:	2b00      	cmp	r3, #0
 800f094:	d126      	bne.n	800f0e4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fe fc0e 	bl	800d8bc <move_window>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f0aa:	3a01      	subs	r2, #1
 800f0ac:	611a      	str	r2, [r3, #16]
 800f0ae:	e019      	b.n	800f0e4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f0b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d115      	bne.n	800f0e4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f0b8:	7ebb      	ldrb	r3, [r7, #26]
 800f0ba:	f003 0310 	and.w	r3, r3, #16
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d003      	beq.n	800f0ca <f_open+0x1ba>
					res = FR_NO_FILE;
 800f0c2:	2304      	movs	r3, #4
 800f0c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f0c8:	e00c      	b.n	800f0e4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f0ca:	79fb      	ldrb	r3, [r7, #7]
 800f0cc:	f003 0302 	and.w	r3, r3, #2
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d007      	beq.n	800f0e4 <f_open+0x1d4>
 800f0d4:	7ebb      	ldrb	r3, [r7, #26]
 800f0d6:	f003 0301 	and.w	r3, r3, #1
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d002      	beq.n	800f0e4 <f_open+0x1d4>
						res = FR_DENIED;
 800f0de:	2307      	movs	r3, #7
 800f0e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f0e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d128      	bne.n	800f13e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f0ec:	79fb      	ldrb	r3, [r7, #7]
 800f0ee:	f003 0308 	and.w	r3, r3, #8
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d003      	beq.n	800f0fe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f0f6:	79fb      	ldrb	r3, [r7, #7]
 800f0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f10c:	79fb      	ldrb	r3, [r7, #7]
 800f10e:	f023 0301 	bic.w	r3, r3, #1
 800f112:	2b00      	cmp	r3, #0
 800f114:	bf14      	ite	ne
 800f116:	2301      	movne	r3, #1
 800f118:	2300      	moveq	r3, #0
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	461a      	mov	r2, r3
 800f11e:	f107 0314 	add.w	r3, r7, #20
 800f122:	4611      	mov	r1, r2
 800f124:	4618      	mov	r0, r3
 800f126:	f7fe fa97 	bl	800d658 <inc_lock>
 800f12a:	4602      	mov	r2, r0
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	691b      	ldr	r3, [r3, #16]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d102      	bne.n	800f13e <f_open+0x22e>
 800f138:	2302      	movs	r3, #2
 800f13a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f13e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f142:	2b00      	cmp	r3, #0
 800f144:	f040 8095 	bne.w	800f272 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f14c:	4611      	mov	r1, r2
 800f14e:	4618      	mov	r0, r3
 800f150:	f7ff f8bb 	bl	800e2ca <ld_clust>
 800f154:	4602      	mov	r2, r0
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f15c:	331c      	adds	r3, #28
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fe f8e2 	bl	800d328 <ld_dword>
 800f164:	4602      	mov	r2, r0
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2200      	movs	r2, #0
 800f16e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f170:	693a      	ldr	r2, [r7, #16]
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	88da      	ldrh	r2, [r3, #6]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	79fa      	ldrb	r2, [r7, #7]
 800f182:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2200      	movs	r2, #0
 800f188:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2200      	movs	r2, #0
 800f18e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2200      	movs	r2, #0
 800f194:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	3330      	adds	r3, #48	; 0x30
 800f19a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f19e:	2100      	movs	r1, #0
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7fe f94c 	bl	800d43e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f1a6:	79fb      	ldrb	r3, [r7, #7]
 800f1a8:	f003 0320 	and.w	r3, r3, #32
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d060      	beq.n	800f272 <f_open+0x362>
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	68db      	ldr	r3, [r3, #12]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d05c      	beq.n	800f272 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	68da      	ldr	r2, [r3, #12]
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	895b      	ldrh	r3, [r3, #10]
 800f1c4:	025b      	lsls	r3, r3, #9
 800f1c6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	689b      	ldr	r3, [r3, #8]
 800f1cc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	68db      	ldr	r3, [r3, #12]
 800f1d2:	657b      	str	r3, [r7, #84]	; 0x54
 800f1d4:	e016      	b.n	800f204 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7fe fc29 	bl	800da32 <get_fat>
 800f1e0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f1e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d802      	bhi.n	800f1ee <f_open+0x2de>
 800f1e8:	2302      	movs	r3, #2
 800f1ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f1ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f1f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1f4:	d102      	bne.n	800f1fc <f_open+0x2ec>
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f1fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f1fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	657b      	str	r3, [r7, #84]	; 0x54
 800f204:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d103      	bne.n	800f214 <f_open+0x304>
 800f20c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f20e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f210:	429a      	cmp	r2, r3
 800f212:	d8e0      	bhi.n	800f1d6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f218:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f21a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d127      	bne.n	800f272 <f_open+0x362>
 800f222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d022      	beq.n	800f272 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f230:	4618      	mov	r0, r3
 800f232:	f7fe fbdf 	bl	800d9f4 <clust2sect>
 800f236:	6478      	str	r0, [r7, #68]	; 0x44
 800f238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d103      	bne.n	800f246 <f_open+0x336>
						res = FR_INT_ERR;
 800f23e:	2302      	movs	r3, #2
 800f240:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f244:	e015      	b.n	800f272 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f248:	0a5a      	lsrs	r2, r3, #9
 800f24a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f24c:	441a      	add	r2, r3
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	7858      	ldrb	r0, [r3, #1]
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6a1a      	ldr	r2, [r3, #32]
 800f260:	2301      	movs	r3, #1
 800f262:	f7fd ffeb 	bl	800d23c <disk_read>
 800f266:	4603      	mov	r3, r0
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d002      	beq.n	800f272 <f_open+0x362>
 800f26c:	2301      	movs	r3, #1
 800f26e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f276:	2b00      	cmp	r3, #0
 800f278:	d002      	beq.n	800f280 <f_open+0x370>
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2200      	movs	r2, #0
 800f27e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800f286:	4611      	mov	r1, r2
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fe f94b 	bl	800d524 <unlock_fs>
 800f28e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f292:	4618      	mov	r0, r3
 800f294:	3760      	adds	r7, #96	; 0x60
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}

0800f29a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f29a:	b580      	push	{r7, lr}
 800f29c:	b08c      	sub	sp, #48	; 0x30
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	60f8      	str	r0, [r7, #12]
 800f2a2:	60b9      	str	r1, [r7, #8]
 800f2a4:	607a      	str	r2, [r7, #4]
 800f2a6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f107 0210 	add.w	r2, r7, #16
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7ff fd7c 	bl	800edb8 <validate>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f2c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d107      	bne.n	800f2de <f_write+0x44>
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	7d5b      	ldrb	r3, [r3, #21]
 800f2d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f2d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d009      	beq.n	800f2f2 <f_write+0x58>
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f2e4:	4611      	mov	r1, r2
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7fe f91c 	bl	800d524 <unlock_fs>
 800f2ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f2f0:	e173      	b.n	800f5da <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	7d1b      	ldrb	r3, [r3, #20]
 800f2f6:	f003 0302 	and.w	r3, r3, #2
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d106      	bne.n	800f30c <f_write+0x72>
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	2107      	movs	r1, #7
 800f302:	4618      	mov	r0, r3
 800f304:	f7fe f90e 	bl	800d524 <unlock_fs>
 800f308:	2307      	movs	r3, #7
 800f30a:	e166      	b.n	800f5da <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	699a      	ldr	r2, [r3, #24]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	441a      	add	r2, r3
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	699b      	ldr	r3, [r3, #24]
 800f318:	429a      	cmp	r2, r3
 800f31a:	f080 814b 	bcs.w	800f5b4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	699b      	ldr	r3, [r3, #24]
 800f322:	43db      	mvns	r3, r3
 800f324:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f326:	e145      	b.n	800f5b4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	699b      	ldr	r3, [r3, #24]
 800f32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f330:	2b00      	cmp	r3, #0
 800f332:	f040 8101 	bne.w	800f538 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	699b      	ldr	r3, [r3, #24]
 800f33a:	0a5b      	lsrs	r3, r3, #9
 800f33c:	693a      	ldr	r2, [r7, #16]
 800f33e:	8952      	ldrh	r2, [r2, #10]
 800f340:	3a01      	subs	r2, #1
 800f342:	4013      	ands	r3, r2
 800f344:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f346:	69bb      	ldr	r3, [r7, #24]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d14d      	bne.n	800f3e8 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	699b      	ldr	r3, [r3, #24]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d10c      	bne.n	800f36e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	689b      	ldr	r3, [r3, #8]
 800f358:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d11a      	bne.n	800f396 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2100      	movs	r1, #0
 800f364:	4618      	mov	r0, r3
 800f366:	f7fe fd5d 	bl	800de24 <create_chain>
 800f36a:	62b8      	str	r0, [r7, #40]	; 0x28
 800f36c:	e013      	b.n	800f396 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f372:	2b00      	cmp	r3, #0
 800f374:	d007      	beq.n	800f386 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	699b      	ldr	r3, [r3, #24]
 800f37a:	4619      	mov	r1, r3
 800f37c:	68f8      	ldr	r0, [r7, #12]
 800f37e:	f7fe fde9 	bl	800df54 <clmt_clust>
 800f382:	62b8      	str	r0, [r7, #40]	; 0x28
 800f384:	e007      	b.n	800f396 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f386:	68fa      	ldr	r2, [r7, #12]
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	69db      	ldr	r3, [r3, #28]
 800f38c:	4619      	mov	r1, r3
 800f38e:	4610      	mov	r0, r2
 800f390:	f7fe fd48 	bl	800de24 <create_chain>
 800f394:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f398:	2b00      	cmp	r3, #0
 800f39a:	f000 8110 	beq.w	800f5be <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a0:	2b01      	cmp	r3, #1
 800f3a2:	d109      	bne.n	800f3b8 <f_write+0x11e>
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2202      	movs	r2, #2
 800f3a8:	755a      	strb	r2, [r3, #21]
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	2102      	movs	r1, #2
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7fe f8b8 	bl	800d524 <unlock_fs>
 800f3b4:	2302      	movs	r3, #2
 800f3b6:	e110      	b.n	800f5da <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3be:	d109      	bne.n	800f3d4 <f_write+0x13a>
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	755a      	strb	r2, [r3, #21]
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	2101      	movs	r1, #1
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7fe f8aa 	bl	800d524 <unlock_fs>
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	e102      	b.n	800f5da <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3d8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	689b      	ldr	r3, [r3, #8]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d102      	bne.n	800f3e8 <f_write+0x14e>
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3e6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	7d1b      	ldrb	r3, [r3, #20]
 800f3ec:	b25b      	sxtb	r3, r3
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	da1d      	bge.n	800f42e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	7858      	ldrb	r0, [r3, #1]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	6a1a      	ldr	r2, [r3, #32]
 800f400:	2301      	movs	r3, #1
 800f402:	f7fd ff3b 	bl	800d27c <disk_write>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d009      	beq.n	800f420 <f_write+0x186>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2201      	movs	r2, #1
 800f410:	755a      	strb	r2, [r3, #21]
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	2101      	movs	r1, #1
 800f416:	4618      	mov	r0, r3
 800f418:	f7fe f884 	bl	800d524 <unlock_fs>
 800f41c:	2301      	movs	r3, #1
 800f41e:	e0dc      	b.n	800f5da <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	7d1b      	ldrb	r3, [r3, #20]
 800f424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f428:	b2da      	uxtb	r2, r3
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f42e:	693a      	ldr	r2, [r7, #16]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	69db      	ldr	r3, [r3, #28]
 800f434:	4619      	mov	r1, r3
 800f436:	4610      	mov	r0, r2
 800f438:	f7fe fadc 	bl	800d9f4 <clust2sect>
 800f43c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d109      	bne.n	800f458 <f_write+0x1be>
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2202      	movs	r2, #2
 800f448:	755a      	strb	r2, [r3, #21]
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	2102      	movs	r1, #2
 800f44e:	4618      	mov	r0, r3
 800f450:	f7fe f868 	bl	800d524 <unlock_fs>
 800f454:	2302      	movs	r3, #2
 800f456:	e0c0      	b.n	800f5da <f_write+0x340>
			sect += csect;
 800f458:	697a      	ldr	r2, [r7, #20]
 800f45a:	69bb      	ldr	r3, [r7, #24]
 800f45c:	4413      	add	r3, r2
 800f45e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	0a5b      	lsrs	r3, r3, #9
 800f464:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f466:	6a3b      	ldr	r3, [r7, #32]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d041      	beq.n	800f4f0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f46c:	69ba      	ldr	r2, [r7, #24]
 800f46e:	6a3b      	ldr	r3, [r7, #32]
 800f470:	4413      	add	r3, r2
 800f472:	693a      	ldr	r2, [r7, #16]
 800f474:	8952      	ldrh	r2, [r2, #10]
 800f476:	4293      	cmp	r3, r2
 800f478:	d905      	bls.n	800f486 <f_write+0x1ec>
					cc = fs->csize - csect;
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	895b      	ldrh	r3, [r3, #10]
 800f47e:	461a      	mov	r2, r3
 800f480:	69bb      	ldr	r3, [r7, #24]
 800f482:	1ad3      	subs	r3, r2, r3
 800f484:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	7858      	ldrb	r0, [r3, #1]
 800f48a:	6a3b      	ldr	r3, [r7, #32]
 800f48c:	697a      	ldr	r2, [r7, #20]
 800f48e:	69f9      	ldr	r1, [r7, #28]
 800f490:	f7fd fef4 	bl	800d27c <disk_write>
 800f494:	4603      	mov	r3, r0
 800f496:	2b00      	cmp	r3, #0
 800f498:	d009      	beq.n	800f4ae <f_write+0x214>
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	2201      	movs	r2, #1
 800f49e:	755a      	strb	r2, [r3, #21]
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	2101      	movs	r1, #1
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7fe f83d 	bl	800d524 <unlock_fs>
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	e095      	b.n	800f5da <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	6a1a      	ldr	r2, [r3, #32]
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	1ad3      	subs	r3, r2, r3
 800f4b6:	6a3a      	ldr	r2, [r7, #32]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d915      	bls.n	800f4e8 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	6a1a      	ldr	r2, [r3, #32]
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	1ad3      	subs	r3, r2, r3
 800f4ca:	025b      	lsls	r3, r3, #9
 800f4cc:	69fa      	ldr	r2, [r7, #28]
 800f4ce:	4413      	add	r3, r2
 800f4d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	f7fd ff91 	bl	800d3fc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	7d1b      	ldrb	r3, [r3, #20]
 800f4de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4e2:	b2da      	uxtb	r2, r3
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f4e8:	6a3b      	ldr	r3, [r7, #32]
 800f4ea:	025b      	lsls	r3, r3, #9
 800f4ec:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f4ee:	e044      	b.n	800f57a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	6a1b      	ldr	r3, [r3, #32]
 800f4f4:	697a      	ldr	r2, [r7, #20]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d01b      	beq.n	800f532 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	699a      	ldr	r2, [r3, #24]
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f502:	429a      	cmp	r2, r3
 800f504:	d215      	bcs.n	800f532 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f506:	693b      	ldr	r3, [r7, #16]
 800f508:	7858      	ldrb	r0, [r3, #1]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f510:	2301      	movs	r3, #1
 800f512:	697a      	ldr	r2, [r7, #20]
 800f514:	f7fd fe92 	bl	800d23c <disk_read>
 800f518:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d009      	beq.n	800f532 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	2201      	movs	r2, #1
 800f522:	755a      	strb	r2, [r3, #21]
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	2101      	movs	r1, #1
 800f528:	4618      	mov	r0, r3
 800f52a:	f7fd fffb 	bl	800d524 <unlock_fs>
 800f52e:	2301      	movs	r3, #1
 800f530:	e053      	b.n	800f5da <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	697a      	ldr	r2, [r7, #20]
 800f536:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	699b      	ldr	r3, [r3, #24]
 800f53c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f540:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f544:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d901      	bls.n	800f552 <f_write+0x2b8>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	699b      	ldr	r3, [r3, #24]
 800f55c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f560:	4413      	add	r3, r2
 800f562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f564:	69f9      	ldr	r1, [r7, #28]
 800f566:	4618      	mov	r0, r3
 800f568:	f7fd ff48 	bl	800d3fc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	7d1b      	ldrb	r3, [r3, #20]
 800f570:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f574:	b2da      	uxtb	r2, r3
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f57a:	69fa      	ldr	r2, [r7, #28]
 800f57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57e:	4413      	add	r3, r2
 800f580:	61fb      	str	r3, [r7, #28]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	699a      	ldr	r2, [r3, #24]
 800f586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f588:	441a      	add	r2, r3
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	619a      	str	r2, [r3, #24]
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	68da      	ldr	r2, [r3, #12]
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	699b      	ldr	r3, [r3, #24]
 800f596:	429a      	cmp	r2, r3
 800f598:	bf38      	it	cc
 800f59a:	461a      	movcc	r2, r3
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	60da      	str	r2, [r3, #12]
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a6:	441a      	add	r2, r3
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	601a      	str	r2, [r3, #0]
 800f5ac:	687a      	ldr	r2, [r7, #4]
 800f5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	f47f aeb6 	bne.w	800f328 <f_write+0x8e>
 800f5bc:	e000      	b.n	800f5c0 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f5be:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	7d1b      	ldrb	r3, [r3, #20]
 800f5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5c8:	b2da      	uxtb	r2, r3
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	2100      	movs	r1, #0
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7fd ffa6 	bl	800d524 <unlock_fs>
 800f5d8:	2300      	movs	r3, #0
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3730      	adds	r7, #48	; 0x30
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}

0800f5e2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f5e2:	b580      	push	{r7, lr}
 800f5e4:	b086      	sub	sp, #24
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f107 0208 	add.w	r2, r7, #8
 800f5f0:	4611      	mov	r1, r2
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7ff fbe0 	bl	800edb8 <validate>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f5fc:	7dfb      	ldrb	r3, [r7, #23]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d16d      	bne.n	800f6de <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	7d1b      	ldrb	r3, [r3, #20]
 800f606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d067      	beq.n	800f6de <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	7d1b      	ldrb	r3, [r3, #20]
 800f612:	b25b      	sxtb	r3, r3
 800f614:	2b00      	cmp	r3, #0
 800f616:	da1a      	bge.n	800f64e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	7858      	ldrb	r0, [r3, #1]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6a1a      	ldr	r2, [r3, #32]
 800f626:	2301      	movs	r3, #1
 800f628:	f7fd fe28 	bl	800d27c <disk_write>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d006      	beq.n	800f640 <f_sync+0x5e>
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	2101      	movs	r1, #1
 800f636:	4618      	mov	r0, r3
 800f638:	f7fd ff74 	bl	800d524 <unlock_fs>
 800f63c:	2301      	movs	r3, #1
 800f63e:	e055      	b.n	800f6ec <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	7d1b      	ldrb	r3, [r3, #20]
 800f644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f648:	b2da      	uxtb	r2, r3
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f64e:	f7fb fc15 	bl	800ae7c <get_fattime>
 800f652:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f654:	68ba      	ldr	r2, [r7, #8]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f65a:	4619      	mov	r1, r3
 800f65c:	4610      	mov	r0, r2
 800f65e:	f7fe f92d 	bl	800d8bc <move_window>
 800f662:	4603      	mov	r3, r0
 800f664:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f666:	7dfb      	ldrb	r3, [r7, #23]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d138      	bne.n	800f6de <f_sync+0xfc>
					dir = fp->dir_ptr;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f670:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	330b      	adds	r3, #11
 800f676:	781a      	ldrb	r2, [r3, #0]
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	330b      	adds	r3, #11
 800f67c:	f042 0220 	orr.w	r2, r2, #32
 800f680:	b2d2      	uxtb	r2, r2
 800f682:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6818      	ldr	r0, [r3, #0]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	689b      	ldr	r3, [r3, #8]
 800f68c:	461a      	mov	r2, r3
 800f68e:	68f9      	ldr	r1, [r7, #12]
 800f690:	f7fe fe3a 	bl	800e308 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f103 021c 	add.w	r2, r3, #28
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	68db      	ldr	r3, [r3, #12]
 800f69e:	4619      	mov	r1, r3
 800f6a0:	4610      	mov	r0, r2
 800f6a2:	f7fd fe7f 	bl	800d3a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	3316      	adds	r3, #22
 800f6aa:	6939      	ldr	r1, [r7, #16]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7fd fe79 	bl	800d3a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	3312      	adds	r3, #18
 800f6b6:	2100      	movs	r1, #0
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7fd fe58 	bl	800d36e <st_word>
					fs->wflag = 1;
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7fe f926 	bl	800d918 <sync_fs>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	7d1b      	ldrb	r3, [r3, #20]
 800f6d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6d8:	b2da      	uxtb	r2, r3
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	7dfa      	ldrb	r2, [r7, #23]
 800f6e2:	4611      	mov	r1, r2
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fd ff1d 	bl	800d524 <unlock_fs>
 800f6ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3718      	adds	r7, #24
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b084      	sub	sp, #16
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f7ff ff70 	bl	800f5e2 <f_sync>
 800f702:	4603      	mov	r3, r0
 800f704:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f706:	7bfb      	ldrb	r3, [r7, #15]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d11d      	bne.n	800f748 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f107 0208 	add.w	r2, r7, #8
 800f712:	4611      	mov	r1, r2
 800f714:	4618      	mov	r0, r3
 800f716:	f7ff fb4f 	bl	800edb8 <validate>
 800f71a:	4603      	mov	r3, r0
 800f71c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f71e:	7bfb      	ldrb	r3, [r7, #15]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d111      	bne.n	800f748 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	691b      	ldr	r3, [r3, #16]
 800f728:	4618      	mov	r0, r3
 800f72a:	f7fe f823 	bl	800d774 <dec_lock>
 800f72e:	4603      	mov	r3, r0
 800f730:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f732:	7bfb      	ldrb	r3, [r7, #15]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d102      	bne.n	800f73e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2200      	movs	r2, #0
 800f73c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	2100      	movs	r1, #0
 800f742:	4618      	mov	r0, r3
 800f744:	f7fd feee 	bl	800d524 <unlock_fs>
#endif
		}
	}
	return res;
 800f748:	7bfb      	ldrb	r3, [r7, #15]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3710      	adds	r7, #16
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}

0800f752 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f752:	b580      	push	{r7, lr}
 800f754:	b090      	sub	sp, #64	; 0x40
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
 800f75a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f107 0208 	add.w	r2, r7, #8
 800f762:	4611      	mov	r1, r2
 800f764:	4618      	mov	r0, r3
 800f766:	f7ff fb27 	bl	800edb8 <validate>
 800f76a:	4603      	mov	r3, r0
 800f76c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f770:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f774:	2b00      	cmp	r3, #0
 800f776:	d103      	bne.n	800f780 <f_lseek+0x2e>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	7d5b      	ldrb	r3, [r3, #21]
 800f77c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f780:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f784:	2b00      	cmp	r3, #0
 800f786:	d009      	beq.n	800f79c <f_lseek+0x4a>
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f78e:	4611      	mov	r1, r2
 800f790:	4618      	mov	r0, r3
 800f792:	f7fd fec7 	bl	800d524 <unlock_fs>
 800f796:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f79a:	e229      	b.n	800fbf0 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	f000 80ea 	beq.w	800f97a <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f7ac:	d164      	bne.n	800f878 <f_lseek+0x126>
			tbl = fp->cltbl;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7b2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b6:	1d1a      	adds	r2, r3, #4
 800f7b8:	627a      	str	r2, [r7, #36]	; 0x24
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	617b      	str	r3, [r7, #20]
 800f7be:	2302      	movs	r3, #2
 800f7c0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	689b      	ldr	r3, [r3, #8]
 800f7c6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d044      	beq.n	800f858 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d0:	613b      	str	r3, [r7, #16]
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d8:	3302      	adds	r3, #2
 800f7da:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7de:	60fb      	str	r3, [r7, #12]
 800f7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7fe f921 	bl	800da32 <get_fat>
 800f7f0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f4:	2b01      	cmp	r3, #1
 800f7f6:	d809      	bhi.n	800f80c <f_lseek+0xba>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2202      	movs	r2, #2
 800f7fc:	755a      	strb	r2, [r3, #21]
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	2102      	movs	r1, #2
 800f802:	4618      	mov	r0, r3
 800f804:	f7fd fe8e 	bl	800d524 <unlock_fs>
 800f808:	2302      	movs	r3, #2
 800f80a:	e1f1      	b.n	800fbf0 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f80e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f812:	d109      	bne.n	800f828 <f_lseek+0xd6>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2201      	movs	r2, #1
 800f818:	755a      	strb	r2, [r3, #21]
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	2101      	movs	r1, #1
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fd fe80 	bl	800d524 <unlock_fs>
 800f824:	2301      	movs	r3, #1
 800f826:	e1e3      	b.n	800fbf0 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	3301      	adds	r3, #1
 800f82c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f82e:	429a      	cmp	r2, r3
 800f830:	d0d4      	beq.n	800f7dc <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	429a      	cmp	r2, r3
 800f838:	d809      	bhi.n	800f84e <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800f83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83c:	1d1a      	adds	r2, r3, #4
 800f83e:	627a      	str	r2, [r7, #36]	; 0x24
 800f840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f842:	601a      	str	r2, [r3, #0]
 800f844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f846:	1d1a      	adds	r2, r3, #4
 800f848:	627a      	str	r2, [r7, #36]	; 0x24
 800f84a:	693a      	ldr	r2, [r7, #16]
 800f84c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	699b      	ldr	r3, [r3, #24]
 800f852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f854:	429a      	cmp	r2, r3
 800f856:	d3ba      	bcc.n	800f7ce <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f85c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f85e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	429a      	cmp	r2, r3
 800f866:	d803      	bhi.n	800f870 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800f868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f86a:	2200      	movs	r2, #0
 800f86c:	601a      	str	r2, [r3, #0]
 800f86e:	e1b6      	b.n	800fbde <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f870:	2311      	movs	r3, #17
 800f872:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f876:	e1b2      	b.n	800fbde <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	68db      	ldr	r3, [r3, #12]
 800f87c:	683a      	ldr	r2, [r7, #0]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d902      	bls.n	800f888 <f_lseek+0x136>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	683a      	ldr	r2, [r7, #0]
 800f88c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	2b00      	cmp	r3, #0
 800f892:	f000 81a4 	beq.w	800fbde <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	3b01      	subs	r3, #1
 800f89a:	4619      	mov	r1, r3
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f7fe fb59 	bl	800df54 <clmt_clust>
 800f8a2:	4602      	mov	r2, r0
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	69db      	ldr	r3, [r3, #28]
 800f8ae:	4619      	mov	r1, r3
 800f8b0:	4610      	mov	r0, r2
 800f8b2:	f7fe f89f 	bl	800d9f4 <clust2sect>
 800f8b6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f8b8:	69bb      	ldr	r3, [r7, #24]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d109      	bne.n	800f8d2 <f_lseek+0x180>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2202      	movs	r2, #2
 800f8c2:	755a      	strb	r2, [r3, #21]
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	2102      	movs	r1, #2
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7fd fe2b 	bl	800d524 <unlock_fs>
 800f8ce:	2302      	movs	r3, #2
 800f8d0:	e18e      	b.n	800fbf0 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	3b01      	subs	r3, #1
 800f8d6:	0a5b      	lsrs	r3, r3, #9
 800f8d8:	68ba      	ldr	r2, [r7, #8]
 800f8da:	8952      	ldrh	r2, [r2, #10]
 800f8dc:	3a01      	subs	r2, #1
 800f8de:	4013      	ands	r3, r2
 800f8e0:	69ba      	ldr	r2, [r7, #24]
 800f8e2:	4413      	add	r3, r2
 800f8e4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	699b      	ldr	r3, [r3, #24]
 800f8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	f000 8175 	beq.w	800fbde <f_lseek+0x48c>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6a1b      	ldr	r3, [r3, #32]
 800f8f8:	69ba      	ldr	r2, [r7, #24]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	f000 816f 	beq.w	800fbde <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	7d1b      	ldrb	r3, [r3, #20]
 800f904:	b25b      	sxtb	r3, r3
 800f906:	2b00      	cmp	r3, #0
 800f908:	da1d      	bge.n	800f946 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	7858      	ldrb	r0, [r3, #1]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6a1a      	ldr	r2, [r3, #32]
 800f918:	2301      	movs	r3, #1
 800f91a:	f7fd fcaf 	bl	800d27c <disk_write>
 800f91e:	4603      	mov	r3, r0
 800f920:	2b00      	cmp	r3, #0
 800f922:	d009      	beq.n	800f938 <f_lseek+0x1e6>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2201      	movs	r2, #1
 800f928:	755a      	strb	r2, [r3, #21]
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	2101      	movs	r1, #1
 800f92e:	4618      	mov	r0, r3
 800f930:	f7fd fdf8 	bl	800d524 <unlock_fs>
 800f934:	2301      	movs	r3, #1
 800f936:	e15b      	b.n	800fbf0 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	7d1b      	ldrb	r3, [r3, #20]
 800f93c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f940:	b2da      	uxtb	r2, r3
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	7858      	ldrb	r0, [r3, #1]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f950:	2301      	movs	r3, #1
 800f952:	69ba      	ldr	r2, [r7, #24]
 800f954:	f7fd fc72 	bl	800d23c <disk_read>
 800f958:	4603      	mov	r3, r0
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d009      	beq.n	800f972 <f_lseek+0x220>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2201      	movs	r2, #1
 800f962:	755a      	strb	r2, [r3, #21]
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	2101      	movs	r1, #1
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fd fddb 	bl	800d524 <unlock_fs>
 800f96e:	2301      	movs	r3, #1
 800f970:	e13e      	b.n	800fbf0 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	69ba      	ldr	r2, [r7, #24]
 800f976:	621a      	str	r2, [r3, #32]
 800f978:	e131      	b.n	800fbde <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	683a      	ldr	r2, [r7, #0]
 800f980:	429a      	cmp	r2, r3
 800f982:	d908      	bls.n	800f996 <f_lseek+0x244>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	7d1b      	ldrb	r3, [r3, #20]
 800f988:	f003 0302 	and.w	r3, r3, #2
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d102      	bne.n	800f996 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	699b      	ldr	r3, [r3, #24]
 800f99a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f99c:	2300      	movs	r3, #0
 800f99e:	637b      	str	r3, [r7, #52]	; 0x34
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9a4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	f000 80c0 	beq.w	800fb2e <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	895b      	ldrh	r3, [r3, #10]
 800f9b2:	025b      	lsls	r3, r3, #9
 800f9b4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f9b6:	6a3b      	ldr	r3, [r7, #32]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d01b      	beq.n	800f9f4 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	1e5a      	subs	r2, r3, #1
 800f9c0:	69fb      	ldr	r3, [r7, #28]
 800f9c2:	fbb2 f2f3 	udiv	r2, r2, r3
 800f9c6:	6a3b      	ldr	r3, [r7, #32]
 800f9c8:	1e59      	subs	r1, r3, #1
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d30f      	bcc.n	800f9f4 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f9d4:	6a3b      	ldr	r3, [r7, #32]
 800f9d6:	1e5a      	subs	r2, r3, #1
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	425b      	negs	r3, r3
 800f9dc:	401a      	ands	r2, r3
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	699b      	ldr	r3, [r3, #24]
 800f9e6:	683a      	ldr	r2, [r7, #0]
 800f9e8:	1ad3      	subs	r3, r2, r3
 800f9ea:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	69db      	ldr	r3, [r3, #28]
 800f9f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f9f2:	e02c      	b.n	800fa4e <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	689b      	ldr	r3, [r3, #8]
 800f9f8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d123      	bne.n	800fa48 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2100      	movs	r1, #0
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7fe fa0d 	bl	800de24 <create_chain>
 800fa0a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d109      	bne.n	800fa26 <f_lseek+0x2d4>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2202      	movs	r2, #2
 800fa16:	755a      	strb	r2, [r3, #21]
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	2102      	movs	r1, #2
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fd fd81 	bl	800d524 <unlock_fs>
 800fa22:	2302      	movs	r3, #2
 800fa24:	e0e4      	b.n	800fbf0 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fa26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa2c:	d109      	bne.n	800fa42 <f_lseek+0x2f0>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2201      	movs	r2, #1
 800fa32:	755a      	strb	r2, [r3, #21]
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	2101      	movs	r1, #1
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fd fd73 	bl	800d524 <unlock_fs>
 800fa3e:	2301      	movs	r3, #1
 800fa40:	e0d6      	b.n	800fbf0 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa46:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa4c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800fa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d06c      	beq.n	800fb2e <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800fa54:	e044      	b.n	800fae0 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800fa56:	683a      	ldr	r2, [r7, #0]
 800fa58:	69fb      	ldr	r3, [r7, #28]
 800fa5a:	1ad3      	subs	r3, r2, r3
 800fa5c:	603b      	str	r3, [r7, #0]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	699a      	ldr	r2, [r3, #24]
 800fa62:	69fb      	ldr	r3, [r7, #28]
 800fa64:	441a      	add	r2, r3
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	7d1b      	ldrb	r3, [r3, #20]
 800fa6e:	f003 0302 	and.w	r3, r3, #2
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d00b      	beq.n	800fa8e <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7fe f9d2 	bl	800de24 <create_chain>
 800fa80:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800fa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d108      	bne.n	800fa9a <f_lseek+0x348>
							ofs = 0; break;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	603b      	str	r3, [r7, #0]
 800fa8c:	e02c      	b.n	800fae8 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fd ffcd 	bl	800da32 <get_fat>
 800fa98:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fa9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800faa0:	d109      	bne.n	800fab6 <f_lseek+0x364>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2201      	movs	r2, #1
 800faa6:	755a      	strb	r2, [r3, #21]
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	2101      	movs	r1, #1
 800faac:	4618      	mov	r0, r3
 800faae:	f7fd fd39 	bl	800d524 <unlock_fs>
 800fab2:	2301      	movs	r3, #1
 800fab4:	e09c      	b.n	800fbf0 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800fab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab8:	2b01      	cmp	r3, #1
 800faba:	d904      	bls.n	800fac6 <f_lseek+0x374>
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	699b      	ldr	r3, [r3, #24]
 800fac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d309      	bcc.n	800fada <f_lseek+0x388>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2202      	movs	r2, #2
 800faca:	755a      	strb	r2, [r3, #21]
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	2102      	movs	r1, #2
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7fd fd27 	bl	800d524 <unlock_fs>
 800fad6:	2302      	movs	r3, #2
 800fad8:	e08a      	b.n	800fbf0 <f_lseek+0x49e>
					fp->clust = clst;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fade:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800fae0:	683a      	ldr	r2, [r7, #0]
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d8b6      	bhi.n	800fa56 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	699a      	ldr	r2, [r3, #24]
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	441a      	add	r2, r3
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d017      	beq.n	800fb2e <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fd ff76 	bl	800d9f4 <clust2sect>
 800fb08:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800fb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d109      	bne.n	800fb24 <f_lseek+0x3d2>
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2202      	movs	r2, #2
 800fb14:	755a      	strb	r2, [r3, #21]
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	2102      	movs	r1, #2
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fd fd02 	bl	800d524 <unlock_fs>
 800fb20:	2302      	movs	r3, #2
 800fb22:	e065      	b.n	800fbf0 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	0a5b      	lsrs	r3, r3, #9
 800fb28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb2a:	4413      	add	r3, r2
 800fb2c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	699a      	ldr	r2, [r3, #24]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	68db      	ldr	r3, [r3, #12]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d90a      	bls.n	800fb50 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	699a      	ldr	r2, [r3, #24]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	7d1b      	ldrb	r3, [r3, #20]
 800fb46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb4a:	b2da      	uxtb	r2, r3
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	699b      	ldr	r3, [r3, #24]
 800fb54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d040      	beq.n	800fbde <f_lseek+0x48c>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	6a1b      	ldr	r3, [r3, #32]
 800fb60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d03b      	beq.n	800fbde <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	7d1b      	ldrb	r3, [r3, #20]
 800fb6a:	b25b      	sxtb	r3, r3
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	da1d      	bge.n	800fbac <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	7858      	ldrb	r0, [r3, #1]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6a1a      	ldr	r2, [r3, #32]
 800fb7e:	2301      	movs	r3, #1
 800fb80:	f7fd fb7c 	bl	800d27c <disk_write>
 800fb84:	4603      	mov	r3, r0
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d009      	beq.n	800fb9e <f_lseek+0x44c>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2201      	movs	r2, #1
 800fb8e:	755a      	strb	r2, [r3, #21]
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	2101      	movs	r1, #1
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fd fcc5 	bl	800d524 <unlock_fs>
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	e028      	b.n	800fbf0 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	7d1b      	ldrb	r3, [r3, #20]
 800fba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fba6:	b2da      	uxtb	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	7858      	ldrb	r0, [r3, #1]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbba:	f7fd fb3f 	bl	800d23c <disk_read>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d009      	beq.n	800fbd8 <f_lseek+0x486>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	755a      	strb	r2, [r3, #21]
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	2101      	movs	r1, #1
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fd fca8 	bl	800d524 <unlock_fs>
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	e00b      	b.n	800fbf0 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbdc:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fbe4:	4611      	mov	r1, r2
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fd fc9c 	bl	800d524 <unlock_fs>
 800fbec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3740      	adds	r7, #64	; 0x40
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b086      	sub	sp, #24
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d101      	bne.n	800fc0c <f_opendir+0x14>
 800fc08:	2309      	movs	r3, #9
 800fc0a:	e06a      	b.n	800fce2 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800fc10:	f107 010c 	add.w	r1, r7, #12
 800fc14:	463b      	mov	r3, r7
 800fc16:	2200      	movs	r2, #0
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7fe fe79 	bl	800e910 <find_volume>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fc22:	7dfb      	ldrb	r3, [r7, #23]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d14f      	bne.n	800fcc8 <f_opendir+0xd0>
		obj->fs = fs;
 800fc28:	68fa      	ldr	r2, [r7, #12]
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	4619      	mov	r1, r3
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f7fe fd60 	bl	800e6f8 <follow_path>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800fc3c:	7dfb      	ldrb	r3, [r7, #23]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d13d      	bne.n	800fcbe <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fc48:	b25b      	sxtb	r3, r3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	db12      	blt.n	800fc74 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	799b      	ldrb	r3, [r3, #6]
 800fc52:	f003 0310 	and.w	r3, r3, #16
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d00a      	beq.n	800fc70 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800fc5a:	68fa      	ldr	r2, [r7, #12]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6a1b      	ldr	r3, [r3, #32]
 800fc60:	4619      	mov	r1, r3
 800fc62:	4610      	mov	r0, r2
 800fc64:	f7fe fb31 	bl	800e2ca <ld_clust>
 800fc68:	4602      	mov	r2, r0
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	609a      	str	r2, [r3, #8]
 800fc6e:	e001      	b.n	800fc74 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800fc70:	2305      	movs	r3, #5
 800fc72:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800fc74:	7dfb      	ldrb	r3, [r7, #23]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d121      	bne.n	800fcbe <f_opendir+0xc6>
				obj->id = fs->id;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	88da      	ldrh	r2, [r3, #6]
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fc82:	2100      	movs	r1, #0
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f7fe f999 	bl	800dfbc <dir_sdi>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800fc8e:	7dfb      	ldrb	r3, [r7, #23]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d114      	bne.n	800fcbe <f_opendir+0xc6>
					if (obj->sclust) {
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	689b      	ldr	r3, [r3, #8]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d00d      	beq.n	800fcb8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800fc9c:	2100      	movs	r1, #0
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f7fd fcda 	bl	800d658 <inc_lock>
 800fca4:	4602      	mov	r2, r0
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	691b      	ldr	r3, [r3, #16]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d105      	bne.n	800fcbe <f_opendir+0xc6>
 800fcb2:	2312      	movs	r3, #18
 800fcb4:	75fb      	strb	r3, [r7, #23]
 800fcb6:	e002      	b.n	800fcbe <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800fcbe:	7dfb      	ldrb	r3, [r7, #23]
 800fcc0:	2b04      	cmp	r3, #4
 800fcc2:	d101      	bne.n	800fcc8 <f_opendir+0xd0>
 800fcc4:	2305      	movs	r3, #5
 800fcc6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800fcc8:	7dfb      	ldrb	r3, [r7, #23]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d002      	beq.n	800fcd4 <f_opendir+0xdc>
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	7dfa      	ldrb	r2, [r7, #23]
 800fcd8:	4611      	mov	r1, r2
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7fd fc22 	bl	800d524 <unlock_fs>
 800fce0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3718      	adds	r7, #24
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}

0800fcea <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800fcea:	b580      	push	{r7, lr}
 800fcec:	b084      	sub	sp, #16
 800fcee:	af00      	add	r7, sp, #0
 800fcf0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f107 0208 	add.w	r2, r7, #8
 800fcf8:	4611      	mov	r1, r2
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7ff f85c 	bl	800edb8 <validate>
 800fd00:	4603      	mov	r3, r0
 800fd02:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fd04:	7bfb      	ldrb	r3, [r7, #15]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d115      	bne.n	800fd36 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	691b      	ldr	r3, [r3, #16]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d006      	beq.n	800fd20 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	691b      	ldr	r3, [r3, #16]
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7fd fd2c 	bl	800d774 <dec_lock>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800fd20:	7bfb      	ldrb	r3, [r7, #15]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d102      	bne.n	800fd2c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2200      	movs	r2, #0
 800fd2a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	2100      	movs	r1, #0
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7fd fbf7 	bl	800d524 <unlock_fs>
#endif
	}
	return res;
 800fd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3710      	adds	r7, #16
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b084      	sub	sp, #16
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f107 0208 	add.w	r2, r7, #8
 800fd50:	4611      	mov	r1, r2
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7ff f830 	bl	800edb8 <validate>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fd5c:	7bfb      	ldrb	r3, [r7, #15]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d126      	bne.n	800fdb0 <f_readdir+0x70>
		if (!fno) {
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d106      	bne.n	800fd76 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800fd68:	2100      	movs	r1, #0
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f7fe f926 	bl	800dfbc <dir_sdi>
 800fd70:	4603      	mov	r3, r0
 800fd72:	73fb      	strb	r3, [r7, #15]
 800fd74:	e01c      	b.n	800fdb0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800fd76:	2100      	movs	r1, #0
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f7fe fae5 	bl	800e348 <dir_read>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800fd82:	7bfb      	ldrb	r3, [r7, #15]
 800fd84:	2b04      	cmp	r3, #4
 800fd86:	d101      	bne.n	800fd8c <f_readdir+0x4c>
 800fd88:	2300      	movs	r3, #0
 800fd8a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800fd8c:	7bfb      	ldrb	r3, [r7, #15]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d10e      	bne.n	800fdb0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800fd92:	6839      	ldr	r1, [r7, #0]
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f7fe fbbb 	bl	800e510 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f7fe f988 	bl	800e0b2 <dir_next>
 800fda2:	4603      	mov	r3, r0
 800fda4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fda6:	7bfb      	ldrb	r3, [r7, #15]
 800fda8:	2b04      	cmp	r3, #4
 800fdaa:	d101      	bne.n	800fdb0 <f_readdir+0x70>
 800fdac:	2300      	movs	r3, #0
 800fdae:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	7bfa      	ldrb	r2, [r7, #15]
 800fdb4:	4611      	mov	r1, r2
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7fd fbb4 	bl	800d524 <unlock_fs>
 800fdbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3710      	adds	r7, #16
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
	...

0800fdc8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b087      	sub	sp, #28
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	60f8      	str	r0, [r7, #12]
 800fdd0:	60b9      	str	r1, [r7, #8]
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fdda:	2300      	movs	r3, #0
 800fddc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fdde:	4b1f      	ldr	r3, [pc, #124]	; (800fe5c <FATFS_LinkDriverEx+0x94>)
 800fde0:	7a5b      	ldrb	r3, [r3, #9]
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d131      	bne.n	800fe4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fde8:	4b1c      	ldr	r3, [pc, #112]	; (800fe5c <FATFS_LinkDriverEx+0x94>)
 800fdea:	7a5b      	ldrb	r3, [r3, #9]
 800fdec:	b2db      	uxtb	r3, r3
 800fdee:	461a      	mov	r2, r3
 800fdf0:	4b1a      	ldr	r3, [pc, #104]	; (800fe5c <FATFS_LinkDriverEx+0x94>)
 800fdf2:	2100      	movs	r1, #0
 800fdf4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fdf6:	4b19      	ldr	r3, [pc, #100]	; (800fe5c <FATFS_LinkDriverEx+0x94>)
 800fdf8:	7a5b      	ldrb	r3, [r3, #9]
 800fdfa:	b2db      	uxtb	r3, r3
 800fdfc:	4a17      	ldr	r2, [pc, #92]	; (800fe5c <FATFS_LinkDriverEx+0x94>)
 800fdfe:	009b      	lsls	r3, r3, #2
 800fe00:	4413      	add	r3, r2
 800fe02:	68fa      	ldr	r2, [r7, #12]
 800fe04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fe06:	4b15      	ldr	r3, [pc, #84]	; (800fe5c <FATFS_LinkDriverEx+0x94>)
 800fe08:	7a5b      	ldrb	r3, [r3, #9]
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	4b13      	ldr	r3, [pc, #76]	; (800fe5c <FATFS_LinkDriverEx+0x94>)
 800fe10:	4413      	add	r3, r2
 800fe12:	79fa      	ldrb	r2, [r7, #7]
 800fe14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fe16:	4b11      	ldr	r3, [pc, #68]	; (800fe5c <FATFS_LinkDriverEx+0x94>)
 800fe18:	7a5b      	ldrb	r3, [r3, #9]
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	1c5a      	adds	r2, r3, #1
 800fe1e:	b2d1      	uxtb	r1, r2
 800fe20:	4a0e      	ldr	r2, [pc, #56]	; (800fe5c <FATFS_LinkDriverEx+0x94>)
 800fe22:	7251      	strb	r1, [r2, #9]
 800fe24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fe26:	7dbb      	ldrb	r3, [r7, #22]
 800fe28:	3330      	adds	r3, #48	; 0x30
 800fe2a:	b2da      	uxtb	r2, r3
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	3301      	adds	r3, #1
 800fe34:	223a      	movs	r2, #58	; 0x3a
 800fe36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	3302      	adds	r3, #2
 800fe3c:	222f      	movs	r2, #47	; 0x2f
 800fe3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	3303      	adds	r3, #3
 800fe44:	2200      	movs	r2, #0
 800fe46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fe4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	371c      	adds	r7, #28
 800fe52:	46bd      	mov	sp, r7
 800fe54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe58:	4770      	bx	lr
 800fe5a:	bf00      	nop
 800fe5c:	200005bc 	.word	0x200005bc

0800fe60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	6839      	ldr	r1, [r7, #0]
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f7ff ffaa 	bl	800fdc8 <FATFS_LinkDriverEx>
 800fe74:	4603      	mov	r3, r0
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3708      	adds	r7, #8
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}

0800fe7e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800fe7e:	b580      	push	{r7, lr}
 800fe80:	b084      	sub	sp, #16
 800fe82:	af00      	add	r7, sp, #0
 800fe84:	4603      	mov	r3, r0
 800fe86:	6039      	str	r1, [r7, #0]
 800fe88:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	2101      	movs	r1, #1
 800fe8e:	2001      	movs	r0, #1
 800fe90:	f000 f977 	bl	8010182 <osSemaphoreNew>
 800fe94:	4602      	mov	r2, r0
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	bf14      	ite	ne
 800fea2:	2301      	movne	r3, #1
 800fea4:	2300      	moveq	r3, #0
 800fea6:	b2db      	uxtb	r3, r3
 800fea8:	60fb      	str	r3, [r7, #12]

    return ret;
 800feaa:	68fb      	ldr	r3, [r7, #12]
}
 800feac:	4618      	mov	r0, r3
 800feae:	3710      	adds	r7, #16
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f000 fa7f 	bl	80103c0 <osSemaphoreDelete>
#endif
    return 1;
 800fec2:	2301      	movs	r3, #1
}
 800fec4:	4618      	mov	r0, r3
 800fec6:	3708      	adds	r7, #8
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}

0800fecc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b084      	sub	sp, #16
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800fed4:	2300      	movs	r3, #0
 800fed6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800fed8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f000 f9d9 	bl	8010294 <osSemaphoreAcquire>
 800fee2:	4603      	mov	r3, r0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d101      	bne.n	800feec <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800fee8:	2301      	movs	r3, #1
 800feea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800feec:	68fb      	ldr	r3, [r7, #12]
}
 800feee:	4618      	mov	r0, r3
 800fef0:	3710      	adds	r7, #16
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}

0800fef6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800fef6:	b580      	push	{r7, lr}
 800fef8:	b082      	sub	sp, #8
 800fefa:	af00      	add	r7, sp, #0
 800fefc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f000 fa1a 	bl	8010338 <osSemaphoreRelease>
#endif
}
 800ff04:	bf00      	nop
 800ff06:	3708      	adds	r7, #8
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <__NVIC_SetPriority>:
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	4603      	mov	r3, r0
 800ff14:	6039      	str	r1, [r7, #0]
 800ff16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ff18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	db0a      	blt.n	800ff36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	b2da      	uxtb	r2, r3
 800ff24:	490c      	ldr	r1, [pc, #48]	; (800ff58 <__NVIC_SetPriority+0x4c>)
 800ff26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff2a:	0112      	lsls	r2, r2, #4
 800ff2c:	b2d2      	uxtb	r2, r2
 800ff2e:	440b      	add	r3, r1
 800ff30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ff34:	e00a      	b.n	800ff4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	b2da      	uxtb	r2, r3
 800ff3a:	4908      	ldr	r1, [pc, #32]	; (800ff5c <__NVIC_SetPriority+0x50>)
 800ff3c:	79fb      	ldrb	r3, [r7, #7]
 800ff3e:	f003 030f 	and.w	r3, r3, #15
 800ff42:	3b04      	subs	r3, #4
 800ff44:	0112      	lsls	r2, r2, #4
 800ff46:	b2d2      	uxtb	r2, r2
 800ff48:	440b      	add	r3, r1
 800ff4a:	761a      	strb	r2, [r3, #24]
}
 800ff4c:	bf00      	nop
 800ff4e:	370c      	adds	r7, #12
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr
 800ff58:	e000e100 	.word	0xe000e100
 800ff5c:	e000ed00 	.word	0xe000ed00

0800ff60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ff60:	b580      	push	{r7, lr}
 800ff62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ff64:	4b05      	ldr	r3, [pc, #20]	; (800ff7c <SysTick_Handler+0x1c>)
 800ff66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ff68:	f002 f98c 	bl	8012284 <xTaskGetSchedulerState>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	2b01      	cmp	r3, #1
 800ff70:	d001      	beq.n	800ff76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ff72:	f003 f871 	bl	8013058 <xPortSysTickHandler>
  }
}
 800ff76:	bf00      	nop
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	e000e010 	.word	0xe000e010

0800ff80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ff80:	b580      	push	{r7, lr}
 800ff82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ff84:	2100      	movs	r1, #0
 800ff86:	f06f 0004 	mvn.w	r0, #4
 800ff8a:	f7ff ffbf 	bl	800ff0c <__NVIC_SetPriority>
#endif
}
 800ff8e:	bf00      	nop
 800ff90:	bd80      	pop	{r7, pc}
	...

0800ff94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ff94:	b480      	push	{r7}
 800ff96:	b083      	sub	sp, #12
 800ff98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff9a:	f3ef 8305 	mrs	r3, IPSR
 800ff9e:	603b      	str	r3, [r7, #0]
  return(result);
 800ffa0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d003      	beq.n	800ffae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ffa6:	f06f 0305 	mvn.w	r3, #5
 800ffaa:	607b      	str	r3, [r7, #4]
 800ffac:	e00c      	b.n	800ffc8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ffae:	4b0a      	ldr	r3, [pc, #40]	; (800ffd8 <osKernelInitialize+0x44>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d105      	bne.n	800ffc2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ffb6:	4b08      	ldr	r3, [pc, #32]	; (800ffd8 <osKernelInitialize+0x44>)
 800ffb8:	2201      	movs	r2, #1
 800ffba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	607b      	str	r3, [r7, #4]
 800ffc0:	e002      	b.n	800ffc8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ffc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ffc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ffc8:	687b      	ldr	r3, [r7, #4]
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	370c      	adds	r7, #12
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd4:	4770      	bx	lr
 800ffd6:	bf00      	nop
 800ffd8:	200005c8 	.word	0x200005c8

0800ffdc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffe2:	f3ef 8305 	mrs	r3, IPSR
 800ffe6:	603b      	str	r3, [r7, #0]
  return(result);
 800ffe8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d003      	beq.n	800fff6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ffee:	f06f 0305 	mvn.w	r3, #5
 800fff2:	607b      	str	r3, [r7, #4]
 800fff4:	e010      	b.n	8010018 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fff6:	4b0b      	ldr	r3, [pc, #44]	; (8010024 <osKernelStart+0x48>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	d109      	bne.n	8010012 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fffe:	f7ff ffbf 	bl	800ff80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010002:	4b08      	ldr	r3, [pc, #32]	; (8010024 <osKernelStart+0x48>)
 8010004:	2202      	movs	r2, #2
 8010006:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010008:	f001 fce0 	bl	80119cc <vTaskStartScheduler>
      stat = osOK;
 801000c:	2300      	movs	r3, #0
 801000e:	607b      	str	r3, [r7, #4]
 8010010:	e002      	b.n	8010018 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010016:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010018:	687b      	ldr	r3, [r7, #4]
}
 801001a:	4618      	mov	r0, r3
 801001c:	3708      	adds	r7, #8
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop
 8010024:	200005c8 	.word	0x200005c8

08010028 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010028:	b580      	push	{r7, lr}
 801002a:	b08e      	sub	sp, #56	; 0x38
 801002c:	af04      	add	r7, sp, #16
 801002e:	60f8      	str	r0, [r7, #12]
 8010030:	60b9      	str	r1, [r7, #8]
 8010032:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010034:	2300      	movs	r3, #0
 8010036:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010038:	f3ef 8305 	mrs	r3, IPSR
 801003c:	617b      	str	r3, [r7, #20]
  return(result);
 801003e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010040:	2b00      	cmp	r3, #0
 8010042:	d17e      	bne.n	8010142 <osThreadNew+0x11a>
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d07b      	beq.n	8010142 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801004a:	2380      	movs	r3, #128	; 0x80
 801004c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801004e:	2318      	movs	r3, #24
 8010050:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010052:	2300      	movs	r3, #0
 8010054:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801005a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d045      	beq.n	80100ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d002      	beq.n	8010070 <osThreadNew+0x48>
        name = attr->name;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	699b      	ldr	r3, [r3, #24]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d002      	beq.n	801007e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	699b      	ldr	r3, [r3, #24]
 801007c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801007e:	69fb      	ldr	r3, [r7, #28]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d008      	beq.n	8010096 <osThreadNew+0x6e>
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	2b38      	cmp	r3, #56	; 0x38
 8010088:	d805      	bhi.n	8010096 <osThreadNew+0x6e>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	f003 0301 	and.w	r3, r3, #1
 8010092:	2b00      	cmp	r3, #0
 8010094:	d001      	beq.n	801009a <osThreadNew+0x72>
        return (NULL);
 8010096:	2300      	movs	r3, #0
 8010098:	e054      	b.n	8010144 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	695b      	ldr	r3, [r3, #20]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d003      	beq.n	80100aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	695b      	ldr	r3, [r3, #20]
 80100a6:	089b      	lsrs	r3, r3, #2
 80100a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	689b      	ldr	r3, [r3, #8]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d00e      	beq.n	80100d0 <osThreadNew+0xa8>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	68db      	ldr	r3, [r3, #12]
 80100b6:	2bbb      	cmp	r3, #187	; 0xbb
 80100b8:	d90a      	bls.n	80100d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d006      	beq.n	80100d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	695b      	ldr	r3, [r3, #20]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d002      	beq.n	80100d0 <osThreadNew+0xa8>
        mem = 1;
 80100ca:	2301      	movs	r3, #1
 80100cc:	61bb      	str	r3, [r7, #24]
 80100ce:	e010      	b.n	80100f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	689b      	ldr	r3, [r3, #8]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d10c      	bne.n	80100f2 <osThreadNew+0xca>
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d108      	bne.n	80100f2 <osThreadNew+0xca>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	691b      	ldr	r3, [r3, #16]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d104      	bne.n	80100f2 <osThreadNew+0xca>
          mem = 0;
 80100e8:	2300      	movs	r3, #0
 80100ea:	61bb      	str	r3, [r7, #24]
 80100ec:	e001      	b.n	80100f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80100ee:	2300      	movs	r3, #0
 80100f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	2b01      	cmp	r3, #1
 80100f6:	d110      	bne.n	801011a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80100fc:	687a      	ldr	r2, [r7, #4]
 80100fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010100:	9202      	str	r2, [sp, #8]
 8010102:	9301      	str	r3, [sp, #4]
 8010104:	69fb      	ldr	r3, [r7, #28]
 8010106:	9300      	str	r3, [sp, #0]
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	6a3a      	ldr	r2, [r7, #32]
 801010c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801010e:	68f8      	ldr	r0, [r7, #12]
 8010110:	f001 fa70 	bl	80115f4 <xTaskCreateStatic>
 8010114:	4603      	mov	r3, r0
 8010116:	613b      	str	r3, [r7, #16]
 8010118:	e013      	b.n	8010142 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801011a:	69bb      	ldr	r3, [r7, #24]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d110      	bne.n	8010142 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010120:	6a3b      	ldr	r3, [r7, #32]
 8010122:	b29a      	uxth	r2, r3
 8010124:	f107 0310 	add.w	r3, r7, #16
 8010128:	9301      	str	r3, [sp, #4]
 801012a:	69fb      	ldr	r3, [r7, #28]
 801012c:	9300      	str	r3, [sp, #0]
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010132:	68f8      	ldr	r0, [r7, #12]
 8010134:	f001 fabb 	bl	80116ae <xTaskCreate>
 8010138:	4603      	mov	r3, r0
 801013a:	2b01      	cmp	r3, #1
 801013c:	d001      	beq.n	8010142 <osThreadNew+0x11a>
            hTask = NULL;
 801013e:	2300      	movs	r3, #0
 8010140:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010142:	693b      	ldr	r3, [r7, #16]
}
 8010144:	4618      	mov	r0, r3
 8010146:	3728      	adds	r7, #40	; 0x28
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801014c:	b580      	push	{r7, lr}
 801014e:	b084      	sub	sp, #16
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010154:	f3ef 8305 	mrs	r3, IPSR
 8010158:	60bb      	str	r3, [r7, #8]
  return(result);
 801015a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801015c:	2b00      	cmp	r3, #0
 801015e:	d003      	beq.n	8010168 <osDelay+0x1c>
    stat = osErrorISR;
 8010160:	f06f 0305 	mvn.w	r3, #5
 8010164:	60fb      	str	r3, [r7, #12]
 8010166:	e007      	b.n	8010178 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010168:	2300      	movs	r3, #0
 801016a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d002      	beq.n	8010178 <osDelay+0x2c>
      vTaskDelay(ticks);
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f001 fbf6 	bl	8011964 <vTaskDelay>
    }
  }

  return (stat);
 8010178:	68fb      	ldr	r3, [r7, #12]
}
 801017a:	4618      	mov	r0, r3
 801017c:	3710      	adds	r7, #16
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}

08010182 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010182:	b580      	push	{r7, lr}
 8010184:	b08a      	sub	sp, #40	; 0x28
 8010186:	af02      	add	r7, sp, #8
 8010188:	60f8      	str	r0, [r7, #12]
 801018a:	60b9      	str	r1, [r7, #8]
 801018c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801018e:	2300      	movs	r3, #0
 8010190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010192:	f3ef 8305 	mrs	r3, IPSR
 8010196:	613b      	str	r3, [r7, #16]
  return(result);
 8010198:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801019a:	2b00      	cmp	r3, #0
 801019c:	d175      	bne.n	801028a <osSemaphoreNew+0x108>
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d072      	beq.n	801028a <osSemaphoreNew+0x108>
 80101a4:	68ba      	ldr	r2, [r7, #8]
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d86e      	bhi.n	801028a <osSemaphoreNew+0x108>
    mem = -1;
 80101ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d015      	beq.n	80101e4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	689b      	ldr	r3, [r3, #8]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d006      	beq.n	80101ce <osSemaphoreNew+0x4c>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	68db      	ldr	r3, [r3, #12]
 80101c4:	2b4f      	cmp	r3, #79	; 0x4f
 80101c6:	d902      	bls.n	80101ce <osSemaphoreNew+0x4c>
        mem = 1;
 80101c8:	2301      	movs	r3, #1
 80101ca:	61bb      	str	r3, [r7, #24]
 80101cc:	e00c      	b.n	80101e8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	689b      	ldr	r3, [r3, #8]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d108      	bne.n	80101e8 <osSemaphoreNew+0x66>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	68db      	ldr	r3, [r3, #12]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d104      	bne.n	80101e8 <osSemaphoreNew+0x66>
          mem = 0;
 80101de:	2300      	movs	r3, #0
 80101e0:	61bb      	str	r3, [r7, #24]
 80101e2:	e001      	b.n	80101e8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80101e4:	2300      	movs	r3, #0
 80101e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80101e8:	69bb      	ldr	r3, [r7, #24]
 80101ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101ee:	d04c      	beq.n	801028a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	2b01      	cmp	r3, #1
 80101f4:	d128      	bne.n	8010248 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80101f6:	69bb      	ldr	r3, [r7, #24]
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d10a      	bne.n	8010212 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	689b      	ldr	r3, [r3, #8]
 8010200:	2203      	movs	r2, #3
 8010202:	9200      	str	r2, [sp, #0]
 8010204:	2200      	movs	r2, #0
 8010206:	2100      	movs	r1, #0
 8010208:	2001      	movs	r0, #1
 801020a:	f000 fa4d 	bl	80106a8 <xQueueGenericCreateStatic>
 801020e:	61f8      	str	r0, [r7, #28]
 8010210:	e005      	b.n	801021e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8010212:	2203      	movs	r2, #3
 8010214:	2100      	movs	r1, #0
 8010216:	2001      	movs	r0, #1
 8010218:	f000 fabe 	bl	8010798 <xQueueGenericCreate>
 801021c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801021e:	69fb      	ldr	r3, [r7, #28]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d022      	beq.n	801026a <osSemaphoreNew+0xe8>
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d01f      	beq.n	801026a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801022a:	2300      	movs	r3, #0
 801022c:	2200      	movs	r2, #0
 801022e:	2100      	movs	r1, #0
 8010230:	69f8      	ldr	r0, [r7, #28]
 8010232:	f000 fb79 	bl	8010928 <xQueueGenericSend>
 8010236:	4603      	mov	r3, r0
 8010238:	2b01      	cmp	r3, #1
 801023a:	d016      	beq.n	801026a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801023c:	69f8      	ldr	r0, [r7, #28]
 801023e:	f001 f805 	bl	801124c <vQueueDelete>
            hSemaphore = NULL;
 8010242:	2300      	movs	r3, #0
 8010244:	61fb      	str	r3, [r7, #28]
 8010246:	e010      	b.n	801026a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	2b01      	cmp	r3, #1
 801024c:	d108      	bne.n	8010260 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	689b      	ldr	r3, [r3, #8]
 8010252:	461a      	mov	r2, r3
 8010254:	68b9      	ldr	r1, [r7, #8]
 8010256:	68f8      	ldr	r0, [r7, #12]
 8010258:	f000 fafb 	bl	8010852 <xQueueCreateCountingSemaphoreStatic>
 801025c:	61f8      	str	r0, [r7, #28]
 801025e:	e004      	b.n	801026a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010260:	68b9      	ldr	r1, [r7, #8]
 8010262:	68f8      	ldr	r0, [r7, #12]
 8010264:	f000 fb2c 	bl	80108c0 <xQueueCreateCountingSemaphore>
 8010268:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801026a:	69fb      	ldr	r3, [r7, #28]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d00c      	beq.n	801028a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d003      	beq.n	801027e <osSemaphoreNew+0xfc>
          name = attr->name;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	617b      	str	r3, [r7, #20]
 801027c:	e001      	b.n	8010282 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801027e:	2300      	movs	r3, #0
 8010280:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010282:	6979      	ldr	r1, [r7, #20]
 8010284:	69f8      	ldr	r0, [r7, #28]
 8010286:	f001 f92d 	bl	80114e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801028a:	69fb      	ldr	r3, [r7, #28]
}
 801028c:	4618      	mov	r0, r3
 801028e:	3720      	adds	r7, #32
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}

08010294 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010294:	b580      	push	{r7, lr}
 8010296:	b086      	sub	sp, #24
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80102a2:	2300      	movs	r3, #0
 80102a4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d103      	bne.n	80102b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80102ac:	f06f 0303 	mvn.w	r3, #3
 80102b0:	617b      	str	r3, [r7, #20]
 80102b2:	e039      	b.n	8010328 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102b4:	f3ef 8305 	mrs	r3, IPSR
 80102b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80102ba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d022      	beq.n	8010306 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d003      	beq.n	80102ce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80102c6:	f06f 0303 	mvn.w	r3, #3
 80102ca:	617b      	str	r3, [r7, #20]
 80102cc:	e02c      	b.n	8010328 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80102ce:	2300      	movs	r3, #0
 80102d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80102d2:	f107 0308 	add.w	r3, r7, #8
 80102d6:	461a      	mov	r2, r3
 80102d8:	2100      	movs	r1, #0
 80102da:	6938      	ldr	r0, [r7, #16]
 80102dc:	f000 ff36 	bl	801114c <xQueueReceiveFromISR>
 80102e0:	4603      	mov	r3, r0
 80102e2:	2b01      	cmp	r3, #1
 80102e4:	d003      	beq.n	80102ee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80102e6:	f06f 0302 	mvn.w	r3, #2
 80102ea:	617b      	str	r3, [r7, #20]
 80102ec:	e01c      	b.n	8010328 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d019      	beq.n	8010328 <osSemaphoreAcquire+0x94>
 80102f4:	4b0f      	ldr	r3, [pc, #60]	; (8010334 <osSemaphoreAcquire+0xa0>)
 80102f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102fa:	601a      	str	r2, [r3, #0]
 80102fc:	f3bf 8f4f 	dsb	sy
 8010300:	f3bf 8f6f 	isb	sy
 8010304:	e010      	b.n	8010328 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010306:	6839      	ldr	r1, [r7, #0]
 8010308:	6938      	ldr	r0, [r7, #16]
 801030a:	f000 fe13 	bl	8010f34 <xQueueSemaphoreTake>
 801030e:	4603      	mov	r3, r0
 8010310:	2b01      	cmp	r3, #1
 8010312:	d009      	beq.n	8010328 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d003      	beq.n	8010322 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801031a:	f06f 0301 	mvn.w	r3, #1
 801031e:	617b      	str	r3, [r7, #20]
 8010320:	e002      	b.n	8010328 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8010322:	f06f 0302 	mvn.w	r3, #2
 8010326:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8010328:	697b      	ldr	r3, [r7, #20]
}
 801032a:	4618      	mov	r0, r3
 801032c:	3718      	adds	r7, #24
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	e000ed04 	.word	0xe000ed04

08010338 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010338:	b580      	push	{r7, lr}
 801033a:	b086      	sub	sp, #24
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010344:	2300      	movs	r3, #0
 8010346:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d103      	bne.n	8010356 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801034e:	f06f 0303 	mvn.w	r3, #3
 8010352:	617b      	str	r3, [r7, #20]
 8010354:	e02c      	b.n	80103b0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010356:	f3ef 8305 	mrs	r3, IPSR
 801035a:	60fb      	str	r3, [r7, #12]
  return(result);
 801035c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801035e:	2b00      	cmp	r3, #0
 8010360:	d01a      	beq.n	8010398 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8010362:	2300      	movs	r3, #0
 8010364:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010366:	f107 0308 	add.w	r3, r7, #8
 801036a:	4619      	mov	r1, r3
 801036c:	6938      	ldr	r0, [r7, #16]
 801036e:	f000 fc74 	bl	8010c5a <xQueueGiveFromISR>
 8010372:	4603      	mov	r3, r0
 8010374:	2b01      	cmp	r3, #1
 8010376:	d003      	beq.n	8010380 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8010378:	f06f 0302 	mvn.w	r3, #2
 801037c:	617b      	str	r3, [r7, #20]
 801037e:	e017      	b.n	80103b0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d014      	beq.n	80103b0 <osSemaphoreRelease+0x78>
 8010386:	4b0d      	ldr	r3, [pc, #52]	; (80103bc <osSemaphoreRelease+0x84>)
 8010388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801038c:	601a      	str	r2, [r3, #0]
 801038e:	f3bf 8f4f 	dsb	sy
 8010392:	f3bf 8f6f 	isb	sy
 8010396:	e00b      	b.n	80103b0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010398:	2300      	movs	r3, #0
 801039a:	2200      	movs	r2, #0
 801039c:	2100      	movs	r1, #0
 801039e:	6938      	ldr	r0, [r7, #16]
 80103a0:	f000 fac2 	bl	8010928 <xQueueGenericSend>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	d002      	beq.n	80103b0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80103aa:	f06f 0302 	mvn.w	r3, #2
 80103ae:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80103b0:	697b      	ldr	r3, [r7, #20]
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3718      	adds	r7, #24
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	bf00      	nop
 80103bc:	e000ed04 	.word	0xe000ed04

080103c0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b086      	sub	sp, #24
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103cc:	f3ef 8305 	mrs	r3, IPSR
 80103d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80103d2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d003      	beq.n	80103e0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80103d8:	f06f 0305 	mvn.w	r3, #5
 80103dc:	617b      	str	r3, [r7, #20]
 80103de:	e00e      	b.n	80103fe <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d103      	bne.n	80103ee <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80103e6:	f06f 0303 	mvn.w	r3, #3
 80103ea:	617b      	str	r3, [r7, #20]
 80103ec:	e007      	b.n	80103fe <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80103ee:	6938      	ldr	r0, [r7, #16]
 80103f0:	f001 f8a2 	bl	8011538 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80103f4:	2300      	movs	r3, #0
 80103f6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80103f8:	6938      	ldr	r0, [r7, #16]
 80103fa:	f000 ff27 	bl	801124c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80103fe:	697b      	ldr	r3, [r7, #20]
}
 8010400:	4618      	mov	r0, r3
 8010402:	3718      	adds	r7, #24
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}

08010408 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010408:	b480      	push	{r7}
 801040a:	b085      	sub	sp, #20
 801040c:	af00      	add	r7, sp, #0
 801040e:	60f8      	str	r0, [r7, #12]
 8010410:	60b9      	str	r1, [r7, #8]
 8010412:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	4a07      	ldr	r2, [pc, #28]	; (8010434 <vApplicationGetIdleTaskMemory+0x2c>)
 8010418:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	4a06      	ldr	r2, [pc, #24]	; (8010438 <vApplicationGetIdleTaskMemory+0x30>)
 801041e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2280      	movs	r2, #128	; 0x80
 8010424:	601a      	str	r2, [r3, #0]
}
 8010426:	bf00      	nop
 8010428:	3714      	adds	r7, #20
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr
 8010432:	bf00      	nop
 8010434:	200005cc 	.word	0x200005cc
 8010438:	20000688 	.word	0x20000688

0801043c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801043c:	b480      	push	{r7}
 801043e:	b085      	sub	sp, #20
 8010440:	af00      	add	r7, sp, #0
 8010442:	60f8      	str	r0, [r7, #12]
 8010444:	60b9      	str	r1, [r7, #8]
 8010446:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	4a07      	ldr	r2, [pc, #28]	; (8010468 <vApplicationGetTimerTaskMemory+0x2c>)
 801044c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	4a06      	ldr	r2, [pc, #24]	; (801046c <vApplicationGetTimerTaskMemory+0x30>)
 8010452:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f44f 7280 	mov.w	r2, #256	; 0x100
 801045a:	601a      	str	r2, [r3, #0]
}
 801045c:	bf00      	nop
 801045e:	3714      	adds	r7, #20
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr
 8010468:	20000888 	.word	0x20000888
 801046c:	20000944 	.word	0x20000944

08010470 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f103 0208 	add.w	r2, r3, #8
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010488:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f103 0208 	add.w	r2, r3, #8
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f103 0208 	add.w	r2, r3, #8
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2200      	movs	r2, #0
 80104a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80104a4:	bf00      	nop
 80104a6:	370c      	adds	r7, #12
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80104b0:	b480      	push	{r7}
 80104b2:	b083      	sub	sp, #12
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2200      	movs	r2, #0
 80104bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80104be:	bf00      	nop
 80104c0:	370c      	adds	r7, #12
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr

080104ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80104ca:	b480      	push	{r7}
 80104cc:	b085      	sub	sp, #20
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
 80104d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	68fa      	ldr	r2, [r7, #12]
 80104de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	689a      	ldr	r2, [r3, #8]
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	689b      	ldr	r3, [r3, #8]
 80104ec:	683a      	ldr	r2, [r7, #0]
 80104ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	683a      	ldr	r2, [r7, #0]
 80104f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	1c5a      	adds	r2, r3, #1
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	601a      	str	r2, [r3, #0]
}
 8010506:	bf00      	nop
 8010508:	3714      	adds	r7, #20
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr

08010512 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010512:	b480      	push	{r7}
 8010514:	b085      	sub	sp, #20
 8010516:	af00      	add	r7, sp, #0
 8010518:	6078      	str	r0, [r7, #4]
 801051a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010528:	d103      	bne.n	8010532 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	691b      	ldr	r3, [r3, #16]
 801052e:	60fb      	str	r3, [r7, #12]
 8010530:	e00c      	b.n	801054c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	3308      	adds	r3, #8
 8010536:	60fb      	str	r3, [r7, #12]
 8010538:	e002      	b.n	8010540 <vListInsert+0x2e>
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	60fb      	str	r3, [r7, #12]
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	68ba      	ldr	r2, [r7, #8]
 8010548:	429a      	cmp	r2, r3
 801054a:	d2f6      	bcs.n	801053a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	685a      	ldr	r2, [r3, #4]
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	683a      	ldr	r2, [r7, #0]
 801055a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	68fa      	ldr	r2, [r7, #12]
 8010560:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	683a      	ldr	r2, [r7, #0]
 8010566:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	687a      	ldr	r2, [r7, #4]
 801056c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	1c5a      	adds	r2, r3, #1
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	601a      	str	r2, [r3, #0]
}
 8010578:	bf00      	nop
 801057a:	3714      	adds	r7, #20
 801057c:	46bd      	mov	sp, r7
 801057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010582:	4770      	bx	lr

08010584 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010584:	b480      	push	{r7}
 8010586:	b085      	sub	sp, #20
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	691b      	ldr	r3, [r3, #16]
 8010590:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	685b      	ldr	r3, [r3, #4]
 8010596:	687a      	ldr	r2, [r7, #4]
 8010598:	6892      	ldr	r2, [r2, #8]
 801059a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	6852      	ldr	r2, [r2, #4]
 80105a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	687a      	ldr	r2, [r7, #4]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d103      	bne.n	80105b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	689a      	ldr	r2, [r3, #8]
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	1e5a      	subs	r2, r3, #1
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	681b      	ldr	r3, [r3, #0]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3714      	adds	r7, #20
 80105d0:	46bd      	mov	sp, r7
 80105d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d6:	4770      	bx	lr

080105d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d10a      	bne.n	8010602 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80105ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f0:	f383 8811 	msr	BASEPRI, r3
 80105f4:	f3bf 8f6f 	isb	sy
 80105f8:	f3bf 8f4f 	dsb	sy
 80105fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80105fe:	bf00      	nop
 8010600:	e7fe      	b.n	8010600 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010602:	f002 fc97 	bl	8012f34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	681a      	ldr	r2, [r3, #0]
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801060e:	68f9      	ldr	r1, [r7, #12]
 8010610:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010612:	fb01 f303 	mul.w	r3, r1, r3
 8010616:	441a      	add	r2, r3
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2200      	movs	r2, #0
 8010620:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	681a      	ldr	r2, [r3, #0]
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	681a      	ldr	r2, [r3, #0]
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010632:	3b01      	subs	r3, #1
 8010634:	68f9      	ldr	r1, [r7, #12]
 8010636:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010638:	fb01 f303 	mul.w	r3, r1, r3
 801063c:	441a      	add	r2, r3
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	22ff      	movs	r2, #255	; 0xff
 8010646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	22ff      	movs	r2, #255	; 0xff
 801064e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d114      	bne.n	8010682 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	691b      	ldr	r3, [r3, #16]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d01a      	beq.n	8010696 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	3310      	adds	r3, #16
 8010664:	4618      	mov	r0, r3
 8010666:	f001 fc4b 	bl	8011f00 <xTaskRemoveFromEventList>
 801066a:	4603      	mov	r3, r0
 801066c:	2b00      	cmp	r3, #0
 801066e:	d012      	beq.n	8010696 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010670:	4b0c      	ldr	r3, [pc, #48]	; (80106a4 <xQueueGenericReset+0xcc>)
 8010672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010676:	601a      	str	r2, [r3, #0]
 8010678:	f3bf 8f4f 	dsb	sy
 801067c:	f3bf 8f6f 	isb	sy
 8010680:	e009      	b.n	8010696 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	3310      	adds	r3, #16
 8010686:	4618      	mov	r0, r3
 8010688:	f7ff fef2 	bl	8010470 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	3324      	adds	r3, #36	; 0x24
 8010690:	4618      	mov	r0, r3
 8010692:	f7ff feed 	bl	8010470 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010696:	f002 fc7d 	bl	8012f94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801069a:	2301      	movs	r3, #1
}
 801069c:	4618      	mov	r0, r3
 801069e:	3710      	adds	r7, #16
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	e000ed04 	.word	0xe000ed04

080106a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b08e      	sub	sp, #56	; 0x38
 80106ac:	af02      	add	r7, sp, #8
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	607a      	str	r2, [r7, #4]
 80106b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d10a      	bne.n	80106d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80106bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c0:	f383 8811 	msr	BASEPRI, r3
 80106c4:	f3bf 8f6f 	isb	sy
 80106c8:	f3bf 8f4f 	dsb	sy
 80106cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80106ce:	bf00      	nop
 80106d0:	e7fe      	b.n	80106d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d10a      	bne.n	80106ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80106d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106dc:	f383 8811 	msr	BASEPRI, r3
 80106e0:	f3bf 8f6f 	isb	sy
 80106e4:	f3bf 8f4f 	dsb	sy
 80106e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80106ea:	bf00      	nop
 80106ec:	e7fe      	b.n	80106ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d002      	beq.n	80106fa <xQueueGenericCreateStatic+0x52>
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d001      	beq.n	80106fe <xQueueGenericCreateStatic+0x56>
 80106fa:	2301      	movs	r3, #1
 80106fc:	e000      	b.n	8010700 <xQueueGenericCreateStatic+0x58>
 80106fe:	2300      	movs	r3, #0
 8010700:	2b00      	cmp	r3, #0
 8010702:	d10a      	bne.n	801071a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010708:	f383 8811 	msr	BASEPRI, r3
 801070c:	f3bf 8f6f 	isb	sy
 8010710:	f3bf 8f4f 	dsb	sy
 8010714:	623b      	str	r3, [r7, #32]
}
 8010716:	bf00      	nop
 8010718:	e7fe      	b.n	8010718 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d102      	bne.n	8010726 <xQueueGenericCreateStatic+0x7e>
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d101      	bne.n	801072a <xQueueGenericCreateStatic+0x82>
 8010726:	2301      	movs	r3, #1
 8010728:	e000      	b.n	801072c <xQueueGenericCreateStatic+0x84>
 801072a:	2300      	movs	r3, #0
 801072c:	2b00      	cmp	r3, #0
 801072e:	d10a      	bne.n	8010746 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010734:	f383 8811 	msr	BASEPRI, r3
 8010738:	f3bf 8f6f 	isb	sy
 801073c:	f3bf 8f4f 	dsb	sy
 8010740:	61fb      	str	r3, [r7, #28]
}
 8010742:	bf00      	nop
 8010744:	e7fe      	b.n	8010744 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010746:	2350      	movs	r3, #80	; 0x50
 8010748:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	2b50      	cmp	r3, #80	; 0x50
 801074e:	d00a      	beq.n	8010766 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010754:	f383 8811 	msr	BASEPRI, r3
 8010758:	f3bf 8f6f 	isb	sy
 801075c:	f3bf 8f4f 	dsb	sy
 8010760:	61bb      	str	r3, [r7, #24]
}
 8010762:	bf00      	nop
 8010764:	e7fe      	b.n	8010764 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010766:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801076c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076e:	2b00      	cmp	r3, #0
 8010770:	d00d      	beq.n	801078e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010774:	2201      	movs	r2, #1
 8010776:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801077a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010780:	9300      	str	r3, [sp, #0]
 8010782:	4613      	mov	r3, r2
 8010784:	687a      	ldr	r2, [r7, #4]
 8010786:	68b9      	ldr	r1, [r7, #8]
 8010788:	68f8      	ldr	r0, [r7, #12]
 801078a:	f000 f83f 	bl	801080c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801078e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010790:	4618      	mov	r0, r3
 8010792:	3730      	adds	r7, #48	; 0x30
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010798:	b580      	push	{r7, lr}
 801079a:	b08a      	sub	sp, #40	; 0x28
 801079c:	af02      	add	r7, sp, #8
 801079e:	60f8      	str	r0, [r7, #12]
 80107a0:	60b9      	str	r1, [r7, #8]
 80107a2:	4613      	mov	r3, r2
 80107a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d10a      	bne.n	80107c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80107ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b0:	f383 8811 	msr	BASEPRI, r3
 80107b4:	f3bf 8f6f 	isb	sy
 80107b8:	f3bf 8f4f 	dsb	sy
 80107bc:	613b      	str	r3, [r7, #16]
}
 80107be:	bf00      	nop
 80107c0:	e7fe      	b.n	80107c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	68ba      	ldr	r2, [r7, #8]
 80107c6:	fb02 f303 	mul.w	r3, r2, r3
 80107ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80107cc:	69fb      	ldr	r3, [r7, #28]
 80107ce:	3350      	adds	r3, #80	; 0x50
 80107d0:	4618      	mov	r0, r3
 80107d2:	f002 fcd1 	bl	8013178 <pvPortMalloc>
 80107d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80107d8:	69bb      	ldr	r3, [r7, #24]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d011      	beq.n	8010802 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80107de:	69bb      	ldr	r3, [r7, #24]
 80107e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	3350      	adds	r3, #80	; 0x50
 80107e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80107e8:	69bb      	ldr	r3, [r7, #24]
 80107ea:	2200      	movs	r2, #0
 80107ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80107f0:	79fa      	ldrb	r2, [r7, #7]
 80107f2:	69bb      	ldr	r3, [r7, #24]
 80107f4:	9300      	str	r3, [sp, #0]
 80107f6:	4613      	mov	r3, r2
 80107f8:	697a      	ldr	r2, [r7, #20]
 80107fa:	68b9      	ldr	r1, [r7, #8]
 80107fc:	68f8      	ldr	r0, [r7, #12]
 80107fe:	f000 f805 	bl	801080c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010802:	69bb      	ldr	r3, [r7, #24]
	}
 8010804:	4618      	mov	r0, r3
 8010806:	3720      	adds	r7, #32
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}

0801080c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b084      	sub	sp, #16
 8010810:	af00      	add	r7, sp, #0
 8010812:	60f8      	str	r0, [r7, #12]
 8010814:	60b9      	str	r1, [r7, #8]
 8010816:	607a      	str	r2, [r7, #4]
 8010818:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d103      	bne.n	8010828 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010820:	69bb      	ldr	r3, [r7, #24]
 8010822:	69ba      	ldr	r2, [r7, #24]
 8010824:	601a      	str	r2, [r3, #0]
 8010826:	e002      	b.n	801082e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010828:	69bb      	ldr	r3, [r7, #24]
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801082e:	69bb      	ldr	r3, [r7, #24]
 8010830:	68fa      	ldr	r2, [r7, #12]
 8010832:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010834:	69bb      	ldr	r3, [r7, #24]
 8010836:	68ba      	ldr	r2, [r7, #8]
 8010838:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801083a:	2101      	movs	r1, #1
 801083c:	69b8      	ldr	r0, [r7, #24]
 801083e:	f7ff fecb 	bl	80105d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010842:	69bb      	ldr	r3, [r7, #24]
 8010844:	78fa      	ldrb	r2, [r7, #3]
 8010846:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801084a:	bf00      	nop
 801084c:	3710      	adds	r7, #16
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}

08010852 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010852:	b580      	push	{r7, lr}
 8010854:	b08a      	sub	sp, #40	; 0x28
 8010856:	af02      	add	r7, sp, #8
 8010858:	60f8      	str	r0, [r7, #12]
 801085a:	60b9      	str	r1, [r7, #8]
 801085c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d10a      	bne.n	801087a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8010864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010868:	f383 8811 	msr	BASEPRI, r3
 801086c:	f3bf 8f6f 	isb	sy
 8010870:	f3bf 8f4f 	dsb	sy
 8010874:	61bb      	str	r3, [r7, #24]
}
 8010876:	bf00      	nop
 8010878:	e7fe      	b.n	8010878 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801087a:	68ba      	ldr	r2, [r7, #8]
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	429a      	cmp	r2, r3
 8010880:	d90a      	bls.n	8010898 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010886:	f383 8811 	msr	BASEPRI, r3
 801088a:	f3bf 8f6f 	isb	sy
 801088e:	f3bf 8f4f 	dsb	sy
 8010892:	617b      	str	r3, [r7, #20]
}
 8010894:	bf00      	nop
 8010896:	e7fe      	b.n	8010896 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010898:	2302      	movs	r3, #2
 801089a:	9300      	str	r3, [sp, #0]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2200      	movs	r2, #0
 80108a0:	2100      	movs	r1, #0
 80108a2:	68f8      	ldr	r0, [r7, #12]
 80108a4:	f7ff ff00 	bl	80106a8 <xQueueGenericCreateStatic>
 80108a8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80108aa:	69fb      	ldr	r3, [r7, #28]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d002      	beq.n	80108b6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80108b0:	69fb      	ldr	r3, [r7, #28]
 80108b2:	68ba      	ldr	r2, [r7, #8]
 80108b4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80108b6:	69fb      	ldr	r3, [r7, #28]
	}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3720      	adds	r7, #32
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b086      	sub	sp, #24
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d10a      	bne.n	80108e6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80108d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d4:	f383 8811 	msr	BASEPRI, r3
 80108d8:	f3bf 8f6f 	isb	sy
 80108dc:	f3bf 8f4f 	dsb	sy
 80108e0:	613b      	str	r3, [r7, #16]
}
 80108e2:	bf00      	nop
 80108e4:	e7fe      	b.n	80108e4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80108e6:	683a      	ldr	r2, [r7, #0]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d90a      	bls.n	8010904 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80108ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108f2:	f383 8811 	msr	BASEPRI, r3
 80108f6:	f3bf 8f6f 	isb	sy
 80108fa:	f3bf 8f4f 	dsb	sy
 80108fe:	60fb      	str	r3, [r7, #12]
}
 8010900:	bf00      	nop
 8010902:	e7fe      	b.n	8010902 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010904:	2202      	movs	r2, #2
 8010906:	2100      	movs	r1, #0
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f7ff ff45 	bl	8010798 <xQueueGenericCreate>
 801090e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d002      	beq.n	801091c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	683a      	ldr	r2, [r7, #0]
 801091a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801091c:	697b      	ldr	r3, [r7, #20]
	}
 801091e:	4618      	mov	r0, r3
 8010920:	3718      	adds	r7, #24
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
	...

08010928 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b08e      	sub	sp, #56	; 0x38
 801092c:	af00      	add	r7, sp, #0
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	607a      	str	r2, [r7, #4]
 8010934:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010936:	2300      	movs	r3, #0
 8010938:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801093e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010940:	2b00      	cmp	r3, #0
 8010942:	d10a      	bne.n	801095a <xQueueGenericSend+0x32>
	__asm volatile
 8010944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010948:	f383 8811 	msr	BASEPRI, r3
 801094c:	f3bf 8f6f 	isb	sy
 8010950:	f3bf 8f4f 	dsb	sy
 8010954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010956:	bf00      	nop
 8010958:	e7fe      	b.n	8010958 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d103      	bne.n	8010968 <xQueueGenericSend+0x40>
 8010960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010964:	2b00      	cmp	r3, #0
 8010966:	d101      	bne.n	801096c <xQueueGenericSend+0x44>
 8010968:	2301      	movs	r3, #1
 801096a:	e000      	b.n	801096e <xQueueGenericSend+0x46>
 801096c:	2300      	movs	r3, #0
 801096e:	2b00      	cmp	r3, #0
 8010970:	d10a      	bne.n	8010988 <xQueueGenericSend+0x60>
	__asm volatile
 8010972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010976:	f383 8811 	msr	BASEPRI, r3
 801097a:	f3bf 8f6f 	isb	sy
 801097e:	f3bf 8f4f 	dsb	sy
 8010982:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010984:	bf00      	nop
 8010986:	e7fe      	b.n	8010986 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	2b02      	cmp	r3, #2
 801098c:	d103      	bne.n	8010996 <xQueueGenericSend+0x6e>
 801098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010992:	2b01      	cmp	r3, #1
 8010994:	d101      	bne.n	801099a <xQueueGenericSend+0x72>
 8010996:	2301      	movs	r3, #1
 8010998:	e000      	b.n	801099c <xQueueGenericSend+0x74>
 801099a:	2300      	movs	r3, #0
 801099c:	2b00      	cmp	r3, #0
 801099e:	d10a      	bne.n	80109b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80109a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109a4:	f383 8811 	msr	BASEPRI, r3
 80109a8:	f3bf 8f6f 	isb	sy
 80109ac:	f3bf 8f4f 	dsb	sy
 80109b0:	623b      	str	r3, [r7, #32]
}
 80109b2:	bf00      	nop
 80109b4:	e7fe      	b.n	80109b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80109b6:	f001 fc65 	bl	8012284 <xTaskGetSchedulerState>
 80109ba:	4603      	mov	r3, r0
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d102      	bne.n	80109c6 <xQueueGenericSend+0x9e>
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d101      	bne.n	80109ca <xQueueGenericSend+0xa2>
 80109c6:	2301      	movs	r3, #1
 80109c8:	e000      	b.n	80109cc <xQueueGenericSend+0xa4>
 80109ca:	2300      	movs	r3, #0
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d10a      	bne.n	80109e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80109d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d4:	f383 8811 	msr	BASEPRI, r3
 80109d8:	f3bf 8f6f 	isb	sy
 80109dc:	f3bf 8f4f 	dsb	sy
 80109e0:	61fb      	str	r3, [r7, #28]
}
 80109e2:	bf00      	nop
 80109e4:	e7fe      	b.n	80109e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80109e6:	f002 faa5 	bl	8012f34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80109ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d302      	bcc.n	80109fc <xQueueGenericSend+0xd4>
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	2b02      	cmp	r3, #2
 80109fa:	d129      	bne.n	8010a50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80109fc:	683a      	ldr	r2, [r7, #0]
 80109fe:	68b9      	ldr	r1, [r7, #8]
 8010a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a02:	f000 fc5e 	bl	80112c2 <prvCopyDataToQueue>
 8010a06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d010      	beq.n	8010a32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a12:	3324      	adds	r3, #36	; 0x24
 8010a14:	4618      	mov	r0, r3
 8010a16:	f001 fa73 	bl	8011f00 <xTaskRemoveFromEventList>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d013      	beq.n	8010a48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010a20:	4b3f      	ldr	r3, [pc, #252]	; (8010b20 <xQueueGenericSend+0x1f8>)
 8010a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a26:	601a      	str	r2, [r3, #0]
 8010a28:	f3bf 8f4f 	dsb	sy
 8010a2c:	f3bf 8f6f 	isb	sy
 8010a30:	e00a      	b.n	8010a48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d007      	beq.n	8010a48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010a38:	4b39      	ldr	r3, [pc, #228]	; (8010b20 <xQueueGenericSend+0x1f8>)
 8010a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a3e:	601a      	str	r2, [r3, #0]
 8010a40:	f3bf 8f4f 	dsb	sy
 8010a44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010a48:	f002 faa4 	bl	8012f94 <vPortExitCritical>
				return pdPASS;
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	e063      	b.n	8010b18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d103      	bne.n	8010a5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010a56:	f002 fa9d 	bl	8012f94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	e05c      	b.n	8010b18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d106      	bne.n	8010a72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a64:	f107 0314 	add.w	r3, r7, #20
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f001 faad 	bl	8011fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010a6e:	2301      	movs	r3, #1
 8010a70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010a72:	f002 fa8f 	bl	8012f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a76:	f001 f819 	bl	8011aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a7a:	f002 fa5b 	bl	8012f34 <vPortEnterCritical>
 8010a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a84:	b25b      	sxtb	r3, r3
 8010a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a8a:	d103      	bne.n	8010a94 <xQueueGenericSend+0x16c>
 8010a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a8e:	2200      	movs	r2, #0
 8010a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a9a:	b25b      	sxtb	r3, r3
 8010a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010aa0:	d103      	bne.n	8010aaa <xQueueGenericSend+0x182>
 8010aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010aaa:	f002 fa73 	bl	8012f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010aae:	1d3a      	adds	r2, r7, #4
 8010ab0:	f107 0314 	add.w	r3, r7, #20
 8010ab4:	4611      	mov	r1, r2
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f001 fa9c 	bl	8011ff4 <xTaskCheckForTimeOut>
 8010abc:	4603      	mov	r3, r0
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d124      	bne.n	8010b0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010ac2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ac4:	f000 fcf5 	bl	80114b2 <prvIsQueueFull>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d018      	beq.n	8010b00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad0:	3310      	adds	r3, #16
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	4611      	mov	r1, r2
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f001 f9c2 	bl	8011e60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ade:	f000 fc80 	bl	80113e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010ae2:	f000 fff1 	bl	8011ac8 <xTaskResumeAll>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	f47f af7c 	bne.w	80109e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010aee:	4b0c      	ldr	r3, [pc, #48]	; (8010b20 <xQueueGenericSend+0x1f8>)
 8010af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010af4:	601a      	str	r2, [r3, #0]
 8010af6:	f3bf 8f4f 	dsb	sy
 8010afa:	f3bf 8f6f 	isb	sy
 8010afe:	e772      	b.n	80109e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b02:	f000 fc6e 	bl	80113e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010b06:	f000 ffdf 	bl	8011ac8 <xTaskResumeAll>
 8010b0a:	e76c      	b.n	80109e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b0e:	f000 fc68 	bl	80113e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010b12:	f000 ffd9 	bl	8011ac8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010b16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3738      	adds	r7, #56	; 0x38
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	e000ed04 	.word	0xe000ed04

08010b24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b090      	sub	sp, #64	; 0x40
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	607a      	str	r2, [r7, #4]
 8010b30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d10a      	bne.n	8010b52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b40:	f383 8811 	msr	BASEPRI, r3
 8010b44:	f3bf 8f6f 	isb	sy
 8010b48:	f3bf 8f4f 	dsb	sy
 8010b4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010b4e:	bf00      	nop
 8010b50:	e7fe      	b.n	8010b50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d103      	bne.n	8010b60 <xQueueGenericSendFromISR+0x3c>
 8010b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d101      	bne.n	8010b64 <xQueueGenericSendFromISR+0x40>
 8010b60:	2301      	movs	r3, #1
 8010b62:	e000      	b.n	8010b66 <xQueueGenericSendFromISR+0x42>
 8010b64:	2300      	movs	r3, #0
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d10a      	bne.n	8010b80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b6e:	f383 8811 	msr	BASEPRI, r3
 8010b72:	f3bf 8f6f 	isb	sy
 8010b76:	f3bf 8f4f 	dsb	sy
 8010b7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010b7c:	bf00      	nop
 8010b7e:	e7fe      	b.n	8010b7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	2b02      	cmp	r3, #2
 8010b84:	d103      	bne.n	8010b8e <xQueueGenericSendFromISR+0x6a>
 8010b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b8a:	2b01      	cmp	r3, #1
 8010b8c:	d101      	bne.n	8010b92 <xQueueGenericSendFromISR+0x6e>
 8010b8e:	2301      	movs	r3, #1
 8010b90:	e000      	b.n	8010b94 <xQueueGenericSendFromISR+0x70>
 8010b92:	2300      	movs	r3, #0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d10a      	bne.n	8010bae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b9c:	f383 8811 	msr	BASEPRI, r3
 8010ba0:	f3bf 8f6f 	isb	sy
 8010ba4:	f3bf 8f4f 	dsb	sy
 8010ba8:	623b      	str	r3, [r7, #32]
}
 8010baa:	bf00      	nop
 8010bac:	e7fe      	b.n	8010bac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010bae:	f002 faa3 	bl	80130f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010bb2:	f3ef 8211 	mrs	r2, BASEPRI
 8010bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bba:	f383 8811 	msr	BASEPRI, r3
 8010bbe:	f3bf 8f6f 	isb	sy
 8010bc2:	f3bf 8f4f 	dsb	sy
 8010bc6:	61fa      	str	r2, [r7, #28]
 8010bc8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010bca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010bcc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d302      	bcc.n	8010be0 <xQueueGenericSendFromISR+0xbc>
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	2b02      	cmp	r3, #2
 8010bde:	d12f      	bne.n	8010c40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010be2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010bf0:	683a      	ldr	r2, [r7, #0]
 8010bf2:	68b9      	ldr	r1, [r7, #8]
 8010bf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010bf6:	f000 fb64 	bl	80112c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010bfa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c02:	d112      	bne.n	8010c2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d016      	beq.n	8010c3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c0e:	3324      	adds	r3, #36	; 0x24
 8010c10:	4618      	mov	r0, r3
 8010c12:	f001 f975 	bl	8011f00 <xTaskRemoveFromEventList>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d00e      	beq.n	8010c3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d00b      	beq.n	8010c3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2201      	movs	r2, #1
 8010c26:	601a      	str	r2, [r3, #0]
 8010c28:	e007      	b.n	8010c3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010c2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010c2e:	3301      	adds	r3, #1
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	b25a      	sxtb	r2, r3
 8010c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010c3e:	e001      	b.n	8010c44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010c40:	2300      	movs	r3, #0
 8010c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c46:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010c4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3740      	adds	r7, #64	; 0x40
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b08e      	sub	sp, #56	; 0x38
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
 8010c62:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d10a      	bne.n	8010c84 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c72:	f383 8811 	msr	BASEPRI, r3
 8010c76:	f3bf 8f6f 	isb	sy
 8010c7a:	f3bf 8f4f 	dsb	sy
 8010c7e:	623b      	str	r3, [r7, #32]
}
 8010c80:	bf00      	nop
 8010c82:	e7fe      	b.n	8010c82 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d00a      	beq.n	8010ca2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c90:	f383 8811 	msr	BASEPRI, r3
 8010c94:	f3bf 8f6f 	isb	sy
 8010c98:	f3bf 8f4f 	dsb	sy
 8010c9c:	61fb      	str	r3, [r7, #28]
}
 8010c9e:	bf00      	nop
 8010ca0:	e7fe      	b.n	8010ca0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d103      	bne.n	8010cb2 <xQueueGiveFromISR+0x58>
 8010caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cac:	689b      	ldr	r3, [r3, #8]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d101      	bne.n	8010cb6 <xQueueGiveFromISR+0x5c>
 8010cb2:	2301      	movs	r3, #1
 8010cb4:	e000      	b.n	8010cb8 <xQueueGiveFromISR+0x5e>
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d10a      	bne.n	8010cd2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc0:	f383 8811 	msr	BASEPRI, r3
 8010cc4:	f3bf 8f6f 	isb	sy
 8010cc8:	f3bf 8f4f 	dsb	sy
 8010ccc:	61bb      	str	r3, [r7, #24]
}
 8010cce:	bf00      	nop
 8010cd0:	e7fe      	b.n	8010cd0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cd2:	f002 fa11 	bl	80130f8 <vPortValidateInterruptPriority>
	__asm volatile
 8010cd6:	f3ef 8211 	mrs	r2, BASEPRI
 8010cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cde:	f383 8811 	msr	BASEPRI, r3
 8010ce2:	f3bf 8f6f 	isb	sy
 8010ce6:	f3bf 8f4f 	dsb	sy
 8010cea:	617a      	str	r2, [r7, #20]
 8010cec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010cee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cf6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d22b      	bcs.n	8010d5a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0e:	1c5a      	adds	r2, r3, #1
 8010d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d12:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010d14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d1c:	d112      	bne.n	8010d44 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d016      	beq.n	8010d54 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d28:	3324      	adds	r3, #36	; 0x24
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f001 f8e8 	bl	8011f00 <xTaskRemoveFromEventList>
 8010d30:	4603      	mov	r3, r0
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d00e      	beq.n	8010d54 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d00b      	beq.n	8010d54 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	2201      	movs	r2, #1
 8010d40:	601a      	str	r2, [r3, #0]
 8010d42:	e007      	b.n	8010d54 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d48:	3301      	adds	r3, #1
 8010d4a:	b2db      	uxtb	r3, r3
 8010d4c:	b25a      	sxtb	r2, r3
 8010d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010d54:	2301      	movs	r3, #1
 8010d56:	637b      	str	r3, [r7, #52]	; 0x34
 8010d58:	e001      	b.n	8010d5e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8010d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d60:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	f383 8811 	msr	BASEPRI, r3
}
 8010d68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3738      	adds	r7, #56	; 0x38
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b08c      	sub	sp, #48	; 0x30
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	60f8      	str	r0, [r7, #12]
 8010d7c:	60b9      	str	r1, [r7, #8]
 8010d7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010d80:	2300      	movs	r3, #0
 8010d82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d10a      	bne.n	8010da4 <xQueueReceive+0x30>
	__asm volatile
 8010d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d92:	f383 8811 	msr	BASEPRI, r3
 8010d96:	f3bf 8f6f 	isb	sy
 8010d9a:	f3bf 8f4f 	dsb	sy
 8010d9e:	623b      	str	r3, [r7, #32]
}
 8010da0:	bf00      	nop
 8010da2:	e7fe      	b.n	8010da2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d103      	bne.n	8010db2 <xQueueReceive+0x3e>
 8010daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d101      	bne.n	8010db6 <xQueueReceive+0x42>
 8010db2:	2301      	movs	r3, #1
 8010db4:	e000      	b.n	8010db8 <xQueueReceive+0x44>
 8010db6:	2300      	movs	r3, #0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d10a      	bne.n	8010dd2 <xQueueReceive+0x5e>
	__asm volatile
 8010dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc0:	f383 8811 	msr	BASEPRI, r3
 8010dc4:	f3bf 8f6f 	isb	sy
 8010dc8:	f3bf 8f4f 	dsb	sy
 8010dcc:	61fb      	str	r3, [r7, #28]
}
 8010dce:	bf00      	nop
 8010dd0:	e7fe      	b.n	8010dd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010dd2:	f001 fa57 	bl	8012284 <xTaskGetSchedulerState>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d102      	bne.n	8010de2 <xQueueReceive+0x6e>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d101      	bne.n	8010de6 <xQueueReceive+0x72>
 8010de2:	2301      	movs	r3, #1
 8010de4:	e000      	b.n	8010de8 <xQueueReceive+0x74>
 8010de6:	2300      	movs	r3, #0
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d10a      	bne.n	8010e02 <xQueueReceive+0x8e>
	__asm volatile
 8010dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df0:	f383 8811 	msr	BASEPRI, r3
 8010df4:	f3bf 8f6f 	isb	sy
 8010df8:	f3bf 8f4f 	dsb	sy
 8010dfc:	61bb      	str	r3, [r7, #24]
}
 8010dfe:	bf00      	nop
 8010e00:	e7fe      	b.n	8010e00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010e02:	f002 f897 	bl	8012f34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d01f      	beq.n	8010e52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010e12:	68b9      	ldr	r1, [r7, #8]
 8010e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e16:	f000 fabe 	bl	8011396 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e1c:	1e5a      	subs	r2, r3, #1
 8010e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e24:	691b      	ldr	r3, [r3, #16]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d00f      	beq.n	8010e4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2c:	3310      	adds	r3, #16
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f001 f866 	bl	8011f00 <xTaskRemoveFromEventList>
 8010e34:	4603      	mov	r3, r0
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d007      	beq.n	8010e4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010e3a:	4b3d      	ldr	r3, [pc, #244]	; (8010f30 <xQueueReceive+0x1bc>)
 8010e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e40:	601a      	str	r2, [r3, #0]
 8010e42:	f3bf 8f4f 	dsb	sy
 8010e46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010e4a:	f002 f8a3 	bl	8012f94 <vPortExitCritical>
				return pdPASS;
 8010e4e:	2301      	movs	r3, #1
 8010e50:	e069      	b.n	8010f26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d103      	bne.n	8010e60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010e58:	f002 f89c 	bl	8012f94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	e062      	b.n	8010f26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d106      	bne.n	8010e74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010e66:	f107 0310 	add.w	r3, r7, #16
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f001 f8ac 	bl	8011fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010e70:	2301      	movs	r3, #1
 8010e72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010e74:	f002 f88e 	bl	8012f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e78:	f000 fe18 	bl	8011aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e7c:	f002 f85a 	bl	8012f34 <vPortEnterCritical>
 8010e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e86:	b25b      	sxtb	r3, r3
 8010e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e8c:	d103      	bne.n	8010e96 <xQueueReceive+0x122>
 8010e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e90:	2200      	movs	r2, #0
 8010e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e9c:	b25b      	sxtb	r3, r3
 8010e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ea2:	d103      	bne.n	8010eac <xQueueReceive+0x138>
 8010ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010eac:	f002 f872 	bl	8012f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010eb0:	1d3a      	adds	r2, r7, #4
 8010eb2:	f107 0310 	add.w	r3, r7, #16
 8010eb6:	4611      	mov	r1, r2
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f001 f89b 	bl	8011ff4 <xTaskCheckForTimeOut>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d123      	bne.n	8010f0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ec6:	f000 fade 	bl	8011486 <prvIsQueueEmpty>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d017      	beq.n	8010f00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ed2:	3324      	adds	r3, #36	; 0x24
 8010ed4:	687a      	ldr	r2, [r7, #4]
 8010ed6:	4611      	mov	r1, r2
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f000 ffc1 	bl	8011e60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ee0:	f000 fa7f 	bl	80113e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010ee4:	f000 fdf0 	bl	8011ac8 <xTaskResumeAll>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d189      	bne.n	8010e02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010eee:	4b10      	ldr	r3, [pc, #64]	; (8010f30 <xQueueReceive+0x1bc>)
 8010ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ef4:	601a      	str	r2, [r3, #0]
 8010ef6:	f3bf 8f4f 	dsb	sy
 8010efa:	f3bf 8f6f 	isb	sy
 8010efe:	e780      	b.n	8010e02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f02:	f000 fa6e 	bl	80113e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010f06:	f000 fddf 	bl	8011ac8 <xTaskResumeAll>
 8010f0a:	e77a      	b.n	8010e02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f0e:	f000 fa68 	bl	80113e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010f12:	f000 fdd9 	bl	8011ac8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f18:	f000 fab5 	bl	8011486 <prvIsQueueEmpty>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	f43f af6f 	beq.w	8010e02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010f24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	3730      	adds	r7, #48	; 0x30
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}
 8010f2e:	bf00      	nop
 8010f30:	e000ed04 	.word	0xe000ed04

08010f34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b08e      	sub	sp, #56	; 0x38
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010f46:	2300      	movs	r3, #0
 8010f48:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d10a      	bne.n	8010f66 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f54:	f383 8811 	msr	BASEPRI, r3
 8010f58:	f3bf 8f6f 	isb	sy
 8010f5c:	f3bf 8f4f 	dsb	sy
 8010f60:	623b      	str	r3, [r7, #32]
}
 8010f62:	bf00      	nop
 8010f64:	e7fe      	b.n	8010f64 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d00a      	beq.n	8010f84 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f72:	f383 8811 	msr	BASEPRI, r3
 8010f76:	f3bf 8f6f 	isb	sy
 8010f7a:	f3bf 8f4f 	dsb	sy
 8010f7e:	61fb      	str	r3, [r7, #28]
}
 8010f80:	bf00      	nop
 8010f82:	e7fe      	b.n	8010f82 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f84:	f001 f97e 	bl	8012284 <xTaskGetSchedulerState>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d102      	bne.n	8010f94 <xQueueSemaphoreTake+0x60>
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d101      	bne.n	8010f98 <xQueueSemaphoreTake+0x64>
 8010f94:	2301      	movs	r3, #1
 8010f96:	e000      	b.n	8010f9a <xQueueSemaphoreTake+0x66>
 8010f98:	2300      	movs	r3, #0
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d10a      	bne.n	8010fb4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa2:	f383 8811 	msr	BASEPRI, r3
 8010fa6:	f3bf 8f6f 	isb	sy
 8010faa:	f3bf 8f4f 	dsb	sy
 8010fae:	61bb      	str	r3, [r7, #24]
}
 8010fb0:	bf00      	nop
 8010fb2:	e7fe      	b.n	8010fb2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010fb4:	f001 ffbe 	bl	8012f34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fbc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d024      	beq.n	801100e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc6:	1e5a      	subs	r2, r3, #1
 8010fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d104      	bne.n	8010fde <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010fd4:	f001 facc 	bl	8012570 <pvTaskIncrementMutexHeldCount>
 8010fd8:	4602      	mov	r2, r0
 8010fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fdc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe0:	691b      	ldr	r3, [r3, #16]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d00f      	beq.n	8011006 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe8:	3310      	adds	r3, #16
 8010fea:	4618      	mov	r0, r3
 8010fec:	f000 ff88 	bl	8011f00 <xTaskRemoveFromEventList>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d007      	beq.n	8011006 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010ff6:	4b54      	ldr	r3, [pc, #336]	; (8011148 <xQueueSemaphoreTake+0x214>)
 8010ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ffc:	601a      	str	r2, [r3, #0]
 8010ffe:	f3bf 8f4f 	dsb	sy
 8011002:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011006:	f001 ffc5 	bl	8012f94 <vPortExitCritical>
				return pdPASS;
 801100a:	2301      	movs	r3, #1
 801100c:	e097      	b.n	801113e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d111      	bne.n	8011038 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011016:	2b00      	cmp	r3, #0
 8011018:	d00a      	beq.n	8011030 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801101a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801101e:	f383 8811 	msr	BASEPRI, r3
 8011022:	f3bf 8f6f 	isb	sy
 8011026:	f3bf 8f4f 	dsb	sy
 801102a:	617b      	str	r3, [r7, #20]
}
 801102c:	bf00      	nop
 801102e:	e7fe      	b.n	801102e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011030:	f001 ffb0 	bl	8012f94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011034:	2300      	movs	r3, #0
 8011036:	e082      	b.n	801113e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801103a:	2b00      	cmp	r3, #0
 801103c:	d106      	bne.n	801104c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801103e:	f107 030c 	add.w	r3, r7, #12
 8011042:	4618      	mov	r0, r3
 8011044:	f000 ffc0 	bl	8011fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011048:	2301      	movs	r3, #1
 801104a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801104c:	f001 ffa2 	bl	8012f94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011050:	f000 fd2c 	bl	8011aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011054:	f001 ff6e 	bl	8012f34 <vPortEnterCritical>
 8011058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801105e:	b25b      	sxtb	r3, r3
 8011060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011064:	d103      	bne.n	801106e <xQueueSemaphoreTake+0x13a>
 8011066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011068:	2200      	movs	r2, #0
 801106a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801106e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011074:	b25b      	sxtb	r3, r3
 8011076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801107a:	d103      	bne.n	8011084 <xQueueSemaphoreTake+0x150>
 801107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107e:	2200      	movs	r2, #0
 8011080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011084:	f001 ff86 	bl	8012f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011088:	463a      	mov	r2, r7
 801108a:	f107 030c 	add.w	r3, r7, #12
 801108e:	4611      	mov	r1, r2
 8011090:	4618      	mov	r0, r3
 8011092:	f000 ffaf 	bl	8011ff4 <xTaskCheckForTimeOut>
 8011096:	4603      	mov	r3, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	d132      	bne.n	8011102 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801109c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801109e:	f000 f9f2 	bl	8011486 <prvIsQueueEmpty>
 80110a2:	4603      	mov	r3, r0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d026      	beq.n	80110f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80110a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d109      	bne.n	80110c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80110b0:	f001 ff40 	bl	8012f34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80110b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b6:	689b      	ldr	r3, [r3, #8]
 80110b8:	4618      	mov	r0, r3
 80110ba:	f001 f901 	bl	80122c0 <xTaskPriorityInherit>
 80110be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80110c0:	f001 ff68 	bl	8012f94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80110c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c6:	3324      	adds	r3, #36	; 0x24
 80110c8:	683a      	ldr	r2, [r7, #0]
 80110ca:	4611      	mov	r1, r2
 80110cc:	4618      	mov	r0, r3
 80110ce:	f000 fec7 	bl	8011e60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80110d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110d4:	f000 f985 	bl	80113e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80110d8:	f000 fcf6 	bl	8011ac8 <xTaskResumeAll>
 80110dc:	4603      	mov	r3, r0
 80110de:	2b00      	cmp	r3, #0
 80110e0:	f47f af68 	bne.w	8010fb4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80110e4:	4b18      	ldr	r3, [pc, #96]	; (8011148 <xQueueSemaphoreTake+0x214>)
 80110e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110ea:	601a      	str	r2, [r3, #0]
 80110ec:	f3bf 8f4f 	dsb	sy
 80110f0:	f3bf 8f6f 	isb	sy
 80110f4:	e75e      	b.n	8010fb4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80110f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110f8:	f000 f973 	bl	80113e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80110fc:	f000 fce4 	bl	8011ac8 <xTaskResumeAll>
 8011100:	e758      	b.n	8010fb4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011102:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011104:	f000 f96d 	bl	80113e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011108:	f000 fcde 	bl	8011ac8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801110c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801110e:	f000 f9ba 	bl	8011486 <prvIsQueueEmpty>
 8011112:	4603      	mov	r3, r0
 8011114:	2b00      	cmp	r3, #0
 8011116:	f43f af4d 	beq.w	8010fb4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801111a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801111c:	2b00      	cmp	r3, #0
 801111e:	d00d      	beq.n	801113c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8011120:	f001 ff08 	bl	8012f34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011124:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011126:	f000 f8b4 	bl	8011292 <prvGetDisinheritPriorityAfterTimeout>
 801112a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801112c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801112e:	689b      	ldr	r3, [r3, #8]
 8011130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011132:	4618      	mov	r0, r3
 8011134:	f001 f99a 	bl	801246c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011138:	f001 ff2c 	bl	8012f94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801113c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801113e:	4618      	mov	r0, r3
 8011140:	3738      	adds	r7, #56	; 0x38
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	e000ed04 	.word	0xe000ed04

0801114c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b08e      	sub	sp, #56	; 0x38
 8011150:	af00      	add	r7, sp, #0
 8011152:	60f8      	str	r0, [r7, #12]
 8011154:	60b9      	str	r1, [r7, #8]
 8011156:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801115c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115e:	2b00      	cmp	r3, #0
 8011160:	d10a      	bne.n	8011178 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011166:	f383 8811 	msr	BASEPRI, r3
 801116a:	f3bf 8f6f 	isb	sy
 801116e:	f3bf 8f4f 	dsb	sy
 8011172:	623b      	str	r3, [r7, #32]
}
 8011174:	bf00      	nop
 8011176:	e7fe      	b.n	8011176 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d103      	bne.n	8011186 <xQueueReceiveFromISR+0x3a>
 801117e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011182:	2b00      	cmp	r3, #0
 8011184:	d101      	bne.n	801118a <xQueueReceiveFromISR+0x3e>
 8011186:	2301      	movs	r3, #1
 8011188:	e000      	b.n	801118c <xQueueReceiveFromISR+0x40>
 801118a:	2300      	movs	r3, #0
 801118c:	2b00      	cmp	r3, #0
 801118e:	d10a      	bne.n	80111a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011194:	f383 8811 	msr	BASEPRI, r3
 8011198:	f3bf 8f6f 	isb	sy
 801119c:	f3bf 8f4f 	dsb	sy
 80111a0:	61fb      	str	r3, [r7, #28]
}
 80111a2:	bf00      	nop
 80111a4:	e7fe      	b.n	80111a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80111a6:	f001 ffa7 	bl	80130f8 <vPortValidateInterruptPriority>
	__asm volatile
 80111aa:	f3ef 8211 	mrs	r2, BASEPRI
 80111ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b2:	f383 8811 	msr	BASEPRI, r3
 80111b6:	f3bf 8f6f 	isb	sy
 80111ba:	f3bf 8f4f 	dsb	sy
 80111be:	61ba      	str	r2, [r7, #24]
 80111c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80111c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80111c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80111c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80111cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d02f      	beq.n	8011232 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80111d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80111dc:	68b9      	ldr	r1, [r7, #8]
 80111de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111e0:	f000 f8d9 	bl	8011396 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80111e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e6:	1e5a      	subs	r2, r3, #1
 80111e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80111ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80111f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80111f4:	d112      	bne.n	801121c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f8:	691b      	ldr	r3, [r3, #16]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d016      	beq.n	801122c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011200:	3310      	adds	r3, #16
 8011202:	4618      	mov	r0, r3
 8011204:	f000 fe7c 	bl	8011f00 <xTaskRemoveFromEventList>
 8011208:	4603      	mov	r3, r0
 801120a:	2b00      	cmp	r3, #0
 801120c:	d00e      	beq.n	801122c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00b      	beq.n	801122c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2201      	movs	r2, #1
 8011218:	601a      	str	r2, [r3, #0]
 801121a:	e007      	b.n	801122c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801121c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011220:	3301      	adds	r3, #1
 8011222:	b2db      	uxtb	r3, r3
 8011224:	b25a      	sxtb	r2, r3
 8011226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801122c:	2301      	movs	r3, #1
 801122e:	637b      	str	r3, [r7, #52]	; 0x34
 8011230:	e001      	b.n	8011236 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011232:	2300      	movs	r3, #0
 8011234:	637b      	str	r3, [r7, #52]	; 0x34
 8011236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011238:	613b      	str	r3, [r7, #16]
	__asm volatile
 801123a:	693b      	ldr	r3, [r7, #16]
 801123c:	f383 8811 	msr	BASEPRI, r3
}
 8011240:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011244:	4618      	mov	r0, r3
 8011246:	3738      	adds	r7, #56	; 0x38
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}

0801124c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b084      	sub	sp, #16
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d10a      	bne.n	8011274 <vQueueDelete+0x28>
	__asm volatile
 801125e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011262:	f383 8811 	msr	BASEPRI, r3
 8011266:	f3bf 8f6f 	isb	sy
 801126a:	f3bf 8f4f 	dsb	sy
 801126e:	60bb      	str	r3, [r7, #8]
}
 8011270:	bf00      	nop
 8011272:	e7fe      	b.n	8011272 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011274:	68f8      	ldr	r0, [r7, #12]
 8011276:	f000 f95f 	bl	8011538 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011280:	2b00      	cmp	r3, #0
 8011282:	d102      	bne.n	801128a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8011284:	68f8      	ldr	r0, [r7, #12]
 8011286:	f002 f843 	bl	8013310 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801128a:	bf00      	nop
 801128c:	3710      	adds	r7, #16
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}

08011292 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011292:	b480      	push	{r7}
 8011294:	b085      	sub	sp, #20
 8011296:	af00      	add	r7, sp, #0
 8011298:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d006      	beq.n	80112b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80112ac:	60fb      	str	r3, [r7, #12]
 80112ae:	e001      	b.n	80112b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80112b0:	2300      	movs	r3, #0
 80112b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80112b4:	68fb      	ldr	r3, [r7, #12]
	}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3714      	adds	r7, #20
 80112ba:	46bd      	mov	sp, r7
 80112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c0:	4770      	bx	lr

080112c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80112c2:	b580      	push	{r7, lr}
 80112c4:	b086      	sub	sp, #24
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	60f8      	str	r0, [r7, #12]
 80112ca:	60b9      	str	r1, [r7, #8]
 80112cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80112ce:	2300      	movs	r3, #0
 80112d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d10d      	bne.n	80112fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d14d      	bne.n	8011384 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	689b      	ldr	r3, [r3, #8]
 80112ec:	4618      	mov	r0, r3
 80112ee:	f001 f84f 	bl	8012390 <xTaskPriorityDisinherit>
 80112f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	2200      	movs	r2, #0
 80112f8:	609a      	str	r2, [r3, #8]
 80112fa:	e043      	b.n	8011384 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d119      	bne.n	8011336 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	6858      	ldr	r0, [r3, #4]
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801130a:	461a      	mov	r2, r3
 801130c:	68b9      	ldr	r1, [r7, #8]
 801130e:	f002 ff53 	bl	80141b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	685a      	ldr	r2, [r3, #4]
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801131a:	441a      	add	r2, r3
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	685a      	ldr	r2, [r3, #4]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	689b      	ldr	r3, [r3, #8]
 8011328:	429a      	cmp	r2, r3
 801132a:	d32b      	bcc.n	8011384 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	681a      	ldr	r2, [r3, #0]
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	605a      	str	r2, [r3, #4]
 8011334:	e026      	b.n	8011384 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	68d8      	ldr	r0, [r3, #12]
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801133e:	461a      	mov	r2, r3
 8011340:	68b9      	ldr	r1, [r7, #8]
 8011342:	f002 ff39 	bl	80141b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	68da      	ldr	r2, [r3, #12]
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801134e:	425b      	negs	r3, r3
 8011350:	441a      	add	r2, r3
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	68da      	ldr	r2, [r3, #12]
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	429a      	cmp	r2, r3
 8011360:	d207      	bcs.n	8011372 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	689a      	ldr	r2, [r3, #8]
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801136a:	425b      	negs	r3, r3
 801136c:	441a      	add	r2, r3
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2b02      	cmp	r3, #2
 8011376:	d105      	bne.n	8011384 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d002      	beq.n	8011384 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	3b01      	subs	r3, #1
 8011382:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	1c5a      	adds	r2, r3, #1
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801138c:	697b      	ldr	r3, [r7, #20]
}
 801138e:	4618      	mov	r0, r3
 8011390:	3718      	adds	r7, #24
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}

08011396 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011396:	b580      	push	{r7, lr}
 8011398:	b082      	sub	sp, #8
 801139a:	af00      	add	r7, sp, #0
 801139c:	6078      	str	r0, [r7, #4]
 801139e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d018      	beq.n	80113da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	68da      	ldr	r2, [r3, #12]
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113b0:	441a      	add	r2, r3
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	68da      	ldr	r2, [r3, #12]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	689b      	ldr	r3, [r3, #8]
 80113be:	429a      	cmp	r2, r3
 80113c0:	d303      	bcc.n	80113ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681a      	ldr	r2, [r3, #0]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	68d9      	ldr	r1, [r3, #12]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113d2:	461a      	mov	r2, r3
 80113d4:	6838      	ldr	r0, [r7, #0]
 80113d6:	f002 feef 	bl	80141b8 <memcpy>
	}
}
 80113da:	bf00      	nop
 80113dc:	3708      	adds	r7, #8
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}

080113e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80113e2:	b580      	push	{r7, lr}
 80113e4:	b084      	sub	sp, #16
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80113ea:	f001 fda3 	bl	8012f34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80113f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80113f6:	e011      	b.n	801141c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d012      	beq.n	8011426 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	3324      	adds	r3, #36	; 0x24
 8011404:	4618      	mov	r0, r3
 8011406:	f000 fd7b 	bl	8011f00 <xTaskRemoveFromEventList>
 801140a:	4603      	mov	r3, r0
 801140c:	2b00      	cmp	r3, #0
 801140e:	d001      	beq.n	8011414 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011410:	f000 fe52 	bl	80120b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011414:	7bfb      	ldrb	r3, [r7, #15]
 8011416:	3b01      	subs	r3, #1
 8011418:	b2db      	uxtb	r3, r3
 801141a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801141c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011420:	2b00      	cmp	r3, #0
 8011422:	dce9      	bgt.n	80113f8 <prvUnlockQueue+0x16>
 8011424:	e000      	b.n	8011428 <prvUnlockQueue+0x46>
					break;
 8011426:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	22ff      	movs	r2, #255	; 0xff
 801142c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011430:	f001 fdb0 	bl	8012f94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011434:	f001 fd7e 	bl	8012f34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801143e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011440:	e011      	b.n	8011466 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	691b      	ldr	r3, [r3, #16]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d012      	beq.n	8011470 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	3310      	adds	r3, #16
 801144e:	4618      	mov	r0, r3
 8011450:	f000 fd56 	bl	8011f00 <xTaskRemoveFromEventList>
 8011454:	4603      	mov	r3, r0
 8011456:	2b00      	cmp	r3, #0
 8011458:	d001      	beq.n	801145e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801145a:	f000 fe2d 	bl	80120b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801145e:	7bbb      	ldrb	r3, [r7, #14]
 8011460:	3b01      	subs	r3, #1
 8011462:	b2db      	uxtb	r3, r3
 8011464:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011466:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801146a:	2b00      	cmp	r3, #0
 801146c:	dce9      	bgt.n	8011442 <prvUnlockQueue+0x60>
 801146e:	e000      	b.n	8011472 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011470:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	22ff      	movs	r2, #255	; 0xff
 8011476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801147a:	f001 fd8b 	bl	8012f94 <vPortExitCritical>
}
 801147e:	bf00      	nop
 8011480:	3710      	adds	r7, #16
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}

08011486 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011486:	b580      	push	{r7, lr}
 8011488:	b084      	sub	sp, #16
 801148a:	af00      	add	r7, sp, #0
 801148c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801148e:	f001 fd51 	bl	8012f34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011496:	2b00      	cmp	r3, #0
 8011498:	d102      	bne.n	80114a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801149a:	2301      	movs	r3, #1
 801149c:	60fb      	str	r3, [r7, #12]
 801149e:	e001      	b.n	80114a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80114a0:	2300      	movs	r3, #0
 80114a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80114a4:	f001 fd76 	bl	8012f94 <vPortExitCritical>

	return xReturn;
 80114a8:	68fb      	ldr	r3, [r7, #12]
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3710      	adds	r7, #16
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}

080114b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80114b2:	b580      	push	{r7, lr}
 80114b4:	b084      	sub	sp, #16
 80114b6:	af00      	add	r7, sp, #0
 80114b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80114ba:	f001 fd3b 	bl	8012f34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d102      	bne.n	80114d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80114ca:	2301      	movs	r3, #1
 80114cc:	60fb      	str	r3, [r7, #12]
 80114ce:	e001      	b.n	80114d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80114d0:	2300      	movs	r3, #0
 80114d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80114d4:	f001 fd5e 	bl	8012f94 <vPortExitCritical>

	return xReturn;
 80114d8:	68fb      	ldr	r3, [r7, #12]
}
 80114da:	4618      	mov	r0, r3
 80114dc:	3710      	adds	r7, #16
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}
	...

080114e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80114e4:	b480      	push	{r7}
 80114e6:	b085      	sub	sp, #20
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
 80114ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80114ee:	2300      	movs	r3, #0
 80114f0:	60fb      	str	r3, [r7, #12]
 80114f2:	e014      	b.n	801151e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80114f4:	4a0f      	ldr	r2, [pc, #60]	; (8011534 <vQueueAddToRegistry+0x50>)
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d10b      	bne.n	8011518 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011500:	490c      	ldr	r1, [pc, #48]	; (8011534 <vQueueAddToRegistry+0x50>)
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	683a      	ldr	r2, [r7, #0]
 8011506:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801150a:	4a0a      	ldr	r2, [pc, #40]	; (8011534 <vQueueAddToRegistry+0x50>)
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	00db      	lsls	r3, r3, #3
 8011510:	4413      	add	r3, r2
 8011512:	687a      	ldr	r2, [r7, #4]
 8011514:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011516:	e006      	b.n	8011526 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	3301      	adds	r3, #1
 801151c:	60fb      	str	r3, [r7, #12]
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	2b07      	cmp	r3, #7
 8011522:	d9e7      	bls.n	80114f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011524:	bf00      	nop
 8011526:	bf00      	nop
 8011528:	3714      	adds	r7, #20
 801152a:	46bd      	mov	sp, r7
 801152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011530:	4770      	bx	lr
 8011532:	bf00      	nop
 8011534:	2000b2e4 	.word	0x2000b2e4

08011538 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011538:	b480      	push	{r7}
 801153a:	b085      	sub	sp, #20
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011540:	2300      	movs	r3, #0
 8011542:	60fb      	str	r3, [r7, #12]
 8011544:	e016      	b.n	8011574 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011546:	4a10      	ldr	r2, [pc, #64]	; (8011588 <vQueueUnregisterQueue+0x50>)
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	00db      	lsls	r3, r3, #3
 801154c:	4413      	add	r3, r2
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	429a      	cmp	r2, r3
 8011554:	d10b      	bne.n	801156e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011556:	4a0c      	ldr	r2, [pc, #48]	; (8011588 <vQueueUnregisterQueue+0x50>)
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	2100      	movs	r1, #0
 801155c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011560:	4a09      	ldr	r2, [pc, #36]	; (8011588 <vQueueUnregisterQueue+0x50>)
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	00db      	lsls	r3, r3, #3
 8011566:	4413      	add	r3, r2
 8011568:	2200      	movs	r2, #0
 801156a:	605a      	str	r2, [r3, #4]
				break;
 801156c:	e006      	b.n	801157c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	3301      	adds	r3, #1
 8011572:	60fb      	str	r3, [r7, #12]
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	2b07      	cmp	r3, #7
 8011578:	d9e5      	bls.n	8011546 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801157a:	bf00      	nop
 801157c:	bf00      	nop
 801157e:	3714      	adds	r7, #20
 8011580:	46bd      	mov	sp, r7
 8011582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011586:	4770      	bx	lr
 8011588:	2000b2e4 	.word	0x2000b2e4

0801158c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801158c:	b580      	push	{r7, lr}
 801158e:	b086      	sub	sp, #24
 8011590:	af00      	add	r7, sp, #0
 8011592:	60f8      	str	r0, [r7, #12]
 8011594:	60b9      	str	r1, [r7, #8]
 8011596:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801159c:	f001 fcca 	bl	8012f34 <vPortEnterCritical>
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115a6:	b25b      	sxtb	r3, r3
 80115a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115ac:	d103      	bne.n	80115b6 <vQueueWaitForMessageRestricted+0x2a>
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	2200      	movs	r2, #0
 80115b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115bc:	b25b      	sxtb	r3, r3
 80115be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115c2:	d103      	bne.n	80115cc <vQueueWaitForMessageRestricted+0x40>
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	2200      	movs	r2, #0
 80115c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115cc:	f001 fce2 	bl	8012f94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d106      	bne.n	80115e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	3324      	adds	r3, #36	; 0x24
 80115dc:	687a      	ldr	r2, [r7, #4]
 80115de:	68b9      	ldr	r1, [r7, #8]
 80115e0:	4618      	mov	r0, r3
 80115e2:	f000 fc61 	bl	8011ea8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80115e6:	6978      	ldr	r0, [r7, #20]
 80115e8:	f7ff fefb 	bl	80113e2 <prvUnlockQueue>
	}
 80115ec:	bf00      	nop
 80115ee:	3718      	adds	r7, #24
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b08e      	sub	sp, #56	; 0x38
 80115f8:	af04      	add	r7, sp, #16
 80115fa:	60f8      	str	r0, [r7, #12]
 80115fc:	60b9      	str	r1, [r7, #8]
 80115fe:	607a      	str	r2, [r7, #4]
 8011600:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011604:	2b00      	cmp	r3, #0
 8011606:	d10a      	bne.n	801161e <xTaskCreateStatic+0x2a>
	__asm volatile
 8011608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801160c:	f383 8811 	msr	BASEPRI, r3
 8011610:	f3bf 8f6f 	isb	sy
 8011614:	f3bf 8f4f 	dsb	sy
 8011618:	623b      	str	r3, [r7, #32]
}
 801161a:	bf00      	nop
 801161c:	e7fe      	b.n	801161c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801161e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011620:	2b00      	cmp	r3, #0
 8011622:	d10a      	bne.n	801163a <xTaskCreateStatic+0x46>
	__asm volatile
 8011624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011628:	f383 8811 	msr	BASEPRI, r3
 801162c:	f3bf 8f6f 	isb	sy
 8011630:	f3bf 8f4f 	dsb	sy
 8011634:	61fb      	str	r3, [r7, #28]
}
 8011636:	bf00      	nop
 8011638:	e7fe      	b.n	8011638 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801163a:	23bc      	movs	r3, #188	; 0xbc
 801163c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801163e:	693b      	ldr	r3, [r7, #16]
 8011640:	2bbc      	cmp	r3, #188	; 0xbc
 8011642:	d00a      	beq.n	801165a <xTaskCreateStatic+0x66>
	__asm volatile
 8011644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011648:	f383 8811 	msr	BASEPRI, r3
 801164c:	f3bf 8f6f 	isb	sy
 8011650:	f3bf 8f4f 	dsb	sy
 8011654:	61bb      	str	r3, [r7, #24]
}
 8011656:	bf00      	nop
 8011658:	e7fe      	b.n	8011658 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801165a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801165c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801165e:	2b00      	cmp	r3, #0
 8011660:	d01e      	beq.n	80116a0 <xTaskCreateStatic+0xac>
 8011662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011664:	2b00      	cmp	r3, #0
 8011666:	d01b      	beq.n	80116a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801166a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801166e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011670:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011674:	2202      	movs	r2, #2
 8011676:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801167a:	2300      	movs	r3, #0
 801167c:	9303      	str	r3, [sp, #12]
 801167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011680:	9302      	str	r3, [sp, #8]
 8011682:	f107 0314 	add.w	r3, r7, #20
 8011686:	9301      	str	r3, [sp, #4]
 8011688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168a:	9300      	str	r3, [sp, #0]
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	687a      	ldr	r2, [r7, #4]
 8011690:	68b9      	ldr	r1, [r7, #8]
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f000 f850 	bl	8011738 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801169a:	f000 f8f3 	bl	8011884 <prvAddNewTaskToReadyList>
 801169e:	e001      	b.n	80116a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80116a0:	2300      	movs	r3, #0
 80116a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80116a4:	697b      	ldr	r3, [r7, #20]
	}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3728      	adds	r7, #40	; 0x28
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}

080116ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80116ae:	b580      	push	{r7, lr}
 80116b0:	b08c      	sub	sp, #48	; 0x30
 80116b2:	af04      	add	r7, sp, #16
 80116b4:	60f8      	str	r0, [r7, #12]
 80116b6:	60b9      	str	r1, [r7, #8]
 80116b8:	603b      	str	r3, [r7, #0]
 80116ba:	4613      	mov	r3, r2
 80116bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80116be:	88fb      	ldrh	r3, [r7, #6]
 80116c0:	009b      	lsls	r3, r3, #2
 80116c2:	4618      	mov	r0, r3
 80116c4:	f001 fd58 	bl	8013178 <pvPortMalloc>
 80116c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d00e      	beq.n	80116ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80116d0:	20bc      	movs	r0, #188	; 0xbc
 80116d2:	f001 fd51 	bl	8013178 <pvPortMalloc>
 80116d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80116d8:	69fb      	ldr	r3, [r7, #28]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d003      	beq.n	80116e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80116de:	69fb      	ldr	r3, [r7, #28]
 80116e0:	697a      	ldr	r2, [r7, #20]
 80116e2:	631a      	str	r2, [r3, #48]	; 0x30
 80116e4:	e005      	b.n	80116f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80116e6:	6978      	ldr	r0, [r7, #20]
 80116e8:	f001 fe12 	bl	8013310 <vPortFree>
 80116ec:	e001      	b.n	80116f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80116ee:	2300      	movs	r3, #0
 80116f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80116f2:	69fb      	ldr	r3, [r7, #28]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d017      	beq.n	8011728 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80116f8:	69fb      	ldr	r3, [r7, #28]
 80116fa:	2200      	movs	r2, #0
 80116fc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011700:	88fa      	ldrh	r2, [r7, #6]
 8011702:	2300      	movs	r3, #0
 8011704:	9303      	str	r3, [sp, #12]
 8011706:	69fb      	ldr	r3, [r7, #28]
 8011708:	9302      	str	r3, [sp, #8]
 801170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801170c:	9301      	str	r3, [sp, #4]
 801170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011710:	9300      	str	r3, [sp, #0]
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	68b9      	ldr	r1, [r7, #8]
 8011716:	68f8      	ldr	r0, [r7, #12]
 8011718:	f000 f80e 	bl	8011738 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801171c:	69f8      	ldr	r0, [r7, #28]
 801171e:	f000 f8b1 	bl	8011884 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011722:	2301      	movs	r3, #1
 8011724:	61bb      	str	r3, [r7, #24]
 8011726:	e002      	b.n	801172e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801172c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801172e:	69bb      	ldr	r3, [r7, #24]
	}
 8011730:	4618      	mov	r0, r3
 8011732:	3720      	adds	r7, #32
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}

08011738 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b088      	sub	sp, #32
 801173c:	af00      	add	r7, sp, #0
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	607a      	str	r2, [r7, #4]
 8011744:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011748:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	009b      	lsls	r3, r3, #2
 801174e:	461a      	mov	r2, r3
 8011750:	21a5      	movs	r1, #165	; 0xa5
 8011752:	f002 fd3f 	bl	80141d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011760:	3b01      	subs	r3, #1
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	4413      	add	r3, r2
 8011766:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011768:	69bb      	ldr	r3, [r7, #24]
 801176a:	f023 0307 	bic.w	r3, r3, #7
 801176e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011770:	69bb      	ldr	r3, [r7, #24]
 8011772:	f003 0307 	and.w	r3, r3, #7
 8011776:	2b00      	cmp	r3, #0
 8011778:	d00a      	beq.n	8011790 <prvInitialiseNewTask+0x58>
	__asm volatile
 801177a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801177e:	f383 8811 	msr	BASEPRI, r3
 8011782:	f3bf 8f6f 	isb	sy
 8011786:	f3bf 8f4f 	dsb	sy
 801178a:	617b      	str	r3, [r7, #20]
}
 801178c:	bf00      	nop
 801178e:	e7fe      	b.n	801178e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d01f      	beq.n	80117d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011796:	2300      	movs	r3, #0
 8011798:	61fb      	str	r3, [r7, #28]
 801179a:	e012      	b.n	80117c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801179c:	68ba      	ldr	r2, [r7, #8]
 801179e:	69fb      	ldr	r3, [r7, #28]
 80117a0:	4413      	add	r3, r2
 80117a2:	7819      	ldrb	r1, [r3, #0]
 80117a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117a6:	69fb      	ldr	r3, [r7, #28]
 80117a8:	4413      	add	r3, r2
 80117aa:	3334      	adds	r3, #52	; 0x34
 80117ac:	460a      	mov	r2, r1
 80117ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80117b0:	68ba      	ldr	r2, [r7, #8]
 80117b2:	69fb      	ldr	r3, [r7, #28]
 80117b4:	4413      	add	r3, r2
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d006      	beq.n	80117ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	3301      	adds	r3, #1
 80117c0:	61fb      	str	r3, [r7, #28]
 80117c2:	69fb      	ldr	r3, [r7, #28]
 80117c4:	2b0f      	cmp	r3, #15
 80117c6:	d9e9      	bls.n	801179c <prvInitialiseNewTask+0x64>
 80117c8:	e000      	b.n	80117cc <prvInitialiseNewTask+0x94>
			{
				break;
 80117ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80117cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ce:	2200      	movs	r2, #0
 80117d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80117d4:	e003      	b.n	80117de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80117d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d8:	2200      	movs	r2, #0
 80117da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80117de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e0:	2b37      	cmp	r3, #55	; 0x37
 80117e2:	d901      	bls.n	80117e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80117e4:	2337      	movs	r3, #55	; 0x37
 80117e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80117e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80117ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80117f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f6:	2200      	movs	r2, #0
 80117f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80117fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fc:	3304      	adds	r3, #4
 80117fe:	4618      	mov	r0, r3
 8011800:	f7fe fe56 	bl	80104b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011806:	3318      	adds	r3, #24
 8011808:	4618      	mov	r0, r3
 801180a:	f7fe fe51 	bl	80104b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011812:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011816:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801181a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801181c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801181e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011822:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011826:	2200      	movs	r2, #0
 8011828:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801182c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182e:	2200      	movs	r2, #0
 8011830:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011836:	3354      	adds	r3, #84	; 0x54
 8011838:	2260      	movs	r2, #96	; 0x60
 801183a:	2100      	movs	r1, #0
 801183c:	4618      	mov	r0, r3
 801183e:	f002 fcc9 	bl	80141d4 <memset>
 8011842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011844:	4a0c      	ldr	r2, [pc, #48]	; (8011878 <prvInitialiseNewTask+0x140>)
 8011846:	659a      	str	r2, [r3, #88]	; 0x58
 8011848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184a:	4a0c      	ldr	r2, [pc, #48]	; (801187c <prvInitialiseNewTask+0x144>)
 801184c:	65da      	str	r2, [r3, #92]	; 0x5c
 801184e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011850:	4a0b      	ldr	r2, [pc, #44]	; (8011880 <prvInitialiseNewTask+0x148>)
 8011852:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011854:	683a      	ldr	r2, [r7, #0]
 8011856:	68f9      	ldr	r1, [r7, #12]
 8011858:	69b8      	ldr	r0, [r7, #24]
 801185a:	f001 fa3f 	bl	8012cdc <pxPortInitialiseStack>
 801185e:	4602      	mov	r2, r0
 8011860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011862:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011866:	2b00      	cmp	r3, #0
 8011868:	d002      	beq.n	8011870 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801186a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801186c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801186e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011870:	bf00      	nop
 8011872:	3720      	adds	r7, #32
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}
 8011878:	08018ea0 	.word	0x08018ea0
 801187c:	08018ec0 	.word	0x08018ec0
 8011880:	08018e80 	.word	0x08018e80

08011884 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b082      	sub	sp, #8
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801188c:	f001 fb52 	bl	8012f34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011890:	4b2d      	ldr	r3, [pc, #180]	; (8011948 <prvAddNewTaskToReadyList+0xc4>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	3301      	adds	r3, #1
 8011896:	4a2c      	ldr	r2, [pc, #176]	; (8011948 <prvAddNewTaskToReadyList+0xc4>)
 8011898:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801189a:	4b2c      	ldr	r3, [pc, #176]	; (801194c <prvAddNewTaskToReadyList+0xc8>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d109      	bne.n	80118b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80118a2:	4a2a      	ldr	r2, [pc, #168]	; (801194c <prvAddNewTaskToReadyList+0xc8>)
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80118a8:	4b27      	ldr	r3, [pc, #156]	; (8011948 <prvAddNewTaskToReadyList+0xc4>)
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	2b01      	cmp	r3, #1
 80118ae:	d110      	bne.n	80118d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80118b0:	f000 fc26 	bl	8012100 <prvInitialiseTaskLists>
 80118b4:	e00d      	b.n	80118d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80118b6:	4b26      	ldr	r3, [pc, #152]	; (8011950 <prvAddNewTaskToReadyList+0xcc>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d109      	bne.n	80118d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80118be:	4b23      	ldr	r3, [pc, #140]	; (801194c <prvAddNewTaskToReadyList+0xc8>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d802      	bhi.n	80118d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80118cc:	4a1f      	ldr	r2, [pc, #124]	; (801194c <prvAddNewTaskToReadyList+0xc8>)
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80118d2:	4b20      	ldr	r3, [pc, #128]	; (8011954 <prvAddNewTaskToReadyList+0xd0>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	3301      	adds	r3, #1
 80118d8:	4a1e      	ldr	r2, [pc, #120]	; (8011954 <prvAddNewTaskToReadyList+0xd0>)
 80118da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80118dc:	4b1d      	ldr	r3, [pc, #116]	; (8011954 <prvAddNewTaskToReadyList+0xd0>)
 80118de:	681a      	ldr	r2, [r3, #0]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118e8:	4b1b      	ldr	r3, [pc, #108]	; (8011958 <prvAddNewTaskToReadyList+0xd4>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d903      	bls.n	80118f8 <prvAddNewTaskToReadyList+0x74>
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118f4:	4a18      	ldr	r2, [pc, #96]	; (8011958 <prvAddNewTaskToReadyList+0xd4>)
 80118f6:	6013      	str	r3, [r2, #0]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118fc:	4613      	mov	r3, r2
 80118fe:	009b      	lsls	r3, r3, #2
 8011900:	4413      	add	r3, r2
 8011902:	009b      	lsls	r3, r3, #2
 8011904:	4a15      	ldr	r2, [pc, #84]	; (801195c <prvAddNewTaskToReadyList+0xd8>)
 8011906:	441a      	add	r2, r3
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	3304      	adds	r3, #4
 801190c:	4619      	mov	r1, r3
 801190e:	4610      	mov	r0, r2
 8011910:	f7fe fddb 	bl	80104ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011914:	f001 fb3e 	bl	8012f94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011918:	4b0d      	ldr	r3, [pc, #52]	; (8011950 <prvAddNewTaskToReadyList+0xcc>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d00e      	beq.n	801193e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011920:	4b0a      	ldr	r3, [pc, #40]	; (801194c <prvAddNewTaskToReadyList+0xc8>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801192a:	429a      	cmp	r2, r3
 801192c:	d207      	bcs.n	801193e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801192e:	4b0c      	ldr	r3, [pc, #48]	; (8011960 <prvAddNewTaskToReadyList+0xdc>)
 8011930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011934:	601a      	str	r2, [r3, #0]
 8011936:	f3bf 8f4f 	dsb	sy
 801193a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801193e:	bf00      	nop
 8011940:	3708      	adds	r7, #8
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
 8011946:	bf00      	nop
 8011948:	20001218 	.word	0x20001218
 801194c:	20000d44 	.word	0x20000d44
 8011950:	20001224 	.word	0x20001224
 8011954:	20001234 	.word	0x20001234
 8011958:	20001220 	.word	0x20001220
 801195c:	20000d48 	.word	0x20000d48
 8011960:	e000ed04 	.word	0xe000ed04

08011964 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801196c:	2300      	movs	r3, #0
 801196e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d017      	beq.n	80119a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011976:	4b13      	ldr	r3, [pc, #76]	; (80119c4 <vTaskDelay+0x60>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d00a      	beq.n	8011994 <vTaskDelay+0x30>
	__asm volatile
 801197e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011982:	f383 8811 	msr	BASEPRI, r3
 8011986:	f3bf 8f6f 	isb	sy
 801198a:	f3bf 8f4f 	dsb	sy
 801198e:	60bb      	str	r3, [r7, #8]
}
 8011990:	bf00      	nop
 8011992:	e7fe      	b.n	8011992 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011994:	f000 f88a 	bl	8011aac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011998:	2100      	movs	r1, #0
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f000 fdfc 	bl	8012598 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80119a0:	f000 f892 	bl	8011ac8 <xTaskResumeAll>
 80119a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d107      	bne.n	80119bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80119ac:	4b06      	ldr	r3, [pc, #24]	; (80119c8 <vTaskDelay+0x64>)
 80119ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119b2:	601a      	str	r2, [r3, #0]
 80119b4:	f3bf 8f4f 	dsb	sy
 80119b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80119bc:	bf00      	nop
 80119be:	3710      	adds	r7, #16
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}
 80119c4:	20001240 	.word	0x20001240
 80119c8:	e000ed04 	.word	0xe000ed04

080119cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b08a      	sub	sp, #40	; 0x28
 80119d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80119d2:	2300      	movs	r3, #0
 80119d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80119d6:	2300      	movs	r3, #0
 80119d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80119da:	463a      	mov	r2, r7
 80119dc:	1d39      	adds	r1, r7, #4
 80119de:	f107 0308 	add.w	r3, r7, #8
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fe fd10 	bl	8010408 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80119e8:	6839      	ldr	r1, [r7, #0]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	68ba      	ldr	r2, [r7, #8]
 80119ee:	9202      	str	r2, [sp, #8]
 80119f0:	9301      	str	r3, [sp, #4]
 80119f2:	2300      	movs	r3, #0
 80119f4:	9300      	str	r3, [sp, #0]
 80119f6:	2300      	movs	r3, #0
 80119f8:	460a      	mov	r2, r1
 80119fa:	4924      	ldr	r1, [pc, #144]	; (8011a8c <vTaskStartScheduler+0xc0>)
 80119fc:	4824      	ldr	r0, [pc, #144]	; (8011a90 <vTaskStartScheduler+0xc4>)
 80119fe:	f7ff fdf9 	bl	80115f4 <xTaskCreateStatic>
 8011a02:	4603      	mov	r3, r0
 8011a04:	4a23      	ldr	r2, [pc, #140]	; (8011a94 <vTaskStartScheduler+0xc8>)
 8011a06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011a08:	4b22      	ldr	r3, [pc, #136]	; (8011a94 <vTaskStartScheduler+0xc8>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d002      	beq.n	8011a16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011a10:	2301      	movs	r3, #1
 8011a12:	617b      	str	r3, [r7, #20]
 8011a14:	e001      	b.n	8011a1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011a16:	2300      	movs	r3, #0
 8011a18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	2b01      	cmp	r3, #1
 8011a1e:	d102      	bne.n	8011a26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011a20:	f000 fe0e 	bl	8012640 <xTimerCreateTimerTask>
 8011a24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	2b01      	cmp	r3, #1
 8011a2a:	d11b      	bne.n	8011a64 <vTaskStartScheduler+0x98>
	__asm volatile
 8011a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a30:	f383 8811 	msr	BASEPRI, r3
 8011a34:	f3bf 8f6f 	isb	sy
 8011a38:	f3bf 8f4f 	dsb	sy
 8011a3c:	613b      	str	r3, [r7, #16]
}
 8011a3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011a40:	4b15      	ldr	r3, [pc, #84]	; (8011a98 <vTaskStartScheduler+0xcc>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	3354      	adds	r3, #84	; 0x54
 8011a46:	4a15      	ldr	r2, [pc, #84]	; (8011a9c <vTaskStartScheduler+0xd0>)
 8011a48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011a4a:	4b15      	ldr	r3, [pc, #84]	; (8011aa0 <vTaskStartScheduler+0xd4>)
 8011a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011a52:	4b14      	ldr	r3, [pc, #80]	; (8011aa4 <vTaskStartScheduler+0xd8>)
 8011a54:	2201      	movs	r2, #1
 8011a56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011a58:	4b13      	ldr	r3, [pc, #76]	; (8011aa8 <vTaskStartScheduler+0xdc>)
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011a5e:	f001 f9c7 	bl	8012df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011a62:	e00e      	b.n	8011a82 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a6a:	d10a      	bne.n	8011a82 <vTaskStartScheduler+0xb6>
	__asm volatile
 8011a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a70:	f383 8811 	msr	BASEPRI, r3
 8011a74:	f3bf 8f6f 	isb	sy
 8011a78:	f3bf 8f4f 	dsb	sy
 8011a7c:	60fb      	str	r3, [r7, #12]
}
 8011a7e:	bf00      	nop
 8011a80:	e7fe      	b.n	8011a80 <vTaskStartScheduler+0xb4>
}
 8011a82:	bf00      	nop
 8011a84:	3718      	adds	r7, #24
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
 8011a8a:	bf00      	nop
 8011a8c:	08018bc0 	.word	0x08018bc0
 8011a90:	080120d1 	.word	0x080120d1
 8011a94:	2000123c 	.word	0x2000123c
 8011a98:	20000d44 	.word	0x20000d44
 8011a9c:	200001b8 	.word	0x200001b8
 8011aa0:	20001238 	.word	0x20001238
 8011aa4:	20001224 	.word	0x20001224
 8011aa8:	2000121c 	.word	0x2000121c

08011aac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011aac:	b480      	push	{r7}
 8011aae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011ab0:	4b04      	ldr	r3, [pc, #16]	; (8011ac4 <vTaskSuspendAll+0x18>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	3301      	adds	r3, #1
 8011ab6:	4a03      	ldr	r2, [pc, #12]	; (8011ac4 <vTaskSuspendAll+0x18>)
 8011ab8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011aba:	bf00      	nop
 8011abc:	46bd      	mov	sp, r7
 8011abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac2:	4770      	bx	lr
 8011ac4:	20001240 	.word	0x20001240

08011ac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b084      	sub	sp, #16
 8011acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011ad6:	4b42      	ldr	r3, [pc, #264]	; (8011be0 <xTaskResumeAll+0x118>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d10a      	bne.n	8011af4 <xTaskResumeAll+0x2c>
	__asm volatile
 8011ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae2:	f383 8811 	msr	BASEPRI, r3
 8011ae6:	f3bf 8f6f 	isb	sy
 8011aea:	f3bf 8f4f 	dsb	sy
 8011aee:	603b      	str	r3, [r7, #0]
}
 8011af0:	bf00      	nop
 8011af2:	e7fe      	b.n	8011af2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011af4:	f001 fa1e 	bl	8012f34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011af8:	4b39      	ldr	r3, [pc, #228]	; (8011be0 <xTaskResumeAll+0x118>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	3b01      	subs	r3, #1
 8011afe:	4a38      	ldr	r2, [pc, #224]	; (8011be0 <xTaskResumeAll+0x118>)
 8011b00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b02:	4b37      	ldr	r3, [pc, #220]	; (8011be0 <xTaskResumeAll+0x118>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d162      	bne.n	8011bd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011b0a:	4b36      	ldr	r3, [pc, #216]	; (8011be4 <xTaskResumeAll+0x11c>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d05e      	beq.n	8011bd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011b12:	e02f      	b.n	8011b74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b14:	4b34      	ldr	r3, [pc, #208]	; (8011be8 <xTaskResumeAll+0x120>)
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	68db      	ldr	r3, [r3, #12]
 8011b1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	3318      	adds	r3, #24
 8011b20:	4618      	mov	r0, r3
 8011b22:	f7fe fd2f 	bl	8010584 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	3304      	adds	r3, #4
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7fe fd2a 	bl	8010584 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b34:	4b2d      	ldr	r3, [pc, #180]	; (8011bec <xTaskResumeAll+0x124>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d903      	bls.n	8011b44 <xTaskResumeAll+0x7c>
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b40:	4a2a      	ldr	r2, [pc, #168]	; (8011bec <xTaskResumeAll+0x124>)
 8011b42:	6013      	str	r3, [r2, #0]
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b48:	4613      	mov	r3, r2
 8011b4a:	009b      	lsls	r3, r3, #2
 8011b4c:	4413      	add	r3, r2
 8011b4e:	009b      	lsls	r3, r3, #2
 8011b50:	4a27      	ldr	r2, [pc, #156]	; (8011bf0 <xTaskResumeAll+0x128>)
 8011b52:	441a      	add	r2, r3
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	3304      	adds	r3, #4
 8011b58:	4619      	mov	r1, r3
 8011b5a:	4610      	mov	r0, r2
 8011b5c:	f7fe fcb5 	bl	80104ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b64:	4b23      	ldr	r3, [pc, #140]	; (8011bf4 <xTaskResumeAll+0x12c>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d302      	bcc.n	8011b74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011b6e:	4b22      	ldr	r3, [pc, #136]	; (8011bf8 <xTaskResumeAll+0x130>)
 8011b70:	2201      	movs	r2, #1
 8011b72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011b74:	4b1c      	ldr	r3, [pc, #112]	; (8011be8 <xTaskResumeAll+0x120>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d1cb      	bne.n	8011b14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d001      	beq.n	8011b86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011b82:	f000 fb5f 	bl	8012244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011b86:	4b1d      	ldr	r3, [pc, #116]	; (8011bfc <xTaskResumeAll+0x134>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d010      	beq.n	8011bb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011b92:	f000 f847 	bl	8011c24 <xTaskIncrementTick>
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d002      	beq.n	8011ba2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011b9c:	4b16      	ldr	r3, [pc, #88]	; (8011bf8 <xTaskResumeAll+0x130>)
 8011b9e:	2201      	movs	r2, #1
 8011ba0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	3b01      	subs	r3, #1
 8011ba6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d1f1      	bne.n	8011b92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011bae:	4b13      	ldr	r3, [pc, #76]	; (8011bfc <xTaskResumeAll+0x134>)
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011bb4:	4b10      	ldr	r3, [pc, #64]	; (8011bf8 <xTaskResumeAll+0x130>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d009      	beq.n	8011bd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011bc0:	4b0f      	ldr	r3, [pc, #60]	; (8011c00 <xTaskResumeAll+0x138>)
 8011bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bc6:	601a      	str	r2, [r3, #0]
 8011bc8:	f3bf 8f4f 	dsb	sy
 8011bcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011bd0:	f001 f9e0 	bl	8012f94 <vPortExitCritical>

	return xAlreadyYielded;
 8011bd4:	68bb      	ldr	r3, [r7, #8]
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3710      	adds	r7, #16
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop
 8011be0:	20001240 	.word	0x20001240
 8011be4:	20001218 	.word	0x20001218
 8011be8:	200011d8 	.word	0x200011d8
 8011bec:	20001220 	.word	0x20001220
 8011bf0:	20000d48 	.word	0x20000d48
 8011bf4:	20000d44 	.word	0x20000d44
 8011bf8:	2000122c 	.word	0x2000122c
 8011bfc:	20001228 	.word	0x20001228
 8011c00:	e000ed04 	.word	0xe000ed04

08011c04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011c04:	b480      	push	{r7}
 8011c06:	b083      	sub	sp, #12
 8011c08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011c0a:	4b05      	ldr	r3, [pc, #20]	; (8011c20 <xTaskGetTickCount+0x1c>)
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011c10:	687b      	ldr	r3, [r7, #4]
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	370c      	adds	r7, #12
 8011c16:	46bd      	mov	sp, r7
 8011c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1c:	4770      	bx	lr
 8011c1e:	bf00      	nop
 8011c20:	2000121c 	.word	0x2000121c

08011c24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b086      	sub	sp, #24
 8011c28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c2e:	4b4f      	ldr	r3, [pc, #316]	; (8011d6c <xTaskIncrementTick+0x148>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f040 808f 	bne.w	8011d56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011c38:	4b4d      	ldr	r3, [pc, #308]	; (8011d70 <xTaskIncrementTick+0x14c>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011c40:	4a4b      	ldr	r2, [pc, #300]	; (8011d70 <xTaskIncrementTick+0x14c>)
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d120      	bne.n	8011c8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011c4c:	4b49      	ldr	r3, [pc, #292]	; (8011d74 <xTaskIncrementTick+0x150>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d00a      	beq.n	8011c6c <xTaskIncrementTick+0x48>
	__asm volatile
 8011c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c5a:	f383 8811 	msr	BASEPRI, r3
 8011c5e:	f3bf 8f6f 	isb	sy
 8011c62:	f3bf 8f4f 	dsb	sy
 8011c66:	603b      	str	r3, [r7, #0]
}
 8011c68:	bf00      	nop
 8011c6a:	e7fe      	b.n	8011c6a <xTaskIncrementTick+0x46>
 8011c6c:	4b41      	ldr	r3, [pc, #260]	; (8011d74 <xTaskIncrementTick+0x150>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	60fb      	str	r3, [r7, #12]
 8011c72:	4b41      	ldr	r3, [pc, #260]	; (8011d78 <xTaskIncrementTick+0x154>)
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	4a3f      	ldr	r2, [pc, #252]	; (8011d74 <xTaskIncrementTick+0x150>)
 8011c78:	6013      	str	r3, [r2, #0]
 8011c7a:	4a3f      	ldr	r2, [pc, #252]	; (8011d78 <xTaskIncrementTick+0x154>)
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	6013      	str	r3, [r2, #0]
 8011c80:	4b3e      	ldr	r3, [pc, #248]	; (8011d7c <xTaskIncrementTick+0x158>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	3301      	adds	r3, #1
 8011c86:	4a3d      	ldr	r2, [pc, #244]	; (8011d7c <xTaskIncrementTick+0x158>)
 8011c88:	6013      	str	r3, [r2, #0]
 8011c8a:	f000 fadb 	bl	8012244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011c8e:	4b3c      	ldr	r3, [pc, #240]	; (8011d80 <xTaskIncrementTick+0x15c>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	693a      	ldr	r2, [r7, #16]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d349      	bcc.n	8011d2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c98:	4b36      	ldr	r3, [pc, #216]	; (8011d74 <xTaskIncrementTick+0x150>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d104      	bne.n	8011cac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ca2:	4b37      	ldr	r3, [pc, #220]	; (8011d80 <xTaskIncrementTick+0x15c>)
 8011ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011ca8:	601a      	str	r2, [r3, #0]
					break;
 8011caa:	e03f      	b.n	8011d2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011cac:	4b31      	ldr	r3, [pc, #196]	; (8011d74 <xTaskIncrementTick+0x150>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	68db      	ldr	r3, [r3, #12]
 8011cb2:	68db      	ldr	r3, [r3, #12]
 8011cb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011cbc:	693a      	ldr	r2, [r7, #16]
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	d203      	bcs.n	8011ccc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011cc4:	4a2e      	ldr	r2, [pc, #184]	; (8011d80 <xTaskIncrementTick+0x15c>)
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011cca:	e02f      	b.n	8011d2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	3304      	adds	r3, #4
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7fe fc57 	bl	8010584 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d004      	beq.n	8011ce8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	3318      	adds	r3, #24
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7fe fc4e 	bl	8010584 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cec:	4b25      	ldr	r3, [pc, #148]	; (8011d84 <xTaskIncrementTick+0x160>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d903      	bls.n	8011cfc <xTaskIncrementTick+0xd8>
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cf8:	4a22      	ldr	r2, [pc, #136]	; (8011d84 <xTaskIncrementTick+0x160>)
 8011cfa:	6013      	str	r3, [r2, #0]
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d00:	4613      	mov	r3, r2
 8011d02:	009b      	lsls	r3, r3, #2
 8011d04:	4413      	add	r3, r2
 8011d06:	009b      	lsls	r3, r3, #2
 8011d08:	4a1f      	ldr	r2, [pc, #124]	; (8011d88 <xTaskIncrementTick+0x164>)
 8011d0a:	441a      	add	r2, r3
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	3304      	adds	r3, #4
 8011d10:	4619      	mov	r1, r3
 8011d12:	4610      	mov	r0, r2
 8011d14:	f7fe fbd9 	bl	80104ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d1c:	4b1b      	ldr	r3, [pc, #108]	; (8011d8c <xTaskIncrementTick+0x168>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d3b8      	bcc.n	8011c98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011d26:	2301      	movs	r3, #1
 8011d28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d2a:	e7b5      	b.n	8011c98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011d2c:	4b17      	ldr	r3, [pc, #92]	; (8011d8c <xTaskIncrementTick+0x168>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d32:	4915      	ldr	r1, [pc, #84]	; (8011d88 <xTaskIncrementTick+0x164>)
 8011d34:	4613      	mov	r3, r2
 8011d36:	009b      	lsls	r3, r3, #2
 8011d38:	4413      	add	r3, r2
 8011d3a:	009b      	lsls	r3, r3, #2
 8011d3c:	440b      	add	r3, r1
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	2b01      	cmp	r3, #1
 8011d42:	d901      	bls.n	8011d48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011d44:	2301      	movs	r3, #1
 8011d46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011d48:	4b11      	ldr	r3, [pc, #68]	; (8011d90 <xTaskIncrementTick+0x16c>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d007      	beq.n	8011d60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011d50:	2301      	movs	r3, #1
 8011d52:	617b      	str	r3, [r7, #20]
 8011d54:	e004      	b.n	8011d60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011d56:	4b0f      	ldr	r3, [pc, #60]	; (8011d94 <xTaskIncrementTick+0x170>)
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	4a0d      	ldr	r2, [pc, #52]	; (8011d94 <xTaskIncrementTick+0x170>)
 8011d5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011d60:	697b      	ldr	r3, [r7, #20]
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	3718      	adds	r7, #24
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}
 8011d6a:	bf00      	nop
 8011d6c:	20001240 	.word	0x20001240
 8011d70:	2000121c 	.word	0x2000121c
 8011d74:	200011d0 	.word	0x200011d0
 8011d78:	200011d4 	.word	0x200011d4
 8011d7c:	20001230 	.word	0x20001230
 8011d80:	20001238 	.word	0x20001238
 8011d84:	20001220 	.word	0x20001220
 8011d88:	20000d48 	.word	0x20000d48
 8011d8c:	20000d44 	.word	0x20000d44
 8011d90:	2000122c 	.word	0x2000122c
 8011d94:	20001228 	.word	0x20001228

08011d98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b085      	sub	sp, #20
 8011d9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011d9e:	4b2a      	ldr	r3, [pc, #168]	; (8011e48 <vTaskSwitchContext+0xb0>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d003      	beq.n	8011dae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011da6:	4b29      	ldr	r3, [pc, #164]	; (8011e4c <vTaskSwitchContext+0xb4>)
 8011da8:	2201      	movs	r2, #1
 8011daa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011dac:	e046      	b.n	8011e3c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011dae:	4b27      	ldr	r3, [pc, #156]	; (8011e4c <vTaskSwitchContext+0xb4>)
 8011db0:	2200      	movs	r2, #0
 8011db2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011db4:	4b26      	ldr	r3, [pc, #152]	; (8011e50 <vTaskSwitchContext+0xb8>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	60fb      	str	r3, [r7, #12]
 8011dba:	e010      	b.n	8011dde <vTaskSwitchContext+0x46>
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d10a      	bne.n	8011dd8 <vTaskSwitchContext+0x40>
	__asm volatile
 8011dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc6:	f383 8811 	msr	BASEPRI, r3
 8011dca:	f3bf 8f6f 	isb	sy
 8011dce:	f3bf 8f4f 	dsb	sy
 8011dd2:	607b      	str	r3, [r7, #4]
}
 8011dd4:	bf00      	nop
 8011dd6:	e7fe      	b.n	8011dd6 <vTaskSwitchContext+0x3e>
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	3b01      	subs	r3, #1
 8011ddc:	60fb      	str	r3, [r7, #12]
 8011dde:	491d      	ldr	r1, [pc, #116]	; (8011e54 <vTaskSwitchContext+0xbc>)
 8011de0:	68fa      	ldr	r2, [r7, #12]
 8011de2:	4613      	mov	r3, r2
 8011de4:	009b      	lsls	r3, r3, #2
 8011de6:	4413      	add	r3, r2
 8011de8:	009b      	lsls	r3, r3, #2
 8011dea:	440b      	add	r3, r1
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d0e4      	beq.n	8011dbc <vTaskSwitchContext+0x24>
 8011df2:	68fa      	ldr	r2, [r7, #12]
 8011df4:	4613      	mov	r3, r2
 8011df6:	009b      	lsls	r3, r3, #2
 8011df8:	4413      	add	r3, r2
 8011dfa:	009b      	lsls	r3, r3, #2
 8011dfc:	4a15      	ldr	r2, [pc, #84]	; (8011e54 <vTaskSwitchContext+0xbc>)
 8011dfe:	4413      	add	r3, r2
 8011e00:	60bb      	str	r3, [r7, #8]
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	685b      	ldr	r3, [r3, #4]
 8011e06:	685a      	ldr	r2, [r3, #4]
 8011e08:	68bb      	ldr	r3, [r7, #8]
 8011e0a:	605a      	str	r2, [r3, #4]
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	685a      	ldr	r2, [r3, #4]
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	3308      	adds	r3, #8
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d104      	bne.n	8011e22 <vTaskSwitchContext+0x8a>
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	685b      	ldr	r3, [r3, #4]
 8011e1c:	685a      	ldr	r2, [r3, #4]
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	605a      	str	r2, [r3, #4]
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	68db      	ldr	r3, [r3, #12]
 8011e28:	4a0b      	ldr	r2, [pc, #44]	; (8011e58 <vTaskSwitchContext+0xc0>)
 8011e2a:	6013      	str	r3, [r2, #0]
 8011e2c:	4a08      	ldr	r2, [pc, #32]	; (8011e50 <vTaskSwitchContext+0xb8>)
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011e32:	4b09      	ldr	r3, [pc, #36]	; (8011e58 <vTaskSwitchContext+0xc0>)
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	3354      	adds	r3, #84	; 0x54
 8011e38:	4a08      	ldr	r2, [pc, #32]	; (8011e5c <vTaskSwitchContext+0xc4>)
 8011e3a:	6013      	str	r3, [r2, #0]
}
 8011e3c:	bf00      	nop
 8011e3e:	3714      	adds	r7, #20
 8011e40:	46bd      	mov	sp, r7
 8011e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e46:	4770      	bx	lr
 8011e48:	20001240 	.word	0x20001240
 8011e4c:	2000122c 	.word	0x2000122c
 8011e50:	20001220 	.word	0x20001220
 8011e54:	20000d48 	.word	0x20000d48
 8011e58:	20000d44 	.word	0x20000d44
 8011e5c:	200001b8 	.word	0x200001b8

08011e60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d10a      	bne.n	8011e86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e74:	f383 8811 	msr	BASEPRI, r3
 8011e78:	f3bf 8f6f 	isb	sy
 8011e7c:	f3bf 8f4f 	dsb	sy
 8011e80:	60fb      	str	r3, [r7, #12]
}
 8011e82:	bf00      	nop
 8011e84:	e7fe      	b.n	8011e84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011e86:	4b07      	ldr	r3, [pc, #28]	; (8011ea4 <vTaskPlaceOnEventList+0x44>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	3318      	adds	r3, #24
 8011e8c:	4619      	mov	r1, r3
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f7fe fb3f 	bl	8010512 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011e94:	2101      	movs	r1, #1
 8011e96:	6838      	ldr	r0, [r7, #0]
 8011e98:	f000 fb7e 	bl	8012598 <prvAddCurrentTaskToDelayedList>
}
 8011e9c:	bf00      	nop
 8011e9e:	3710      	adds	r7, #16
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}
 8011ea4:	20000d44 	.word	0x20000d44

08011ea8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b086      	sub	sp, #24
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	60f8      	str	r0, [r7, #12]
 8011eb0:	60b9      	str	r1, [r7, #8]
 8011eb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d10a      	bne.n	8011ed0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ebe:	f383 8811 	msr	BASEPRI, r3
 8011ec2:	f3bf 8f6f 	isb	sy
 8011ec6:	f3bf 8f4f 	dsb	sy
 8011eca:	617b      	str	r3, [r7, #20]
}
 8011ecc:	bf00      	nop
 8011ece:	e7fe      	b.n	8011ece <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011ed0:	4b0a      	ldr	r3, [pc, #40]	; (8011efc <vTaskPlaceOnEventListRestricted+0x54>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	3318      	adds	r3, #24
 8011ed6:	4619      	mov	r1, r3
 8011ed8:	68f8      	ldr	r0, [r7, #12]
 8011eda:	f7fe faf6 	bl	80104ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d002      	beq.n	8011eea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ee8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011eea:	6879      	ldr	r1, [r7, #4]
 8011eec:	68b8      	ldr	r0, [r7, #8]
 8011eee:	f000 fb53 	bl	8012598 <prvAddCurrentTaskToDelayedList>
	}
 8011ef2:	bf00      	nop
 8011ef4:	3718      	adds	r7, #24
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}
 8011efa:	bf00      	nop
 8011efc:	20000d44 	.word	0x20000d44

08011f00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b086      	sub	sp, #24
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	68db      	ldr	r3, [r3, #12]
 8011f0c:	68db      	ldr	r3, [r3, #12]
 8011f0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011f10:	693b      	ldr	r3, [r7, #16]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d10a      	bne.n	8011f2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f1a:	f383 8811 	msr	BASEPRI, r3
 8011f1e:	f3bf 8f6f 	isb	sy
 8011f22:	f3bf 8f4f 	dsb	sy
 8011f26:	60fb      	str	r3, [r7, #12]
}
 8011f28:	bf00      	nop
 8011f2a:	e7fe      	b.n	8011f2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	3318      	adds	r3, #24
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7fe fb27 	bl	8010584 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f36:	4b1e      	ldr	r3, [pc, #120]	; (8011fb0 <xTaskRemoveFromEventList+0xb0>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d11d      	bne.n	8011f7a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	3304      	adds	r3, #4
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7fe fb1e 	bl	8010584 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f4c:	4b19      	ldr	r3, [pc, #100]	; (8011fb4 <xTaskRemoveFromEventList+0xb4>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d903      	bls.n	8011f5c <xTaskRemoveFromEventList+0x5c>
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f58:	4a16      	ldr	r2, [pc, #88]	; (8011fb4 <xTaskRemoveFromEventList+0xb4>)
 8011f5a:	6013      	str	r3, [r2, #0]
 8011f5c:	693b      	ldr	r3, [r7, #16]
 8011f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f60:	4613      	mov	r3, r2
 8011f62:	009b      	lsls	r3, r3, #2
 8011f64:	4413      	add	r3, r2
 8011f66:	009b      	lsls	r3, r3, #2
 8011f68:	4a13      	ldr	r2, [pc, #76]	; (8011fb8 <xTaskRemoveFromEventList+0xb8>)
 8011f6a:	441a      	add	r2, r3
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	3304      	adds	r3, #4
 8011f70:	4619      	mov	r1, r3
 8011f72:	4610      	mov	r0, r2
 8011f74:	f7fe faa9 	bl	80104ca <vListInsertEnd>
 8011f78:	e005      	b.n	8011f86 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	3318      	adds	r3, #24
 8011f7e:	4619      	mov	r1, r3
 8011f80:	480e      	ldr	r0, [pc, #56]	; (8011fbc <xTaskRemoveFromEventList+0xbc>)
 8011f82:	f7fe faa2 	bl	80104ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011f86:	693b      	ldr	r3, [r7, #16]
 8011f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f8a:	4b0d      	ldr	r3, [pc, #52]	; (8011fc0 <xTaskRemoveFromEventList+0xc0>)
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d905      	bls.n	8011fa0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011f94:	2301      	movs	r3, #1
 8011f96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011f98:	4b0a      	ldr	r3, [pc, #40]	; (8011fc4 <xTaskRemoveFromEventList+0xc4>)
 8011f9a:	2201      	movs	r2, #1
 8011f9c:	601a      	str	r2, [r3, #0]
 8011f9e:	e001      	b.n	8011fa4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011fa4:	697b      	ldr	r3, [r7, #20]
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3718      	adds	r7, #24
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}
 8011fae:	bf00      	nop
 8011fb0:	20001240 	.word	0x20001240
 8011fb4:	20001220 	.word	0x20001220
 8011fb8:	20000d48 	.word	0x20000d48
 8011fbc:	200011d8 	.word	0x200011d8
 8011fc0:	20000d44 	.word	0x20000d44
 8011fc4:	2000122c 	.word	0x2000122c

08011fc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011fd0:	4b06      	ldr	r3, [pc, #24]	; (8011fec <vTaskInternalSetTimeOutState+0x24>)
 8011fd2:	681a      	ldr	r2, [r3, #0]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011fd8:	4b05      	ldr	r3, [pc, #20]	; (8011ff0 <vTaskInternalSetTimeOutState+0x28>)
 8011fda:	681a      	ldr	r2, [r3, #0]
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	605a      	str	r2, [r3, #4]
}
 8011fe0:	bf00      	nop
 8011fe2:	370c      	adds	r7, #12
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fea:	4770      	bx	lr
 8011fec:	20001230 	.word	0x20001230
 8011ff0:	2000121c 	.word	0x2000121c

08011ff4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b088      	sub	sp, #32
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d10a      	bne.n	801201a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012008:	f383 8811 	msr	BASEPRI, r3
 801200c:	f3bf 8f6f 	isb	sy
 8012010:	f3bf 8f4f 	dsb	sy
 8012014:	613b      	str	r3, [r7, #16]
}
 8012016:	bf00      	nop
 8012018:	e7fe      	b.n	8012018 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d10a      	bne.n	8012036 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012024:	f383 8811 	msr	BASEPRI, r3
 8012028:	f3bf 8f6f 	isb	sy
 801202c:	f3bf 8f4f 	dsb	sy
 8012030:	60fb      	str	r3, [r7, #12]
}
 8012032:	bf00      	nop
 8012034:	e7fe      	b.n	8012034 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012036:	f000 ff7d 	bl	8012f34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801203a:	4b1d      	ldr	r3, [pc, #116]	; (80120b0 <xTaskCheckForTimeOut+0xbc>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	685b      	ldr	r3, [r3, #4]
 8012044:	69ba      	ldr	r2, [r7, #24]
 8012046:	1ad3      	subs	r3, r2, r3
 8012048:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012052:	d102      	bne.n	801205a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012054:	2300      	movs	r3, #0
 8012056:	61fb      	str	r3, [r7, #28]
 8012058:	e023      	b.n	80120a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681a      	ldr	r2, [r3, #0]
 801205e:	4b15      	ldr	r3, [pc, #84]	; (80120b4 <xTaskCheckForTimeOut+0xc0>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	429a      	cmp	r2, r3
 8012064:	d007      	beq.n	8012076 <xTaskCheckForTimeOut+0x82>
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	69ba      	ldr	r2, [r7, #24]
 801206c:	429a      	cmp	r2, r3
 801206e:	d302      	bcc.n	8012076 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012070:	2301      	movs	r3, #1
 8012072:	61fb      	str	r3, [r7, #28]
 8012074:	e015      	b.n	80120a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	697a      	ldr	r2, [r7, #20]
 801207c:	429a      	cmp	r2, r3
 801207e:	d20b      	bcs.n	8012098 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	681a      	ldr	r2, [r3, #0]
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	1ad2      	subs	r2, r2, r3
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f7ff ff9b 	bl	8011fc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012092:	2300      	movs	r3, #0
 8012094:	61fb      	str	r3, [r7, #28]
 8012096:	e004      	b.n	80120a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	2200      	movs	r2, #0
 801209c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801209e:	2301      	movs	r3, #1
 80120a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80120a2:	f000 ff77 	bl	8012f94 <vPortExitCritical>

	return xReturn;
 80120a6:	69fb      	ldr	r3, [r7, #28]
}
 80120a8:	4618      	mov	r0, r3
 80120aa:	3720      	adds	r7, #32
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}
 80120b0:	2000121c 	.word	0x2000121c
 80120b4:	20001230 	.word	0x20001230

080120b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80120b8:	b480      	push	{r7}
 80120ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80120bc:	4b03      	ldr	r3, [pc, #12]	; (80120cc <vTaskMissedYield+0x14>)
 80120be:	2201      	movs	r2, #1
 80120c0:	601a      	str	r2, [r3, #0]
}
 80120c2:	bf00      	nop
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr
 80120cc:	2000122c 	.word	0x2000122c

080120d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b082      	sub	sp, #8
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80120d8:	f000 f852 	bl	8012180 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80120dc:	4b06      	ldr	r3, [pc, #24]	; (80120f8 <prvIdleTask+0x28>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	2b01      	cmp	r3, #1
 80120e2:	d9f9      	bls.n	80120d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80120e4:	4b05      	ldr	r3, [pc, #20]	; (80120fc <prvIdleTask+0x2c>)
 80120e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120ea:	601a      	str	r2, [r3, #0]
 80120ec:	f3bf 8f4f 	dsb	sy
 80120f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80120f4:	e7f0      	b.n	80120d8 <prvIdleTask+0x8>
 80120f6:	bf00      	nop
 80120f8:	20000d48 	.word	0x20000d48
 80120fc:	e000ed04 	.word	0xe000ed04

08012100 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b082      	sub	sp, #8
 8012104:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012106:	2300      	movs	r3, #0
 8012108:	607b      	str	r3, [r7, #4]
 801210a:	e00c      	b.n	8012126 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	4613      	mov	r3, r2
 8012110:	009b      	lsls	r3, r3, #2
 8012112:	4413      	add	r3, r2
 8012114:	009b      	lsls	r3, r3, #2
 8012116:	4a12      	ldr	r2, [pc, #72]	; (8012160 <prvInitialiseTaskLists+0x60>)
 8012118:	4413      	add	r3, r2
 801211a:	4618      	mov	r0, r3
 801211c:	f7fe f9a8 	bl	8010470 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	3301      	adds	r3, #1
 8012124:	607b      	str	r3, [r7, #4]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2b37      	cmp	r3, #55	; 0x37
 801212a:	d9ef      	bls.n	801210c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801212c:	480d      	ldr	r0, [pc, #52]	; (8012164 <prvInitialiseTaskLists+0x64>)
 801212e:	f7fe f99f 	bl	8010470 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012132:	480d      	ldr	r0, [pc, #52]	; (8012168 <prvInitialiseTaskLists+0x68>)
 8012134:	f7fe f99c 	bl	8010470 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012138:	480c      	ldr	r0, [pc, #48]	; (801216c <prvInitialiseTaskLists+0x6c>)
 801213a:	f7fe f999 	bl	8010470 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801213e:	480c      	ldr	r0, [pc, #48]	; (8012170 <prvInitialiseTaskLists+0x70>)
 8012140:	f7fe f996 	bl	8010470 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012144:	480b      	ldr	r0, [pc, #44]	; (8012174 <prvInitialiseTaskLists+0x74>)
 8012146:	f7fe f993 	bl	8010470 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801214a:	4b0b      	ldr	r3, [pc, #44]	; (8012178 <prvInitialiseTaskLists+0x78>)
 801214c:	4a05      	ldr	r2, [pc, #20]	; (8012164 <prvInitialiseTaskLists+0x64>)
 801214e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012150:	4b0a      	ldr	r3, [pc, #40]	; (801217c <prvInitialiseTaskLists+0x7c>)
 8012152:	4a05      	ldr	r2, [pc, #20]	; (8012168 <prvInitialiseTaskLists+0x68>)
 8012154:	601a      	str	r2, [r3, #0]
}
 8012156:	bf00      	nop
 8012158:	3708      	adds	r7, #8
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop
 8012160:	20000d48 	.word	0x20000d48
 8012164:	200011a8 	.word	0x200011a8
 8012168:	200011bc 	.word	0x200011bc
 801216c:	200011d8 	.word	0x200011d8
 8012170:	200011ec 	.word	0x200011ec
 8012174:	20001204 	.word	0x20001204
 8012178:	200011d0 	.word	0x200011d0
 801217c:	200011d4 	.word	0x200011d4

08012180 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012186:	e019      	b.n	80121bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012188:	f000 fed4 	bl	8012f34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801218c:	4b10      	ldr	r3, [pc, #64]	; (80121d0 <prvCheckTasksWaitingTermination+0x50>)
 801218e:	68db      	ldr	r3, [r3, #12]
 8012190:	68db      	ldr	r3, [r3, #12]
 8012192:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	3304      	adds	r3, #4
 8012198:	4618      	mov	r0, r3
 801219a:	f7fe f9f3 	bl	8010584 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801219e:	4b0d      	ldr	r3, [pc, #52]	; (80121d4 <prvCheckTasksWaitingTermination+0x54>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	3b01      	subs	r3, #1
 80121a4:	4a0b      	ldr	r2, [pc, #44]	; (80121d4 <prvCheckTasksWaitingTermination+0x54>)
 80121a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80121a8:	4b0b      	ldr	r3, [pc, #44]	; (80121d8 <prvCheckTasksWaitingTermination+0x58>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	3b01      	subs	r3, #1
 80121ae:	4a0a      	ldr	r2, [pc, #40]	; (80121d8 <prvCheckTasksWaitingTermination+0x58>)
 80121b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80121b2:	f000 feef 	bl	8012f94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f000 f810 	bl	80121dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80121bc:	4b06      	ldr	r3, [pc, #24]	; (80121d8 <prvCheckTasksWaitingTermination+0x58>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d1e1      	bne.n	8012188 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80121c4:	bf00      	nop
 80121c6:	bf00      	nop
 80121c8:	3708      	adds	r7, #8
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
 80121ce:	bf00      	nop
 80121d0:	200011ec 	.word	0x200011ec
 80121d4:	20001218 	.word	0x20001218
 80121d8:	20001200 	.word	0x20001200

080121dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b084      	sub	sp, #16
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	3354      	adds	r3, #84	; 0x54
 80121e8:	4618      	mov	r0, r3
 80121ea:	f002 ff2d 	bl	8015048 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d108      	bne.n	801220a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121fc:	4618      	mov	r0, r3
 80121fe:	f001 f887 	bl	8013310 <vPortFree>
				vPortFree( pxTCB );
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f001 f884 	bl	8013310 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012208:	e018      	b.n	801223c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012210:	2b01      	cmp	r3, #1
 8012212:	d103      	bne.n	801221c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f001 f87b 	bl	8013310 <vPortFree>
	}
 801221a:	e00f      	b.n	801223c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012222:	2b02      	cmp	r3, #2
 8012224:	d00a      	beq.n	801223c <prvDeleteTCB+0x60>
	__asm volatile
 8012226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801222a:	f383 8811 	msr	BASEPRI, r3
 801222e:	f3bf 8f6f 	isb	sy
 8012232:	f3bf 8f4f 	dsb	sy
 8012236:	60fb      	str	r3, [r7, #12]
}
 8012238:	bf00      	nop
 801223a:	e7fe      	b.n	801223a <prvDeleteTCB+0x5e>
	}
 801223c:	bf00      	nop
 801223e:	3710      	adds	r7, #16
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}

08012244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012244:	b480      	push	{r7}
 8012246:	b083      	sub	sp, #12
 8012248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801224a:	4b0c      	ldr	r3, [pc, #48]	; (801227c <prvResetNextTaskUnblockTime+0x38>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d104      	bne.n	801225e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012254:	4b0a      	ldr	r3, [pc, #40]	; (8012280 <prvResetNextTaskUnblockTime+0x3c>)
 8012256:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801225a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801225c:	e008      	b.n	8012270 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801225e:	4b07      	ldr	r3, [pc, #28]	; (801227c <prvResetNextTaskUnblockTime+0x38>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	68db      	ldr	r3, [r3, #12]
 8012264:	68db      	ldr	r3, [r3, #12]
 8012266:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	4a04      	ldr	r2, [pc, #16]	; (8012280 <prvResetNextTaskUnblockTime+0x3c>)
 801226e:	6013      	str	r3, [r2, #0]
}
 8012270:	bf00      	nop
 8012272:	370c      	adds	r7, #12
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr
 801227c:	200011d0 	.word	0x200011d0
 8012280:	20001238 	.word	0x20001238

08012284 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012284:	b480      	push	{r7}
 8012286:	b083      	sub	sp, #12
 8012288:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801228a:	4b0b      	ldr	r3, [pc, #44]	; (80122b8 <xTaskGetSchedulerState+0x34>)
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d102      	bne.n	8012298 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012292:	2301      	movs	r3, #1
 8012294:	607b      	str	r3, [r7, #4]
 8012296:	e008      	b.n	80122aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012298:	4b08      	ldr	r3, [pc, #32]	; (80122bc <xTaskGetSchedulerState+0x38>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d102      	bne.n	80122a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80122a0:	2302      	movs	r3, #2
 80122a2:	607b      	str	r3, [r7, #4]
 80122a4:	e001      	b.n	80122aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80122a6:	2300      	movs	r3, #0
 80122a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80122aa:	687b      	ldr	r3, [r7, #4]
	}
 80122ac:	4618      	mov	r0, r3
 80122ae:	370c      	adds	r7, #12
 80122b0:	46bd      	mov	sp, r7
 80122b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b6:	4770      	bx	lr
 80122b8:	20001224 	.word	0x20001224
 80122bc:	20001240 	.word	0x20001240

080122c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b084      	sub	sp, #16
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80122cc:	2300      	movs	r3, #0
 80122ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d051      	beq.n	801237a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122da:	4b2a      	ldr	r3, [pc, #168]	; (8012384 <xTaskPriorityInherit+0xc4>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d241      	bcs.n	8012368 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80122e4:	68bb      	ldr	r3, [r7, #8]
 80122e6:	699b      	ldr	r3, [r3, #24]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	db06      	blt.n	80122fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122ec:	4b25      	ldr	r3, [pc, #148]	; (8012384 <xTaskPriorityInherit+0xc4>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	6959      	ldr	r1, [r3, #20]
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012302:	4613      	mov	r3, r2
 8012304:	009b      	lsls	r3, r3, #2
 8012306:	4413      	add	r3, r2
 8012308:	009b      	lsls	r3, r3, #2
 801230a:	4a1f      	ldr	r2, [pc, #124]	; (8012388 <xTaskPriorityInherit+0xc8>)
 801230c:	4413      	add	r3, r2
 801230e:	4299      	cmp	r1, r3
 8012310:	d122      	bne.n	8012358 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012312:	68bb      	ldr	r3, [r7, #8]
 8012314:	3304      	adds	r3, #4
 8012316:	4618      	mov	r0, r3
 8012318:	f7fe f934 	bl	8010584 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801231c:	4b19      	ldr	r3, [pc, #100]	; (8012384 <xTaskPriorityInherit+0xc4>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012322:	68bb      	ldr	r3, [r7, #8]
 8012324:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801232a:	4b18      	ldr	r3, [pc, #96]	; (801238c <xTaskPriorityInherit+0xcc>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	429a      	cmp	r2, r3
 8012330:	d903      	bls.n	801233a <xTaskPriorityInherit+0x7a>
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012336:	4a15      	ldr	r2, [pc, #84]	; (801238c <xTaskPriorityInherit+0xcc>)
 8012338:	6013      	str	r3, [r2, #0]
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801233e:	4613      	mov	r3, r2
 8012340:	009b      	lsls	r3, r3, #2
 8012342:	4413      	add	r3, r2
 8012344:	009b      	lsls	r3, r3, #2
 8012346:	4a10      	ldr	r2, [pc, #64]	; (8012388 <xTaskPriorityInherit+0xc8>)
 8012348:	441a      	add	r2, r3
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	3304      	adds	r3, #4
 801234e:	4619      	mov	r1, r3
 8012350:	4610      	mov	r0, r2
 8012352:	f7fe f8ba 	bl	80104ca <vListInsertEnd>
 8012356:	e004      	b.n	8012362 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012358:	4b0a      	ldr	r3, [pc, #40]	; (8012384 <xTaskPriorityInherit+0xc4>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801235e:	68bb      	ldr	r3, [r7, #8]
 8012360:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012362:	2301      	movs	r3, #1
 8012364:	60fb      	str	r3, [r7, #12]
 8012366:	e008      	b.n	801237a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801236c:	4b05      	ldr	r3, [pc, #20]	; (8012384 <xTaskPriorityInherit+0xc4>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012372:	429a      	cmp	r2, r3
 8012374:	d201      	bcs.n	801237a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012376:	2301      	movs	r3, #1
 8012378:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801237a:	68fb      	ldr	r3, [r7, #12]
	}
 801237c:	4618      	mov	r0, r3
 801237e:	3710      	adds	r7, #16
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}
 8012384:	20000d44 	.word	0x20000d44
 8012388:	20000d48 	.word	0x20000d48
 801238c:	20001220 	.word	0x20001220

08012390 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012390:	b580      	push	{r7, lr}
 8012392:	b086      	sub	sp, #24
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801239c:	2300      	movs	r3, #0
 801239e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d056      	beq.n	8012454 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80123a6:	4b2e      	ldr	r3, [pc, #184]	; (8012460 <xTaskPriorityDisinherit+0xd0>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	693a      	ldr	r2, [r7, #16]
 80123ac:	429a      	cmp	r2, r3
 80123ae:	d00a      	beq.n	80123c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80123b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b4:	f383 8811 	msr	BASEPRI, r3
 80123b8:	f3bf 8f6f 	isb	sy
 80123bc:	f3bf 8f4f 	dsb	sy
 80123c0:	60fb      	str	r3, [r7, #12]
}
 80123c2:	bf00      	nop
 80123c4:	e7fe      	b.n	80123c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d10a      	bne.n	80123e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80123ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123d2:	f383 8811 	msr	BASEPRI, r3
 80123d6:	f3bf 8f6f 	isb	sy
 80123da:	f3bf 8f4f 	dsb	sy
 80123de:	60bb      	str	r3, [r7, #8]
}
 80123e0:	bf00      	nop
 80123e2:	e7fe      	b.n	80123e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80123e4:	693b      	ldr	r3, [r7, #16]
 80123e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123e8:	1e5a      	subs	r2, r3, #1
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80123ee:	693b      	ldr	r3, [r7, #16]
 80123f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123f2:	693b      	ldr	r3, [r7, #16]
 80123f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d02c      	beq.n	8012454 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80123fa:	693b      	ldr	r3, [r7, #16]
 80123fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d128      	bne.n	8012454 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	3304      	adds	r3, #4
 8012406:	4618      	mov	r0, r3
 8012408:	f7fe f8bc 	bl	8010584 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801240c:	693b      	ldr	r3, [r7, #16]
 801240e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012410:	693b      	ldr	r3, [r7, #16]
 8012412:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012418:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801241c:	693b      	ldr	r3, [r7, #16]
 801241e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012420:	693b      	ldr	r3, [r7, #16]
 8012422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012424:	4b0f      	ldr	r3, [pc, #60]	; (8012464 <xTaskPriorityDisinherit+0xd4>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	429a      	cmp	r2, r3
 801242a:	d903      	bls.n	8012434 <xTaskPriorityDisinherit+0xa4>
 801242c:	693b      	ldr	r3, [r7, #16]
 801242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012430:	4a0c      	ldr	r2, [pc, #48]	; (8012464 <xTaskPriorityDisinherit+0xd4>)
 8012432:	6013      	str	r3, [r2, #0]
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012438:	4613      	mov	r3, r2
 801243a:	009b      	lsls	r3, r3, #2
 801243c:	4413      	add	r3, r2
 801243e:	009b      	lsls	r3, r3, #2
 8012440:	4a09      	ldr	r2, [pc, #36]	; (8012468 <xTaskPriorityDisinherit+0xd8>)
 8012442:	441a      	add	r2, r3
 8012444:	693b      	ldr	r3, [r7, #16]
 8012446:	3304      	adds	r3, #4
 8012448:	4619      	mov	r1, r3
 801244a:	4610      	mov	r0, r2
 801244c:	f7fe f83d 	bl	80104ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012450:	2301      	movs	r3, #1
 8012452:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012454:	697b      	ldr	r3, [r7, #20]
	}
 8012456:	4618      	mov	r0, r3
 8012458:	3718      	adds	r7, #24
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}
 801245e:	bf00      	nop
 8012460:	20000d44 	.word	0x20000d44
 8012464:	20001220 	.word	0x20001220
 8012468:	20000d48 	.word	0x20000d48

0801246c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801246c:	b580      	push	{r7, lr}
 801246e:	b088      	sub	sp, #32
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801247a:	2301      	movs	r3, #1
 801247c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d06a      	beq.n	801255a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012488:	2b00      	cmp	r3, #0
 801248a:	d10a      	bne.n	80124a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012490:	f383 8811 	msr	BASEPRI, r3
 8012494:	f3bf 8f6f 	isb	sy
 8012498:	f3bf 8f4f 	dsb	sy
 801249c:	60fb      	str	r3, [r7, #12]
}
 801249e:	bf00      	nop
 80124a0:	e7fe      	b.n	80124a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80124a2:	69bb      	ldr	r3, [r7, #24]
 80124a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80124a6:	683a      	ldr	r2, [r7, #0]
 80124a8:	429a      	cmp	r2, r3
 80124aa:	d902      	bls.n	80124b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	61fb      	str	r3, [r7, #28]
 80124b0:	e002      	b.n	80124b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80124b2:	69bb      	ldr	r3, [r7, #24]
 80124b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80124b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80124b8:	69bb      	ldr	r3, [r7, #24]
 80124ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124bc:	69fa      	ldr	r2, [r7, #28]
 80124be:	429a      	cmp	r2, r3
 80124c0:	d04b      	beq.n	801255a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80124c2:	69bb      	ldr	r3, [r7, #24]
 80124c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124c6:	697a      	ldr	r2, [r7, #20]
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d146      	bne.n	801255a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80124cc:	4b25      	ldr	r3, [pc, #148]	; (8012564 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	69ba      	ldr	r2, [r7, #24]
 80124d2:	429a      	cmp	r2, r3
 80124d4:	d10a      	bne.n	80124ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80124d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124da:	f383 8811 	msr	BASEPRI, r3
 80124de:	f3bf 8f6f 	isb	sy
 80124e2:	f3bf 8f4f 	dsb	sy
 80124e6:	60bb      	str	r3, [r7, #8]
}
 80124e8:	bf00      	nop
 80124ea:	e7fe      	b.n	80124ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80124f2:	69bb      	ldr	r3, [r7, #24]
 80124f4:	69fa      	ldr	r2, [r7, #28]
 80124f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80124f8:	69bb      	ldr	r3, [r7, #24]
 80124fa:	699b      	ldr	r3, [r3, #24]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	db04      	blt.n	801250a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012500:	69fb      	ldr	r3, [r7, #28]
 8012502:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012506:	69bb      	ldr	r3, [r7, #24]
 8012508:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801250a:	69bb      	ldr	r3, [r7, #24]
 801250c:	6959      	ldr	r1, [r3, #20]
 801250e:	693a      	ldr	r2, [r7, #16]
 8012510:	4613      	mov	r3, r2
 8012512:	009b      	lsls	r3, r3, #2
 8012514:	4413      	add	r3, r2
 8012516:	009b      	lsls	r3, r3, #2
 8012518:	4a13      	ldr	r2, [pc, #76]	; (8012568 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801251a:	4413      	add	r3, r2
 801251c:	4299      	cmp	r1, r3
 801251e:	d11c      	bne.n	801255a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012520:	69bb      	ldr	r3, [r7, #24]
 8012522:	3304      	adds	r3, #4
 8012524:	4618      	mov	r0, r3
 8012526:	f7fe f82d 	bl	8010584 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801252a:	69bb      	ldr	r3, [r7, #24]
 801252c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801252e:	4b0f      	ldr	r3, [pc, #60]	; (801256c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	429a      	cmp	r2, r3
 8012534:	d903      	bls.n	801253e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8012536:	69bb      	ldr	r3, [r7, #24]
 8012538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801253a:	4a0c      	ldr	r2, [pc, #48]	; (801256c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801253c:	6013      	str	r3, [r2, #0]
 801253e:	69bb      	ldr	r3, [r7, #24]
 8012540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012542:	4613      	mov	r3, r2
 8012544:	009b      	lsls	r3, r3, #2
 8012546:	4413      	add	r3, r2
 8012548:	009b      	lsls	r3, r3, #2
 801254a:	4a07      	ldr	r2, [pc, #28]	; (8012568 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801254c:	441a      	add	r2, r3
 801254e:	69bb      	ldr	r3, [r7, #24]
 8012550:	3304      	adds	r3, #4
 8012552:	4619      	mov	r1, r3
 8012554:	4610      	mov	r0, r2
 8012556:	f7fd ffb8 	bl	80104ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801255a:	bf00      	nop
 801255c:	3720      	adds	r7, #32
 801255e:	46bd      	mov	sp, r7
 8012560:	bd80      	pop	{r7, pc}
 8012562:	bf00      	nop
 8012564:	20000d44 	.word	0x20000d44
 8012568:	20000d48 	.word	0x20000d48
 801256c:	20001220 	.word	0x20001220

08012570 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012570:	b480      	push	{r7}
 8012572:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012574:	4b07      	ldr	r3, [pc, #28]	; (8012594 <pvTaskIncrementMutexHeldCount+0x24>)
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d004      	beq.n	8012586 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801257c:	4b05      	ldr	r3, [pc, #20]	; (8012594 <pvTaskIncrementMutexHeldCount+0x24>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012582:	3201      	adds	r2, #1
 8012584:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012586:	4b03      	ldr	r3, [pc, #12]	; (8012594 <pvTaskIncrementMutexHeldCount+0x24>)
 8012588:	681b      	ldr	r3, [r3, #0]
	}
 801258a:	4618      	mov	r0, r3
 801258c:	46bd      	mov	sp, r7
 801258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012592:	4770      	bx	lr
 8012594:	20000d44 	.word	0x20000d44

08012598 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b084      	sub	sp, #16
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
 80125a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80125a2:	4b21      	ldr	r3, [pc, #132]	; (8012628 <prvAddCurrentTaskToDelayedList+0x90>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80125a8:	4b20      	ldr	r3, [pc, #128]	; (801262c <prvAddCurrentTaskToDelayedList+0x94>)
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	3304      	adds	r3, #4
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7fd ffe8 	bl	8010584 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80125ba:	d10a      	bne.n	80125d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d007      	beq.n	80125d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80125c2:	4b1a      	ldr	r3, [pc, #104]	; (801262c <prvAddCurrentTaskToDelayedList+0x94>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	3304      	adds	r3, #4
 80125c8:	4619      	mov	r1, r3
 80125ca:	4819      	ldr	r0, [pc, #100]	; (8012630 <prvAddCurrentTaskToDelayedList+0x98>)
 80125cc:	f7fd ff7d 	bl	80104ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80125d0:	e026      	b.n	8012620 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80125d2:	68fa      	ldr	r2, [r7, #12]
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	4413      	add	r3, r2
 80125d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80125da:	4b14      	ldr	r3, [pc, #80]	; (801262c <prvAddCurrentTaskToDelayedList+0x94>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	68ba      	ldr	r2, [r7, #8]
 80125e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80125e2:	68ba      	ldr	r2, [r7, #8]
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d209      	bcs.n	80125fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80125ea:	4b12      	ldr	r3, [pc, #72]	; (8012634 <prvAddCurrentTaskToDelayedList+0x9c>)
 80125ec:	681a      	ldr	r2, [r3, #0]
 80125ee:	4b0f      	ldr	r3, [pc, #60]	; (801262c <prvAddCurrentTaskToDelayedList+0x94>)
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	3304      	adds	r3, #4
 80125f4:	4619      	mov	r1, r3
 80125f6:	4610      	mov	r0, r2
 80125f8:	f7fd ff8b 	bl	8010512 <vListInsert>
}
 80125fc:	e010      	b.n	8012620 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80125fe:	4b0e      	ldr	r3, [pc, #56]	; (8012638 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012600:	681a      	ldr	r2, [r3, #0]
 8012602:	4b0a      	ldr	r3, [pc, #40]	; (801262c <prvAddCurrentTaskToDelayedList+0x94>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	3304      	adds	r3, #4
 8012608:	4619      	mov	r1, r3
 801260a:	4610      	mov	r0, r2
 801260c:	f7fd ff81 	bl	8010512 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012610:	4b0a      	ldr	r3, [pc, #40]	; (801263c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	68ba      	ldr	r2, [r7, #8]
 8012616:	429a      	cmp	r2, r3
 8012618:	d202      	bcs.n	8012620 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801261a:	4a08      	ldr	r2, [pc, #32]	; (801263c <prvAddCurrentTaskToDelayedList+0xa4>)
 801261c:	68bb      	ldr	r3, [r7, #8]
 801261e:	6013      	str	r3, [r2, #0]
}
 8012620:	bf00      	nop
 8012622:	3710      	adds	r7, #16
 8012624:	46bd      	mov	sp, r7
 8012626:	bd80      	pop	{r7, pc}
 8012628:	2000121c 	.word	0x2000121c
 801262c:	20000d44 	.word	0x20000d44
 8012630:	20001204 	.word	0x20001204
 8012634:	200011d4 	.word	0x200011d4
 8012638:	200011d0 	.word	0x200011d0
 801263c:	20001238 	.word	0x20001238

08012640 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b08a      	sub	sp, #40	; 0x28
 8012644:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012646:	2300      	movs	r3, #0
 8012648:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801264a:	f000 fb07 	bl	8012c5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801264e:	4b1c      	ldr	r3, [pc, #112]	; (80126c0 <xTimerCreateTimerTask+0x80>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d021      	beq.n	801269a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012656:	2300      	movs	r3, #0
 8012658:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801265a:	2300      	movs	r3, #0
 801265c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801265e:	1d3a      	adds	r2, r7, #4
 8012660:	f107 0108 	add.w	r1, r7, #8
 8012664:	f107 030c 	add.w	r3, r7, #12
 8012668:	4618      	mov	r0, r3
 801266a:	f7fd fee7 	bl	801043c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801266e:	6879      	ldr	r1, [r7, #4]
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	68fa      	ldr	r2, [r7, #12]
 8012674:	9202      	str	r2, [sp, #8]
 8012676:	9301      	str	r3, [sp, #4]
 8012678:	2302      	movs	r3, #2
 801267a:	9300      	str	r3, [sp, #0]
 801267c:	2300      	movs	r3, #0
 801267e:	460a      	mov	r2, r1
 8012680:	4910      	ldr	r1, [pc, #64]	; (80126c4 <xTimerCreateTimerTask+0x84>)
 8012682:	4811      	ldr	r0, [pc, #68]	; (80126c8 <xTimerCreateTimerTask+0x88>)
 8012684:	f7fe ffb6 	bl	80115f4 <xTaskCreateStatic>
 8012688:	4603      	mov	r3, r0
 801268a:	4a10      	ldr	r2, [pc, #64]	; (80126cc <xTimerCreateTimerTask+0x8c>)
 801268c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801268e:	4b0f      	ldr	r3, [pc, #60]	; (80126cc <xTimerCreateTimerTask+0x8c>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d001      	beq.n	801269a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012696:	2301      	movs	r3, #1
 8012698:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801269a:	697b      	ldr	r3, [r7, #20]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d10a      	bne.n	80126b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80126a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a4:	f383 8811 	msr	BASEPRI, r3
 80126a8:	f3bf 8f6f 	isb	sy
 80126ac:	f3bf 8f4f 	dsb	sy
 80126b0:	613b      	str	r3, [r7, #16]
}
 80126b2:	bf00      	nop
 80126b4:	e7fe      	b.n	80126b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80126b6:	697b      	ldr	r3, [r7, #20]
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	3718      	adds	r7, #24
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}
 80126c0:	20001274 	.word	0x20001274
 80126c4:	08018bc8 	.word	0x08018bc8
 80126c8:	08012805 	.word	0x08012805
 80126cc:	20001278 	.word	0x20001278

080126d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b08a      	sub	sp, #40	; 0x28
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	60f8      	str	r0, [r7, #12]
 80126d8:	60b9      	str	r1, [r7, #8]
 80126da:	607a      	str	r2, [r7, #4]
 80126dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80126de:	2300      	movs	r3, #0
 80126e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d10a      	bne.n	80126fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80126e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ec:	f383 8811 	msr	BASEPRI, r3
 80126f0:	f3bf 8f6f 	isb	sy
 80126f4:	f3bf 8f4f 	dsb	sy
 80126f8:	623b      	str	r3, [r7, #32]
}
 80126fa:	bf00      	nop
 80126fc:	e7fe      	b.n	80126fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80126fe:	4b1a      	ldr	r3, [pc, #104]	; (8012768 <xTimerGenericCommand+0x98>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d02a      	beq.n	801275c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012706:	68bb      	ldr	r3, [r7, #8]
 8012708:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	2b05      	cmp	r3, #5
 8012716:	dc18      	bgt.n	801274a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012718:	f7ff fdb4 	bl	8012284 <xTaskGetSchedulerState>
 801271c:	4603      	mov	r3, r0
 801271e:	2b02      	cmp	r3, #2
 8012720:	d109      	bne.n	8012736 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012722:	4b11      	ldr	r3, [pc, #68]	; (8012768 <xTimerGenericCommand+0x98>)
 8012724:	6818      	ldr	r0, [r3, #0]
 8012726:	f107 0110 	add.w	r1, r7, #16
 801272a:	2300      	movs	r3, #0
 801272c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801272e:	f7fe f8fb 	bl	8010928 <xQueueGenericSend>
 8012732:	6278      	str	r0, [r7, #36]	; 0x24
 8012734:	e012      	b.n	801275c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012736:	4b0c      	ldr	r3, [pc, #48]	; (8012768 <xTimerGenericCommand+0x98>)
 8012738:	6818      	ldr	r0, [r3, #0]
 801273a:	f107 0110 	add.w	r1, r7, #16
 801273e:	2300      	movs	r3, #0
 8012740:	2200      	movs	r2, #0
 8012742:	f7fe f8f1 	bl	8010928 <xQueueGenericSend>
 8012746:	6278      	str	r0, [r7, #36]	; 0x24
 8012748:	e008      	b.n	801275c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801274a:	4b07      	ldr	r3, [pc, #28]	; (8012768 <xTimerGenericCommand+0x98>)
 801274c:	6818      	ldr	r0, [r3, #0]
 801274e:	f107 0110 	add.w	r1, r7, #16
 8012752:	2300      	movs	r3, #0
 8012754:	683a      	ldr	r2, [r7, #0]
 8012756:	f7fe f9e5 	bl	8010b24 <xQueueGenericSendFromISR>
 801275a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801275e:	4618      	mov	r0, r3
 8012760:	3728      	adds	r7, #40	; 0x28
 8012762:	46bd      	mov	sp, r7
 8012764:	bd80      	pop	{r7, pc}
 8012766:	bf00      	nop
 8012768:	20001274 	.word	0x20001274

0801276c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b088      	sub	sp, #32
 8012770:	af02      	add	r7, sp, #8
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012776:	4b22      	ldr	r3, [pc, #136]	; (8012800 <prvProcessExpiredTimer+0x94>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	68db      	ldr	r3, [r3, #12]
 801277c:	68db      	ldr	r3, [r3, #12]
 801277e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	3304      	adds	r3, #4
 8012784:	4618      	mov	r0, r3
 8012786:	f7fd fefd 	bl	8010584 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012790:	f003 0304 	and.w	r3, r3, #4
 8012794:	2b00      	cmp	r3, #0
 8012796:	d022      	beq.n	80127de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	699a      	ldr	r2, [r3, #24]
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	18d1      	adds	r1, r2, r3
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	683a      	ldr	r2, [r7, #0]
 80127a4:	6978      	ldr	r0, [r7, #20]
 80127a6:	f000 f8d1 	bl	801294c <prvInsertTimerInActiveList>
 80127aa:	4603      	mov	r3, r0
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d01f      	beq.n	80127f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80127b0:	2300      	movs	r3, #0
 80127b2:	9300      	str	r3, [sp, #0]
 80127b4:	2300      	movs	r3, #0
 80127b6:	687a      	ldr	r2, [r7, #4]
 80127b8:	2100      	movs	r1, #0
 80127ba:	6978      	ldr	r0, [r7, #20]
 80127bc:	f7ff ff88 	bl	80126d0 <xTimerGenericCommand>
 80127c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d113      	bne.n	80127f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80127c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127cc:	f383 8811 	msr	BASEPRI, r3
 80127d0:	f3bf 8f6f 	isb	sy
 80127d4:	f3bf 8f4f 	dsb	sy
 80127d8:	60fb      	str	r3, [r7, #12]
}
 80127da:	bf00      	nop
 80127dc:	e7fe      	b.n	80127dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127e4:	f023 0301 	bic.w	r3, r3, #1
 80127e8:	b2da      	uxtb	r2, r3
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	6a1b      	ldr	r3, [r3, #32]
 80127f4:	6978      	ldr	r0, [r7, #20]
 80127f6:	4798      	blx	r3
}
 80127f8:	bf00      	nop
 80127fa:	3718      	adds	r7, #24
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}
 8012800:	2000126c 	.word	0x2000126c

08012804 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b084      	sub	sp, #16
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801280c:	f107 0308 	add.w	r3, r7, #8
 8012810:	4618      	mov	r0, r3
 8012812:	f000 f857 	bl	80128c4 <prvGetNextExpireTime>
 8012816:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	4619      	mov	r1, r3
 801281c:	68f8      	ldr	r0, [r7, #12]
 801281e:	f000 f803 	bl	8012828 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012822:	f000 f8d5 	bl	80129d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012826:	e7f1      	b.n	801280c <prvTimerTask+0x8>

08012828 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b084      	sub	sp, #16
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012832:	f7ff f93b 	bl	8011aac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012836:	f107 0308 	add.w	r3, r7, #8
 801283a:	4618      	mov	r0, r3
 801283c:	f000 f866 	bl	801290c <prvSampleTimeNow>
 8012840:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d130      	bne.n	80128aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d10a      	bne.n	8012864 <prvProcessTimerOrBlockTask+0x3c>
 801284e:	687a      	ldr	r2, [r7, #4]
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	429a      	cmp	r2, r3
 8012854:	d806      	bhi.n	8012864 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012856:	f7ff f937 	bl	8011ac8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801285a:	68f9      	ldr	r1, [r7, #12]
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f7ff ff85 	bl	801276c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012862:	e024      	b.n	80128ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d008      	beq.n	801287c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801286a:	4b13      	ldr	r3, [pc, #76]	; (80128b8 <prvProcessTimerOrBlockTask+0x90>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d101      	bne.n	8012878 <prvProcessTimerOrBlockTask+0x50>
 8012874:	2301      	movs	r3, #1
 8012876:	e000      	b.n	801287a <prvProcessTimerOrBlockTask+0x52>
 8012878:	2300      	movs	r3, #0
 801287a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801287c:	4b0f      	ldr	r3, [pc, #60]	; (80128bc <prvProcessTimerOrBlockTask+0x94>)
 801287e:	6818      	ldr	r0, [r3, #0]
 8012880:	687a      	ldr	r2, [r7, #4]
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	1ad3      	subs	r3, r2, r3
 8012886:	683a      	ldr	r2, [r7, #0]
 8012888:	4619      	mov	r1, r3
 801288a:	f7fe fe7f 	bl	801158c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801288e:	f7ff f91b 	bl	8011ac8 <xTaskResumeAll>
 8012892:	4603      	mov	r3, r0
 8012894:	2b00      	cmp	r3, #0
 8012896:	d10a      	bne.n	80128ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012898:	4b09      	ldr	r3, [pc, #36]	; (80128c0 <prvProcessTimerOrBlockTask+0x98>)
 801289a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801289e:	601a      	str	r2, [r3, #0]
 80128a0:	f3bf 8f4f 	dsb	sy
 80128a4:	f3bf 8f6f 	isb	sy
}
 80128a8:	e001      	b.n	80128ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80128aa:	f7ff f90d 	bl	8011ac8 <xTaskResumeAll>
}
 80128ae:	bf00      	nop
 80128b0:	3710      	adds	r7, #16
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	20001270 	.word	0x20001270
 80128bc:	20001274 	.word	0x20001274
 80128c0:	e000ed04 	.word	0xe000ed04

080128c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80128c4:	b480      	push	{r7}
 80128c6:	b085      	sub	sp, #20
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80128cc:	4b0e      	ldr	r3, [pc, #56]	; (8012908 <prvGetNextExpireTime+0x44>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d101      	bne.n	80128da <prvGetNextExpireTime+0x16>
 80128d6:	2201      	movs	r2, #1
 80128d8:	e000      	b.n	80128dc <prvGetNextExpireTime+0x18>
 80128da:	2200      	movs	r2, #0
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d105      	bne.n	80128f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80128e8:	4b07      	ldr	r3, [pc, #28]	; (8012908 <prvGetNextExpireTime+0x44>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	68db      	ldr	r3, [r3, #12]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	60fb      	str	r3, [r7, #12]
 80128f2:	e001      	b.n	80128f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80128f4:	2300      	movs	r3, #0
 80128f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80128f8:	68fb      	ldr	r3, [r7, #12]
}
 80128fa:	4618      	mov	r0, r3
 80128fc:	3714      	adds	r7, #20
 80128fe:	46bd      	mov	sp, r7
 8012900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012904:	4770      	bx	lr
 8012906:	bf00      	nop
 8012908:	2000126c 	.word	0x2000126c

0801290c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b084      	sub	sp, #16
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012914:	f7ff f976 	bl	8011c04 <xTaskGetTickCount>
 8012918:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801291a:	4b0b      	ldr	r3, [pc, #44]	; (8012948 <prvSampleTimeNow+0x3c>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	68fa      	ldr	r2, [r7, #12]
 8012920:	429a      	cmp	r2, r3
 8012922:	d205      	bcs.n	8012930 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012924:	f000 f936 	bl	8012b94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2201      	movs	r2, #1
 801292c:	601a      	str	r2, [r3, #0]
 801292e:	e002      	b.n	8012936 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2200      	movs	r2, #0
 8012934:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012936:	4a04      	ldr	r2, [pc, #16]	; (8012948 <prvSampleTimeNow+0x3c>)
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801293c:	68fb      	ldr	r3, [r7, #12]
}
 801293e:	4618      	mov	r0, r3
 8012940:	3710      	adds	r7, #16
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
 8012946:	bf00      	nop
 8012948:	2000127c 	.word	0x2000127c

0801294c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b086      	sub	sp, #24
 8012950:	af00      	add	r7, sp, #0
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	60b9      	str	r1, [r7, #8]
 8012956:	607a      	str	r2, [r7, #4]
 8012958:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801295a:	2300      	movs	r3, #0
 801295c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	68ba      	ldr	r2, [r7, #8]
 8012962:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	68fa      	ldr	r2, [r7, #12]
 8012968:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801296a:	68ba      	ldr	r2, [r7, #8]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	429a      	cmp	r2, r3
 8012970:	d812      	bhi.n	8012998 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012972:	687a      	ldr	r2, [r7, #4]
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	1ad2      	subs	r2, r2, r3
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	699b      	ldr	r3, [r3, #24]
 801297c:	429a      	cmp	r2, r3
 801297e:	d302      	bcc.n	8012986 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012980:	2301      	movs	r3, #1
 8012982:	617b      	str	r3, [r7, #20]
 8012984:	e01b      	b.n	80129be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012986:	4b10      	ldr	r3, [pc, #64]	; (80129c8 <prvInsertTimerInActiveList+0x7c>)
 8012988:	681a      	ldr	r2, [r3, #0]
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	3304      	adds	r3, #4
 801298e:	4619      	mov	r1, r3
 8012990:	4610      	mov	r0, r2
 8012992:	f7fd fdbe 	bl	8010512 <vListInsert>
 8012996:	e012      	b.n	80129be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012998:	687a      	ldr	r2, [r7, #4]
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	429a      	cmp	r2, r3
 801299e:	d206      	bcs.n	80129ae <prvInsertTimerInActiveList+0x62>
 80129a0:	68ba      	ldr	r2, [r7, #8]
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	429a      	cmp	r2, r3
 80129a6:	d302      	bcc.n	80129ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80129a8:	2301      	movs	r3, #1
 80129aa:	617b      	str	r3, [r7, #20]
 80129ac:	e007      	b.n	80129be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80129ae:	4b07      	ldr	r3, [pc, #28]	; (80129cc <prvInsertTimerInActiveList+0x80>)
 80129b0:	681a      	ldr	r2, [r3, #0]
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	3304      	adds	r3, #4
 80129b6:	4619      	mov	r1, r3
 80129b8:	4610      	mov	r0, r2
 80129ba:	f7fd fdaa 	bl	8010512 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80129be:	697b      	ldr	r3, [r7, #20]
}
 80129c0:	4618      	mov	r0, r3
 80129c2:	3718      	adds	r7, #24
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}
 80129c8:	20001270 	.word	0x20001270
 80129cc:	2000126c 	.word	0x2000126c

080129d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b08e      	sub	sp, #56	; 0x38
 80129d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80129d6:	e0ca      	b.n	8012b6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	da18      	bge.n	8012a10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80129de:	1d3b      	adds	r3, r7, #4
 80129e0:	3304      	adds	r3, #4
 80129e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80129e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d10a      	bne.n	8012a00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80129ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ee:	f383 8811 	msr	BASEPRI, r3
 80129f2:	f3bf 8f6f 	isb	sy
 80129f6:	f3bf 8f4f 	dsb	sy
 80129fa:	61fb      	str	r3, [r7, #28]
}
 80129fc:	bf00      	nop
 80129fe:	e7fe      	b.n	80129fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a06:	6850      	ldr	r0, [r2, #4]
 8012a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a0a:	6892      	ldr	r2, [r2, #8]
 8012a0c:	4611      	mov	r1, r2
 8012a0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	f2c0 80aa 	blt.w	8012b6c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a1e:	695b      	ldr	r3, [r3, #20]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d004      	beq.n	8012a2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a26:	3304      	adds	r3, #4
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f7fd fdab 	bl	8010584 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012a2e:	463b      	mov	r3, r7
 8012a30:	4618      	mov	r0, r3
 8012a32:	f7ff ff6b 	bl	801290c <prvSampleTimeNow>
 8012a36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2b09      	cmp	r3, #9
 8012a3c:	f200 8097 	bhi.w	8012b6e <prvProcessReceivedCommands+0x19e>
 8012a40:	a201      	add	r2, pc, #4	; (adr r2, 8012a48 <prvProcessReceivedCommands+0x78>)
 8012a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a46:	bf00      	nop
 8012a48:	08012a71 	.word	0x08012a71
 8012a4c:	08012a71 	.word	0x08012a71
 8012a50:	08012a71 	.word	0x08012a71
 8012a54:	08012ae5 	.word	0x08012ae5
 8012a58:	08012af9 	.word	0x08012af9
 8012a5c:	08012b43 	.word	0x08012b43
 8012a60:	08012a71 	.word	0x08012a71
 8012a64:	08012a71 	.word	0x08012a71
 8012a68:	08012ae5 	.word	0x08012ae5
 8012a6c:	08012af9 	.word	0x08012af9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a76:	f043 0301 	orr.w	r3, r3, #1
 8012a7a:	b2da      	uxtb	r2, r3
 8012a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012a82:	68ba      	ldr	r2, [r7, #8]
 8012a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a86:	699b      	ldr	r3, [r3, #24]
 8012a88:	18d1      	adds	r1, r2, r3
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a90:	f7ff ff5c 	bl	801294c <prvInsertTimerInActiveList>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d069      	beq.n	8012b6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a9c:	6a1b      	ldr	r3, [r3, #32]
 8012a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012aa0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012aa8:	f003 0304 	and.w	r3, r3, #4
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d05e      	beq.n	8012b6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012ab0:	68ba      	ldr	r2, [r7, #8]
 8012ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab4:	699b      	ldr	r3, [r3, #24]
 8012ab6:	441a      	add	r2, r3
 8012ab8:	2300      	movs	r3, #0
 8012aba:	9300      	str	r3, [sp, #0]
 8012abc:	2300      	movs	r3, #0
 8012abe:	2100      	movs	r1, #0
 8012ac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ac2:	f7ff fe05 	bl	80126d0 <xTimerGenericCommand>
 8012ac6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012ac8:	6a3b      	ldr	r3, [r7, #32]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d14f      	bne.n	8012b6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad2:	f383 8811 	msr	BASEPRI, r3
 8012ad6:	f3bf 8f6f 	isb	sy
 8012ada:	f3bf 8f4f 	dsb	sy
 8012ade:	61bb      	str	r3, [r7, #24]
}
 8012ae0:	bf00      	nop
 8012ae2:	e7fe      	b.n	8012ae2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012aea:	f023 0301 	bic.w	r3, r3, #1
 8012aee:	b2da      	uxtb	r2, r3
 8012af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012af6:	e03a      	b.n	8012b6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012afa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012afe:	f043 0301 	orr.w	r3, r3, #1
 8012b02:	b2da      	uxtb	r2, r3
 8012b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012b0a:	68ba      	ldr	r2, [r7, #8]
 8012b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b12:	699b      	ldr	r3, [r3, #24]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d10a      	bne.n	8012b2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b1c:	f383 8811 	msr	BASEPRI, r3
 8012b20:	f3bf 8f6f 	isb	sy
 8012b24:	f3bf 8f4f 	dsb	sy
 8012b28:	617b      	str	r3, [r7, #20]
}
 8012b2a:	bf00      	nop
 8012b2c:	e7fe      	b.n	8012b2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b30:	699a      	ldr	r2, [r3, #24]
 8012b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b34:	18d1      	adds	r1, r2, r3
 8012b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b3c:	f7ff ff06 	bl	801294c <prvInsertTimerInActiveList>
					break;
 8012b40:	e015      	b.n	8012b6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b48:	f003 0302 	and.w	r3, r3, #2
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d103      	bne.n	8012b58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b52:	f000 fbdd 	bl	8013310 <vPortFree>
 8012b56:	e00a      	b.n	8012b6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b5e:	f023 0301 	bic.w	r3, r3, #1
 8012b62:	b2da      	uxtb	r2, r3
 8012b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012b6a:	e000      	b.n	8012b6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012b6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012b6e:	4b08      	ldr	r3, [pc, #32]	; (8012b90 <prvProcessReceivedCommands+0x1c0>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	1d39      	adds	r1, r7, #4
 8012b74:	2200      	movs	r2, #0
 8012b76:	4618      	mov	r0, r3
 8012b78:	f7fe f8fc 	bl	8010d74 <xQueueReceive>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	f47f af2a 	bne.w	80129d8 <prvProcessReceivedCommands+0x8>
	}
}
 8012b84:	bf00      	nop
 8012b86:	bf00      	nop
 8012b88:	3730      	adds	r7, #48	; 0x30
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}
 8012b8e:	bf00      	nop
 8012b90:	20001274 	.word	0x20001274

08012b94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b088      	sub	sp, #32
 8012b98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012b9a:	e048      	b.n	8012c2e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012b9c:	4b2d      	ldr	r3, [pc, #180]	; (8012c54 <prvSwitchTimerLists+0xc0>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	68db      	ldr	r3, [r3, #12]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ba6:	4b2b      	ldr	r3, [pc, #172]	; (8012c54 <prvSwitchTimerLists+0xc0>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	68db      	ldr	r3, [r3, #12]
 8012bac:	68db      	ldr	r3, [r3, #12]
 8012bae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	3304      	adds	r3, #4
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7fd fce5 	bl	8010584 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	6a1b      	ldr	r3, [r3, #32]
 8012bbe:	68f8      	ldr	r0, [r7, #12]
 8012bc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012bc8:	f003 0304 	and.w	r3, r3, #4
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d02e      	beq.n	8012c2e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	699b      	ldr	r3, [r3, #24]
 8012bd4:	693a      	ldr	r2, [r7, #16]
 8012bd6:	4413      	add	r3, r2
 8012bd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012bda:	68ba      	ldr	r2, [r7, #8]
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	429a      	cmp	r2, r3
 8012be0:	d90e      	bls.n	8012c00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	68ba      	ldr	r2, [r7, #8]
 8012be6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	68fa      	ldr	r2, [r7, #12]
 8012bec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012bee:	4b19      	ldr	r3, [pc, #100]	; (8012c54 <prvSwitchTimerLists+0xc0>)
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	3304      	adds	r3, #4
 8012bf6:	4619      	mov	r1, r3
 8012bf8:	4610      	mov	r0, r2
 8012bfa:	f7fd fc8a 	bl	8010512 <vListInsert>
 8012bfe:	e016      	b.n	8012c2e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012c00:	2300      	movs	r3, #0
 8012c02:	9300      	str	r3, [sp, #0]
 8012c04:	2300      	movs	r3, #0
 8012c06:	693a      	ldr	r2, [r7, #16]
 8012c08:	2100      	movs	r1, #0
 8012c0a:	68f8      	ldr	r0, [r7, #12]
 8012c0c:	f7ff fd60 	bl	80126d0 <xTimerGenericCommand>
 8012c10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d10a      	bne.n	8012c2e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c1c:	f383 8811 	msr	BASEPRI, r3
 8012c20:	f3bf 8f6f 	isb	sy
 8012c24:	f3bf 8f4f 	dsb	sy
 8012c28:	603b      	str	r3, [r7, #0]
}
 8012c2a:	bf00      	nop
 8012c2c:	e7fe      	b.n	8012c2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012c2e:	4b09      	ldr	r3, [pc, #36]	; (8012c54 <prvSwitchTimerLists+0xc0>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d1b1      	bne.n	8012b9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012c38:	4b06      	ldr	r3, [pc, #24]	; (8012c54 <prvSwitchTimerLists+0xc0>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012c3e:	4b06      	ldr	r3, [pc, #24]	; (8012c58 <prvSwitchTimerLists+0xc4>)
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	4a04      	ldr	r2, [pc, #16]	; (8012c54 <prvSwitchTimerLists+0xc0>)
 8012c44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012c46:	4a04      	ldr	r2, [pc, #16]	; (8012c58 <prvSwitchTimerLists+0xc4>)
 8012c48:	697b      	ldr	r3, [r7, #20]
 8012c4a:	6013      	str	r3, [r2, #0]
}
 8012c4c:	bf00      	nop
 8012c4e:	3718      	adds	r7, #24
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	2000126c 	.word	0x2000126c
 8012c58:	20001270 	.word	0x20001270

08012c5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012c62:	f000 f967 	bl	8012f34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012c66:	4b15      	ldr	r3, [pc, #84]	; (8012cbc <prvCheckForValidListAndQueue+0x60>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d120      	bne.n	8012cb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012c6e:	4814      	ldr	r0, [pc, #80]	; (8012cc0 <prvCheckForValidListAndQueue+0x64>)
 8012c70:	f7fd fbfe 	bl	8010470 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012c74:	4813      	ldr	r0, [pc, #76]	; (8012cc4 <prvCheckForValidListAndQueue+0x68>)
 8012c76:	f7fd fbfb 	bl	8010470 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012c7a:	4b13      	ldr	r3, [pc, #76]	; (8012cc8 <prvCheckForValidListAndQueue+0x6c>)
 8012c7c:	4a10      	ldr	r2, [pc, #64]	; (8012cc0 <prvCheckForValidListAndQueue+0x64>)
 8012c7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012c80:	4b12      	ldr	r3, [pc, #72]	; (8012ccc <prvCheckForValidListAndQueue+0x70>)
 8012c82:	4a10      	ldr	r2, [pc, #64]	; (8012cc4 <prvCheckForValidListAndQueue+0x68>)
 8012c84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012c86:	2300      	movs	r3, #0
 8012c88:	9300      	str	r3, [sp, #0]
 8012c8a:	4b11      	ldr	r3, [pc, #68]	; (8012cd0 <prvCheckForValidListAndQueue+0x74>)
 8012c8c:	4a11      	ldr	r2, [pc, #68]	; (8012cd4 <prvCheckForValidListAndQueue+0x78>)
 8012c8e:	2110      	movs	r1, #16
 8012c90:	200a      	movs	r0, #10
 8012c92:	f7fd fd09 	bl	80106a8 <xQueueGenericCreateStatic>
 8012c96:	4603      	mov	r3, r0
 8012c98:	4a08      	ldr	r2, [pc, #32]	; (8012cbc <prvCheckForValidListAndQueue+0x60>)
 8012c9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012c9c:	4b07      	ldr	r3, [pc, #28]	; (8012cbc <prvCheckForValidListAndQueue+0x60>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d005      	beq.n	8012cb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012ca4:	4b05      	ldr	r3, [pc, #20]	; (8012cbc <prvCheckForValidListAndQueue+0x60>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	490b      	ldr	r1, [pc, #44]	; (8012cd8 <prvCheckForValidListAndQueue+0x7c>)
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7fe fc1a 	bl	80114e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012cb0:	f000 f970 	bl	8012f94 <vPortExitCritical>
}
 8012cb4:	bf00      	nop
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}
 8012cba:	bf00      	nop
 8012cbc:	20001274 	.word	0x20001274
 8012cc0:	20001244 	.word	0x20001244
 8012cc4:	20001258 	.word	0x20001258
 8012cc8:	2000126c 	.word	0x2000126c
 8012ccc:	20001270 	.word	0x20001270
 8012cd0:	20001320 	.word	0x20001320
 8012cd4:	20001280 	.word	0x20001280
 8012cd8:	08018bd0 	.word	0x08018bd0

08012cdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012cdc:	b480      	push	{r7}
 8012cde:	b085      	sub	sp, #20
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	60f8      	str	r0, [r7, #12]
 8012ce4:	60b9      	str	r1, [r7, #8]
 8012ce6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	3b04      	subs	r3, #4
 8012cec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	3b04      	subs	r3, #4
 8012cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	f023 0201 	bic.w	r2, r3, #1
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	3b04      	subs	r3, #4
 8012d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012d0c:	4a0c      	ldr	r2, [pc, #48]	; (8012d40 <pxPortInitialiseStack+0x64>)
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	3b14      	subs	r3, #20
 8012d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	3b04      	subs	r3, #4
 8012d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	f06f 0202 	mvn.w	r2, #2
 8012d2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	3b20      	subs	r3, #32
 8012d30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012d32:	68fb      	ldr	r3, [r7, #12]
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3714      	adds	r7, #20
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3e:	4770      	bx	lr
 8012d40:	08012d45 	.word	0x08012d45

08012d44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012d44:	b480      	push	{r7}
 8012d46:	b085      	sub	sp, #20
 8012d48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012d4e:	4b12      	ldr	r3, [pc, #72]	; (8012d98 <prvTaskExitError+0x54>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d56:	d00a      	beq.n	8012d6e <prvTaskExitError+0x2a>
	__asm volatile
 8012d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d5c:	f383 8811 	msr	BASEPRI, r3
 8012d60:	f3bf 8f6f 	isb	sy
 8012d64:	f3bf 8f4f 	dsb	sy
 8012d68:	60fb      	str	r3, [r7, #12]
}
 8012d6a:	bf00      	nop
 8012d6c:	e7fe      	b.n	8012d6c <prvTaskExitError+0x28>
	__asm volatile
 8012d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d72:	f383 8811 	msr	BASEPRI, r3
 8012d76:	f3bf 8f6f 	isb	sy
 8012d7a:	f3bf 8f4f 	dsb	sy
 8012d7e:	60bb      	str	r3, [r7, #8]
}
 8012d80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012d82:	bf00      	nop
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d0fc      	beq.n	8012d84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012d8a:	bf00      	nop
 8012d8c:	bf00      	nop
 8012d8e:	3714      	adds	r7, #20
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr
 8012d98:	20000150 	.word	0x20000150
 8012d9c:	00000000 	.word	0x00000000

08012da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012da0:	4b07      	ldr	r3, [pc, #28]	; (8012dc0 <pxCurrentTCBConst2>)
 8012da2:	6819      	ldr	r1, [r3, #0]
 8012da4:	6808      	ldr	r0, [r1, #0]
 8012da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012daa:	f380 8809 	msr	PSP, r0
 8012dae:	f3bf 8f6f 	isb	sy
 8012db2:	f04f 0000 	mov.w	r0, #0
 8012db6:	f380 8811 	msr	BASEPRI, r0
 8012dba:	4770      	bx	lr
 8012dbc:	f3af 8000 	nop.w

08012dc0 <pxCurrentTCBConst2>:
 8012dc0:	20000d44 	.word	0x20000d44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012dc4:	bf00      	nop
 8012dc6:	bf00      	nop

08012dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012dc8:	4808      	ldr	r0, [pc, #32]	; (8012dec <prvPortStartFirstTask+0x24>)
 8012dca:	6800      	ldr	r0, [r0, #0]
 8012dcc:	6800      	ldr	r0, [r0, #0]
 8012dce:	f380 8808 	msr	MSP, r0
 8012dd2:	f04f 0000 	mov.w	r0, #0
 8012dd6:	f380 8814 	msr	CONTROL, r0
 8012dda:	b662      	cpsie	i
 8012ddc:	b661      	cpsie	f
 8012dde:	f3bf 8f4f 	dsb	sy
 8012de2:	f3bf 8f6f 	isb	sy
 8012de6:	df00      	svc	0
 8012de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012dea:	bf00      	nop
 8012dec:	e000ed08 	.word	0xe000ed08

08012df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b086      	sub	sp, #24
 8012df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012df6:	4b46      	ldr	r3, [pc, #280]	; (8012f10 <xPortStartScheduler+0x120>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	4a46      	ldr	r2, [pc, #280]	; (8012f14 <xPortStartScheduler+0x124>)
 8012dfc:	4293      	cmp	r3, r2
 8012dfe:	d10a      	bne.n	8012e16 <xPortStartScheduler+0x26>
	__asm volatile
 8012e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e04:	f383 8811 	msr	BASEPRI, r3
 8012e08:	f3bf 8f6f 	isb	sy
 8012e0c:	f3bf 8f4f 	dsb	sy
 8012e10:	613b      	str	r3, [r7, #16]
}
 8012e12:	bf00      	nop
 8012e14:	e7fe      	b.n	8012e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012e16:	4b3e      	ldr	r3, [pc, #248]	; (8012f10 <xPortStartScheduler+0x120>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	4a3f      	ldr	r2, [pc, #252]	; (8012f18 <xPortStartScheduler+0x128>)
 8012e1c:	4293      	cmp	r3, r2
 8012e1e:	d10a      	bne.n	8012e36 <xPortStartScheduler+0x46>
	__asm volatile
 8012e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e24:	f383 8811 	msr	BASEPRI, r3
 8012e28:	f3bf 8f6f 	isb	sy
 8012e2c:	f3bf 8f4f 	dsb	sy
 8012e30:	60fb      	str	r3, [r7, #12]
}
 8012e32:	bf00      	nop
 8012e34:	e7fe      	b.n	8012e34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012e36:	4b39      	ldr	r3, [pc, #228]	; (8012f1c <xPortStartScheduler+0x12c>)
 8012e38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	b2db      	uxtb	r3, r3
 8012e40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	22ff      	movs	r2, #255	; 0xff
 8012e46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012e48:	697b      	ldr	r3, [r7, #20]
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	b2db      	uxtb	r3, r3
 8012e4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012e50:	78fb      	ldrb	r3, [r7, #3]
 8012e52:	b2db      	uxtb	r3, r3
 8012e54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012e58:	b2da      	uxtb	r2, r3
 8012e5a:	4b31      	ldr	r3, [pc, #196]	; (8012f20 <xPortStartScheduler+0x130>)
 8012e5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012e5e:	4b31      	ldr	r3, [pc, #196]	; (8012f24 <xPortStartScheduler+0x134>)
 8012e60:	2207      	movs	r2, #7
 8012e62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012e64:	e009      	b.n	8012e7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012e66:	4b2f      	ldr	r3, [pc, #188]	; (8012f24 <xPortStartScheduler+0x134>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	3b01      	subs	r3, #1
 8012e6c:	4a2d      	ldr	r2, [pc, #180]	; (8012f24 <xPortStartScheduler+0x134>)
 8012e6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012e70:	78fb      	ldrb	r3, [r7, #3]
 8012e72:	b2db      	uxtb	r3, r3
 8012e74:	005b      	lsls	r3, r3, #1
 8012e76:	b2db      	uxtb	r3, r3
 8012e78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012e7a:	78fb      	ldrb	r3, [r7, #3]
 8012e7c:	b2db      	uxtb	r3, r3
 8012e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e82:	2b80      	cmp	r3, #128	; 0x80
 8012e84:	d0ef      	beq.n	8012e66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012e86:	4b27      	ldr	r3, [pc, #156]	; (8012f24 <xPortStartScheduler+0x134>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	f1c3 0307 	rsb	r3, r3, #7
 8012e8e:	2b04      	cmp	r3, #4
 8012e90:	d00a      	beq.n	8012ea8 <xPortStartScheduler+0xb8>
	__asm volatile
 8012e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e96:	f383 8811 	msr	BASEPRI, r3
 8012e9a:	f3bf 8f6f 	isb	sy
 8012e9e:	f3bf 8f4f 	dsb	sy
 8012ea2:	60bb      	str	r3, [r7, #8]
}
 8012ea4:	bf00      	nop
 8012ea6:	e7fe      	b.n	8012ea6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012ea8:	4b1e      	ldr	r3, [pc, #120]	; (8012f24 <xPortStartScheduler+0x134>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	021b      	lsls	r3, r3, #8
 8012eae:	4a1d      	ldr	r2, [pc, #116]	; (8012f24 <xPortStartScheduler+0x134>)
 8012eb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012eb2:	4b1c      	ldr	r3, [pc, #112]	; (8012f24 <xPortStartScheduler+0x134>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012eba:	4a1a      	ldr	r2, [pc, #104]	; (8012f24 <xPortStartScheduler+0x134>)
 8012ebc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	b2da      	uxtb	r2, r3
 8012ec2:	697b      	ldr	r3, [r7, #20]
 8012ec4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012ec6:	4b18      	ldr	r3, [pc, #96]	; (8012f28 <xPortStartScheduler+0x138>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	4a17      	ldr	r2, [pc, #92]	; (8012f28 <xPortStartScheduler+0x138>)
 8012ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012ed0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012ed2:	4b15      	ldr	r3, [pc, #84]	; (8012f28 <xPortStartScheduler+0x138>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	4a14      	ldr	r2, [pc, #80]	; (8012f28 <xPortStartScheduler+0x138>)
 8012ed8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012edc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012ede:	f000 f8dd 	bl	801309c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012ee2:	4b12      	ldr	r3, [pc, #72]	; (8012f2c <xPortStartScheduler+0x13c>)
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012ee8:	f000 f8fc 	bl	80130e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012eec:	4b10      	ldr	r3, [pc, #64]	; (8012f30 <xPortStartScheduler+0x140>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	4a0f      	ldr	r2, [pc, #60]	; (8012f30 <xPortStartScheduler+0x140>)
 8012ef2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012ef6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012ef8:	f7ff ff66 	bl	8012dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012efc:	f7fe ff4c 	bl	8011d98 <vTaskSwitchContext>
	prvTaskExitError();
 8012f00:	f7ff ff20 	bl	8012d44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012f04:	2300      	movs	r3, #0
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3718      	adds	r7, #24
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}
 8012f0e:	bf00      	nop
 8012f10:	e000ed00 	.word	0xe000ed00
 8012f14:	410fc271 	.word	0x410fc271
 8012f18:	410fc270 	.word	0x410fc270
 8012f1c:	e000e400 	.word	0xe000e400
 8012f20:	20001370 	.word	0x20001370
 8012f24:	20001374 	.word	0x20001374
 8012f28:	e000ed20 	.word	0xe000ed20
 8012f2c:	20000150 	.word	0x20000150
 8012f30:	e000ef34 	.word	0xe000ef34

08012f34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012f34:	b480      	push	{r7}
 8012f36:	b083      	sub	sp, #12
 8012f38:	af00      	add	r7, sp, #0
	__asm volatile
 8012f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f3e:	f383 8811 	msr	BASEPRI, r3
 8012f42:	f3bf 8f6f 	isb	sy
 8012f46:	f3bf 8f4f 	dsb	sy
 8012f4a:	607b      	str	r3, [r7, #4]
}
 8012f4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012f4e:	4b0f      	ldr	r3, [pc, #60]	; (8012f8c <vPortEnterCritical+0x58>)
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	3301      	adds	r3, #1
 8012f54:	4a0d      	ldr	r2, [pc, #52]	; (8012f8c <vPortEnterCritical+0x58>)
 8012f56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012f58:	4b0c      	ldr	r3, [pc, #48]	; (8012f8c <vPortEnterCritical+0x58>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	2b01      	cmp	r3, #1
 8012f5e:	d10f      	bne.n	8012f80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012f60:	4b0b      	ldr	r3, [pc, #44]	; (8012f90 <vPortEnterCritical+0x5c>)
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d00a      	beq.n	8012f80 <vPortEnterCritical+0x4c>
	__asm volatile
 8012f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f6e:	f383 8811 	msr	BASEPRI, r3
 8012f72:	f3bf 8f6f 	isb	sy
 8012f76:	f3bf 8f4f 	dsb	sy
 8012f7a:	603b      	str	r3, [r7, #0]
}
 8012f7c:	bf00      	nop
 8012f7e:	e7fe      	b.n	8012f7e <vPortEnterCritical+0x4a>
	}
}
 8012f80:	bf00      	nop
 8012f82:	370c      	adds	r7, #12
 8012f84:	46bd      	mov	sp, r7
 8012f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8a:	4770      	bx	lr
 8012f8c:	20000150 	.word	0x20000150
 8012f90:	e000ed04 	.word	0xe000ed04

08012f94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012f94:	b480      	push	{r7}
 8012f96:	b083      	sub	sp, #12
 8012f98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012f9a:	4b12      	ldr	r3, [pc, #72]	; (8012fe4 <vPortExitCritical+0x50>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d10a      	bne.n	8012fb8 <vPortExitCritical+0x24>
	__asm volatile
 8012fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fa6:	f383 8811 	msr	BASEPRI, r3
 8012faa:	f3bf 8f6f 	isb	sy
 8012fae:	f3bf 8f4f 	dsb	sy
 8012fb2:	607b      	str	r3, [r7, #4]
}
 8012fb4:	bf00      	nop
 8012fb6:	e7fe      	b.n	8012fb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012fb8:	4b0a      	ldr	r3, [pc, #40]	; (8012fe4 <vPortExitCritical+0x50>)
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	3b01      	subs	r3, #1
 8012fbe:	4a09      	ldr	r2, [pc, #36]	; (8012fe4 <vPortExitCritical+0x50>)
 8012fc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012fc2:	4b08      	ldr	r3, [pc, #32]	; (8012fe4 <vPortExitCritical+0x50>)
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d105      	bne.n	8012fd6 <vPortExitCritical+0x42>
 8012fca:	2300      	movs	r3, #0
 8012fcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	f383 8811 	msr	BASEPRI, r3
}
 8012fd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012fd6:	bf00      	nop
 8012fd8:	370c      	adds	r7, #12
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe0:	4770      	bx	lr
 8012fe2:	bf00      	nop
 8012fe4:	20000150 	.word	0x20000150
	...

08012ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012ff0:	f3ef 8009 	mrs	r0, PSP
 8012ff4:	f3bf 8f6f 	isb	sy
 8012ff8:	4b15      	ldr	r3, [pc, #84]	; (8013050 <pxCurrentTCBConst>)
 8012ffa:	681a      	ldr	r2, [r3, #0]
 8012ffc:	f01e 0f10 	tst.w	lr, #16
 8013000:	bf08      	it	eq
 8013002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801300a:	6010      	str	r0, [r2, #0]
 801300c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013014:	f380 8811 	msr	BASEPRI, r0
 8013018:	f3bf 8f4f 	dsb	sy
 801301c:	f3bf 8f6f 	isb	sy
 8013020:	f7fe feba 	bl	8011d98 <vTaskSwitchContext>
 8013024:	f04f 0000 	mov.w	r0, #0
 8013028:	f380 8811 	msr	BASEPRI, r0
 801302c:	bc09      	pop	{r0, r3}
 801302e:	6819      	ldr	r1, [r3, #0]
 8013030:	6808      	ldr	r0, [r1, #0]
 8013032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013036:	f01e 0f10 	tst.w	lr, #16
 801303a:	bf08      	it	eq
 801303c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013040:	f380 8809 	msr	PSP, r0
 8013044:	f3bf 8f6f 	isb	sy
 8013048:	4770      	bx	lr
 801304a:	bf00      	nop
 801304c:	f3af 8000 	nop.w

08013050 <pxCurrentTCBConst>:
 8013050:	20000d44 	.word	0x20000d44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013054:	bf00      	nop
 8013056:	bf00      	nop

08013058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b082      	sub	sp, #8
 801305c:	af00      	add	r7, sp, #0
	__asm volatile
 801305e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013062:	f383 8811 	msr	BASEPRI, r3
 8013066:	f3bf 8f6f 	isb	sy
 801306a:	f3bf 8f4f 	dsb	sy
 801306e:	607b      	str	r3, [r7, #4]
}
 8013070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013072:	f7fe fdd7 	bl	8011c24 <xTaskIncrementTick>
 8013076:	4603      	mov	r3, r0
 8013078:	2b00      	cmp	r3, #0
 801307a:	d003      	beq.n	8013084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801307c:	4b06      	ldr	r3, [pc, #24]	; (8013098 <xPortSysTickHandler+0x40>)
 801307e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013082:	601a      	str	r2, [r3, #0]
 8013084:	2300      	movs	r3, #0
 8013086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	f383 8811 	msr	BASEPRI, r3
}
 801308e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013090:	bf00      	nop
 8013092:	3708      	adds	r7, #8
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}
 8013098:	e000ed04 	.word	0xe000ed04

0801309c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801309c:	b480      	push	{r7}
 801309e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80130a0:	4b0b      	ldr	r3, [pc, #44]	; (80130d0 <vPortSetupTimerInterrupt+0x34>)
 80130a2:	2200      	movs	r2, #0
 80130a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80130a6:	4b0b      	ldr	r3, [pc, #44]	; (80130d4 <vPortSetupTimerInterrupt+0x38>)
 80130a8:	2200      	movs	r2, #0
 80130aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80130ac:	4b0a      	ldr	r3, [pc, #40]	; (80130d8 <vPortSetupTimerInterrupt+0x3c>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	4a0a      	ldr	r2, [pc, #40]	; (80130dc <vPortSetupTimerInterrupt+0x40>)
 80130b2:	fba2 2303 	umull	r2, r3, r2, r3
 80130b6:	099b      	lsrs	r3, r3, #6
 80130b8:	4a09      	ldr	r2, [pc, #36]	; (80130e0 <vPortSetupTimerInterrupt+0x44>)
 80130ba:	3b01      	subs	r3, #1
 80130bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80130be:	4b04      	ldr	r3, [pc, #16]	; (80130d0 <vPortSetupTimerInterrupt+0x34>)
 80130c0:	2207      	movs	r2, #7
 80130c2:	601a      	str	r2, [r3, #0]
}
 80130c4:	bf00      	nop
 80130c6:	46bd      	mov	sp, r7
 80130c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130cc:	4770      	bx	lr
 80130ce:	bf00      	nop
 80130d0:	e000e010 	.word	0xe000e010
 80130d4:	e000e018 	.word	0xe000e018
 80130d8:	2000001c 	.word	0x2000001c
 80130dc:	10624dd3 	.word	0x10624dd3
 80130e0:	e000e014 	.word	0xe000e014

080130e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80130e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80130f4 <vPortEnableVFP+0x10>
 80130e8:	6801      	ldr	r1, [r0, #0]
 80130ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80130ee:	6001      	str	r1, [r0, #0]
 80130f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80130f2:	bf00      	nop
 80130f4:	e000ed88 	.word	0xe000ed88

080130f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80130f8:	b480      	push	{r7}
 80130fa:	b085      	sub	sp, #20
 80130fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80130fe:	f3ef 8305 	mrs	r3, IPSR
 8013102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	2b0f      	cmp	r3, #15
 8013108:	d914      	bls.n	8013134 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801310a:	4a17      	ldr	r2, [pc, #92]	; (8013168 <vPortValidateInterruptPriority+0x70>)
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	4413      	add	r3, r2
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013114:	4b15      	ldr	r3, [pc, #84]	; (801316c <vPortValidateInterruptPriority+0x74>)
 8013116:	781b      	ldrb	r3, [r3, #0]
 8013118:	7afa      	ldrb	r2, [r7, #11]
 801311a:	429a      	cmp	r2, r3
 801311c:	d20a      	bcs.n	8013134 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013122:	f383 8811 	msr	BASEPRI, r3
 8013126:	f3bf 8f6f 	isb	sy
 801312a:	f3bf 8f4f 	dsb	sy
 801312e:	607b      	str	r3, [r7, #4]
}
 8013130:	bf00      	nop
 8013132:	e7fe      	b.n	8013132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013134:	4b0e      	ldr	r3, [pc, #56]	; (8013170 <vPortValidateInterruptPriority+0x78>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801313c:	4b0d      	ldr	r3, [pc, #52]	; (8013174 <vPortValidateInterruptPriority+0x7c>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	429a      	cmp	r2, r3
 8013142:	d90a      	bls.n	801315a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013148:	f383 8811 	msr	BASEPRI, r3
 801314c:	f3bf 8f6f 	isb	sy
 8013150:	f3bf 8f4f 	dsb	sy
 8013154:	603b      	str	r3, [r7, #0]
}
 8013156:	bf00      	nop
 8013158:	e7fe      	b.n	8013158 <vPortValidateInterruptPriority+0x60>
	}
 801315a:	bf00      	nop
 801315c:	3714      	adds	r7, #20
 801315e:	46bd      	mov	sp, r7
 8013160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013164:	4770      	bx	lr
 8013166:	bf00      	nop
 8013168:	e000e3f0 	.word	0xe000e3f0
 801316c:	20001370 	.word	0x20001370
 8013170:	e000ed0c 	.word	0xe000ed0c
 8013174:	20001374 	.word	0x20001374

08013178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b08a      	sub	sp, #40	; 0x28
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013180:	2300      	movs	r3, #0
 8013182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013184:	f7fe fc92 	bl	8011aac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013188:	4b5b      	ldr	r3, [pc, #364]	; (80132f8 <pvPortMalloc+0x180>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d101      	bne.n	8013194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013190:	f000 f920 	bl	80133d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013194:	4b59      	ldr	r3, [pc, #356]	; (80132fc <pvPortMalloc+0x184>)
 8013196:	681a      	ldr	r2, [r3, #0]
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	4013      	ands	r3, r2
 801319c:	2b00      	cmp	r3, #0
 801319e:	f040 8093 	bne.w	80132c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d01d      	beq.n	80131e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80131a8:	2208      	movs	r2, #8
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	4413      	add	r3, r2
 80131ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f003 0307 	and.w	r3, r3, #7
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d014      	beq.n	80131e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f023 0307 	bic.w	r3, r3, #7
 80131c0:	3308      	adds	r3, #8
 80131c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	f003 0307 	and.w	r3, r3, #7
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d00a      	beq.n	80131e4 <pvPortMalloc+0x6c>
	__asm volatile
 80131ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131d2:	f383 8811 	msr	BASEPRI, r3
 80131d6:	f3bf 8f6f 	isb	sy
 80131da:	f3bf 8f4f 	dsb	sy
 80131de:	617b      	str	r3, [r7, #20]
}
 80131e0:	bf00      	nop
 80131e2:	e7fe      	b.n	80131e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d06e      	beq.n	80132c8 <pvPortMalloc+0x150>
 80131ea:	4b45      	ldr	r3, [pc, #276]	; (8013300 <pvPortMalloc+0x188>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	687a      	ldr	r2, [r7, #4]
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d869      	bhi.n	80132c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80131f4:	4b43      	ldr	r3, [pc, #268]	; (8013304 <pvPortMalloc+0x18c>)
 80131f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80131f8:	4b42      	ldr	r3, [pc, #264]	; (8013304 <pvPortMalloc+0x18c>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80131fe:	e004      	b.n	801320a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801320c:	685b      	ldr	r3, [r3, #4]
 801320e:	687a      	ldr	r2, [r7, #4]
 8013210:	429a      	cmp	r2, r3
 8013212:	d903      	bls.n	801321c <pvPortMalloc+0xa4>
 8013214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d1f1      	bne.n	8013200 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801321c:	4b36      	ldr	r3, [pc, #216]	; (80132f8 <pvPortMalloc+0x180>)
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013222:	429a      	cmp	r2, r3
 8013224:	d050      	beq.n	80132c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013226:	6a3b      	ldr	r3, [r7, #32]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	2208      	movs	r2, #8
 801322c:	4413      	add	r3, r2
 801322e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013232:	681a      	ldr	r2, [r3, #0]
 8013234:	6a3b      	ldr	r3, [r7, #32]
 8013236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801323a:	685a      	ldr	r2, [r3, #4]
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	1ad2      	subs	r2, r2, r3
 8013240:	2308      	movs	r3, #8
 8013242:	005b      	lsls	r3, r3, #1
 8013244:	429a      	cmp	r2, r3
 8013246:	d91f      	bls.n	8013288 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	4413      	add	r3, r2
 801324e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013250:	69bb      	ldr	r3, [r7, #24]
 8013252:	f003 0307 	and.w	r3, r3, #7
 8013256:	2b00      	cmp	r3, #0
 8013258:	d00a      	beq.n	8013270 <pvPortMalloc+0xf8>
	__asm volatile
 801325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801325e:	f383 8811 	msr	BASEPRI, r3
 8013262:	f3bf 8f6f 	isb	sy
 8013266:	f3bf 8f4f 	dsb	sy
 801326a:	613b      	str	r3, [r7, #16]
}
 801326c:	bf00      	nop
 801326e:	e7fe      	b.n	801326e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013272:	685a      	ldr	r2, [r3, #4]
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	1ad2      	subs	r2, r2, r3
 8013278:	69bb      	ldr	r3, [r7, #24]
 801327a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801327e:	687a      	ldr	r2, [r7, #4]
 8013280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013282:	69b8      	ldr	r0, [r7, #24]
 8013284:	f000 f908 	bl	8013498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013288:	4b1d      	ldr	r3, [pc, #116]	; (8013300 <pvPortMalloc+0x188>)
 801328a:	681a      	ldr	r2, [r3, #0]
 801328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801328e:	685b      	ldr	r3, [r3, #4]
 8013290:	1ad3      	subs	r3, r2, r3
 8013292:	4a1b      	ldr	r2, [pc, #108]	; (8013300 <pvPortMalloc+0x188>)
 8013294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013296:	4b1a      	ldr	r3, [pc, #104]	; (8013300 <pvPortMalloc+0x188>)
 8013298:	681a      	ldr	r2, [r3, #0]
 801329a:	4b1b      	ldr	r3, [pc, #108]	; (8013308 <pvPortMalloc+0x190>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	429a      	cmp	r2, r3
 80132a0:	d203      	bcs.n	80132aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80132a2:	4b17      	ldr	r3, [pc, #92]	; (8013300 <pvPortMalloc+0x188>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	4a18      	ldr	r2, [pc, #96]	; (8013308 <pvPortMalloc+0x190>)
 80132a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80132aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ac:	685a      	ldr	r2, [r3, #4]
 80132ae:	4b13      	ldr	r3, [pc, #76]	; (80132fc <pvPortMalloc+0x184>)
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	431a      	orrs	r2, r3
 80132b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80132b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ba:	2200      	movs	r2, #0
 80132bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80132be:	4b13      	ldr	r3, [pc, #76]	; (801330c <pvPortMalloc+0x194>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	3301      	adds	r3, #1
 80132c4:	4a11      	ldr	r2, [pc, #68]	; (801330c <pvPortMalloc+0x194>)
 80132c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80132c8:	f7fe fbfe 	bl	8011ac8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80132cc:	69fb      	ldr	r3, [r7, #28]
 80132ce:	f003 0307 	and.w	r3, r3, #7
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d00a      	beq.n	80132ec <pvPortMalloc+0x174>
	__asm volatile
 80132d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132da:	f383 8811 	msr	BASEPRI, r3
 80132de:	f3bf 8f6f 	isb	sy
 80132e2:	f3bf 8f4f 	dsb	sy
 80132e6:	60fb      	str	r3, [r7, #12]
}
 80132e8:	bf00      	nop
 80132ea:	e7fe      	b.n	80132ea <pvPortMalloc+0x172>
	return pvReturn;
 80132ec:	69fb      	ldr	r3, [r7, #28]
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	3728      	adds	r7, #40	; 0x28
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}
 80132f6:	bf00      	nop
 80132f8:	20009c38 	.word	0x20009c38
 80132fc:	20009c4c 	.word	0x20009c4c
 8013300:	20009c3c 	.word	0x20009c3c
 8013304:	20009c30 	.word	0x20009c30
 8013308:	20009c40 	.word	0x20009c40
 801330c:	20009c44 	.word	0x20009c44

08013310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b086      	sub	sp, #24
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d04d      	beq.n	80133be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013322:	2308      	movs	r3, #8
 8013324:	425b      	negs	r3, r3
 8013326:	697a      	ldr	r2, [r7, #20]
 8013328:	4413      	add	r3, r2
 801332a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801332c:	697b      	ldr	r3, [r7, #20]
 801332e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	685a      	ldr	r2, [r3, #4]
 8013334:	4b24      	ldr	r3, [pc, #144]	; (80133c8 <vPortFree+0xb8>)
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	4013      	ands	r3, r2
 801333a:	2b00      	cmp	r3, #0
 801333c:	d10a      	bne.n	8013354 <vPortFree+0x44>
	__asm volatile
 801333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013342:	f383 8811 	msr	BASEPRI, r3
 8013346:	f3bf 8f6f 	isb	sy
 801334a:	f3bf 8f4f 	dsb	sy
 801334e:	60fb      	str	r3, [r7, #12]
}
 8013350:	bf00      	nop
 8013352:	e7fe      	b.n	8013352 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013354:	693b      	ldr	r3, [r7, #16]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d00a      	beq.n	8013372 <vPortFree+0x62>
	__asm volatile
 801335c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013360:	f383 8811 	msr	BASEPRI, r3
 8013364:	f3bf 8f6f 	isb	sy
 8013368:	f3bf 8f4f 	dsb	sy
 801336c:	60bb      	str	r3, [r7, #8]
}
 801336e:	bf00      	nop
 8013370:	e7fe      	b.n	8013370 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	685a      	ldr	r2, [r3, #4]
 8013376:	4b14      	ldr	r3, [pc, #80]	; (80133c8 <vPortFree+0xb8>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	4013      	ands	r3, r2
 801337c:	2b00      	cmp	r3, #0
 801337e:	d01e      	beq.n	80133be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d11a      	bne.n	80133be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013388:	693b      	ldr	r3, [r7, #16]
 801338a:	685a      	ldr	r2, [r3, #4]
 801338c:	4b0e      	ldr	r3, [pc, #56]	; (80133c8 <vPortFree+0xb8>)
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	43db      	mvns	r3, r3
 8013392:	401a      	ands	r2, r3
 8013394:	693b      	ldr	r3, [r7, #16]
 8013396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013398:	f7fe fb88 	bl	8011aac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801339c:	693b      	ldr	r3, [r7, #16]
 801339e:	685a      	ldr	r2, [r3, #4]
 80133a0:	4b0a      	ldr	r3, [pc, #40]	; (80133cc <vPortFree+0xbc>)
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	4413      	add	r3, r2
 80133a6:	4a09      	ldr	r2, [pc, #36]	; (80133cc <vPortFree+0xbc>)
 80133a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80133aa:	6938      	ldr	r0, [r7, #16]
 80133ac:	f000 f874 	bl	8013498 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80133b0:	4b07      	ldr	r3, [pc, #28]	; (80133d0 <vPortFree+0xc0>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	3301      	adds	r3, #1
 80133b6:	4a06      	ldr	r2, [pc, #24]	; (80133d0 <vPortFree+0xc0>)
 80133b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80133ba:	f7fe fb85 	bl	8011ac8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80133be:	bf00      	nop
 80133c0:	3718      	adds	r7, #24
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd80      	pop	{r7, pc}
 80133c6:	bf00      	nop
 80133c8:	20009c4c 	.word	0x20009c4c
 80133cc:	20009c3c 	.word	0x20009c3c
 80133d0:	20009c48 	.word	0x20009c48

080133d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80133d4:	b480      	push	{r7}
 80133d6:	b085      	sub	sp, #20
 80133d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80133da:	f648 03b8 	movw	r3, #35000	; 0x88b8
 80133de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80133e0:	4b27      	ldr	r3, [pc, #156]	; (8013480 <prvHeapInit+0xac>)
 80133e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	f003 0307 	and.w	r3, r3, #7
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d00c      	beq.n	8013408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	3307      	adds	r3, #7
 80133f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	f023 0307 	bic.w	r3, r3, #7
 80133fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80133fc:	68ba      	ldr	r2, [r7, #8]
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	1ad3      	subs	r3, r2, r3
 8013402:	4a1f      	ldr	r2, [pc, #124]	; (8013480 <prvHeapInit+0xac>)
 8013404:	4413      	add	r3, r2
 8013406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801340c:	4a1d      	ldr	r2, [pc, #116]	; (8013484 <prvHeapInit+0xb0>)
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013412:	4b1c      	ldr	r3, [pc, #112]	; (8013484 <prvHeapInit+0xb0>)
 8013414:	2200      	movs	r2, #0
 8013416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	68ba      	ldr	r2, [r7, #8]
 801341c:	4413      	add	r3, r2
 801341e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013420:	2208      	movs	r2, #8
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	1a9b      	subs	r3, r3, r2
 8013426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	f023 0307 	bic.w	r3, r3, #7
 801342e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	4a15      	ldr	r2, [pc, #84]	; (8013488 <prvHeapInit+0xb4>)
 8013434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013436:	4b14      	ldr	r3, [pc, #80]	; (8013488 <prvHeapInit+0xb4>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	2200      	movs	r2, #0
 801343c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801343e:	4b12      	ldr	r3, [pc, #72]	; (8013488 <prvHeapInit+0xb4>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	2200      	movs	r2, #0
 8013444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	68fa      	ldr	r2, [r7, #12]
 801344e:	1ad2      	subs	r2, r2, r3
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013454:	4b0c      	ldr	r3, [pc, #48]	; (8013488 <prvHeapInit+0xb4>)
 8013456:	681a      	ldr	r2, [r3, #0]
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	685b      	ldr	r3, [r3, #4]
 8013460:	4a0a      	ldr	r2, [pc, #40]	; (801348c <prvHeapInit+0xb8>)
 8013462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	685b      	ldr	r3, [r3, #4]
 8013468:	4a09      	ldr	r2, [pc, #36]	; (8013490 <prvHeapInit+0xbc>)
 801346a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801346c:	4b09      	ldr	r3, [pc, #36]	; (8013494 <prvHeapInit+0xc0>)
 801346e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013472:	601a      	str	r2, [r3, #0]
}
 8013474:	bf00      	nop
 8013476:	3714      	adds	r7, #20
 8013478:	46bd      	mov	sp, r7
 801347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347e:	4770      	bx	lr
 8013480:	20001378 	.word	0x20001378
 8013484:	20009c30 	.word	0x20009c30
 8013488:	20009c38 	.word	0x20009c38
 801348c:	20009c40 	.word	0x20009c40
 8013490:	20009c3c 	.word	0x20009c3c
 8013494:	20009c4c 	.word	0x20009c4c

08013498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013498:	b480      	push	{r7}
 801349a:	b085      	sub	sp, #20
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80134a0:	4b28      	ldr	r3, [pc, #160]	; (8013544 <prvInsertBlockIntoFreeList+0xac>)
 80134a2:	60fb      	str	r3, [r7, #12]
 80134a4:	e002      	b.n	80134ac <prvInsertBlockIntoFreeList+0x14>
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	60fb      	str	r3, [r7, #12]
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d8f7      	bhi.n	80134a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	685b      	ldr	r3, [r3, #4]
 80134be:	68ba      	ldr	r2, [r7, #8]
 80134c0:	4413      	add	r3, r2
 80134c2:	687a      	ldr	r2, [r7, #4]
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d108      	bne.n	80134da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	685a      	ldr	r2, [r3, #4]
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	685b      	ldr	r3, [r3, #4]
 80134d0:	441a      	add	r2, r3
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	685b      	ldr	r3, [r3, #4]
 80134e2:	68ba      	ldr	r2, [r7, #8]
 80134e4:	441a      	add	r2, r3
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	429a      	cmp	r2, r3
 80134ec:	d118      	bne.n	8013520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	681a      	ldr	r2, [r3, #0]
 80134f2:	4b15      	ldr	r3, [pc, #84]	; (8013548 <prvInsertBlockIntoFreeList+0xb0>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d00d      	beq.n	8013516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	685a      	ldr	r2, [r3, #4]
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	685b      	ldr	r3, [r3, #4]
 8013504:	441a      	add	r2, r3
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	681a      	ldr	r2, [r3, #0]
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	601a      	str	r2, [r3, #0]
 8013514:	e008      	b.n	8013528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013516:	4b0c      	ldr	r3, [pc, #48]	; (8013548 <prvInsertBlockIntoFreeList+0xb0>)
 8013518:	681a      	ldr	r2, [r3, #0]
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	601a      	str	r2, [r3, #0]
 801351e:	e003      	b.n	8013528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	681a      	ldr	r2, [r3, #0]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013528:	68fa      	ldr	r2, [r7, #12]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	429a      	cmp	r2, r3
 801352e:	d002      	beq.n	8013536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	687a      	ldr	r2, [r7, #4]
 8013534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013536:	bf00      	nop
 8013538:	3714      	adds	r7, #20
 801353a:	46bd      	mov	sp, r7
 801353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013540:	4770      	bx	lr
 8013542:	bf00      	nop
 8013544:	20009c30 	.word	0x20009c30
 8013548:	20009c38 	.word	0x20009c38

0801354c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013550:	2200      	movs	r2, #0
 8013552:	4912      	ldr	r1, [pc, #72]	; (801359c <MX_USB_DEVICE_Init+0x50>)
 8013554:	4812      	ldr	r0, [pc, #72]	; (80135a0 <MX_USB_DEVICE_Init+0x54>)
 8013556:	f7f8 fcc7 	bl	800bee8 <USBD_Init>
 801355a:	4603      	mov	r3, r0
 801355c:	2b00      	cmp	r3, #0
 801355e:	d001      	beq.n	8013564 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013560:	f7ef f9d2 	bl	8002908 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013564:	490f      	ldr	r1, [pc, #60]	; (80135a4 <MX_USB_DEVICE_Init+0x58>)
 8013566:	480e      	ldr	r0, [pc, #56]	; (80135a0 <MX_USB_DEVICE_Init+0x54>)
 8013568:	f7f8 fcee 	bl	800bf48 <USBD_RegisterClass>
 801356c:	4603      	mov	r3, r0
 801356e:	2b00      	cmp	r3, #0
 8013570:	d001      	beq.n	8013576 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013572:	f7ef f9c9 	bl	8002908 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013576:	490c      	ldr	r1, [pc, #48]	; (80135a8 <MX_USB_DEVICE_Init+0x5c>)
 8013578:	4809      	ldr	r0, [pc, #36]	; (80135a0 <MX_USB_DEVICE_Init+0x54>)
 801357a:	f7f8 fc3f 	bl	800bdfc <USBD_CDC_RegisterInterface>
 801357e:	4603      	mov	r3, r0
 8013580:	2b00      	cmp	r3, #0
 8013582:	d001      	beq.n	8013588 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013584:	f7ef f9c0 	bl	8002908 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013588:	4805      	ldr	r0, [pc, #20]	; (80135a0 <MX_USB_DEVICE_Init+0x54>)
 801358a:	f7f8 fd04 	bl	800bf96 <USBD_Start>
 801358e:	4603      	mov	r3, r0
 8013590:	2b00      	cmp	r3, #0
 8013592:	d001      	beq.n	8013598 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013594:	f7ef f9b8 	bl	8002908 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013598:	bf00      	nop
 801359a:	bd80      	pop	{r7, pc}
 801359c:	20000168 	.word	0x20000168
 80135a0:	2000b324 	.word	0x2000b324
 80135a4:	2000004c 	.word	0x2000004c
 80135a8:	20000154 	.word	0x20000154

080135ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80135b0:	2200      	movs	r2, #0
 80135b2:	4905      	ldr	r1, [pc, #20]	; (80135c8 <CDC_Init_FS+0x1c>)
 80135b4:	4805      	ldr	r0, [pc, #20]	; (80135cc <CDC_Init_FS+0x20>)
 80135b6:	f7f8 fc36 	bl	800be26 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80135ba:	4905      	ldr	r1, [pc, #20]	; (80135d0 <CDC_Init_FS+0x24>)
 80135bc:	4803      	ldr	r0, [pc, #12]	; (80135cc <CDC_Init_FS+0x20>)
 80135be:	f7f8 fc50 	bl	800be62 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80135c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	bd80      	pop	{r7, pc}
 80135c8:	2000bdf4 	.word	0x2000bdf4
 80135cc:	2000b324 	.word	0x2000b324
 80135d0:	2000b5f4 	.word	0x2000b5f4

080135d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80135d4:	b480      	push	{r7}
 80135d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80135d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80135da:	4618      	mov	r0, r3
 80135dc:	46bd      	mov	sp, r7
 80135de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e2:	4770      	bx	lr

080135e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80135e4:	b480      	push	{r7}
 80135e6:	b083      	sub	sp, #12
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	4603      	mov	r3, r0
 80135ec:	6039      	str	r1, [r7, #0]
 80135ee:	71fb      	strb	r3, [r7, #7]
 80135f0:	4613      	mov	r3, r2
 80135f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80135f4:	79fb      	ldrb	r3, [r7, #7]
 80135f6:	2b23      	cmp	r3, #35	; 0x23
 80135f8:	d84a      	bhi.n	8013690 <CDC_Control_FS+0xac>
 80135fa:	a201      	add	r2, pc, #4	; (adr r2, 8013600 <CDC_Control_FS+0x1c>)
 80135fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013600:	08013691 	.word	0x08013691
 8013604:	08013691 	.word	0x08013691
 8013608:	08013691 	.word	0x08013691
 801360c:	08013691 	.word	0x08013691
 8013610:	08013691 	.word	0x08013691
 8013614:	08013691 	.word	0x08013691
 8013618:	08013691 	.word	0x08013691
 801361c:	08013691 	.word	0x08013691
 8013620:	08013691 	.word	0x08013691
 8013624:	08013691 	.word	0x08013691
 8013628:	08013691 	.word	0x08013691
 801362c:	08013691 	.word	0x08013691
 8013630:	08013691 	.word	0x08013691
 8013634:	08013691 	.word	0x08013691
 8013638:	08013691 	.word	0x08013691
 801363c:	08013691 	.word	0x08013691
 8013640:	08013691 	.word	0x08013691
 8013644:	08013691 	.word	0x08013691
 8013648:	08013691 	.word	0x08013691
 801364c:	08013691 	.word	0x08013691
 8013650:	08013691 	.word	0x08013691
 8013654:	08013691 	.word	0x08013691
 8013658:	08013691 	.word	0x08013691
 801365c:	08013691 	.word	0x08013691
 8013660:	08013691 	.word	0x08013691
 8013664:	08013691 	.word	0x08013691
 8013668:	08013691 	.word	0x08013691
 801366c:	08013691 	.word	0x08013691
 8013670:	08013691 	.word	0x08013691
 8013674:	08013691 	.word	0x08013691
 8013678:	08013691 	.word	0x08013691
 801367c:	08013691 	.word	0x08013691
 8013680:	08013691 	.word	0x08013691
 8013684:	08013691 	.word	0x08013691
 8013688:	08013691 	.word	0x08013691
 801368c:	08013691 	.word	0x08013691
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013690:	bf00      	nop
  }

  return (USBD_OK);
 8013692:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013694:	4618      	mov	r0, r3
 8013696:	370c      	adds	r7, #12
 8013698:	46bd      	mov	sp, r7
 801369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369e:	4770      	bx	lr

080136a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b082      	sub	sp, #8
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80136aa:	6879      	ldr	r1, [r7, #4]
 80136ac:	4805      	ldr	r0, [pc, #20]	; (80136c4 <CDC_Receive_FS+0x24>)
 80136ae:	f7f8 fbd8 	bl	800be62 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80136b2:	4804      	ldr	r0, [pc, #16]	; (80136c4 <CDC_Receive_FS+0x24>)
 80136b4:	f7f8 fbee 	bl	800be94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80136b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80136ba:	4618      	mov	r0, r3
 80136bc:	3708      	adds	r7, #8
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}
 80136c2:	bf00      	nop
 80136c4:	2000b324 	.word	0x2000b324

080136c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80136c8:	b480      	push	{r7}
 80136ca:	b087      	sub	sp, #28
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	60f8      	str	r0, [r7, #12]
 80136d0:	60b9      	str	r1, [r7, #8]
 80136d2:	4613      	mov	r3, r2
 80136d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80136d6:	2300      	movs	r3, #0
 80136d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80136da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80136de:	4618      	mov	r0, r3
 80136e0:	371c      	adds	r7, #28
 80136e2:	46bd      	mov	sp, r7
 80136e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e8:	4770      	bx	lr
	...

080136ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80136ec:	b480      	push	{r7}
 80136ee:	b083      	sub	sp, #12
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	4603      	mov	r3, r0
 80136f4:	6039      	str	r1, [r7, #0]
 80136f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	2212      	movs	r2, #18
 80136fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80136fe:	4b03      	ldr	r3, [pc, #12]	; (801370c <USBD_FS_DeviceDescriptor+0x20>)
}
 8013700:	4618      	mov	r0, r3
 8013702:	370c      	adds	r7, #12
 8013704:	46bd      	mov	sp, r7
 8013706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370a:	4770      	bx	lr
 801370c:	20000184 	.word	0x20000184

08013710 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013710:	b480      	push	{r7}
 8013712:	b083      	sub	sp, #12
 8013714:	af00      	add	r7, sp, #0
 8013716:	4603      	mov	r3, r0
 8013718:	6039      	str	r1, [r7, #0]
 801371a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	2204      	movs	r2, #4
 8013720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013722:	4b03      	ldr	r3, [pc, #12]	; (8013730 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013724:	4618      	mov	r0, r3
 8013726:	370c      	adds	r7, #12
 8013728:	46bd      	mov	sp, r7
 801372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372e:	4770      	bx	lr
 8013730:	20000198 	.word	0x20000198

08013734 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b082      	sub	sp, #8
 8013738:	af00      	add	r7, sp, #0
 801373a:	4603      	mov	r3, r0
 801373c:	6039      	str	r1, [r7, #0]
 801373e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013740:	79fb      	ldrb	r3, [r7, #7]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d105      	bne.n	8013752 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013746:	683a      	ldr	r2, [r7, #0]
 8013748:	4907      	ldr	r1, [pc, #28]	; (8013768 <USBD_FS_ProductStrDescriptor+0x34>)
 801374a:	4808      	ldr	r0, [pc, #32]	; (801376c <USBD_FS_ProductStrDescriptor+0x38>)
 801374c:	f7f9 fc55 	bl	800cffa <USBD_GetString>
 8013750:	e004      	b.n	801375c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013752:	683a      	ldr	r2, [r7, #0]
 8013754:	4904      	ldr	r1, [pc, #16]	; (8013768 <USBD_FS_ProductStrDescriptor+0x34>)
 8013756:	4805      	ldr	r0, [pc, #20]	; (801376c <USBD_FS_ProductStrDescriptor+0x38>)
 8013758:	f7f9 fc4f 	bl	800cffa <USBD_GetString>
  }
  return USBD_StrDesc;
 801375c:	4b02      	ldr	r3, [pc, #8]	; (8013768 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801375e:	4618      	mov	r0, r3
 8013760:	3708      	adds	r7, #8
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}
 8013766:	bf00      	nop
 8013768:	2000c5f4 	.word	0x2000c5f4
 801376c:	08018bd8 	.word	0x08018bd8

08013770 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	4603      	mov	r3, r0
 8013778:	6039      	str	r1, [r7, #0]
 801377a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801377c:	683a      	ldr	r2, [r7, #0]
 801377e:	4904      	ldr	r1, [pc, #16]	; (8013790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013780:	4804      	ldr	r0, [pc, #16]	; (8013794 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013782:	f7f9 fc3a 	bl	800cffa <USBD_GetString>
  return USBD_StrDesc;
 8013786:	4b02      	ldr	r3, [pc, #8]	; (8013790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013788:	4618      	mov	r0, r3
 801378a:	3708      	adds	r7, #8
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}
 8013790:	2000c5f4 	.word	0x2000c5f4
 8013794:	08018bf0 	.word	0x08018bf0

08013798 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b082      	sub	sp, #8
 801379c:	af00      	add	r7, sp, #0
 801379e:	4603      	mov	r3, r0
 80137a0:	6039      	str	r1, [r7, #0]
 80137a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	221a      	movs	r2, #26
 80137a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80137aa:	f000 f843 	bl	8013834 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80137ae:	4b02      	ldr	r3, [pc, #8]	; (80137b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80137b0:	4618      	mov	r0, r3
 80137b2:	3708      	adds	r7, #8
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}
 80137b8:	2000019c 	.word	0x2000019c

080137bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b082      	sub	sp, #8
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	4603      	mov	r3, r0
 80137c4:	6039      	str	r1, [r7, #0]
 80137c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80137c8:	79fb      	ldrb	r3, [r7, #7]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d105      	bne.n	80137da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80137ce:	683a      	ldr	r2, [r7, #0]
 80137d0:	4907      	ldr	r1, [pc, #28]	; (80137f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80137d2:	4808      	ldr	r0, [pc, #32]	; (80137f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80137d4:	f7f9 fc11 	bl	800cffa <USBD_GetString>
 80137d8:	e004      	b.n	80137e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80137da:	683a      	ldr	r2, [r7, #0]
 80137dc:	4904      	ldr	r1, [pc, #16]	; (80137f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80137de:	4805      	ldr	r0, [pc, #20]	; (80137f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80137e0:	f7f9 fc0b 	bl	800cffa <USBD_GetString>
  }
  return USBD_StrDesc;
 80137e4:	4b02      	ldr	r3, [pc, #8]	; (80137f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3708      	adds	r7, #8
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
 80137ee:	bf00      	nop
 80137f0:	2000c5f4 	.word	0x2000c5f4
 80137f4:	08018c04 	.word	0x08018c04

080137f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b082      	sub	sp, #8
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	4603      	mov	r3, r0
 8013800:	6039      	str	r1, [r7, #0]
 8013802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013804:	79fb      	ldrb	r3, [r7, #7]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d105      	bne.n	8013816 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801380a:	683a      	ldr	r2, [r7, #0]
 801380c:	4907      	ldr	r1, [pc, #28]	; (801382c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801380e:	4808      	ldr	r0, [pc, #32]	; (8013830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013810:	f7f9 fbf3 	bl	800cffa <USBD_GetString>
 8013814:	e004      	b.n	8013820 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013816:	683a      	ldr	r2, [r7, #0]
 8013818:	4904      	ldr	r1, [pc, #16]	; (801382c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801381a:	4805      	ldr	r0, [pc, #20]	; (8013830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801381c:	f7f9 fbed 	bl	800cffa <USBD_GetString>
  }
  return USBD_StrDesc;
 8013820:	4b02      	ldr	r3, [pc, #8]	; (801382c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013822:	4618      	mov	r0, r3
 8013824:	3708      	adds	r7, #8
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
 801382a:	bf00      	nop
 801382c:	2000c5f4 	.word	0x2000c5f4
 8013830:	08018c10 	.word	0x08018c10

08013834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b084      	sub	sp, #16
 8013838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801383a:	4b0f      	ldr	r3, [pc, #60]	; (8013878 <Get_SerialNum+0x44>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013840:	4b0e      	ldr	r3, [pc, #56]	; (801387c <Get_SerialNum+0x48>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013846:	4b0e      	ldr	r3, [pc, #56]	; (8013880 <Get_SerialNum+0x4c>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801384c:	68fa      	ldr	r2, [r7, #12]
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	4413      	add	r3, r2
 8013852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d009      	beq.n	801386e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801385a:	2208      	movs	r2, #8
 801385c:	4909      	ldr	r1, [pc, #36]	; (8013884 <Get_SerialNum+0x50>)
 801385e:	68f8      	ldr	r0, [r7, #12]
 8013860:	f000 f814 	bl	801388c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013864:	2204      	movs	r2, #4
 8013866:	4908      	ldr	r1, [pc, #32]	; (8013888 <Get_SerialNum+0x54>)
 8013868:	68b8      	ldr	r0, [r7, #8]
 801386a:	f000 f80f 	bl	801388c <IntToUnicode>
  }
}
 801386e:	bf00      	nop
 8013870:	3710      	adds	r7, #16
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}
 8013876:	bf00      	nop
 8013878:	1fff7a10 	.word	0x1fff7a10
 801387c:	1fff7a14 	.word	0x1fff7a14
 8013880:	1fff7a18 	.word	0x1fff7a18
 8013884:	2000019e 	.word	0x2000019e
 8013888:	200001ae 	.word	0x200001ae

0801388c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801388c:	b480      	push	{r7}
 801388e:	b087      	sub	sp, #28
 8013890:	af00      	add	r7, sp, #0
 8013892:	60f8      	str	r0, [r7, #12]
 8013894:	60b9      	str	r1, [r7, #8]
 8013896:	4613      	mov	r3, r2
 8013898:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801389a:	2300      	movs	r3, #0
 801389c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801389e:	2300      	movs	r3, #0
 80138a0:	75fb      	strb	r3, [r7, #23]
 80138a2:	e027      	b.n	80138f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	0f1b      	lsrs	r3, r3, #28
 80138a8:	2b09      	cmp	r3, #9
 80138aa:	d80b      	bhi.n	80138c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	0f1b      	lsrs	r3, r3, #28
 80138b0:	b2da      	uxtb	r2, r3
 80138b2:	7dfb      	ldrb	r3, [r7, #23]
 80138b4:	005b      	lsls	r3, r3, #1
 80138b6:	4619      	mov	r1, r3
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	440b      	add	r3, r1
 80138bc:	3230      	adds	r2, #48	; 0x30
 80138be:	b2d2      	uxtb	r2, r2
 80138c0:	701a      	strb	r2, [r3, #0]
 80138c2:	e00a      	b.n	80138da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	0f1b      	lsrs	r3, r3, #28
 80138c8:	b2da      	uxtb	r2, r3
 80138ca:	7dfb      	ldrb	r3, [r7, #23]
 80138cc:	005b      	lsls	r3, r3, #1
 80138ce:	4619      	mov	r1, r3
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	440b      	add	r3, r1
 80138d4:	3237      	adds	r2, #55	; 0x37
 80138d6:	b2d2      	uxtb	r2, r2
 80138d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	011b      	lsls	r3, r3, #4
 80138de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80138e0:	7dfb      	ldrb	r3, [r7, #23]
 80138e2:	005b      	lsls	r3, r3, #1
 80138e4:	3301      	adds	r3, #1
 80138e6:	68ba      	ldr	r2, [r7, #8]
 80138e8:	4413      	add	r3, r2
 80138ea:	2200      	movs	r2, #0
 80138ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80138ee:	7dfb      	ldrb	r3, [r7, #23]
 80138f0:	3301      	adds	r3, #1
 80138f2:	75fb      	strb	r3, [r7, #23]
 80138f4:	7dfa      	ldrb	r2, [r7, #23]
 80138f6:	79fb      	ldrb	r3, [r7, #7]
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d3d3      	bcc.n	80138a4 <IntToUnicode+0x18>
  }
}
 80138fc:	bf00      	nop
 80138fe:	bf00      	nop
 8013900:	371c      	adds	r7, #28
 8013902:	46bd      	mov	sp, r7
 8013904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013908:	4770      	bx	lr
	...

0801390c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b08a      	sub	sp, #40	; 0x28
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013914:	f107 0314 	add.w	r3, r7, #20
 8013918:	2200      	movs	r2, #0
 801391a:	601a      	str	r2, [r3, #0]
 801391c:	605a      	str	r2, [r3, #4]
 801391e:	609a      	str	r2, [r3, #8]
 8013920:	60da      	str	r2, [r3, #12]
 8013922:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801392c:	d147      	bne.n	80139be <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801392e:	2300      	movs	r3, #0
 8013930:	613b      	str	r3, [r7, #16]
 8013932:	4b25      	ldr	r3, [pc, #148]	; (80139c8 <HAL_PCD_MspInit+0xbc>)
 8013934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013936:	4a24      	ldr	r2, [pc, #144]	; (80139c8 <HAL_PCD_MspInit+0xbc>)
 8013938:	f043 0301 	orr.w	r3, r3, #1
 801393c:	6313      	str	r3, [r2, #48]	; 0x30
 801393e:	4b22      	ldr	r3, [pc, #136]	; (80139c8 <HAL_PCD_MspInit+0xbc>)
 8013940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013942:	f003 0301 	and.w	r3, r3, #1
 8013946:	613b      	str	r3, [r7, #16]
 8013948:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801394a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801394e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013950:	2300      	movs	r3, #0
 8013952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013954:	2300      	movs	r3, #0
 8013956:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013958:	f107 0314 	add.w	r3, r7, #20
 801395c:	4619      	mov	r1, r3
 801395e:	481b      	ldr	r0, [pc, #108]	; (80139cc <HAL_PCD_MspInit+0xc0>)
 8013960:	f7f1 f806 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013964:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801396a:	2302      	movs	r3, #2
 801396c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801396e:	2300      	movs	r3, #0
 8013970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013972:	2303      	movs	r3, #3
 8013974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013976:	230a      	movs	r3, #10
 8013978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801397a:	f107 0314 	add.w	r3, r7, #20
 801397e:	4619      	mov	r1, r3
 8013980:	4812      	ldr	r0, [pc, #72]	; (80139cc <HAL_PCD_MspInit+0xc0>)
 8013982:	f7f0 fff5 	bl	8004970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013986:	4b10      	ldr	r3, [pc, #64]	; (80139c8 <HAL_PCD_MspInit+0xbc>)
 8013988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801398a:	4a0f      	ldr	r2, [pc, #60]	; (80139c8 <HAL_PCD_MspInit+0xbc>)
 801398c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013990:	6353      	str	r3, [r2, #52]	; 0x34
 8013992:	2300      	movs	r3, #0
 8013994:	60fb      	str	r3, [r7, #12]
 8013996:	4b0c      	ldr	r3, [pc, #48]	; (80139c8 <HAL_PCD_MspInit+0xbc>)
 8013998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801399a:	4a0b      	ldr	r2, [pc, #44]	; (80139c8 <HAL_PCD_MspInit+0xbc>)
 801399c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80139a0:	6453      	str	r3, [r2, #68]	; 0x44
 80139a2:	4b09      	ldr	r3, [pc, #36]	; (80139c8 <HAL_PCD_MspInit+0xbc>)
 80139a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80139aa:	60fb      	str	r3, [r7, #12]
 80139ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80139ae:	2200      	movs	r2, #0
 80139b0:	2105      	movs	r1, #5
 80139b2:	2043      	movs	r0, #67	; 0x43
 80139b4:	f7f0 ffb2 	bl	800491c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80139b8:	2043      	movs	r0, #67	; 0x43
 80139ba:	f7f0 ffcb 	bl	8004954 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80139be:	bf00      	nop
 80139c0:	3728      	adds	r7, #40	; 0x28
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}
 80139c6:	bf00      	nop
 80139c8:	40023800 	.word	0x40023800
 80139cc:	40020000 	.word	0x40020000

080139d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b082      	sub	sp, #8
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80139e4:	4619      	mov	r1, r3
 80139e6:	4610      	mov	r0, r2
 80139e8:	f7f8 fb20 	bl	800c02c <USBD_LL_SetupStage>
}
 80139ec:	bf00      	nop
 80139ee:	3708      	adds	r7, #8
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}

080139f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b082      	sub	sp, #8
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	460b      	mov	r3, r1
 80139fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8013a06:	78fa      	ldrb	r2, [r7, #3]
 8013a08:	6879      	ldr	r1, [r7, #4]
 8013a0a:	4613      	mov	r3, r2
 8013a0c:	00db      	lsls	r3, r3, #3
 8013a0e:	1a9b      	subs	r3, r3, r2
 8013a10:	009b      	lsls	r3, r3, #2
 8013a12:	440b      	add	r3, r1
 8013a14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013a18:	681a      	ldr	r2, [r3, #0]
 8013a1a:	78fb      	ldrb	r3, [r7, #3]
 8013a1c:	4619      	mov	r1, r3
 8013a1e:	f7f8 fb5a 	bl	800c0d6 <USBD_LL_DataOutStage>
}
 8013a22:	bf00      	nop
 8013a24:	3708      	adds	r7, #8
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}

08013a2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a2a:	b580      	push	{r7, lr}
 8013a2c:	b082      	sub	sp, #8
 8013a2e:	af00      	add	r7, sp, #0
 8013a30:	6078      	str	r0, [r7, #4]
 8013a32:	460b      	mov	r3, r1
 8013a34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8013a3c:	78fa      	ldrb	r2, [r7, #3]
 8013a3e:	6879      	ldr	r1, [r7, #4]
 8013a40:	4613      	mov	r3, r2
 8013a42:	00db      	lsls	r3, r3, #3
 8013a44:	1a9b      	subs	r3, r3, r2
 8013a46:	009b      	lsls	r3, r3, #2
 8013a48:	440b      	add	r3, r1
 8013a4a:	3348      	adds	r3, #72	; 0x48
 8013a4c:	681a      	ldr	r2, [r3, #0]
 8013a4e:	78fb      	ldrb	r3, [r7, #3]
 8013a50:	4619      	mov	r1, r3
 8013a52:	f7f8 fba3 	bl	800c19c <USBD_LL_DataInStage>
}
 8013a56:	bf00      	nop
 8013a58:	3708      	adds	r7, #8
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}

08013a5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a5e:	b580      	push	{r7, lr}
 8013a60:	b082      	sub	sp, #8
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7f8 fcb7 	bl	800c3e0 <USBD_LL_SOF>
}
 8013a72:	bf00      	nop
 8013a74:	3708      	adds	r7, #8
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bd80      	pop	{r7, pc}

08013a7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a7a:	b580      	push	{r7, lr}
 8013a7c:	b084      	sub	sp, #16
 8013a7e:	af00      	add	r7, sp, #0
 8013a80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013a82:	2301      	movs	r3, #1
 8013a84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	68db      	ldr	r3, [r3, #12]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d102      	bne.n	8013a94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	73fb      	strb	r3, [r7, #15]
 8013a92:	e008      	b.n	8013aa6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	68db      	ldr	r3, [r3, #12]
 8013a98:	2b02      	cmp	r3, #2
 8013a9a:	d102      	bne.n	8013aa2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	73fb      	strb	r3, [r7, #15]
 8013aa0:	e001      	b.n	8013aa6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013aa2:	f7ee ff31 	bl	8002908 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013aac:	7bfa      	ldrb	r2, [r7, #15]
 8013aae:	4611      	mov	r1, r2
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f7f8 fc57 	bl	800c364 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013abc:	4618      	mov	r0, r3
 8013abe:	f7f8 fc03 	bl	800c2c8 <USBD_LL_Reset>
}
 8013ac2:	bf00      	nop
 8013ac4:	3710      	adds	r7, #16
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}
	...

08013acc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b082      	sub	sp, #8
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7f8 fc52 	bl	800c384 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	687a      	ldr	r2, [r7, #4]
 8013aec:	6812      	ldr	r2, [r2, #0]
 8013aee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013af2:	f043 0301 	orr.w	r3, r3, #1
 8013af6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6a1b      	ldr	r3, [r3, #32]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d005      	beq.n	8013b0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013b00:	4b04      	ldr	r3, [pc, #16]	; (8013b14 <HAL_PCD_SuspendCallback+0x48>)
 8013b02:	691b      	ldr	r3, [r3, #16]
 8013b04:	4a03      	ldr	r2, [pc, #12]	; (8013b14 <HAL_PCD_SuspendCallback+0x48>)
 8013b06:	f043 0306 	orr.w	r3, r3, #6
 8013b0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013b0c:	bf00      	nop
 8013b0e:	3708      	adds	r7, #8
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bd80      	pop	{r7, pc}
 8013b14:	e000ed00 	.word	0xe000ed00

08013b18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b082      	sub	sp, #8
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013b26:	4618      	mov	r0, r3
 8013b28:	f7f8 fc42 	bl	800c3b0 <USBD_LL_Resume>
}
 8013b2c:	bf00      	nop
 8013b2e:	3708      	adds	r7, #8
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}

08013b34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b082      	sub	sp, #8
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
 8013b3c:	460b      	mov	r3, r1
 8013b3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013b46:	78fa      	ldrb	r2, [r7, #3]
 8013b48:	4611      	mov	r1, r2
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7f8 fc90 	bl	800c470 <USBD_LL_IsoOUTIncomplete>
}
 8013b50:	bf00      	nop
 8013b52:	3708      	adds	r7, #8
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}

08013b58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b082      	sub	sp, #8
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
 8013b60:	460b      	mov	r3, r1
 8013b62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013b6a:	78fa      	ldrb	r2, [r7, #3]
 8013b6c:	4611      	mov	r1, r2
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7f8 fc58 	bl	800c424 <USBD_LL_IsoINIncomplete>
}
 8013b74:	bf00      	nop
 8013b76:	3708      	adds	r7, #8
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}

08013b7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b082      	sub	sp, #8
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7f8 fc96 	bl	800c4bc <USBD_LL_DevConnected>
}
 8013b90:	bf00      	nop
 8013b92:	3708      	adds	r7, #8
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}

08013b98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b082      	sub	sp, #8
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f7f8 fc93 	bl	800c4d2 <USBD_LL_DevDisconnected>
}
 8013bac:	bf00      	nop
 8013bae:	3708      	adds	r7, #8
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}

08013bb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b082      	sub	sp, #8
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	781b      	ldrb	r3, [r3, #0]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d13c      	bne.n	8013c3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013bc4:	4a20      	ldr	r2, [pc, #128]	; (8013c48 <USBD_LL_Init+0x94>)
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	4a1e      	ldr	r2, [pc, #120]	; (8013c48 <USBD_LL_Init+0x94>)
 8013bd0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013bd4:	4b1c      	ldr	r3, [pc, #112]	; (8013c48 <USBD_LL_Init+0x94>)
 8013bd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013bda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8013bdc:	4b1a      	ldr	r3, [pc, #104]	; (8013c48 <USBD_LL_Init+0x94>)
 8013bde:	2204      	movs	r2, #4
 8013be0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013be2:	4b19      	ldr	r3, [pc, #100]	; (8013c48 <USBD_LL_Init+0x94>)
 8013be4:	2202      	movs	r2, #2
 8013be6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013be8:	4b17      	ldr	r3, [pc, #92]	; (8013c48 <USBD_LL_Init+0x94>)
 8013bea:	2200      	movs	r2, #0
 8013bec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013bee:	4b16      	ldr	r3, [pc, #88]	; (8013c48 <USBD_LL_Init+0x94>)
 8013bf0:	2202      	movs	r2, #2
 8013bf2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013bf4:	4b14      	ldr	r3, [pc, #80]	; (8013c48 <USBD_LL_Init+0x94>)
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013bfa:	4b13      	ldr	r3, [pc, #76]	; (8013c48 <USBD_LL_Init+0x94>)
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013c00:	4b11      	ldr	r3, [pc, #68]	; (8013c48 <USBD_LL_Init+0x94>)
 8013c02:	2200      	movs	r2, #0
 8013c04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8013c06:	4b10      	ldr	r3, [pc, #64]	; (8013c48 <USBD_LL_Init+0x94>)
 8013c08:	2201      	movs	r2, #1
 8013c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013c0c:	4b0e      	ldr	r3, [pc, #56]	; (8013c48 <USBD_LL_Init+0x94>)
 8013c0e:	2200      	movs	r2, #0
 8013c10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013c12:	480d      	ldr	r0, [pc, #52]	; (8013c48 <USBD_LL_Init+0x94>)
 8013c14:	f7f2 f8e8 	bl	8005de8 <HAL_PCD_Init>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d001      	beq.n	8013c22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8013c1e:	f7ee fe73 	bl	8002908 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013c22:	2180      	movs	r1, #128	; 0x80
 8013c24:	4808      	ldr	r0, [pc, #32]	; (8013c48 <USBD_LL_Init+0x94>)
 8013c26:	f7f3 fa46 	bl	80070b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013c2a:	2240      	movs	r2, #64	; 0x40
 8013c2c:	2100      	movs	r1, #0
 8013c2e:	4806      	ldr	r0, [pc, #24]	; (8013c48 <USBD_LL_Init+0x94>)
 8013c30:	f7f3 f9fa 	bl	8007028 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013c34:	2280      	movs	r2, #128	; 0x80
 8013c36:	2101      	movs	r1, #1
 8013c38:	4803      	ldr	r0, [pc, #12]	; (8013c48 <USBD_LL_Init+0x94>)
 8013c3a:	f7f3 f9f5 	bl	8007028 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013c3e:	2300      	movs	r3, #0
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	3708      	adds	r7, #8
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}
 8013c48:	2000c7f4 	.word	0x2000c7f4

08013c4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b084      	sub	sp, #16
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c54:	2300      	movs	r3, #0
 8013c56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c58:	2300      	movs	r3, #0
 8013c5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013c62:	4618      	mov	r0, r3
 8013c64:	f7f2 f9dd 	bl	8006022 <HAL_PCD_Start>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c6c:	7bfb      	ldrb	r3, [r7, #15]
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f000 f942 	bl	8013ef8 <USBD_Get_USB_Status>
 8013c74:	4603      	mov	r3, r0
 8013c76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	3710      	adds	r7, #16
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}

08013c82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013c82:	b580      	push	{r7, lr}
 8013c84:	b084      	sub	sp, #16
 8013c86:	af00      	add	r7, sp, #0
 8013c88:	6078      	str	r0, [r7, #4]
 8013c8a:	4608      	mov	r0, r1
 8013c8c:	4611      	mov	r1, r2
 8013c8e:	461a      	mov	r2, r3
 8013c90:	4603      	mov	r3, r0
 8013c92:	70fb      	strb	r3, [r7, #3]
 8013c94:	460b      	mov	r3, r1
 8013c96:	70bb      	strb	r3, [r7, #2]
 8013c98:	4613      	mov	r3, r2
 8013c9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013caa:	78bb      	ldrb	r3, [r7, #2]
 8013cac:	883a      	ldrh	r2, [r7, #0]
 8013cae:	78f9      	ldrb	r1, [r7, #3]
 8013cb0:	f7f2 fdc1 	bl	8006836 <HAL_PCD_EP_Open>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013cb8:	7bfb      	ldrb	r3, [r7, #15]
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f000 f91c 	bl	8013ef8 <USBD_Get_USB_Status>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	3710      	adds	r7, #16
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bd80      	pop	{r7, pc}

08013cce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013cce:	b580      	push	{r7, lr}
 8013cd0:	b084      	sub	sp, #16
 8013cd2:	af00      	add	r7, sp, #0
 8013cd4:	6078      	str	r0, [r7, #4]
 8013cd6:	460b      	mov	r3, r1
 8013cd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013ce8:	78fa      	ldrb	r2, [r7, #3]
 8013cea:	4611      	mov	r1, r2
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7f2 fe0a 	bl	8006906 <HAL_PCD_EP_Close>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013cf6:	7bfb      	ldrb	r3, [r7, #15]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f000 f8fd 	bl	8013ef8 <USBD_Get_USB_Status>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d02:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3710      	adds	r7, #16
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}

08013d0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b084      	sub	sp, #16
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	460b      	mov	r3, r1
 8013d16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013d26:	78fa      	ldrb	r2, [r7, #3]
 8013d28:	4611      	mov	r1, r2
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f7f2 fee2 	bl	8006af4 <HAL_PCD_EP_SetStall>
 8013d30:	4603      	mov	r3, r0
 8013d32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d34:	7bfb      	ldrb	r3, [r7, #15]
 8013d36:	4618      	mov	r0, r3
 8013d38:	f000 f8de 	bl	8013ef8 <USBD_Get_USB_Status>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d42:	4618      	mov	r0, r3
 8013d44:	3710      	adds	r7, #16
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}

08013d4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013d4a:	b580      	push	{r7, lr}
 8013d4c:	b084      	sub	sp, #16
 8013d4e:	af00      	add	r7, sp, #0
 8013d50:	6078      	str	r0, [r7, #4]
 8013d52:	460b      	mov	r3, r1
 8013d54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d56:	2300      	movs	r3, #0
 8013d58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013d64:	78fa      	ldrb	r2, [r7, #3]
 8013d66:	4611      	mov	r1, r2
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f7f2 ff27 	bl	8006bbc <HAL_PCD_EP_ClrStall>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d72:	7bfb      	ldrb	r3, [r7, #15]
 8013d74:	4618      	mov	r0, r3
 8013d76:	f000 f8bf 	bl	8013ef8 <USBD_Get_USB_Status>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d80:	4618      	mov	r0, r3
 8013d82:	3710      	adds	r7, #16
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}

08013d88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013d88:	b480      	push	{r7}
 8013d8a:	b085      	sub	sp, #20
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
 8013d90:	460b      	mov	r3, r1
 8013d92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013d9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013d9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	da0b      	bge.n	8013dbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013da4:	78fb      	ldrb	r3, [r7, #3]
 8013da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013daa:	68f9      	ldr	r1, [r7, #12]
 8013dac:	4613      	mov	r3, r2
 8013dae:	00db      	lsls	r3, r3, #3
 8013db0:	1a9b      	subs	r3, r3, r2
 8013db2:	009b      	lsls	r3, r3, #2
 8013db4:	440b      	add	r3, r1
 8013db6:	333e      	adds	r3, #62	; 0x3e
 8013db8:	781b      	ldrb	r3, [r3, #0]
 8013dba:	e00b      	b.n	8013dd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013dbc:	78fb      	ldrb	r3, [r7, #3]
 8013dbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013dc2:	68f9      	ldr	r1, [r7, #12]
 8013dc4:	4613      	mov	r3, r2
 8013dc6:	00db      	lsls	r3, r3, #3
 8013dc8:	1a9b      	subs	r3, r3, r2
 8013dca:	009b      	lsls	r3, r3, #2
 8013dcc:	440b      	add	r3, r1
 8013dce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013dd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3714      	adds	r7, #20
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dde:	4770      	bx	lr

08013de0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b084      	sub	sp, #16
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	460b      	mov	r3, r1
 8013dea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013dec:	2300      	movs	r3, #0
 8013dee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013df0:	2300      	movs	r3, #0
 8013df2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013dfa:	78fa      	ldrb	r2, [r7, #3]
 8013dfc:	4611      	mov	r1, r2
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7f2 fcf4 	bl	80067ec <HAL_PCD_SetAddress>
 8013e04:	4603      	mov	r3, r0
 8013e06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013e08:	7bfb      	ldrb	r3, [r7, #15]
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f000 f874 	bl	8013ef8 <USBD_Get_USB_Status>
 8013e10:	4603      	mov	r3, r0
 8013e12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013e14:	7bbb      	ldrb	r3, [r7, #14]
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3710      	adds	r7, #16
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}

08013e1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013e1e:	b580      	push	{r7, lr}
 8013e20:	b086      	sub	sp, #24
 8013e22:	af00      	add	r7, sp, #0
 8013e24:	60f8      	str	r0, [r7, #12]
 8013e26:	607a      	str	r2, [r7, #4]
 8013e28:	603b      	str	r3, [r7, #0]
 8013e2a:	460b      	mov	r3, r1
 8013e2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e32:	2300      	movs	r3, #0
 8013e34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013e3c:	7af9      	ldrb	r1, [r7, #11]
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	687a      	ldr	r2, [r7, #4]
 8013e42:	f7f2 fe0d 	bl	8006a60 <HAL_PCD_EP_Transmit>
 8013e46:	4603      	mov	r3, r0
 8013e48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013e4a:	7dfb      	ldrb	r3, [r7, #23]
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f000 f853 	bl	8013ef8 <USBD_Get_USB_Status>
 8013e52:	4603      	mov	r3, r0
 8013e54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013e56:	7dbb      	ldrb	r3, [r7, #22]
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3718      	adds	r7, #24
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}

08013e60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b086      	sub	sp, #24
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	60f8      	str	r0, [r7, #12]
 8013e68:	607a      	str	r2, [r7, #4]
 8013e6a:	603b      	str	r3, [r7, #0]
 8013e6c:	460b      	mov	r3, r1
 8013e6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e70:	2300      	movs	r3, #0
 8013e72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e74:	2300      	movs	r3, #0
 8013e76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013e7e:	7af9      	ldrb	r1, [r7, #11]
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	687a      	ldr	r2, [r7, #4]
 8013e84:	f7f2 fd89 	bl	800699a <HAL_PCD_EP_Receive>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013e8c:	7dfb      	ldrb	r3, [r7, #23]
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f000 f832 	bl	8013ef8 <USBD_Get_USB_Status>
 8013e94:	4603      	mov	r3, r0
 8013e96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013e98:	7dbb      	ldrb	r3, [r7, #22]
}
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	3718      	adds	r7, #24
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bd80      	pop	{r7, pc}

08013ea2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013ea2:	b580      	push	{r7, lr}
 8013ea4:	b082      	sub	sp, #8
 8013ea6:	af00      	add	r7, sp, #0
 8013ea8:	6078      	str	r0, [r7, #4]
 8013eaa:	460b      	mov	r3, r1
 8013eac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013eb4:	78fa      	ldrb	r2, [r7, #3]
 8013eb6:	4611      	mov	r1, r2
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7f2 fdb9 	bl	8006a30 <HAL_PCD_EP_GetRxCount>
 8013ebe:	4603      	mov	r3, r0
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3708      	adds	r7, #8
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}

08013ec8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013ec8:	b480      	push	{r7}
 8013eca:	b083      	sub	sp, #12
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013ed0:	4b03      	ldr	r3, [pc, #12]	; (8013ee0 <USBD_static_malloc+0x18>)
}
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	370c      	adds	r7, #12
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013edc:	4770      	bx	lr
 8013ede:	bf00      	nop
 8013ee0:	20009c50 	.word	0x20009c50

08013ee4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013ee4:	b480      	push	{r7}
 8013ee6:	b083      	sub	sp, #12
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]

}
 8013eec:	bf00      	nop
 8013eee:	370c      	adds	r7, #12
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef6:	4770      	bx	lr

08013ef8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013ef8:	b480      	push	{r7}
 8013efa:	b085      	sub	sp, #20
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	4603      	mov	r3, r0
 8013f00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f02:	2300      	movs	r3, #0
 8013f04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013f06:	79fb      	ldrb	r3, [r7, #7]
 8013f08:	2b03      	cmp	r3, #3
 8013f0a:	d817      	bhi.n	8013f3c <USBD_Get_USB_Status+0x44>
 8013f0c:	a201      	add	r2, pc, #4	; (adr r2, 8013f14 <USBD_Get_USB_Status+0x1c>)
 8013f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f12:	bf00      	nop
 8013f14:	08013f25 	.word	0x08013f25
 8013f18:	08013f2b 	.word	0x08013f2b
 8013f1c:	08013f31 	.word	0x08013f31
 8013f20:	08013f37 	.word	0x08013f37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013f24:	2300      	movs	r3, #0
 8013f26:	73fb      	strb	r3, [r7, #15]
    break;
 8013f28:	e00b      	b.n	8013f42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013f2a:	2303      	movs	r3, #3
 8013f2c:	73fb      	strb	r3, [r7, #15]
    break;
 8013f2e:	e008      	b.n	8013f42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013f30:	2301      	movs	r3, #1
 8013f32:	73fb      	strb	r3, [r7, #15]
    break;
 8013f34:	e005      	b.n	8013f42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013f36:	2303      	movs	r3, #3
 8013f38:	73fb      	strb	r3, [r7, #15]
    break;
 8013f3a:	e002      	b.n	8013f42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013f3c:	2303      	movs	r3, #3
 8013f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8013f40:	bf00      	nop
  }
  return usb_status;
 8013f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f44:	4618      	mov	r0, r3
 8013f46:	3714      	adds	r7, #20
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4e:	4770      	bx	lr

08013f50 <__errno>:
 8013f50:	4b01      	ldr	r3, [pc, #4]	; (8013f58 <__errno+0x8>)
 8013f52:	6818      	ldr	r0, [r3, #0]
 8013f54:	4770      	bx	lr
 8013f56:	bf00      	nop
 8013f58:	200001b8 	.word	0x200001b8

08013f5c <std>:
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	b510      	push	{r4, lr}
 8013f60:	4604      	mov	r4, r0
 8013f62:	e9c0 3300 	strd	r3, r3, [r0]
 8013f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013f6a:	6083      	str	r3, [r0, #8]
 8013f6c:	8181      	strh	r1, [r0, #12]
 8013f6e:	6643      	str	r3, [r0, #100]	; 0x64
 8013f70:	81c2      	strh	r2, [r0, #14]
 8013f72:	6183      	str	r3, [r0, #24]
 8013f74:	4619      	mov	r1, r3
 8013f76:	2208      	movs	r2, #8
 8013f78:	305c      	adds	r0, #92	; 0x5c
 8013f7a:	f000 f92b 	bl	80141d4 <memset>
 8013f7e:	4b05      	ldr	r3, [pc, #20]	; (8013f94 <std+0x38>)
 8013f80:	6263      	str	r3, [r4, #36]	; 0x24
 8013f82:	4b05      	ldr	r3, [pc, #20]	; (8013f98 <std+0x3c>)
 8013f84:	62a3      	str	r3, [r4, #40]	; 0x28
 8013f86:	4b05      	ldr	r3, [pc, #20]	; (8013f9c <std+0x40>)
 8013f88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013f8a:	4b05      	ldr	r3, [pc, #20]	; (8013fa0 <std+0x44>)
 8013f8c:	6224      	str	r4, [r4, #32]
 8013f8e:	6323      	str	r3, [r4, #48]	; 0x30
 8013f90:	bd10      	pop	{r4, pc}
 8013f92:	bf00      	nop
 8013f94:	0801516d 	.word	0x0801516d
 8013f98:	0801518f 	.word	0x0801518f
 8013f9c:	080151c7 	.word	0x080151c7
 8013fa0:	080151eb 	.word	0x080151eb

08013fa4 <_cleanup_r>:
 8013fa4:	4901      	ldr	r1, [pc, #4]	; (8013fac <_cleanup_r+0x8>)
 8013fa6:	f000 b8af 	b.w	8014108 <_fwalk_reent>
 8013faa:	bf00      	nop
 8013fac:	08016e55 	.word	0x08016e55

08013fb0 <__sfmoreglue>:
 8013fb0:	b570      	push	{r4, r5, r6, lr}
 8013fb2:	1e4a      	subs	r2, r1, #1
 8013fb4:	2568      	movs	r5, #104	; 0x68
 8013fb6:	4355      	muls	r5, r2
 8013fb8:	460e      	mov	r6, r1
 8013fba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013fbe:	f000 f961 	bl	8014284 <_malloc_r>
 8013fc2:	4604      	mov	r4, r0
 8013fc4:	b140      	cbz	r0, 8013fd8 <__sfmoreglue+0x28>
 8013fc6:	2100      	movs	r1, #0
 8013fc8:	e9c0 1600 	strd	r1, r6, [r0]
 8013fcc:	300c      	adds	r0, #12
 8013fce:	60a0      	str	r0, [r4, #8]
 8013fd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013fd4:	f000 f8fe 	bl	80141d4 <memset>
 8013fd8:	4620      	mov	r0, r4
 8013fda:	bd70      	pop	{r4, r5, r6, pc}

08013fdc <__sfp_lock_acquire>:
 8013fdc:	4801      	ldr	r0, [pc, #4]	; (8013fe4 <__sfp_lock_acquire+0x8>)
 8013fde:	f000 b8d8 	b.w	8014192 <__retarget_lock_acquire_recursive>
 8013fe2:	bf00      	nop
 8013fe4:	2000cc04 	.word	0x2000cc04

08013fe8 <__sfp_lock_release>:
 8013fe8:	4801      	ldr	r0, [pc, #4]	; (8013ff0 <__sfp_lock_release+0x8>)
 8013fea:	f000 b8d3 	b.w	8014194 <__retarget_lock_release_recursive>
 8013fee:	bf00      	nop
 8013ff0:	2000cc04 	.word	0x2000cc04

08013ff4 <__sinit_lock_acquire>:
 8013ff4:	4801      	ldr	r0, [pc, #4]	; (8013ffc <__sinit_lock_acquire+0x8>)
 8013ff6:	f000 b8cc 	b.w	8014192 <__retarget_lock_acquire_recursive>
 8013ffa:	bf00      	nop
 8013ffc:	2000cbff 	.word	0x2000cbff

08014000 <__sinit_lock_release>:
 8014000:	4801      	ldr	r0, [pc, #4]	; (8014008 <__sinit_lock_release+0x8>)
 8014002:	f000 b8c7 	b.w	8014194 <__retarget_lock_release_recursive>
 8014006:	bf00      	nop
 8014008:	2000cbff 	.word	0x2000cbff

0801400c <__sinit>:
 801400c:	b510      	push	{r4, lr}
 801400e:	4604      	mov	r4, r0
 8014010:	f7ff fff0 	bl	8013ff4 <__sinit_lock_acquire>
 8014014:	69a3      	ldr	r3, [r4, #24]
 8014016:	b11b      	cbz	r3, 8014020 <__sinit+0x14>
 8014018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801401c:	f7ff bff0 	b.w	8014000 <__sinit_lock_release>
 8014020:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014024:	6523      	str	r3, [r4, #80]	; 0x50
 8014026:	4b13      	ldr	r3, [pc, #76]	; (8014074 <__sinit+0x68>)
 8014028:	4a13      	ldr	r2, [pc, #76]	; (8014078 <__sinit+0x6c>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	62a2      	str	r2, [r4, #40]	; 0x28
 801402e:	42a3      	cmp	r3, r4
 8014030:	bf04      	itt	eq
 8014032:	2301      	moveq	r3, #1
 8014034:	61a3      	streq	r3, [r4, #24]
 8014036:	4620      	mov	r0, r4
 8014038:	f000 f820 	bl	801407c <__sfp>
 801403c:	6060      	str	r0, [r4, #4]
 801403e:	4620      	mov	r0, r4
 8014040:	f000 f81c 	bl	801407c <__sfp>
 8014044:	60a0      	str	r0, [r4, #8]
 8014046:	4620      	mov	r0, r4
 8014048:	f000 f818 	bl	801407c <__sfp>
 801404c:	2200      	movs	r2, #0
 801404e:	60e0      	str	r0, [r4, #12]
 8014050:	2104      	movs	r1, #4
 8014052:	6860      	ldr	r0, [r4, #4]
 8014054:	f7ff ff82 	bl	8013f5c <std>
 8014058:	68a0      	ldr	r0, [r4, #8]
 801405a:	2201      	movs	r2, #1
 801405c:	2109      	movs	r1, #9
 801405e:	f7ff ff7d 	bl	8013f5c <std>
 8014062:	68e0      	ldr	r0, [r4, #12]
 8014064:	2202      	movs	r2, #2
 8014066:	2112      	movs	r1, #18
 8014068:	f7ff ff78 	bl	8013f5c <std>
 801406c:	2301      	movs	r3, #1
 801406e:	61a3      	str	r3, [r4, #24]
 8014070:	e7d2      	b.n	8014018 <__sinit+0xc>
 8014072:	bf00      	nop
 8014074:	08018ee0 	.word	0x08018ee0
 8014078:	08013fa5 	.word	0x08013fa5

0801407c <__sfp>:
 801407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801407e:	4607      	mov	r7, r0
 8014080:	f7ff ffac 	bl	8013fdc <__sfp_lock_acquire>
 8014084:	4b1e      	ldr	r3, [pc, #120]	; (8014100 <__sfp+0x84>)
 8014086:	681e      	ldr	r6, [r3, #0]
 8014088:	69b3      	ldr	r3, [r6, #24]
 801408a:	b913      	cbnz	r3, 8014092 <__sfp+0x16>
 801408c:	4630      	mov	r0, r6
 801408e:	f7ff ffbd 	bl	801400c <__sinit>
 8014092:	3648      	adds	r6, #72	; 0x48
 8014094:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014098:	3b01      	subs	r3, #1
 801409a:	d503      	bpl.n	80140a4 <__sfp+0x28>
 801409c:	6833      	ldr	r3, [r6, #0]
 801409e:	b30b      	cbz	r3, 80140e4 <__sfp+0x68>
 80140a0:	6836      	ldr	r6, [r6, #0]
 80140a2:	e7f7      	b.n	8014094 <__sfp+0x18>
 80140a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80140a8:	b9d5      	cbnz	r5, 80140e0 <__sfp+0x64>
 80140aa:	4b16      	ldr	r3, [pc, #88]	; (8014104 <__sfp+0x88>)
 80140ac:	60e3      	str	r3, [r4, #12]
 80140ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80140b2:	6665      	str	r5, [r4, #100]	; 0x64
 80140b4:	f000 f86c 	bl	8014190 <__retarget_lock_init_recursive>
 80140b8:	f7ff ff96 	bl	8013fe8 <__sfp_lock_release>
 80140bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80140c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80140c4:	6025      	str	r5, [r4, #0]
 80140c6:	61a5      	str	r5, [r4, #24]
 80140c8:	2208      	movs	r2, #8
 80140ca:	4629      	mov	r1, r5
 80140cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80140d0:	f000 f880 	bl	80141d4 <memset>
 80140d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80140d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80140dc:	4620      	mov	r0, r4
 80140de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140e0:	3468      	adds	r4, #104	; 0x68
 80140e2:	e7d9      	b.n	8014098 <__sfp+0x1c>
 80140e4:	2104      	movs	r1, #4
 80140e6:	4638      	mov	r0, r7
 80140e8:	f7ff ff62 	bl	8013fb0 <__sfmoreglue>
 80140ec:	4604      	mov	r4, r0
 80140ee:	6030      	str	r0, [r6, #0]
 80140f0:	2800      	cmp	r0, #0
 80140f2:	d1d5      	bne.n	80140a0 <__sfp+0x24>
 80140f4:	f7ff ff78 	bl	8013fe8 <__sfp_lock_release>
 80140f8:	230c      	movs	r3, #12
 80140fa:	603b      	str	r3, [r7, #0]
 80140fc:	e7ee      	b.n	80140dc <__sfp+0x60>
 80140fe:	bf00      	nop
 8014100:	08018ee0 	.word	0x08018ee0
 8014104:	ffff0001 	.word	0xffff0001

08014108 <_fwalk_reent>:
 8014108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801410c:	4606      	mov	r6, r0
 801410e:	4688      	mov	r8, r1
 8014110:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014114:	2700      	movs	r7, #0
 8014116:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801411a:	f1b9 0901 	subs.w	r9, r9, #1
 801411e:	d505      	bpl.n	801412c <_fwalk_reent+0x24>
 8014120:	6824      	ldr	r4, [r4, #0]
 8014122:	2c00      	cmp	r4, #0
 8014124:	d1f7      	bne.n	8014116 <_fwalk_reent+0xe>
 8014126:	4638      	mov	r0, r7
 8014128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801412c:	89ab      	ldrh	r3, [r5, #12]
 801412e:	2b01      	cmp	r3, #1
 8014130:	d907      	bls.n	8014142 <_fwalk_reent+0x3a>
 8014132:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014136:	3301      	adds	r3, #1
 8014138:	d003      	beq.n	8014142 <_fwalk_reent+0x3a>
 801413a:	4629      	mov	r1, r5
 801413c:	4630      	mov	r0, r6
 801413e:	47c0      	blx	r8
 8014140:	4307      	orrs	r7, r0
 8014142:	3568      	adds	r5, #104	; 0x68
 8014144:	e7e9      	b.n	801411a <_fwalk_reent+0x12>
	...

08014148 <__libc_init_array>:
 8014148:	b570      	push	{r4, r5, r6, lr}
 801414a:	4d0d      	ldr	r5, [pc, #52]	; (8014180 <__libc_init_array+0x38>)
 801414c:	4c0d      	ldr	r4, [pc, #52]	; (8014184 <__libc_init_array+0x3c>)
 801414e:	1b64      	subs	r4, r4, r5
 8014150:	10a4      	asrs	r4, r4, #2
 8014152:	2600      	movs	r6, #0
 8014154:	42a6      	cmp	r6, r4
 8014156:	d109      	bne.n	801416c <__libc_init_array+0x24>
 8014158:	4d0b      	ldr	r5, [pc, #44]	; (8014188 <__libc_init_array+0x40>)
 801415a:	4c0c      	ldr	r4, [pc, #48]	; (801418c <__libc_init_array+0x44>)
 801415c:	f004 fc0e 	bl	801897c <_init>
 8014160:	1b64      	subs	r4, r4, r5
 8014162:	10a4      	asrs	r4, r4, #2
 8014164:	2600      	movs	r6, #0
 8014166:	42a6      	cmp	r6, r4
 8014168:	d105      	bne.n	8014176 <__libc_init_array+0x2e>
 801416a:	bd70      	pop	{r4, r5, r6, pc}
 801416c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014170:	4798      	blx	r3
 8014172:	3601      	adds	r6, #1
 8014174:	e7ee      	b.n	8014154 <__libc_init_array+0xc>
 8014176:	f855 3b04 	ldr.w	r3, [r5], #4
 801417a:	4798      	blx	r3
 801417c:	3601      	adds	r6, #1
 801417e:	e7f2      	b.n	8014166 <__libc_init_array+0x1e>
 8014180:	0801923c 	.word	0x0801923c
 8014184:	0801923c 	.word	0x0801923c
 8014188:	0801923c 	.word	0x0801923c
 801418c:	08019240 	.word	0x08019240

08014190 <__retarget_lock_init_recursive>:
 8014190:	4770      	bx	lr

08014192 <__retarget_lock_acquire_recursive>:
 8014192:	4770      	bx	lr

08014194 <__retarget_lock_release_recursive>:
 8014194:	4770      	bx	lr
	...

08014198 <malloc>:
 8014198:	4b02      	ldr	r3, [pc, #8]	; (80141a4 <malloc+0xc>)
 801419a:	4601      	mov	r1, r0
 801419c:	6818      	ldr	r0, [r3, #0]
 801419e:	f000 b871 	b.w	8014284 <_malloc_r>
 80141a2:	bf00      	nop
 80141a4:	200001b8 	.word	0x200001b8

080141a8 <free>:
 80141a8:	4b02      	ldr	r3, [pc, #8]	; (80141b4 <free+0xc>)
 80141aa:	4601      	mov	r1, r0
 80141ac:	6818      	ldr	r0, [r3, #0]
 80141ae:	f000 b819 	b.w	80141e4 <_free_r>
 80141b2:	bf00      	nop
 80141b4:	200001b8 	.word	0x200001b8

080141b8 <memcpy>:
 80141b8:	440a      	add	r2, r1
 80141ba:	4291      	cmp	r1, r2
 80141bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80141c0:	d100      	bne.n	80141c4 <memcpy+0xc>
 80141c2:	4770      	bx	lr
 80141c4:	b510      	push	{r4, lr}
 80141c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80141ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80141ce:	4291      	cmp	r1, r2
 80141d0:	d1f9      	bne.n	80141c6 <memcpy+0xe>
 80141d2:	bd10      	pop	{r4, pc}

080141d4 <memset>:
 80141d4:	4402      	add	r2, r0
 80141d6:	4603      	mov	r3, r0
 80141d8:	4293      	cmp	r3, r2
 80141da:	d100      	bne.n	80141de <memset+0xa>
 80141dc:	4770      	bx	lr
 80141de:	f803 1b01 	strb.w	r1, [r3], #1
 80141e2:	e7f9      	b.n	80141d8 <memset+0x4>

080141e4 <_free_r>:
 80141e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80141e6:	2900      	cmp	r1, #0
 80141e8:	d048      	beq.n	801427c <_free_r+0x98>
 80141ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141ee:	9001      	str	r0, [sp, #4]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	f1a1 0404 	sub.w	r4, r1, #4
 80141f6:	bfb8      	it	lt
 80141f8:	18e4      	addlt	r4, r4, r3
 80141fa:	f003 f9ff 	bl	80175fc <__malloc_lock>
 80141fe:	4a20      	ldr	r2, [pc, #128]	; (8014280 <_free_r+0x9c>)
 8014200:	9801      	ldr	r0, [sp, #4]
 8014202:	6813      	ldr	r3, [r2, #0]
 8014204:	4615      	mov	r5, r2
 8014206:	b933      	cbnz	r3, 8014216 <_free_r+0x32>
 8014208:	6063      	str	r3, [r4, #4]
 801420a:	6014      	str	r4, [r2, #0]
 801420c:	b003      	add	sp, #12
 801420e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014212:	f003 b9f9 	b.w	8017608 <__malloc_unlock>
 8014216:	42a3      	cmp	r3, r4
 8014218:	d90b      	bls.n	8014232 <_free_r+0x4e>
 801421a:	6821      	ldr	r1, [r4, #0]
 801421c:	1862      	adds	r2, r4, r1
 801421e:	4293      	cmp	r3, r2
 8014220:	bf04      	itt	eq
 8014222:	681a      	ldreq	r2, [r3, #0]
 8014224:	685b      	ldreq	r3, [r3, #4]
 8014226:	6063      	str	r3, [r4, #4]
 8014228:	bf04      	itt	eq
 801422a:	1852      	addeq	r2, r2, r1
 801422c:	6022      	streq	r2, [r4, #0]
 801422e:	602c      	str	r4, [r5, #0]
 8014230:	e7ec      	b.n	801420c <_free_r+0x28>
 8014232:	461a      	mov	r2, r3
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	b10b      	cbz	r3, 801423c <_free_r+0x58>
 8014238:	42a3      	cmp	r3, r4
 801423a:	d9fa      	bls.n	8014232 <_free_r+0x4e>
 801423c:	6811      	ldr	r1, [r2, #0]
 801423e:	1855      	adds	r5, r2, r1
 8014240:	42a5      	cmp	r5, r4
 8014242:	d10b      	bne.n	801425c <_free_r+0x78>
 8014244:	6824      	ldr	r4, [r4, #0]
 8014246:	4421      	add	r1, r4
 8014248:	1854      	adds	r4, r2, r1
 801424a:	42a3      	cmp	r3, r4
 801424c:	6011      	str	r1, [r2, #0]
 801424e:	d1dd      	bne.n	801420c <_free_r+0x28>
 8014250:	681c      	ldr	r4, [r3, #0]
 8014252:	685b      	ldr	r3, [r3, #4]
 8014254:	6053      	str	r3, [r2, #4]
 8014256:	4421      	add	r1, r4
 8014258:	6011      	str	r1, [r2, #0]
 801425a:	e7d7      	b.n	801420c <_free_r+0x28>
 801425c:	d902      	bls.n	8014264 <_free_r+0x80>
 801425e:	230c      	movs	r3, #12
 8014260:	6003      	str	r3, [r0, #0]
 8014262:	e7d3      	b.n	801420c <_free_r+0x28>
 8014264:	6825      	ldr	r5, [r4, #0]
 8014266:	1961      	adds	r1, r4, r5
 8014268:	428b      	cmp	r3, r1
 801426a:	bf04      	itt	eq
 801426c:	6819      	ldreq	r1, [r3, #0]
 801426e:	685b      	ldreq	r3, [r3, #4]
 8014270:	6063      	str	r3, [r4, #4]
 8014272:	bf04      	itt	eq
 8014274:	1949      	addeq	r1, r1, r5
 8014276:	6021      	streq	r1, [r4, #0]
 8014278:	6054      	str	r4, [r2, #4]
 801427a:	e7c7      	b.n	801420c <_free_r+0x28>
 801427c:	b003      	add	sp, #12
 801427e:	bd30      	pop	{r4, r5, pc}
 8014280:	20009e70 	.word	0x20009e70

08014284 <_malloc_r>:
 8014284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014286:	1ccd      	adds	r5, r1, #3
 8014288:	f025 0503 	bic.w	r5, r5, #3
 801428c:	3508      	adds	r5, #8
 801428e:	2d0c      	cmp	r5, #12
 8014290:	bf38      	it	cc
 8014292:	250c      	movcc	r5, #12
 8014294:	2d00      	cmp	r5, #0
 8014296:	4606      	mov	r6, r0
 8014298:	db01      	blt.n	801429e <_malloc_r+0x1a>
 801429a:	42a9      	cmp	r1, r5
 801429c:	d903      	bls.n	80142a6 <_malloc_r+0x22>
 801429e:	230c      	movs	r3, #12
 80142a0:	6033      	str	r3, [r6, #0]
 80142a2:	2000      	movs	r0, #0
 80142a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142a6:	f003 f9a9 	bl	80175fc <__malloc_lock>
 80142aa:	4921      	ldr	r1, [pc, #132]	; (8014330 <_malloc_r+0xac>)
 80142ac:	680a      	ldr	r2, [r1, #0]
 80142ae:	4614      	mov	r4, r2
 80142b0:	b99c      	cbnz	r4, 80142da <_malloc_r+0x56>
 80142b2:	4f20      	ldr	r7, [pc, #128]	; (8014334 <_malloc_r+0xb0>)
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	b923      	cbnz	r3, 80142c2 <_malloc_r+0x3e>
 80142b8:	4621      	mov	r1, r4
 80142ba:	4630      	mov	r0, r6
 80142bc:	f000 ff20 	bl	8015100 <_sbrk_r>
 80142c0:	6038      	str	r0, [r7, #0]
 80142c2:	4629      	mov	r1, r5
 80142c4:	4630      	mov	r0, r6
 80142c6:	f000 ff1b 	bl	8015100 <_sbrk_r>
 80142ca:	1c43      	adds	r3, r0, #1
 80142cc:	d123      	bne.n	8014316 <_malloc_r+0x92>
 80142ce:	230c      	movs	r3, #12
 80142d0:	6033      	str	r3, [r6, #0]
 80142d2:	4630      	mov	r0, r6
 80142d4:	f003 f998 	bl	8017608 <__malloc_unlock>
 80142d8:	e7e3      	b.n	80142a2 <_malloc_r+0x1e>
 80142da:	6823      	ldr	r3, [r4, #0]
 80142dc:	1b5b      	subs	r3, r3, r5
 80142de:	d417      	bmi.n	8014310 <_malloc_r+0x8c>
 80142e0:	2b0b      	cmp	r3, #11
 80142e2:	d903      	bls.n	80142ec <_malloc_r+0x68>
 80142e4:	6023      	str	r3, [r4, #0]
 80142e6:	441c      	add	r4, r3
 80142e8:	6025      	str	r5, [r4, #0]
 80142ea:	e004      	b.n	80142f6 <_malloc_r+0x72>
 80142ec:	6863      	ldr	r3, [r4, #4]
 80142ee:	42a2      	cmp	r2, r4
 80142f0:	bf0c      	ite	eq
 80142f2:	600b      	streq	r3, [r1, #0]
 80142f4:	6053      	strne	r3, [r2, #4]
 80142f6:	4630      	mov	r0, r6
 80142f8:	f003 f986 	bl	8017608 <__malloc_unlock>
 80142fc:	f104 000b 	add.w	r0, r4, #11
 8014300:	1d23      	adds	r3, r4, #4
 8014302:	f020 0007 	bic.w	r0, r0, #7
 8014306:	1ac2      	subs	r2, r0, r3
 8014308:	d0cc      	beq.n	80142a4 <_malloc_r+0x20>
 801430a:	1a1b      	subs	r3, r3, r0
 801430c:	50a3      	str	r3, [r4, r2]
 801430e:	e7c9      	b.n	80142a4 <_malloc_r+0x20>
 8014310:	4622      	mov	r2, r4
 8014312:	6864      	ldr	r4, [r4, #4]
 8014314:	e7cc      	b.n	80142b0 <_malloc_r+0x2c>
 8014316:	1cc4      	adds	r4, r0, #3
 8014318:	f024 0403 	bic.w	r4, r4, #3
 801431c:	42a0      	cmp	r0, r4
 801431e:	d0e3      	beq.n	80142e8 <_malloc_r+0x64>
 8014320:	1a21      	subs	r1, r4, r0
 8014322:	4630      	mov	r0, r6
 8014324:	f000 feec 	bl	8015100 <_sbrk_r>
 8014328:	3001      	adds	r0, #1
 801432a:	d1dd      	bne.n	80142e8 <_malloc_r+0x64>
 801432c:	e7cf      	b.n	80142ce <_malloc_r+0x4a>
 801432e:	bf00      	nop
 8014330:	20009e70 	.word	0x20009e70
 8014334:	20009e74 	.word	0x20009e74

08014338 <__cvt>:
 8014338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801433c:	ec55 4b10 	vmov	r4, r5, d0
 8014340:	2d00      	cmp	r5, #0
 8014342:	460e      	mov	r6, r1
 8014344:	4619      	mov	r1, r3
 8014346:	462b      	mov	r3, r5
 8014348:	bfbb      	ittet	lt
 801434a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801434e:	461d      	movlt	r5, r3
 8014350:	2300      	movge	r3, #0
 8014352:	232d      	movlt	r3, #45	; 0x2d
 8014354:	700b      	strb	r3, [r1, #0]
 8014356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014358:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801435c:	4691      	mov	r9, r2
 801435e:	f023 0820 	bic.w	r8, r3, #32
 8014362:	bfbc      	itt	lt
 8014364:	4622      	movlt	r2, r4
 8014366:	4614      	movlt	r4, r2
 8014368:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801436c:	d005      	beq.n	801437a <__cvt+0x42>
 801436e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014372:	d100      	bne.n	8014376 <__cvt+0x3e>
 8014374:	3601      	adds	r6, #1
 8014376:	2102      	movs	r1, #2
 8014378:	e000      	b.n	801437c <__cvt+0x44>
 801437a:	2103      	movs	r1, #3
 801437c:	ab03      	add	r3, sp, #12
 801437e:	9301      	str	r3, [sp, #4]
 8014380:	ab02      	add	r3, sp, #8
 8014382:	9300      	str	r3, [sp, #0]
 8014384:	ec45 4b10 	vmov	d0, r4, r5
 8014388:	4653      	mov	r3, sl
 801438a:	4632      	mov	r2, r6
 801438c:	f001 fef0 	bl	8016170 <_dtoa_r>
 8014390:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014394:	4607      	mov	r7, r0
 8014396:	d102      	bne.n	801439e <__cvt+0x66>
 8014398:	f019 0f01 	tst.w	r9, #1
 801439c:	d022      	beq.n	80143e4 <__cvt+0xac>
 801439e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80143a2:	eb07 0906 	add.w	r9, r7, r6
 80143a6:	d110      	bne.n	80143ca <__cvt+0x92>
 80143a8:	783b      	ldrb	r3, [r7, #0]
 80143aa:	2b30      	cmp	r3, #48	; 0x30
 80143ac:	d10a      	bne.n	80143c4 <__cvt+0x8c>
 80143ae:	2200      	movs	r2, #0
 80143b0:	2300      	movs	r3, #0
 80143b2:	4620      	mov	r0, r4
 80143b4:	4629      	mov	r1, r5
 80143b6:	f7ec fb97 	bl	8000ae8 <__aeabi_dcmpeq>
 80143ba:	b918      	cbnz	r0, 80143c4 <__cvt+0x8c>
 80143bc:	f1c6 0601 	rsb	r6, r6, #1
 80143c0:	f8ca 6000 	str.w	r6, [sl]
 80143c4:	f8da 3000 	ldr.w	r3, [sl]
 80143c8:	4499      	add	r9, r3
 80143ca:	2200      	movs	r2, #0
 80143cc:	2300      	movs	r3, #0
 80143ce:	4620      	mov	r0, r4
 80143d0:	4629      	mov	r1, r5
 80143d2:	f7ec fb89 	bl	8000ae8 <__aeabi_dcmpeq>
 80143d6:	b108      	cbz	r0, 80143dc <__cvt+0xa4>
 80143d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80143dc:	2230      	movs	r2, #48	; 0x30
 80143de:	9b03      	ldr	r3, [sp, #12]
 80143e0:	454b      	cmp	r3, r9
 80143e2:	d307      	bcc.n	80143f4 <__cvt+0xbc>
 80143e4:	9b03      	ldr	r3, [sp, #12]
 80143e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80143e8:	1bdb      	subs	r3, r3, r7
 80143ea:	4638      	mov	r0, r7
 80143ec:	6013      	str	r3, [r2, #0]
 80143ee:	b004      	add	sp, #16
 80143f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143f4:	1c59      	adds	r1, r3, #1
 80143f6:	9103      	str	r1, [sp, #12]
 80143f8:	701a      	strb	r2, [r3, #0]
 80143fa:	e7f0      	b.n	80143de <__cvt+0xa6>

080143fc <__exponent>:
 80143fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80143fe:	4603      	mov	r3, r0
 8014400:	2900      	cmp	r1, #0
 8014402:	bfb8      	it	lt
 8014404:	4249      	neglt	r1, r1
 8014406:	f803 2b02 	strb.w	r2, [r3], #2
 801440a:	bfb4      	ite	lt
 801440c:	222d      	movlt	r2, #45	; 0x2d
 801440e:	222b      	movge	r2, #43	; 0x2b
 8014410:	2909      	cmp	r1, #9
 8014412:	7042      	strb	r2, [r0, #1]
 8014414:	dd2a      	ble.n	801446c <__exponent+0x70>
 8014416:	f10d 0407 	add.w	r4, sp, #7
 801441a:	46a4      	mov	ip, r4
 801441c:	270a      	movs	r7, #10
 801441e:	46a6      	mov	lr, r4
 8014420:	460a      	mov	r2, r1
 8014422:	fb91 f6f7 	sdiv	r6, r1, r7
 8014426:	fb07 1516 	mls	r5, r7, r6, r1
 801442a:	3530      	adds	r5, #48	; 0x30
 801442c:	2a63      	cmp	r2, #99	; 0x63
 801442e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8014432:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014436:	4631      	mov	r1, r6
 8014438:	dcf1      	bgt.n	801441e <__exponent+0x22>
 801443a:	3130      	adds	r1, #48	; 0x30
 801443c:	f1ae 0502 	sub.w	r5, lr, #2
 8014440:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014444:	1c44      	adds	r4, r0, #1
 8014446:	4629      	mov	r1, r5
 8014448:	4561      	cmp	r1, ip
 801444a:	d30a      	bcc.n	8014462 <__exponent+0x66>
 801444c:	f10d 0209 	add.w	r2, sp, #9
 8014450:	eba2 020e 	sub.w	r2, r2, lr
 8014454:	4565      	cmp	r5, ip
 8014456:	bf88      	it	hi
 8014458:	2200      	movhi	r2, #0
 801445a:	4413      	add	r3, r2
 801445c:	1a18      	subs	r0, r3, r0
 801445e:	b003      	add	sp, #12
 8014460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014466:	f804 2f01 	strb.w	r2, [r4, #1]!
 801446a:	e7ed      	b.n	8014448 <__exponent+0x4c>
 801446c:	2330      	movs	r3, #48	; 0x30
 801446e:	3130      	adds	r1, #48	; 0x30
 8014470:	7083      	strb	r3, [r0, #2]
 8014472:	70c1      	strb	r1, [r0, #3]
 8014474:	1d03      	adds	r3, r0, #4
 8014476:	e7f1      	b.n	801445c <__exponent+0x60>

08014478 <_printf_float>:
 8014478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801447c:	ed2d 8b02 	vpush	{d8}
 8014480:	b08d      	sub	sp, #52	; 0x34
 8014482:	460c      	mov	r4, r1
 8014484:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014488:	4616      	mov	r6, r2
 801448a:	461f      	mov	r7, r3
 801448c:	4605      	mov	r5, r0
 801448e:	f003 f88d 	bl	80175ac <_localeconv_r>
 8014492:	f8d0 a000 	ldr.w	sl, [r0]
 8014496:	4650      	mov	r0, sl
 8014498:	f7eb feaa 	bl	80001f0 <strlen>
 801449c:	2300      	movs	r3, #0
 801449e:	930a      	str	r3, [sp, #40]	; 0x28
 80144a0:	6823      	ldr	r3, [r4, #0]
 80144a2:	9305      	str	r3, [sp, #20]
 80144a4:	f8d8 3000 	ldr.w	r3, [r8]
 80144a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80144ac:	3307      	adds	r3, #7
 80144ae:	f023 0307 	bic.w	r3, r3, #7
 80144b2:	f103 0208 	add.w	r2, r3, #8
 80144b6:	f8c8 2000 	str.w	r2, [r8]
 80144ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80144c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80144c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80144ca:	9307      	str	r3, [sp, #28]
 80144cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80144d0:	ee08 0a10 	vmov	s16, r0
 80144d4:	4b9f      	ldr	r3, [pc, #636]	; (8014754 <_printf_float+0x2dc>)
 80144d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80144da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80144de:	f7ec fb35 	bl	8000b4c <__aeabi_dcmpun>
 80144e2:	bb88      	cbnz	r0, 8014548 <_printf_float+0xd0>
 80144e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80144e8:	4b9a      	ldr	r3, [pc, #616]	; (8014754 <_printf_float+0x2dc>)
 80144ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80144ee:	f7ec fb0f 	bl	8000b10 <__aeabi_dcmple>
 80144f2:	bb48      	cbnz	r0, 8014548 <_printf_float+0xd0>
 80144f4:	2200      	movs	r2, #0
 80144f6:	2300      	movs	r3, #0
 80144f8:	4640      	mov	r0, r8
 80144fa:	4649      	mov	r1, r9
 80144fc:	f7ec fafe 	bl	8000afc <__aeabi_dcmplt>
 8014500:	b110      	cbz	r0, 8014508 <_printf_float+0x90>
 8014502:	232d      	movs	r3, #45	; 0x2d
 8014504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014508:	4b93      	ldr	r3, [pc, #588]	; (8014758 <_printf_float+0x2e0>)
 801450a:	4894      	ldr	r0, [pc, #592]	; (801475c <_printf_float+0x2e4>)
 801450c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014510:	bf94      	ite	ls
 8014512:	4698      	movls	r8, r3
 8014514:	4680      	movhi	r8, r0
 8014516:	2303      	movs	r3, #3
 8014518:	6123      	str	r3, [r4, #16]
 801451a:	9b05      	ldr	r3, [sp, #20]
 801451c:	f023 0204 	bic.w	r2, r3, #4
 8014520:	6022      	str	r2, [r4, #0]
 8014522:	f04f 0900 	mov.w	r9, #0
 8014526:	9700      	str	r7, [sp, #0]
 8014528:	4633      	mov	r3, r6
 801452a:	aa0b      	add	r2, sp, #44	; 0x2c
 801452c:	4621      	mov	r1, r4
 801452e:	4628      	mov	r0, r5
 8014530:	f000 f9d8 	bl	80148e4 <_printf_common>
 8014534:	3001      	adds	r0, #1
 8014536:	f040 8090 	bne.w	801465a <_printf_float+0x1e2>
 801453a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801453e:	b00d      	add	sp, #52	; 0x34
 8014540:	ecbd 8b02 	vpop	{d8}
 8014544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014548:	4642      	mov	r2, r8
 801454a:	464b      	mov	r3, r9
 801454c:	4640      	mov	r0, r8
 801454e:	4649      	mov	r1, r9
 8014550:	f7ec fafc 	bl	8000b4c <__aeabi_dcmpun>
 8014554:	b140      	cbz	r0, 8014568 <_printf_float+0xf0>
 8014556:	464b      	mov	r3, r9
 8014558:	2b00      	cmp	r3, #0
 801455a:	bfbc      	itt	lt
 801455c:	232d      	movlt	r3, #45	; 0x2d
 801455e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014562:	487f      	ldr	r0, [pc, #508]	; (8014760 <_printf_float+0x2e8>)
 8014564:	4b7f      	ldr	r3, [pc, #508]	; (8014764 <_printf_float+0x2ec>)
 8014566:	e7d1      	b.n	801450c <_printf_float+0x94>
 8014568:	6863      	ldr	r3, [r4, #4]
 801456a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801456e:	9206      	str	r2, [sp, #24]
 8014570:	1c5a      	adds	r2, r3, #1
 8014572:	d13f      	bne.n	80145f4 <_printf_float+0x17c>
 8014574:	2306      	movs	r3, #6
 8014576:	6063      	str	r3, [r4, #4]
 8014578:	9b05      	ldr	r3, [sp, #20]
 801457a:	6861      	ldr	r1, [r4, #4]
 801457c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014580:	2300      	movs	r3, #0
 8014582:	9303      	str	r3, [sp, #12]
 8014584:	ab0a      	add	r3, sp, #40	; 0x28
 8014586:	e9cd b301 	strd	fp, r3, [sp, #4]
 801458a:	ab09      	add	r3, sp, #36	; 0x24
 801458c:	ec49 8b10 	vmov	d0, r8, r9
 8014590:	9300      	str	r3, [sp, #0]
 8014592:	6022      	str	r2, [r4, #0]
 8014594:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014598:	4628      	mov	r0, r5
 801459a:	f7ff fecd 	bl	8014338 <__cvt>
 801459e:	9b06      	ldr	r3, [sp, #24]
 80145a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80145a2:	2b47      	cmp	r3, #71	; 0x47
 80145a4:	4680      	mov	r8, r0
 80145a6:	d108      	bne.n	80145ba <_printf_float+0x142>
 80145a8:	1cc8      	adds	r0, r1, #3
 80145aa:	db02      	blt.n	80145b2 <_printf_float+0x13a>
 80145ac:	6863      	ldr	r3, [r4, #4]
 80145ae:	4299      	cmp	r1, r3
 80145b0:	dd41      	ble.n	8014636 <_printf_float+0x1be>
 80145b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80145b6:	fa5f fb8b 	uxtb.w	fp, fp
 80145ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80145be:	d820      	bhi.n	8014602 <_printf_float+0x18a>
 80145c0:	3901      	subs	r1, #1
 80145c2:	465a      	mov	r2, fp
 80145c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80145c8:	9109      	str	r1, [sp, #36]	; 0x24
 80145ca:	f7ff ff17 	bl	80143fc <__exponent>
 80145ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80145d0:	1813      	adds	r3, r2, r0
 80145d2:	2a01      	cmp	r2, #1
 80145d4:	4681      	mov	r9, r0
 80145d6:	6123      	str	r3, [r4, #16]
 80145d8:	dc02      	bgt.n	80145e0 <_printf_float+0x168>
 80145da:	6822      	ldr	r2, [r4, #0]
 80145dc:	07d2      	lsls	r2, r2, #31
 80145de:	d501      	bpl.n	80145e4 <_printf_float+0x16c>
 80145e0:	3301      	adds	r3, #1
 80145e2:	6123      	str	r3, [r4, #16]
 80145e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d09c      	beq.n	8014526 <_printf_float+0xae>
 80145ec:	232d      	movs	r3, #45	; 0x2d
 80145ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145f2:	e798      	b.n	8014526 <_printf_float+0xae>
 80145f4:	9a06      	ldr	r2, [sp, #24]
 80145f6:	2a47      	cmp	r2, #71	; 0x47
 80145f8:	d1be      	bne.n	8014578 <_printf_float+0x100>
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d1bc      	bne.n	8014578 <_printf_float+0x100>
 80145fe:	2301      	movs	r3, #1
 8014600:	e7b9      	b.n	8014576 <_printf_float+0xfe>
 8014602:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014606:	d118      	bne.n	801463a <_printf_float+0x1c2>
 8014608:	2900      	cmp	r1, #0
 801460a:	6863      	ldr	r3, [r4, #4]
 801460c:	dd0b      	ble.n	8014626 <_printf_float+0x1ae>
 801460e:	6121      	str	r1, [r4, #16]
 8014610:	b913      	cbnz	r3, 8014618 <_printf_float+0x1a0>
 8014612:	6822      	ldr	r2, [r4, #0]
 8014614:	07d0      	lsls	r0, r2, #31
 8014616:	d502      	bpl.n	801461e <_printf_float+0x1a6>
 8014618:	3301      	adds	r3, #1
 801461a:	440b      	add	r3, r1
 801461c:	6123      	str	r3, [r4, #16]
 801461e:	65a1      	str	r1, [r4, #88]	; 0x58
 8014620:	f04f 0900 	mov.w	r9, #0
 8014624:	e7de      	b.n	80145e4 <_printf_float+0x16c>
 8014626:	b913      	cbnz	r3, 801462e <_printf_float+0x1b6>
 8014628:	6822      	ldr	r2, [r4, #0]
 801462a:	07d2      	lsls	r2, r2, #31
 801462c:	d501      	bpl.n	8014632 <_printf_float+0x1ba>
 801462e:	3302      	adds	r3, #2
 8014630:	e7f4      	b.n	801461c <_printf_float+0x1a4>
 8014632:	2301      	movs	r3, #1
 8014634:	e7f2      	b.n	801461c <_printf_float+0x1a4>
 8014636:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801463a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801463c:	4299      	cmp	r1, r3
 801463e:	db05      	blt.n	801464c <_printf_float+0x1d4>
 8014640:	6823      	ldr	r3, [r4, #0]
 8014642:	6121      	str	r1, [r4, #16]
 8014644:	07d8      	lsls	r0, r3, #31
 8014646:	d5ea      	bpl.n	801461e <_printf_float+0x1a6>
 8014648:	1c4b      	adds	r3, r1, #1
 801464a:	e7e7      	b.n	801461c <_printf_float+0x1a4>
 801464c:	2900      	cmp	r1, #0
 801464e:	bfd4      	ite	le
 8014650:	f1c1 0202 	rsble	r2, r1, #2
 8014654:	2201      	movgt	r2, #1
 8014656:	4413      	add	r3, r2
 8014658:	e7e0      	b.n	801461c <_printf_float+0x1a4>
 801465a:	6823      	ldr	r3, [r4, #0]
 801465c:	055a      	lsls	r2, r3, #21
 801465e:	d407      	bmi.n	8014670 <_printf_float+0x1f8>
 8014660:	6923      	ldr	r3, [r4, #16]
 8014662:	4642      	mov	r2, r8
 8014664:	4631      	mov	r1, r6
 8014666:	4628      	mov	r0, r5
 8014668:	47b8      	blx	r7
 801466a:	3001      	adds	r0, #1
 801466c:	d12c      	bne.n	80146c8 <_printf_float+0x250>
 801466e:	e764      	b.n	801453a <_printf_float+0xc2>
 8014670:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014674:	f240 80e0 	bls.w	8014838 <_printf_float+0x3c0>
 8014678:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801467c:	2200      	movs	r2, #0
 801467e:	2300      	movs	r3, #0
 8014680:	f7ec fa32 	bl	8000ae8 <__aeabi_dcmpeq>
 8014684:	2800      	cmp	r0, #0
 8014686:	d034      	beq.n	80146f2 <_printf_float+0x27a>
 8014688:	4a37      	ldr	r2, [pc, #220]	; (8014768 <_printf_float+0x2f0>)
 801468a:	2301      	movs	r3, #1
 801468c:	4631      	mov	r1, r6
 801468e:	4628      	mov	r0, r5
 8014690:	47b8      	blx	r7
 8014692:	3001      	adds	r0, #1
 8014694:	f43f af51 	beq.w	801453a <_printf_float+0xc2>
 8014698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801469c:	429a      	cmp	r2, r3
 801469e:	db02      	blt.n	80146a6 <_printf_float+0x22e>
 80146a0:	6823      	ldr	r3, [r4, #0]
 80146a2:	07d8      	lsls	r0, r3, #31
 80146a4:	d510      	bpl.n	80146c8 <_printf_float+0x250>
 80146a6:	ee18 3a10 	vmov	r3, s16
 80146aa:	4652      	mov	r2, sl
 80146ac:	4631      	mov	r1, r6
 80146ae:	4628      	mov	r0, r5
 80146b0:	47b8      	blx	r7
 80146b2:	3001      	adds	r0, #1
 80146b4:	f43f af41 	beq.w	801453a <_printf_float+0xc2>
 80146b8:	f04f 0800 	mov.w	r8, #0
 80146bc:	f104 091a 	add.w	r9, r4, #26
 80146c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146c2:	3b01      	subs	r3, #1
 80146c4:	4543      	cmp	r3, r8
 80146c6:	dc09      	bgt.n	80146dc <_printf_float+0x264>
 80146c8:	6823      	ldr	r3, [r4, #0]
 80146ca:	079b      	lsls	r3, r3, #30
 80146cc:	f100 8105 	bmi.w	80148da <_printf_float+0x462>
 80146d0:	68e0      	ldr	r0, [r4, #12]
 80146d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146d4:	4298      	cmp	r0, r3
 80146d6:	bfb8      	it	lt
 80146d8:	4618      	movlt	r0, r3
 80146da:	e730      	b.n	801453e <_printf_float+0xc6>
 80146dc:	2301      	movs	r3, #1
 80146de:	464a      	mov	r2, r9
 80146e0:	4631      	mov	r1, r6
 80146e2:	4628      	mov	r0, r5
 80146e4:	47b8      	blx	r7
 80146e6:	3001      	adds	r0, #1
 80146e8:	f43f af27 	beq.w	801453a <_printf_float+0xc2>
 80146ec:	f108 0801 	add.w	r8, r8, #1
 80146f0:	e7e6      	b.n	80146c0 <_printf_float+0x248>
 80146f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	dc39      	bgt.n	801476c <_printf_float+0x2f4>
 80146f8:	4a1b      	ldr	r2, [pc, #108]	; (8014768 <_printf_float+0x2f0>)
 80146fa:	2301      	movs	r3, #1
 80146fc:	4631      	mov	r1, r6
 80146fe:	4628      	mov	r0, r5
 8014700:	47b8      	blx	r7
 8014702:	3001      	adds	r0, #1
 8014704:	f43f af19 	beq.w	801453a <_printf_float+0xc2>
 8014708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801470c:	4313      	orrs	r3, r2
 801470e:	d102      	bne.n	8014716 <_printf_float+0x29e>
 8014710:	6823      	ldr	r3, [r4, #0]
 8014712:	07d9      	lsls	r1, r3, #31
 8014714:	d5d8      	bpl.n	80146c8 <_printf_float+0x250>
 8014716:	ee18 3a10 	vmov	r3, s16
 801471a:	4652      	mov	r2, sl
 801471c:	4631      	mov	r1, r6
 801471e:	4628      	mov	r0, r5
 8014720:	47b8      	blx	r7
 8014722:	3001      	adds	r0, #1
 8014724:	f43f af09 	beq.w	801453a <_printf_float+0xc2>
 8014728:	f04f 0900 	mov.w	r9, #0
 801472c:	f104 0a1a 	add.w	sl, r4, #26
 8014730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014732:	425b      	negs	r3, r3
 8014734:	454b      	cmp	r3, r9
 8014736:	dc01      	bgt.n	801473c <_printf_float+0x2c4>
 8014738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801473a:	e792      	b.n	8014662 <_printf_float+0x1ea>
 801473c:	2301      	movs	r3, #1
 801473e:	4652      	mov	r2, sl
 8014740:	4631      	mov	r1, r6
 8014742:	4628      	mov	r0, r5
 8014744:	47b8      	blx	r7
 8014746:	3001      	adds	r0, #1
 8014748:	f43f aef7 	beq.w	801453a <_printf_float+0xc2>
 801474c:	f109 0901 	add.w	r9, r9, #1
 8014750:	e7ee      	b.n	8014730 <_printf_float+0x2b8>
 8014752:	bf00      	nop
 8014754:	7fefffff 	.word	0x7fefffff
 8014758:	08018ee4 	.word	0x08018ee4
 801475c:	08018ee8 	.word	0x08018ee8
 8014760:	08018ef0 	.word	0x08018ef0
 8014764:	08018eec 	.word	0x08018eec
 8014768:	08018ef4 	.word	0x08018ef4
 801476c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801476e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014770:	429a      	cmp	r2, r3
 8014772:	bfa8      	it	ge
 8014774:	461a      	movge	r2, r3
 8014776:	2a00      	cmp	r2, #0
 8014778:	4691      	mov	r9, r2
 801477a:	dc37      	bgt.n	80147ec <_printf_float+0x374>
 801477c:	f04f 0b00 	mov.w	fp, #0
 8014780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014784:	f104 021a 	add.w	r2, r4, #26
 8014788:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801478a:	9305      	str	r3, [sp, #20]
 801478c:	eba3 0309 	sub.w	r3, r3, r9
 8014790:	455b      	cmp	r3, fp
 8014792:	dc33      	bgt.n	80147fc <_printf_float+0x384>
 8014794:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014798:	429a      	cmp	r2, r3
 801479a:	db3b      	blt.n	8014814 <_printf_float+0x39c>
 801479c:	6823      	ldr	r3, [r4, #0]
 801479e:	07da      	lsls	r2, r3, #31
 80147a0:	d438      	bmi.n	8014814 <_printf_float+0x39c>
 80147a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80147a4:	9b05      	ldr	r3, [sp, #20]
 80147a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80147a8:	1ad3      	subs	r3, r2, r3
 80147aa:	eba2 0901 	sub.w	r9, r2, r1
 80147ae:	4599      	cmp	r9, r3
 80147b0:	bfa8      	it	ge
 80147b2:	4699      	movge	r9, r3
 80147b4:	f1b9 0f00 	cmp.w	r9, #0
 80147b8:	dc35      	bgt.n	8014826 <_printf_float+0x3ae>
 80147ba:	f04f 0800 	mov.w	r8, #0
 80147be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80147c2:	f104 0a1a 	add.w	sl, r4, #26
 80147c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80147ca:	1a9b      	subs	r3, r3, r2
 80147cc:	eba3 0309 	sub.w	r3, r3, r9
 80147d0:	4543      	cmp	r3, r8
 80147d2:	f77f af79 	ble.w	80146c8 <_printf_float+0x250>
 80147d6:	2301      	movs	r3, #1
 80147d8:	4652      	mov	r2, sl
 80147da:	4631      	mov	r1, r6
 80147dc:	4628      	mov	r0, r5
 80147de:	47b8      	blx	r7
 80147e0:	3001      	adds	r0, #1
 80147e2:	f43f aeaa 	beq.w	801453a <_printf_float+0xc2>
 80147e6:	f108 0801 	add.w	r8, r8, #1
 80147ea:	e7ec      	b.n	80147c6 <_printf_float+0x34e>
 80147ec:	4613      	mov	r3, r2
 80147ee:	4631      	mov	r1, r6
 80147f0:	4642      	mov	r2, r8
 80147f2:	4628      	mov	r0, r5
 80147f4:	47b8      	blx	r7
 80147f6:	3001      	adds	r0, #1
 80147f8:	d1c0      	bne.n	801477c <_printf_float+0x304>
 80147fa:	e69e      	b.n	801453a <_printf_float+0xc2>
 80147fc:	2301      	movs	r3, #1
 80147fe:	4631      	mov	r1, r6
 8014800:	4628      	mov	r0, r5
 8014802:	9205      	str	r2, [sp, #20]
 8014804:	47b8      	blx	r7
 8014806:	3001      	adds	r0, #1
 8014808:	f43f ae97 	beq.w	801453a <_printf_float+0xc2>
 801480c:	9a05      	ldr	r2, [sp, #20]
 801480e:	f10b 0b01 	add.w	fp, fp, #1
 8014812:	e7b9      	b.n	8014788 <_printf_float+0x310>
 8014814:	ee18 3a10 	vmov	r3, s16
 8014818:	4652      	mov	r2, sl
 801481a:	4631      	mov	r1, r6
 801481c:	4628      	mov	r0, r5
 801481e:	47b8      	blx	r7
 8014820:	3001      	adds	r0, #1
 8014822:	d1be      	bne.n	80147a2 <_printf_float+0x32a>
 8014824:	e689      	b.n	801453a <_printf_float+0xc2>
 8014826:	9a05      	ldr	r2, [sp, #20]
 8014828:	464b      	mov	r3, r9
 801482a:	4442      	add	r2, r8
 801482c:	4631      	mov	r1, r6
 801482e:	4628      	mov	r0, r5
 8014830:	47b8      	blx	r7
 8014832:	3001      	adds	r0, #1
 8014834:	d1c1      	bne.n	80147ba <_printf_float+0x342>
 8014836:	e680      	b.n	801453a <_printf_float+0xc2>
 8014838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801483a:	2a01      	cmp	r2, #1
 801483c:	dc01      	bgt.n	8014842 <_printf_float+0x3ca>
 801483e:	07db      	lsls	r3, r3, #31
 8014840:	d538      	bpl.n	80148b4 <_printf_float+0x43c>
 8014842:	2301      	movs	r3, #1
 8014844:	4642      	mov	r2, r8
 8014846:	4631      	mov	r1, r6
 8014848:	4628      	mov	r0, r5
 801484a:	47b8      	blx	r7
 801484c:	3001      	adds	r0, #1
 801484e:	f43f ae74 	beq.w	801453a <_printf_float+0xc2>
 8014852:	ee18 3a10 	vmov	r3, s16
 8014856:	4652      	mov	r2, sl
 8014858:	4631      	mov	r1, r6
 801485a:	4628      	mov	r0, r5
 801485c:	47b8      	blx	r7
 801485e:	3001      	adds	r0, #1
 8014860:	f43f ae6b 	beq.w	801453a <_printf_float+0xc2>
 8014864:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014868:	2200      	movs	r2, #0
 801486a:	2300      	movs	r3, #0
 801486c:	f7ec f93c 	bl	8000ae8 <__aeabi_dcmpeq>
 8014870:	b9d8      	cbnz	r0, 80148aa <_printf_float+0x432>
 8014872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014874:	f108 0201 	add.w	r2, r8, #1
 8014878:	3b01      	subs	r3, #1
 801487a:	4631      	mov	r1, r6
 801487c:	4628      	mov	r0, r5
 801487e:	47b8      	blx	r7
 8014880:	3001      	adds	r0, #1
 8014882:	d10e      	bne.n	80148a2 <_printf_float+0x42a>
 8014884:	e659      	b.n	801453a <_printf_float+0xc2>
 8014886:	2301      	movs	r3, #1
 8014888:	4652      	mov	r2, sl
 801488a:	4631      	mov	r1, r6
 801488c:	4628      	mov	r0, r5
 801488e:	47b8      	blx	r7
 8014890:	3001      	adds	r0, #1
 8014892:	f43f ae52 	beq.w	801453a <_printf_float+0xc2>
 8014896:	f108 0801 	add.w	r8, r8, #1
 801489a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801489c:	3b01      	subs	r3, #1
 801489e:	4543      	cmp	r3, r8
 80148a0:	dcf1      	bgt.n	8014886 <_printf_float+0x40e>
 80148a2:	464b      	mov	r3, r9
 80148a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80148a8:	e6dc      	b.n	8014664 <_printf_float+0x1ec>
 80148aa:	f04f 0800 	mov.w	r8, #0
 80148ae:	f104 0a1a 	add.w	sl, r4, #26
 80148b2:	e7f2      	b.n	801489a <_printf_float+0x422>
 80148b4:	2301      	movs	r3, #1
 80148b6:	4642      	mov	r2, r8
 80148b8:	e7df      	b.n	801487a <_printf_float+0x402>
 80148ba:	2301      	movs	r3, #1
 80148bc:	464a      	mov	r2, r9
 80148be:	4631      	mov	r1, r6
 80148c0:	4628      	mov	r0, r5
 80148c2:	47b8      	blx	r7
 80148c4:	3001      	adds	r0, #1
 80148c6:	f43f ae38 	beq.w	801453a <_printf_float+0xc2>
 80148ca:	f108 0801 	add.w	r8, r8, #1
 80148ce:	68e3      	ldr	r3, [r4, #12]
 80148d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80148d2:	1a5b      	subs	r3, r3, r1
 80148d4:	4543      	cmp	r3, r8
 80148d6:	dcf0      	bgt.n	80148ba <_printf_float+0x442>
 80148d8:	e6fa      	b.n	80146d0 <_printf_float+0x258>
 80148da:	f04f 0800 	mov.w	r8, #0
 80148de:	f104 0919 	add.w	r9, r4, #25
 80148e2:	e7f4      	b.n	80148ce <_printf_float+0x456>

080148e4 <_printf_common>:
 80148e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148e8:	4616      	mov	r6, r2
 80148ea:	4699      	mov	r9, r3
 80148ec:	688a      	ldr	r2, [r1, #8]
 80148ee:	690b      	ldr	r3, [r1, #16]
 80148f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80148f4:	4293      	cmp	r3, r2
 80148f6:	bfb8      	it	lt
 80148f8:	4613      	movlt	r3, r2
 80148fa:	6033      	str	r3, [r6, #0]
 80148fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014900:	4607      	mov	r7, r0
 8014902:	460c      	mov	r4, r1
 8014904:	b10a      	cbz	r2, 801490a <_printf_common+0x26>
 8014906:	3301      	adds	r3, #1
 8014908:	6033      	str	r3, [r6, #0]
 801490a:	6823      	ldr	r3, [r4, #0]
 801490c:	0699      	lsls	r1, r3, #26
 801490e:	bf42      	ittt	mi
 8014910:	6833      	ldrmi	r3, [r6, #0]
 8014912:	3302      	addmi	r3, #2
 8014914:	6033      	strmi	r3, [r6, #0]
 8014916:	6825      	ldr	r5, [r4, #0]
 8014918:	f015 0506 	ands.w	r5, r5, #6
 801491c:	d106      	bne.n	801492c <_printf_common+0x48>
 801491e:	f104 0a19 	add.w	sl, r4, #25
 8014922:	68e3      	ldr	r3, [r4, #12]
 8014924:	6832      	ldr	r2, [r6, #0]
 8014926:	1a9b      	subs	r3, r3, r2
 8014928:	42ab      	cmp	r3, r5
 801492a:	dc26      	bgt.n	801497a <_printf_common+0x96>
 801492c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014930:	1e13      	subs	r3, r2, #0
 8014932:	6822      	ldr	r2, [r4, #0]
 8014934:	bf18      	it	ne
 8014936:	2301      	movne	r3, #1
 8014938:	0692      	lsls	r2, r2, #26
 801493a:	d42b      	bmi.n	8014994 <_printf_common+0xb0>
 801493c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014940:	4649      	mov	r1, r9
 8014942:	4638      	mov	r0, r7
 8014944:	47c0      	blx	r8
 8014946:	3001      	adds	r0, #1
 8014948:	d01e      	beq.n	8014988 <_printf_common+0xa4>
 801494a:	6823      	ldr	r3, [r4, #0]
 801494c:	68e5      	ldr	r5, [r4, #12]
 801494e:	6832      	ldr	r2, [r6, #0]
 8014950:	f003 0306 	and.w	r3, r3, #6
 8014954:	2b04      	cmp	r3, #4
 8014956:	bf08      	it	eq
 8014958:	1aad      	subeq	r5, r5, r2
 801495a:	68a3      	ldr	r3, [r4, #8]
 801495c:	6922      	ldr	r2, [r4, #16]
 801495e:	bf0c      	ite	eq
 8014960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014964:	2500      	movne	r5, #0
 8014966:	4293      	cmp	r3, r2
 8014968:	bfc4      	itt	gt
 801496a:	1a9b      	subgt	r3, r3, r2
 801496c:	18ed      	addgt	r5, r5, r3
 801496e:	2600      	movs	r6, #0
 8014970:	341a      	adds	r4, #26
 8014972:	42b5      	cmp	r5, r6
 8014974:	d11a      	bne.n	80149ac <_printf_common+0xc8>
 8014976:	2000      	movs	r0, #0
 8014978:	e008      	b.n	801498c <_printf_common+0xa8>
 801497a:	2301      	movs	r3, #1
 801497c:	4652      	mov	r2, sl
 801497e:	4649      	mov	r1, r9
 8014980:	4638      	mov	r0, r7
 8014982:	47c0      	blx	r8
 8014984:	3001      	adds	r0, #1
 8014986:	d103      	bne.n	8014990 <_printf_common+0xac>
 8014988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801498c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014990:	3501      	adds	r5, #1
 8014992:	e7c6      	b.n	8014922 <_printf_common+0x3e>
 8014994:	18e1      	adds	r1, r4, r3
 8014996:	1c5a      	adds	r2, r3, #1
 8014998:	2030      	movs	r0, #48	; 0x30
 801499a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801499e:	4422      	add	r2, r4
 80149a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80149a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80149a8:	3302      	adds	r3, #2
 80149aa:	e7c7      	b.n	801493c <_printf_common+0x58>
 80149ac:	2301      	movs	r3, #1
 80149ae:	4622      	mov	r2, r4
 80149b0:	4649      	mov	r1, r9
 80149b2:	4638      	mov	r0, r7
 80149b4:	47c0      	blx	r8
 80149b6:	3001      	adds	r0, #1
 80149b8:	d0e6      	beq.n	8014988 <_printf_common+0xa4>
 80149ba:	3601      	adds	r6, #1
 80149bc:	e7d9      	b.n	8014972 <_printf_common+0x8e>
	...

080149c0 <_printf_i>:
 80149c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80149c4:	460c      	mov	r4, r1
 80149c6:	4691      	mov	r9, r2
 80149c8:	7e27      	ldrb	r7, [r4, #24]
 80149ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80149cc:	2f78      	cmp	r7, #120	; 0x78
 80149ce:	4680      	mov	r8, r0
 80149d0:	469a      	mov	sl, r3
 80149d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80149d6:	d807      	bhi.n	80149e8 <_printf_i+0x28>
 80149d8:	2f62      	cmp	r7, #98	; 0x62
 80149da:	d80a      	bhi.n	80149f2 <_printf_i+0x32>
 80149dc:	2f00      	cmp	r7, #0
 80149de:	f000 80d8 	beq.w	8014b92 <_printf_i+0x1d2>
 80149e2:	2f58      	cmp	r7, #88	; 0x58
 80149e4:	f000 80a3 	beq.w	8014b2e <_printf_i+0x16e>
 80149e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80149ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80149f0:	e03a      	b.n	8014a68 <_printf_i+0xa8>
 80149f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80149f6:	2b15      	cmp	r3, #21
 80149f8:	d8f6      	bhi.n	80149e8 <_printf_i+0x28>
 80149fa:	a001      	add	r0, pc, #4	; (adr r0, 8014a00 <_printf_i+0x40>)
 80149fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014a00:	08014a59 	.word	0x08014a59
 8014a04:	08014a6d 	.word	0x08014a6d
 8014a08:	080149e9 	.word	0x080149e9
 8014a0c:	080149e9 	.word	0x080149e9
 8014a10:	080149e9 	.word	0x080149e9
 8014a14:	080149e9 	.word	0x080149e9
 8014a18:	08014a6d 	.word	0x08014a6d
 8014a1c:	080149e9 	.word	0x080149e9
 8014a20:	080149e9 	.word	0x080149e9
 8014a24:	080149e9 	.word	0x080149e9
 8014a28:	080149e9 	.word	0x080149e9
 8014a2c:	08014b79 	.word	0x08014b79
 8014a30:	08014a9d 	.word	0x08014a9d
 8014a34:	08014b5b 	.word	0x08014b5b
 8014a38:	080149e9 	.word	0x080149e9
 8014a3c:	080149e9 	.word	0x080149e9
 8014a40:	08014b9b 	.word	0x08014b9b
 8014a44:	080149e9 	.word	0x080149e9
 8014a48:	08014a9d 	.word	0x08014a9d
 8014a4c:	080149e9 	.word	0x080149e9
 8014a50:	080149e9 	.word	0x080149e9
 8014a54:	08014b63 	.word	0x08014b63
 8014a58:	680b      	ldr	r3, [r1, #0]
 8014a5a:	1d1a      	adds	r2, r3, #4
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	600a      	str	r2, [r1, #0]
 8014a60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014a68:	2301      	movs	r3, #1
 8014a6a:	e0a3      	b.n	8014bb4 <_printf_i+0x1f4>
 8014a6c:	6825      	ldr	r5, [r4, #0]
 8014a6e:	6808      	ldr	r0, [r1, #0]
 8014a70:	062e      	lsls	r6, r5, #24
 8014a72:	f100 0304 	add.w	r3, r0, #4
 8014a76:	d50a      	bpl.n	8014a8e <_printf_i+0xce>
 8014a78:	6805      	ldr	r5, [r0, #0]
 8014a7a:	600b      	str	r3, [r1, #0]
 8014a7c:	2d00      	cmp	r5, #0
 8014a7e:	da03      	bge.n	8014a88 <_printf_i+0xc8>
 8014a80:	232d      	movs	r3, #45	; 0x2d
 8014a82:	426d      	negs	r5, r5
 8014a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a88:	485e      	ldr	r0, [pc, #376]	; (8014c04 <_printf_i+0x244>)
 8014a8a:	230a      	movs	r3, #10
 8014a8c:	e019      	b.n	8014ac2 <_printf_i+0x102>
 8014a8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014a92:	6805      	ldr	r5, [r0, #0]
 8014a94:	600b      	str	r3, [r1, #0]
 8014a96:	bf18      	it	ne
 8014a98:	b22d      	sxthne	r5, r5
 8014a9a:	e7ef      	b.n	8014a7c <_printf_i+0xbc>
 8014a9c:	680b      	ldr	r3, [r1, #0]
 8014a9e:	6825      	ldr	r5, [r4, #0]
 8014aa0:	1d18      	adds	r0, r3, #4
 8014aa2:	6008      	str	r0, [r1, #0]
 8014aa4:	0628      	lsls	r0, r5, #24
 8014aa6:	d501      	bpl.n	8014aac <_printf_i+0xec>
 8014aa8:	681d      	ldr	r5, [r3, #0]
 8014aaa:	e002      	b.n	8014ab2 <_printf_i+0xf2>
 8014aac:	0669      	lsls	r1, r5, #25
 8014aae:	d5fb      	bpl.n	8014aa8 <_printf_i+0xe8>
 8014ab0:	881d      	ldrh	r5, [r3, #0]
 8014ab2:	4854      	ldr	r0, [pc, #336]	; (8014c04 <_printf_i+0x244>)
 8014ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8014ab6:	bf0c      	ite	eq
 8014ab8:	2308      	moveq	r3, #8
 8014aba:	230a      	movne	r3, #10
 8014abc:	2100      	movs	r1, #0
 8014abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014ac2:	6866      	ldr	r6, [r4, #4]
 8014ac4:	60a6      	str	r6, [r4, #8]
 8014ac6:	2e00      	cmp	r6, #0
 8014ac8:	bfa2      	ittt	ge
 8014aca:	6821      	ldrge	r1, [r4, #0]
 8014acc:	f021 0104 	bicge.w	r1, r1, #4
 8014ad0:	6021      	strge	r1, [r4, #0]
 8014ad2:	b90d      	cbnz	r5, 8014ad8 <_printf_i+0x118>
 8014ad4:	2e00      	cmp	r6, #0
 8014ad6:	d04d      	beq.n	8014b74 <_printf_i+0x1b4>
 8014ad8:	4616      	mov	r6, r2
 8014ada:	fbb5 f1f3 	udiv	r1, r5, r3
 8014ade:	fb03 5711 	mls	r7, r3, r1, r5
 8014ae2:	5dc7      	ldrb	r7, [r0, r7]
 8014ae4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014ae8:	462f      	mov	r7, r5
 8014aea:	42bb      	cmp	r3, r7
 8014aec:	460d      	mov	r5, r1
 8014aee:	d9f4      	bls.n	8014ada <_printf_i+0x11a>
 8014af0:	2b08      	cmp	r3, #8
 8014af2:	d10b      	bne.n	8014b0c <_printf_i+0x14c>
 8014af4:	6823      	ldr	r3, [r4, #0]
 8014af6:	07df      	lsls	r7, r3, #31
 8014af8:	d508      	bpl.n	8014b0c <_printf_i+0x14c>
 8014afa:	6923      	ldr	r3, [r4, #16]
 8014afc:	6861      	ldr	r1, [r4, #4]
 8014afe:	4299      	cmp	r1, r3
 8014b00:	bfde      	ittt	le
 8014b02:	2330      	movle	r3, #48	; 0x30
 8014b04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014b08:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8014b0c:	1b92      	subs	r2, r2, r6
 8014b0e:	6122      	str	r2, [r4, #16]
 8014b10:	f8cd a000 	str.w	sl, [sp]
 8014b14:	464b      	mov	r3, r9
 8014b16:	aa03      	add	r2, sp, #12
 8014b18:	4621      	mov	r1, r4
 8014b1a:	4640      	mov	r0, r8
 8014b1c:	f7ff fee2 	bl	80148e4 <_printf_common>
 8014b20:	3001      	adds	r0, #1
 8014b22:	d14c      	bne.n	8014bbe <_printf_i+0x1fe>
 8014b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b28:	b004      	add	sp, #16
 8014b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b2e:	4835      	ldr	r0, [pc, #212]	; (8014c04 <_printf_i+0x244>)
 8014b30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014b34:	6823      	ldr	r3, [r4, #0]
 8014b36:	680e      	ldr	r6, [r1, #0]
 8014b38:	061f      	lsls	r7, r3, #24
 8014b3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8014b3e:	600e      	str	r6, [r1, #0]
 8014b40:	d514      	bpl.n	8014b6c <_printf_i+0x1ac>
 8014b42:	07d9      	lsls	r1, r3, #31
 8014b44:	bf44      	itt	mi
 8014b46:	f043 0320 	orrmi.w	r3, r3, #32
 8014b4a:	6023      	strmi	r3, [r4, #0]
 8014b4c:	b91d      	cbnz	r5, 8014b56 <_printf_i+0x196>
 8014b4e:	6823      	ldr	r3, [r4, #0]
 8014b50:	f023 0320 	bic.w	r3, r3, #32
 8014b54:	6023      	str	r3, [r4, #0]
 8014b56:	2310      	movs	r3, #16
 8014b58:	e7b0      	b.n	8014abc <_printf_i+0xfc>
 8014b5a:	6823      	ldr	r3, [r4, #0]
 8014b5c:	f043 0320 	orr.w	r3, r3, #32
 8014b60:	6023      	str	r3, [r4, #0]
 8014b62:	2378      	movs	r3, #120	; 0x78
 8014b64:	4828      	ldr	r0, [pc, #160]	; (8014c08 <_printf_i+0x248>)
 8014b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014b6a:	e7e3      	b.n	8014b34 <_printf_i+0x174>
 8014b6c:	065e      	lsls	r6, r3, #25
 8014b6e:	bf48      	it	mi
 8014b70:	b2ad      	uxthmi	r5, r5
 8014b72:	e7e6      	b.n	8014b42 <_printf_i+0x182>
 8014b74:	4616      	mov	r6, r2
 8014b76:	e7bb      	b.n	8014af0 <_printf_i+0x130>
 8014b78:	680b      	ldr	r3, [r1, #0]
 8014b7a:	6826      	ldr	r6, [r4, #0]
 8014b7c:	6960      	ldr	r0, [r4, #20]
 8014b7e:	1d1d      	adds	r5, r3, #4
 8014b80:	600d      	str	r5, [r1, #0]
 8014b82:	0635      	lsls	r5, r6, #24
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	d501      	bpl.n	8014b8c <_printf_i+0x1cc>
 8014b88:	6018      	str	r0, [r3, #0]
 8014b8a:	e002      	b.n	8014b92 <_printf_i+0x1d2>
 8014b8c:	0671      	lsls	r1, r6, #25
 8014b8e:	d5fb      	bpl.n	8014b88 <_printf_i+0x1c8>
 8014b90:	8018      	strh	r0, [r3, #0]
 8014b92:	2300      	movs	r3, #0
 8014b94:	6123      	str	r3, [r4, #16]
 8014b96:	4616      	mov	r6, r2
 8014b98:	e7ba      	b.n	8014b10 <_printf_i+0x150>
 8014b9a:	680b      	ldr	r3, [r1, #0]
 8014b9c:	1d1a      	adds	r2, r3, #4
 8014b9e:	600a      	str	r2, [r1, #0]
 8014ba0:	681e      	ldr	r6, [r3, #0]
 8014ba2:	6862      	ldr	r2, [r4, #4]
 8014ba4:	2100      	movs	r1, #0
 8014ba6:	4630      	mov	r0, r6
 8014ba8:	f7eb fb2a 	bl	8000200 <memchr>
 8014bac:	b108      	cbz	r0, 8014bb2 <_printf_i+0x1f2>
 8014bae:	1b80      	subs	r0, r0, r6
 8014bb0:	6060      	str	r0, [r4, #4]
 8014bb2:	6863      	ldr	r3, [r4, #4]
 8014bb4:	6123      	str	r3, [r4, #16]
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014bbc:	e7a8      	b.n	8014b10 <_printf_i+0x150>
 8014bbe:	6923      	ldr	r3, [r4, #16]
 8014bc0:	4632      	mov	r2, r6
 8014bc2:	4649      	mov	r1, r9
 8014bc4:	4640      	mov	r0, r8
 8014bc6:	47d0      	blx	sl
 8014bc8:	3001      	adds	r0, #1
 8014bca:	d0ab      	beq.n	8014b24 <_printf_i+0x164>
 8014bcc:	6823      	ldr	r3, [r4, #0]
 8014bce:	079b      	lsls	r3, r3, #30
 8014bd0:	d413      	bmi.n	8014bfa <_printf_i+0x23a>
 8014bd2:	68e0      	ldr	r0, [r4, #12]
 8014bd4:	9b03      	ldr	r3, [sp, #12]
 8014bd6:	4298      	cmp	r0, r3
 8014bd8:	bfb8      	it	lt
 8014bda:	4618      	movlt	r0, r3
 8014bdc:	e7a4      	b.n	8014b28 <_printf_i+0x168>
 8014bde:	2301      	movs	r3, #1
 8014be0:	4632      	mov	r2, r6
 8014be2:	4649      	mov	r1, r9
 8014be4:	4640      	mov	r0, r8
 8014be6:	47d0      	blx	sl
 8014be8:	3001      	adds	r0, #1
 8014bea:	d09b      	beq.n	8014b24 <_printf_i+0x164>
 8014bec:	3501      	adds	r5, #1
 8014bee:	68e3      	ldr	r3, [r4, #12]
 8014bf0:	9903      	ldr	r1, [sp, #12]
 8014bf2:	1a5b      	subs	r3, r3, r1
 8014bf4:	42ab      	cmp	r3, r5
 8014bf6:	dcf2      	bgt.n	8014bde <_printf_i+0x21e>
 8014bf8:	e7eb      	b.n	8014bd2 <_printf_i+0x212>
 8014bfa:	2500      	movs	r5, #0
 8014bfc:	f104 0619 	add.w	r6, r4, #25
 8014c00:	e7f5      	b.n	8014bee <_printf_i+0x22e>
 8014c02:	bf00      	nop
 8014c04:	08018ef6 	.word	0x08018ef6
 8014c08:	08018f07 	.word	0x08018f07

08014c0c <_scanf_float>:
 8014c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c10:	b087      	sub	sp, #28
 8014c12:	4617      	mov	r7, r2
 8014c14:	9303      	str	r3, [sp, #12]
 8014c16:	688b      	ldr	r3, [r1, #8]
 8014c18:	1e5a      	subs	r2, r3, #1
 8014c1a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014c1e:	bf83      	ittte	hi
 8014c20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014c24:	195b      	addhi	r3, r3, r5
 8014c26:	9302      	strhi	r3, [sp, #8]
 8014c28:	2300      	movls	r3, #0
 8014c2a:	bf86      	itte	hi
 8014c2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014c30:	608b      	strhi	r3, [r1, #8]
 8014c32:	9302      	strls	r3, [sp, #8]
 8014c34:	680b      	ldr	r3, [r1, #0]
 8014c36:	468b      	mov	fp, r1
 8014c38:	2500      	movs	r5, #0
 8014c3a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014c3e:	f84b 3b1c 	str.w	r3, [fp], #28
 8014c42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014c46:	4680      	mov	r8, r0
 8014c48:	460c      	mov	r4, r1
 8014c4a:	465e      	mov	r6, fp
 8014c4c:	46aa      	mov	sl, r5
 8014c4e:	46a9      	mov	r9, r5
 8014c50:	9501      	str	r5, [sp, #4]
 8014c52:	68a2      	ldr	r2, [r4, #8]
 8014c54:	b152      	cbz	r2, 8014c6c <_scanf_float+0x60>
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	781b      	ldrb	r3, [r3, #0]
 8014c5a:	2b4e      	cmp	r3, #78	; 0x4e
 8014c5c:	d864      	bhi.n	8014d28 <_scanf_float+0x11c>
 8014c5e:	2b40      	cmp	r3, #64	; 0x40
 8014c60:	d83c      	bhi.n	8014cdc <_scanf_float+0xd0>
 8014c62:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8014c66:	b2c8      	uxtb	r0, r1
 8014c68:	280e      	cmp	r0, #14
 8014c6a:	d93a      	bls.n	8014ce2 <_scanf_float+0xd6>
 8014c6c:	f1b9 0f00 	cmp.w	r9, #0
 8014c70:	d003      	beq.n	8014c7a <_scanf_float+0x6e>
 8014c72:	6823      	ldr	r3, [r4, #0]
 8014c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014c78:	6023      	str	r3, [r4, #0]
 8014c7a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8014c7e:	f1ba 0f01 	cmp.w	sl, #1
 8014c82:	f200 8113 	bhi.w	8014eac <_scanf_float+0x2a0>
 8014c86:	455e      	cmp	r6, fp
 8014c88:	f200 8105 	bhi.w	8014e96 <_scanf_float+0x28a>
 8014c8c:	2501      	movs	r5, #1
 8014c8e:	4628      	mov	r0, r5
 8014c90:	b007      	add	sp, #28
 8014c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c96:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8014c9a:	2a0d      	cmp	r2, #13
 8014c9c:	d8e6      	bhi.n	8014c6c <_scanf_float+0x60>
 8014c9e:	a101      	add	r1, pc, #4	; (adr r1, 8014ca4 <_scanf_float+0x98>)
 8014ca0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014ca4:	08014de3 	.word	0x08014de3
 8014ca8:	08014c6d 	.word	0x08014c6d
 8014cac:	08014c6d 	.word	0x08014c6d
 8014cb0:	08014c6d 	.word	0x08014c6d
 8014cb4:	08014e43 	.word	0x08014e43
 8014cb8:	08014e1b 	.word	0x08014e1b
 8014cbc:	08014c6d 	.word	0x08014c6d
 8014cc0:	08014c6d 	.word	0x08014c6d
 8014cc4:	08014df1 	.word	0x08014df1
 8014cc8:	08014c6d 	.word	0x08014c6d
 8014ccc:	08014c6d 	.word	0x08014c6d
 8014cd0:	08014c6d 	.word	0x08014c6d
 8014cd4:	08014c6d 	.word	0x08014c6d
 8014cd8:	08014da9 	.word	0x08014da9
 8014cdc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014ce0:	e7db      	b.n	8014c9a <_scanf_float+0x8e>
 8014ce2:	290e      	cmp	r1, #14
 8014ce4:	d8c2      	bhi.n	8014c6c <_scanf_float+0x60>
 8014ce6:	a001      	add	r0, pc, #4	; (adr r0, 8014cec <_scanf_float+0xe0>)
 8014ce8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014cec:	08014d9b 	.word	0x08014d9b
 8014cf0:	08014c6d 	.word	0x08014c6d
 8014cf4:	08014d9b 	.word	0x08014d9b
 8014cf8:	08014e2f 	.word	0x08014e2f
 8014cfc:	08014c6d 	.word	0x08014c6d
 8014d00:	08014d49 	.word	0x08014d49
 8014d04:	08014d85 	.word	0x08014d85
 8014d08:	08014d85 	.word	0x08014d85
 8014d0c:	08014d85 	.word	0x08014d85
 8014d10:	08014d85 	.word	0x08014d85
 8014d14:	08014d85 	.word	0x08014d85
 8014d18:	08014d85 	.word	0x08014d85
 8014d1c:	08014d85 	.word	0x08014d85
 8014d20:	08014d85 	.word	0x08014d85
 8014d24:	08014d85 	.word	0x08014d85
 8014d28:	2b6e      	cmp	r3, #110	; 0x6e
 8014d2a:	d809      	bhi.n	8014d40 <_scanf_float+0x134>
 8014d2c:	2b60      	cmp	r3, #96	; 0x60
 8014d2e:	d8b2      	bhi.n	8014c96 <_scanf_float+0x8a>
 8014d30:	2b54      	cmp	r3, #84	; 0x54
 8014d32:	d077      	beq.n	8014e24 <_scanf_float+0x218>
 8014d34:	2b59      	cmp	r3, #89	; 0x59
 8014d36:	d199      	bne.n	8014c6c <_scanf_float+0x60>
 8014d38:	2d07      	cmp	r5, #7
 8014d3a:	d197      	bne.n	8014c6c <_scanf_float+0x60>
 8014d3c:	2508      	movs	r5, #8
 8014d3e:	e029      	b.n	8014d94 <_scanf_float+0x188>
 8014d40:	2b74      	cmp	r3, #116	; 0x74
 8014d42:	d06f      	beq.n	8014e24 <_scanf_float+0x218>
 8014d44:	2b79      	cmp	r3, #121	; 0x79
 8014d46:	e7f6      	b.n	8014d36 <_scanf_float+0x12a>
 8014d48:	6821      	ldr	r1, [r4, #0]
 8014d4a:	05c8      	lsls	r0, r1, #23
 8014d4c:	d51a      	bpl.n	8014d84 <_scanf_float+0x178>
 8014d4e:	9b02      	ldr	r3, [sp, #8]
 8014d50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014d54:	6021      	str	r1, [r4, #0]
 8014d56:	f109 0901 	add.w	r9, r9, #1
 8014d5a:	b11b      	cbz	r3, 8014d64 <_scanf_float+0x158>
 8014d5c:	3b01      	subs	r3, #1
 8014d5e:	3201      	adds	r2, #1
 8014d60:	9302      	str	r3, [sp, #8]
 8014d62:	60a2      	str	r2, [r4, #8]
 8014d64:	68a3      	ldr	r3, [r4, #8]
 8014d66:	3b01      	subs	r3, #1
 8014d68:	60a3      	str	r3, [r4, #8]
 8014d6a:	6923      	ldr	r3, [r4, #16]
 8014d6c:	3301      	adds	r3, #1
 8014d6e:	6123      	str	r3, [r4, #16]
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	3b01      	subs	r3, #1
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	607b      	str	r3, [r7, #4]
 8014d78:	f340 8084 	ble.w	8014e84 <_scanf_float+0x278>
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	3301      	adds	r3, #1
 8014d80:	603b      	str	r3, [r7, #0]
 8014d82:	e766      	b.n	8014c52 <_scanf_float+0x46>
 8014d84:	eb1a 0f05 	cmn.w	sl, r5
 8014d88:	f47f af70 	bne.w	8014c6c <_scanf_float+0x60>
 8014d8c:	6822      	ldr	r2, [r4, #0]
 8014d8e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8014d92:	6022      	str	r2, [r4, #0]
 8014d94:	f806 3b01 	strb.w	r3, [r6], #1
 8014d98:	e7e4      	b.n	8014d64 <_scanf_float+0x158>
 8014d9a:	6822      	ldr	r2, [r4, #0]
 8014d9c:	0610      	lsls	r0, r2, #24
 8014d9e:	f57f af65 	bpl.w	8014c6c <_scanf_float+0x60>
 8014da2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014da6:	e7f4      	b.n	8014d92 <_scanf_float+0x186>
 8014da8:	f1ba 0f00 	cmp.w	sl, #0
 8014dac:	d10e      	bne.n	8014dcc <_scanf_float+0x1c0>
 8014dae:	f1b9 0f00 	cmp.w	r9, #0
 8014db2:	d10e      	bne.n	8014dd2 <_scanf_float+0x1c6>
 8014db4:	6822      	ldr	r2, [r4, #0]
 8014db6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014dba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014dbe:	d108      	bne.n	8014dd2 <_scanf_float+0x1c6>
 8014dc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014dc4:	6022      	str	r2, [r4, #0]
 8014dc6:	f04f 0a01 	mov.w	sl, #1
 8014dca:	e7e3      	b.n	8014d94 <_scanf_float+0x188>
 8014dcc:	f1ba 0f02 	cmp.w	sl, #2
 8014dd0:	d055      	beq.n	8014e7e <_scanf_float+0x272>
 8014dd2:	2d01      	cmp	r5, #1
 8014dd4:	d002      	beq.n	8014ddc <_scanf_float+0x1d0>
 8014dd6:	2d04      	cmp	r5, #4
 8014dd8:	f47f af48 	bne.w	8014c6c <_scanf_float+0x60>
 8014ddc:	3501      	adds	r5, #1
 8014dde:	b2ed      	uxtb	r5, r5
 8014de0:	e7d8      	b.n	8014d94 <_scanf_float+0x188>
 8014de2:	f1ba 0f01 	cmp.w	sl, #1
 8014de6:	f47f af41 	bne.w	8014c6c <_scanf_float+0x60>
 8014dea:	f04f 0a02 	mov.w	sl, #2
 8014dee:	e7d1      	b.n	8014d94 <_scanf_float+0x188>
 8014df0:	b97d      	cbnz	r5, 8014e12 <_scanf_float+0x206>
 8014df2:	f1b9 0f00 	cmp.w	r9, #0
 8014df6:	f47f af3c 	bne.w	8014c72 <_scanf_float+0x66>
 8014dfa:	6822      	ldr	r2, [r4, #0]
 8014dfc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014e00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014e04:	f47f af39 	bne.w	8014c7a <_scanf_float+0x6e>
 8014e08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014e0c:	6022      	str	r2, [r4, #0]
 8014e0e:	2501      	movs	r5, #1
 8014e10:	e7c0      	b.n	8014d94 <_scanf_float+0x188>
 8014e12:	2d03      	cmp	r5, #3
 8014e14:	d0e2      	beq.n	8014ddc <_scanf_float+0x1d0>
 8014e16:	2d05      	cmp	r5, #5
 8014e18:	e7de      	b.n	8014dd8 <_scanf_float+0x1cc>
 8014e1a:	2d02      	cmp	r5, #2
 8014e1c:	f47f af26 	bne.w	8014c6c <_scanf_float+0x60>
 8014e20:	2503      	movs	r5, #3
 8014e22:	e7b7      	b.n	8014d94 <_scanf_float+0x188>
 8014e24:	2d06      	cmp	r5, #6
 8014e26:	f47f af21 	bne.w	8014c6c <_scanf_float+0x60>
 8014e2a:	2507      	movs	r5, #7
 8014e2c:	e7b2      	b.n	8014d94 <_scanf_float+0x188>
 8014e2e:	6822      	ldr	r2, [r4, #0]
 8014e30:	0591      	lsls	r1, r2, #22
 8014e32:	f57f af1b 	bpl.w	8014c6c <_scanf_float+0x60>
 8014e36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8014e3a:	6022      	str	r2, [r4, #0]
 8014e3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8014e40:	e7a8      	b.n	8014d94 <_scanf_float+0x188>
 8014e42:	6822      	ldr	r2, [r4, #0]
 8014e44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8014e48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8014e4c:	d006      	beq.n	8014e5c <_scanf_float+0x250>
 8014e4e:	0550      	lsls	r0, r2, #21
 8014e50:	f57f af0c 	bpl.w	8014c6c <_scanf_float+0x60>
 8014e54:	f1b9 0f00 	cmp.w	r9, #0
 8014e58:	f43f af0f 	beq.w	8014c7a <_scanf_float+0x6e>
 8014e5c:	0591      	lsls	r1, r2, #22
 8014e5e:	bf58      	it	pl
 8014e60:	9901      	ldrpl	r1, [sp, #4]
 8014e62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014e66:	bf58      	it	pl
 8014e68:	eba9 0101 	subpl.w	r1, r9, r1
 8014e6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8014e70:	bf58      	it	pl
 8014e72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014e76:	6022      	str	r2, [r4, #0]
 8014e78:	f04f 0900 	mov.w	r9, #0
 8014e7c:	e78a      	b.n	8014d94 <_scanf_float+0x188>
 8014e7e:	f04f 0a03 	mov.w	sl, #3
 8014e82:	e787      	b.n	8014d94 <_scanf_float+0x188>
 8014e84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014e88:	4639      	mov	r1, r7
 8014e8a:	4640      	mov	r0, r8
 8014e8c:	4798      	blx	r3
 8014e8e:	2800      	cmp	r0, #0
 8014e90:	f43f aedf 	beq.w	8014c52 <_scanf_float+0x46>
 8014e94:	e6ea      	b.n	8014c6c <_scanf_float+0x60>
 8014e96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014e9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014e9e:	463a      	mov	r2, r7
 8014ea0:	4640      	mov	r0, r8
 8014ea2:	4798      	blx	r3
 8014ea4:	6923      	ldr	r3, [r4, #16]
 8014ea6:	3b01      	subs	r3, #1
 8014ea8:	6123      	str	r3, [r4, #16]
 8014eaa:	e6ec      	b.n	8014c86 <_scanf_float+0x7a>
 8014eac:	1e6b      	subs	r3, r5, #1
 8014eae:	2b06      	cmp	r3, #6
 8014eb0:	d825      	bhi.n	8014efe <_scanf_float+0x2f2>
 8014eb2:	2d02      	cmp	r5, #2
 8014eb4:	d836      	bhi.n	8014f24 <_scanf_float+0x318>
 8014eb6:	455e      	cmp	r6, fp
 8014eb8:	f67f aee8 	bls.w	8014c8c <_scanf_float+0x80>
 8014ebc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014ec0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014ec4:	463a      	mov	r2, r7
 8014ec6:	4640      	mov	r0, r8
 8014ec8:	4798      	blx	r3
 8014eca:	6923      	ldr	r3, [r4, #16]
 8014ecc:	3b01      	subs	r3, #1
 8014ece:	6123      	str	r3, [r4, #16]
 8014ed0:	e7f1      	b.n	8014eb6 <_scanf_float+0x2aa>
 8014ed2:	9802      	ldr	r0, [sp, #8]
 8014ed4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014ed8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8014edc:	9002      	str	r0, [sp, #8]
 8014ede:	463a      	mov	r2, r7
 8014ee0:	4640      	mov	r0, r8
 8014ee2:	4798      	blx	r3
 8014ee4:	6923      	ldr	r3, [r4, #16]
 8014ee6:	3b01      	subs	r3, #1
 8014ee8:	6123      	str	r3, [r4, #16]
 8014eea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8014eee:	fa5f fa8a 	uxtb.w	sl, sl
 8014ef2:	f1ba 0f02 	cmp.w	sl, #2
 8014ef6:	d1ec      	bne.n	8014ed2 <_scanf_float+0x2c6>
 8014ef8:	3d03      	subs	r5, #3
 8014efa:	b2ed      	uxtb	r5, r5
 8014efc:	1b76      	subs	r6, r6, r5
 8014efe:	6823      	ldr	r3, [r4, #0]
 8014f00:	05da      	lsls	r2, r3, #23
 8014f02:	d52f      	bpl.n	8014f64 <_scanf_float+0x358>
 8014f04:	055b      	lsls	r3, r3, #21
 8014f06:	d510      	bpl.n	8014f2a <_scanf_float+0x31e>
 8014f08:	455e      	cmp	r6, fp
 8014f0a:	f67f aebf 	bls.w	8014c8c <_scanf_float+0x80>
 8014f0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014f12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014f16:	463a      	mov	r2, r7
 8014f18:	4640      	mov	r0, r8
 8014f1a:	4798      	blx	r3
 8014f1c:	6923      	ldr	r3, [r4, #16]
 8014f1e:	3b01      	subs	r3, #1
 8014f20:	6123      	str	r3, [r4, #16]
 8014f22:	e7f1      	b.n	8014f08 <_scanf_float+0x2fc>
 8014f24:	46aa      	mov	sl, r5
 8014f26:	9602      	str	r6, [sp, #8]
 8014f28:	e7df      	b.n	8014eea <_scanf_float+0x2de>
 8014f2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014f2e:	6923      	ldr	r3, [r4, #16]
 8014f30:	2965      	cmp	r1, #101	; 0x65
 8014f32:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8014f36:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8014f3a:	6123      	str	r3, [r4, #16]
 8014f3c:	d00c      	beq.n	8014f58 <_scanf_float+0x34c>
 8014f3e:	2945      	cmp	r1, #69	; 0x45
 8014f40:	d00a      	beq.n	8014f58 <_scanf_float+0x34c>
 8014f42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014f46:	463a      	mov	r2, r7
 8014f48:	4640      	mov	r0, r8
 8014f4a:	4798      	blx	r3
 8014f4c:	6923      	ldr	r3, [r4, #16]
 8014f4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014f52:	3b01      	subs	r3, #1
 8014f54:	1eb5      	subs	r5, r6, #2
 8014f56:	6123      	str	r3, [r4, #16]
 8014f58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014f5c:	463a      	mov	r2, r7
 8014f5e:	4640      	mov	r0, r8
 8014f60:	4798      	blx	r3
 8014f62:	462e      	mov	r6, r5
 8014f64:	6825      	ldr	r5, [r4, #0]
 8014f66:	f015 0510 	ands.w	r5, r5, #16
 8014f6a:	d158      	bne.n	801501e <_scanf_float+0x412>
 8014f6c:	7035      	strb	r5, [r6, #0]
 8014f6e:	6823      	ldr	r3, [r4, #0]
 8014f70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014f78:	d11c      	bne.n	8014fb4 <_scanf_float+0x3a8>
 8014f7a:	9b01      	ldr	r3, [sp, #4]
 8014f7c:	454b      	cmp	r3, r9
 8014f7e:	eba3 0209 	sub.w	r2, r3, r9
 8014f82:	d124      	bne.n	8014fce <_scanf_float+0x3c2>
 8014f84:	2200      	movs	r2, #0
 8014f86:	4659      	mov	r1, fp
 8014f88:	4640      	mov	r0, r8
 8014f8a:	f000 ff73 	bl	8015e74 <_strtod_r>
 8014f8e:	9b03      	ldr	r3, [sp, #12]
 8014f90:	6821      	ldr	r1, [r4, #0]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	f011 0f02 	tst.w	r1, #2
 8014f98:	ec57 6b10 	vmov	r6, r7, d0
 8014f9c:	f103 0204 	add.w	r2, r3, #4
 8014fa0:	d020      	beq.n	8014fe4 <_scanf_float+0x3d8>
 8014fa2:	9903      	ldr	r1, [sp, #12]
 8014fa4:	600a      	str	r2, [r1, #0]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	e9c3 6700 	strd	r6, r7, [r3]
 8014fac:	68e3      	ldr	r3, [r4, #12]
 8014fae:	3301      	adds	r3, #1
 8014fb0:	60e3      	str	r3, [r4, #12]
 8014fb2:	e66c      	b.n	8014c8e <_scanf_float+0x82>
 8014fb4:	9b04      	ldr	r3, [sp, #16]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d0e4      	beq.n	8014f84 <_scanf_float+0x378>
 8014fba:	9905      	ldr	r1, [sp, #20]
 8014fbc:	230a      	movs	r3, #10
 8014fbe:	462a      	mov	r2, r5
 8014fc0:	3101      	adds	r1, #1
 8014fc2:	4640      	mov	r0, r8
 8014fc4:	f000 ffe0 	bl	8015f88 <_strtol_r>
 8014fc8:	9b04      	ldr	r3, [sp, #16]
 8014fca:	9e05      	ldr	r6, [sp, #20]
 8014fcc:	1ac2      	subs	r2, r0, r3
 8014fce:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014fd2:	429e      	cmp	r6, r3
 8014fd4:	bf28      	it	cs
 8014fd6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8014fda:	4912      	ldr	r1, [pc, #72]	; (8015024 <_scanf_float+0x418>)
 8014fdc:	4630      	mov	r0, r6
 8014fde:	f000 f8a5 	bl	801512c <siprintf>
 8014fe2:	e7cf      	b.n	8014f84 <_scanf_float+0x378>
 8014fe4:	f011 0f04 	tst.w	r1, #4
 8014fe8:	9903      	ldr	r1, [sp, #12]
 8014fea:	600a      	str	r2, [r1, #0]
 8014fec:	d1db      	bne.n	8014fa6 <_scanf_float+0x39a>
 8014fee:	f8d3 8000 	ldr.w	r8, [r3]
 8014ff2:	ee10 2a10 	vmov	r2, s0
 8014ff6:	ee10 0a10 	vmov	r0, s0
 8014ffa:	463b      	mov	r3, r7
 8014ffc:	4639      	mov	r1, r7
 8014ffe:	f7eb fda5 	bl	8000b4c <__aeabi_dcmpun>
 8015002:	b128      	cbz	r0, 8015010 <_scanf_float+0x404>
 8015004:	4808      	ldr	r0, [pc, #32]	; (8015028 <_scanf_float+0x41c>)
 8015006:	f000 f88b 	bl	8015120 <nanf>
 801500a:	ed88 0a00 	vstr	s0, [r8]
 801500e:	e7cd      	b.n	8014fac <_scanf_float+0x3a0>
 8015010:	4630      	mov	r0, r6
 8015012:	4639      	mov	r1, r7
 8015014:	f7eb fdf8 	bl	8000c08 <__aeabi_d2f>
 8015018:	f8c8 0000 	str.w	r0, [r8]
 801501c:	e7c6      	b.n	8014fac <_scanf_float+0x3a0>
 801501e:	2500      	movs	r5, #0
 8015020:	e635      	b.n	8014c8e <_scanf_float+0x82>
 8015022:	bf00      	nop
 8015024:	08018f18 	.word	0x08018f18
 8015028:	08019230 	.word	0x08019230

0801502c <cleanup_glue>:
 801502c:	b538      	push	{r3, r4, r5, lr}
 801502e:	460c      	mov	r4, r1
 8015030:	6809      	ldr	r1, [r1, #0]
 8015032:	4605      	mov	r5, r0
 8015034:	b109      	cbz	r1, 801503a <cleanup_glue+0xe>
 8015036:	f7ff fff9 	bl	801502c <cleanup_glue>
 801503a:	4621      	mov	r1, r4
 801503c:	4628      	mov	r0, r5
 801503e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015042:	f7ff b8cf 	b.w	80141e4 <_free_r>
	...

08015048 <_reclaim_reent>:
 8015048:	4b2c      	ldr	r3, [pc, #176]	; (80150fc <_reclaim_reent+0xb4>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	4283      	cmp	r3, r0
 801504e:	b570      	push	{r4, r5, r6, lr}
 8015050:	4604      	mov	r4, r0
 8015052:	d051      	beq.n	80150f8 <_reclaim_reent+0xb0>
 8015054:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015056:	b143      	cbz	r3, 801506a <_reclaim_reent+0x22>
 8015058:	68db      	ldr	r3, [r3, #12]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d14a      	bne.n	80150f4 <_reclaim_reent+0xac>
 801505e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015060:	6819      	ldr	r1, [r3, #0]
 8015062:	b111      	cbz	r1, 801506a <_reclaim_reent+0x22>
 8015064:	4620      	mov	r0, r4
 8015066:	f7ff f8bd 	bl	80141e4 <_free_r>
 801506a:	6961      	ldr	r1, [r4, #20]
 801506c:	b111      	cbz	r1, 8015074 <_reclaim_reent+0x2c>
 801506e:	4620      	mov	r0, r4
 8015070:	f7ff f8b8 	bl	80141e4 <_free_r>
 8015074:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015076:	b111      	cbz	r1, 801507e <_reclaim_reent+0x36>
 8015078:	4620      	mov	r0, r4
 801507a:	f7ff f8b3 	bl	80141e4 <_free_r>
 801507e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015080:	b111      	cbz	r1, 8015088 <_reclaim_reent+0x40>
 8015082:	4620      	mov	r0, r4
 8015084:	f7ff f8ae 	bl	80141e4 <_free_r>
 8015088:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801508a:	b111      	cbz	r1, 8015092 <_reclaim_reent+0x4a>
 801508c:	4620      	mov	r0, r4
 801508e:	f7ff f8a9 	bl	80141e4 <_free_r>
 8015092:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015094:	b111      	cbz	r1, 801509c <_reclaim_reent+0x54>
 8015096:	4620      	mov	r0, r4
 8015098:	f7ff f8a4 	bl	80141e4 <_free_r>
 801509c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801509e:	b111      	cbz	r1, 80150a6 <_reclaim_reent+0x5e>
 80150a0:	4620      	mov	r0, r4
 80150a2:	f7ff f89f 	bl	80141e4 <_free_r>
 80150a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80150a8:	b111      	cbz	r1, 80150b0 <_reclaim_reent+0x68>
 80150aa:	4620      	mov	r0, r4
 80150ac:	f7ff f89a 	bl	80141e4 <_free_r>
 80150b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80150b2:	b111      	cbz	r1, 80150ba <_reclaim_reent+0x72>
 80150b4:	4620      	mov	r0, r4
 80150b6:	f7ff f895 	bl	80141e4 <_free_r>
 80150ba:	69a3      	ldr	r3, [r4, #24]
 80150bc:	b1e3      	cbz	r3, 80150f8 <_reclaim_reent+0xb0>
 80150be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80150c0:	4620      	mov	r0, r4
 80150c2:	4798      	blx	r3
 80150c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80150c6:	b1b9      	cbz	r1, 80150f8 <_reclaim_reent+0xb0>
 80150c8:	4620      	mov	r0, r4
 80150ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150ce:	f7ff bfad 	b.w	801502c <cleanup_glue>
 80150d2:	5949      	ldr	r1, [r1, r5]
 80150d4:	b941      	cbnz	r1, 80150e8 <_reclaim_reent+0xa0>
 80150d6:	3504      	adds	r5, #4
 80150d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150da:	2d80      	cmp	r5, #128	; 0x80
 80150dc:	68d9      	ldr	r1, [r3, #12]
 80150de:	d1f8      	bne.n	80150d2 <_reclaim_reent+0x8a>
 80150e0:	4620      	mov	r0, r4
 80150e2:	f7ff f87f 	bl	80141e4 <_free_r>
 80150e6:	e7ba      	b.n	801505e <_reclaim_reent+0x16>
 80150e8:	680e      	ldr	r6, [r1, #0]
 80150ea:	4620      	mov	r0, r4
 80150ec:	f7ff f87a 	bl	80141e4 <_free_r>
 80150f0:	4631      	mov	r1, r6
 80150f2:	e7ef      	b.n	80150d4 <_reclaim_reent+0x8c>
 80150f4:	2500      	movs	r5, #0
 80150f6:	e7ef      	b.n	80150d8 <_reclaim_reent+0x90>
 80150f8:	bd70      	pop	{r4, r5, r6, pc}
 80150fa:	bf00      	nop
 80150fc:	200001b8 	.word	0x200001b8

08015100 <_sbrk_r>:
 8015100:	b538      	push	{r3, r4, r5, lr}
 8015102:	4d06      	ldr	r5, [pc, #24]	; (801511c <_sbrk_r+0x1c>)
 8015104:	2300      	movs	r3, #0
 8015106:	4604      	mov	r4, r0
 8015108:	4608      	mov	r0, r1
 801510a:	602b      	str	r3, [r5, #0]
 801510c:	f7ef f804 	bl	8004118 <_sbrk>
 8015110:	1c43      	adds	r3, r0, #1
 8015112:	d102      	bne.n	801511a <_sbrk_r+0x1a>
 8015114:	682b      	ldr	r3, [r5, #0]
 8015116:	b103      	cbz	r3, 801511a <_sbrk_r+0x1a>
 8015118:	6023      	str	r3, [r4, #0]
 801511a:	bd38      	pop	{r3, r4, r5, pc}
 801511c:	2000cc08 	.word	0x2000cc08

08015120 <nanf>:
 8015120:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015128 <nanf+0x8>
 8015124:	4770      	bx	lr
 8015126:	bf00      	nop
 8015128:	7fc00000 	.word	0x7fc00000

0801512c <siprintf>:
 801512c:	b40e      	push	{r1, r2, r3}
 801512e:	b500      	push	{lr}
 8015130:	b09c      	sub	sp, #112	; 0x70
 8015132:	ab1d      	add	r3, sp, #116	; 0x74
 8015134:	9002      	str	r0, [sp, #8]
 8015136:	9006      	str	r0, [sp, #24]
 8015138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801513c:	4809      	ldr	r0, [pc, #36]	; (8015164 <siprintf+0x38>)
 801513e:	9107      	str	r1, [sp, #28]
 8015140:	9104      	str	r1, [sp, #16]
 8015142:	4909      	ldr	r1, [pc, #36]	; (8015168 <siprintf+0x3c>)
 8015144:	f853 2b04 	ldr.w	r2, [r3], #4
 8015148:	9105      	str	r1, [sp, #20]
 801514a:	6800      	ldr	r0, [r0, #0]
 801514c:	9301      	str	r3, [sp, #4]
 801514e:	a902      	add	r1, sp, #8
 8015150:	f002 ff86 	bl	8018060 <_svfiprintf_r>
 8015154:	9b02      	ldr	r3, [sp, #8]
 8015156:	2200      	movs	r2, #0
 8015158:	701a      	strb	r2, [r3, #0]
 801515a:	b01c      	add	sp, #112	; 0x70
 801515c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015160:	b003      	add	sp, #12
 8015162:	4770      	bx	lr
 8015164:	200001b8 	.word	0x200001b8
 8015168:	ffff0208 	.word	0xffff0208

0801516c <__sread>:
 801516c:	b510      	push	{r4, lr}
 801516e:	460c      	mov	r4, r1
 8015170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015174:	f003 f874 	bl	8018260 <_read_r>
 8015178:	2800      	cmp	r0, #0
 801517a:	bfab      	itete	ge
 801517c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801517e:	89a3      	ldrhlt	r3, [r4, #12]
 8015180:	181b      	addge	r3, r3, r0
 8015182:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015186:	bfac      	ite	ge
 8015188:	6563      	strge	r3, [r4, #84]	; 0x54
 801518a:	81a3      	strhlt	r3, [r4, #12]
 801518c:	bd10      	pop	{r4, pc}

0801518e <__swrite>:
 801518e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015192:	461f      	mov	r7, r3
 8015194:	898b      	ldrh	r3, [r1, #12]
 8015196:	05db      	lsls	r3, r3, #23
 8015198:	4605      	mov	r5, r0
 801519a:	460c      	mov	r4, r1
 801519c:	4616      	mov	r6, r2
 801519e:	d505      	bpl.n	80151ac <__swrite+0x1e>
 80151a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151a4:	2302      	movs	r3, #2
 80151a6:	2200      	movs	r2, #0
 80151a8:	f002 fa04 	bl	80175b4 <_lseek_r>
 80151ac:	89a3      	ldrh	r3, [r4, #12]
 80151ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80151b6:	81a3      	strh	r3, [r4, #12]
 80151b8:	4632      	mov	r2, r6
 80151ba:	463b      	mov	r3, r7
 80151bc:	4628      	mov	r0, r5
 80151be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80151c2:	f000 bf27 	b.w	8016014 <_write_r>

080151c6 <__sseek>:
 80151c6:	b510      	push	{r4, lr}
 80151c8:	460c      	mov	r4, r1
 80151ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151ce:	f002 f9f1 	bl	80175b4 <_lseek_r>
 80151d2:	1c43      	adds	r3, r0, #1
 80151d4:	89a3      	ldrh	r3, [r4, #12]
 80151d6:	bf15      	itete	ne
 80151d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80151da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80151de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80151e2:	81a3      	strheq	r3, [r4, #12]
 80151e4:	bf18      	it	ne
 80151e6:	81a3      	strhne	r3, [r4, #12]
 80151e8:	bd10      	pop	{r4, pc}

080151ea <__sclose>:
 80151ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151ee:	f000 bf23 	b.w	8016038 <_close_r>

080151f2 <strcpy>:
 80151f2:	4603      	mov	r3, r0
 80151f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80151f8:	f803 2b01 	strb.w	r2, [r3], #1
 80151fc:	2a00      	cmp	r2, #0
 80151fe:	d1f9      	bne.n	80151f4 <strcpy+0x2>
 8015200:	4770      	bx	lr

08015202 <strncmp>:
 8015202:	b510      	push	{r4, lr}
 8015204:	b16a      	cbz	r2, 8015222 <strncmp+0x20>
 8015206:	3901      	subs	r1, #1
 8015208:	1884      	adds	r4, r0, r2
 801520a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801520e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015212:	4293      	cmp	r3, r2
 8015214:	d103      	bne.n	801521e <strncmp+0x1c>
 8015216:	42a0      	cmp	r0, r4
 8015218:	d001      	beq.n	801521e <strncmp+0x1c>
 801521a:	2b00      	cmp	r3, #0
 801521c:	d1f5      	bne.n	801520a <strncmp+0x8>
 801521e:	1a98      	subs	r0, r3, r2
 8015220:	bd10      	pop	{r4, pc}
 8015222:	4610      	mov	r0, r2
 8015224:	e7fc      	b.n	8015220 <strncmp+0x1e>

08015226 <sulp>:
 8015226:	b570      	push	{r4, r5, r6, lr}
 8015228:	4604      	mov	r4, r0
 801522a:	460d      	mov	r5, r1
 801522c:	ec45 4b10 	vmov	d0, r4, r5
 8015230:	4616      	mov	r6, r2
 8015232:	f002 fd5b 	bl	8017cec <__ulp>
 8015236:	ec51 0b10 	vmov	r0, r1, d0
 801523a:	b17e      	cbz	r6, 801525c <sulp+0x36>
 801523c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015240:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015244:	2b00      	cmp	r3, #0
 8015246:	dd09      	ble.n	801525c <sulp+0x36>
 8015248:	051b      	lsls	r3, r3, #20
 801524a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801524e:	2400      	movs	r4, #0
 8015250:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015254:	4622      	mov	r2, r4
 8015256:	462b      	mov	r3, r5
 8015258:	f7eb f9de 	bl	8000618 <__aeabi_dmul>
 801525c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015260 <_strtod_l>:
 8015260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015264:	b0a3      	sub	sp, #140	; 0x8c
 8015266:	461f      	mov	r7, r3
 8015268:	2300      	movs	r3, #0
 801526a:	931e      	str	r3, [sp, #120]	; 0x78
 801526c:	4ba4      	ldr	r3, [pc, #656]	; (8015500 <_strtod_l+0x2a0>)
 801526e:	9219      	str	r2, [sp, #100]	; 0x64
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	9307      	str	r3, [sp, #28]
 8015274:	4604      	mov	r4, r0
 8015276:	4618      	mov	r0, r3
 8015278:	4688      	mov	r8, r1
 801527a:	f7ea ffb9 	bl	80001f0 <strlen>
 801527e:	f04f 0a00 	mov.w	sl, #0
 8015282:	4605      	mov	r5, r0
 8015284:	f04f 0b00 	mov.w	fp, #0
 8015288:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801528c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801528e:	781a      	ldrb	r2, [r3, #0]
 8015290:	2a2b      	cmp	r2, #43	; 0x2b
 8015292:	d04c      	beq.n	801532e <_strtod_l+0xce>
 8015294:	d839      	bhi.n	801530a <_strtod_l+0xaa>
 8015296:	2a0d      	cmp	r2, #13
 8015298:	d832      	bhi.n	8015300 <_strtod_l+0xa0>
 801529a:	2a08      	cmp	r2, #8
 801529c:	d832      	bhi.n	8015304 <_strtod_l+0xa4>
 801529e:	2a00      	cmp	r2, #0
 80152a0:	d03c      	beq.n	801531c <_strtod_l+0xbc>
 80152a2:	2300      	movs	r3, #0
 80152a4:	930e      	str	r3, [sp, #56]	; 0x38
 80152a6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80152a8:	7833      	ldrb	r3, [r6, #0]
 80152aa:	2b30      	cmp	r3, #48	; 0x30
 80152ac:	f040 80b4 	bne.w	8015418 <_strtod_l+0x1b8>
 80152b0:	7873      	ldrb	r3, [r6, #1]
 80152b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80152b6:	2b58      	cmp	r3, #88	; 0x58
 80152b8:	d16c      	bne.n	8015394 <_strtod_l+0x134>
 80152ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152bc:	9301      	str	r3, [sp, #4]
 80152be:	ab1e      	add	r3, sp, #120	; 0x78
 80152c0:	9702      	str	r7, [sp, #8]
 80152c2:	9300      	str	r3, [sp, #0]
 80152c4:	4a8f      	ldr	r2, [pc, #572]	; (8015504 <_strtod_l+0x2a4>)
 80152c6:	ab1f      	add	r3, sp, #124	; 0x7c
 80152c8:	a91d      	add	r1, sp, #116	; 0x74
 80152ca:	4620      	mov	r0, r4
 80152cc:	f001 fe66 	bl	8016f9c <__gethex>
 80152d0:	f010 0707 	ands.w	r7, r0, #7
 80152d4:	4605      	mov	r5, r0
 80152d6:	d005      	beq.n	80152e4 <_strtod_l+0x84>
 80152d8:	2f06      	cmp	r7, #6
 80152da:	d12a      	bne.n	8015332 <_strtod_l+0xd2>
 80152dc:	3601      	adds	r6, #1
 80152de:	2300      	movs	r3, #0
 80152e0:	961d      	str	r6, [sp, #116]	; 0x74
 80152e2:	930e      	str	r3, [sp, #56]	; 0x38
 80152e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	f040 8596 	bne.w	8015e18 <_strtod_l+0xbb8>
 80152ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152ee:	b1db      	cbz	r3, 8015328 <_strtod_l+0xc8>
 80152f0:	4652      	mov	r2, sl
 80152f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80152f6:	ec43 2b10 	vmov	d0, r2, r3
 80152fa:	b023      	add	sp, #140	; 0x8c
 80152fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015300:	2a20      	cmp	r2, #32
 8015302:	d1ce      	bne.n	80152a2 <_strtod_l+0x42>
 8015304:	3301      	adds	r3, #1
 8015306:	931d      	str	r3, [sp, #116]	; 0x74
 8015308:	e7c0      	b.n	801528c <_strtod_l+0x2c>
 801530a:	2a2d      	cmp	r2, #45	; 0x2d
 801530c:	d1c9      	bne.n	80152a2 <_strtod_l+0x42>
 801530e:	2201      	movs	r2, #1
 8015310:	920e      	str	r2, [sp, #56]	; 0x38
 8015312:	1c5a      	adds	r2, r3, #1
 8015314:	921d      	str	r2, [sp, #116]	; 0x74
 8015316:	785b      	ldrb	r3, [r3, #1]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d1c4      	bne.n	80152a6 <_strtod_l+0x46>
 801531c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801531e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8015322:	2b00      	cmp	r3, #0
 8015324:	f040 8576 	bne.w	8015e14 <_strtod_l+0xbb4>
 8015328:	4652      	mov	r2, sl
 801532a:	465b      	mov	r3, fp
 801532c:	e7e3      	b.n	80152f6 <_strtod_l+0x96>
 801532e:	2200      	movs	r2, #0
 8015330:	e7ee      	b.n	8015310 <_strtod_l+0xb0>
 8015332:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015334:	b13a      	cbz	r2, 8015346 <_strtod_l+0xe6>
 8015336:	2135      	movs	r1, #53	; 0x35
 8015338:	a820      	add	r0, sp, #128	; 0x80
 801533a:	f002 fde2 	bl	8017f02 <__copybits>
 801533e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015340:	4620      	mov	r0, r4
 8015342:	f002 f9a7 	bl	8017694 <_Bfree>
 8015346:	3f01      	subs	r7, #1
 8015348:	2f05      	cmp	r7, #5
 801534a:	d807      	bhi.n	801535c <_strtod_l+0xfc>
 801534c:	e8df f007 	tbb	[pc, r7]
 8015350:	1d180b0e 	.word	0x1d180b0e
 8015354:	030e      	.short	0x030e
 8015356:	f04f 0b00 	mov.w	fp, #0
 801535a:	46da      	mov	sl, fp
 801535c:	0728      	lsls	r0, r5, #28
 801535e:	d5c1      	bpl.n	80152e4 <_strtod_l+0x84>
 8015360:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015364:	e7be      	b.n	80152e4 <_strtod_l+0x84>
 8015366:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801536a:	e7f7      	b.n	801535c <_strtod_l+0xfc>
 801536c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8015370:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015372:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015376:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801537a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801537e:	e7ed      	b.n	801535c <_strtod_l+0xfc>
 8015380:	f8df b184 	ldr.w	fp, [pc, #388]	; 8015508 <_strtod_l+0x2a8>
 8015384:	f04f 0a00 	mov.w	sl, #0
 8015388:	e7e8      	b.n	801535c <_strtod_l+0xfc>
 801538a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801538e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8015392:	e7e3      	b.n	801535c <_strtod_l+0xfc>
 8015394:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015396:	1c5a      	adds	r2, r3, #1
 8015398:	921d      	str	r2, [sp, #116]	; 0x74
 801539a:	785b      	ldrb	r3, [r3, #1]
 801539c:	2b30      	cmp	r3, #48	; 0x30
 801539e:	d0f9      	beq.n	8015394 <_strtod_l+0x134>
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d09f      	beq.n	80152e4 <_strtod_l+0x84>
 80153a4:	2301      	movs	r3, #1
 80153a6:	f04f 0900 	mov.w	r9, #0
 80153aa:	9304      	str	r3, [sp, #16]
 80153ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80153ae:	930a      	str	r3, [sp, #40]	; 0x28
 80153b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80153b4:	464f      	mov	r7, r9
 80153b6:	220a      	movs	r2, #10
 80153b8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80153ba:	7806      	ldrb	r6, [r0, #0]
 80153bc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80153c0:	b2d9      	uxtb	r1, r3
 80153c2:	2909      	cmp	r1, #9
 80153c4:	d92a      	bls.n	801541c <_strtod_l+0x1bc>
 80153c6:	9907      	ldr	r1, [sp, #28]
 80153c8:	462a      	mov	r2, r5
 80153ca:	f7ff ff1a 	bl	8015202 <strncmp>
 80153ce:	b398      	cbz	r0, 8015438 <_strtod_l+0x1d8>
 80153d0:	2000      	movs	r0, #0
 80153d2:	4633      	mov	r3, r6
 80153d4:	463d      	mov	r5, r7
 80153d6:	9007      	str	r0, [sp, #28]
 80153d8:	4602      	mov	r2, r0
 80153da:	2b65      	cmp	r3, #101	; 0x65
 80153dc:	d001      	beq.n	80153e2 <_strtod_l+0x182>
 80153de:	2b45      	cmp	r3, #69	; 0x45
 80153e0:	d118      	bne.n	8015414 <_strtod_l+0x1b4>
 80153e2:	b91d      	cbnz	r5, 80153ec <_strtod_l+0x18c>
 80153e4:	9b04      	ldr	r3, [sp, #16]
 80153e6:	4303      	orrs	r3, r0
 80153e8:	d098      	beq.n	801531c <_strtod_l+0xbc>
 80153ea:	2500      	movs	r5, #0
 80153ec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80153f0:	f108 0301 	add.w	r3, r8, #1
 80153f4:	931d      	str	r3, [sp, #116]	; 0x74
 80153f6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80153fa:	2b2b      	cmp	r3, #43	; 0x2b
 80153fc:	d075      	beq.n	80154ea <_strtod_l+0x28a>
 80153fe:	2b2d      	cmp	r3, #45	; 0x2d
 8015400:	d07b      	beq.n	80154fa <_strtod_l+0x29a>
 8015402:	f04f 0c00 	mov.w	ip, #0
 8015406:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801540a:	2909      	cmp	r1, #9
 801540c:	f240 8082 	bls.w	8015514 <_strtod_l+0x2b4>
 8015410:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8015414:	2600      	movs	r6, #0
 8015416:	e09d      	b.n	8015554 <_strtod_l+0x2f4>
 8015418:	2300      	movs	r3, #0
 801541a:	e7c4      	b.n	80153a6 <_strtod_l+0x146>
 801541c:	2f08      	cmp	r7, #8
 801541e:	bfd8      	it	le
 8015420:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8015422:	f100 0001 	add.w	r0, r0, #1
 8015426:	bfda      	itte	le
 8015428:	fb02 3301 	mlale	r3, r2, r1, r3
 801542c:	9309      	strle	r3, [sp, #36]	; 0x24
 801542e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8015432:	3701      	adds	r7, #1
 8015434:	901d      	str	r0, [sp, #116]	; 0x74
 8015436:	e7bf      	b.n	80153b8 <_strtod_l+0x158>
 8015438:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801543a:	195a      	adds	r2, r3, r5
 801543c:	921d      	str	r2, [sp, #116]	; 0x74
 801543e:	5d5b      	ldrb	r3, [r3, r5]
 8015440:	2f00      	cmp	r7, #0
 8015442:	d037      	beq.n	80154b4 <_strtod_l+0x254>
 8015444:	9007      	str	r0, [sp, #28]
 8015446:	463d      	mov	r5, r7
 8015448:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801544c:	2a09      	cmp	r2, #9
 801544e:	d912      	bls.n	8015476 <_strtod_l+0x216>
 8015450:	2201      	movs	r2, #1
 8015452:	e7c2      	b.n	80153da <_strtod_l+0x17a>
 8015454:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015456:	1c5a      	adds	r2, r3, #1
 8015458:	921d      	str	r2, [sp, #116]	; 0x74
 801545a:	785b      	ldrb	r3, [r3, #1]
 801545c:	3001      	adds	r0, #1
 801545e:	2b30      	cmp	r3, #48	; 0x30
 8015460:	d0f8      	beq.n	8015454 <_strtod_l+0x1f4>
 8015462:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8015466:	2a08      	cmp	r2, #8
 8015468:	f200 84db 	bhi.w	8015e22 <_strtod_l+0xbc2>
 801546c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801546e:	9007      	str	r0, [sp, #28]
 8015470:	2000      	movs	r0, #0
 8015472:	920a      	str	r2, [sp, #40]	; 0x28
 8015474:	4605      	mov	r5, r0
 8015476:	3b30      	subs	r3, #48	; 0x30
 8015478:	f100 0201 	add.w	r2, r0, #1
 801547c:	d014      	beq.n	80154a8 <_strtod_l+0x248>
 801547e:	9907      	ldr	r1, [sp, #28]
 8015480:	4411      	add	r1, r2
 8015482:	9107      	str	r1, [sp, #28]
 8015484:	462a      	mov	r2, r5
 8015486:	eb00 0e05 	add.w	lr, r0, r5
 801548a:	210a      	movs	r1, #10
 801548c:	4572      	cmp	r2, lr
 801548e:	d113      	bne.n	80154b8 <_strtod_l+0x258>
 8015490:	182a      	adds	r2, r5, r0
 8015492:	2a08      	cmp	r2, #8
 8015494:	f105 0501 	add.w	r5, r5, #1
 8015498:	4405      	add	r5, r0
 801549a:	dc1c      	bgt.n	80154d6 <_strtod_l+0x276>
 801549c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801549e:	220a      	movs	r2, #10
 80154a0:	fb02 3301 	mla	r3, r2, r1, r3
 80154a4:	9309      	str	r3, [sp, #36]	; 0x24
 80154a6:	2200      	movs	r2, #0
 80154a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80154aa:	1c59      	adds	r1, r3, #1
 80154ac:	911d      	str	r1, [sp, #116]	; 0x74
 80154ae:	785b      	ldrb	r3, [r3, #1]
 80154b0:	4610      	mov	r0, r2
 80154b2:	e7c9      	b.n	8015448 <_strtod_l+0x1e8>
 80154b4:	4638      	mov	r0, r7
 80154b6:	e7d2      	b.n	801545e <_strtod_l+0x1fe>
 80154b8:	2a08      	cmp	r2, #8
 80154ba:	dc04      	bgt.n	80154c6 <_strtod_l+0x266>
 80154bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80154be:	434e      	muls	r6, r1
 80154c0:	9609      	str	r6, [sp, #36]	; 0x24
 80154c2:	3201      	adds	r2, #1
 80154c4:	e7e2      	b.n	801548c <_strtod_l+0x22c>
 80154c6:	f102 0c01 	add.w	ip, r2, #1
 80154ca:	f1bc 0f10 	cmp.w	ip, #16
 80154ce:	bfd8      	it	le
 80154d0:	fb01 f909 	mulle.w	r9, r1, r9
 80154d4:	e7f5      	b.n	80154c2 <_strtod_l+0x262>
 80154d6:	2d10      	cmp	r5, #16
 80154d8:	bfdc      	itt	le
 80154da:	220a      	movle	r2, #10
 80154dc:	fb02 3909 	mlale	r9, r2, r9, r3
 80154e0:	e7e1      	b.n	80154a6 <_strtod_l+0x246>
 80154e2:	2300      	movs	r3, #0
 80154e4:	9307      	str	r3, [sp, #28]
 80154e6:	2201      	movs	r2, #1
 80154e8:	e77c      	b.n	80153e4 <_strtod_l+0x184>
 80154ea:	f04f 0c00 	mov.w	ip, #0
 80154ee:	f108 0302 	add.w	r3, r8, #2
 80154f2:	931d      	str	r3, [sp, #116]	; 0x74
 80154f4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80154f8:	e785      	b.n	8015406 <_strtod_l+0x1a6>
 80154fa:	f04f 0c01 	mov.w	ip, #1
 80154fe:	e7f6      	b.n	80154ee <_strtod_l+0x28e>
 8015500:	08019070 	.word	0x08019070
 8015504:	08018f20 	.word	0x08018f20
 8015508:	7ff00000 	.word	0x7ff00000
 801550c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801550e:	1c59      	adds	r1, r3, #1
 8015510:	911d      	str	r1, [sp, #116]	; 0x74
 8015512:	785b      	ldrb	r3, [r3, #1]
 8015514:	2b30      	cmp	r3, #48	; 0x30
 8015516:	d0f9      	beq.n	801550c <_strtod_l+0x2ac>
 8015518:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801551c:	2908      	cmp	r1, #8
 801551e:	f63f af79 	bhi.w	8015414 <_strtod_l+0x1b4>
 8015522:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015526:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015528:	9308      	str	r3, [sp, #32]
 801552a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801552c:	1c59      	adds	r1, r3, #1
 801552e:	911d      	str	r1, [sp, #116]	; 0x74
 8015530:	785b      	ldrb	r3, [r3, #1]
 8015532:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8015536:	2e09      	cmp	r6, #9
 8015538:	d937      	bls.n	80155aa <_strtod_l+0x34a>
 801553a:	9e08      	ldr	r6, [sp, #32]
 801553c:	1b89      	subs	r1, r1, r6
 801553e:	2908      	cmp	r1, #8
 8015540:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8015544:	dc02      	bgt.n	801554c <_strtod_l+0x2ec>
 8015546:	4576      	cmp	r6, lr
 8015548:	bfa8      	it	ge
 801554a:	4676      	movge	r6, lr
 801554c:	f1bc 0f00 	cmp.w	ip, #0
 8015550:	d000      	beq.n	8015554 <_strtod_l+0x2f4>
 8015552:	4276      	negs	r6, r6
 8015554:	2d00      	cmp	r5, #0
 8015556:	d14f      	bne.n	80155f8 <_strtod_l+0x398>
 8015558:	9904      	ldr	r1, [sp, #16]
 801555a:	4301      	orrs	r1, r0
 801555c:	f47f aec2 	bne.w	80152e4 <_strtod_l+0x84>
 8015560:	2a00      	cmp	r2, #0
 8015562:	f47f aedb 	bne.w	801531c <_strtod_l+0xbc>
 8015566:	2b69      	cmp	r3, #105	; 0x69
 8015568:	d027      	beq.n	80155ba <_strtod_l+0x35a>
 801556a:	dc24      	bgt.n	80155b6 <_strtod_l+0x356>
 801556c:	2b49      	cmp	r3, #73	; 0x49
 801556e:	d024      	beq.n	80155ba <_strtod_l+0x35a>
 8015570:	2b4e      	cmp	r3, #78	; 0x4e
 8015572:	f47f aed3 	bne.w	801531c <_strtod_l+0xbc>
 8015576:	499e      	ldr	r1, [pc, #632]	; (80157f0 <_strtod_l+0x590>)
 8015578:	a81d      	add	r0, sp, #116	; 0x74
 801557a:	f001 ff67 	bl	801744c <__match>
 801557e:	2800      	cmp	r0, #0
 8015580:	f43f aecc 	beq.w	801531c <_strtod_l+0xbc>
 8015584:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015586:	781b      	ldrb	r3, [r3, #0]
 8015588:	2b28      	cmp	r3, #40	; 0x28
 801558a:	d12d      	bne.n	80155e8 <_strtod_l+0x388>
 801558c:	4999      	ldr	r1, [pc, #612]	; (80157f4 <_strtod_l+0x594>)
 801558e:	aa20      	add	r2, sp, #128	; 0x80
 8015590:	a81d      	add	r0, sp, #116	; 0x74
 8015592:	f001 ff6f 	bl	8017474 <__hexnan>
 8015596:	2805      	cmp	r0, #5
 8015598:	d126      	bne.n	80155e8 <_strtod_l+0x388>
 801559a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801559c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80155a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80155a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80155a8:	e69c      	b.n	80152e4 <_strtod_l+0x84>
 80155aa:	210a      	movs	r1, #10
 80155ac:	fb01 3e0e 	mla	lr, r1, lr, r3
 80155b0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80155b4:	e7b9      	b.n	801552a <_strtod_l+0x2ca>
 80155b6:	2b6e      	cmp	r3, #110	; 0x6e
 80155b8:	e7db      	b.n	8015572 <_strtod_l+0x312>
 80155ba:	498f      	ldr	r1, [pc, #572]	; (80157f8 <_strtod_l+0x598>)
 80155bc:	a81d      	add	r0, sp, #116	; 0x74
 80155be:	f001 ff45 	bl	801744c <__match>
 80155c2:	2800      	cmp	r0, #0
 80155c4:	f43f aeaa 	beq.w	801531c <_strtod_l+0xbc>
 80155c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80155ca:	498c      	ldr	r1, [pc, #560]	; (80157fc <_strtod_l+0x59c>)
 80155cc:	3b01      	subs	r3, #1
 80155ce:	a81d      	add	r0, sp, #116	; 0x74
 80155d0:	931d      	str	r3, [sp, #116]	; 0x74
 80155d2:	f001 ff3b 	bl	801744c <__match>
 80155d6:	b910      	cbnz	r0, 80155de <_strtod_l+0x37e>
 80155d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80155da:	3301      	adds	r3, #1
 80155dc:	931d      	str	r3, [sp, #116]	; 0x74
 80155de:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801580c <_strtod_l+0x5ac>
 80155e2:	f04f 0a00 	mov.w	sl, #0
 80155e6:	e67d      	b.n	80152e4 <_strtod_l+0x84>
 80155e8:	4885      	ldr	r0, [pc, #532]	; (8015800 <_strtod_l+0x5a0>)
 80155ea:	f002 fe4d 	bl	8018288 <nan>
 80155ee:	ed8d 0b04 	vstr	d0, [sp, #16]
 80155f2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80155f6:	e675      	b.n	80152e4 <_strtod_l+0x84>
 80155f8:	9b07      	ldr	r3, [sp, #28]
 80155fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155fc:	1af3      	subs	r3, r6, r3
 80155fe:	2f00      	cmp	r7, #0
 8015600:	bf08      	it	eq
 8015602:	462f      	moveq	r7, r5
 8015604:	2d10      	cmp	r5, #16
 8015606:	9308      	str	r3, [sp, #32]
 8015608:	46a8      	mov	r8, r5
 801560a:	bfa8      	it	ge
 801560c:	f04f 0810 	movge.w	r8, #16
 8015610:	f7ea ff88 	bl	8000524 <__aeabi_ui2d>
 8015614:	2d09      	cmp	r5, #9
 8015616:	4682      	mov	sl, r0
 8015618:	468b      	mov	fp, r1
 801561a:	dd13      	ble.n	8015644 <_strtod_l+0x3e4>
 801561c:	4b79      	ldr	r3, [pc, #484]	; (8015804 <_strtod_l+0x5a4>)
 801561e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015622:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015626:	f7ea fff7 	bl	8000618 <__aeabi_dmul>
 801562a:	4682      	mov	sl, r0
 801562c:	4648      	mov	r0, r9
 801562e:	468b      	mov	fp, r1
 8015630:	f7ea ff78 	bl	8000524 <__aeabi_ui2d>
 8015634:	4602      	mov	r2, r0
 8015636:	460b      	mov	r3, r1
 8015638:	4650      	mov	r0, sl
 801563a:	4659      	mov	r1, fp
 801563c:	f7ea fe36 	bl	80002ac <__adddf3>
 8015640:	4682      	mov	sl, r0
 8015642:	468b      	mov	fp, r1
 8015644:	2d0f      	cmp	r5, #15
 8015646:	dc38      	bgt.n	80156ba <_strtod_l+0x45a>
 8015648:	9b08      	ldr	r3, [sp, #32]
 801564a:	2b00      	cmp	r3, #0
 801564c:	f43f ae4a 	beq.w	80152e4 <_strtod_l+0x84>
 8015650:	dd24      	ble.n	801569c <_strtod_l+0x43c>
 8015652:	2b16      	cmp	r3, #22
 8015654:	dc0b      	bgt.n	801566e <_strtod_l+0x40e>
 8015656:	4d6b      	ldr	r5, [pc, #428]	; (8015804 <_strtod_l+0x5a4>)
 8015658:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801565c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015660:	4652      	mov	r2, sl
 8015662:	465b      	mov	r3, fp
 8015664:	f7ea ffd8 	bl	8000618 <__aeabi_dmul>
 8015668:	4682      	mov	sl, r0
 801566a:	468b      	mov	fp, r1
 801566c:	e63a      	b.n	80152e4 <_strtod_l+0x84>
 801566e:	9a08      	ldr	r2, [sp, #32]
 8015670:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8015674:	4293      	cmp	r3, r2
 8015676:	db20      	blt.n	80156ba <_strtod_l+0x45a>
 8015678:	4c62      	ldr	r4, [pc, #392]	; (8015804 <_strtod_l+0x5a4>)
 801567a:	f1c5 050f 	rsb	r5, r5, #15
 801567e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8015682:	4652      	mov	r2, sl
 8015684:	465b      	mov	r3, fp
 8015686:	e9d1 0100 	ldrd	r0, r1, [r1]
 801568a:	f7ea ffc5 	bl	8000618 <__aeabi_dmul>
 801568e:	9b08      	ldr	r3, [sp, #32]
 8015690:	1b5d      	subs	r5, r3, r5
 8015692:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8015696:	e9d4 2300 	ldrd	r2, r3, [r4]
 801569a:	e7e3      	b.n	8015664 <_strtod_l+0x404>
 801569c:	9b08      	ldr	r3, [sp, #32]
 801569e:	3316      	adds	r3, #22
 80156a0:	db0b      	blt.n	80156ba <_strtod_l+0x45a>
 80156a2:	9b07      	ldr	r3, [sp, #28]
 80156a4:	4a57      	ldr	r2, [pc, #348]	; (8015804 <_strtod_l+0x5a4>)
 80156a6:	1b9e      	subs	r6, r3, r6
 80156a8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80156ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80156b0:	4650      	mov	r0, sl
 80156b2:	4659      	mov	r1, fp
 80156b4:	f7eb f8da 	bl	800086c <__aeabi_ddiv>
 80156b8:	e7d6      	b.n	8015668 <_strtod_l+0x408>
 80156ba:	9b08      	ldr	r3, [sp, #32]
 80156bc:	eba5 0808 	sub.w	r8, r5, r8
 80156c0:	4498      	add	r8, r3
 80156c2:	f1b8 0f00 	cmp.w	r8, #0
 80156c6:	dd71      	ble.n	80157ac <_strtod_l+0x54c>
 80156c8:	f018 030f 	ands.w	r3, r8, #15
 80156cc:	d00a      	beq.n	80156e4 <_strtod_l+0x484>
 80156ce:	494d      	ldr	r1, [pc, #308]	; (8015804 <_strtod_l+0x5a4>)
 80156d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80156d4:	4652      	mov	r2, sl
 80156d6:	465b      	mov	r3, fp
 80156d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156dc:	f7ea ff9c 	bl	8000618 <__aeabi_dmul>
 80156e0:	4682      	mov	sl, r0
 80156e2:	468b      	mov	fp, r1
 80156e4:	f038 080f 	bics.w	r8, r8, #15
 80156e8:	d04d      	beq.n	8015786 <_strtod_l+0x526>
 80156ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80156ee:	dd22      	ble.n	8015736 <_strtod_l+0x4d6>
 80156f0:	2500      	movs	r5, #0
 80156f2:	462e      	mov	r6, r5
 80156f4:	9509      	str	r5, [sp, #36]	; 0x24
 80156f6:	9507      	str	r5, [sp, #28]
 80156f8:	2322      	movs	r3, #34	; 0x22
 80156fa:	f8df b110 	ldr.w	fp, [pc, #272]	; 801580c <_strtod_l+0x5ac>
 80156fe:	6023      	str	r3, [r4, #0]
 8015700:	f04f 0a00 	mov.w	sl, #0
 8015704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015706:	2b00      	cmp	r3, #0
 8015708:	f43f adec 	beq.w	80152e4 <_strtod_l+0x84>
 801570c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801570e:	4620      	mov	r0, r4
 8015710:	f001 ffc0 	bl	8017694 <_Bfree>
 8015714:	9907      	ldr	r1, [sp, #28]
 8015716:	4620      	mov	r0, r4
 8015718:	f001 ffbc 	bl	8017694 <_Bfree>
 801571c:	4631      	mov	r1, r6
 801571e:	4620      	mov	r0, r4
 8015720:	f001 ffb8 	bl	8017694 <_Bfree>
 8015724:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015726:	4620      	mov	r0, r4
 8015728:	f001 ffb4 	bl	8017694 <_Bfree>
 801572c:	4629      	mov	r1, r5
 801572e:	4620      	mov	r0, r4
 8015730:	f001 ffb0 	bl	8017694 <_Bfree>
 8015734:	e5d6      	b.n	80152e4 <_strtod_l+0x84>
 8015736:	2300      	movs	r3, #0
 8015738:	ea4f 1828 	mov.w	r8, r8, asr #4
 801573c:	4650      	mov	r0, sl
 801573e:	4659      	mov	r1, fp
 8015740:	4699      	mov	r9, r3
 8015742:	f1b8 0f01 	cmp.w	r8, #1
 8015746:	dc21      	bgt.n	801578c <_strtod_l+0x52c>
 8015748:	b10b      	cbz	r3, 801574e <_strtod_l+0x4ee>
 801574a:	4682      	mov	sl, r0
 801574c:	468b      	mov	fp, r1
 801574e:	4b2e      	ldr	r3, [pc, #184]	; (8015808 <_strtod_l+0x5a8>)
 8015750:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015754:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8015758:	4652      	mov	r2, sl
 801575a:	465b      	mov	r3, fp
 801575c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8015760:	f7ea ff5a 	bl	8000618 <__aeabi_dmul>
 8015764:	4b29      	ldr	r3, [pc, #164]	; (801580c <_strtod_l+0x5ac>)
 8015766:	460a      	mov	r2, r1
 8015768:	400b      	ands	r3, r1
 801576a:	4929      	ldr	r1, [pc, #164]	; (8015810 <_strtod_l+0x5b0>)
 801576c:	428b      	cmp	r3, r1
 801576e:	4682      	mov	sl, r0
 8015770:	d8be      	bhi.n	80156f0 <_strtod_l+0x490>
 8015772:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015776:	428b      	cmp	r3, r1
 8015778:	bf86      	itte	hi
 801577a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015814 <_strtod_l+0x5b4>
 801577e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8015782:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015786:	2300      	movs	r3, #0
 8015788:	9304      	str	r3, [sp, #16]
 801578a:	e081      	b.n	8015890 <_strtod_l+0x630>
 801578c:	f018 0f01 	tst.w	r8, #1
 8015790:	d007      	beq.n	80157a2 <_strtod_l+0x542>
 8015792:	4b1d      	ldr	r3, [pc, #116]	; (8015808 <_strtod_l+0x5a8>)
 8015794:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8015798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801579c:	f7ea ff3c 	bl	8000618 <__aeabi_dmul>
 80157a0:	2301      	movs	r3, #1
 80157a2:	f109 0901 	add.w	r9, r9, #1
 80157a6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80157aa:	e7ca      	b.n	8015742 <_strtod_l+0x4e2>
 80157ac:	d0eb      	beq.n	8015786 <_strtod_l+0x526>
 80157ae:	f1c8 0800 	rsb	r8, r8, #0
 80157b2:	f018 020f 	ands.w	r2, r8, #15
 80157b6:	d00a      	beq.n	80157ce <_strtod_l+0x56e>
 80157b8:	4b12      	ldr	r3, [pc, #72]	; (8015804 <_strtod_l+0x5a4>)
 80157ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80157be:	4650      	mov	r0, sl
 80157c0:	4659      	mov	r1, fp
 80157c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c6:	f7eb f851 	bl	800086c <__aeabi_ddiv>
 80157ca:	4682      	mov	sl, r0
 80157cc:	468b      	mov	fp, r1
 80157ce:	ea5f 1828 	movs.w	r8, r8, asr #4
 80157d2:	d0d8      	beq.n	8015786 <_strtod_l+0x526>
 80157d4:	f1b8 0f1f 	cmp.w	r8, #31
 80157d8:	dd1e      	ble.n	8015818 <_strtod_l+0x5b8>
 80157da:	2500      	movs	r5, #0
 80157dc:	462e      	mov	r6, r5
 80157de:	9509      	str	r5, [sp, #36]	; 0x24
 80157e0:	9507      	str	r5, [sp, #28]
 80157e2:	2322      	movs	r3, #34	; 0x22
 80157e4:	f04f 0a00 	mov.w	sl, #0
 80157e8:	f04f 0b00 	mov.w	fp, #0
 80157ec:	6023      	str	r3, [r4, #0]
 80157ee:	e789      	b.n	8015704 <_strtod_l+0x4a4>
 80157f0:	08018ef1 	.word	0x08018ef1
 80157f4:	08018f34 	.word	0x08018f34
 80157f8:	08018ee9 	.word	0x08018ee9
 80157fc:	08018f73 	.word	0x08018f73
 8015800:	08019230 	.word	0x08019230
 8015804:	08019110 	.word	0x08019110
 8015808:	080190e8 	.word	0x080190e8
 801580c:	7ff00000 	.word	0x7ff00000
 8015810:	7ca00000 	.word	0x7ca00000
 8015814:	7fefffff 	.word	0x7fefffff
 8015818:	f018 0310 	ands.w	r3, r8, #16
 801581c:	bf18      	it	ne
 801581e:	236a      	movne	r3, #106	; 0x6a
 8015820:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8015bd8 <_strtod_l+0x978>
 8015824:	9304      	str	r3, [sp, #16]
 8015826:	4650      	mov	r0, sl
 8015828:	4659      	mov	r1, fp
 801582a:	2300      	movs	r3, #0
 801582c:	f018 0f01 	tst.w	r8, #1
 8015830:	d004      	beq.n	801583c <_strtod_l+0x5dc>
 8015832:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015836:	f7ea feef 	bl	8000618 <__aeabi_dmul>
 801583a:	2301      	movs	r3, #1
 801583c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8015840:	f109 0908 	add.w	r9, r9, #8
 8015844:	d1f2      	bne.n	801582c <_strtod_l+0x5cc>
 8015846:	b10b      	cbz	r3, 801584c <_strtod_l+0x5ec>
 8015848:	4682      	mov	sl, r0
 801584a:	468b      	mov	fp, r1
 801584c:	9b04      	ldr	r3, [sp, #16]
 801584e:	b1bb      	cbz	r3, 8015880 <_strtod_l+0x620>
 8015850:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015854:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015858:	2b00      	cmp	r3, #0
 801585a:	4659      	mov	r1, fp
 801585c:	dd10      	ble.n	8015880 <_strtod_l+0x620>
 801585e:	2b1f      	cmp	r3, #31
 8015860:	f340 8128 	ble.w	8015ab4 <_strtod_l+0x854>
 8015864:	2b34      	cmp	r3, #52	; 0x34
 8015866:	bfde      	ittt	le
 8015868:	3b20      	suble	r3, #32
 801586a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801586e:	fa02 f303 	lslle.w	r3, r2, r3
 8015872:	f04f 0a00 	mov.w	sl, #0
 8015876:	bfcc      	ite	gt
 8015878:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801587c:	ea03 0b01 	andle.w	fp, r3, r1
 8015880:	2200      	movs	r2, #0
 8015882:	2300      	movs	r3, #0
 8015884:	4650      	mov	r0, sl
 8015886:	4659      	mov	r1, fp
 8015888:	f7eb f92e 	bl	8000ae8 <__aeabi_dcmpeq>
 801588c:	2800      	cmp	r0, #0
 801588e:	d1a4      	bne.n	80157da <_strtod_l+0x57a>
 8015890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015892:	9300      	str	r3, [sp, #0]
 8015894:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015896:	462b      	mov	r3, r5
 8015898:	463a      	mov	r2, r7
 801589a:	4620      	mov	r0, r4
 801589c:	f001 ff66 	bl	801776c <__s2b>
 80158a0:	9009      	str	r0, [sp, #36]	; 0x24
 80158a2:	2800      	cmp	r0, #0
 80158a4:	f43f af24 	beq.w	80156f0 <_strtod_l+0x490>
 80158a8:	9b07      	ldr	r3, [sp, #28]
 80158aa:	1b9e      	subs	r6, r3, r6
 80158ac:	9b08      	ldr	r3, [sp, #32]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	bfb4      	ite	lt
 80158b2:	4633      	movlt	r3, r6
 80158b4:	2300      	movge	r3, #0
 80158b6:	9310      	str	r3, [sp, #64]	; 0x40
 80158b8:	9b08      	ldr	r3, [sp, #32]
 80158ba:	2500      	movs	r5, #0
 80158bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80158c0:	9318      	str	r3, [sp, #96]	; 0x60
 80158c2:	462e      	mov	r6, r5
 80158c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158c6:	4620      	mov	r0, r4
 80158c8:	6859      	ldr	r1, [r3, #4]
 80158ca:	f001 fea3 	bl	8017614 <_Balloc>
 80158ce:	9007      	str	r0, [sp, #28]
 80158d0:	2800      	cmp	r0, #0
 80158d2:	f43f af11 	beq.w	80156f8 <_strtod_l+0x498>
 80158d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158d8:	691a      	ldr	r2, [r3, #16]
 80158da:	3202      	adds	r2, #2
 80158dc:	f103 010c 	add.w	r1, r3, #12
 80158e0:	0092      	lsls	r2, r2, #2
 80158e2:	300c      	adds	r0, #12
 80158e4:	f7fe fc68 	bl	80141b8 <memcpy>
 80158e8:	ec4b ab10 	vmov	d0, sl, fp
 80158ec:	aa20      	add	r2, sp, #128	; 0x80
 80158ee:	a91f      	add	r1, sp, #124	; 0x7c
 80158f0:	4620      	mov	r0, r4
 80158f2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80158f6:	f002 fa75 	bl	8017de4 <__d2b>
 80158fa:	901e      	str	r0, [sp, #120]	; 0x78
 80158fc:	2800      	cmp	r0, #0
 80158fe:	f43f aefb 	beq.w	80156f8 <_strtod_l+0x498>
 8015902:	2101      	movs	r1, #1
 8015904:	4620      	mov	r0, r4
 8015906:	f001 ffcb 	bl	80178a0 <__i2b>
 801590a:	4606      	mov	r6, r0
 801590c:	2800      	cmp	r0, #0
 801590e:	f43f aef3 	beq.w	80156f8 <_strtod_l+0x498>
 8015912:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015914:	9904      	ldr	r1, [sp, #16]
 8015916:	2b00      	cmp	r3, #0
 8015918:	bfab      	itete	ge
 801591a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801591c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801591e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8015920:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8015924:	bfac      	ite	ge
 8015926:	eb03 0902 	addge.w	r9, r3, r2
 801592a:	1ad7      	sublt	r7, r2, r3
 801592c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801592e:	eba3 0801 	sub.w	r8, r3, r1
 8015932:	4490      	add	r8, r2
 8015934:	4ba3      	ldr	r3, [pc, #652]	; (8015bc4 <_strtod_l+0x964>)
 8015936:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801593a:	4598      	cmp	r8, r3
 801593c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015940:	f280 80cc 	bge.w	8015adc <_strtod_l+0x87c>
 8015944:	eba3 0308 	sub.w	r3, r3, r8
 8015948:	2b1f      	cmp	r3, #31
 801594a:	eba2 0203 	sub.w	r2, r2, r3
 801594e:	f04f 0101 	mov.w	r1, #1
 8015952:	f300 80b6 	bgt.w	8015ac2 <_strtod_l+0x862>
 8015956:	fa01 f303 	lsl.w	r3, r1, r3
 801595a:	9311      	str	r3, [sp, #68]	; 0x44
 801595c:	2300      	movs	r3, #0
 801595e:	930c      	str	r3, [sp, #48]	; 0x30
 8015960:	eb09 0802 	add.w	r8, r9, r2
 8015964:	9b04      	ldr	r3, [sp, #16]
 8015966:	45c1      	cmp	r9, r8
 8015968:	4417      	add	r7, r2
 801596a:	441f      	add	r7, r3
 801596c:	464b      	mov	r3, r9
 801596e:	bfa8      	it	ge
 8015970:	4643      	movge	r3, r8
 8015972:	42bb      	cmp	r3, r7
 8015974:	bfa8      	it	ge
 8015976:	463b      	movge	r3, r7
 8015978:	2b00      	cmp	r3, #0
 801597a:	bfc2      	ittt	gt
 801597c:	eba8 0803 	subgt.w	r8, r8, r3
 8015980:	1aff      	subgt	r7, r7, r3
 8015982:	eba9 0903 	subgt.w	r9, r9, r3
 8015986:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015988:	2b00      	cmp	r3, #0
 801598a:	dd17      	ble.n	80159bc <_strtod_l+0x75c>
 801598c:	4631      	mov	r1, r6
 801598e:	461a      	mov	r2, r3
 8015990:	4620      	mov	r0, r4
 8015992:	f002 f841 	bl	8017a18 <__pow5mult>
 8015996:	4606      	mov	r6, r0
 8015998:	2800      	cmp	r0, #0
 801599a:	f43f aead 	beq.w	80156f8 <_strtod_l+0x498>
 801599e:	4601      	mov	r1, r0
 80159a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80159a2:	4620      	mov	r0, r4
 80159a4:	f001 ff92 	bl	80178cc <__multiply>
 80159a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80159aa:	2800      	cmp	r0, #0
 80159ac:	f43f aea4 	beq.w	80156f8 <_strtod_l+0x498>
 80159b0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80159b2:	4620      	mov	r0, r4
 80159b4:	f001 fe6e 	bl	8017694 <_Bfree>
 80159b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159ba:	931e      	str	r3, [sp, #120]	; 0x78
 80159bc:	f1b8 0f00 	cmp.w	r8, #0
 80159c0:	f300 8091 	bgt.w	8015ae6 <_strtod_l+0x886>
 80159c4:	9b08      	ldr	r3, [sp, #32]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	dd08      	ble.n	80159dc <_strtod_l+0x77c>
 80159ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80159cc:	9907      	ldr	r1, [sp, #28]
 80159ce:	4620      	mov	r0, r4
 80159d0:	f002 f822 	bl	8017a18 <__pow5mult>
 80159d4:	9007      	str	r0, [sp, #28]
 80159d6:	2800      	cmp	r0, #0
 80159d8:	f43f ae8e 	beq.w	80156f8 <_strtod_l+0x498>
 80159dc:	2f00      	cmp	r7, #0
 80159de:	dd08      	ble.n	80159f2 <_strtod_l+0x792>
 80159e0:	9907      	ldr	r1, [sp, #28]
 80159e2:	463a      	mov	r2, r7
 80159e4:	4620      	mov	r0, r4
 80159e6:	f002 f871 	bl	8017acc <__lshift>
 80159ea:	9007      	str	r0, [sp, #28]
 80159ec:	2800      	cmp	r0, #0
 80159ee:	f43f ae83 	beq.w	80156f8 <_strtod_l+0x498>
 80159f2:	f1b9 0f00 	cmp.w	r9, #0
 80159f6:	dd08      	ble.n	8015a0a <_strtod_l+0x7aa>
 80159f8:	4631      	mov	r1, r6
 80159fa:	464a      	mov	r2, r9
 80159fc:	4620      	mov	r0, r4
 80159fe:	f002 f865 	bl	8017acc <__lshift>
 8015a02:	4606      	mov	r6, r0
 8015a04:	2800      	cmp	r0, #0
 8015a06:	f43f ae77 	beq.w	80156f8 <_strtod_l+0x498>
 8015a0a:	9a07      	ldr	r2, [sp, #28]
 8015a0c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015a0e:	4620      	mov	r0, r4
 8015a10:	f002 f8e4 	bl	8017bdc <__mdiff>
 8015a14:	4605      	mov	r5, r0
 8015a16:	2800      	cmp	r0, #0
 8015a18:	f43f ae6e 	beq.w	80156f8 <_strtod_l+0x498>
 8015a1c:	68c3      	ldr	r3, [r0, #12]
 8015a1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015a20:	2300      	movs	r3, #0
 8015a22:	60c3      	str	r3, [r0, #12]
 8015a24:	4631      	mov	r1, r6
 8015a26:	f002 f8bd 	bl	8017ba4 <__mcmp>
 8015a2a:	2800      	cmp	r0, #0
 8015a2c:	da65      	bge.n	8015afa <_strtod_l+0x89a>
 8015a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a30:	ea53 030a 	orrs.w	r3, r3, sl
 8015a34:	f040 8087 	bne.w	8015b46 <_strtod_l+0x8e6>
 8015a38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	f040 8082 	bne.w	8015b46 <_strtod_l+0x8e6>
 8015a42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015a46:	0d1b      	lsrs	r3, r3, #20
 8015a48:	051b      	lsls	r3, r3, #20
 8015a4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015a4e:	d97a      	bls.n	8015b46 <_strtod_l+0x8e6>
 8015a50:	696b      	ldr	r3, [r5, #20]
 8015a52:	b913      	cbnz	r3, 8015a5a <_strtod_l+0x7fa>
 8015a54:	692b      	ldr	r3, [r5, #16]
 8015a56:	2b01      	cmp	r3, #1
 8015a58:	dd75      	ble.n	8015b46 <_strtod_l+0x8e6>
 8015a5a:	4629      	mov	r1, r5
 8015a5c:	2201      	movs	r2, #1
 8015a5e:	4620      	mov	r0, r4
 8015a60:	f002 f834 	bl	8017acc <__lshift>
 8015a64:	4631      	mov	r1, r6
 8015a66:	4605      	mov	r5, r0
 8015a68:	f002 f89c 	bl	8017ba4 <__mcmp>
 8015a6c:	2800      	cmp	r0, #0
 8015a6e:	dd6a      	ble.n	8015b46 <_strtod_l+0x8e6>
 8015a70:	9904      	ldr	r1, [sp, #16]
 8015a72:	4a55      	ldr	r2, [pc, #340]	; (8015bc8 <_strtod_l+0x968>)
 8015a74:	465b      	mov	r3, fp
 8015a76:	2900      	cmp	r1, #0
 8015a78:	f000 8085 	beq.w	8015b86 <_strtod_l+0x926>
 8015a7c:	ea02 010b 	and.w	r1, r2, fp
 8015a80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015a84:	dc7f      	bgt.n	8015b86 <_strtod_l+0x926>
 8015a86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015a8a:	f77f aeaa 	ble.w	80157e2 <_strtod_l+0x582>
 8015a8e:	4a4f      	ldr	r2, [pc, #316]	; (8015bcc <_strtod_l+0x96c>)
 8015a90:	2300      	movs	r3, #0
 8015a92:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8015a96:	4650      	mov	r0, sl
 8015a98:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8015a9c:	4659      	mov	r1, fp
 8015a9e:	f7ea fdbb 	bl	8000618 <__aeabi_dmul>
 8015aa2:	460b      	mov	r3, r1
 8015aa4:	4303      	orrs	r3, r0
 8015aa6:	bf08      	it	eq
 8015aa8:	2322      	moveq	r3, #34	; 0x22
 8015aaa:	4682      	mov	sl, r0
 8015aac:	468b      	mov	fp, r1
 8015aae:	bf08      	it	eq
 8015ab0:	6023      	streq	r3, [r4, #0]
 8015ab2:	e62b      	b.n	801570c <_strtod_l+0x4ac>
 8015ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8015abc:	ea03 0a0a 	and.w	sl, r3, sl
 8015ac0:	e6de      	b.n	8015880 <_strtod_l+0x620>
 8015ac2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8015ac6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8015aca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8015ace:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8015ad2:	fa01 f308 	lsl.w	r3, r1, r8
 8015ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8015ad8:	9111      	str	r1, [sp, #68]	; 0x44
 8015ada:	e741      	b.n	8015960 <_strtod_l+0x700>
 8015adc:	2300      	movs	r3, #0
 8015ade:	930c      	str	r3, [sp, #48]	; 0x30
 8015ae0:	2301      	movs	r3, #1
 8015ae2:	9311      	str	r3, [sp, #68]	; 0x44
 8015ae4:	e73c      	b.n	8015960 <_strtod_l+0x700>
 8015ae6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015ae8:	4642      	mov	r2, r8
 8015aea:	4620      	mov	r0, r4
 8015aec:	f001 ffee 	bl	8017acc <__lshift>
 8015af0:	901e      	str	r0, [sp, #120]	; 0x78
 8015af2:	2800      	cmp	r0, #0
 8015af4:	f47f af66 	bne.w	80159c4 <_strtod_l+0x764>
 8015af8:	e5fe      	b.n	80156f8 <_strtod_l+0x498>
 8015afa:	465f      	mov	r7, fp
 8015afc:	d16e      	bne.n	8015bdc <_strtod_l+0x97c>
 8015afe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015b00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015b04:	b342      	cbz	r2, 8015b58 <_strtod_l+0x8f8>
 8015b06:	4a32      	ldr	r2, [pc, #200]	; (8015bd0 <_strtod_l+0x970>)
 8015b08:	4293      	cmp	r3, r2
 8015b0a:	d128      	bne.n	8015b5e <_strtod_l+0x8fe>
 8015b0c:	9b04      	ldr	r3, [sp, #16]
 8015b0e:	4650      	mov	r0, sl
 8015b10:	b1eb      	cbz	r3, 8015b4e <_strtod_l+0x8ee>
 8015b12:	4a2d      	ldr	r2, [pc, #180]	; (8015bc8 <_strtod_l+0x968>)
 8015b14:	403a      	ands	r2, r7
 8015b16:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015b1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015b1e:	d819      	bhi.n	8015b54 <_strtod_l+0x8f4>
 8015b20:	0d12      	lsrs	r2, r2, #20
 8015b22:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015b26:	fa01 f303 	lsl.w	r3, r1, r3
 8015b2a:	4298      	cmp	r0, r3
 8015b2c:	d117      	bne.n	8015b5e <_strtod_l+0x8fe>
 8015b2e:	4b29      	ldr	r3, [pc, #164]	; (8015bd4 <_strtod_l+0x974>)
 8015b30:	429f      	cmp	r7, r3
 8015b32:	d102      	bne.n	8015b3a <_strtod_l+0x8da>
 8015b34:	3001      	adds	r0, #1
 8015b36:	f43f addf 	beq.w	80156f8 <_strtod_l+0x498>
 8015b3a:	4b23      	ldr	r3, [pc, #140]	; (8015bc8 <_strtod_l+0x968>)
 8015b3c:	403b      	ands	r3, r7
 8015b3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015b42:	f04f 0a00 	mov.w	sl, #0
 8015b46:	9b04      	ldr	r3, [sp, #16]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d1a0      	bne.n	8015a8e <_strtod_l+0x82e>
 8015b4c:	e5de      	b.n	801570c <_strtod_l+0x4ac>
 8015b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b52:	e7ea      	b.n	8015b2a <_strtod_l+0x8ca>
 8015b54:	460b      	mov	r3, r1
 8015b56:	e7e8      	b.n	8015b2a <_strtod_l+0x8ca>
 8015b58:	ea53 030a 	orrs.w	r3, r3, sl
 8015b5c:	d088      	beq.n	8015a70 <_strtod_l+0x810>
 8015b5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b60:	b1db      	cbz	r3, 8015b9a <_strtod_l+0x93a>
 8015b62:	423b      	tst	r3, r7
 8015b64:	d0ef      	beq.n	8015b46 <_strtod_l+0x8e6>
 8015b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b68:	9a04      	ldr	r2, [sp, #16]
 8015b6a:	4650      	mov	r0, sl
 8015b6c:	4659      	mov	r1, fp
 8015b6e:	b1c3      	cbz	r3, 8015ba2 <_strtod_l+0x942>
 8015b70:	f7ff fb59 	bl	8015226 <sulp>
 8015b74:	4602      	mov	r2, r0
 8015b76:	460b      	mov	r3, r1
 8015b78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015b7c:	f7ea fb96 	bl	80002ac <__adddf3>
 8015b80:	4682      	mov	sl, r0
 8015b82:	468b      	mov	fp, r1
 8015b84:	e7df      	b.n	8015b46 <_strtod_l+0x8e6>
 8015b86:	4013      	ands	r3, r2
 8015b88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015b8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015b90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015b94:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8015b98:	e7d5      	b.n	8015b46 <_strtod_l+0x8e6>
 8015b9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015b9c:	ea13 0f0a 	tst.w	r3, sl
 8015ba0:	e7e0      	b.n	8015b64 <_strtod_l+0x904>
 8015ba2:	f7ff fb40 	bl	8015226 <sulp>
 8015ba6:	4602      	mov	r2, r0
 8015ba8:	460b      	mov	r3, r1
 8015baa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015bae:	f7ea fb7b 	bl	80002a8 <__aeabi_dsub>
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	4682      	mov	sl, r0
 8015bb8:	468b      	mov	fp, r1
 8015bba:	f7ea ff95 	bl	8000ae8 <__aeabi_dcmpeq>
 8015bbe:	2800      	cmp	r0, #0
 8015bc0:	d0c1      	beq.n	8015b46 <_strtod_l+0x8e6>
 8015bc2:	e60e      	b.n	80157e2 <_strtod_l+0x582>
 8015bc4:	fffffc02 	.word	0xfffffc02
 8015bc8:	7ff00000 	.word	0x7ff00000
 8015bcc:	39500000 	.word	0x39500000
 8015bd0:	000fffff 	.word	0x000fffff
 8015bd4:	7fefffff 	.word	0x7fefffff
 8015bd8:	08018f48 	.word	0x08018f48
 8015bdc:	4631      	mov	r1, r6
 8015bde:	4628      	mov	r0, r5
 8015be0:	f002 f95c 	bl	8017e9c <__ratio>
 8015be4:	ec59 8b10 	vmov	r8, r9, d0
 8015be8:	ee10 0a10 	vmov	r0, s0
 8015bec:	2200      	movs	r2, #0
 8015bee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015bf2:	4649      	mov	r1, r9
 8015bf4:	f7ea ff8c 	bl	8000b10 <__aeabi_dcmple>
 8015bf8:	2800      	cmp	r0, #0
 8015bfa:	d07c      	beq.n	8015cf6 <_strtod_l+0xa96>
 8015bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d04c      	beq.n	8015c9c <_strtod_l+0xa3c>
 8015c02:	4b95      	ldr	r3, [pc, #596]	; (8015e58 <_strtod_l+0xbf8>)
 8015c04:	2200      	movs	r2, #0
 8015c06:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8015c0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8015e58 <_strtod_l+0xbf8>
 8015c0e:	f04f 0800 	mov.w	r8, #0
 8015c12:	4b92      	ldr	r3, [pc, #584]	; (8015e5c <_strtod_l+0xbfc>)
 8015c14:	403b      	ands	r3, r7
 8015c16:	9311      	str	r3, [sp, #68]	; 0x44
 8015c18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015c1a:	4b91      	ldr	r3, [pc, #580]	; (8015e60 <_strtod_l+0xc00>)
 8015c1c:	429a      	cmp	r2, r3
 8015c1e:	f040 80b2 	bne.w	8015d86 <_strtod_l+0xb26>
 8015c22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015c26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015c2a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8015c2e:	ec4b ab10 	vmov	d0, sl, fp
 8015c32:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8015c36:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015c3a:	f002 f857 	bl	8017cec <__ulp>
 8015c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015c42:	ec53 2b10 	vmov	r2, r3, d0
 8015c46:	f7ea fce7 	bl	8000618 <__aeabi_dmul>
 8015c4a:	4652      	mov	r2, sl
 8015c4c:	465b      	mov	r3, fp
 8015c4e:	f7ea fb2d 	bl	80002ac <__adddf3>
 8015c52:	460b      	mov	r3, r1
 8015c54:	4981      	ldr	r1, [pc, #516]	; (8015e5c <_strtod_l+0xbfc>)
 8015c56:	4a83      	ldr	r2, [pc, #524]	; (8015e64 <_strtod_l+0xc04>)
 8015c58:	4019      	ands	r1, r3
 8015c5a:	4291      	cmp	r1, r2
 8015c5c:	4682      	mov	sl, r0
 8015c5e:	d95e      	bls.n	8015d1e <_strtod_l+0xabe>
 8015c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c62:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015c66:	4293      	cmp	r3, r2
 8015c68:	d103      	bne.n	8015c72 <_strtod_l+0xa12>
 8015c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c6c:	3301      	adds	r3, #1
 8015c6e:	f43f ad43 	beq.w	80156f8 <_strtod_l+0x498>
 8015c72:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8015e70 <_strtod_l+0xc10>
 8015c76:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8015c7a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015c7c:	4620      	mov	r0, r4
 8015c7e:	f001 fd09 	bl	8017694 <_Bfree>
 8015c82:	9907      	ldr	r1, [sp, #28]
 8015c84:	4620      	mov	r0, r4
 8015c86:	f001 fd05 	bl	8017694 <_Bfree>
 8015c8a:	4631      	mov	r1, r6
 8015c8c:	4620      	mov	r0, r4
 8015c8e:	f001 fd01 	bl	8017694 <_Bfree>
 8015c92:	4629      	mov	r1, r5
 8015c94:	4620      	mov	r0, r4
 8015c96:	f001 fcfd 	bl	8017694 <_Bfree>
 8015c9a:	e613      	b.n	80158c4 <_strtod_l+0x664>
 8015c9c:	f1ba 0f00 	cmp.w	sl, #0
 8015ca0:	d11b      	bne.n	8015cda <_strtod_l+0xa7a>
 8015ca2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015ca6:	b9f3      	cbnz	r3, 8015ce6 <_strtod_l+0xa86>
 8015ca8:	4b6b      	ldr	r3, [pc, #428]	; (8015e58 <_strtod_l+0xbf8>)
 8015caa:	2200      	movs	r2, #0
 8015cac:	4640      	mov	r0, r8
 8015cae:	4649      	mov	r1, r9
 8015cb0:	f7ea ff24 	bl	8000afc <__aeabi_dcmplt>
 8015cb4:	b9d0      	cbnz	r0, 8015cec <_strtod_l+0xa8c>
 8015cb6:	4640      	mov	r0, r8
 8015cb8:	4649      	mov	r1, r9
 8015cba:	4b6b      	ldr	r3, [pc, #428]	; (8015e68 <_strtod_l+0xc08>)
 8015cbc:	2200      	movs	r2, #0
 8015cbe:	f7ea fcab 	bl	8000618 <__aeabi_dmul>
 8015cc2:	4680      	mov	r8, r0
 8015cc4:	4689      	mov	r9, r1
 8015cc6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015cca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8015cce:	931b      	str	r3, [sp, #108]	; 0x6c
 8015cd0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8015cd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8015cd8:	e79b      	b.n	8015c12 <_strtod_l+0x9b2>
 8015cda:	f1ba 0f01 	cmp.w	sl, #1
 8015cde:	d102      	bne.n	8015ce6 <_strtod_l+0xa86>
 8015ce0:	2f00      	cmp	r7, #0
 8015ce2:	f43f ad7e 	beq.w	80157e2 <_strtod_l+0x582>
 8015ce6:	4b61      	ldr	r3, [pc, #388]	; (8015e6c <_strtod_l+0xc0c>)
 8015ce8:	2200      	movs	r2, #0
 8015cea:	e78c      	b.n	8015c06 <_strtod_l+0x9a6>
 8015cec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015e68 <_strtod_l+0xc08>
 8015cf0:	f04f 0800 	mov.w	r8, #0
 8015cf4:	e7e7      	b.n	8015cc6 <_strtod_l+0xa66>
 8015cf6:	4b5c      	ldr	r3, [pc, #368]	; (8015e68 <_strtod_l+0xc08>)
 8015cf8:	4640      	mov	r0, r8
 8015cfa:	4649      	mov	r1, r9
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	f7ea fc8b 	bl	8000618 <__aeabi_dmul>
 8015d02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d04:	4680      	mov	r8, r0
 8015d06:	4689      	mov	r9, r1
 8015d08:	b933      	cbnz	r3, 8015d18 <_strtod_l+0xab8>
 8015d0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015d0e:	9012      	str	r0, [sp, #72]	; 0x48
 8015d10:	9313      	str	r3, [sp, #76]	; 0x4c
 8015d12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015d16:	e7dd      	b.n	8015cd4 <_strtod_l+0xa74>
 8015d18:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8015d1c:	e7f9      	b.n	8015d12 <_strtod_l+0xab2>
 8015d1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015d22:	9b04      	ldr	r3, [sp, #16]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d1a8      	bne.n	8015c7a <_strtod_l+0xa1a>
 8015d28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015d2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015d2e:	0d1b      	lsrs	r3, r3, #20
 8015d30:	051b      	lsls	r3, r3, #20
 8015d32:	429a      	cmp	r2, r3
 8015d34:	d1a1      	bne.n	8015c7a <_strtod_l+0xa1a>
 8015d36:	4640      	mov	r0, r8
 8015d38:	4649      	mov	r1, r9
 8015d3a:	f7ea ffcd 	bl	8000cd8 <__aeabi_d2lz>
 8015d3e:	f7ea fc3d 	bl	80005bc <__aeabi_l2d>
 8015d42:	4602      	mov	r2, r0
 8015d44:	460b      	mov	r3, r1
 8015d46:	4640      	mov	r0, r8
 8015d48:	4649      	mov	r1, r9
 8015d4a:	f7ea faad 	bl	80002a8 <__aeabi_dsub>
 8015d4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015d54:	ea43 030a 	orr.w	r3, r3, sl
 8015d58:	4313      	orrs	r3, r2
 8015d5a:	4680      	mov	r8, r0
 8015d5c:	4689      	mov	r9, r1
 8015d5e:	d053      	beq.n	8015e08 <_strtod_l+0xba8>
 8015d60:	a335      	add	r3, pc, #212	; (adr r3, 8015e38 <_strtod_l+0xbd8>)
 8015d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d66:	f7ea fec9 	bl	8000afc <__aeabi_dcmplt>
 8015d6a:	2800      	cmp	r0, #0
 8015d6c:	f47f acce 	bne.w	801570c <_strtod_l+0x4ac>
 8015d70:	a333      	add	r3, pc, #204	; (adr r3, 8015e40 <_strtod_l+0xbe0>)
 8015d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d76:	4640      	mov	r0, r8
 8015d78:	4649      	mov	r1, r9
 8015d7a:	f7ea fedd 	bl	8000b38 <__aeabi_dcmpgt>
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	f43f af7b 	beq.w	8015c7a <_strtod_l+0xa1a>
 8015d84:	e4c2      	b.n	801570c <_strtod_l+0x4ac>
 8015d86:	9b04      	ldr	r3, [sp, #16]
 8015d88:	b333      	cbz	r3, 8015dd8 <_strtod_l+0xb78>
 8015d8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015d90:	d822      	bhi.n	8015dd8 <_strtod_l+0xb78>
 8015d92:	a32d      	add	r3, pc, #180	; (adr r3, 8015e48 <_strtod_l+0xbe8>)
 8015d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d98:	4640      	mov	r0, r8
 8015d9a:	4649      	mov	r1, r9
 8015d9c:	f7ea feb8 	bl	8000b10 <__aeabi_dcmple>
 8015da0:	b1a0      	cbz	r0, 8015dcc <_strtod_l+0xb6c>
 8015da2:	4649      	mov	r1, r9
 8015da4:	4640      	mov	r0, r8
 8015da6:	f7ea ff0f 	bl	8000bc8 <__aeabi_d2uiz>
 8015daa:	2801      	cmp	r0, #1
 8015dac:	bf38      	it	cc
 8015dae:	2001      	movcc	r0, #1
 8015db0:	f7ea fbb8 	bl	8000524 <__aeabi_ui2d>
 8015db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015db6:	4680      	mov	r8, r0
 8015db8:	4689      	mov	r9, r1
 8015dba:	bb13      	cbnz	r3, 8015e02 <_strtod_l+0xba2>
 8015dbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015dc0:	9014      	str	r0, [sp, #80]	; 0x50
 8015dc2:	9315      	str	r3, [sp, #84]	; 0x54
 8015dc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015dc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8015dcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015dce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015dd0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015dd4:	1a9b      	subs	r3, r3, r2
 8015dd6:	930d      	str	r3, [sp, #52]	; 0x34
 8015dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015ddc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015de0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015de4:	f001 ff82 	bl	8017cec <__ulp>
 8015de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015dec:	ec53 2b10 	vmov	r2, r3, d0
 8015df0:	f7ea fc12 	bl	8000618 <__aeabi_dmul>
 8015df4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015df8:	f7ea fa58 	bl	80002ac <__adddf3>
 8015dfc:	4682      	mov	sl, r0
 8015dfe:	468b      	mov	fp, r1
 8015e00:	e78f      	b.n	8015d22 <_strtod_l+0xac2>
 8015e02:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8015e06:	e7dd      	b.n	8015dc4 <_strtod_l+0xb64>
 8015e08:	a311      	add	r3, pc, #68	; (adr r3, 8015e50 <_strtod_l+0xbf0>)
 8015e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e0e:	f7ea fe75 	bl	8000afc <__aeabi_dcmplt>
 8015e12:	e7b4      	b.n	8015d7e <_strtod_l+0xb1e>
 8015e14:	2300      	movs	r3, #0
 8015e16:	930e      	str	r3, [sp, #56]	; 0x38
 8015e18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015e1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015e1c:	6013      	str	r3, [r2, #0]
 8015e1e:	f7ff ba65 	b.w	80152ec <_strtod_l+0x8c>
 8015e22:	2b65      	cmp	r3, #101	; 0x65
 8015e24:	f43f ab5d 	beq.w	80154e2 <_strtod_l+0x282>
 8015e28:	2b45      	cmp	r3, #69	; 0x45
 8015e2a:	f43f ab5a 	beq.w	80154e2 <_strtod_l+0x282>
 8015e2e:	2201      	movs	r2, #1
 8015e30:	f7ff bb92 	b.w	8015558 <_strtod_l+0x2f8>
 8015e34:	f3af 8000 	nop.w
 8015e38:	94a03595 	.word	0x94a03595
 8015e3c:	3fdfffff 	.word	0x3fdfffff
 8015e40:	35afe535 	.word	0x35afe535
 8015e44:	3fe00000 	.word	0x3fe00000
 8015e48:	ffc00000 	.word	0xffc00000
 8015e4c:	41dfffff 	.word	0x41dfffff
 8015e50:	94a03595 	.word	0x94a03595
 8015e54:	3fcfffff 	.word	0x3fcfffff
 8015e58:	3ff00000 	.word	0x3ff00000
 8015e5c:	7ff00000 	.word	0x7ff00000
 8015e60:	7fe00000 	.word	0x7fe00000
 8015e64:	7c9fffff 	.word	0x7c9fffff
 8015e68:	3fe00000 	.word	0x3fe00000
 8015e6c:	bff00000 	.word	0xbff00000
 8015e70:	7fefffff 	.word	0x7fefffff

08015e74 <_strtod_r>:
 8015e74:	4b01      	ldr	r3, [pc, #4]	; (8015e7c <_strtod_r+0x8>)
 8015e76:	f7ff b9f3 	b.w	8015260 <_strtod_l>
 8015e7a:	bf00      	nop
 8015e7c:	20000220 	.word	0x20000220

08015e80 <_strtol_l.isra.0>:
 8015e80:	2b01      	cmp	r3, #1
 8015e82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e86:	d001      	beq.n	8015e8c <_strtol_l.isra.0+0xc>
 8015e88:	2b24      	cmp	r3, #36	; 0x24
 8015e8a:	d906      	bls.n	8015e9a <_strtol_l.isra.0+0x1a>
 8015e8c:	f7fe f860 	bl	8013f50 <__errno>
 8015e90:	2316      	movs	r3, #22
 8015e92:	6003      	str	r3, [r0, #0]
 8015e94:	2000      	movs	r0, #0
 8015e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e9a:	4f3a      	ldr	r7, [pc, #232]	; (8015f84 <_strtol_l.isra.0+0x104>)
 8015e9c:	468e      	mov	lr, r1
 8015e9e:	4676      	mov	r6, lr
 8015ea0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015ea4:	5de5      	ldrb	r5, [r4, r7]
 8015ea6:	f015 0508 	ands.w	r5, r5, #8
 8015eaa:	d1f8      	bne.n	8015e9e <_strtol_l.isra.0+0x1e>
 8015eac:	2c2d      	cmp	r4, #45	; 0x2d
 8015eae:	d134      	bne.n	8015f1a <_strtol_l.isra.0+0x9a>
 8015eb0:	f89e 4000 	ldrb.w	r4, [lr]
 8015eb4:	f04f 0801 	mov.w	r8, #1
 8015eb8:	f106 0e02 	add.w	lr, r6, #2
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d05c      	beq.n	8015f7a <_strtol_l.isra.0+0xfa>
 8015ec0:	2b10      	cmp	r3, #16
 8015ec2:	d10c      	bne.n	8015ede <_strtol_l.isra.0+0x5e>
 8015ec4:	2c30      	cmp	r4, #48	; 0x30
 8015ec6:	d10a      	bne.n	8015ede <_strtol_l.isra.0+0x5e>
 8015ec8:	f89e 4000 	ldrb.w	r4, [lr]
 8015ecc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015ed0:	2c58      	cmp	r4, #88	; 0x58
 8015ed2:	d14d      	bne.n	8015f70 <_strtol_l.isra.0+0xf0>
 8015ed4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8015ed8:	2310      	movs	r3, #16
 8015eda:	f10e 0e02 	add.w	lr, lr, #2
 8015ede:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8015ee2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8015ee6:	2600      	movs	r6, #0
 8015ee8:	fbbc f9f3 	udiv	r9, ip, r3
 8015eec:	4635      	mov	r5, r6
 8015eee:	fb03 ca19 	mls	sl, r3, r9, ip
 8015ef2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015ef6:	2f09      	cmp	r7, #9
 8015ef8:	d818      	bhi.n	8015f2c <_strtol_l.isra.0+0xac>
 8015efa:	463c      	mov	r4, r7
 8015efc:	42a3      	cmp	r3, r4
 8015efe:	dd24      	ble.n	8015f4a <_strtol_l.isra.0+0xca>
 8015f00:	2e00      	cmp	r6, #0
 8015f02:	db1f      	blt.n	8015f44 <_strtol_l.isra.0+0xc4>
 8015f04:	45a9      	cmp	r9, r5
 8015f06:	d31d      	bcc.n	8015f44 <_strtol_l.isra.0+0xc4>
 8015f08:	d101      	bne.n	8015f0e <_strtol_l.isra.0+0x8e>
 8015f0a:	45a2      	cmp	sl, r4
 8015f0c:	db1a      	blt.n	8015f44 <_strtol_l.isra.0+0xc4>
 8015f0e:	fb05 4503 	mla	r5, r5, r3, r4
 8015f12:	2601      	movs	r6, #1
 8015f14:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015f18:	e7eb      	b.n	8015ef2 <_strtol_l.isra.0+0x72>
 8015f1a:	2c2b      	cmp	r4, #43	; 0x2b
 8015f1c:	bf08      	it	eq
 8015f1e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8015f22:	46a8      	mov	r8, r5
 8015f24:	bf08      	it	eq
 8015f26:	f106 0e02 	addeq.w	lr, r6, #2
 8015f2a:	e7c7      	b.n	8015ebc <_strtol_l.isra.0+0x3c>
 8015f2c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8015f30:	2f19      	cmp	r7, #25
 8015f32:	d801      	bhi.n	8015f38 <_strtol_l.isra.0+0xb8>
 8015f34:	3c37      	subs	r4, #55	; 0x37
 8015f36:	e7e1      	b.n	8015efc <_strtol_l.isra.0+0x7c>
 8015f38:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8015f3c:	2f19      	cmp	r7, #25
 8015f3e:	d804      	bhi.n	8015f4a <_strtol_l.isra.0+0xca>
 8015f40:	3c57      	subs	r4, #87	; 0x57
 8015f42:	e7db      	b.n	8015efc <_strtol_l.isra.0+0x7c>
 8015f44:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8015f48:	e7e4      	b.n	8015f14 <_strtol_l.isra.0+0x94>
 8015f4a:	2e00      	cmp	r6, #0
 8015f4c:	da05      	bge.n	8015f5a <_strtol_l.isra.0+0xda>
 8015f4e:	2322      	movs	r3, #34	; 0x22
 8015f50:	6003      	str	r3, [r0, #0]
 8015f52:	4665      	mov	r5, ip
 8015f54:	b942      	cbnz	r2, 8015f68 <_strtol_l.isra.0+0xe8>
 8015f56:	4628      	mov	r0, r5
 8015f58:	e79d      	b.n	8015e96 <_strtol_l.isra.0+0x16>
 8015f5a:	f1b8 0f00 	cmp.w	r8, #0
 8015f5e:	d000      	beq.n	8015f62 <_strtol_l.isra.0+0xe2>
 8015f60:	426d      	negs	r5, r5
 8015f62:	2a00      	cmp	r2, #0
 8015f64:	d0f7      	beq.n	8015f56 <_strtol_l.isra.0+0xd6>
 8015f66:	b10e      	cbz	r6, 8015f6c <_strtol_l.isra.0+0xec>
 8015f68:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8015f6c:	6011      	str	r1, [r2, #0]
 8015f6e:	e7f2      	b.n	8015f56 <_strtol_l.isra.0+0xd6>
 8015f70:	2430      	movs	r4, #48	; 0x30
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d1b3      	bne.n	8015ede <_strtol_l.isra.0+0x5e>
 8015f76:	2308      	movs	r3, #8
 8015f78:	e7b1      	b.n	8015ede <_strtol_l.isra.0+0x5e>
 8015f7a:	2c30      	cmp	r4, #48	; 0x30
 8015f7c:	d0a4      	beq.n	8015ec8 <_strtol_l.isra.0+0x48>
 8015f7e:	230a      	movs	r3, #10
 8015f80:	e7ad      	b.n	8015ede <_strtol_l.isra.0+0x5e>
 8015f82:	bf00      	nop
 8015f84:	08018d7d 	.word	0x08018d7d

08015f88 <_strtol_r>:
 8015f88:	f7ff bf7a 	b.w	8015e80 <_strtol_l.isra.0>

08015f8c <strtol>:
 8015f8c:	4613      	mov	r3, r2
 8015f8e:	460a      	mov	r2, r1
 8015f90:	4601      	mov	r1, r0
 8015f92:	4802      	ldr	r0, [pc, #8]	; (8015f9c <strtol+0x10>)
 8015f94:	6800      	ldr	r0, [r0, #0]
 8015f96:	f7ff bf73 	b.w	8015e80 <_strtol_l.isra.0>
 8015f9a:	bf00      	nop
 8015f9c:	200001b8 	.word	0x200001b8

08015fa0 <_vsniprintf_r>:
 8015fa0:	b530      	push	{r4, r5, lr}
 8015fa2:	1e14      	subs	r4, r2, #0
 8015fa4:	4605      	mov	r5, r0
 8015fa6:	b09b      	sub	sp, #108	; 0x6c
 8015fa8:	4618      	mov	r0, r3
 8015faa:	da05      	bge.n	8015fb8 <_vsniprintf_r+0x18>
 8015fac:	238b      	movs	r3, #139	; 0x8b
 8015fae:	602b      	str	r3, [r5, #0]
 8015fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015fb4:	b01b      	add	sp, #108	; 0x6c
 8015fb6:	bd30      	pop	{r4, r5, pc}
 8015fb8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015fbc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015fc0:	bf14      	ite	ne
 8015fc2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8015fc6:	4623      	moveq	r3, r4
 8015fc8:	9302      	str	r3, [sp, #8]
 8015fca:	9305      	str	r3, [sp, #20]
 8015fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fd0:	9100      	str	r1, [sp, #0]
 8015fd2:	9104      	str	r1, [sp, #16]
 8015fd4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015fd8:	4602      	mov	r2, r0
 8015fda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015fdc:	4669      	mov	r1, sp
 8015fde:	4628      	mov	r0, r5
 8015fe0:	f002 f83e 	bl	8018060 <_svfiprintf_r>
 8015fe4:	1c43      	adds	r3, r0, #1
 8015fe6:	bfbc      	itt	lt
 8015fe8:	238b      	movlt	r3, #139	; 0x8b
 8015fea:	602b      	strlt	r3, [r5, #0]
 8015fec:	2c00      	cmp	r4, #0
 8015fee:	d0e1      	beq.n	8015fb4 <_vsniprintf_r+0x14>
 8015ff0:	9b00      	ldr	r3, [sp, #0]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	701a      	strb	r2, [r3, #0]
 8015ff6:	e7dd      	b.n	8015fb4 <_vsniprintf_r+0x14>

08015ff8 <vsniprintf>:
 8015ff8:	b507      	push	{r0, r1, r2, lr}
 8015ffa:	9300      	str	r3, [sp, #0]
 8015ffc:	4613      	mov	r3, r2
 8015ffe:	460a      	mov	r2, r1
 8016000:	4601      	mov	r1, r0
 8016002:	4803      	ldr	r0, [pc, #12]	; (8016010 <vsniprintf+0x18>)
 8016004:	6800      	ldr	r0, [r0, #0]
 8016006:	f7ff ffcb 	bl	8015fa0 <_vsniprintf_r>
 801600a:	b003      	add	sp, #12
 801600c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016010:	200001b8 	.word	0x200001b8

08016014 <_write_r>:
 8016014:	b538      	push	{r3, r4, r5, lr}
 8016016:	4d07      	ldr	r5, [pc, #28]	; (8016034 <_write_r+0x20>)
 8016018:	4604      	mov	r4, r0
 801601a:	4608      	mov	r0, r1
 801601c:	4611      	mov	r1, r2
 801601e:	2200      	movs	r2, #0
 8016020:	602a      	str	r2, [r5, #0]
 8016022:	461a      	mov	r2, r3
 8016024:	f7ee f827 	bl	8004076 <_write>
 8016028:	1c43      	adds	r3, r0, #1
 801602a:	d102      	bne.n	8016032 <_write_r+0x1e>
 801602c:	682b      	ldr	r3, [r5, #0]
 801602e:	b103      	cbz	r3, 8016032 <_write_r+0x1e>
 8016030:	6023      	str	r3, [r4, #0]
 8016032:	bd38      	pop	{r3, r4, r5, pc}
 8016034:	2000cc08 	.word	0x2000cc08

08016038 <_close_r>:
 8016038:	b538      	push	{r3, r4, r5, lr}
 801603a:	4d06      	ldr	r5, [pc, #24]	; (8016054 <_close_r+0x1c>)
 801603c:	2300      	movs	r3, #0
 801603e:	4604      	mov	r4, r0
 8016040:	4608      	mov	r0, r1
 8016042:	602b      	str	r3, [r5, #0]
 8016044:	f7ee f833 	bl	80040ae <_close>
 8016048:	1c43      	adds	r3, r0, #1
 801604a:	d102      	bne.n	8016052 <_close_r+0x1a>
 801604c:	682b      	ldr	r3, [r5, #0]
 801604e:	b103      	cbz	r3, 8016052 <_close_r+0x1a>
 8016050:	6023      	str	r3, [r4, #0]
 8016052:	bd38      	pop	{r3, r4, r5, pc}
 8016054:	2000cc08 	.word	0x2000cc08

08016058 <quorem>:
 8016058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801605c:	6903      	ldr	r3, [r0, #16]
 801605e:	690c      	ldr	r4, [r1, #16]
 8016060:	42a3      	cmp	r3, r4
 8016062:	4607      	mov	r7, r0
 8016064:	f2c0 8081 	blt.w	801616a <quorem+0x112>
 8016068:	3c01      	subs	r4, #1
 801606a:	f101 0814 	add.w	r8, r1, #20
 801606e:	f100 0514 	add.w	r5, r0, #20
 8016072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016076:	9301      	str	r3, [sp, #4]
 8016078:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801607c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016080:	3301      	adds	r3, #1
 8016082:	429a      	cmp	r2, r3
 8016084:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016088:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801608c:	fbb2 f6f3 	udiv	r6, r2, r3
 8016090:	d331      	bcc.n	80160f6 <quorem+0x9e>
 8016092:	f04f 0e00 	mov.w	lr, #0
 8016096:	4640      	mov	r0, r8
 8016098:	46ac      	mov	ip, r5
 801609a:	46f2      	mov	sl, lr
 801609c:	f850 2b04 	ldr.w	r2, [r0], #4
 80160a0:	b293      	uxth	r3, r2
 80160a2:	fb06 e303 	mla	r3, r6, r3, lr
 80160a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80160aa:	b29b      	uxth	r3, r3
 80160ac:	ebaa 0303 	sub.w	r3, sl, r3
 80160b0:	0c12      	lsrs	r2, r2, #16
 80160b2:	f8dc a000 	ldr.w	sl, [ip]
 80160b6:	fb06 e202 	mla	r2, r6, r2, lr
 80160ba:	fa13 f38a 	uxtah	r3, r3, sl
 80160be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80160c2:	fa1f fa82 	uxth.w	sl, r2
 80160c6:	f8dc 2000 	ldr.w	r2, [ip]
 80160ca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80160ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80160d2:	b29b      	uxth	r3, r3
 80160d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80160d8:	4581      	cmp	r9, r0
 80160da:	f84c 3b04 	str.w	r3, [ip], #4
 80160de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80160e2:	d2db      	bcs.n	801609c <quorem+0x44>
 80160e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80160e8:	b92b      	cbnz	r3, 80160f6 <quorem+0x9e>
 80160ea:	9b01      	ldr	r3, [sp, #4]
 80160ec:	3b04      	subs	r3, #4
 80160ee:	429d      	cmp	r5, r3
 80160f0:	461a      	mov	r2, r3
 80160f2:	d32e      	bcc.n	8016152 <quorem+0xfa>
 80160f4:	613c      	str	r4, [r7, #16]
 80160f6:	4638      	mov	r0, r7
 80160f8:	f001 fd54 	bl	8017ba4 <__mcmp>
 80160fc:	2800      	cmp	r0, #0
 80160fe:	db24      	blt.n	801614a <quorem+0xf2>
 8016100:	3601      	adds	r6, #1
 8016102:	4628      	mov	r0, r5
 8016104:	f04f 0c00 	mov.w	ip, #0
 8016108:	f858 2b04 	ldr.w	r2, [r8], #4
 801610c:	f8d0 e000 	ldr.w	lr, [r0]
 8016110:	b293      	uxth	r3, r2
 8016112:	ebac 0303 	sub.w	r3, ip, r3
 8016116:	0c12      	lsrs	r2, r2, #16
 8016118:	fa13 f38e 	uxtah	r3, r3, lr
 801611c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016120:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016124:	b29b      	uxth	r3, r3
 8016126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801612a:	45c1      	cmp	r9, r8
 801612c:	f840 3b04 	str.w	r3, [r0], #4
 8016130:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016134:	d2e8      	bcs.n	8016108 <quorem+0xb0>
 8016136:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801613a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801613e:	b922      	cbnz	r2, 801614a <quorem+0xf2>
 8016140:	3b04      	subs	r3, #4
 8016142:	429d      	cmp	r5, r3
 8016144:	461a      	mov	r2, r3
 8016146:	d30a      	bcc.n	801615e <quorem+0x106>
 8016148:	613c      	str	r4, [r7, #16]
 801614a:	4630      	mov	r0, r6
 801614c:	b003      	add	sp, #12
 801614e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016152:	6812      	ldr	r2, [r2, #0]
 8016154:	3b04      	subs	r3, #4
 8016156:	2a00      	cmp	r2, #0
 8016158:	d1cc      	bne.n	80160f4 <quorem+0x9c>
 801615a:	3c01      	subs	r4, #1
 801615c:	e7c7      	b.n	80160ee <quorem+0x96>
 801615e:	6812      	ldr	r2, [r2, #0]
 8016160:	3b04      	subs	r3, #4
 8016162:	2a00      	cmp	r2, #0
 8016164:	d1f0      	bne.n	8016148 <quorem+0xf0>
 8016166:	3c01      	subs	r4, #1
 8016168:	e7eb      	b.n	8016142 <quorem+0xea>
 801616a:	2000      	movs	r0, #0
 801616c:	e7ee      	b.n	801614c <quorem+0xf4>
	...

08016170 <_dtoa_r>:
 8016170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016174:	ed2d 8b02 	vpush	{d8}
 8016178:	ec57 6b10 	vmov	r6, r7, d0
 801617c:	b095      	sub	sp, #84	; 0x54
 801617e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016180:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016184:	9105      	str	r1, [sp, #20]
 8016186:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801618a:	4604      	mov	r4, r0
 801618c:	9209      	str	r2, [sp, #36]	; 0x24
 801618e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016190:	b975      	cbnz	r5, 80161b0 <_dtoa_r+0x40>
 8016192:	2010      	movs	r0, #16
 8016194:	f7fe f800 	bl	8014198 <malloc>
 8016198:	4602      	mov	r2, r0
 801619a:	6260      	str	r0, [r4, #36]	; 0x24
 801619c:	b920      	cbnz	r0, 80161a8 <_dtoa_r+0x38>
 801619e:	4bb2      	ldr	r3, [pc, #712]	; (8016468 <_dtoa_r+0x2f8>)
 80161a0:	21ea      	movs	r1, #234	; 0xea
 80161a2:	48b2      	ldr	r0, [pc, #712]	; (801646c <_dtoa_r+0x2fc>)
 80161a4:	f002 f886 	bl	80182b4 <__assert_func>
 80161a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80161ac:	6005      	str	r5, [r0, #0]
 80161ae:	60c5      	str	r5, [r0, #12]
 80161b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80161b2:	6819      	ldr	r1, [r3, #0]
 80161b4:	b151      	cbz	r1, 80161cc <_dtoa_r+0x5c>
 80161b6:	685a      	ldr	r2, [r3, #4]
 80161b8:	604a      	str	r2, [r1, #4]
 80161ba:	2301      	movs	r3, #1
 80161bc:	4093      	lsls	r3, r2
 80161be:	608b      	str	r3, [r1, #8]
 80161c0:	4620      	mov	r0, r4
 80161c2:	f001 fa67 	bl	8017694 <_Bfree>
 80161c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80161c8:	2200      	movs	r2, #0
 80161ca:	601a      	str	r2, [r3, #0]
 80161cc:	1e3b      	subs	r3, r7, #0
 80161ce:	bfb9      	ittee	lt
 80161d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80161d4:	9303      	strlt	r3, [sp, #12]
 80161d6:	2300      	movge	r3, #0
 80161d8:	f8c8 3000 	strge.w	r3, [r8]
 80161dc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80161e0:	4ba3      	ldr	r3, [pc, #652]	; (8016470 <_dtoa_r+0x300>)
 80161e2:	bfbc      	itt	lt
 80161e4:	2201      	movlt	r2, #1
 80161e6:	f8c8 2000 	strlt.w	r2, [r8]
 80161ea:	ea33 0309 	bics.w	r3, r3, r9
 80161ee:	d11b      	bne.n	8016228 <_dtoa_r+0xb8>
 80161f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80161f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80161f6:	6013      	str	r3, [r2, #0]
 80161f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80161fc:	4333      	orrs	r3, r6
 80161fe:	f000 857a 	beq.w	8016cf6 <_dtoa_r+0xb86>
 8016202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016204:	b963      	cbnz	r3, 8016220 <_dtoa_r+0xb0>
 8016206:	4b9b      	ldr	r3, [pc, #620]	; (8016474 <_dtoa_r+0x304>)
 8016208:	e024      	b.n	8016254 <_dtoa_r+0xe4>
 801620a:	4b9b      	ldr	r3, [pc, #620]	; (8016478 <_dtoa_r+0x308>)
 801620c:	9300      	str	r3, [sp, #0]
 801620e:	3308      	adds	r3, #8
 8016210:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016212:	6013      	str	r3, [r2, #0]
 8016214:	9800      	ldr	r0, [sp, #0]
 8016216:	b015      	add	sp, #84	; 0x54
 8016218:	ecbd 8b02 	vpop	{d8}
 801621c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016220:	4b94      	ldr	r3, [pc, #592]	; (8016474 <_dtoa_r+0x304>)
 8016222:	9300      	str	r3, [sp, #0]
 8016224:	3303      	adds	r3, #3
 8016226:	e7f3      	b.n	8016210 <_dtoa_r+0xa0>
 8016228:	ed9d 7b02 	vldr	d7, [sp, #8]
 801622c:	2200      	movs	r2, #0
 801622e:	ec51 0b17 	vmov	r0, r1, d7
 8016232:	2300      	movs	r3, #0
 8016234:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8016238:	f7ea fc56 	bl	8000ae8 <__aeabi_dcmpeq>
 801623c:	4680      	mov	r8, r0
 801623e:	b158      	cbz	r0, 8016258 <_dtoa_r+0xe8>
 8016240:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016242:	2301      	movs	r3, #1
 8016244:	6013      	str	r3, [r2, #0]
 8016246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016248:	2b00      	cmp	r3, #0
 801624a:	f000 8551 	beq.w	8016cf0 <_dtoa_r+0xb80>
 801624e:	488b      	ldr	r0, [pc, #556]	; (801647c <_dtoa_r+0x30c>)
 8016250:	6018      	str	r0, [r3, #0]
 8016252:	1e43      	subs	r3, r0, #1
 8016254:	9300      	str	r3, [sp, #0]
 8016256:	e7dd      	b.n	8016214 <_dtoa_r+0xa4>
 8016258:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801625c:	aa12      	add	r2, sp, #72	; 0x48
 801625e:	a913      	add	r1, sp, #76	; 0x4c
 8016260:	4620      	mov	r0, r4
 8016262:	f001 fdbf 	bl	8017de4 <__d2b>
 8016266:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801626a:	4683      	mov	fp, r0
 801626c:	2d00      	cmp	r5, #0
 801626e:	d07c      	beq.n	801636a <_dtoa_r+0x1fa>
 8016270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016272:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8016276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801627a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801627e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8016282:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8016286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801628a:	4b7d      	ldr	r3, [pc, #500]	; (8016480 <_dtoa_r+0x310>)
 801628c:	2200      	movs	r2, #0
 801628e:	4630      	mov	r0, r6
 8016290:	4639      	mov	r1, r7
 8016292:	f7ea f809 	bl	80002a8 <__aeabi_dsub>
 8016296:	a36e      	add	r3, pc, #440	; (adr r3, 8016450 <_dtoa_r+0x2e0>)
 8016298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801629c:	f7ea f9bc 	bl	8000618 <__aeabi_dmul>
 80162a0:	a36d      	add	r3, pc, #436	; (adr r3, 8016458 <_dtoa_r+0x2e8>)
 80162a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162a6:	f7ea f801 	bl	80002ac <__adddf3>
 80162aa:	4606      	mov	r6, r0
 80162ac:	4628      	mov	r0, r5
 80162ae:	460f      	mov	r7, r1
 80162b0:	f7ea f948 	bl	8000544 <__aeabi_i2d>
 80162b4:	a36a      	add	r3, pc, #424	; (adr r3, 8016460 <_dtoa_r+0x2f0>)
 80162b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ba:	f7ea f9ad 	bl	8000618 <__aeabi_dmul>
 80162be:	4602      	mov	r2, r0
 80162c0:	460b      	mov	r3, r1
 80162c2:	4630      	mov	r0, r6
 80162c4:	4639      	mov	r1, r7
 80162c6:	f7e9 fff1 	bl	80002ac <__adddf3>
 80162ca:	4606      	mov	r6, r0
 80162cc:	460f      	mov	r7, r1
 80162ce:	f7ea fc53 	bl	8000b78 <__aeabi_d2iz>
 80162d2:	2200      	movs	r2, #0
 80162d4:	4682      	mov	sl, r0
 80162d6:	2300      	movs	r3, #0
 80162d8:	4630      	mov	r0, r6
 80162da:	4639      	mov	r1, r7
 80162dc:	f7ea fc0e 	bl	8000afc <__aeabi_dcmplt>
 80162e0:	b148      	cbz	r0, 80162f6 <_dtoa_r+0x186>
 80162e2:	4650      	mov	r0, sl
 80162e4:	f7ea f92e 	bl	8000544 <__aeabi_i2d>
 80162e8:	4632      	mov	r2, r6
 80162ea:	463b      	mov	r3, r7
 80162ec:	f7ea fbfc 	bl	8000ae8 <__aeabi_dcmpeq>
 80162f0:	b908      	cbnz	r0, 80162f6 <_dtoa_r+0x186>
 80162f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80162f6:	f1ba 0f16 	cmp.w	sl, #22
 80162fa:	d854      	bhi.n	80163a6 <_dtoa_r+0x236>
 80162fc:	4b61      	ldr	r3, [pc, #388]	; (8016484 <_dtoa_r+0x314>)
 80162fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016306:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801630a:	f7ea fbf7 	bl	8000afc <__aeabi_dcmplt>
 801630e:	2800      	cmp	r0, #0
 8016310:	d04b      	beq.n	80163aa <_dtoa_r+0x23a>
 8016312:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8016316:	2300      	movs	r3, #0
 8016318:	930e      	str	r3, [sp, #56]	; 0x38
 801631a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801631c:	1b5d      	subs	r5, r3, r5
 801631e:	1e6b      	subs	r3, r5, #1
 8016320:	9304      	str	r3, [sp, #16]
 8016322:	bf43      	ittte	mi
 8016324:	2300      	movmi	r3, #0
 8016326:	f1c5 0801 	rsbmi	r8, r5, #1
 801632a:	9304      	strmi	r3, [sp, #16]
 801632c:	f04f 0800 	movpl.w	r8, #0
 8016330:	f1ba 0f00 	cmp.w	sl, #0
 8016334:	db3b      	blt.n	80163ae <_dtoa_r+0x23e>
 8016336:	9b04      	ldr	r3, [sp, #16]
 8016338:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801633c:	4453      	add	r3, sl
 801633e:	9304      	str	r3, [sp, #16]
 8016340:	2300      	movs	r3, #0
 8016342:	9306      	str	r3, [sp, #24]
 8016344:	9b05      	ldr	r3, [sp, #20]
 8016346:	2b09      	cmp	r3, #9
 8016348:	d869      	bhi.n	801641e <_dtoa_r+0x2ae>
 801634a:	2b05      	cmp	r3, #5
 801634c:	bfc4      	itt	gt
 801634e:	3b04      	subgt	r3, #4
 8016350:	9305      	strgt	r3, [sp, #20]
 8016352:	9b05      	ldr	r3, [sp, #20]
 8016354:	f1a3 0302 	sub.w	r3, r3, #2
 8016358:	bfcc      	ite	gt
 801635a:	2500      	movgt	r5, #0
 801635c:	2501      	movle	r5, #1
 801635e:	2b03      	cmp	r3, #3
 8016360:	d869      	bhi.n	8016436 <_dtoa_r+0x2c6>
 8016362:	e8df f003 	tbb	[pc, r3]
 8016366:	4e2c      	.short	0x4e2c
 8016368:	5a4c      	.short	0x5a4c
 801636a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801636e:	441d      	add	r5, r3
 8016370:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016374:	2b20      	cmp	r3, #32
 8016376:	bfc1      	itttt	gt
 8016378:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801637c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8016380:	fa09 f303 	lslgt.w	r3, r9, r3
 8016384:	fa26 f000 	lsrgt.w	r0, r6, r0
 8016388:	bfda      	itte	le
 801638a:	f1c3 0320 	rsble	r3, r3, #32
 801638e:	fa06 f003 	lslle.w	r0, r6, r3
 8016392:	4318      	orrgt	r0, r3
 8016394:	f7ea f8c6 	bl	8000524 <__aeabi_ui2d>
 8016398:	2301      	movs	r3, #1
 801639a:	4606      	mov	r6, r0
 801639c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80163a0:	3d01      	subs	r5, #1
 80163a2:	9310      	str	r3, [sp, #64]	; 0x40
 80163a4:	e771      	b.n	801628a <_dtoa_r+0x11a>
 80163a6:	2301      	movs	r3, #1
 80163a8:	e7b6      	b.n	8016318 <_dtoa_r+0x1a8>
 80163aa:	900e      	str	r0, [sp, #56]	; 0x38
 80163ac:	e7b5      	b.n	801631a <_dtoa_r+0x1aa>
 80163ae:	f1ca 0300 	rsb	r3, sl, #0
 80163b2:	9306      	str	r3, [sp, #24]
 80163b4:	2300      	movs	r3, #0
 80163b6:	eba8 080a 	sub.w	r8, r8, sl
 80163ba:	930d      	str	r3, [sp, #52]	; 0x34
 80163bc:	e7c2      	b.n	8016344 <_dtoa_r+0x1d4>
 80163be:	2300      	movs	r3, #0
 80163c0:	9308      	str	r3, [sp, #32]
 80163c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	dc39      	bgt.n	801643c <_dtoa_r+0x2cc>
 80163c8:	f04f 0901 	mov.w	r9, #1
 80163cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80163d0:	464b      	mov	r3, r9
 80163d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80163d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80163d8:	2200      	movs	r2, #0
 80163da:	6042      	str	r2, [r0, #4]
 80163dc:	2204      	movs	r2, #4
 80163de:	f102 0614 	add.w	r6, r2, #20
 80163e2:	429e      	cmp	r6, r3
 80163e4:	6841      	ldr	r1, [r0, #4]
 80163e6:	d92f      	bls.n	8016448 <_dtoa_r+0x2d8>
 80163e8:	4620      	mov	r0, r4
 80163ea:	f001 f913 	bl	8017614 <_Balloc>
 80163ee:	9000      	str	r0, [sp, #0]
 80163f0:	2800      	cmp	r0, #0
 80163f2:	d14b      	bne.n	801648c <_dtoa_r+0x31c>
 80163f4:	4b24      	ldr	r3, [pc, #144]	; (8016488 <_dtoa_r+0x318>)
 80163f6:	4602      	mov	r2, r0
 80163f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80163fc:	e6d1      	b.n	80161a2 <_dtoa_r+0x32>
 80163fe:	2301      	movs	r3, #1
 8016400:	e7de      	b.n	80163c0 <_dtoa_r+0x250>
 8016402:	2300      	movs	r3, #0
 8016404:	9308      	str	r3, [sp, #32]
 8016406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016408:	eb0a 0903 	add.w	r9, sl, r3
 801640c:	f109 0301 	add.w	r3, r9, #1
 8016410:	2b01      	cmp	r3, #1
 8016412:	9301      	str	r3, [sp, #4]
 8016414:	bfb8      	it	lt
 8016416:	2301      	movlt	r3, #1
 8016418:	e7dd      	b.n	80163d6 <_dtoa_r+0x266>
 801641a:	2301      	movs	r3, #1
 801641c:	e7f2      	b.n	8016404 <_dtoa_r+0x294>
 801641e:	2501      	movs	r5, #1
 8016420:	2300      	movs	r3, #0
 8016422:	9305      	str	r3, [sp, #20]
 8016424:	9508      	str	r5, [sp, #32]
 8016426:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801642a:	2200      	movs	r2, #0
 801642c:	f8cd 9004 	str.w	r9, [sp, #4]
 8016430:	2312      	movs	r3, #18
 8016432:	9209      	str	r2, [sp, #36]	; 0x24
 8016434:	e7cf      	b.n	80163d6 <_dtoa_r+0x266>
 8016436:	2301      	movs	r3, #1
 8016438:	9308      	str	r3, [sp, #32]
 801643a:	e7f4      	b.n	8016426 <_dtoa_r+0x2b6>
 801643c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8016440:	f8cd 9004 	str.w	r9, [sp, #4]
 8016444:	464b      	mov	r3, r9
 8016446:	e7c6      	b.n	80163d6 <_dtoa_r+0x266>
 8016448:	3101      	adds	r1, #1
 801644a:	6041      	str	r1, [r0, #4]
 801644c:	0052      	lsls	r2, r2, #1
 801644e:	e7c6      	b.n	80163de <_dtoa_r+0x26e>
 8016450:	636f4361 	.word	0x636f4361
 8016454:	3fd287a7 	.word	0x3fd287a7
 8016458:	8b60c8b3 	.word	0x8b60c8b3
 801645c:	3fc68a28 	.word	0x3fc68a28
 8016460:	509f79fb 	.word	0x509f79fb
 8016464:	3fd34413 	.word	0x3fd34413
 8016468:	08018f7d 	.word	0x08018f7d
 801646c:	08018f94 	.word	0x08018f94
 8016470:	7ff00000 	.word	0x7ff00000
 8016474:	08018f79 	.word	0x08018f79
 8016478:	08018f70 	.word	0x08018f70
 801647c:	08018ef5 	.word	0x08018ef5
 8016480:	3ff80000 	.word	0x3ff80000
 8016484:	08019110 	.word	0x08019110
 8016488:	08018ff3 	.word	0x08018ff3
 801648c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801648e:	9a00      	ldr	r2, [sp, #0]
 8016490:	601a      	str	r2, [r3, #0]
 8016492:	9b01      	ldr	r3, [sp, #4]
 8016494:	2b0e      	cmp	r3, #14
 8016496:	f200 80ad 	bhi.w	80165f4 <_dtoa_r+0x484>
 801649a:	2d00      	cmp	r5, #0
 801649c:	f000 80aa 	beq.w	80165f4 <_dtoa_r+0x484>
 80164a0:	f1ba 0f00 	cmp.w	sl, #0
 80164a4:	dd36      	ble.n	8016514 <_dtoa_r+0x3a4>
 80164a6:	4ac3      	ldr	r2, [pc, #780]	; (80167b4 <_dtoa_r+0x644>)
 80164a8:	f00a 030f 	and.w	r3, sl, #15
 80164ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80164b0:	ed93 7b00 	vldr	d7, [r3]
 80164b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80164b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80164bc:	eeb0 8a47 	vmov.f32	s16, s14
 80164c0:	eef0 8a67 	vmov.f32	s17, s15
 80164c4:	d016      	beq.n	80164f4 <_dtoa_r+0x384>
 80164c6:	4bbc      	ldr	r3, [pc, #752]	; (80167b8 <_dtoa_r+0x648>)
 80164c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80164cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80164d0:	f7ea f9cc 	bl	800086c <__aeabi_ddiv>
 80164d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80164d8:	f007 070f 	and.w	r7, r7, #15
 80164dc:	2503      	movs	r5, #3
 80164de:	4eb6      	ldr	r6, [pc, #728]	; (80167b8 <_dtoa_r+0x648>)
 80164e0:	b957      	cbnz	r7, 80164f8 <_dtoa_r+0x388>
 80164e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80164e6:	ec53 2b18 	vmov	r2, r3, d8
 80164ea:	f7ea f9bf 	bl	800086c <__aeabi_ddiv>
 80164ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80164f2:	e029      	b.n	8016548 <_dtoa_r+0x3d8>
 80164f4:	2502      	movs	r5, #2
 80164f6:	e7f2      	b.n	80164de <_dtoa_r+0x36e>
 80164f8:	07f9      	lsls	r1, r7, #31
 80164fa:	d508      	bpl.n	801650e <_dtoa_r+0x39e>
 80164fc:	ec51 0b18 	vmov	r0, r1, d8
 8016500:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016504:	f7ea f888 	bl	8000618 <__aeabi_dmul>
 8016508:	ec41 0b18 	vmov	d8, r0, r1
 801650c:	3501      	adds	r5, #1
 801650e:	107f      	asrs	r7, r7, #1
 8016510:	3608      	adds	r6, #8
 8016512:	e7e5      	b.n	80164e0 <_dtoa_r+0x370>
 8016514:	f000 80a6 	beq.w	8016664 <_dtoa_r+0x4f4>
 8016518:	f1ca 0600 	rsb	r6, sl, #0
 801651c:	4ba5      	ldr	r3, [pc, #660]	; (80167b4 <_dtoa_r+0x644>)
 801651e:	4fa6      	ldr	r7, [pc, #664]	; (80167b8 <_dtoa_r+0x648>)
 8016520:	f006 020f 	and.w	r2, r6, #15
 8016524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801652c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016530:	f7ea f872 	bl	8000618 <__aeabi_dmul>
 8016534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016538:	1136      	asrs	r6, r6, #4
 801653a:	2300      	movs	r3, #0
 801653c:	2502      	movs	r5, #2
 801653e:	2e00      	cmp	r6, #0
 8016540:	f040 8085 	bne.w	801664e <_dtoa_r+0x4de>
 8016544:	2b00      	cmp	r3, #0
 8016546:	d1d2      	bne.n	80164ee <_dtoa_r+0x37e>
 8016548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801654a:	2b00      	cmp	r3, #0
 801654c:	f000 808c 	beq.w	8016668 <_dtoa_r+0x4f8>
 8016550:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016554:	4b99      	ldr	r3, [pc, #612]	; (80167bc <_dtoa_r+0x64c>)
 8016556:	2200      	movs	r2, #0
 8016558:	4630      	mov	r0, r6
 801655a:	4639      	mov	r1, r7
 801655c:	f7ea face 	bl	8000afc <__aeabi_dcmplt>
 8016560:	2800      	cmp	r0, #0
 8016562:	f000 8081 	beq.w	8016668 <_dtoa_r+0x4f8>
 8016566:	9b01      	ldr	r3, [sp, #4]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d07d      	beq.n	8016668 <_dtoa_r+0x4f8>
 801656c:	f1b9 0f00 	cmp.w	r9, #0
 8016570:	dd3c      	ble.n	80165ec <_dtoa_r+0x47c>
 8016572:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8016576:	9307      	str	r3, [sp, #28]
 8016578:	2200      	movs	r2, #0
 801657a:	4b91      	ldr	r3, [pc, #580]	; (80167c0 <_dtoa_r+0x650>)
 801657c:	4630      	mov	r0, r6
 801657e:	4639      	mov	r1, r7
 8016580:	f7ea f84a 	bl	8000618 <__aeabi_dmul>
 8016584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016588:	3501      	adds	r5, #1
 801658a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801658e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016592:	4628      	mov	r0, r5
 8016594:	f7e9 ffd6 	bl	8000544 <__aeabi_i2d>
 8016598:	4632      	mov	r2, r6
 801659a:	463b      	mov	r3, r7
 801659c:	f7ea f83c 	bl	8000618 <__aeabi_dmul>
 80165a0:	4b88      	ldr	r3, [pc, #544]	; (80167c4 <_dtoa_r+0x654>)
 80165a2:	2200      	movs	r2, #0
 80165a4:	f7e9 fe82 	bl	80002ac <__adddf3>
 80165a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80165ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80165b0:	9303      	str	r3, [sp, #12]
 80165b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d15c      	bne.n	8016672 <_dtoa_r+0x502>
 80165b8:	4b83      	ldr	r3, [pc, #524]	; (80167c8 <_dtoa_r+0x658>)
 80165ba:	2200      	movs	r2, #0
 80165bc:	4630      	mov	r0, r6
 80165be:	4639      	mov	r1, r7
 80165c0:	f7e9 fe72 	bl	80002a8 <__aeabi_dsub>
 80165c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80165c8:	4606      	mov	r6, r0
 80165ca:	460f      	mov	r7, r1
 80165cc:	f7ea fab4 	bl	8000b38 <__aeabi_dcmpgt>
 80165d0:	2800      	cmp	r0, #0
 80165d2:	f040 8296 	bne.w	8016b02 <_dtoa_r+0x992>
 80165d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80165da:	4630      	mov	r0, r6
 80165dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80165e0:	4639      	mov	r1, r7
 80165e2:	f7ea fa8b 	bl	8000afc <__aeabi_dcmplt>
 80165e6:	2800      	cmp	r0, #0
 80165e8:	f040 8288 	bne.w	8016afc <_dtoa_r+0x98c>
 80165ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80165f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80165f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	f2c0 8158 	blt.w	80168ac <_dtoa_r+0x73c>
 80165fc:	f1ba 0f0e 	cmp.w	sl, #14
 8016600:	f300 8154 	bgt.w	80168ac <_dtoa_r+0x73c>
 8016604:	4b6b      	ldr	r3, [pc, #428]	; (80167b4 <_dtoa_r+0x644>)
 8016606:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801660a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801660e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016610:	2b00      	cmp	r3, #0
 8016612:	f280 80e3 	bge.w	80167dc <_dtoa_r+0x66c>
 8016616:	9b01      	ldr	r3, [sp, #4]
 8016618:	2b00      	cmp	r3, #0
 801661a:	f300 80df 	bgt.w	80167dc <_dtoa_r+0x66c>
 801661e:	f040 826d 	bne.w	8016afc <_dtoa_r+0x98c>
 8016622:	4b69      	ldr	r3, [pc, #420]	; (80167c8 <_dtoa_r+0x658>)
 8016624:	2200      	movs	r2, #0
 8016626:	4640      	mov	r0, r8
 8016628:	4649      	mov	r1, r9
 801662a:	f7e9 fff5 	bl	8000618 <__aeabi_dmul>
 801662e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016632:	f7ea fa77 	bl	8000b24 <__aeabi_dcmpge>
 8016636:	9e01      	ldr	r6, [sp, #4]
 8016638:	4637      	mov	r7, r6
 801663a:	2800      	cmp	r0, #0
 801663c:	f040 8243 	bne.w	8016ac6 <_dtoa_r+0x956>
 8016640:	9d00      	ldr	r5, [sp, #0]
 8016642:	2331      	movs	r3, #49	; 0x31
 8016644:	f805 3b01 	strb.w	r3, [r5], #1
 8016648:	f10a 0a01 	add.w	sl, sl, #1
 801664c:	e23f      	b.n	8016ace <_dtoa_r+0x95e>
 801664e:	07f2      	lsls	r2, r6, #31
 8016650:	d505      	bpl.n	801665e <_dtoa_r+0x4ee>
 8016652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016656:	f7e9 ffdf 	bl	8000618 <__aeabi_dmul>
 801665a:	3501      	adds	r5, #1
 801665c:	2301      	movs	r3, #1
 801665e:	1076      	asrs	r6, r6, #1
 8016660:	3708      	adds	r7, #8
 8016662:	e76c      	b.n	801653e <_dtoa_r+0x3ce>
 8016664:	2502      	movs	r5, #2
 8016666:	e76f      	b.n	8016548 <_dtoa_r+0x3d8>
 8016668:	9b01      	ldr	r3, [sp, #4]
 801666a:	f8cd a01c 	str.w	sl, [sp, #28]
 801666e:	930c      	str	r3, [sp, #48]	; 0x30
 8016670:	e78d      	b.n	801658e <_dtoa_r+0x41e>
 8016672:	9900      	ldr	r1, [sp, #0]
 8016674:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016678:	4b4e      	ldr	r3, [pc, #312]	; (80167b4 <_dtoa_r+0x644>)
 801667a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801667e:	4401      	add	r1, r0
 8016680:	9102      	str	r1, [sp, #8]
 8016682:	9908      	ldr	r1, [sp, #32]
 8016684:	eeb0 8a47 	vmov.f32	s16, s14
 8016688:	eef0 8a67 	vmov.f32	s17, s15
 801668c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016690:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016694:	2900      	cmp	r1, #0
 8016696:	d045      	beq.n	8016724 <_dtoa_r+0x5b4>
 8016698:	494c      	ldr	r1, [pc, #304]	; (80167cc <_dtoa_r+0x65c>)
 801669a:	2000      	movs	r0, #0
 801669c:	f7ea f8e6 	bl	800086c <__aeabi_ddiv>
 80166a0:	ec53 2b18 	vmov	r2, r3, d8
 80166a4:	f7e9 fe00 	bl	80002a8 <__aeabi_dsub>
 80166a8:	9d00      	ldr	r5, [sp, #0]
 80166aa:	ec41 0b18 	vmov	d8, r0, r1
 80166ae:	4639      	mov	r1, r7
 80166b0:	4630      	mov	r0, r6
 80166b2:	f7ea fa61 	bl	8000b78 <__aeabi_d2iz>
 80166b6:	900c      	str	r0, [sp, #48]	; 0x30
 80166b8:	f7e9 ff44 	bl	8000544 <__aeabi_i2d>
 80166bc:	4602      	mov	r2, r0
 80166be:	460b      	mov	r3, r1
 80166c0:	4630      	mov	r0, r6
 80166c2:	4639      	mov	r1, r7
 80166c4:	f7e9 fdf0 	bl	80002a8 <__aeabi_dsub>
 80166c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166ca:	3330      	adds	r3, #48	; 0x30
 80166cc:	f805 3b01 	strb.w	r3, [r5], #1
 80166d0:	ec53 2b18 	vmov	r2, r3, d8
 80166d4:	4606      	mov	r6, r0
 80166d6:	460f      	mov	r7, r1
 80166d8:	f7ea fa10 	bl	8000afc <__aeabi_dcmplt>
 80166dc:	2800      	cmp	r0, #0
 80166de:	d165      	bne.n	80167ac <_dtoa_r+0x63c>
 80166e0:	4632      	mov	r2, r6
 80166e2:	463b      	mov	r3, r7
 80166e4:	4935      	ldr	r1, [pc, #212]	; (80167bc <_dtoa_r+0x64c>)
 80166e6:	2000      	movs	r0, #0
 80166e8:	f7e9 fdde 	bl	80002a8 <__aeabi_dsub>
 80166ec:	ec53 2b18 	vmov	r2, r3, d8
 80166f0:	f7ea fa04 	bl	8000afc <__aeabi_dcmplt>
 80166f4:	2800      	cmp	r0, #0
 80166f6:	f040 80b9 	bne.w	801686c <_dtoa_r+0x6fc>
 80166fa:	9b02      	ldr	r3, [sp, #8]
 80166fc:	429d      	cmp	r5, r3
 80166fe:	f43f af75 	beq.w	80165ec <_dtoa_r+0x47c>
 8016702:	4b2f      	ldr	r3, [pc, #188]	; (80167c0 <_dtoa_r+0x650>)
 8016704:	ec51 0b18 	vmov	r0, r1, d8
 8016708:	2200      	movs	r2, #0
 801670a:	f7e9 ff85 	bl	8000618 <__aeabi_dmul>
 801670e:	4b2c      	ldr	r3, [pc, #176]	; (80167c0 <_dtoa_r+0x650>)
 8016710:	ec41 0b18 	vmov	d8, r0, r1
 8016714:	2200      	movs	r2, #0
 8016716:	4630      	mov	r0, r6
 8016718:	4639      	mov	r1, r7
 801671a:	f7e9 ff7d 	bl	8000618 <__aeabi_dmul>
 801671e:	4606      	mov	r6, r0
 8016720:	460f      	mov	r7, r1
 8016722:	e7c4      	b.n	80166ae <_dtoa_r+0x53e>
 8016724:	ec51 0b17 	vmov	r0, r1, d7
 8016728:	f7e9 ff76 	bl	8000618 <__aeabi_dmul>
 801672c:	9b02      	ldr	r3, [sp, #8]
 801672e:	9d00      	ldr	r5, [sp, #0]
 8016730:	930c      	str	r3, [sp, #48]	; 0x30
 8016732:	ec41 0b18 	vmov	d8, r0, r1
 8016736:	4639      	mov	r1, r7
 8016738:	4630      	mov	r0, r6
 801673a:	f7ea fa1d 	bl	8000b78 <__aeabi_d2iz>
 801673e:	9011      	str	r0, [sp, #68]	; 0x44
 8016740:	f7e9 ff00 	bl	8000544 <__aeabi_i2d>
 8016744:	4602      	mov	r2, r0
 8016746:	460b      	mov	r3, r1
 8016748:	4630      	mov	r0, r6
 801674a:	4639      	mov	r1, r7
 801674c:	f7e9 fdac 	bl	80002a8 <__aeabi_dsub>
 8016750:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016752:	3330      	adds	r3, #48	; 0x30
 8016754:	f805 3b01 	strb.w	r3, [r5], #1
 8016758:	9b02      	ldr	r3, [sp, #8]
 801675a:	429d      	cmp	r5, r3
 801675c:	4606      	mov	r6, r0
 801675e:	460f      	mov	r7, r1
 8016760:	f04f 0200 	mov.w	r2, #0
 8016764:	d134      	bne.n	80167d0 <_dtoa_r+0x660>
 8016766:	4b19      	ldr	r3, [pc, #100]	; (80167cc <_dtoa_r+0x65c>)
 8016768:	ec51 0b18 	vmov	r0, r1, d8
 801676c:	f7e9 fd9e 	bl	80002ac <__adddf3>
 8016770:	4602      	mov	r2, r0
 8016772:	460b      	mov	r3, r1
 8016774:	4630      	mov	r0, r6
 8016776:	4639      	mov	r1, r7
 8016778:	f7ea f9de 	bl	8000b38 <__aeabi_dcmpgt>
 801677c:	2800      	cmp	r0, #0
 801677e:	d175      	bne.n	801686c <_dtoa_r+0x6fc>
 8016780:	ec53 2b18 	vmov	r2, r3, d8
 8016784:	4911      	ldr	r1, [pc, #68]	; (80167cc <_dtoa_r+0x65c>)
 8016786:	2000      	movs	r0, #0
 8016788:	f7e9 fd8e 	bl	80002a8 <__aeabi_dsub>
 801678c:	4602      	mov	r2, r0
 801678e:	460b      	mov	r3, r1
 8016790:	4630      	mov	r0, r6
 8016792:	4639      	mov	r1, r7
 8016794:	f7ea f9b2 	bl	8000afc <__aeabi_dcmplt>
 8016798:	2800      	cmp	r0, #0
 801679a:	f43f af27 	beq.w	80165ec <_dtoa_r+0x47c>
 801679e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80167a0:	1e6b      	subs	r3, r5, #1
 80167a2:	930c      	str	r3, [sp, #48]	; 0x30
 80167a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80167a8:	2b30      	cmp	r3, #48	; 0x30
 80167aa:	d0f8      	beq.n	801679e <_dtoa_r+0x62e>
 80167ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80167b0:	e04a      	b.n	8016848 <_dtoa_r+0x6d8>
 80167b2:	bf00      	nop
 80167b4:	08019110 	.word	0x08019110
 80167b8:	080190e8 	.word	0x080190e8
 80167bc:	3ff00000 	.word	0x3ff00000
 80167c0:	40240000 	.word	0x40240000
 80167c4:	401c0000 	.word	0x401c0000
 80167c8:	40140000 	.word	0x40140000
 80167cc:	3fe00000 	.word	0x3fe00000
 80167d0:	4baf      	ldr	r3, [pc, #700]	; (8016a90 <_dtoa_r+0x920>)
 80167d2:	f7e9 ff21 	bl	8000618 <__aeabi_dmul>
 80167d6:	4606      	mov	r6, r0
 80167d8:	460f      	mov	r7, r1
 80167da:	e7ac      	b.n	8016736 <_dtoa_r+0x5c6>
 80167dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80167e0:	9d00      	ldr	r5, [sp, #0]
 80167e2:	4642      	mov	r2, r8
 80167e4:	464b      	mov	r3, r9
 80167e6:	4630      	mov	r0, r6
 80167e8:	4639      	mov	r1, r7
 80167ea:	f7ea f83f 	bl	800086c <__aeabi_ddiv>
 80167ee:	f7ea f9c3 	bl	8000b78 <__aeabi_d2iz>
 80167f2:	9002      	str	r0, [sp, #8]
 80167f4:	f7e9 fea6 	bl	8000544 <__aeabi_i2d>
 80167f8:	4642      	mov	r2, r8
 80167fa:	464b      	mov	r3, r9
 80167fc:	f7e9 ff0c 	bl	8000618 <__aeabi_dmul>
 8016800:	4602      	mov	r2, r0
 8016802:	460b      	mov	r3, r1
 8016804:	4630      	mov	r0, r6
 8016806:	4639      	mov	r1, r7
 8016808:	f7e9 fd4e 	bl	80002a8 <__aeabi_dsub>
 801680c:	9e02      	ldr	r6, [sp, #8]
 801680e:	9f01      	ldr	r7, [sp, #4]
 8016810:	3630      	adds	r6, #48	; 0x30
 8016812:	f805 6b01 	strb.w	r6, [r5], #1
 8016816:	9e00      	ldr	r6, [sp, #0]
 8016818:	1bae      	subs	r6, r5, r6
 801681a:	42b7      	cmp	r7, r6
 801681c:	4602      	mov	r2, r0
 801681e:	460b      	mov	r3, r1
 8016820:	d137      	bne.n	8016892 <_dtoa_r+0x722>
 8016822:	f7e9 fd43 	bl	80002ac <__adddf3>
 8016826:	4642      	mov	r2, r8
 8016828:	464b      	mov	r3, r9
 801682a:	4606      	mov	r6, r0
 801682c:	460f      	mov	r7, r1
 801682e:	f7ea f983 	bl	8000b38 <__aeabi_dcmpgt>
 8016832:	b9c8      	cbnz	r0, 8016868 <_dtoa_r+0x6f8>
 8016834:	4642      	mov	r2, r8
 8016836:	464b      	mov	r3, r9
 8016838:	4630      	mov	r0, r6
 801683a:	4639      	mov	r1, r7
 801683c:	f7ea f954 	bl	8000ae8 <__aeabi_dcmpeq>
 8016840:	b110      	cbz	r0, 8016848 <_dtoa_r+0x6d8>
 8016842:	9b02      	ldr	r3, [sp, #8]
 8016844:	07d9      	lsls	r1, r3, #31
 8016846:	d40f      	bmi.n	8016868 <_dtoa_r+0x6f8>
 8016848:	4620      	mov	r0, r4
 801684a:	4659      	mov	r1, fp
 801684c:	f000 ff22 	bl	8017694 <_Bfree>
 8016850:	2300      	movs	r3, #0
 8016852:	702b      	strb	r3, [r5, #0]
 8016854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016856:	f10a 0001 	add.w	r0, sl, #1
 801685a:	6018      	str	r0, [r3, #0]
 801685c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801685e:	2b00      	cmp	r3, #0
 8016860:	f43f acd8 	beq.w	8016214 <_dtoa_r+0xa4>
 8016864:	601d      	str	r5, [r3, #0]
 8016866:	e4d5      	b.n	8016214 <_dtoa_r+0xa4>
 8016868:	f8cd a01c 	str.w	sl, [sp, #28]
 801686c:	462b      	mov	r3, r5
 801686e:	461d      	mov	r5, r3
 8016870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016874:	2a39      	cmp	r2, #57	; 0x39
 8016876:	d108      	bne.n	801688a <_dtoa_r+0x71a>
 8016878:	9a00      	ldr	r2, [sp, #0]
 801687a:	429a      	cmp	r2, r3
 801687c:	d1f7      	bne.n	801686e <_dtoa_r+0x6fe>
 801687e:	9a07      	ldr	r2, [sp, #28]
 8016880:	9900      	ldr	r1, [sp, #0]
 8016882:	3201      	adds	r2, #1
 8016884:	9207      	str	r2, [sp, #28]
 8016886:	2230      	movs	r2, #48	; 0x30
 8016888:	700a      	strb	r2, [r1, #0]
 801688a:	781a      	ldrb	r2, [r3, #0]
 801688c:	3201      	adds	r2, #1
 801688e:	701a      	strb	r2, [r3, #0]
 8016890:	e78c      	b.n	80167ac <_dtoa_r+0x63c>
 8016892:	4b7f      	ldr	r3, [pc, #508]	; (8016a90 <_dtoa_r+0x920>)
 8016894:	2200      	movs	r2, #0
 8016896:	f7e9 febf 	bl	8000618 <__aeabi_dmul>
 801689a:	2200      	movs	r2, #0
 801689c:	2300      	movs	r3, #0
 801689e:	4606      	mov	r6, r0
 80168a0:	460f      	mov	r7, r1
 80168a2:	f7ea f921 	bl	8000ae8 <__aeabi_dcmpeq>
 80168a6:	2800      	cmp	r0, #0
 80168a8:	d09b      	beq.n	80167e2 <_dtoa_r+0x672>
 80168aa:	e7cd      	b.n	8016848 <_dtoa_r+0x6d8>
 80168ac:	9a08      	ldr	r2, [sp, #32]
 80168ae:	2a00      	cmp	r2, #0
 80168b0:	f000 80c4 	beq.w	8016a3c <_dtoa_r+0x8cc>
 80168b4:	9a05      	ldr	r2, [sp, #20]
 80168b6:	2a01      	cmp	r2, #1
 80168b8:	f300 80a8 	bgt.w	8016a0c <_dtoa_r+0x89c>
 80168bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80168be:	2a00      	cmp	r2, #0
 80168c0:	f000 80a0 	beq.w	8016a04 <_dtoa_r+0x894>
 80168c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80168c8:	9e06      	ldr	r6, [sp, #24]
 80168ca:	4645      	mov	r5, r8
 80168cc:	9a04      	ldr	r2, [sp, #16]
 80168ce:	2101      	movs	r1, #1
 80168d0:	441a      	add	r2, r3
 80168d2:	4620      	mov	r0, r4
 80168d4:	4498      	add	r8, r3
 80168d6:	9204      	str	r2, [sp, #16]
 80168d8:	f000 ffe2 	bl	80178a0 <__i2b>
 80168dc:	4607      	mov	r7, r0
 80168de:	2d00      	cmp	r5, #0
 80168e0:	dd0b      	ble.n	80168fa <_dtoa_r+0x78a>
 80168e2:	9b04      	ldr	r3, [sp, #16]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	dd08      	ble.n	80168fa <_dtoa_r+0x78a>
 80168e8:	42ab      	cmp	r3, r5
 80168ea:	9a04      	ldr	r2, [sp, #16]
 80168ec:	bfa8      	it	ge
 80168ee:	462b      	movge	r3, r5
 80168f0:	eba8 0803 	sub.w	r8, r8, r3
 80168f4:	1aed      	subs	r5, r5, r3
 80168f6:	1ad3      	subs	r3, r2, r3
 80168f8:	9304      	str	r3, [sp, #16]
 80168fa:	9b06      	ldr	r3, [sp, #24]
 80168fc:	b1fb      	cbz	r3, 801693e <_dtoa_r+0x7ce>
 80168fe:	9b08      	ldr	r3, [sp, #32]
 8016900:	2b00      	cmp	r3, #0
 8016902:	f000 809f 	beq.w	8016a44 <_dtoa_r+0x8d4>
 8016906:	2e00      	cmp	r6, #0
 8016908:	dd11      	ble.n	801692e <_dtoa_r+0x7be>
 801690a:	4639      	mov	r1, r7
 801690c:	4632      	mov	r2, r6
 801690e:	4620      	mov	r0, r4
 8016910:	f001 f882 	bl	8017a18 <__pow5mult>
 8016914:	465a      	mov	r2, fp
 8016916:	4601      	mov	r1, r0
 8016918:	4607      	mov	r7, r0
 801691a:	4620      	mov	r0, r4
 801691c:	f000 ffd6 	bl	80178cc <__multiply>
 8016920:	4659      	mov	r1, fp
 8016922:	9007      	str	r0, [sp, #28]
 8016924:	4620      	mov	r0, r4
 8016926:	f000 feb5 	bl	8017694 <_Bfree>
 801692a:	9b07      	ldr	r3, [sp, #28]
 801692c:	469b      	mov	fp, r3
 801692e:	9b06      	ldr	r3, [sp, #24]
 8016930:	1b9a      	subs	r2, r3, r6
 8016932:	d004      	beq.n	801693e <_dtoa_r+0x7ce>
 8016934:	4659      	mov	r1, fp
 8016936:	4620      	mov	r0, r4
 8016938:	f001 f86e 	bl	8017a18 <__pow5mult>
 801693c:	4683      	mov	fp, r0
 801693e:	2101      	movs	r1, #1
 8016940:	4620      	mov	r0, r4
 8016942:	f000 ffad 	bl	80178a0 <__i2b>
 8016946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016948:	2b00      	cmp	r3, #0
 801694a:	4606      	mov	r6, r0
 801694c:	dd7c      	ble.n	8016a48 <_dtoa_r+0x8d8>
 801694e:	461a      	mov	r2, r3
 8016950:	4601      	mov	r1, r0
 8016952:	4620      	mov	r0, r4
 8016954:	f001 f860 	bl	8017a18 <__pow5mult>
 8016958:	9b05      	ldr	r3, [sp, #20]
 801695a:	2b01      	cmp	r3, #1
 801695c:	4606      	mov	r6, r0
 801695e:	dd76      	ble.n	8016a4e <_dtoa_r+0x8de>
 8016960:	2300      	movs	r3, #0
 8016962:	9306      	str	r3, [sp, #24]
 8016964:	6933      	ldr	r3, [r6, #16]
 8016966:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801696a:	6918      	ldr	r0, [r3, #16]
 801696c:	f000 ff48 	bl	8017800 <__hi0bits>
 8016970:	f1c0 0020 	rsb	r0, r0, #32
 8016974:	9b04      	ldr	r3, [sp, #16]
 8016976:	4418      	add	r0, r3
 8016978:	f010 001f 	ands.w	r0, r0, #31
 801697c:	f000 8086 	beq.w	8016a8c <_dtoa_r+0x91c>
 8016980:	f1c0 0320 	rsb	r3, r0, #32
 8016984:	2b04      	cmp	r3, #4
 8016986:	dd7f      	ble.n	8016a88 <_dtoa_r+0x918>
 8016988:	f1c0 001c 	rsb	r0, r0, #28
 801698c:	9b04      	ldr	r3, [sp, #16]
 801698e:	4403      	add	r3, r0
 8016990:	4480      	add	r8, r0
 8016992:	4405      	add	r5, r0
 8016994:	9304      	str	r3, [sp, #16]
 8016996:	f1b8 0f00 	cmp.w	r8, #0
 801699a:	dd05      	ble.n	80169a8 <_dtoa_r+0x838>
 801699c:	4659      	mov	r1, fp
 801699e:	4642      	mov	r2, r8
 80169a0:	4620      	mov	r0, r4
 80169a2:	f001 f893 	bl	8017acc <__lshift>
 80169a6:	4683      	mov	fp, r0
 80169a8:	9b04      	ldr	r3, [sp, #16]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	dd05      	ble.n	80169ba <_dtoa_r+0x84a>
 80169ae:	4631      	mov	r1, r6
 80169b0:	461a      	mov	r2, r3
 80169b2:	4620      	mov	r0, r4
 80169b4:	f001 f88a 	bl	8017acc <__lshift>
 80169b8:	4606      	mov	r6, r0
 80169ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d069      	beq.n	8016a94 <_dtoa_r+0x924>
 80169c0:	4631      	mov	r1, r6
 80169c2:	4658      	mov	r0, fp
 80169c4:	f001 f8ee 	bl	8017ba4 <__mcmp>
 80169c8:	2800      	cmp	r0, #0
 80169ca:	da63      	bge.n	8016a94 <_dtoa_r+0x924>
 80169cc:	2300      	movs	r3, #0
 80169ce:	4659      	mov	r1, fp
 80169d0:	220a      	movs	r2, #10
 80169d2:	4620      	mov	r0, r4
 80169d4:	f000 fe80 	bl	80176d8 <__multadd>
 80169d8:	9b08      	ldr	r3, [sp, #32]
 80169da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80169de:	4683      	mov	fp, r0
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	f000 818f 	beq.w	8016d04 <_dtoa_r+0xb94>
 80169e6:	4639      	mov	r1, r7
 80169e8:	2300      	movs	r3, #0
 80169ea:	220a      	movs	r2, #10
 80169ec:	4620      	mov	r0, r4
 80169ee:	f000 fe73 	bl	80176d8 <__multadd>
 80169f2:	f1b9 0f00 	cmp.w	r9, #0
 80169f6:	4607      	mov	r7, r0
 80169f8:	f300 808e 	bgt.w	8016b18 <_dtoa_r+0x9a8>
 80169fc:	9b05      	ldr	r3, [sp, #20]
 80169fe:	2b02      	cmp	r3, #2
 8016a00:	dc50      	bgt.n	8016aa4 <_dtoa_r+0x934>
 8016a02:	e089      	b.n	8016b18 <_dtoa_r+0x9a8>
 8016a04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016a06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016a0a:	e75d      	b.n	80168c8 <_dtoa_r+0x758>
 8016a0c:	9b01      	ldr	r3, [sp, #4]
 8016a0e:	1e5e      	subs	r6, r3, #1
 8016a10:	9b06      	ldr	r3, [sp, #24]
 8016a12:	42b3      	cmp	r3, r6
 8016a14:	bfbf      	itttt	lt
 8016a16:	9b06      	ldrlt	r3, [sp, #24]
 8016a18:	9606      	strlt	r6, [sp, #24]
 8016a1a:	1af2      	sublt	r2, r6, r3
 8016a1c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8016a1e:	bfb6      	itet	lt
 8016a20:	189b      	addlt	r3, r3, r2
 8016a22:	1b9e      	subge	r6, r3, r6
 8016a24:	930d      	strlt	r3, [sp, #52]	; 0x34
 8016a26:	9b01      	ldr	r3, [sp, #4]
 8016a28:	bfb8      	it	lt
 8016a2a:	2600      	movlt	r6, #0
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	bfb5      	itete	lt
 8016a30:	eba8 0503 	sublt.w	r5, r8, r3
 8016a34:	9b01      	ldrge	r3, [sp, #4]
 8016a36:	2300      	movlt	r3, #0
 8016a38:	4645      	movge	r5, r8
 8016a3a:	e747      	b.n	80168cc <_dtoa_r+0x75c>
 8016a3c:	9e06      	ldr	r6, [sp, #24]
 8016a3e:	9f08      	ldr	r7, [sp, #32]
 8016a40:	4645      	mov	r5, r8
 8016a42:	e74c      	b.n	80168de <_dtoa_r+0x76e>
 8016a44:	9a06      	ldr	r2, [sp, #24]
 8016a46:	e775      	b.n	8016934 <_dtoa_r+0x7c4>
 8016a48:	9b05      	ldr	r3, [sp, #20]
 8016a4a:	2b01      	cmp	r3, #1
 8016a4c:	dc18      	bgt.n	8016a80 <_dtoa_r+0x910>
 8016a4e:	9b02      	ldr	r3, [sp, #8]
 8016a50:	b9b3      	cbnz	r3, 8016a80 <_dtoa_r+0x910>
 8016a52:	9b03      	ldr	r3, [sp, #12]
 8016a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a58:	b9a3      	cbnz	r3, 8016a84 <_dtoa_r+0x914>
 8016a5a:	9b03      	ldr	r3, [sp, #12]
 8016a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016a60:	0d1b      	lsrs	r3, r3, #20
 8016a62:	051b      	lsls	r3, r3, #20
 8016a64:	b12b      	cbz	r3, 8016a72 <_dtoa_r+0x902>
 8016a66:	9b04      	ldr	r3, [sp, #16]
 8016a68:	3301      	adds	r3, #1
 8016a6a:	9304      	str	r3, [sp, #16]
 8016a6c:	f108 0801 	add.w	r8, r8, #1
 8016a70:	2301      	movs	r3, #1
 8016a72:	9306      	str	r3, [sp, #24]
 8016a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	f47f af74 	bne.w	8016964 <_dtoa_r+0x7f4>
 8016a7c:	2001      	movs	r0, #1
 8016a7e:	e779      	b.n	8016974 <_dtoa_r+0x804>
 8016a80:	2300      	movs	r3, #0
 8016a82:	e7f6      	b.n	8016a72 <_dtoa_r+0x902>
 8016a84:	9b02      	ldr	r3, [sp, #8]
 8016a86:	e7f4      	b.n	8016a72 <_dtoa_r+0x902>
 8016a88:	d085      	beq.n	8016996 <_dtoa_r+0x826>
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	301c      	adds	r0, #28
 8016a8e:	e77d      	b.n	801698c <_dtoa_r+0x81c>
 8016a90:	40240000 	.word	0x40240000
 8016a94:	9b01      	ldr	r3, [sp, #4]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	dc38      	bgt.n	8016b0c <_dtoa_r+0x99c>
 8016a9a:	9b05      	ldr	r3, [sp, #20]
 8016a9c:	2b02      	cmp	r3, #2
 8016a9e:	dd35      	ble.n	8016b0c <_dtoa_r+0x99c>
 8016aa0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016aa4:	f1b9 0f00 	cmp.w	r9, #0
 8016aa8:	d10d      	bne.n	8016ac6 <_dtoa_r+0x956>
 8016aaa:	4631      	mov	r1, r6
 8016aac:	464b      	mov	r3, r9
 8016aae:	2205      	movs	r2, #5
 8016ab0:	4620      	mov	r0, r4
 8016ab2:	f000 fe11 	bl	80176d8 <__multadd>
 8016ab6:	4601      	mov	r1, r0
 8016ab8:	4606      	mov	r6, r0
 8016aba:	4658      	mov	r0, fp
 8016abc:	f001 f872 	bl	8017ba4 <__mcmp>
 8016ac0:	2800      	cmp	r0, #0
 8016ac2:	f73f adbd 	bgt.w	8016640 <_dtoa_r+0x4d0>
 8016ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ac8:	9d00      	ldr	r5, [sp, #0]
 8016aca:	ea6f 0a03 	mvn.w	sl, r3
 8016ace:	f04f 0800 	mov.w	r8, #0
 8016ad2:	4631      	mov	r1, r6
 8016ad4:	4620      	mov	r0, r4
 8016ad6:	f000 fddd 	bl	8017694 <_Bfree>
 8016ada:	2f00      	cmp	r7, #0
 8016adc:	f43f aeb4 	beq.w	8016848 <_dtoa_r+0x6d8>
 8016ae0:	f1b8 0f00 	cmp.w	r8, #0
 8016ae4:	d005      	beq.n	8016af2 <_dtoa_r+0x982>
 8016ae6:	45b8      	cmp	r8, r7
 8016ae8:	d003      	beq.n	8016af2 <_dtoa_r+0x982>
 8016aea:	4641      	mov	r1, r8
 8016aec:	4620      	mov	r0, r4
 8016aee:	f000 fdd1 	bl	8017694 <_Bfree>
 8016af2:	4639      	mov	r1, r7
 8016af4:	4620      	mov	r0, r4
 8016af6:	f000 fdcd 	bl	8017694 <_Bfree>
 8016afa:	e6a5      	b.n	8016848 <_dtoa_r+0x6d8>
 8016afc:	2600      	movs	r6, #0
 8016afe:	4637      	mov	r7, r6
 8016b00:	e7e1      	b.n	8016ac6 <_dtoa_r+0x956>
 8016b02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016b04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016b08:	4637      	mov	r7, r6
 8016b0a:	e599      	b.n	8016640 <_dtoa_r+0x4d0>
 8016b0c:	9b08      	ldr	r3, [sp, #32]
 8016b0e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	f000 80fd 	beq.w	8016d12 <_dtoa_r+0xba2>
 8016b18:	2d00      	cmp	r5, #0
 8016b1a:	dd05      	ble.n	8016b28 <_dtoa_r+0x9b8>
 8016b1c:	4639      	mov	r1, r7
 8016b1e:	462a      	mov	r2, r5
 8016b20:	4620      	mov	r0, r4
 8016b22:	f000 ffd3 	bl	8017acc <__lshift>
 8016b26:	4607      	mov	r7, r0
 8016b28:	9b06      	ldr	r3, [sp, #24]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d05c      	beq.n	8016be8 <_dtoa_r+0xa78>
 8016b2e:	6879      	ldr	r1, [r7, #4]
 8016b30:	4620      	mov	r0, r4
 8016b32:	f000 fd6f 	bl	8017614 <_Balloc>
 8016b36:	4605      	mov	r5, r0
 8016b38:	b928      	cbnz	r0, 8016b46 <_dtoa_r+0x9d6>
 8016b3a:	4b80      	ldr	r3, [pc, #512]	; (8016d3c <_dtoa_r+0xbcc>)
 8016b3c:	4602      	mov	r2, r0
 8016b3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8016b42:	f7ff bb2e 	b.w	80161a2 <_dtoa_r+0x32>
 8016b46:	693a      	ldr	r2, [r7, #16]
 8016b48:	3202      	adds	r2, #2
 8016b4a:	0092      	lsls	r2, r2, #2
 8016b4c:	f107 010c 	add.w	r1, r7, #12
 8016b50:	300c      	adds	r0, #12
 8016b52:	f7fd fb31 	bl	80141b8 <memcpy>
 8016b56:	2201      	movs	r2, #1
 8016b58:	4629      	mov	r1, r5
 8016b5a:	4620      	mov	r0, r4
 8016b5c:	f000 ffb6 	bl	8017acc <__lshift>
 8016b60:	9b00      	ldr	r3, [sp, #0]
 8016b62:	3301      	adds	r3, #1
 8016b64:	9301      	str	r3, [sp, #4]
 8016b66:	9b00      	ldr	r3, [sp, #0]
 8016b68:	444b      	add	r3, r9
 8016b6a:	9307      	str	r3, [sp, #28]
 8016b6c:	9b02      	ldr	r3, [sp, #8]
 8016b6e:	f003 0301 	and.w	r3, r3, #1
 8016b72:	46b8      	mov	r8, r7
 8016b74:	9306      	str	r3, [sp, #24]
 8016b76:	4607      	mov	r7, r0
 8016b78:	9b01      	ldr	r3, [sp, #4]
 8016b7a:	4631      	mov	r1, r6
 8016b7c:	3b01      	subs	r3, #1
 8016b7e:	4658      	mov	r0, fp
 8016b80:	9302      	str	r3, [sp, #8]
 8016b82:	f7ff fa69 	bl	8016058 <quorem>
 8016b86:	4603      	mov	r3, r0
 8016b88:	3330      	adds	r3, #48	; 0x30
 8016b8a:	9004      	str	r0, [sp, #16]
 8016b8c:	4641      	mov	r1, r8
 8016b8e:	4658      	mov	r0, fp
 8016b90:	9308      	str	r3, [sp, #32]
 8016b92:	f001 f807 	bl	8017ba4 <__mcmp>
 8016b96:	463a      	mov	r2, r7
 8016b98:	4681      	mov	r9, r0
 8016b9a:	4631      	mov	r1, r6
 8016b9c:	4620      	mov	r0, r4
 8016b9e:	f001 f81d 	bl	8017bdc <__mdiff>
 8016ba2:	68c2      	ldr	r2, [r0, #12]
 8016ba4:	9b08      	ldr	r3, [sp, #32]
 8016ba6:	4605      	mov	r5, r0
 8016ba8:	bb02      	cbnz	r2, 8016bec <_dtoa_r+0xa7c>
 8016baa:	4601      	mov	r1, r0
 8016bac:	4658      	mov	r0, fp
 8016bae:	f000 fff9 	bl	8017ba4 <__mcmp>
 8016bb2:	9b08      	ldr	r3, [sp, #32]
 8016bb4:	4602      	mov	r2, r0
 8016bb6:	4629      	mov	r1, r5
 8016bb8:	4620      	mov	r0, r4
 8016bba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8016bbe:	f000 fd69 	bl	8017694 <_Bfree>
 8016bc2:	9b05      	ldr	r3, [sp, #20]
 8016bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016bc6:	9d01      	ldr	r5, [sp, #4]
 8016bc8:	ea43 0102 	orr.w	r1, r3, r2
 8016bcc:	9b06      	ldr	r3, [sp, #24]
 8016bce:	430b      	orrs	r3, r1
 8016bd0:	9b08      	ldr	r3, [sp, #32]
 8016bd2:	d10d      	bne.n	8016bf0 <_dtoa_r+0xa80>
 8016bd4:	2b39      	cmp	r3, #57	; 0x39
 8016bd6:	d029      	beq.n	8016c2c <_dtoa_r+0xabc>
 8016bd8:	f1b9 0f00 	cmp.w	r9, #0
 8016bdc:	dd01      	ble.n	8016be2 <_dtoa_r+0xa72>
 8016bde:	9b04      	ldr	r3, [sp, #16]
 8016be0:	3331      	adds	r3, #49	; 0x31
 8016be2:	9a02      	ldr	r2, [sp, #8]
 8016be4:	7013      	strb	r3, [r2, #0]
 8016be6:	e774      	b.n	8016ad2 <_dtoa_r+0x962>
 8016be8:	4638      	mov	r0, r7
 8016bea:	e7b9      	b.n	8016b60 <_dtoa_r+0x9f0>
 8016bec:	2201      	movs	r2, #1
 8016bee:	e7e2      	b.n	8016bb6 <_dtoa_r+0xa46>
 8016bf0:	f1b9 0f00 	cmp.w	r9, #0
 8016bf4:	db06      	blt.n	8016c04 <_dtoa_r+0xa94>
 8016bf6:	9905      	ldr	r1, [sp, #20]
 8016bf8:	ea41 0909 	orr.w	r9, r1, r9
 8016bfc:	9906      	ldr	r1, [sp, #24]
 8016bfe:	ea59 0101 	orrs.w	r1, r9, r1
 8016c02:	d120      	bne.n	8016c46 <_dtoa_r+0xad6>
 8016c04:	2a00      	cmp	r2, #0
 8016c06:	ddec      	ble.n	8016be2 <_dtoa_r+0xa72>
 8016c08:	4659      	mov	r1, fp
 8016c0a:	2201      	movs	r2, #1
 8016c0c:	4620      	mov	r0, r4
 8016c0e:	9301      	str	r3, [sp, #4]
 8016c10:	f000 ff5c 	bl	8017acc <__lshift>
 8016c14:	4631      	mov	r1, r6
 8016c16:	4683      	mov	fp, r0
 8016c18:	f000 ffc4 	bl	8017ba4 <__mcmp>
 8016c1c:	2800      	cmp	r0, #0
 8016c1e:	9b01      	ldr	r3, [sp, #4]
 8016c20:	dc02      	bgt.n	8016c28 <_dtoa_r+0xab8>
 8016c22:	d1de      	bne.n	8016be2 <_dtoa_r+0xa72>
 8016c24:	07da      	lsls	r2, r3, #31
 8016c26:	d5dc      	bpl.n	8016be2 <_dtoa_r+0xa72>
 8016c28:	2b39      	cmp	r3, #57	; 0x39
 8016c2a:	d1d8      	bne.n	8016bde <_dtoa_r+0xa6e>
 8016c2c:	9a02      	ldr	r2, [sp, #8]
 8016c2e:	2339      	movs	r3, #57	; 0x39
 8016c30:	7013      	strb	r3, [r2, #0]
 8016c32:	462b      	mov	r3, r5
 8016c34:	461d      	mov	r5, r3
 8016c36:	3b01      	subs	r3, #1
 8016c38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016c3c:	2a39      	cmp	r2, #57	; 0x39
 8016c3e:	d050      	beq.n	8016ce2 <_dtoa_r+0xb72>
 8016c40:	3201      	adds	r2, #1
 8016c42:	701a      	strb	r2, [r3, #0]
 8016c44:	e745      	b.n	8016ad2 <_dtoa_r+0x962>
 8016c46:	2a00      	cmp	r2, #0
 8016c48:	dd03      	ble.n	8016c52 <_dtoa_r+0xae2>
 8016c4a:	2b39      	cmp	r3, #57	; 0x39
 8016c4c:	d0ee      	beq.n	8016c2c <_dtoa_r+0xabc>
 8016c4e:	3301      	adds	r3, #1
 8016c50:	e7c7      	b.n	8016be2 <_dtoa_r+0xa72>
 8016c52:	9a01      	ldr	r2, [sp, #4]
 8016c54:	9907      	ldr	r1, [sp, #28]
 8016c56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016c5a:	428a      	cmp	r2, r1
 8016c5c:	d02a      	beq.n	8016cb4 <_dtoa_r+0xb44>
 8016c5e:	4659      	mov	r1, fp
 8016c60:	2300      	movs	r3, #0
 8016c62:	220a      	movs	r2, #10
 8016c64:	4620      	mov	r0, r4
 8016c66:	f000 fd37 	bl	80176d8 <__multadd>
 8016c6a:	45b8      	cmp	r8, r7
 8016c6c:	4683      	mov	fp, r0
 8016c6e:	f04f 0300 	mov.w	r3, #0
 8016c72:	f04f 020a 	mov.w	r2, #10
 8016c76:	4641      	mov	r1, r8
 8016c78:	4620      	mov	r0, r4
 8016c7a:	d107      	bne.n	8016c8c <_dtoa_r+0xb1c>
 8016c7c:	f000 fd2c 	bl	80176d8 <__multadd>
 8016c80:	4680      	mov	r8, r0
 8016c82:	4607      	mov	r7, r0
 8016c84:	9b01      	ldr	r3, [sp, #4]
 8016c86:	3301      	adds	r3, #1
 8016c88:	9301      	str	r3, [sp, #4]
 8016c8a:	e775      	b.n	8016b78 <_dtoa_r+0xa08>
 8016c8c:	f000 fd24 	bl	80176d8 <__multadd>
 8016c90:	4639      	mov	r1, r7
 8016c92:	4680      	mov	r8, r0
 8016c94:	2300      	movs	r3, #0
 8016c96:	220a      	movs	r2, #10
 8016c98:	4620      	mov	r0, r4
 8016c9a:	f000 fd1d 	bl	80176d8 <__multadd>
 8016c9e:	4607      	mov	r7, r0
 8016ca0:	e7f0      	b.n	8016c84 <_dtoa_r+0xb14>
 8016ca2:	f1b9 0f00 	cmp.w	r9, #0
 8016ca6:	9a00      	ldr	r2, [sp, #0]
 8016ca8:	bfcc      	ite	gt
 8016caa:	464d      	movgt	r5, r9
 8016cac:	2501      	movle	r5, #1
 8016cae:	4415      	add	r5, r2
 8016cb0:	f04f 0800 	mov.w	r8, #0
 8016cb4:	4659      	mov	r1, fp
 8016cb6:	2201      	movs	r2, #1
 8016cb8:	4620      	mov	r0, r4
 8016cba:	9301      	str	r3, [sp, #4]
 8016cbc:	f000 ff06 	bl	8017acc <__lshift>
 8016cc0:	4631      	mov	r1, r6
 8016cc2:	4683      	mov	fp, r0
 8016cc4:	f000 ff6e 	bl	8017ba4 <__mcmp>
 8016cc8:	2800      	cmp	r0, #0
 8016cca:	dcb2      	bgt.n	8016c32 <_dtoa_r+0xac2>
 8016ccc:	d102      	bne.n	8016cd4 <_dtoa_r+0xb64>
 8016cce:	9b01      	ldr	r3, [sp, #4]
 8016cd0:	07db      	lsls	r3, r3, #31
 8016cd2:	d4ae      	bmi.n	8016c32 <_dtoa_r+0xac2>
 8016cd4:	462b      	mov	r3, r5
 8016cd6:	461d      	mov	r5, r3
 8016cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016cdc:	2a30      	cmp	r2, #48	; 0x30
 8016cde:	d0fa      	beq.n	8016cd6 <_dtoa_r+0xb66>
 8016ce0:	e6f7      	b.n	8016ad2 <_dtoa_r+0x962>
 8016ce2:	9a00      	ldr	r2, [sp, #0]
 8016ce4:	429a      	cmp	r2, r3
 8016ce6:	d1a5      	bne.n	8016c34 <_dtoa_r+0xac4>
 8016ce8:	f10a 0a01 	add.w	sl, sl, #1
 8016cec:	2331      	movs	r3, #49	; 0x31
 8016cee:	e779      	b.n	8016be4 <_dtoa_r+0xa74>
 8016cf0:	4b13      	ldr	r3, [pc, #76]	; (8016d40 <_dtoa_r+0xbd0>)
 8016cf2:	f7ff baaf 	b.w	8016254 <_dtoa_r+0xe4>
 8016cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	f47f aa86 	bne.w	801620a <_dtoa_r+0x9a>
 8016cfe:	4b11      	ldr	r3, [pc, #68]	; (8016d44 <_dtoa_r+0xbd4>)
 8016d00:	f7ff baa8 	b.w	8016254 <_dtoa_r+0xe4>
 8016d04:	f1b9 0f00 	cmp.w	r9, #0
 8016d08:	dc03      	bgt.n	8016d12 <_dtoa_r+0xba2>
 8016d0a:	9b05      	ldr	r3, [sp, #20]
 8016d0c:	2b02      	cmp	r3, #2
 8016d0e:	f73f aec9 	bgt.w	8016aa4 <_dtoa_r+0x934>
 8016d12:	9d00      	ldr	r5, [sp, #0]
 8016d14:	4631      	mov	r1, r6
 8016d16:	4658      	mov	r0, fp
 8016d18:	f7ff f99e 	bl	8016058 <quorem>
 8016d1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016d20:	f805 3b01 	strb.w	r3, [r5], #1
 8016d24:	9a00      	ldr	r2, [sp, #0]
 8016d26:	1aaa      	subs	r2, r5, r2
 8016d28:	4591      	cmp	r9, r2
 8016d2a:	ddba      	ble.n	8016ca2 <_dtoa_r+0xb32>
 8016d2c:	4659      	mov	r1, fp
 8016d2e:	2300      	movs	r3, #0
 8016d30:	220a      	movs	r2, #10
 8016d32:	4620      	mov	r0, r4
 8016d34:	f000 fcd0 	bl	80176d8 <__multadd>
 8016d38:	4683      	mov	fp, r0
 8016d3a:	e7eb      	b.n	8016d14 <_dtoa_r+0xba4>
 8016d3c:	08018ff3 	.word	0x08018ff3
 8016d40:	08018ef4 	.word	0x08018ef4
 8016d44:	08018f70 	.word	0x08018f70

08016d48 <__sflush_r>:
 8016d48:	898a      	ldrh	r2, [r1, #12]
 8016d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d4e:	4605      	mov	r5, r0
 8016d50:	0710      	lsls	r0, r2, #28
 8016d52:	460c      	mov	r4, r1
 8016d54:	d458      	bmi.n	8016e08 <__sflush_r+0xc0>
 8016d56:	684b      	ldr	r3, [r1, #4]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	dc05      	bgt.n	8016d68 <__sflush_r+0x20>
 8016d5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	dc02      	bgt.n	8016d68 <__sflush_r+0x20>
 8016d62:	2000      	movs	r0, #0
 8016d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016d6a:	2e00      	cmp	r6, #0
 8016d6c:	d0f9      	beq.n	8016d62 <__sflush_r+0x1a>
 8016d6e:	2300      	movs	r3, #0
 8016d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016d74:	682f      	ldr	r7, [r5, #0]
 8016d76:	602b      	str	r3, [r5, #0]
 8016d78:	d032      	beq.n	8016de0 <__sflush_r+0x98>
 8016d7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016d7c:	89a3      	ldrh	r3, [r4, #12]
 8016d7e:	075a      	lsls	r2, r3, #29
 8016d80:	d505      	bpl.n	8016d8e <__sflush_r+0x46>
 8016d82:	6863      	ldr	r3, [r4, #4]
 8016d84:	1ac0      	subs	r0, r0, r3
 8016d86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016d88:	b10b      	cbz	r3, 8016d8e <__sflush_r+0x46>
 8016d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016d8c:	1ac0      	subs	r0, r0, r3
 8016d8e:	2300      	movs	r3, #0
 8016d90:	4602      	mov	r2, r0
 8016d92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016d94:	6a21      	ldr	r1, [r4, #32]
 8016d96:	4628      	mov	r0, r5
 8016d98:	47b0      	blx	r6
 8016d9a:	1c43      	adds	r3, r0, #1
 8016d9c:	89a3      	ldrh	r3, [r4, #12]
 8016d9e:	d106      	bne.n	8016dae <__sflush_r+0x66>
 8016da0:	6829      	ldr	r1, [r5, #0]
 8016da2:	291d      	cmp	r1, #29
 8016da4:	d82c      	bhi.n	8016e00 <__sflush_r+0xb8>
 8016da6:	4a2a      	ldr	r2, [pc, #168]	; (8016e50 <__sflush_r+0x108>)
 8016da8:	40ca      	lsrs	r2, r1
 8016daa:	07d6      	lsls	r6, r2, #31
 8016dac:	d528      	bpl.n	8016e00 <__sflush_r+0xb8>
 8016dae:	2200      	movs	r2, #0
 8016db0:	6062      	str	r2, [r4, #4]
 8016db2:	04d9      	lsls	r1, r3, #19
 8016db4:	6922      	ldr	r2, [r4, #16]
 8016db6:	6022      	str	r2, [r4, #0]
 8016db8:	d504      	bpl.n	8016dc4 <__sflush_r+0x7c>
 8016dba:	1c42      	adds	r2, r0, #1
 8016dbc:	d101      	bne.n	8016dc2 <__sflush_r+0x7a>
 8016dbe:	682b      	ldr	r3, [r5, #0]
 8016dc0:	b903      	cbnz	r3, 8016dc4 <__sflush_r+0x7c>
 8016dc2:	6560      	str	r0, [r4, #84]	; 0x54
 8016dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016dc6:	602f      	str	r7, [r5, #0]
 8016dc8:	2900      	cmp	r1, #0
 8016dca:	d0ca      	beq.n	8016d62 <__sflush_r+0x1a>
 8016dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016dd0:	4299      	cmp	r1, r3
 8016dd2:	d002      	beq.n	8016dda <__sflush_r+0x92>
 8016dd4:	4628      	mov	r0, r5
 8016dd6:	f7fd fa05 	bl	80141e4 <_free_r>
 8016dda:	2000      	movs	r0, #0
 8016ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8016dde:	e7c1      	b.n	8016d64 <__sflush_r+0x1c>
 8016de0:	6a21      	ldr	r1, [r4, #32]
 8016de2:	2301      	movs	r3, #1
 8016de4:	4628      	mov	r0, r5
 8016de6:	47b0      	blx	r6
 8016de8:	1c41      	adds	r1, r0, #1
 8016dea:	d1c7      	bne.n	8016d7c <__sflush_r+0x34>
 8016dec:	682b      	ldr	r3, [r5, #0]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d0c4      	beq.n	8016d7c <__sflush_r+0x34>
 8016df2:	2b1d      	cmp	r3, #29
 8016df4:	d001      	beq.n	8016dfa <__sflush_r+0xb2>
 8016df6:	2b16      	cmp	r3, #22
 8016df8:	d101      	bne.n	8016dfe <__sflush_r+0xb6>
 8016dfa:	602f      	str	r7, [r5, #0]
 8016dfc:	e7b1      	b.n	8016d62 <__sflush_r+0x1a>
 8016dfe:	89a3      	ldrh	r3, [r4, #12]
 8016e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e04:	81a3      	strh	r3, [r4, #12]
 8016e06:	e7ad      	b.n	8016d64 <__sflush_r+0x1c>
 8016e08:	690f      	ldr	r7, [r1, #16]
 8016e0a:	2f00      	cmp	r7, #0
 8016e0c:	d0a9      	beq.n	8016d62 <__sflush_r+0x1a>
 8016e0e:	0793      	lsls	r3, r2, #30
 8016e10:	680e      	ldr	r6, [r1, #0]
 8016e12:	bf08      	it	eq
 8016e14:	694b      	ldreq	r3, [r1, #20]
 8016e16:	600f      	str	r7, [r1, #0]
 8016e18:	bf18      	it	ne
 8016e1a:	2300      	movne	r3, #0
 8016e1c:	eba6 0807 	sub.w	r8, r6, r7
 8016e20:	608b      	str	r3, [r1, #8]
 8016e22:	f1b8 0f00 	cmp.w	r8, #0
 8016e26:	dd9c      	ble.n	8016d62 <__sflush_r+0x1a>
 8016e28:	6a21      	ldr	r1, [r4, #32]
 8016e2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016e2c:	4643      	mov	r3, r8
 8016e2e:	463a      	mov	r2, r7
 8016e30:	4628      	mov	r0, r5
 8016e32:	47b0      	blx	r6
 8016e34:	2800      	cmp	r0, #0
 8016e36:	dc06      	bgt.n	8016e46 <__sflush_r+0xfe>
 8016e38:	89a3      	ldrh	r3, [r4, #12]
 8016e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e3e:	81a3      	strh	r3, [r4, #12]
 8016e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e44:	e78e      	b.n	8016d64 <__sflush_r+0x1c>
 8016e46:	4407      	add	r7, r0
 8016e48:	eba8 0800 	sub.w	r8, r8, r0
 8016e4c:	e7e9      	b.n	8016e22 <__sflush_r+0xda>
 8016e4e:	bf00      	nop
 8016e50:	20400001 	.word	0x20400001

08016e54 <_fflush_r>:
 8016e54:	b538      	push	{r3, r4, r5, lr}
 8016e56:	690b      	ldr	r3, [r1, #16]
 8016e58:	4605      	mov	r5, r0
 8016e5a:	460c      	mov	r4, r1
 8016e5c:	b913      	cbnz	r3, 8016e64 <_fflush_r+0x10>
 8016e5e:	2500      	movs	r5, #0
 8016e60:	4628      	mov	r0, r5
 8016e62:	bd38      	pop	{r3, r4, r5, pc}
 8016e64:	b118      	cbz	r0, 8016e6e <_fflush_r+0x1a>
 8016e66:	6983      	ldr	r3, [r0, #24]
 8016e68:	b90b      	cbnz	r3, 8016e6e <_fflush_r+0x1a>
 8016e6a:	f7fd f8cf 	bl	801400c <__sinit>
 8016e6e:	4b14      	ldr	r3, [pc, #80]	; (8016ec0 <_fflush_r+0x6c>)
 8016e70:	429c      	cmp	r4, r3
 8016e72:	d11b      	bne.n	8016eac <_fflush_r+0x58>
 8016e74:	686c      	ldr	r4, [r5, #4]
 8016e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d0ef      	beq.n	8016e5e <_fflush_r+0xa>
 8016e7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016e80:	07d0      	lsls	r0, r2, #31
 8016e82:	d404      	bmi.n	8016e8e <_fflush_r+0x3a>
 8016e84:	0599      	lsls	r1, r3, #22
 8016e86:	d402      	bmi.n	8016e8e <_fflush_r+0x3a>
 8016e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e8a:	f7fd f982 	bl	8014192 <__retarget_lock_acquire_recursive>
 8016e8e:	4628      	mov	r0, r5
 8016e90:	4621      	mov	r1, r4
 8016e92:	f7ff ff59 	bl	8016d48 <__sflush_r>
 8016e96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e98:	07da      	lsls	r2, r3, #31
 8016e9a:	4605      	mov	r5, r0
 8016e9c:	d4e0      	bmi.n	8016e60 <_fflush_r+0xc>
 8016e9e:	89a3      	ldrh	r3, [r4, #12]
 8016ea0:	059b      	lsls	r3, r3, #22
 8016ea2:	d4dd      	bmi.n	8016e60 <_fflush_r+0xc>
 8016ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ea6:	f7fd f975 	bl	8014194 <__retarget_lock_release_recursive>
 8016eaa:	e7d9      	b.n	8016e60 <_fflush_r+0xc>
 8016eac:	4b05      	ldr	r3, [pc, #20]	; (8016ec4 <_fflush_r+0x70>)
 8016eae:	429c      	cmp	r4, r3
 8016eb0:	d101      	bne.n	8016eb6 <_fflush_r+0x62>
 8016eb2:	68ac      	ldr	r4, [r5, #8]
 8016eb4:	e7df      	b.n	8016e76 <_fflush_r+0x22>
 8016eb6:	4b04      	ldr	r3, [pc, #16]	; (8016ec8 <_fflush_r+0x74>)
 8016eb8:	429c      	cmp	r4, r3
 8016eba:	bf08      	it	eq
 8016ebc:	68ec      	ldreq	r4, [r5, #12]
 8016ebe:	e7da      	b.n	8016e76 <_fflush_r+0x22>
 8016ec0:	08018ea0 	.word	0x08018ea0
 8016ec4:	08018ec0 	.word	0x08018ec0
 8016ec8:	08018e80 	.word	0x08018e80

08016ecc <rshift>:
 8016ecc:	6903      	ldr	r3, [r0, #16]
 8016ece:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016ed2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ed6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016eda:	f100 0414 	add.w	r4, r0, #20
 8016ede:	dd45      	ble.n	8016f6c <rshift+0xa0>
 8016ee0:	f011 011f 	ands.w	r1, r1, #31
 8016ee4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016ee8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016eec:	d10c      	bne.n	8016f08 <rshift+0x3c>
 8016eee:	f100 0710 	add.w	r7, r0, #16
 8016ef2:	4629      	mov	r1, r5
 8016ef4:	42b1      	cmp	r1, r6
 8016ef6:	d334      	bcc.n	8016f62 <rshift+0x96>
 8016ef8:	1a9b      	subs	r3, r3, r2
 8016efa:	009b      	lsls	r3, r3, #2
 8016efc:	1eea      	subs	r2, r5, #3
 8016efe:	4296      	cmp	r6, r2
 8016f00:	bf38      	it	cc
 8016f02:	2300      	movcc	r3, #0
 8016f04:	4423      	add	r3, r4
 8016f06:	e015      	b.n	8016f34 <rshift+0x68>
 8016f08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016f0c:	f1c1 0820 	rsb	r8, r1, #32
 8016f10:	40cf      	lsrs	r7, r1
 8016f12:	f105 0e04 	add.w	lr, r5, #4
 8016f16:	46a1      	mov	r9, r4
 8016f18:	4576      	cmp	r6, lr
 8016f1a:	46f4      	mov	ip, lr
 8016f1c:	d815      	bhi.n	8016f4a <rshift+0x7e>
 8016f1e:	1a9b      	subs	r3, r3, r2
 8016f20:	009a      	lsls	r2, r3, #2
 8016f22:	3a04      	subs	r2, #4
 8016f24:	3501      	adds	r5, #1
 8016f26:	42ae      	cmp	r6, r5
 8016f28:	bf38      	it	cc
 8016f2a:	2200      	movcc	r2, #0
 8016f2c:	18a3      	adds	r3, r4, r2
 8016f2e:	50a7      	str	r7, [r4, r2]
 8016f30:	b107      	cbz	r7, 8016f34 <rshift+0x68>
 8016f32:	3304      	adds	r3, #4
 8016f34:	1b1a      	subs	r2, r3, r4
 8016f36:	42a3      	cmp	r3, r4
 8016f38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016f3c:	bf08      	it	eq
 8016f3e:	2300      	moveq	r3, #0
 8016f40:	6102      	str	r2, [r0, #16]
 8016f42:	bf08      	it	eq
 8016f44:	6143      	streq	r3, [r0, #20]
 8016f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f4a:	f8dc c000 	ldr.w	ip, [ip]
 8016f4e:	fa0c fc08 	lsl.w	ip, ip, r8
 8016f52:	ea4c 0707 	orr.w	r7, ip, r7
 8016f56:	f849 7b04 	str.w	r7, [r9], #4
 8016f5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016f5e:	40cf      	lsrs	r7, r1
 8016f60:	e7da      	b.n	8016f18 <rshift+0x4c>
 8016f62:	f851 cb04 	ldr.w	ip, [r1], #4
 8016f66:	f847 cf04 	str.w	ip, [r7, #4]!
 8016f6a:	e7c3      	b.n	8016ef4 <rshift+0x28>
 8016f6c:	4623      	mov	r3, r4
 8016f6e:	e7e1      	b.n	8016f34 <rshift+0x68>

08016f70 <__hexdig_fun>:
 8016f70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016f74:	2b09      	cmp	r3, #9
 8016f76:	d802      	bhi.n	8016f7e <__hexdig_fun+0xe>
 8016f78:	3820      	subs	r0, #32
 8016f7a:	b2c0      	uxtb	r0, r0
 8016f7c:	4770      	bx	lr
 8016f7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016f82:	2b05      	cmp	r3, #5
 8016f84:	d801      	bhi.n	8016f8a <__hexdig_fun+0x1a>
 8016f86:	3847      	subs	r0, #71	; 0x47
 8016f88:	e7f7      	b.n	8016f7a <__hexdig_fun+0xa>
 8016f8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016f8e:	2b05      	cmp	r3, #5
 8016f90:	d801      	bhi.n	8016f96 <__hexdig_fun+0x26>
 8016f92:	3827      	subs	r0, #39	; 0x27
 8016f94:	e7f1      	b.n	8016f7a <__hexdig_fun+0xa>
 8016f96:	2000      	movs	r0, #0
 8016f98:	4770      	bx	lr
	...

08016f9c <__gethex>:
 8016f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fa0:	ed2d 8b02 	vpush	{d8}
 8016fa4:	b089      	sub	sp, #36	; 0x24
 8016fa6:	ee08 0a10 	vmov	s16, r0
 8016faa:	9304      	str	r3, [sp, #16]
 8016fac:	4bbc      	ldr	r3, [pc, #752]	; (80172a0 <__gethex+0x304>)
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	9301      	str	r3, [sp, #4]
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	468b      	mov	fp, r1
 8016fb6:	4690      	mov	r8, r2
 8016fb8:	f7e9 f91a 	bl	80001f0 <strlen>
 8016fbc:	9b01      	ldr	r3, [sp, #4]
 8016fbe:	f8db 2000 	ldr.w	r2, [fp]
 8016fc2:	4403      	add	r3, r0
 8016fc4:	4682      	mov	sl, r0
 8016fc6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016fca:	9305      	str	r3, [sp, #20]
 8016fcc:	1c93      	adds	r3, r2, #2
 8016fce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016fd2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016fd6:	32fe      	adds	r2, #254	; 0xfe
 8016fd8:	18d1      	adds	r1, r2, r3
 8016fda:	461f      	mov	r7, r3
 8016fdc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016fe0:	9100      	str	r1, [sp, #0]
 8016fe2:	2830      	cmp	r0, #48	; 0x30
 8016fe4:	d0f8      	beq.n	8016fd8 <__gethex+0x3c>
 8016fe6:	f7ff ffc3 	bl	8016f70 <__hexdig_fun>
 8016fea:	4604      	mov	r4, r0
 8016fec:	2800      	cmp	r0, #0
 8016fee:	d13a      	bne.n	8017066 <__gethex+0xca>
 8016ff0:	9901      	ldr	r1, [sp, #4]
 8016ff2:	4652      	mov	r2, sl
 8016ff4:	4638      	mov	r0, r7
 8016ff6:	f7fe f904 	bl	8015202 <strncmp>
 8016ffa:	4605      	mov	r5, r0
 8016ffc:	2800      	cmp	r0, #0
 8016ffe:	d168      	bne.n	80170d2 <__gethex+0x136>
 8017000:	f817 000a 	ldrb.w	r0, [r7, sl]
 8017004:	eb07 060a 	add.w	r6, r7, sl
 8017008:	f7ff ffb2 	bl	8016f70 <__hexdig_fun>
 801700c:	2800      	cmp	r0, #0
 801700e:	d062      	beq.n	80170d6 <__gethex+0x13a>
 8017010:	4633      	mov	r3, r6
 8017012:	7818      	ldrb	r0, [r3, #0]
 8017014:	2830      	cmp	r0, #48	; 0x30
 8017016:	461f      	mov	r7, r3
 8017018:	f103 0301 	add.w	r3, r3, #1
 801701c:	d0f9      	beq.n	8017012 <__gethex+0x76>
 801701e:	f7ff ffa7 	bl	8016f70 <__hexdig_fun>
 8017022:	2301      	movs	r3, #1
 8017024:	fab0 f480 	clz	r4, r0
 8017028:	0964      	lsrs	r4, r4, #5
 801702a:	4635      	mov	r5, r6
 801702c:	9300      	str	r3, [sp, #0]
 801702e:	463a      	mov	r2, r7
 8017030:	4616      	mov	r6, r2
 8017032:	3201      	adds	r2, #1
 8017034:	7830      	ldrb	r0, [r6, #0]
 8017036:	f7ff ff9b 	bl	8016f70 <__hexdig_fun>
 801703a:	2800      	cmp	r0, #0
 801703c:	d1f8      	bne.n	8017030 <__gethex+0x94>
 801703e:	9901      	ldr	r1, [sp, #4]
 8017040:	4652      	mov	r2, sl
 8017042:	4630      	mov	r0, r6
 8017044:	f7fe f8dd 	bl	8015202 <strncmp>
 8017048:	b980      	cbnz	r0, 801706c <__gethex+0xd0>
 801704a:	b94d      	cbnz	r5, 8017060 <__gethex+0xc4>
 801704c:	eb06 050a 	add.w	r5, r6, sl
 8017050:	462a      	mov	r2, r5
 8017052:	4616      	mov	r6, r2
 8017054:	3201      	adds	r2, #1
 8017056:	7830      	ldrb	r0, [r6, #0]
 8017058:	f7ff ff8a 	bl	8016f70 <__hexdig_fun>
 801705c:	2800      	cmp	r0, #0
 801705e:	d1f8      	bne.n	8017052 <__gethex+0xb6>
 8017060:	1bad      	subs	r5, r5, r6
 8017062:	00ad      	lsls	r5, r5, #2
 8017064:	e004      	b.n	8017070 <__gethex+0xd4>
 8017066:	2400      	movs	r4, #0
 8017068:	4625      	mov	r5, r4
 801706a:	e7e0      	b.n	801702e <__gethex+0x92>
 801706c:	2d00      	cmp	r5, #0
 801706e:	d1f7      	bne.n	8017060 <__gethex+0xc4>
 8017070:	7833      	ldrb	r3, [r6, #0]
 8017072:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017076:	2b50      	cmp	r3, #80	; 0x50
 8017078:	d13b      	bne.n	80170f2 <__gethex+0x156>
 801707a:	7873      	ldrb	r3, [r6, #1]
 801707c:	2b2b      	cmp	r3, #43	; 0x2b
 801707e:	d02c      	beq.n	80170da <__gethex+0x13e>
 8017080:	2b2d      	cmp	r3, #45	; 0x2d
 8017082:	d02e      	beq.n	80170e2 <__gethex+0x146>
 8017084:	1c71      	adds	r1, r6, #1
 8017086:	f04f 0900 	mov.w	r9, #0
 801708a:	7808      	ldrb	r0, [r1, #0]
 801708c:	f7ff ff70 	bl	8016f70 <__hexdig_fun>
 8017090:	1e43      	subs	r3, r0, #1
 8017092:	b2db      	uxtb	r3, r3
 8017094:	2b18      	cmp	r3, #24
 8017096:	d82c      	bhi.n	80170f2 <__gethex+0x156>
 8017098:	f1a0 0210 	sub.w	r2, r0, #16
 801709c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80170a0:	f7ff ff66 	bl	8016f70 <__hexdig_fun>
 80170a4:	1e43      	subs	r3, r0, #1
 80170a6:	b2db      	uxtb	r3, r3
 80170a8:	2b18      	cmp	r3, #24
 80170aa:	d91d      	bls.n	80170e8 <__gethex+0x14c>
 80170ac:	f1b9 0f00 	cmp.w	r9, #0
 80170b0:	d000      	beq.n	80170b4 <__gethex+0x118>
 80170b2:	4252      	negs	r2, r2
 80170b4:	4415      	add	r5, r2
 80170b6:	f8cb 1000 	str.w	r1, [fp]
 80170ba:	b1e4      	cbz	r4, 80170f6 <__gethex+0x15a>
 80170bc:	9b00      	ldr	r3, [sp, #0]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	bf14      	ite	ne
 80170c2:	2700      	movne	r7, #0
 80170c4:	2706      	moveq	r7, #6
 80170c6:	4638      	mov	r0, r7
 80170c8:	b009      	add	sp, #36	; 0x24
 80170ca:	ecbd 8b02 	vpop	{d8}
 80170ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170d2:	463e      	mov	r6, r7
 80170d4:	4625      	mov	r5, r4
 80170d6:	2401      	movs	r4, #1
 80170d8:	e7ca      	b.n	8017070 <__gethex+0xd4>
 80170da:	f04f 0900 	mov.w	r9, #0
 80170de:	1cb1      	adds	r1, r6, #2
 80170e0:	e7d3      	b.n	801708a <__gethex+0xee>
 80170e2:	f04f 0901 	mov.w	r9, #1
 80170e6:	e7fa      	b.n	80170de <__gethex+0x142>
 80170e8:	230a      	movs	r3, #10
 80170ea:	fb03 0202 	mla	r2, r3, r2, r0
 80170ee:	3a10      	subs	r2, #16
 80170f0:	e7d4      	b.n	801709c <__gethex+0x100>
 80170f2:	4631      	mov	r1, r6
 80170f4:	e7df      	b.n	80170b6 <__gethex+0x11a>
 80170f6:	1bf3      	subs	r3, r6, r7
 80170f8:	3b01      	subs	r3, #1
 80170fa:	4621      	mov	r1, r4
 80170fc:	2b07      	cmp	r3, #7
 80170fe:	dc0b      	bgt.n	8017118 <__gethex+0x17c>
 8017100:	ee18 0a10 	vmov	r0, s16
 8017104:	f000 fa86 	bl	8017614 <_Balloc>
 8017108:	4604      	mov	r4, r0
 801710a:	b940      	cbnz	r0, 801711e <__gethex+0x182>
 801710c:	4b65      	ldr	r3, [pc, #404]	; (80172a4 <__gethex+0x308>)
 801710e:	4602      	mov	r2, r0
 8017110:	21de      	movs	r1, #222	; 0xde
 8017112:	4865      	ldr	r0, [pc, #404]	; (80172a8 <__gethex+0x30c>)
 8017114:	f001 f8ce 	bl	80182b4 <__assert_func>
 8017118:	3101      	adds	r1, #1
 801711a:	105b      	asrs	r3, r3, #1
 801711c:	e7ee      	b.n	80170fc <__gethex+0x160>
 801711e:	f100 0914 	add.w	r9, r0, #20
 8017122:	f04f 0b00 	mov.w	fp, #0
 8017126:	f1ca 0301 	rsb	r3, sl, #1
 801712a:	f8cd 9008 	str.w	r9, [sp, #8]
 801712e:	f8cd b000 	str.w	fp, [sp]
 8017132:	9306      	str	r3, [sp, #24]
 8017134:	42b7      	cmp	r7, r6
 8017136:	d340      	bcc.n	80171ba <__gethex+0x21e>
 8017138:	9802      	ldr	r0, [sp, #8]
 801713a:	9b00      	ldr	r3, [sp, #0]
 801713c:	f840 3b04 	str.w	r3, [r0], #4
 8017140:	eba0 0009 	sub.w	r0, r0, r9
 8017144:	1080      	asrs	r0, r0, #2
 8017146:	0146      	lsls	r6, r0, #5
 8017148:	6120      	str	r0, [r4, #16]
 801714a:	4618      	mov	r0, r3
 801714c:	f000 fb58 	bl	8017800 <__hi0bits>
 8017150:	1a30      	subs	r0, r6, r0
 8017152:	f8d8 6000 	ldr.w	r6, [r8]
 8017156:	42b0      	cmp	r0, r6
 8017158:	dd63      	ble.n	8017222 <__gethex+0x286>
 801715a:	1b87      	subs	r7, r0, r6
 801715c:	4639      	mov	r1, r7
 801715e:	4620      	mov	r0, r4
 8017160:	f000 fef2 	bl	8017f48 <__any_on>
 8017164:	4682      	mov	sl, r0
 8017166:	b1a8      	cbz	r0, 8017194 <__gethex+0x1f8>
 8017168:	1e7b      	subs	r3, r7, #1
 801716a:	1159      	asrs	r1, r3, #5
 801716c:	f003 021f 	and.w	r2, r3, #31
 8017170:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017174:	f04f 0a01 	mov.w	sl, #1
 8017178:	fa0a f202 	lsl.w	r2, sl, r2
 801717c:	420a      	tst	r2, r1
 801717e:	d009      	beq.n	8017194 <__gethex+0x1f8>
 8017180:	4553      	cmp	r3, sl
 8017182:	dd05      	ble.n	8017190 <__gethex+0x1f4>
 8017184:	1eb9      	subs	r1, r7, #2
 8017186:	4620      	mov	r0, r4
 8017188:	f000 fede 	bl	8017f48 <__any_on>
 801718c:	2800      	cmp	r0, #0
 801718e:	d145      	bne.n	801721c <__gethex+0x280>
 8017190:	f04f 0a02 	mov.w	sl, #2
 8017194:	4639      	mov	r1, r7
 8017196:	4620      	mov	r0, r4
 8017198:	f7ff fe98 	bl	8016ecc <rshift>
 801719c:	443d      	add	r5, r7
 801719e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80171a2:	42ab      	cmp	r3, r5
 80171a4:	da4c      	bge.n	8017240 <__gethex+0x2a4>
 80171a6:	ee18 0a10 	vmov	r0, s16
 80171aa:	4621      	mov	r1, r4
 80171ac:	f000 fa72 	bl	8017694 <_Bfree>
 80171b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80171b2:	2300      	movs	r3, #0
 80171b4:	6013      	str	r3, [r2, #0]
 80171b6:	27a3      	movs	r7, #163	; 0xa3
 80171b8:	e785      	b.n	80170c6 <__gethex+0x12a>
 80171ba:	1e73      	subs	r3, r6, #1
 80171bc:	9a05      	ldr	r2, [sp, #20]
 80171be:	9303      	str	r3, [sp, #12]
 80171c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80171c4:	4293      	cmp	r3, r2
 80171c6:	d019      	beq.n	80171fc <__gethex+0x260>
 80171c8:	f1bb 0f20 	cmp.w	fp, #32
 80171cc:	d107      	bne.n	80171de <__gethex+0x242>
 80171ce:	9b02      	ldr	r3, [sp, #8]
 80171d0:	9a00      	ldr	r2, [sp, #0]
 80171d2:	f843 2b04 	str.w	r2, [r3], #4
 80171d6:	9302      	str	r3, [sp, #8]
 80171d8:	2300      	movs	r3, #0
 80171da:	9300      	str	r3, [sp, #0]
 80171dc:	469b      	mov	fp, r3
 80171de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80171e2:	f7ff fec5 	bl	8016f70 <__hexdig_fun>
 80171e6:	9b00      	ldr	r3, [sp, #0]
 80171e8:	f000 000f 	and.w	r0, r0, #15
 80171ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80171f0:	4303      	orrs	r3, r0
 80171f2:	9300      	str	r3, [sp, #0]
 80171f4:	f10b 0b04 	add.w	fp, fp, #4
 80171f8:	9b03      	ldr	r3, [sp, #12]
 80171fa:	e00d      	b.n	8017218 <__gethex+0x27c>
 80171fc:	9b03      	ldr	r3, [sp, #12]
 80171fe:	9a06      	ldr	r2, [sp, #24]
 8017200:	4413      	add	r3, r2
 8017202:	42bb      	cmp	r3, r7
 8017204:	d3e0      	bcc.n	80171c8 <__gethex+0x22c>
 8017206:	4618      	mov	r0, r3
 8017208:	9901      	ldr	r1, [sp, #4]
 801720a:	9307      	str	r3, [sp, #28]
 801720c:	4652      	mov	r2, sl
 801720e:	f7fd fff8 	bl	8015202 <strncmp>
 8017212:	9b07      	ldr	r3, [sp, #28]
 8017214:	2800      	cmp	r0, #0
 8017216:	d1d7      	bne.n	80171c8 <__gethex+0x22c>
 8017218:	461e      	mov	r6, r3
 801721a:	e78b      	b.n	8017134 <__gethex+0x198>
 801721c:	f04f 0a03 	mov.w	sl, #3
 8017220:	e7b8      	b.n	8017194 <__gethex+0x1f8>
 8017222:	da0a      	bge.n	801723a <__gethex+0x29e>
 8017224:	1a37      	subs	r7, r6, r0
 8017226:	4621      	mov	r1, r4
 8017228:	ee18 0a10 	vmov	r0, s16
 801722c:	463a      	mov	r2, r7
 801722e:	f000 fc4d 	bl	8017acc <__lshift>
 8017232:	1bed      	subs	r5, r5, r7
 8017234:	4604      	mov	r4, r0
 8017236:	f100 0914 	add.w	r9, r0, #20
 801723a:	f04f 0a00 	mov.w	sl, #0
 801723e:	e7ae      	b.n	801719e <__gethex+0x202>
 8017240:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017244:	42a8      	cmp	r0, r5
 8017246:	dd72      	ble.n	801732e <__gethex+0x392>
 8017248:	1b45      	subs	r5, r0, r5
 801724a:	42ae      	cmp	r6, r5
 801724c:	dc36      	bgt.n	80172bc <__gethex+0x320>
 801724e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017252:	2b02      	cmp	r3, #2
 8017254:	d02a      	beq.n	80172ac <__gethex+0x310>
 8017256:	2b03      	cmp	r3, #3
 8017258:	d02c      	beq.n	80172b4 <__gethex+0x318>
 801725a:	2b01      	cmp	r3, #1
 801725c:	d115      	bne.n	801728a <__gethex+0x2ee>
 801725e:	42ae      	cmp	r6, r5
 8017260:	d113      	bne.n	801728a <__gethex+0x2ee>
 8017262:	2e01      	cmp	r6, #1
 8017264:	d10b      	bne.n	801727e <__gethex+0x2e2>
 8017266:	9a04      	ldr	r2, [sp, #16]
 8017268:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801726c:	6013      	str	r3, [r2, #0]
 801726e:	2301      	movs	r3, #1
 8017270:	6123      	str	r3, [r4, #16]
 8017272:	f8c9 3000 	str.w	r3, [r9]
 8017276:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017278:	2762      	movs	r7, #98	; 0x62
 801727a:	601c      	str	r4, [r3, #0]
 801727c:	e723      	b.n	80170c6 <__gethex+0x12a>
 801727e:	1e71      	subs	r1, r6, #1
 8017280:	4620      	mov	r0, r4
 8017282:	f000 fe61 	bl	8017f48 <__any_on>
 8017286:	2800      	cmp	r0, #0
 8017288:	d1ed      	bne.n	8017266 <__gethex+0x2ca>
 801728a:	ee18 0a10 	vmov	r0, s16
 801728e:	4621      	mov	r1, r4
 8017290:	f000 fa00 	bl	8017694 <_Bfree>
 8017294:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017296:	2300      	movs	r3, #0
 8017298:	6013      	str	r3, [r2, #0]
 801729a:	2750      	movs	r7, #80	; 0x50
 801729c:	e713      	b.n	80170c6 <__gethex+0x12a>
 801729e:	bf00      	nop
 80172a0:	08019070 	.word	0x08019070
 80172a4:	08018ff3 	.word	0x08018ff3
 80172a8:	08019004 	.word	0x08019004
 80172ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d1eb      	bne.n	801728a <__gethex+0x2ee>
 80172b2:	e7d8      	b.n	8017266 <__gethex+0x2ca>
 80172b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d1d5      	bne.n	8017266 <__gethex+0x2ca>
 80172ba:	e7e6      	b.n	801728a <__gethex+0x2ee>
 80172bc:	1e6f      	subs	r7, r5, #1
 80172be:	f1ba 0f00 	cmp.w	sl, #0
 80172c2:	d131      	bne.n	8017328 <__gethex+0x38c>
 80172c4:	b127      	cbz	r7, 80172d0 <__gethex+0x334>
 80172c6:	4639      	mov	r1, r7
 80172c8:	4620      	mov	r0, r4
 80172ca:	f000 fe3d 	bl	8017f48 <__any_on>
 80172ce:	4682      	mov	sl, r0
 80172d0:	117b      	asrs	r3, r7, #5
 80172d2:	2101      	movs	r1, #1
 80172d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80172d8:	f007 071f 	and.w	r7, r7, #31
 80172dc:	fa01 f707 	lsl.w	r7, r1, r7
 80172e0:	421f      	tst	r7, r3
 80172e2:	4629      	mov	r1, r5
 80172e4:	4620      	mov	r0, r4
 80172e6:	bf18      	it	ne
 80172e8:	f04a 0a02 	orrne.w	sl, sl, #2
 80172ec:	1b76      	subs	r6, r6, r5
 80172ee:	f7ff fded 	bl	8016ecc <rshift>
 80172f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80172f6:	2702      	movs	r7, #2
 80172f8:	f1ba 0f00 	cmp.w	sl, #0
 80172fc:	d048      	beq.n	8017390 <__gethex+0x3f4>
 80172fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017302:	2b02      	cmp	r3, #2
 8017304:	d015      	beq.n	8017332 <__gethex+0x396>
 8017306:	2b03      	cmp	r3, #3
 8017308:	d017      	beq.n	801733a <__gethex+0x39e>
 801730a:	2b01      	cmp	r3, #1
 801730c:	d109      	bne.n	8017322 <__gethex+0x386>
 801730e:	f01a 0f02 	tst.w	sl, #2
 8017312:	d006      	beq.n	8017322 <__gethex+0x386>
 8017314:	f8d9 0000 	ldr.w	r0, [r9]
 8017318:	ea4a 0a00 	orr.w	sl, sl, r0
 801731c:	f01a 0f01 	tst.w	sl, #1
 8017320:	d10e      	bne.n	8017340 <__gethex+0x3a4>
 8017322:	f047 0710 	orr.w	r7, r7, #16
 8017326:	e033      	b.n	8017390 <__gethex+0x3f4>
 8017328:	f04f 0a01 	mov.w	sl, #1
 801732c:	e7d0      	b.n	80172d0 <__gethex+0x334>
 801732e:	2701      	movs	r7, #1
 8017330:	e7e2      	b.n	80172f8 <__gethex+0x35c>
 8017332:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017334:	f1c3 0301 	rsb	r3, r3, #1
 8017338:	9315      	str	r3, [sp, #84]	; 0x54
 801733a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801733c:	2b00      	cmp	r3, #0
 801733e:	d0f0      	beq.n	8017322 <__gethex+0x386>
 8017340:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017344:	f104 0314 	add.w	r3, r4, #20
 8017348:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801734c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017350:	f04f 0c00 	mov.w	ip, #0
 8017354:	4618      	mov	r0, r3
 8017356:	f853 2b04 	ldr.w	r2, [r3], #4
 801735a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801735e:	d01c      	beq.n	801739a <__gethex+0x3fe>
 8017360:	3201      	adds	r2, #1
 8017362:	6002      	str	r2, [r0, #0]
 8017364:	2f02      	cmp	r7, #2
 8017366:	f104 0314 	add.w	r3, r4, #20
 801736a:	d13f      	bne.n	80173ec <__gethex+0x450>
 801736c:	f8d8 2000 	ldr.w	r2, [r8]
 8017370:	3a01      	subs	r2, #1
 8017372:	42b2      	cmp	r2, r6
 8017374:	d10a      	bne.n	801738c <__gethex+0x3f0>
 8017376:	1171      	asrs	r1, r6, #5
 8017378:	2201      	movs	r2, #1
 801737a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801737e:	f006 061f 	and.w	r6, r6, #31
 8017382:	fa02 f606 	lsl.w	r6, r2, r6
 8017386:	421e      	tst	r6, r3
 8017388:	bf18      	it	ne
 801738a:	4617      	movne	r7, r2
 801738c:	f047 0720 	orr.w	r7, r7, #32
 8017390:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017392:	601c      	str	r4, [r3, #0]
 8017394:	9b04      	ldr	r3, [sp, #16]
 8017396:	601d      	str	r5, [r3, #0]
 8017398:	e695      	b.n	80170c6 <__gethex+0x12a>
 801739a:	4299      	cmp	r1, r3
 801739c:	f843 cc04 	str.w	ip, [r3, #-4]
 80173a0:	d8d8      	bhi.n	8017354 <__gethex+0x3b8>
 80173a2:	68a3      	ldr	r3, [r4, #8]
 80173a4:	459b      	cmp	fp, r3
 80173a6:	db19      	blt.n	80173dc <__gethex+0x440>
 80173a8:	6861      	ldr	r1, [r4, #4]
 80173aa:	ee18 0a10 	vmov	r0, s16
 80173ae:	3101      	adds	r1, #1
 80173b0:	f000 f930 	bl	8017614 <_Balloc>
 80173b4:	4681      	mov	r9, r0
 80173b6:	b918      	cbnz	r0, 80173c0 <__gethex+0x424>
 80173b8:	4b1a      	ldr	r3, [pc, #104]	; (8017424 <__gethex+0x488>)
 80173ba:	4602      	mov	r2, r0
 80173bc:	2184      	movs	r1, #132	; 0x84
 80173be:	e6a8      	b.n	8017112 <__gethex+0x176>
 80173c0:	6922      	ldr	r2, [r4, #16]
 80173c2:	3202      	adds	r2, #2
 80173c4:	f104 010c 	add.w	r1, r4, #12
 80173c8:	0092      	lsls	r2, r2, #2
 80173ca:	300c      	adds	r0, #12
 80173cc:	f7fc fef4 	bl	80141b8 <memcpy>
 80173d0:	4621      	mov	r1, r4
 80173d2:	ee18 0a10 	vmov	r0, s16
 80173d6:	f000 f95d 	bl	8017694 <_Bfree>
 80173da:	464c      	mov	r4, r9
 80173dc:	6923      	ldr	r3, [r4, #16]
 80173de:	1c5a      	adds	r2, r3, #1
 80173e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80173e4:	6122      	str	r2, [r4, #16]
 80173e6:	2201      	movs	r2, #1
 80173e8:	615a      	str	r2, [r3, #20]
 80173ea:	e7bb      	b.n	8017364 <__gethex+0x3c8>
 80173ec:	6922      	ldr	r2, [r4, #16]
 80173ee:	455a      	cmp	r2, fp
 80173f0:	dd0b      	ble.n	801740a <__gethex+0x46e>
 80173f2:	2101      	movs	r1, #1
 80173f4:	4620      	mov	r0, r4
 80173f6:	f7ff fd69 	bl	8016ecc <rshift>
 80173fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80173fe:	3501      	adds	r5, #1
 8017400:	42ab      	cmp	r3, r5
 8017402:	f6ff aed0 	blt.w	80171a6 <__gethex+0x20a>
 8017406:	2701      	movs	r7, #1
 8017408:	e7c0      	b.n	801738c <__gethex+0x3f0>
 801740a:	f016 061f 	ands.w	r6, r6, #31
 801740e:	d0fa      	beq.n	8017406 <__gethex+0x46a>
 8017410:	449a      	add	sl, r3
 8017412:	f1c6 0620 	rsb	r6, r6, #32
 8017416:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801741a:	f000 f9f1 	bl	8017800 <__hi0bits>
 801741e:	42b0      	cmp	r0, r6
 8017420:	dbe7      	blt.n	80173f2 <__gethex+0x456>
 8017422:	e7f0      	b.n	8017406 <__gethex+0x46a>
 8017424:	08018ff3 	.word	0x08018ff3

08017428 <L_shift>:
 8017428:	f1c2 0208 	rsb	r2, r2, #8
 801742c:	0092      	lsls	r2, r2, #2
 801742e:	b570      	push	{r4, r5, r6, lr}
 8017430:	f1c2 0620 	rsb	r6, r2, #32
 8017434:	6843      	ldr	r3, [r0, #4]
 8017436:	6804      	ldr	r4, [r0, #0]
 8017438:	fa03 f506 	lsl.w	r5, r3, r6
 801743c:	432c      	orrs	r4, r5
 801743e:	40d3      	lsrs	r3, r2
 8017440:	6004      	str	r4, [r0, #0]
 8017442:	f840 3f04 	str.w	r3, [r0, #4]!
 8017446:	4288      	cmp	r0, r1
 8017448:	d3f4      	bcc.n	8017434 <L_shift+0xc>
 801744a:	bd70      	pop	{r4, r5, r6, pc}

0801744c <__match>:
 801744c:	b530      	push	{r4, r5, lr}
 801744e:	6803      	ldr	r3, [r0, #0]
 8017450:	3301      	adds	r3, #1
 8017452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017456:	b914      	cbnz	r4, 801745e <__match+0x12>
 8017458:	6003      	str	r3, [r0, #0]
 801745a:	2001      	movs	r0, #1
 801745c:	bd30      	pop	{r4, r5, pc}
 801745e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017462:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017466:	2d19      	cmp	r5, #25
 8017468:	bf98      	it	ls
 801746a:	3220      	addls	r2, #32
 801746c:	42a2      	cmp	r2, r4
 801746e:	d0f0      	beq.n	8017452 <__match+0x6>
 8017470:	2000      	movs	r0, #0
 8017472:	e7f3      	b.n	801745c <__match+0x10>

08017474 <__hexnan>:
 8017474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017478:	680b      	ldr	r3, [r1, #0]
 801747a:	6801      	ldr	r1, [r0, #0]
 801747c:	115e      	asrs	r6, r3, #5
 801747e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017482:	f013 031f 	ands.w	r3, r3, #31
 8017486:	b087      	sub	sp, #28
 8017488:	bf18      	it	ne
 801748a:	3604      	addne	r6, #4
 801748c:	2500      	movs	r5, #0
 801748e:	1f37      	subs	r7, r6, #4
 8017490:	4682      	mov	sl, r0
 8017492:	4690      	mov	r8, r2
 8017494:	9301      	str	r3, [sp, #4]
 8017496:	f846 5c04 	str.w	r5, [r6, #-4]
 801749a:	46b9      	mov	r9, r7
 801749c:	463c      	mov	r4, r7
 801749e:	9502      	str	r5, [sp, #8]
 80174a0:	46ab      	mov	fp, r5
 80174a2:	784a      	ldrb	r2, [r1, #1]
 80174a4:	1c4b      	adds	r3, r1, #1
 80174a6:	9303      	str	r3, [sp, #12]
 80174a8:	b342      	cbz	r2, 80174fc <__hexnan+0x88>
 80174aa:	4610      	mov	r0, r2
 80174ac:	9105      	str	r1, [sp, #20]
 80174ae:	9204      	str	r2, [sp, #16]
 80174b0:	f7ff fd5e 	bl	8016f70 <__hexdig_fun>
 80174b4:	2800      	cmp	r0, #0
 80174b6:	d14f      	bne.n	8017558 <__hexnan+0xe4>
 80174b8:	9a04      	ldr	r2, [sp, #16]
 80174ba:	9905      	ldr	r1, [sp, #20]
 80174bc:	2a20      	cmp	r2, #32
 80174be:	d818      	bhi.n	80174f2 <__hexnan+0x7e>
 80174c0:	9b02      	ldr	r3, [sp, #8]
 80174c2:	459b      	cmp	fp, r3
 80174c4:	dd13      	ble.n	80174ee <__hexnan+0x7a>
 80174c6:	454c      	cmp	r4, r9
 80174c8:	d206      	bcs.n	80174d8 <__hexnan+0x64>
 80174ca:	2d07      	cmp	r5, #7
 80174cc:	dc04      	bgt.n	80174d8 <__hexnan+0x64>
 80174ce:	462a      	mov	r2, r5
 80174d0:	4649      	mov	r1, r9
 80174d2:	4620      	mov	r0, r4
 80174d4:	f7ff ffa8 	bl	8017428 <L_shift>
 80174d8:	4544      	cmp	r4, r8
 80174da:	d950      	bls.n	801757e <__hexnan+0x10a>
 80174dc:	2300      	movs	r3, #0
 80174de:	f1a4 0904 	sub.w	r9, r4, #4
 80174e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80174e6:	f8cd b008 	str.w	fp, [sp, #8]
 80174ea:	464c      	mov	r4, r9
 80174ec:	461d      	mov	r5, r3
 80174ee:	9903      	ldr	r1, [sp, #12]
 80174f0:	e7d7      	b.n	80174a2 <__hexnan+0x2e>
 80174f2:	2a29      	cmp	r2, #41	; 0x29
 80174f4:	d156      	bne.n	80175a4 <__hexnan+0x130>
 80174f6:	3102      	adds	r1, #2
 80174f8:	f8ca 1000 	str.w	r1, [sl]
 80174fc:	f1bb 0f00 	cmp.w	fp, #0
 8017500:	d050      	beq.n	80175a4 <__hexnan+0x130>
 8017502:	454c      	cmp	r4, r9
 8017504:	d206      	bcs.n	8017514 <__hexnan+0xa0>
 8017506:	2d07      	cmp	r5, #7
 8017508:	dc04      	bgt.n	8017514 <__hexnan+0xa0>
 801750a:	462a      	mov	r2, r5
 801750c:	4649      	mov	r1, r9
 801750e:	4620      	mov	r0, r4
 8017510:	f7ff ff8a 	bl	8017428 <L_shift>
 8017514:	4544      	cmp	r4, r8
 8017516:	d934      	bls.n	8017582 <__hexnan+0x10e>
 8017518:	f1a8 0204 	sub.w	r2, r8, #4
 801751c:	4623      	mov	r3, r4
 801751e:	f853 1b04 	ldr.w	r1, [r3], #4
 8017522:	f842 1f04 	str.w	r1, [r2, #4]!
 8017526:	429f      	cmp	r7, r3
 8017528:	d2f9      	bcs.n	801751e <__hexnan+0xaa>
 801752a:	1b3b      	subs	r3, r7, r4
 801752c:	f023 0303 	bic.w	r3, r3, #3
 8017530:	3304      	adds	r3, #4
 8017532:	3401      	adds	r4, #1
 8017534:	3e03      	subs	r6, #3
 8017536:	42b4      	cmp	r4, r6
 8017538:	bf88      	it	hi
 801753a:	2304      	movhi	r3, #4
 801753c:	4443      	add	r3, r8
 801753e:	2200      	movs	r2, #0
 8017540:	f843 2b04 	str.w	r2, [r3], #4
 8017544:	429f      	cmp	r7, r3
 8017546:	d2fb      	bcs.n	8017540 <__hexnan+0xcc>
 8017548:	683b      	ldr	r3, [r7, #0]
 801754a:	b91b      	cbnz	r3, 8017554 <__hexnan+0xe0>
 801754c:	4547      	cmp	r7, r8
 801754e:	d127      	bne.n	80175a0 <__hexnan+0x12c>
 8017550:	2301      	movs	r3, #1
 8017552:	603b      	str	r3, [r7, #0]
 8017554:	2005      	movs	r0, #5
 8017556:	e026      	b.n	80175a6 <__hexnan+0x132>
 8017558:	3501      	adds	r5, #1
 801755a:	2d08      	cmp	r5, #8
 801755c:	f10b 0b01 	add.w	fp, fp, #1
 8017560:	dd06      	ble.n	8017570 <__hexnan+0xfc>
 8017562:	4544      	cmp	r4, r8
 8017564:	d9c3      	bls.n	80174ee <__hexnan+0x7a>
 8017566:	2300      	movs	r3, #0
 8017568:	f844 3c04 	str.w	r3, [r4, #-4]
 801756c:	2501      	movs	r5, #1
 801756e:	3c04      	subs	r4, #4
 8017570:	6822      	ldr	r2, [r4, #0]
 8017572:	f000 000f 	and.w	r0, r0, #15
 8017576:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801757a:	6022      	str	r2, [r4, #0]
 801757c:	e7b7      	b.n	80174ee <__hexnan+0x7a>
 801757e:	2508      	movs	r5, #8
 8017580:	e7b5      	b.n	80174ee <__hexnan+0x7a>
 8017582:	9b01      	ldr	r3, [sp, #4]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d0df      	beq.n	8017548 <__hexnan+0xd4>
 8017588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801758c:	f1c3 0320 	rsb	r3, r3, #32
 8017590:	fa22 f303 	lsr.w	r3, r2, r3
 8017594:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017598:	401a      	ands	r2, r3
 801759a:	f846 2c04 	str.w	r2, [r6, #-4]
 801759e:	e7d3      	b.n	8017548 <__hexnan+0xd4>
 80175a0:	3f04      	subs	r7, #4
 80175a2:	e7d1      	b.n	8017548 <__hexnan+0xd4>
 80175a4:	2004      	movs	r0, #4
 80175a6:	b007      	add	sp, #28
 80175a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080175ac <_localeconv_r>:
 80175ac:	4800      	ldr	r0, [pc, #0]	; (80175b0 <_localeconv_r+0x4>)
 80175ae:	4770      	bx	lr
 80175b0:	20000310 	.word	0x20000310

080175b4 <_lseek_r>:
 80175b4:	b538      	push	{r3, r4, r5, lr}
 80175b6:	4d07      	ldr	r5, [pc, #28]	; (80175d4 <_lseek_r+0x20>)
 80175b8:	4604      	mov	r4, r0
 80175ba:	4608      	mov	r0, r1
 80175bc:	4611      	mov	r1, r2
 80175be:	2200      	movs	r2, #0
 80175c0:	602a      	str	r2, [r5, #0]
 80175c2:	461a      	mov	r2, r3
 80175c4:	f7ec fd9a 	bl	80040fc <_lseek>
 80175c8:	1c43      	adds	r3, r0, #1
 80175ca:	d102      	bne.n	80175d2 <_lseek_r+0x1e>
 80175cc:	682b      	ldr	r3, [r5, #0]
 80175ce:	b103      	cbz	r3, 80175d2 <_lseek_r+0x1e>
 80175d0:	6023      	str	r3, [r4, #0]
 80175d2:	bd38      	pop	{r3, r4, r5, pc}
 80175d4:	2000cc08 	.word	0x2000cc08

080175d8 <__ascii_mbtowc>:
 80175d8:	b082      	sub	sp, #8
 80175da:	b901      	cbnz	r1, 80175de <__ascii_mbtowc+0x6>
 80175dc:	a901      	add	r1, sp, #4
 80175de:	b142      	cbz	r2, 80175f2 <__ascii_mbtowc+0x1a>
 80175e0:	b14b      	cbz	r3, 80175f6 <__ascii_mbtowc+0x1e>
 80175e2:	7813      	ldrb	r3, [r2, #0]
 80175e4:	600b      	str	r3, [r1, #0]
 80175e6:	7812      	ldrb	r2, [r2, #0]
 80175e8:	1e10      	subs	r0, r2, #0
 80175ea:	bf18      	it	ne
 80175ec:	2001      	movne	r0, #1
 80175ee:	b002      	add	sp, #8
 80175f0:	4770      	bx	lr
 80175f2:	4610      	mov	r0, r2
 80175f4:	e7fb      	b.n	80175ee <__ascii_mbtowc+0x16>
 80175f6:	f06f 0001 	mvn.w	r0, #1
 80175fa:	e7f8      	b.n	80175ee <__ascii_mbtowc+0x16>

080175fc <__malloc_lock>:
 80175fc:	4801      	ldr	r0, [pc, #4]	; (8017604 <__malloc_lock+0x8>)
 80175fe:	f7fc bdc8 	b.w	8014192 <__retarget_lock_acquire_recursive>
 8017602:	bf00      	nop
 8017604:	2000cc00 	.word	0x2000cc00

08017608 <__malloc_unlock>:
 8017608:	4801      	ldr	r0, [pc, #4]	; (8017610 <__malloc_unlock+0x8>)
 801760a:	f7fc bdc3 	b.w	8014194 <__retarget_lock_release_recursive>
 801760e:	bf00      	nop
 8017610:	2000cc00 	.word	0x2000cc00

08017614 <_Balloc>:
 8017614:	b570      	push	{r4, r5, r6, lr}
 8017616:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017618:	4604      	mov	r4, r0
 801761a:	460d      	mov	r5, r1
 801761c:	b976      	cbnz	r6, 801763c <_Balloc+0x28>
 801761e:	2010      	movs	r0, #16
 8017620:	f7fc fdba 	bl	8014198 <malloc>
 8017624:	4602      	mov	r2, r0
 8017626:	6260      	str	r0, [r4, #36]	; 0x24
 8017628:	b920      	cbnz	r0, 8017634 <_Balloc+0x20>
 801762a:	4b18      	ldr	r3, [pc, #96]	; (801768c <_Balloc+0x78>)
 801762c:	4818      	ldr	r0, [pc, #96]	; (8017690 <_Balloc+0x7c>)
 801762e:	2166      	movs	r1, #102	; 0x66
 8017630:	f000 fe40 	bl	80182b4 <__assert_func>
 8017634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017638:	6006      	str	r6, [r0, #0]
 801763a:	60c6      	str	r6, [r0, #12]
 801763c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801763e:	68f3      	ldr	r3, [r6, #12]
 8017640:	b183      	cbz	r3, 8017664 <_Balloc+0x50>
 8017642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017644:	68db      	ldr	r3, [r3, #12]
 8017646:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801764a:	b9b8      	cbnz	r0, 801767c <_Balloc+0x68>
 801764c:	2101      	movs	r1, #1
 801764e:	fa01 f605 	lsl.w	r6, r1, r5
 8017652:	1d72      	adds	r2, r6, #5
 8017654:	0092      	lsls	r2, r2, #2
 8017656:	4620      	mov	r0, r4
 8017658:	f000 fc97 	bl	8017f8a <_calloc_r>
 801765c:	b160      	cbz	r0, 8017678 <_Balloc+0x64>
 801765e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017662:	e00e      	b.n	8017682 <_Balloc+0x6e>
 8017664:	2221      	movs	r2, #33	; 0x21
 8017666:	2104      	movs	r1, #4
 8017668:	4620      	mov	r0, r4
 801766a:	f000 fc8e 	bl	8017f8a <_calloc_r>
 801766e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017670:	60f0      	str	r0, [r6, #12]
 8017672:	68db      	ldr	r3, [r3, #12]
 8017674:	2b00      	cmp	r3, #0
 8017676:	d1e4      	bne.n	8017642 <_Balloc+0x2e>
 8017678:	2000      	movs	r0, #0
 801767a:	bd70      	pop	{r4, r5, r6, pc}
 801767c:	6802      	ldr	r2, [r0, #0]
 801767e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017682:	2300      	movs	r3, #0
 8017684:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017688:	e7f7      	b.n	801767a <_Balloc+0x66>
 801768a:	bf00      	nop
 801768c:	08018f7d 	.word	0x08018f7d
 8017690:	08019084 	.word	0x08019084

08017694 <_Bfree>:
 8017694:	b570      	push	{r4, r5, r6, lr}
 8017696:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017698:	4605      	mov	r5, r0
 801769a:	460c      	mov	r4, r1
 801769c:	b976      	cbnz	r6, 80176bc <_Bfree+0x28>
 801769e:	2010      	movs	r0, #16
 80176a0:	f7fc fd7a 	bl	8014198 <malloc>
 80176a4:	4602      	mov	r2, r0
 80176a6:	6268      	str	r0, [r5, #36]	; 0x24
 80176a8:	b920      	cbnz	r0, 80176b4 <_Bfree+0x20>
 80176aa:	4b09      	ldr	r3, [pc, #36]	; (80176d0 <_Bfree+0x3c>)
 80176ac:	4809      	ldr	r0, [pc, #36]	; (80176d4 <_Bfree+0x40>)
 80176ae:	218a      	movs	r1, #138	; 0x8a
 80176b0:	f000 fe00 	bl	80182b4 <__assert_func>
 80176b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80176b8:	6006      	str	r6, [r0, #0]
 80176ba:	60c6      	str	r6, [r0, #12]
 80176bc:	b13c      	cbz	r4, 80176ce <_Bfree+0x3a>
 80176be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80176c0:	6862      	ldr	r2, [r4, #4]
 80176c2:	68db      	ldr	r3, [r3, #12]
 80176c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80176c8:	6021      	str	r1, [r4, #0]
 80176ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80176ce:	bd70      	pop	{r4, r5, r6, pc}
 80176d0:	08018f7d 	.word	0x08018f7d
 80176d4:	08019084 	.word	0x08019084

080176d8 <__multadd>:
 80176d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176dc:	690e      	ldr	r6, [r1, #16]
 80176de:	4607      	mov	r7, r0
 80176e0:	4698      	mov	r8, r3
 80176e2:	460c      	mov	r4, r1
 80176e4:	f101 0014 	add.w	r0, r1, #20
 80176e8:	2300      	movs	r3, #0
 80176ea:	6805      	ldr	r5, [r0, #0]
 80176ec:	b2a9      	uxth	r1, r5
 80176ee:	fb02 8101 	mla	r1, r2, r1, r8
 80176f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80176f6:	0c2d      	lsrs	r5, r5, #16
 80176f8:	fb02 c505 	mla	r5, r2, r5, ip
 80176fc:	b289      	uxth	r1, r1
 80176fe:	3301      	adds	r3, #1
 8017700:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8017704:	429e      	cmp	r6, r3
 8017706:	f840 1b04 	str.w	r1, [r0], #4
 801770a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801770e:	dcec      	bgt.n	80176ea <__multadd+0x12>
 8017710:	f1b8 0f00 	cmp.w	r8, #0
 8017714:	d022      	beq.n	801775c <__multadd+0x84>
 8017716:	68a3      	ldr	r3, [r4, #8]
 8017718:	42b3      	cmp	r3, r6
 801771a:	dc19      	bgt.n	8017750 <__multadd+0x78>
 801771c:	6861      	ldr	r1, [r4, #4]
 801771e:	4638      	mov	r0, r7
 8017720:	3101      	adds	r1, #1
 8017722:	f7ff ff77 	bl	8017614 <_Balloc>
 8017726:	4605      	mov	r5, r0
 8017728:	b928      	cbnz	r0, 8017736 <__multadd+0x5e>
 801772a:	4602      	mov	r2, r0
 801772c:	4b0d      	ldr	r3, [pc, #52]	; (8017764 <__multadd+0x8c>)
 801772e:	480e      	ldr	r0, [pc, #56]	; (8017768 <__multadd+0x90>)
 8017730:	21b5      	movs	r1, #181	; 0xb5
 8017732:	f000 fdbf 	bl	80182b4 <__assert_func>
 8017736:	6922      	ldr	r2, [r4, #16]
 8017738:	3202      	adds	r2, #2
 801773a:	f104 010c 	add.w	r1, r4, #12
 801773e:	0092      	lsls	r2, r2, #2
 8017740:	300c      	adds	r0, #12
 8017742:	f7fc fd39 	bl	80141b8 <memcpy>
 8017746:	4621      	mov	r1, r4
 8017748:	4638      	mov	r0, r7
 801774a:	f7ff ffa3 	bl	8017694 <_Bfree>
 801774e:	462c      	mov	r4, r5
 8017750:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8017754:	3601      	adds	r6, #1
 8017756:	f8c3 8014 	str.w	r8, [r3, #20]
 801775a:	6126      	str	r6, [r4, #16]
 801775c:	4620      	mov	r0, r4
 801775e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017762:	bf00      	nop
 8017764:	08018ff3 	.word	0x08018ff3
 8017768:	08019084 	.word	0x08019084

0801776c <__s2b>:
 801776c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017770:	460c      	mov	r4, r1
 8017772:	4615      	mov	r5, r2
 8017774:	461f      	mov	r7, r3
 8017776:	2209      	movs	r2, #9
 8017778:	3308      	adds	r3, #8
 801777a:	4606      	mov	r6, r0
 801777c:	fb93 f3f2 	sdiv	r3, r3, r2
 8017780:	2100      	movs	r1, #0
 8017782:	2201      	movs	r2, #1
 8017784:	429a      	cmp	r2, r3
 8017786:	db09      	blt.n	801779c <__s2b+0x30>
 8017788:	4630      	mov	r0, r6
 801778a:	f7ff ff43 	bl	8017614 <_Balloc>
 801778e:	b940      	cbnz	r0, 80177a2 <__s2b+0x36>
 8017790:	4602      	mov	r2, r0
 8017792:	4b19      	ldr	r3, [pc, #100]	; (80177f8 <__s2b+0x8c>)
 8017794:	4819      	ldr	r0, [pc, #100]	; (80177fc <__s2b+0x90>)
 8017796:	21ce      	movs	r1, #206	; 0xce
 8017798:	f000 fd8c 	bl	80182b4 <__assert_func>
 801779c:	0052      	lsls	r2, r2, #1
 801779e:	3101      	adds	r1, #1
 80177a0:	e7f0      	b.n	8017784 <__s2b+0x18>
 80177a2:	9b08      	ldr	r3, [sp, #32]
 80177a4:	6143      	str	r3, [r0, #20]
 80177a6:	2d09      	cmp	r5, #9
 80177a8:	f04f 0301 	mov.w	r3, #1
 80177ac:	6103      	str	r3, [r0, #16]
 80177ae:	dd16      	ble.n	80177de <__s2b+0x72>
 80177b0:	f104 0909 	add.w	r9, r4, #9
 80177b4:	46c8      	mov	r8, r9
 80177b6:	442c      	add	r4, r5
 80177b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80177bc:	4601      	mov	r1, r0
 80177be:	3b30      	subs	r3, #48	; 0x30
 80177c0:	220a      	movs	r2, #10
 80177c2:	4630      	mov	r0, r6
 80177c4:	f7ff ff88 	bl	80176d8 <__multadd>
 80177c8:	45a0      	cmp	r8, r4
 80177ca:	d1f5      	bne.n	80177b8 <__s2b+0x4c>
 80177cc:	f1a5 0408 	sub.w	r4, r5, #8
 80177d0:	444c      	add	r4, r9
 80177d2:	1b2d      	subs	r5, r5, r4
 80177d4:	1963      	adds	r3, r4, r5
 80177d6:	42bb      	cmp	r3, r7
 80177d8:	db04      	blt.n	80177e4 <__s2b+0x78>
 80177da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177de:	340a      	adds	r4, #10
 80177e0:	2509      	movs	r5, #9
 80177e2:	e7f6      	b.n	80177d2 <__s2b+0x66>
 80177e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80177e8:	4601      	mov	r1, r0
 80177ea:	3b30      	subs	r3, #48	; 0x30
 80177ec:	220a      	movs	r2, #10
 80177ee:	4630      	mov	r0, r6
 80177f0:	f7ff ff72 	bl	80176d8 <__multadd>
 80177f4:	e7ee      	b.n	80177d4 <__s2b+0x68>
 80177f6:	bf00      	nop
 80177f8:	08018ff3 	.word	0x08018ff3
 80177fc:	08019084 	.word	0x08019084

08017800 <__hi0bits>:
 8017800:	0c03      	lsrs	r3, r0, #16
 8017802:	041b      	lsls	r3, r3, #16
 8017804:	b9d3      	cbnz	r3, 801783c <__hi0bits+0x3c>
 8017806:	0400      	lsls	r0, r0, #16
 8017808:	2310      	movs	r3, #16
 801780a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801780e:	bf04      	itt	eq
 8017810:	0200      	lsleq	r0, r0, #8
 8017812:	3308      	addeq	r3, #8
 8017814:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017818:	bf04      	itt	eq
 801781a:	0100      	lsleq	r0, r0, #4
 801781c:	3304      	addeq	r3, #4
 801781e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017822:	bf04      	itt	eq
 8017824:	0080      	lsleq	r0, r0, #2
 8017826:	3302      	addeq	r3, #2
 8017828:	2800      	cmp	r0, #0
 801782a:	db05      	blt.n	8017838 <__hi0bits+0x38>
 801782c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017830:	f103 0301 	add.w	r3, r3, #1
 8017834:	bf08      	it	eq
 8017836:	2320      	moveq	r3, #32
 8017838:	4618      	mov	r0, r3
 801783a:	4770      	bx	lr
 801783c:	2300      	movs	r3, #0
 801783e:	e7e4      	b.n	801780a <__hi0bits+0xa>

08017840 <__lo0bits>:
 8017840:	6803      	ldr	r3, [r0, #0]
 8017842:	f013 0207 	ands.w	r2, r3, #7
 8017846:	4601      	mov	r1, r0
 8017848:	d00b      	beq.n	8017862 <__lo0bits+0x22>
 801784a:	07da      	lsls	r2, r3, #31
 801784c:	d424      	bmi.n	8017898 <__lo0bits+0x58>
 801784e:	0798      	lsls	r0, r3, #30
 8017850:	bf49      	itett	mi
 8017852:	085b      	lsrmi	r3, r3, #1
 8017854:	089b      	lsrpl	r3, r3, #2
 8017856:	2001      	movmi	r0, #1
 8017858:	600b      	strmi	r3, [r1, #0]
 801785a:	bf5c      	itt	pl
 801785c:	600b      	strpl	r3, [r1, #0]
 801785e:	2002      	movpl	r0, #2
 8017860:	4770      	bx	lr
 8017862:	b298      	uxth	r0, r3
 8017864:	b9b0      	cbnz	r0, 8017894 <__lo0bits+0x54>
 8017866:	0c1b      	lsrs	r3, r3, #16
 8017868:	2010      	movs	r0, #16
 801786a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801786e:	bf04      	itt	eq
 8017870:	0a1b      	lsreq	r3, r3, #8
 8017872:	3008      	addeq	r0, #8
 8017874:	071a      	lsls	r2, r3, #28
 8017876:	bf04      	itt	eq
 8017878:	091b      	lsreq	r3, r3, #4
 801787a:	3004      	addeq	r0, #4
 801787c:	079a      	lsls	r2, r3, #30
 801787e:	bf04      	itt	eq
 8017880:	089b      	lsreq	r3, r3, #2
 8017882:	3002      	addeq	r0, #2
 8017884:	07da      	lsls	r2, r3, #31
 8017886:	d403      	bmi.n	8017890 <__lo0bits+0x50>
 8017888:	085b      	lsrs	r3, r3, #1
 801788a:	f100 0001 	add.w	r0, r0, #1
 801788e:	d005      	beq.n	801789c <__lo0bits+0x5c>
 8017890:	600b      	str	r3, [r1, #0]
 8017892:	4770      	bx	lr
 8017894:	4610      	mov	r0, r2
 8017896:	e7e8      	b.n	801786a <__lo0bits+0x2a>
 8017898:	2000      	movs	r0, #0
 801789a:	4770      	bx	lr
 801789c:	2020      	movs	r0, #32
 801789e:	4770      	bx	lr

080178a0 <__i2b>:
 80178a0:	b510      	push	{r4, lr}
 80178a2:	460c      	mov	r4, r1
 80178a4:	2101      	movs	r1, #1
 80178a6:	f7ff feb5 	bl	8017614 <_Balloc>
 80178aa:	4602      	mov	r2, r0
 80178ac:	b928      	cbnz	r0, 80178ba <__i2b+0x1a>
 80178ae:	4b05      	ldr	r3, [pc, #20]	; (80178c4 <__i2b+0x24>)
 80178b0:	4805      	ldr	r0, [pc, #20]	; (80178c8 <__i2b+0x28>)
 80178b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80178b6:	f000 fcfd 	bl	80182b4 <__assert_func>
 80178ba:	2301      	movs	r3, #1
 80178bc:	6144      	str	r4, [r0, #20]
 80178be:	6103      	str	r3, [r0, #16]
 80178c0:	bd10      	pop	{r4, pc}
 80178c2:	bf00      	nop
 80178c4:	08018ff3 	.word	0x08018ff3
 80178c8:	08019084 	.word	0x08019084

080178cc <__multiply>:
 80178cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178d0:	4614      	mov	r4, r2
 80178d2:	690a      	ldr	r2, [r1, #16]
 80178d4:	6923      	ldr	r3, [r4, #16]
 80178d6:	429a      	cmp	r2, r3
 80178d8:	bfb8      	it	lt
 80178da:	460b      	movlt	r3, r1
 80178dc:	460d      	mov	r5, r1
 80178de:	bfbc      	itt	lt
 80178e0:	4625      	movlt	r5, r4
 80178e2:	461c      	movlt	r4, r3
 80178e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80178e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80178ec:	68ab      	ldr	r3, [r5, #8]
 80178ee:	6869      	ldr	r1, [r5, #4]
 80178f0:	eb0a 0709 	add.w	r7, sl, r9
 80178f4:	42bb      	cmp	r3, r7
 80178f6:	b085      	sub	sp, #20
 80178f8:	bfb8      	it	lt
 80178fa:	3101      	addlt	r1, #1
 80178fc:	f7ff fe8a 	bl	8017614 <_Balloc>
 8017900:	b930      	cbnz	r0, 8017910 <__multiply+0x44>
 8017902:	4602      	mov	r2, r0
 8017904:	4b42      	ldr	r3, [pc, #264]	; (8017a10 <__multiply+0x144>)
 8017906:	4843      	ldr	r0, [pc, #268]	; (8017a14 <__multiply+0x148>)
 8017908:	f240 115d 	movw	r1, #349	; 0x15d
 801790c:	f000 fcd2 	bl	80182b4 <__assert_func>
 8017910:	f100 0614 	add.w	r6, r0, #20
 8017914:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8017918:	4633      	mov	r3, r6
 801791a:	2200      	movs	r2, #0
 801791c:	4543      	cmp	r3, r8
 801791e:	d31e      	bcc.n	801795e <__multiply+0x92>
 8017920:	f105 0c14 	add.w	ip, r5, #20
 8017924:	f104 0314 	add.w	r3, r4, #20
 8017928:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801792c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8017930:	9202      	str	r2, [sp, #8]
 8017932:	ebac 0205 	sub.w	r2, ip, r5
 8017936:	3a15      	subs	r2, #21
 8017938:	f022 0203 	bic.w	r2, r2, #3
 801793c:	3204      	adds	r2, #4
 801793e:	f105 0115 	add.w	r1, r5, #21
 8017942:	458c      	cmp	ip, r1
 8017944:	bf38      	it	cc
 8017946:	2204      	movcc	r2, #4
 8017948:	9201      	str	r2, [sp, #4]
 801794a:	9a02      	ldr	r2, [sp, #8]
 801794c:	9303      	str	r3, [sp, #12]
 801794e:	429a      	cmp	r2, r3
 8017950:	d808      	bhi.n	8017964 <__multiply+0x98>
 8017952:	2f00      	cmp	r7, #0
 8017954:	dc55      	bgt.n	8017a02 <__multiply+0x136>
 8017956:	6107      	str	r7, [r0, #16]
 8017958:	b005      	add	sp, #20
 801795a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801795e:	f843 2b04 	str.w	r2, [r3], #4
 8017962:	e7db      	b.n	801791c <__multiply+0x50>
 8017964:	f8b3 a000 	ldrh.w	sl, [r3]
 8017968:	f1ba 0f00 	cmp.w	sl, #0
 801796c:	d020      	beq.n	80179b0 <__multiply+0xe4>
 801796e:	f105 0e14 	add.w	lr, r5, #20
 8017972:	46b1      	mov	r9, r6
 8017974:	2200      	movs	r2, #0
 8017976:	f85e 4b04 	ldr.w	r4, [lr], #4
 801797a:	f8d9 b000 	ldr.w	fp, [r9]
 801797e:	b2a1      	uxth	r1, r4
 8017980:	fa1f fb8b 	uxth.w	fp, fp
 8017984:	fb0a b101 	mla	r1, sl, r1, fp
 8017988:	4411      	add	r1, r2
 801798a:	f8d9 2000 	ldr.w	r2, [r9]
 801798e:	0c24      	lsrs	r4, r4, #16
 8017990:	0c12      	lsrs	r2, r2, #16
 8017992:	fb0a 2404 	mla	r4, sl, r4, r2
 8017996:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801799a:	b289      	uxth	r1, r1
 801799c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80179a0:	45f4      	cmp	ip, lr
 80179a2:	f849 1b04 	str.w	r1, [r9], #4
 80179a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80179aa:	d8e4      	bhi.n	8017976 <__multiply+0xaa>
 80179ac:	9901      	ldr	r1, [sp, #4]
 80179ae:	5072      	str	r2, [r6, r1]
 80179b0:	9a03      	ldr	r2, [sp, #12]
 80179b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80179b6:	3304      	adds	r3, #4
 80179b8:	f1b9 0f00 	cmp.w	r9, #0
 80179bc:	d01f      	beq.n	80179fe <__multiply+0x132>
 80179be:	6834      	ldr	r4, [r6, #0]
 80179c0:	f105 0114 	add.w	r1, r5, #20
 80179c4:	46b6      	mov	lr, r6
 80179c6:	f04f 0a00 	mov.w	sl, #0
 80179ca:	880a      	ldrh	r2, [r1, #0]
 80179cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80179d0:	fb09 b202 	mla	r2, r9, r2, fp
 80179d4:	4492      	add	sl, r2
 80179d6:	b2a4      	uxth	r4, r4
 80179d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80179dc:	f84e 4b04 	str.w	r4, [lr], #4
 80179e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80179e4:	f8be 2000 	ldrh.w	r2, [lr]
 80179e8:	0c24      	lsrs	r4, r4, #16
 80179ea:	fb09 2404 	mla	r4, r9, r4, r2
 80179ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80179f2:	458c      	cmp	ip, r1
 80179f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80179f8:	d8e7      	bhi.n	80179ca <__multiply+0xfe>
 80179fa:	9a01      	ldr	r2, [sp, #4]
 80179fc:	50b4      	str	r4, [r6, r2]
 80179fe:	3604      	adds	r6, #4
 8017a00:	e7a3      	b.n	801794a <__multiply+0x7e>
 8017a02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d1a5      	bne.n	8017956 <__multiply+0x8a>
 8017a0a:	3f01      	subs	r7, #1
 8017a0c:	e7a1      	b.n	8017952 <__multiply+0x86>
 8017a0e:	bf00      	nop
 8017a10:	08018ff3 	.word	0x08018ff3
 8017a14:	08019084 	.word	0x08019084

08017a18 <__pow5mult>:
 8017a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a1c:	4615      	mov	r5, r2
 8017a1e:	f012 0203 	ands.w	r2, r2, #3
 8017a22:	4606      	mov	r6, r0
 8017a24:	460f      	mov	r7, r1
 8017a26:	d007      	beq.n	8017a38 <__pow5mult+0x20>
 8017a28:	4c25      	ldr	r4, [pc, #148]	; (8017ac0 <__pow5mult+0xa8>)
 8017a2a:	3a01      	subs	r2, #1
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017a32:	f7ff fe51 	bl	80176d8 <__multadd>
 8017a36:	4607      	mov	r7, r0
 8017a38:	10ad      	asrs	r5, r5, #2
 8017a3a:	d03d      	beq.n	8017ab8 <__pow5mult+0xa0>
 8017a3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017a3e:	b97c      	cbnz	r4, 8017a60 <__pow5mult+0x48>
 8017a40:	2010      	movs	r0, #16
 8017a42:	f7fc fba9 	bl	8014198 <malloc>
 8017a46:	4602      	mov	r2, r0
 8017a48:	6270      	str	r0, [r6, #36]	; 0x24
 8017a4a:	b928      	cbnz	r0, 8017a58 <__pow5mult+0x40>
 8017a4c:	4b1d      	ldr	r3, [pc, #116]	; (8017ac4 <__pow5mult+0xac>)
 8017a4e:	481e      	ldr	r0, [pc, #120]	; (8017ac8 <__pow5mult+0xb0>)
 8017a50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017a54:	f000 fc2e 	bl	80182b4 <__assert_func>
 8017a58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017a5c:	6004      	str	r4, [r0, #0]
 8017a5e:	60c4      	str	r4, [r0, #12]
 8017a60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017a64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017a68:	b94c      	cbnz	r4, 8017a7e <__pow5mult+0x66>
 8017a6a:	f240 2171 	movw	r1, #625	; 0x271
 8017a6e:	4630      	mov	r0, r6
 8017a70:	f7ff ff16 	bl	80178a0 <__i2b>
 8017a74:	2300      	movs	r3, #0
 8017a76:	f8c8 0008 	str.w	r0, [r8, #8]
 8017a7a:	4604      	mov	r4, r0
 8017a7c:	6003      	str	r3, [r0, #0]
 8017a7e:	f04f 0900 	mov.w	r9, #0
 8017a82:	07eb      	lsls	r3, r5, #31
 8017a84:	d50a      	bpl.n	8017a9c <__pow5mult+0x84>
 8017a86:	4639      	mov	r1, r7
 8017a88:	4622      	mov	r2, r4
 8017a8a:	4630      	mov	r0, r6
 8017a8c:	f7ff ff1e 	bl	80178cc <__multiply>
 8017a90:	4639      	mov	r1, r7
 8017a92:	4680      	mov	r8, r0
 8017a94:	4630      	mov	r0, r6
 8017a96:	f7ff fdfd 	bl	8017694 <_Bfree>
 8017a9a:	4647      	mov	r7, r8
 8017a9c:	106d      	asrs	r5, r5, #1
 8017a9e:	d00b      	beq.n	8017ab8 <__pow5mult+0xa0>
 8017aa0:	6820      	ldr	r0, [r4, #0]
 8017aa2:	b938      	cbnz	r0, 8017ab4 <__pow5mult+0x9c>
 8017aa4:	4622      	mov	r2, r4
 8017aa6:	4621      	mov	r1, r4
 8017aa8:	4630      	mov	r0, r6
 8017aaa:	f7ff ff0f 	bl	80178cc <__multiply>
 8017aae:	6020      	str	r0, [r4, #0]
 8017ab0:	f8c0 9000 	str.w	r9, [r0]
 8017ab4:	4604      	mov	r4, r0
 8017ab6:	e7e4      	b.n	8017a82 <__pow5mult+0x6a>
 8017ab8:	4638      	mov	r0, r7
 8017aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017abe:	bf00      	nop
 8017ac0:	080191d8 	.word	0x080191d8
 8017ac4:	08018f7d 	.word	0x08018f7d
 8017ac8:	08019084 	.word	0x08019084

08017acc <__lshift>:
 8017acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ad0:	460c      	mov	r4, r1
 8017ad2:	6849      	ldr	r1, [r1, #4]
 8017ad4:	6923      	ldr	r3, [r4, #16]
 8017ad6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017ada:	68a3      	ldr	r3, [r4, #8]
 8017adc:	4607      	mov	r7, r0
 8017ade:	4691      	mov	r9, r2
 8017ae0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017ae4:	f108 0601 	add.w	r6, r8, #1
 8017ae8:	42b3      	cmp	r3, r6
 8017aea:	db0b      	blt.n	8017b04 <__lshift+0x38>
 8017aec:	4638      	mov	r0, r7
 8017aee:	f7ff fd91 	bl	8017614 <_Balloc>
 8017af2:	4605      	mov	r5, r0
 8017af4:	b948      	cbnz	r0, 8017b0a <__lshift+0x3e>
 8017af6:	4602      	mov	r2, r0
 8017af8:	4b28      	ldr	r3, [pc, #160]	; (8017b9c <__lshift+0xd0>)
 8017afa:	4829      	ldr	r0, [pc, #164]	; (8017ba0 <__lshift+0xd4>)
 8017afc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017b00:	f000 fbd8 	bl	80182b4 <__assert_func>
 8017b04:	3101      	adds	r1, #1
 8017b06:	005b      	lsls	r3, r3, #1
 8017b08:	e7ee      	b.n	8017ae8 <__lshift+0x1c>
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	f100 0114 	add.w	r1, r0, #20
 8017b10:	f100 0210 	add.w	r2, r0, #16
 8017b14:	4618      	mov	r0, r3
 8017b16:	4553      	cmp	r3, sl
 8017b18:	db33      	blt.n	8017b82 <__lshift+0xb6>
 8017b1a:	6920      	ldr	r0, [r4, #16]
 8017b1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017b20:	f104 0314 	add.w	r3, r4, #20
 8017b24:	f019 091f 	ands.w	r9, r9, #31
 8017b28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017b2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017b30:	d02b      	beq.n	8017b8a <__lshift+0xbe>
 8017b32:	f1c9 0e20 	rsb	lr, r9, #32
 8017b36:	468a      	mov	sl, r1
 8017b38:	2200      	movs	r2, #0
 8017b3a:	6818      	ldr	r0, [r3, #0]
 8017b3c:	fa00 f009 	lsl.w	r0, r0, r9
 8017b40:	4302      	orrs	r2, r0
 8017b42:	f84a 2b04 	str.w	r2, [sl], #4
 8017b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b4a:	459c      	cmp	ip, r3
 8017b4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8017b50:	d8f3      	bhi.n	8017b3a <__lshift+0x6e>
 8017b52:	ebac 0304 	sub.w	r3, ip, r4
 8017b56:	3b15      	subs	r3, #21
 8017b58:	f023 0303 	bic.w	r3, r3, #3
 8017b5c:	3304      	adds	r3, #4
 8017b5e:	f104 0015 	add.w	r0, r4, #21
 8017b62:	4584      	cmp	ip, r0
 8017b64:	bf38      	it	cc
 8017b66:	2304      	movcc	r3, #4
 8017b68:	50ca      	str	r2, [r1, r3]
 8017b6a:	b10a      	cbz	r2, 8017b70 <__lshift+0xa4>
 8017b6c:	f108 0602 	add.w	r6, r8, #2
 8017b70:	3e01      	subs	r6, #1
 8017b72:	4638      	mov	r0, r7
 8017b74:	612e      	str	r6, [r5, #16]
 8017b76:	4621      	mov	r1, r4
 8017b78:	f7ff fd8c 	bl	8017694 <_Bfree>
 8017b7c:	4628      	mov	r0, r5
 8017b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b82:	f842 0f04 	str.w	r0, [r2, #4]!
 8017b86:	3301      	adds	r3, #1
 8017b88:	e7c5      	b.n	8017b16 <__lshift+0x4a>
 8017b8a:	3904      	subs	r1, #4
 8017b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b90:	f841 2f04 	str.w	r2, [r1, #4]!
 8017b94:	459c      	cmp	ip, r3
 8017b96:	d8f9      	bhi.n	8017b8c <__lshift+0xc0>
 8017b98:	e7ea      	b.n	8017b70 <__lshift+0xa4>
 8017b9a:	bf00      	nop
 8017b9c:	08018ff3 	.word	0x08018ff3
 8017ba0:	08019084 	.word	0x08019084

08017ba4 <__mcmp>:
 8017ba4:	b530      	push	{r4, r5, lr}
 8017ba6:	6902      	ldr	r2, [r0, #16]
 8017ba8:	690c      	ldr	r4, [r1, #16]
 8017baa:	1b12      	subs	r2, r2, r4
 8017bac:	d10e      	bne.n	8017bcc <__mcmp+0x28>
 8017bae:	f100 0314 	add.w	r3, r0, #20
 8017bb2:	3114      	adds	r1, #20
 8017bb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017bb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017bbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017bc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017bc4:	42a5      	cmp	r5, r4
 8017bc6:	d003      	beq.n	8017bd0 <__mcmp+0x2c>
 8017bc8:	d305      	bcc.n	8017bd6 <__mcmp+0x32>
 8017bca:	2201      	movs	r2, #1
 8017bcc:	4610      	mov	r0, r2
 8017bce:	bd30      	pop	{r4, r5, pc}
 8017bd0:	4283      	cmp	r3, r0
 8017bd2:	d3f3      	bcc.n	8017bbc <__mcmp+0x18>
 8017bd4:	e7fa      	b.n	8017bcc <__mcmp+0x28>
 8017bd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017bda:	e7f7      	b.n	8017bcc <__mcmp+0x28>

08017bdc <__mdiff>:
 8017bdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017be0:	460c      	mov	r4, r1
 8017be2:	4606      	mov	r6, r0
 8017be4:	4611      	mov	r1, r2
 8017be6:	4620      	mov	r0, r4
 8017be8:	4617      	mov	r7, r2
 8017bea:	f7ff ffdb 	bl	8017ba4 <__mcmp>
 8017bee:	1e05      	subs	r5, r0, #0
 8017bf0:	d110      	bne.n	8017c14 <__mdiff+0x38>
 8017bf2:	4629      	mov	r1, r5
 8017bf4:	4630      	mov	r0, r6
 8017bf6:	f7ff fd0d 	bl	8017614 <_Balloc>
 8017bfa:	b930      	cbnz	r0, 8017c0a <__mdiff+0x2e>
 8017bfc:	4b39      	ldr	r3, [pc, #228]	; (8017ce4 <__mdiff+0x108>)
 8017bfe:	4602      	mov	r2, r0
 8017c00:	f240 2132 	movw	r1, #562	; 0x232
 8017c04:	4838      	ldr	r0, [pc, #224]	; (8017ce8 <__mdiff+0x10c>)
 8017c06:	f000 fb55 	bl	80182b4 <__assert_func>
 8017c0a:	2301      	movs	r3, #1
 8017c0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017c10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c14:	bfa4      	itt	ge
 8017c16:	463b      	movge	r3, r7
 8017c18:	4627      	movge	r7, r4
 8017c1a:	4630      	mov	r0, r6
 8017c1c:	6879      	ldr	r1, [r7, #4]
 8017c1e:	bfa6      	itte	ge
 8017c20:	461c      	movge	r4, r3
 8017c22:	2500      	movge	r5, #0
 8017c24:	2501      	movlt	r5, #1
 8017c26:	f7ff fcf5 	bl	8017614 <_Balloc>
 8017c2a:	b920      	cbnz	r0, 8017c36 <__mdiff+0x5a>
 8017c2c:	4b2d      	ldr	r3, [pc, #180]	; (8017ce4 <__mdiff+0x108>)
 8017c2e:	4602      	mov	r2, r0
 8017c30:	f44f 7110 	mov.w	r1, #576	; 0x240
 8017c34:	e7e6      	b.n	8017c04 <__mdiff+0x28>
 8017c36:	693e      	ldr	r6, [r7, #16]
 8017c38:	60c5      	str	r5, [r0, #12]
 8017c3a:	6925      	ldr	r5, [r4, #16]
 8017c3c:	f107 0114 	add.w	r1, r7, #20
 8017c40:	f104 0914 	add.w	r9, r4, #20
 8017c44:	f100 0e14 	add.w	lr, r0, #20
 8017c48:	f107 0210 	add.w	r2, r7, #16
 8017c4c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8017c50:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8017c54:	46f2      	mov	sl, lr
 8017c56:	2700      	movs	r7, #0
 8017c58:	f859 3b04 	ldr.w	r3, [r9], #4
 8017c5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017c60:	fa1f f883 	uxth.w	r8, r3
 8017c64:	fa17 f78b 	uxtah	r7, r7, fp
 8017c68:	0c1b      	lsrs	r3, r3, #16
 8017c6a:	eba7 0808 	sub.w	r8, r7, r8
 8017c6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017c72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017c76:	fa1f f888 	uxth.w	r8, r8
 8017c7a:	141f      	asrs	r7, r3, #16
 8017c7c:	454d      	cmp	r5, r9
 8017c7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8017c82:	f84a 3b04 	str.w	r3, [sl], #4
 8017c86:	d8e7      	bhi.n	8017c58 <__mdiff+0x7c>
 8017c88:	1b2b      	subs	r3, r5, r4
 8017c8a:	3b15      	subs	r3, #21
 8017c8c:	f023 0303 	bic.w	r3, r3, #3
 8017c90:	3304      	adds	r3, #4
 8017c92:	3415      	adds	r4, #21
 8017c94:	42a5      	cmp	r5, r4
 8017c96:	bf38      	it	cc
 8017c98:	2304      	movcc	r3, #4
 8017c9a:	4419      	add	r1, r3
 8017c9c:	4473      	add	r3, lr
 8017c9e:	469e      	mov	lr, r3
 8017ca0:	460d      	mov	r5, r1
 8017ca2:	4565      	cmp	r5, ip
 8017ca4:	d30e      	bcc.n	8017cc4 <__mdiff+0xe8>
 8017ca6:	f10c 0203 	add.w	r2, ip, #3
 8017caa:	1a52      	subs	r2, r2, r1
 8017cac:	f022 0203 	bic.w	r2, r2, #3
 8017cb0:	3903      	subs	r1, #3
 8017cb2:	458c      	cmp	ip, r1
 8017cb4:	bf38      	it	cc
 8017cb6:	2200      	movcc	r2, #0
 8017cb8:	441a      	add	r2, r3
 8017cba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017cbe:	b17b      	cbz	r3, 8017ce0 <__mdiff+0x104>
 8017cc0:	6106      	str	r6, [r0, #16]
 8017cc2:	e7a5      	b.n	8017c10 <__mdiff+0x34>
 8017cc4:	f855 8b04 	ldr.w	r8, [r5], #4
 8017cc8:	fa17 f488 	uxtah	r4, r7, r8
 8017ccc:	1422      	asrs	r2, r4, #16
 8017cce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8017cd2:	b2a4      	uxth	r4, r4
 8017cd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8017cd8:	f84e 4b04 	str.w	r4, [lr], #4
 8017cdc:	1417      	asrs	r7, r2, #16
 8017cde:	e7e0      	b.n	8017ca2 <__mdiff+0xc6>
 8017ce0:	3e01      	subs	r6, #1
 8017ce2:	e7ea      	b.n	8017cba <__mdiff+0xde>
 8017ce4:	08018ff3 	.word	0x08018ff3
 8017ce8:	08019084 	.word	0x08019084

08017cec <__ulp>:
 8017cec:	b082      	sub	sp, #8
 8017cee:	ed8d 0b00 	vstr	d0, [sp]
 8017cf2:	9b01      	ldr	r3, [sp, #4]
 8017cf4:	4912      	ldr	r1, [pc, #72]	; (8017d40 <__ulp+0x54>)
 8017cf6:	4019      	ands	r1, r3
 8017cf8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8017cfc:	2900      	cmp	r1, #0
 8017cfe:	dd05      	ble.n	8017d0c <__ulp+0x20>
 8017d00:	2200      	movs	r2, #0
 8017d02:	460b      	mov	r3, r1
 8017d04:	ec43 2b10 	vmov	d0, r2, r3
 8017d08:	b002      	add	sp, #8
 8017d0a:	4770      	bx	lr
 8017d0c:	4249      	negs	r1, r1
 8017d0e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8017d12:	ea4f 5021 	mov.w	r0, r1, asr #20
 8017d16:	f04f 0200 	mov.w	r2, #0
 8017d1a:	f04f 0300 	mov.w	r3, #0
 8017d1e:	da04      	bge.n	8017d2a <__ulp+0x3e>
 8017d20:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8017d24:	fa41 f300 	asr.w	r3, r1, r0
 8017d28:	e7ec      	b.n	8017d04 <__ulp+0x18>
 8017d2a:	f1a0 0114 	sub.w	r1, r0, #20
 8017d2e:	291e      	cmp	r1, #30
 8017d30:	bfda      	itte	le
 8017d32:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8017d36:	fa20 f101 	lsrle.w	r1, r0, r1
 8017d3a:	2101      	movgt	r1, #1
 8017d3c:	460a      	mov	r2, r1
 8017d3e:	e7e1      	b.n	8017d04 <__ulp+0x18>
 8017d40:	7ff00000 	.word	0x7ff00000

08017d44 <__b2d>:
 8017d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d46:	6905      	ldr	r5, [r0, #16]
 8017d48:	f100 0714 	add.w	r7, r0, #20
 8017d4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017d50:	1f2e      	subs	r6, r5, #4
 8017d52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017d56:	4620      	mov	r0, r4
 8017d58:	f7ff fd52 	bl	8017800 <__hi0bits>
 8017d5c:	f1c0 0320 	rsb	r3, r0, #32
 8017d60:	280a      	cmp	r0, #10
 8017d62:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8017de0 <__b2d+0x9c>
 8017d66:	600b      	str	r3, [r1, #0]
 8017d68:	dc14      	bgt.n	8017d94 <__b2d+0x50>
 8017d6a:	f1c0 0e0b 	rsb	lr, r0, #11
 8017d6e:	fa24 f10e 	lsr.w	r1, r4, lr
 8017d72:	42b7      	cmp	r7, r6
 8017d74:	ea41 030c 	orr.w	r3, r1, ip
 8017d78:	bf34      	ite	cc
 8017d7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017d7e:	2100      	movcs	r1, #0
 8017d80:	3015      	adds	r0, #21
 8017d82:	fa04 f000 	lsl.w	r0, r4, r0
 8017d86:	fa21 f10e 	lsr.w	r1, r1, lr
 8017d8a:	ea40 0201 	orr.w	r2, r0, r1
 8017d8e:	ec43 2b10 	vmov	d0, r2, r3
 8017d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d94:	42b7      	cmp	r7, r6
 8017d96:	bf3a      	itte	cc
 8017d98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017d9c:	f1a5 0608 	subcc.w	r6, r5, #8
 8017da0:	2100      	movcs	r1, #0
 8017da2:	380b      	subs	r0, #11
 8017da4:	d017      	beq.n	8017dd6 <__b2d+0x92>
 8017da6:	f1c0 0c20 	rsb	ip, r0, #32
 8017daa:	fa04 f500 	lsl.w	r5, r4, r0
 8017dae:	42be      	cmp	r6, r7
 8017db0:	fa21 f40c 	lsr.w	r4, r1, ip
 8017db4:	ea45 0504 	orr.w	r5, r5, r4
 8017db8:	bf8c      	ite	hi
 8017dba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017dbe:	2400      	movls	r4, #0
 8017dc0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8017dc4:	fa01 f000 	lsl.w	r0, r1, r0
 8017dc8:	fa24 f40c 	lsr.w	r4, r4, ip
 8017dcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017dd0:	ea40 0204 	orr.w	r2, r0, r4
 8017dd4:	e7db      	b.n	8017d8e <__b2d+0x4a>
 8017dd6:	ea44 030c 	orr.w	r3, r4, ip
 8017dda:	460a      	mov	r2, r1
 8017ddc:	e7d7      	b.n	8017d8e <__b2d+0x4a>
 8017dde:	bf00      	nop
 8017de0:	3ff00000 	.word	0x3ff00000

08017de4 <__d2b>:
 8017de4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017de8:	4689      	mov	r9, r1
 8017dea:	2101      	movs	r1, #1
 8017dec:	ec57 6b10 	vmov	r6, r7, d0
 8017df0:	4690      	mov	r8, r2
 8017df2:	f7ff fc0f 	bl	8017614 <_Balloc>
 8017df6:	4604      	mov	r4, r0
 8017df8:	b930      	cbnz	r0, 8017e08 <__d2b+0x24>
 8017dfa:	4602      	mov	r2, r0
 8017dfc:	4b25      	ldr	r3, [pc, #148]	; (8017e94 <__d2b+0xb0>)
 8017dfe:	4826      	ldr	r0, [pc, #152]	; (8017e98 <__d2b+0xb4>)
 8017e00:	f240 310a 	movw	r1, #778	; 0x30a
 8017e04:	f000 fa56 	bl	80182b4 <__assert_func>
 8017e08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017e0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017e10:	bb35      	cbnz	r5, 8017e60 <__d2b+0x7c>
 8017e12:	2e00      	cmp	r6, #0
 8017e14:	9301      	str	r3, [sp, #4]
 8017e16:	d028      	beq.n	8017e6a <__d2b+0x86>
 8017e18:	4668      	mov	r0, sp
 8017e1a:	9600      	str	r6, [sp, #0]
 8017e1c:	f7ff fd10 	bl	8017840 <__lo0bits>
 8017e20:	9900      	ldr	r1, [sp, #0]
 8017e22:	b300      	cbz	r0, 8017e66 <__d2b+0x82>
 8017e24:	9a01      	ldr	r2, [sp, #4]
 8017e26:	f1c0 0320 	rsb	r3, r0, #32
 8017e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8017e2e:	430b      	orrs	r3, r1
 8017e30:	40c2      	lsrs	r2, r0
 8017e32:	6163      	str	r3, [r4, #20]
 8017e34:	9201      	str	r2, [sp, #4]
 8017e36:	9b01      	ldr	r3, [sp, #4]
 8017e38:	61a3      	str	r3, [r4, #24]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	bf14      	ite	ne
 8017e3e:	2202      	movne	r2, #2
 8017e40:	2201      	moveq	r2, #1
 8017e42:	6122      	str	r2, [r4, #16]
 8017e44:	b1d5      	cbz	r5, 8017e7c <__d2b+0x98>
 8017e46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017e4a:	4405      	add	r5, r0
 8017e4c:	f8c9 5000 	str.w	r5, [r9]
 8017e50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017e54:	f8c8 0000 	str.w	r0, [r8]
 8017e58:	4620      	mov	r0, r4
 8017e5a:	b003      	add	sp, #12
 8017e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017e64:	e7d5      	b.n	8017e12 <__d2b+0x2e>
 8017e66:	6161      	str	r1, [r4, #20]
 8017e68:	e7e5      	b.n	8017e36 <__d2b+0x52>
 8017e6a:	a801      	add	r0, sp, #4
 8017e6c:	f7ff fce8 	bl	8017840 <__lo0bits>
 8017e70:	9b01      	ldr	r3, [sp, #4]
 8017e72:	6163      	str	r3, [r4, #20]
 8017e74:	2201      	movs	r2, #1
 8017e76:	6122      	str	r2, [r4, #16]
 8017e78:	3020      	adds	r0, #32
 8017e7a:	e7e3      	b.n	8017e44 <__d2b+0x60>
 8017e7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017e80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017e84:	f8c9 0000 	str.w	r0, [r9]
 8017e88:	6918      	ldr	r0, [r3, #16]
 8017e8a:	f7ff fcb9 	bl	8017800 <__hi0bits>
 8017e8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017e92:	e7df      	b.n	8017e54 <__d2b+0x70>
 8017e94:	08018ff3 	.word	0x08018ff3
 8017e98:	08019084 	.word	0x08019084

08017e9c <__ratio>:
 8017e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ea0:	4688      	mov	r8, r1
 8017ea2:	4669      	mov	r1, sp
 8017ea4:	4681      	mov	r9, r0
 8017ea6:	f7ff ff4d 	bl	8017d44 <__b2d>
 8017eaa:	a901      	add	r1, sp, #4
 8017eac:	4640      	mov	r0, r8
 8017eae:	ec55 4b10 	vmov	r4, r5, d0
 8017eb2:	f7ff ff47 	bl	8017d44 <__b2d>
 8017eb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017eba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017ebe:	eba3 0c02 	sub.w	ip, r3, r2
 8017ec2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017ec6:	1a9b      	subs	r3, r3, r2
 8017ec8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017ecc:	ec51 0b10 	vmov	r0, r1, d0
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	bfd6      	itet	le
 8017ed4:	460a      	movle	r2, r1
 8017ed6:	462a      	movgt	r2, r5
 8017ed8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017edc:	468b      	mov	fp, r1
 8017ede:	462f      	mov	r7, r5
 8017ee0:	bfd4      	ite	le
 8017ee2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8017ee6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017eea:	4620      	mov	r0, r4
 8017eec:	ee10 2a10 	vmov	r2, s0
 8017ef0:	465b      	mov	r3, fp
 8017ef2:	4639      	mov	r1, r7
 8017ef4:	f7e8 fcba 	bl	800086c <__aeabi_ddiv>
 8017ef8:	ec41 0b10 	vmov	d0, r0, r1
 8017efc:	b003      	add	sp, #12
 8017efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f02 <__copybits>:
 8017f02:	3901      	subs	r1, #1
 8017f04:	b570      	push	{r4, r5, r6, lr}
 8017f06:	1149      	asrs	r1, r1, #5
 8017f08:	6914      	ldr	r4, [r2, #16]
 8017f0a:	3101      	adds	r1, #1
 8017f0c:	f102 0314 	add.w	r3, r2, #20
 8017f10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017f14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017f18:	1f05      	subs	r5, r0, #4
 8017f1a:	42a3      	cmp	r3, r4
 8017f1c:	d30c      	bcc.n	8017f38 <__copybits+0x36>
 8017f1e:	1aa3      	subs	r3, r4, r2
 8017f20:	3b11      	subs	r3, #17
 8017f22:	f023 0303 	bic.w	r3, r3, #3
 8017f26:	3211      	adds	r2, #17
 8017f28:	42a2      	cmp	r2, r4
 8017f2a:	bf88      	it	hi
 8017f2c:	2300      	movhi	r3, #0
 8017f2e:	4418      	add	r0, r3
 8017f30:	2300      	movs	r3, #0
 8017f32:	4288      	cmp	r0, r1
 8017f34:	d305      	bcc.n	8017f42 <__copybits+0x40>
 8017f36:	bd70      	pop	{r4, r5, r6, pc}
 8017f38:	f853 6b04 	ldr.w	r6, [r3], #4
 8017f3c:	f845 6f04 	str.w	r6, [r5, #4]!
 8017f40:	e7eb      	b.n	8017f1a <__copybits+0x18>
 8017f42:	f840 3b04 	str.w	r3, [r0], #4
 8017f46:	e7f4      	b.n	8017f32 <__copybits+0x30>

08017f48 <__any_on>:
 8017f48:	f100 0214 	add.w	r2, r0, #20
 8017f4c:	6900      	ldr	r0, [r0, #16]
 8017f4e:	114b      	asrs	r3, r1, #5
 8017f50:	4298      	cmp	r0, r3
 8017f52:	b510      	push	{r4, lr}
 8017f54:	db11      	blt.n	8017f7a <__any_on+0x32>
 8017f56:	dd0a      	ble.n	8017f6e <__any_on+0x26>
 8017f58:	f011 011f 	ands.w	r1, r1, #31
 8017f5c:	d007      	beq.n	8017f6e <__any_on+0x26>
 8017f5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017f62:	fa24 f001 	lsr.w	r0, r4, r1
 8017f66:	fa00 f101 	lsl.w	r1, r0, r1
 8017f6a:	428c      	cmp	r4, r1
 8017f6c:	d10b      	bne.n	8017f86 <__any_on+0x3e>
 8017f6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017f72:	4293      	cmp	r3, r2
 8017f74:	d803      	bhi.n	8017f7e <__any_on+0x36>
 8017f76:	2000      	movs	r0, #0
 8017f78:	bd10      	pop	{r4, pc}
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	e7f7      	b.n	8017f6e <__any_on+0x26>
 8017f7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017f82:	2900      	cmp	r1, #0
 8017f84:	d0f5      	beq.n	8017f72 <__any_on+0x2a>
 8017f86:	2001      	movs	r0, #1
 8017f88:	e7f6      	b.n	8017f78 <__any_on+0x30>

08017f8a <_calloc_r>:
 8017f8a:	b513      	push	{r0, r1, r4, lr}
 8017f8c:	434a      	muls	r2, r1
 8017f8e:	4611      	mov	r1, r2
 8017f90:	9201      	str	r2, [sp, #4]
 8017f92:	f7fc f977 	bl	8014284 <_malloc_r>
 8017f96:	4604      	mov	r4, r0
 8017f98:	b118      	cbz	r0, 8017fa2 <_calloc_r+0x18>
 8017f9a:	9a01      	ldr	r2, [sp, #4]
 8017f9c:	2100      	movs	r1, #0
 8017f9e:	f7fc f919 	bl	80141d4 <memset>
 8017fa2:	4620      	mov	r0, r4
 8017fa4:	b002      	add	sp, #8
 8017fa6:	bd10      	pop	{r4, pc}

08017fa8 <__ssputs_r>:
 8017fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fac:	688e      	ldr	r6, [r1, #8]
 8017fae:	429e      	cmp	r6, r3
 8017fb0:	4682      	mov	sl, r0
 8017fb2:	460c      	mov	r4, r1
 8017fb4:	4690      	mov	r8, r2
 8017fb6:	461f      	mov	r7, r3
 8017fb8:	d838      	bhi.n	801802c <__ssputs_r+0x84>
 8017fba:	898a      	ldrh	r2, [r1, #12]
 8017fbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017fc0:	d032      	beq.n	8018028 <__ssputs_r+0x80>
 8017fc2:	6825      	ldr	r5, [r4, #0]
 8017fc4:	6909      	ldr	r1, [r1, #16]
 8017fc6:	eba5 0901 	sub.w	r9, r5, r1
 8017fca:	6965      	ldr	r5, [r4, #20]
 8017fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017fd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017fd4:	3301      	adds	r3, #1
 8017fd6:	444b      	add	r3, r9
 8017fd8:	106d      	asrs	r5, r5, #1
 8017fda:	429d      	cmp	r5, r3
 8017fdc:	bf38      	it	cc
 8017fde:	461d      	movcc	r5, r3
 8017fe0:	0553      	lsls	r3, r2, #21
 8017fe2:	d531      	bpl.n	8018048 <__ssputs_r+0xa0>
 8017fe4:	4629      	mov	r1, r5
 8017fe6:	f7fc f94d 	bl	8014284 <_malloc_r>
 8017fea:	4606      	mov	r6, r0
 8017fec:	b950      	cbnz	r0, 8018004 <__ssputs_r+0x5c>
 8017fee:	230c      	movs	r3, #12
 8017ff0:	f8ca 3000 	str.w	r3, [sl]
 8017ff4:	89a3      	ldrh	r3, [r4, #12]
 8017ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ffa:	81a3      	strh	r3, [r4, #12]
 8017ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018004:	6921      	ldr	r1, [r4, #16]
 8018006:	464a      	mov	r2, r9
 8018008:	f7fc f8d6 	bl	80141b8 <memcpy>
 801800c:	89a3      	ldrh	r3, [r4, #12]
 801800e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018016:	81a3      	strh	r3, [r4, #12]
 8018018:	6126      	str	r6, [r4, #16]
 801801a:	6165      	str	r5, [r4, #20]
 801801c:	444e      	add	r6, r9
 801801e:	eba5 0509 	sub.w	r5, r5, r9
 8018022:	6026      	str	r6, [r4, #0]
 8018024:	60a5      	str	r5, [r4, #8]
 8018026:	463e      	mov	r6, r7
 8018028:	42be      	cmp	r6, r7
 801802a:	d900      	bls.n	801802e <__ssputs_r+0x86>
 801802c:	463e      	mov	r6, r7
 801802e:	4632      	mov	r2, r6
 8018030:	6820      	ldr	r0, [r4, #0]
 8018032:	4641      	mov	r1, r8
 8018034:	f000 f96e 	bl	8018314 <memmove>
 8018038:	68a3      	ldr	r3, [r4, #8]
 801803a:	6822      	ldr	r2, [r4, #0]
 801803c:	1b9b      	subs	r3, r3, r6
 801803e:	4432      	add	r2, r6
 8018040:	60a3      	str	r3, [r4, #8]
 8018042:	6022      	str	r2, [r4, #0]
 8018044:	2000      	movs	r0, #0
 8018046:	e7db      	b.n	8018000 <__ssputs_r+0x58>
 8018048:	462a      	mov	r2, r5
 801804a:	f000 f97d 	bl	8018348 <_realloc_r>
 801804e:	4606      	mov	r6, r0
 8018050:	2800      	cmp	r0, #0
 8018052:	d1e1      	bne.n	8018018 <__ssputs_r+0x70>
 8018054:	6921      	ldr	r1, [r4, #16]
 8018056:	4650      	mov	r0, sl
 8018058:	f7fc f8c4 	bl	80141e4 <_free_r>
 801805c:	e7c7      	b.n	8017fee <__ssputs_r+0x46>
	...

08018060 <_svfiprintf_r>:
 8018060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018064:	4698      	mov	r8, r3
 8018066:	898b      	ldrh	r3, [r1, #12]
 8018068:	061b      	lsls	r3, r3, #24
 801806a:	b09d      	sub	sp, #116	; 0x74
 801806c:	4607      	mov	r7, r0
 801806e:	460d      	mov	r5, r1
 8018070:	4614      	mov	r4, r2
 8018072:	d50e      	bpl.n	8018092 <_svfiprintf_r+0x32>
 8018074:	690b      	ldr	r3, [r1, #16]
 8018076:	b963      	cbnz	r3, 8018092 <_svfiprintf_r+0x32>
 8018078:	2140      	movs	r1, #64	; 0x40
 801807a:	f7fc f903 	bl	8014284 <_malloc_r>
 801807e:	6028      	str	r0, [r5, #0]
 8018080:	6128      	str	r0, [r5, #16]
 8018082:	b920      	cbnz	r0, 801808e <_svfiprintf_r+0x2e>
 8018084:	230c      	movs	r3, #12
 8018086:	603b      	str	r3, [r7, #0]
 8018088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801808c:	e0d1      	b.n	8018232 <_svfiprintf_r+0x1d2>
 801808e:	2340      	movs	r3, #64	; 0x40
 8018090:	616b      	str	r3, [r5, #20]
 8018092:	2300      	movs	r3, #0
 8018094:	9309      	str	r3, [sp, #36]	; 0x24
 8018096:	2320      	movs	r3, #32
 8018098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801809c:	f8cd 800c 	str.w	r8, [sp, #12]
 80180a0:	2330      	movs	r3, #48	; 0x30
 80180a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801824c <_svfiprintf_r+0x1ec>
 80180a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80180aa:	f04f 0901 	mov.w	r9, #1
 80180ae:	4623      	mov	r3, r4
 80180b0:	469a      	mov	sl, r3
 80180b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80180b6:	b10a      	cbz	r2, 80180bc <_svfiprintf_r+0x5c>
 80180b8:	2a25      	cmp	r2, #37	; 0x25
 80180ba:	d1f9      	bne.n	80180b0 <_svfiprintf_r+0x50>
 80180bc:	ebba 0b04 	subs.w	fp, sl, r4
 80180c0:	d00b      	beq.n	80180da <_svfiprintf_r+0x7a>
 80180c2:	465b      	mov	r3, fp
 80180c4:	4622      	mov	r2, r4
 80180c6:	4629      	mov	r1, r5
 80180c8:	4638      	mov	r0, r7
 80180ca:	f7ff ff6d 	bl	8017fa8 <__ssputs_r>
 80180ce:	3001      	adds	r0, #1
 80180d0:	f000 80aa 	beq.w	8018228 <_svfiprintf_r+0x1c8>
 80180d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80180d6:	445a      	add	r2, fp
 80180d8:	9209      	str	r2, [sp, #36]	; 0x24
 80180da:	f89a 3000 	ldrb.w	r3, [sl]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	f000 80a2 	beq.w	8018228 <_svfiprintf_r+0x1c8>
 80180e4:	2300      	movs	r3, #0
 80180e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80180ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80180ee:	f10a 0a01 	add.w	sl, sl, #1
 80180f2:	9304      	str	r3, [sp, #16]
 80180f4:	9307      	str	r3, [sp, #28]
 80180f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80180fa:	931a      	str	r3, [sp, #104]	; 0x68
 80180fc:	4654      	mov	r4, sl
 80180fe:	2205      	movs	r2, #5
 8018100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018104:	4851      	ldr	r0, [pc, #324]	; (801824c <_svfiprintf_r+0x1ec>)
 8018106:	f7e8 f87b 	bl	8000200 <memchr>
 801810a:	9a04      	ldr	r2, [sp, #16]
 801810c:	b9d8      	cbnz	r0, 8018146 <_svfiprintf_r+0xe6>
 801810e:	06d0      	lsls	r0, r2, #27
 8018110:	bf44      	itt	mi
 8018112:	2320      	movmi	r3, #32
 8018114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018118:	0711      	lsls	r1, r2, #28
 801811a:	bf44      	itt	mi
 801811c:	232b      	movmi	r3, #43	; 0x2b
 801811e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018122:	f89a 3000 	ldrb.w	r3, [sl]
 8018126:	2b2a      	cmp	r3, #42	; 0x2a
 8018128:	d015      	beq.n	8018156 <_svfiprintf_r+0xf6>
 801812a:	9a07      	ldr	r2, [sp, #28]
 801812c:	4654      	mov	r4, sl
 801812e:	2000      	movs	r0, #0
 8018130:	f04f 0c0a 	mov.w	ip, #10
 8018134:	4621      	mov	r1, r4
 8018136:	f811 3b01 	ldrb.w	r3, [r1], #1
 801813a:	3b30      	subs	r3, #48	; 0x30
 801813c:	2b09      	cmp	r3, #9
 801813e:	d94e      	bls.n	80181de <_svfiprintf_r+0x17e>
 8018140:	b1b0      	cbz	r0, 8018170 <_svfiprintf_r+0x110>
 8018142:	9207      	str	r2, [sp, #28]
 8018144:	e014      	b.n	8018170 <_svfiprintf_r+0x110>
 8018146:	eba0 0308 	sub.w	r3, r0, r8
 801814a:	fa09 f303 	lsl.w	r3, r9, r3
 801814e:	4313      	orrs	r3, r2
 8018150:	9304      	str	r3, [sp, #16]
 8018152:	46a2      	mov	sl, r4
 8018154:	e7d2      	b.n	80180fc <_svfiprintf_r+0x9c>
 8018156:	9b03      	ldr	r3, [sp, #12]
 8018158:	1d19      	adds	r1, r3, #4
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	9103      	str	r1, [sp, #12]
 801815e:	2b00      	cmp	r3, #0
 8018160:	bfbb      	ittet	lt
 8018162:	425b      	neglt	r3, r3
 8018164:	f042 0202 	orrlt.w	r2, r2, #2
 8018168:	9307      	strge	r3, [sp, #28]
 801816a:	9307      	strlt	r3, [sp, #28]
 801816c:	bfb8      	it	lt
 801816e:	9204      	strlt	r2, [sp, #16]
 8018170:	7823      	ldrb	r3, [r4, #0]
 8018172:	2b2e      	cmp	r3, #46	; 0x2e
 8018174:	d10c      	bne.n	8018190 <_svfiprintf_r+0x130>
 8018176:	7863      	ldrb	r3, [r4, #1]
 8018178:	2b2a      	cmp	r3, #42	; 0x2a
 801817a:	d135      	bne.n	80181e8 <_svfiprintf_r+0x188>
 801817c:	9b03      	ldr	r3, [sp, #12]
 801817e:	1d1a      	adds	r2, r3, #4
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	9203      	str	r2, [sp, #12]
 8018184:	2b00      	cmp	r3, #0
 8018186:	bfb8      	it	lt
 8018188:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801818c:	3402      	adds	r4, #2
 801818e:	9305      	str	r3, [sp, #20]
 8018190:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801825c <_svfiprintf_r+0x1fc>
 8018194:	7821      	ldrb	r1, [r4, #0]
 8018196:	2203      	movs	r2, #3
 8018198:	4650      	mov	r0, sl
 801819a:	f7e8 f831 	bl	8000200 <memchr>
 801819e:	b140      	cbz	r0, 80181b2 <_svfiprintf_r+0x152>
 80181a0:	2340      	movs	r3, #64	; 0x40
 80181a2:	eba0 000a 	sub.w	r0, r0, sl
 80181a6:	fa03 f000 	lsl.w	r0, r3, r0
 80181aa:	9b04      	ldr	r3, [sp, #16]
 80181ac:	4303      	orrs	r3, r0
 80181ae:	3401      	adds	r4, #1
 80181b0:	9304      	str	r3, [sp, #16]
 80181b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181b6:	4826      	ldr	r0, [pc, #152]	; (8018250 <_svfiprintf_r+0x1f0>)
 80181b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80181bc:	2206      	movs	r2, #6
 80181be:	f7e8 f81f 	bl	8000200 <memchr>
 80181c2:	2800      	cmp	r0, #0
 80181c4:	d038      	beq.n	8018238 <_svfiprintf_r+0x1d8>
 80181c6:	4b23      	ldr	r3, [pc, #140]	; (8018254 <_svfiprintf_r+0x1f4>)
 80181c8:	bb1b      	cbnz	r3, 8018212 <_svfiprintf_r+0x1b2>
 80181ca:	9b03      	ldr	r3, [sp, #12]
 80181cc:	3307      	adds	r3, #7
 80181ce:	f023 0307 	bic.w	r3, r3, #7
 80181d2:	3308      	adds	r3, #8
 80181d4:	9303      	str	r3, [sp, #12]
 80181d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181d8:	4433      	add	r3, r6
 80181da:	9309      	str	r3, [sp, #36]	; 0x24
 80181dc:	e767      	b.n	80180ae <_svfiprintf_r+0x4e>
 80181de:	fb0c 3202 	mla	r2, ip, r2, r3
 80181e2:	460c      	mov	r4, r1
 80181e4:	2001      	movs	r0, #1
 80181e6:	e7a5      	b.n	8018134 <_svfiprintf_r+0xd4>
 80181e8:	2300      	movs	r3, #0
 80181ea:	3401      	adds	r4, #1
 80181ec:	9305      	str	r3, [sp, #20]
 80181ee:	4619      	mov	r1, r3
 80181f0:	f04f 0c0a 	mov.w	ip, #10
 80181f4:	4620      	mov	r0, r4
 80181f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181fa:	3a30      	subs	r2, #48	; 0x30
 80181fc:	2a09      	cmp	r2, #9
 80181fe:	d903      	bls.n	8018208 <_svfiprintf_r+0x1a8>
 8018200:	2b00      	cmp	r3, #0
 8018202:	d0c5      	beq.n	8018190 <_svfiprintf_r+0x130>
 8018204:	9105      	str	r1, [sp, #20]
 8018206:	e7c3      	b.n	8018190 <_svfiprintf_r+0x130>
 8018208:	fb0c 2101 	mla	r1, ip, r1, r2
 801820c:	4604      	mov	r4, r0
 801820e:	2301      	movs	r3, #1
 8018210:	e7f0      	b.n	80181f4 <_svfiprintf_r+0x194>
 8018212:	ab03      	add	r3, sp, #12
 8018214:	9300      	str	r3, [sp, #0]
 8018216:	462a      	mov	r2, r5
 8018218:	4b0f      	ldr	r3, [pc, #60]	; (8018258 <_svfiprintf_r+0x1f8>)
 801821a:	a904      	add	r1, sp, #16
 801821c:	4638      	mov	r0, r7
 801821e:	f7fc f92b 	bl	8014478 <_printf_float>
 8018222:	1c42      	adds	r2, r0, #1
 8018224:	4606      	mov	r6, r0
 8018226:	d1d6      	bne.n	80181d6 <_svfiprintf_r+0x176>
 8018228:	89ab      	ldrh	r3, [r5, #12]
 801822a:	065b      	lsls	r3, r3, #25
 801822c:	f53f af2c 	bmi.w	8018088 <_svfiprintf_r+0x28>
 8018230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018232:	b01d      	add	sp, #116	; 0x74
 8018234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018238:	ab03      	add	r3, sp, #12
 801823a:	9300      	str	r3, [sp, #0]
 801823c:	462a      	mov	r2, r5
 801823e:	4b06      	ldr	r3, [pc, #24]	; (8018258 <_svfiprintf_r+0x1f8>)
 8018240:	a904      	add	r1, sp, #16
 8018242:	4638      	mov	r0, r7
 8018244:	f7fc fbbc 	bl	80149c0 <_printf_i>
 8018248:	e7eb      	b.n	8018222 <_svfiprintf_r+0x1c2>
 801824a:	bf00      	nop
 801824c:	080191e4 	.word	0x080191e4
 8018250:	080191ee 	.word	0x080191ee
 8018254:	08014479 	.word	0x08014479
 8018258:	08017fa9 	.word	0x08017fa9
 801825c:	080191ea 	.word	0x080191ea

08018260 <_read_r>:
 8018260:	b538      	push	{r3, r4, r5, lr}
 8018262:	4d07      	ldr	r5, [pc, #28]	; (8018280 <_read_r+0x20>)
 8018264:	4604      	mov	r4, r0
 8018266:	4608      	mov	r0, r1
 8018268:	4611      	mov	r1, r2
 801826a:	2200      	movs	r2, #0
 801826c:	602a      	str	r2, [r5, #0]
 801826e:	461a      	mov	r2, r3
 8018270:	f7eb fee4 	bl	800403c <_read>
 8018274:	1c43      	adds	r3, r0, #1
 8018276:	d102      	bne.n	801827e <_read_r+0x1e>
 8018278:	682b      	ldr	r3, [r5, #0]
 801827a:	b103      	cbz	r3, 801827e <_read_r+0x1e>
 801827c:	6023      	str	r3, [r4, #0]
 801827e:	bd38      	pop	{r3, r4, r5, pc}
 8018280:	2000cc08 	.word	0x2000cc08
 8018284:	00000000 	.word	0x00000000

08018288 <nan>:
 8018288:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018290 <nan+0x8>
 801828c:	4770      	bx	lr
 801828e:	bf00      	nop
 8018290:	00000000 	.word	0x00000000
 8018294:	7ff80000 	.word	0x7ff80000

08018298 <__ascii_wctomb>:
 8018298:	b149      	cbz	r1, 80182ae <__ascii_wctomb+0x16>
 801829a:	2aff      	cmp	r2, #255	; 0xff
 801829c:	bf85      	ittet	hi
 801829e:	238a      	movhi	r3, #138	; 0x8a
 80182a0:	6003      	strhi	r3, [r0, #0]
 80182a2:	700a      	strbls	r2, [r1, #0]
 80182a4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80182a8:	bf98      	it	ls
 80182aa:	2001      	movls	r0, #1
 80182ac:	4770      	bx	lr
 80182ae:	4608      	mov	r0, r1
 80182b0:	4770      	bx	lr
	...

080182b4 <__assert_func>:
 80182b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80182b6:	4614      	mov	r4, r2
 80182b8:	461a      	mov	r2, r3
 80182ba:	4b09      	ldr	r3, [pc, #36]	; (80182e0 <__assert_func+0x2c>)
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	4605      	mov	r5, r0
 80182c0:	68d8      	ldr	r0, [r3, #12]
 80182c2:	b14c      	cbz	r4, 80182d8 <__assert_func+0x24>
 80182c4:	4b07      	ldr	r3, [pc, #28]	; (80182e4 <__assert_func+0x30>)
 80182c6:	9100      	str	r1, [sp, #0]
 80182c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80182cc:	4906      	ldr	r1, [pc, #24]	; (80182e8 <__assert_func+0x34>)
 80182ce:	462b      	mov	r3, r5
 80182d0:	f000 f80e 	bl	80182f0 <fiprintf>
 80182d4:	f000 fa78 	bl	80187c8 <abort>
 80182d8:	4b04      	ldr	r3, [pc, #16]	; (80182ec <__assert_func+0x38>)
 80182da:	461c      	mov	r4, r3
 80182dc:	e7f3      	b.n	80182c6 <__assert_func+0x12>
 80182de:	bf00      	nop
 80182e0:	200001b8 	.word	0x200001b8
 80182e4:	080191f5 	.word	0x080191f5
 80182e8:	08019202 	.word	0x08019202
 80182ec:	08019230 	.word	0x08019230

080182f0 <fiprintf>:
 80182f0:	b40e      	push	{r1, r2, r3}
 80182f2:	b503      	push	{r0, r1, lr}
 80182f4:	4601      	mov	r1, r0
 80182f6:	ab03      	add	r3, sp, #12
 80182f8:	4805      	ldr	r0, [pc, #20]	; (8018310 <fiprintf+0x20>)
 80182fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80182fe:	6800      	ldr	r0, [r0, #0]
 8018300:	9301      	str	r3, [sp, #4]
 8018302:	f000 f871 	bl	80183e8 <_vfiprintf_r>
 8018306:	b002      	add	sp, #8
 8018308:	f85d eb04 	ldr.w	lr, [sp], #4
 801830c:	b003      	add	sp, #12
 801830e:	4770      	bx	lr
 8018310:	200001b8 	.word	0x200001b8

08018314 <memmove>:
 8018314:	4288      	cmp	r0, r1
 8018316:	b510      	push	{r4, lr}
 8018318:	eb01 0402 	add.w	r4, r1, r2
 801831c:	d902      	bls.n	8018324 <memmove+0x10>
 801831e:	4284      	cmp	r4, r0
 8018320:	4623      	mov	r3, r4
 8018322:	d807      	bhi.n	8018334 <memmove+0x20>
 8018324:	1e43      	subs	r3, r0, #1
 8018326:	42a1      	cmp	r1, r4
 8018328:	d008      	beq.n	801833c <memmove+0x28>
 801832a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801832e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018332:	e7f8      	b.n	8018326 <memmove+0x12>
 8018334:	4402      	add	r2, r0
 8018336:	4601      	mov	r1, r0
 8018338:	428a      	cmp	r2, r1
 801833a:	d100      	bne.n	801833e <memmove+0x2a>
 801833c:	bd10      	pop	{r4, pc}
 801833e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018346:	e7f7      	b.n	8018338 <memmove+0x24>

08018348 <_realloc_r>:
 8018348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801834a:	4607      	mov	r7, r0
 801834c:	4614      	mov	r4, r2
 801834e:	460e      	mov	r6, r1
 8018350:	b921      	cbnz	r1, 801835c <_realloc_r+0x14>
 8018352:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018356:	4611      	mov	r1, r2
 8018358:	f7fb bf94 	b.w	8014284 <_malloc_r>
 801835c:	b922      	cbnz	r2, 8018368 <_realloc_r+0x20>
 801835e:	f7fb ff41 	bl	80141e4 <_free_r>
 8018362:	4625      	mov	r5, r4
 8018364:	4628      	mov	r0, r5
 8018366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018368:	f000 fa9a 	bl	80188a0 <_malloc_usable_size_r>
 801836c:	42a0      	cmp	r0, r4
 801836e:	d20f      	bcs.n	8018390 <_realloc_r+0x48>
 8018370:	4621      	mov	r1, r4
 8018372:	4638      	mov	r0, r7
 8018374:	f7fb ff86 	bl	8014284 <_malloc_r>
 8018378:	4605      	mov	r5, r0
 801837a:	2800      	cmp	r0, #0
 801837c:	d0f2      	beq.n	8018364 <_realloc_r+0x1c>
 801837e:	4631      	mov	r1, r6
 8018380:	4622      	mov	r2, r4
 8018382:	f7fb ff19 	bl	80141b8 <memcpy>
 8018386:	4631      	mov	r1, r6
 8018388:	4638      	mov	r0, r7
 801838a:	f7fb ff2b 	bl	80141e4 <_free_r>
 801838e:	e7e9      	b.n	8018364 <_realloc_r+0x1c>
 8018390:	4635      	mov	r5, r6
 8018392:	e7e7      	b.n	8018364 <_realloc_r+0x1c>

08018394 <__sfputc_r>:
 8018394:	6893      	ldr	r3, [r2, #8]
 8018396:	3b01      	subs	r3, #1
 8018398:	2b00      	cmp	r3, #0
 801839a:	b410      	push	{r4}
 801839c:	6093      	str	r3, [r2, #8]
 801839e:	da08      	bge.n	80183b2 <__sfputc_r+0x1e>
 80183a0:	6994      	ldr	r4, [r2, #24]
 80183a2:	42a3      	cmp	r3, r4
 80183a4:	db01      	blt.n	80183aa <__sfputc_r+0x16>
 80183a6:	290a      	cmp	r1, #10
 80183a8:	d103      	bne.n	80183b2 <__sfputc_r+0x1e>
 80183aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183ae:	f000 b94b 	b.w	8018648 <__swbuf_r>
 80183b2:	6813      	ldr	r3, [r2, #0]
 80183b4:	1c58      	adds	r0, r3, #1
 80183b6:	6010      	str	r0, [r2, #0]
 80183b8:	7019      	strb	r1, [r3, #0]
 80183ba:	4608      	mov	r0, r1
 80183bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183c0:	4770      	bx	lr

080183c2 <__sfputs_r>:
 80183c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183c4:	4606      	mov	r6, r0
 80183c6:	460f      	mov	r7, r1
 80183c8:	4614      	mov	r4, r2
 80183ca:	18d5      	adds	r5, r2, r3
 80183cc:	42ac      	cmp	r4, r5
 80183ce:	d101      	bne.n	80183d4 <__sfputs_r+0x12>
 80183d0:	2000      	movs	r0, #0
 80183d2:	e007      	b.n	80183e4 <__sfputs_r+0x22>
 80183d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183d8:	463a      	mov	r2, r7
 80183da:	4630      	mov	r0, r6
 80183dc:	f7ff ffda 	bl	8018394 <__sfputc_r>
 80183e0:	1c43      	adds	r3, r0, #1
 80183e2:	d1f3      	bne.n	80183cc <__sfputs_r+0xa>
 80183e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080183e8 <_vfiprintf_r>:
 80183e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183ec:	460d      	mov	r5, r1
 80183ee:	b09d      	sub	sp, #116	; 0x74
 80183f0:	4614      	mov	r4, r2
 80183f2:	4698      	mov	r8, r3
 80183f4:	4606      	mov	r6, r0
 80183f6:	b118      	cbz	r0, 8018400 <_vfiprintf_r+0x18>
 80183f8:	6983      	ldr	r3, [r0, #24]
 80183fa:	b90b      	cbnz	r3, 8018400 <_vfiprintf_r+0x18>
 80183fc:	f7fb fe06 	bl	801400c <__sinit>
 8018400:	4b89      	ldr	r3, [pc, #548]	; (8018628 <_vfiprintf_r+0x240>)
 8018402:	429d      	cmp	r5, r3
 8018404:	d11b      	bne.n	801843e <_vfiprintf_r+0x56>
 8018406:	6875      	ldr	r5, [r6, #4]
 8018408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801840a:	07d9      	lsls	r1, r3, #31
 801840c:	d405      	bmi.n	801841a <_vfiprintf_r+0x32>
 801840e:	89ab      	ldrh	r3, [r5, #12]
 8018410:	059a      	lsls	r2, r3, #22
 8018412:	d402      	bmi.n	801841a <_vfiprintf_r+0x32>
 8018414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018416:	f7fb febc 	bl	8014192 <__retarget_lock_acquire_recursive>
 801841a:	89ab      	ldrh	r3, [r5, #12]
 801841c:	071b      	lsls	r3, r3, #28
 801841e:	d501      	bpl.n	8018424 <_vfiprintf_r+0x3c>
 8018420:	692b      	ldr	r3, [r5, #16]
 8018422:	b9eb      	cbnz	r3, 8018460 <_vfiprintf_r+0x78>
 8018424:	4629      	mov	r1, r5
 8018426:	4630      	mov	r0, r6
 8018428:	f000 f960 	bl	80186ec <__swsetup_r>
 801842c:	b1c0      	cbz	r0, 8018460 <_vfiprintf_r+0x78>
 801842e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018430:	07dc      	lsls	r4, r3, #31
 8018432:	d50e      	bpl.n	8018452 <_vfiprintf_r+0x6a>
 8018434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018438:	b01d      	add	sp, #116	; 0x74
 801843a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801843e:	4b7b      	ldr	r3, [pc, #492]	; (801862c <_vfiprintf_r+0x244>)
 8018440:	429d      	cmp	r5, r3
 8018442:	d101      	bne.n	8018448 <_vfiprintf_r+0x60>
 8018444:	68b5      	ldr	r5, [r6, #8]
 8018446:	e7df      	b.n	8018408 <_vfiprintf_r+0x20>
 8018448:	4b79      	ldr	r3, [pc, #484]	; (8018630 <_vfiprintf_r+0x248>)
 801844a:	429d      	cmp	r5, r3
 801844c:	bf08      	it	eq
 801844e:	68f5      	ldreq	r5, [r6, #12]
 8018450:	e7da      	b.n	8018408 <_vfiprintf_r+0x20>
 8018452:	89ab      	ldrh	r3, [r5, #12]
 8018454:	0598      	lsls	r0, r3, #22
 8018456:	d4ed      	bmi.n	8018434 <_vfiprintf_r+0x4c>
 8018458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801845a:	f7fb fe9b 	bl	8014194 <__retarget_lock_release_recursive>
 801845e:	e7e9      	b.n	8018434 <_vfiprintf_r+0x4c>
 8018460:	2300      	movs	r3, #0
 8018462:	9309      	str	r3, [sp, #36]	; 0x24
 8018464:	2320      	movs	r3, #32
 8018466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801846a:	f8cd 800c 	str.w	r8, [sp, #12]
 801846e:	2330      	movs	r3, #48	; 0x30
 8018470:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018634 <_vfiprintf_r+0x24c>
 8018474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018478:	f04f 0901 	mov.w	r9, #1
 801847c:	4623      	mov	r3, r4
 801847e:	469a      	mov	sl, r3
 8018480:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018484:	b10a      	cbz	r2, 801848a <_vfiprintf_r+0xa2>
 8018486:	2a25      	cmp	r2, #37	; 0x25
 8018488:	d1f9      	bne.n	801847e <_vfiprintf_r+0x96>
 801848a:	ebba 0b04 	subs.w	fp, sl, r4
 801848e:	d00b      	beq.n	80184a8 <_vfiprintf_r+0xc0>
 8018490:	465b      	mov	r3, fp
 8018492:	4622      	mov	r2, r4
 8018494:	4629      	mov	r1, r5
 8018496:	4630      	mov	r0, r6
 8018498:	f7ff ff93 	bl	80183c2 <__sfputs_r>
 801849c:	3001      	adds	r0, #1
 801849e:	f000 80aa 	beq.w	80185f6 <_vfiprintf_r+0x20e>
 80184a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184a4:	445a      	add	r2, fp
 80184a6:	9209      	str	r2, [sp, #36]	; 0x24
 80184a8:	f89a 3000 	ldrb.w	r3, [sl]
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	f000 80a2 	beq.w	80185f6 <_vfiprintf_r+0x20e>
 80184b2:	2300      	movs	r3, #0
 80184b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80184b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80184bc:	f10a 0a01 	add.w	sl, sl, #1
 80184c0:	9304      	str	r3, [sp, #16]
 80184c2:	9307      	str	r3, [sp, #28]
 80184c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80184c8:	931a      	str	r3, [sp, #104]	; 0x68
 80184ca:	4654      	mov	r4, sl
 80184cc:	2205      	movs	r2, #5
 80184ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184d2:	4858      	ldr	r0, [pc, #352]	; (8018634 <_vfiprintf_r+0x24c>)
 80184d4:	f7e7 fe94 	bl	8000200 <memchr>
 80184d8:	9a04      	ldr	r2, [sp, #16]
 80184da:	b9d8      	cbnz	r0, 8018514 <_vfiprintf_r+0x12c>
 80184dc:	06d1      	lsls	r1, r2, #27
 80184de:	bf44      	itt	mi
 80184e0:	2320      	movmi	r3, #32
 80184e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80184e6:	0713      	lsls	r3, r2, #28
 80184e8:	bf44      	itt	mi
 80184ea:	232b      	movmi	r3, #43	; 0x2b
 80184ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80184f0:	f89a 3000 	ldrb.w	r3, [sl]
 80184f4:	2b2a      	cmp	r3, #42	; 0x2a
 80184f6:	d015      	beq.n	8018524 <_vfiprintf_r+0x13c>
 80184f8:	9a07      	ldr	r2, [sp, #28]
 80184fa:	4654      	mov	r4, sl
 80184fc:	2000      	movs	r0, #0
 80184fe:	f04f 0c0a 	mov.w	ip, #10
 8018502:	4621      	mov	r1, r4
 8018504:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018508:	3b30      	subs	r3, #48	; 0x30
 801850a:	2b09      	cmp	r3, #9
 801850c:	d94e      	bls.n	80185ac <_vfiprintf_r+0x1c4>
 801850e:	b1b0      	cbz	r0, 801853e <_vfiprintf_r+0x156>
 8018510:	9207      	str	r2, [sp, #28]
 8018512:	e014      	b.n	801853e <_vfiprintf_r+0x156>
 8018514:	eba0 0308 	sub.w	r3, r0, r8
 8018518:	fa09 f303 	lsl.w	r3, r9, r3
 801851c:	4313      	orrs	r3, r2
 801851e:	9304      	str	r3, [sp, #16]
 8018520:	46a2      	mov	sl, r4
 8018522:	e7d2      	b.n	80184ca <_vfiprintf_r+0xe2>
 8018524:	9b03      	ldr	r3, [sp, #12]
 8018526:	1d19      	adds	r1, r3, #4
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	9103      	str	r1, [sp, #12]
 801852c:	2b00      	cmp	r3, #0
 801852e:	bfbb      	ittet	lt
 8018530:	425b      	neglt	r3, r3
 8018532:	f042 0202 	orrlt.w	r2, r2, #2
 8018536:	9307      	strge	r3, [sp, #28]
 8018538:	9307      	strlt	r3, [sp, #28]
 801853a:	bfb8      	it	lt
 801853c:	9204      	strlt	r2, [sp, #16]
 801853e:	7823      	ldrb	r3, [r4, #0]
 8018540:	2b2e      	cmp	r3, #46	; 0x2e
 8018542:	d10c      	bne.n	801855e <_vfiprintf_r+0x176>
 8018544:	7863      	ldrb	r3, [r4, #1]
 8018546:	2b2a      	cmp	r3, #42	; 0x2a
 8018548:	d135      	bne.n	80185b6 <_vfiprintf_r+0x1ce>
 801854a:	9b03      	ldr	r3, [sp, #12]
 801854c:	1d1a      	adds	r2, r3, #4
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	9203      	str	r2, [sp, #12]
 8018552:	2b00      	cmp	r3, #0
 8018554:	bfb8      	it	lt
 8018556:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801855a:	3402      	adds	r4, #2
 801855c:	9305      	str	r3, [sp, #20]
 801855e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018644 <_vfiprintf_r+0x25c>
 8018562:	7821      	ldrb	r1, [r4, #0]
 8018564:	2203      	movs	r2, #3
 8018566:	4650      	mov	r0, sl
 8018568:	f7e7 fe4a 	bl	8000200 <memchr>
 801856c:	b140      	cbz	r0, 8018580 <_vfiprintf_r+0x198>
 801856e:	2340      	movs	r3, #64	; 0x40
 8018570:	eba0 000a 	sub.w	r0, r0, sl
 8018574:	fa03 f000 	lsl.w	r0, r3, r0
 8018578:	9b04      	ldr	r3, [sp, #16]
 801857a:	4303      	orrs	r3, r0
 801857c:	3401      	adds	r4, #1
 801857e:	9304      	str	r3, [sp, #16]
 8018580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018584:	482c      	ldr	r0, [pc, #176]	; (8018638 <_vfiprintf_r+0x250>)
 8018586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801858a:	2206      	movs	r2, #6
 801858c:	f7e7 fe38 	bl	8000200 <memchr>
 8018590:	2800      	cmp	r0, #0
 8018592:	d03f      	beq.n	8018614 <_vfiprintf_r+0x22c>
 8018594:	4b29      	ldr	r3, [pc, #164]	; (801863c <_vfiprintf_r+0x254>)
 8018596:	bb1b      	cbnz	r3, 80185e0 <_vfiprintf_r+0x1f8>
 8018598:	9b03      	ldr	r3, [sp, #12]
 801859a:	3307      	adds	r3, #7
 801859c:	f023 0307 	bic.w	r3, r3, #7
 80185a0:	3308      	adds	r3, #8
 80185a2:	9303      	str	r3, [sp, #12]
 80185a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185a6:	443b      	add	r3, r7
 80185a8:	9309      	str	r3, [sp, #36]	; 0x24
 80185aa:	e767      	b.n	801847c <_vfiprintf_r+0x94>
 80185ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80185b0:	460c      	mov	r4, r1
 80185b2:	2001      	movs	r0, #1
 80185b4:	e7a5      	b.n	8018502 <_vfiprintf_r+0x11a>
 80185b6:	2300      	movs	r3, #0
 80185b8:	3401      	adds	r4, #1
 80185ba:	9305      	str	r3, [sp, #20]
 80185bc:	4619      	mov	r1, r3
 80185be:	f04f 0c0a 	mov.w	ip, #10
 80185c2:	4620      	mov	r0, r4
 80185c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185c8:	3a30      	subs	r2, #48	; 0x30
 80185ca:	2a09      	cmp	r2, #9
 80185cc:	d903      	bls.n	80185d6 <_vfiprintf_r+0x1ee>
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d0c5      	beq.n	801855e <_vfiprintf_r+0x176>
 80185d2:	9105      	str	r1, [sp, #20]
 80185d4:	e7c3      	b.n	801855e <_vfiprintf_r+0x176>
 80185d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80185da:	4604      	mov	r4, r0
 80185dc:	2301      	movs	r3, #1
 80185de:	e7f0      	b.n	80185c2 <_vfiprintf_r+0x1da>
 80185e0:	ab03      	add	r3, sp, #12
 80185e2:	9300      	str	r3, [sp, #0]
 80185e4:	462a      	mov	r2, r5
 80185e6:	4b16      	ldr	r3, [pc, #88]	; (8018640 <_vfiprintf_r+0x258>)
 80185e8:	a904      	add	r1, sp, #16
 80185ea:	4630      	mov	r0, r6
 80185ec:	f7fb ff44 	bl	8014478 <_printf_float>
 80185f0:	4607      	mov	r7, r0
 80185f2:	1c78      	adds	r0, r7, #1
 80185f4:	d1d6      	bne.n	80185a4 <_vfiprintf_r+0x1bc>
 80185f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80185f8:	07d9      	lsls	r1, r3, #31
 80185fa:	d405      	bmi.n	8018608 <_vfiprintf_r+0x220>
 80185fc:	89ab      	ldrh	r3, [r5, #12]
 80185fe:	059a      	lsls	r2, r3, #22
 8018600:	d402      	bmi.n	8018608 <_vfiprintf_r+0x220>
 8018602:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018604:	f7fb fdc6 	bl	8014194 <__retarget_lock_release_recursive>
 8018608:	89ab      	ldrh	r3, [r5, #12]
 801860a:	065b      	lsls	r3, r3, #25
 801860c:	f53f af12 	bmi.w	8018434 <_vfiprintf_r+0x4c>
 8018610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018612:	e711      	b.n	8018438 <_vfiprintf_r+0x50>
 8018614:	ab03      	add	r3, sp, #12
 8018616:	9300      	str	r3, [sp, #0]
 8018618:	462a      	mov	r2, r5
 801861a:	4b09      	ldr	r3, [pc, #36]	; (8018640 <_vfiprintf_r+0x258>)
 801861c:	a904      	add	r1, sp, #16
 801861e:	4630      	mov	r0, r6
 8018620:	f7fc f9ce 	bl	80149c0 <_printf_i>
 8018624:	e7e4      	b.n	80185f0 <_vfiprintf_r+0x208>
 8018626:	bf00      	nop
 8018628:	08018ea0 	.word	0x08018ea0
 801862c:	08018ec0 	.word	0x08018ec0
 8018630:	08018e80 	.word	0x08018e80
 8018634:	080191e4 	.word	0x080191e4
 8018638:	080191ee 	.word	0x080191ee
 801863c:	08014479 	.word	0x08014479
 8018640:	080183c3 	.word	0x080183c3
 8018644:	080191ea 	.word	0x080191ea

08018648 <__swbuf_r>:
 8018648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801864a:	460e      	mov	r6, r1
 801864c:	4614      	mov	r4, r2
 801864e:	4605      	mov	r5, r0
 8018650:	b118      	cbz	r0, 801865a <__swbuf_r+0x12>
 8018652:	6983      	ldr	r3, [r0, #24]
 8018654:	b90b      	cbnz	r3, 801865a <__swbuf_r+0x12>
 8018656:	f7fb fcd9 	bl	801400c <__sinit>
 801865a:	4b21      	ldr	r3, [pc, #132]	; (80186e0 <__swbuf_r+0x98>)
 801865c:	429c      	cmp	r4, r3
 801865e:	d12b      	bne.n	80186b8 <__swbuf_r+0x70>
 8018660:	686c      	ldr	r4, [r5, #4]
 8018662:	69a3      	ldr	r3, [r4, #24]
 8018664:	60a3      	str	r3, [r4, #8]
 8018666:	89a3      	ldrh	r3, [r4, #12]
 8018668:	071a      	lsls	r2, r3, #28
 801866a:	d52f      	bpl.n	80186cc <__swbuf_r+0x84>
 801866c:	6923      	ldr	r3, [r4, #16]
 801866e:	b36b      	cbz	r3, 80186cc <__swbuf_r+0x84>
 8018670:	6923      	ldr	r3, [r4, #16]
 8018672:	6820      	ldr	r0, [r4, #0]
 8018674:	1ac0      	subs	r0, r0, r3
 8018676:	6963      	ldr	r3, [r4, #20]
 8018678:	b2f6      	uxtb	r6, r6
 801867a:	4283      	cmp	r3, r0
 801867c:	4637      	mov	r7, r6
 801867e:	dc04      	bgt.n	801868a <__swbuf_r+0x42>
 8018680:	4621      	mov	r1, r4
 8018682:	4628      	mov	r0, r5
 8018684:	f7fe fbe6 	bl	8016e54 <_fflush_r>
 8018688:	bb30      	cbnz	r0, 80186d8 <__swbuf_r+0x90>
 801868a:	68a3      	ldr	r3, [r4, #8]
 801868c:	3b01      	subs	r3, #1
 801868e:	60a3      	str	r3, [r4, #8]
 8018690:	6823      	ldr	r3, [r4, #0]
 8018692:	1c5a      	adds	r2, r3, #1
 8018694:	6022      	str	r2, [r4, #0]
 8018696:	701e      	strb	r6, [r3, #0]
 8018698:	6963      	ldr	r3, [r4, #20]
 801869a:	3001      	adds	r0, #1
 801869c:	4283      	cmp	r3, r0
 801869e:	d004      	beq.n	80186aa <__swbuf_r+0x62>
 80186a0:	89a3      	ldrh	r3, [r4, #12]
 80186a2:	07db      	lsls	r3, r3, #31
 80186a4:	d506      	bpl.n	80186b4 <__swbuf_r+0x6c>
 80186a6:	2e0a      	cmp	r6, #10
 80186a8:	d104      	bne.n	80186b4 <__swbuf_r+0x6c>
 80186aa:	4621      	mov	r1, r4
 80186ac:	4628      	mov	r0, r5
 80186ae:	f7fe fbd1 	bl	8016e54 <_fflush_r>
 80186b2:	b988      	cbnz	r0, 80186d8 <__swbuf_r+0x90>
 80186b4:	4638      	mov	r0, r7
 80186b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186b8:	4b0a      	ldr	r3, [pc, #40]	; (80186e4 <__swbuf_r+0x9c>)
 80186ba:	429c      	cmp	r4, r3
 80186bc:	d101      	bne.n	80186c2 <__swbuf_r+0x7a>
 80186be:	68ac      	ldr	r4, [r5, #8]
 80186c0:	e7cf      	b.n	8018662 <__swbuf_r+0x1a>
 80186c2:	4b09      	ldr	r3, [pc, #36]	; (80186e8 <__swbuf_r+0xa0>)
 80186c4:	429c      	cmp	r4, r3
 80186c6:	bf08      	it	eq
 80186c8:	68ec      	ldreq	r4, [r5, #12]
 80186ca:	e7ca      	b.n	8018662 <__swbuf_r+0x1a>
 80186cc:	4621      	mov	r1, r4
 80186ce:	4628      	mov	r0, r5
 80186d0:	f000 f80c 	bl	80186ec <__swsetup_r>
 80186d4:	2800      	cmp	r0, #0
 80186d6:	d0cb      	beq.n	8018670 <__swbuf_r+0x28>
 80186d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80186dc:	e7ea      	b.n	80186b4 <__swbuf_r+0x6c>
 80186de:	bf00      	nop
 80186e0:	08018ea0 	.word	0x08018ea0
 80186e4:	08018ec0 	.word	0x08018ec0
 80186e8:	08018e80 	.word	0x08018e80

080186ec <__swsetup_r>:
 80186ec:	4b32      	ldr	r3, [pc, #200]	; (80187b8 <__swsetup_r+0xcc>)
 80186ee:	b570      	push	{r4, r5, r6, lr}
 80186f0:	681d      	ldr	r5, [r3, #0]
 80186f2:	4606      	mov	r6, r0
 80186f4:	460c      	mov	r4, r1
 80186f6:	b125      	cbz	r5, 8018702 <__swsetup_r+0x16>
 80186f8:	69ab      	ldr	r3, [r5, #24]
 80186fa:	b913      	cbnz	r3, 8018702 <__swsetup_r+0x16>
 80186fc:	4628      	mov	r0, r5
 80186fe:	f7fb fc85 	bl	801400c <__sinit>
 8018702:	4b2e      	ldr	r3, [pc, #184]	; (80187bc <__swsetup_r+0xd0>)
 8018704:	429c      	cmp	r4, r3
 8018706:	d10f      	bne.n	8018728 <__swsetup_r+0x3c>
 8018708:	686c      	ldr	r4, [r5, #4]
 801870a:	89a3      	ldrh	r3, [r4, #12]
 801870c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018710:	0719      	lsls	r1, r3, #28
 8018712:	d42c      	bmi.n	801876e <__swsetup_r+0x82>
 8018714:	06dd      	lsls	r5, r3, #27
 8018716:	d411      	bmi.n	801873c <__swsetup_r+0x50>
 8018718:	2309      	movs	r3, #9
 801871a:	6033      	str	r3, [r6, #0]
 801871c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018720:	81a3      	strh	r3, [r4, #12]
 8018722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018726:	e03e      	b.n	80187a6 <__swsetup_r+0xba>
 8018728:	4b25      	ldr	r3, [pc, #148]	; (80187c0 <__swsetup_r+0xd4>)
 801872a:	429c      	cmp	r4, r3
 801872c:	d101      	bne.n	8018732 <__swsetup_r+0x46>
 801872e:	68ac      	ldr	r4, [r5, #8]
 8018730:	e7eb      	b.n	801870a <__swsetup_r+0x1e>
 8018732:	4b24      	ldr	r3, [pc, #144]	; (80187c4 <__swsetup_r+0xd8>)
 8018734:	429c      	cmp	r4, r3
 8018736:	bf08      	it	eq
 8018738:	68ec      	ldreq	r4, [r5, #12]
 801873a:	e7e6      	b.n	801870a <__swsetup_r+0x1e>
 801873c:	0758      	lsls	r0, r3, #29
 801873e:	d512      	bpl.n	8018766 <__swsetup_r+0x7a>
 8018740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018742:	b141      	cbz	r1, 8018756 <__swsetup_r+0x6a>
 8018744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018748:	4299      	cmp	r1, r3
 801874a:	d002      	beq.n	8018752 <__swsetup_r+0x66>
 801874c:	4630      	mov	r0, r6
 801874e:	f7fb fd49 	bl	80141e4 <_free_r>
 8018752:	2300      	movs	r3, #0
 8018754:	6363      	str	r3, [r4, #52]	; 0x34
 8018756:	89a3      	ldrh	r3, [r4, #12]
 8018758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801875c:	81a3      	strh	r3, [r4, #12]
 801875e:	2300      	movs	r3, #0
 8018760:	6063      	str	r3, [r4, #4]
 8018762:	6923      	ldr	r3, [r4, #16]
 8018764:	6023      	str	r3, [r4, #0]
 8018766:	89a3      	ldrh	r3, [r4, #12]
 8018768:	f043 0308 	orr.w	r3, r3, #8
 801876c:	81a3      	strh	r3, [r4, #12]
 801876e:	6923      	ldr	r3, [r4, #16]
 8018770:	b94b      	cbnz	r3, 8018786 <__swsetup_r+0x9a>
 8018772:	89a3      	ldrh	r3, [r4, #12]
 8018774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801877c:	d003      	beq.n	8018786 <__swsetup_r+0x9a>
 801877e:	4621      	mov	r1, r4
 8018780:	4630      	mov	r0, r6
 8018782:	f000 f84d 	bl	8018820 <__smakebuf_r>
 8018786:	89a0      	ldrh	r0, [r4, #12]
 8018788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801878c:	f010 0301 	ands.w	r3, r0, #1
 8018790:	d00a      	beq.n	80187a8 <__swsetup_r+0xbc>
 8018792:	2300      	movs	r3, #0
 8018794:	60a3      	str	r3, [r4, #8]
 8018796:	6963      	ldr	r3, [r4, #20]
 8018798:	425b      	negs	r3, r3
 801879a:	61a3      	str	r3, [r4, #24]
 801879c:	6923      	ldr	r3, [r4, #16]
 801879e:	b943      	cbnz	r3, 80187b2 <__swsetup_r+0xc6>
 80187a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80187a4:	d1ba      	bne.n	801871c <__swsetup_r+0x30>
 80187a6:	bd70      	pop	{r4, r5, r6, pc}
 80187a8:	0781      	lsls	r1, r0, #30
 80187aa:	bf58      	it	pl
 80187ac:	6963      	ldrpl	r3, [r4, #20]
 80187ae:	60a3      	str	r3, [r4, #8]
 80187b0:	e7f4      	b.n	801879c <__swsetup_r+0xb0>
 80187b2:	2000      	movs	r0, #0
 80187b4:	e7f7      	b.n	80187a6 <__swsetup_r+0xba>
 80187b6:	bf00      	nop
 80187b8:	200001b8 	.word	0x200001b8
 80187bc:	08018ea0 	.word	0x08018ea0
 80187c0:	08018ec0 	.word	0x08018ec0
 80187c4:	08018e80 	.word	0x08018e80

080187c8 <abort>:
 80187c8:	b508      	push	{r3, lr}
 80187ca:	2006      	movs	r0, #6
 80187cc:	f000 f898 	bl	8018900 <raise>
 80187d0:	2001      	movs	r0, #1
 80187d2:	f7eb fc29 	bl	8004028 <_exit>

080187d6 <__swhatbuf_r>:
 80187d6:	b570      	push	{r4, r5, r6, lr}
 80187d8:	460e      	mov	r6, r1
 80187da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187de:	2900      	cmp	r1, #0
 80187e0:	b096      	sub	sp, #88	; 0x58
 80187e2:	4614      	mov	r4, r2
 80187e4:	461d      	mov	r5, r3
 80187e6:	da07      	bge.n	80187f8 <__swhatbuf_r+0x22>
 80187e8:	2300      	movs	r3, #0
 80187ea:	602b      	str	r3, [r5, #0]
 80187ec:	89b3      	ldrh	r3, [r6, #12]
 80187ee:	061a      	lsls	r2, r3, #24
 80187f0:	d410      	bmi.n	8018814 <__swhatbuf_r+0x3e>
 80187f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80187f6:	e00e      	b.n	8018816 <__swhatbuf_r+0x40>
 80187f8:	466a      	mov	r2, sp
 80187fa:	f000 f89d 	bl	8018938 <_fstat_r>
 80187fe:	2800      	cmp	r0, #0
 8018800:	dbf2      	blt.n	80187e8 <__swhatbuf_r+0x12>
 8018802:	9a01      	ldr	r2, [sp, #4]
 8018804:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018808:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801880c:	425a      	negs	r2, r3
 801880e:	415a      	adcs	r2, r3
 8018810:	602a      	str	r2, [r5, #0]
 8018812:	e7ee      	b.n	80187f2 <__swhatbuf_r+0x1c>
 8018814:	2340      	movs	r3, #64	; 0x40
 8018816:	2000      	movs	r0, #0
 8018818:	6023      	str	r3, [r4, #0]
 801881a:	b016      	add	sp, #88	; 0x58
 801881c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018820 <__smakebuf_r>:
 8018820:	898b      	ldrh	r3, [r1, #12]
 8018822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018824:	079d      	lsls	r5, r3, #30
 8018826:	4606      	mov	r6, r0
 8018828:	460c      	mov	r4, r1
 801882a:	d507      	bpl.n	801883c <__smakebuf_r+0x1c>
 801882c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018830:	6023      	str	r3, [r4, #0]
 8018832:	6123      	str	r3, [r4, #16]
 8018834:	2301      	movs	r3, #1
 8018836:	6163      	str	r3, [r4, #20]
 8018838:	b002      	add	sp, #8
 801883a:	bd70      	pop	{r4, r5, r6, pc}
 801883c:	ab01      	add	r3, sp, #4
 801883e:	466a      	mov	r2, sp
 8018840:	f7ff ffc9 	bl	80187d6 <__swhatbuf_r>
 8018844:	9900      	ldr	r1, [sp, #0]
 8018846:	4605      	mov	r5, r0
 8018848:	4630      	mov	r0, r6
 801884a:	f7fb fd1b 	bl	8014284 <_malloc_r>
 801884e:	b948      	cbnz	r0, 8018864 <__smakebuf_r+0x44>
 8018850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018854:	059a      	lsls	r2, r3, #22
 8018856:	d4ef      	bmi.n	8018838 <__smakebuf_r+0x18>
 8018858:	f023 0303 	bic.w	r3, r3, #3
 801885c:	f043 0302 	orr.w	r3, r3, #2
 8018860:	81a3      	strh	r3, [r4, #12]
 8018862:	e7e3      	b.n	801882c <__smakebuf_r+0xc>
 8018864:	4b0d      	ldr	r3, [pc, #52]	; (801889c <__smakebuf_r+0x7c>)
 8018866:	62b3      	str	r3, [r6, #40]	; 0x28
 8018868:	89a3      	ldrh	r3, [r4, #12]
 801886a:	6020      	str	r0, [r4, #0]
 801886c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018870:	81a3      	strh	r3, [r4, #12]
 8018872:	9b00      	ldr	r3, [sp, #0]
 8018874:	6163      	str	r3, [r4, #20]
 8018876:	9b01      	ldr	r3, [sp, #4]
 8018878:	6120      	str	r0, [r4, #16]
 801887a:	b15b      	cbz	r3, 8018894 <__smakebuf_r+0x74>
 801887c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018880:	4630      	mov	r0, r6
 8018882:	f000 f86b 	bl	801895c <_isatty_r>
 8018886:	b128      	cbz	r0, 8018894 <__smakebuf_r+0x74>
 8018888:	89a3      	ldrh	r3, [r4, #12]
 801888a:	f023 0303 	bic.w	r3, r3, #3
 801888e:	f043 0301 	orr.w	r3, r3, #1
 8018892:	81a3      	strh	r3, [r4, #12]
 8018894:	89a0      	ldrh	r0, [r4, #12]
 8018896:	4305      	orrs	r5, r0
 8018898:	81a5      	strh	r5, [r4, #12]
 801889a:	e7cd      	b.n	8018838 <__smakebuf_r+0x18>
 801889c:	08013fa5 	.word	0x08013fa5

080188a0 <_malloc_usable_size_r>:
 80188a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80188a4:	1f18      	subs	r0, r3, #4
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	bfbc      	itt	lt
 80188aa:	580b      	ldrlt	r3, [r1, r0]
 80188ac:	18c0      	addlt	r0, r0, r3
 80188ae:	4770      	bx	lr

080188b0 <_raise_r>:
 80188b0:	291f      	cmp	r1, #31
 80188b2:	b538      	push	{r3, r4, r5, lr}
 80188b4:	4604      	mov	r4, r0
 80188b6:	460d      	mov	r5, r1
 80188b8:	d904      	bls.n	80188c4 <_raise_r+0x14>
 80188ba:	2316      	movs	r3, #22
 80188bc:	6003      	str	r3, [r0, #0]
 80188be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80188c2:	bd38      	pop	{r3, r4, r5, pc}
 80188c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80188c6:	b112      	cbz	r2, 80188ce <_raise_r+0x1e>
 80188c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80188cc:	b94b      	cbnz	r3, 80188e2 <_raise_r+0x32>
 80188ce:	4620      	mov	r0, r4
 80188d0:	f000 f830 	bl	8018934 <_getpid_r>
 80188d4:	462a      	mov	r2, r5
 80188d6:	4601      	mov	r1, r0
 80188d8:	4620      	mov	r0, r4
 80188da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80188de:	f000 b817 	b.w	8018910 <_kill_r>
 80188e2:	2b01      	cmp	r3, #1
 80188e4:	d00a      	beq.n	80188fc <_raise_r+0x4c>
 80188e6:	1c59      	adds	r1, r3, #1
 80188e8:	d103      	bne.n	80188f2 <_raise_r+0x42>
 80188ea:	2316      	movs	r3, #22
 80188ec:	6003      	str	r3, [r0, #0]
 80188ee:	2001      	movs	r0, #1
 80188f0:	e7e7      	b.n	80188c2 <_raise_r+0x12>
 80188f2:	2400      	movs	r4, #0
 80188f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80188f8:	4628      	mov	r0, r5
 80188fa:	4798      	blx	r3
 80188fc:	2000      	movs	r0, #0
 80188fe:	e7e0      	b.n	80188c2 <_raise_r+0x12>

08018900 <raise>:
 8018900:	4b02      	ldr	r3, [pc, #8]	; (801890c <raise+0xc>)
 8018902:	4601      	mov	r1, r0
 8018904:	6818      	ldr	r0, [r3, #0]
 8018906:	f7ff bfd3 	b.w	80188b0 <_raise_r>
 801890a:	bf00      	nop
 801890c:	200001b8 	.word	0x200001b8

08018910 <_kill_r>:
 8018910:	b538      	push	{r3, r4, r5, lr}
 8018912:	4d07      	ldr	r5, [pc, #28]	; (8018930 <_kill_r+0x20>)
 8018914:	2300      	movs	r3, #0
 8018916:	4604      	mov	r4, r0
 8018918:	4608      	mov	r0, r1
 801891a:	4611      	mov	r1, r2
 801891c:	602b      	str	r3, [r5, #0]
 801891e:	f7eb fb73 	bl	8004008 <_kill>
 8018922:	1c43      	adds	r3, r0, #1
 8018924:	d102      	bne.n	801892c <_kill_r+0x1c>
 8018926:	682b      	ldr	r3, [r5, #0]
 8018928:	b103      	cbz	r3, 801892c <_kill_r+0x1c>
 801892a:	6023      	str	r3, [r4, #0]
 801892c:	bd38      	pop	{r3, r4, r5, pc}
 801892e:	bf00      	nop
 8018930:	2000cc08 	.word	0x2000cc08

08018934 <_getpid_r>:
 8018934:	f7eb bb60 	b.w	8003ff8 <_getpid>

08018938 <_fstat_r>:
 8018938:	b538      	push	{r3, r4, r5, lr}
 801893a:	4d07      	ldr	r5, [pc, #28]	; (8018958 <_fstat_r+0x20>)
 801893c:	2300      	movs	r3, #0
 801893e:	4604      	mov	r4, r0
 8018940:	4608      	mov	r0, r1
 8018942:	4611      	mov	r1, r2
 8018944:	602b      	str	r3, [r5, #0]
 8018946:	f7eb fbbe 	bl	80040c6 <_fstat>
 801894a:	1c43      	adds	r3, r0, #1
 801894c:	d102      	bne.n	8018954 <_fstat_r+0x1c>
 801894e:	682b      	ldr	r3, [r5, #0]
 8018950:	b103      	cbz	r3, 8018954 <_fstat_r+0x1c>
 8018952:	6023      	str	r3, [r4, #0]
 8018954:	bd38      	pop	{r3, r4, r5, pc}
 8018956:	bf00      	nop
 8018958:	2000cc08 	.word	0x2000cc08

0801895c <_isatty_r>:
 801895c:	b538      	push	{r3, r4, r5, lr}
 801895e:	4d06      	ldr	r5, [pc, #24]	; (8018978 <_isatty_r+0x1c>)
 8018960:	2300      	movs	r3, #0
 8018962:	4604      	mov	r4, r0
 8018964:	4608      	mov	r0, r1
 8018966:	602b      	str	r3, [r5, #0]
 8018968:	f7eb fbbd 	bl	80040e6 <_isatty>
 801896c:	1c43      	adds	r3, r0, #1
 801896e:	d102      	bne.n	8018976 <_isatty_r+0x1a>
 8018970:	682b      	ldr	r3, [r5, #0]
 8018972:	b103      	cbz	r3, 8018976 <_isatty_r+0x1a>
 8018974:	6023      	str	r3, [r4, #0]
 8018976:	bd38      	pop	{r3, r4, r5, pc}
 8018978:	2000cc08 	.word	0x2000cc08

0801897c <_init>:
 801897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801897e:	bf00      	nop
 8018980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018982:	bc08      	pop	{r3}
 8018984:	469e      	mov	lr, r3
 8018986:	4770      	bx	lr

08018988 <_fini>:
 8018988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801898a:	bf00      	nop
 801898c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801898e:	bc08      	pop	{r3}
 8018990:	469e      	mov	lr, r3
 8018992:	4770      	bx	lr
