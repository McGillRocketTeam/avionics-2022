
f4_rtos_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017020  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000088c  080171d0  080171d0  000271d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a5c  08017a5c  00030370  2**0
                  CONTENTS
  4 .ARM          00000008  08017a5c  08017a5c  00027a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a64  08017a64  00030370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017a64  08017a64  00027a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017a68  08017a68  00027a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  08017a6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030370  2**0
                  CONTENTS
 10 .bss          0000c010  20000370  20000370  00030370  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000c380  2000c380  00030370  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY
 13 .debug_info   000504c7  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007944  00000000  00000000  00080867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e18  00000000  00000000  000881b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002b78  00000000  00000000  0008afc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f1a9  00000000  00000000  0008db40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003611a  00000000  00000000  000bcce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103e67  00000000  00000000  000f2e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001f6c6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dc00  00000000  00000000  001f6cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000370 	.word	0x20000370
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080171b8 	.word	0x080171b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000374 	.word	0x20000374
 80001ec:	080171b8 	.word	0x080171b8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <GPS_Poll>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Poll(double *latitude, double *longitude, float *time)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 1000;
 8001018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28

	while(loop_count < max_loop_count && !done){
 8001026:	e088      	b.n	800113a <GPS_Poll+0x12e>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	2201      	movs	r2, #1
 800102c:	4949      	ldr	r1, [pc, #292]	; (8001154 <GPS_Poll+0x148>)
 800102e:	484a      	ldr	r0, [pc, #296]	; (8001158 <GPS_Poll+0x14c>)
 8001030:	f006 ff69 	bl	8007f06 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart8, (uint8_t*)&rx_current, 1, 100);
		if(rx_current == '$'){
 8001034:	4b47      	ldr	r3, [pc, #284]	; (8001154 <GPS_Poll+0x148>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	2b24      	cmp	r3, #36	; 0x24
 800103a:	d114      	bne.n	8001066 <GPS_Poll+0x5a>
			rx_index = 0;
 800103c:	4b47      	ldr	r3, [pc, #284]	; (800115c <GPS_Poll+0x150>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8001042:	224b      	movs	r2, #75	; 0x4b
 8001044:	2100      	movs	r1, #0
 8001046:	4846      	ldr	r0, [pc, #280]	; (8001160 <GPS_Poll+0x154>)
 8001048:	f011 f8ab 	bl	80121a2 <memset>
			rx_buffer[rx_index++] = rx_current;
 800104c:	4b41      	ldr	r3, [pc, #260]	; (8001154 <GPS_Poll+0x148>)
 800104e:	8819      	ldrh	r1, [r3, #0]
 8001050:	4b42      	ldr	r3, [pc, #264]	; (800115c <GPS_Poll+0x150>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	b2d0      	uxtb	r0, r2
 8001058:	4a40      	ldr	r2, [pc, #256]	; (800115c <GPS_Poll+0x150>)
 800105a:	7010      	strb	r0, [r2, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	b2c9      	uxtb	r1, r1
 8001060:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <GPS_Poll+0x154>)
 8001062:	5499      	strb	r1, [r3, r2]
 8001064:	e03a      	b.n	80010dc <GPS_Poll+0xd0>
		} else if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <GPS_Poll+0x148>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	2b0a      	cmp	r3, #10
 800106c:	d010      	beq.n	8001090 <GPS_Poll+0x84>
 800106e:	4b3b      	ldr	r3, [pc, #236]	; (800115c <GPS_Poll+0x150>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b4a      	cmp	r3, #74	; 0x4a
 8001074:	d80c      	bhi.n	8001090 <GPS_Poll+0x84>
			rx_buffer[rx_index++] = rx_current;
 8001076:	4b37      	ldr	r3, [pc, #220]	; (8001154 <GPS_Poll+0x148>)
 8001078:	8819      	ldrh	r1, [r3, #0]
 800107a:	4b38      	ldr	r3, [pc, #224]	; (800115c <GPS_Poll+0x150>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	b2d0      	uxtb	r0, r2
 8001082:	4a36      	ldr	r2, [pc, #216]	; (800115c <GPS_Poll+0x150>)
 8001084:	7010      	strb	r0, [r2, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	b2c9      	uxtb	r1, r1
 800108a:	4b35      	ldr	r3, [pc, #212]	; (8001160 <GPS_Poll+0x154>)
 800108c:	5499      	strb	r1, [r3, r2]
 800108e:	e025      	b.n	80010dc <GPS_Poll+0xd0>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8001090:	4833      	ldr	r0, [pc, #204]	; (8001160 <GPS_Poll+0x154>)
 8001092:	f000 f869 	bl	8001168 <GPS_validate>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d017      	beq.n	80010cc <GPS_Poll+0xc0>
				if(GPS_parse((char*) rx_buffer)){
 800109c:	4830      	ldr	r0, [pc, #192]	; (8001160 <GPS_Poll+0x154>)
 800109e:	f000 f8c5 	bl	800122c <GPS_parse>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d011      	beq.n	80010cc <GPS_Poll+0xc0>
					//myprintf("%s\n",rx_buffer);
					*latitude = GPS.dec_latitude;
 80010a8:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <GPS_Poll+0x158>)
 80010aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80010ae:	68f9      	ldr	r1, [r7, #12]
 80010b0:	e9c1 2300 	strd	r2, r3, [r1]
					*longitude = GPS.dec_longitude;
 80010b4:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <GPS_Poll+0x158>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	68b9      	ldr	r1, [r7, #8]
 80010bc:	e9c1 2300 	strd	r2, r3, [r1]
					*time = GPS.utc_time;
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <GPS_Poll+0x158>)
 80010c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	601a      	str	r2, [r3, #0]
					//myprintf("LATITUDE: %f, LONGITUDE: %f\n", GPS.dec_latitude, GPS.dec_longitude);
					done = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <GPS_Poll+0x150>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80010d2:	224b      	movs	r2, #75	; 0x4b
 80010d4:	2100      	movs	r1, #0
 80010d6:	4822      	ldr	r0, [pc, #136]	; (8001160 <GPS_Poll+0x154>)
 80010d8:	f011 f863 	bl	80121a2 <memset>
		// from f303 code
//		__HAL_UART_CLEAR_FLAG(GPS_USART, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <GPS_Poll+0x14c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	623b      	str	r3, [r7, #32]
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <GPS_Poll+0x14c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	623b      	str	r3, [r7, #32]
 80010f0:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <GPS_Poll+0x14c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <GPS_Poll+0x14c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <GPS_Poll+0x14c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <GPS_Poll+0x14c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <GPS_Poll+0x14c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <GPS_Poll+0x14c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8001134:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001136:	3301      	adds	r3, #1
 8001138:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 800113a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800113c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800113e:	429a      	cmp	r2, r3
 8001140:	d203      	bcs.n	800114a <GPS_Poll+0x13e>
 8001142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001144:	2b00      	cmp	r3, #0
 8001146:	f43f af6f 	beq.w	8001028 <GPS_Poll+0x1c>
	}

}
 800114a:	bf00      	nop
 800114c:	3730      	adds	r7, #48	; 0x30
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000038c 	.word	0x2000038c
 8001158:	2000a2b8 	.word	0x2000a2b8
 800115c:	2000038e 	.word	0x2000038e
 8001160:	20009e70 	.word	0x20009e70
 8001164:	20009e00 	.word	0x20009e00

08001168 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$'){
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b24      	cmp	r3, #36	; 0x24
 8001182:	d103      	bne.n	800118c <GPS_validate+0x24>
        i++;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
    } else {
        return 0;
    }

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800118a:	e00c      	b.n	80011a6 <GPS_validate+0x3e>
        return 0;
 800118c:	2300      	movs	r3, #0
 800118e:	e047      	b.n	8001220 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4053      	eors	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        i++;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d008      	beq.n	80011c4 <GPS_validate+0x5c>
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b2a      	cmp	r3, #42	; 0x2a
 80011bc:	d002      	beq.n	80011c4 <GPS_validate+0x5c>
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b4a      	cmp	r3, #74	; 0x4a
 80011c2:	dde5      	ble.n	8001190 <GPS_validate+0x28>
    }

    if(i >= 75){
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2b4a      	cmp	r3, #74	; 0x4a
 80011c8:	dd01      	ble.n	80011ce <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80011ca:	2300      	movs	r3, #0
 80011cc:	e028      	b.n	8001220 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	4413      	add	r3, r2
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b2a      	cmp	r3, #42	; 0x2a
 80011d8:	d119      	bne.n	800120e <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	3301      	adds	r3, #1
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3302      	adds	r3, #2
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	490a      	ldr	r1, [pc, #40]	; (8001228 <GPS_validate+0xc0>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f011 ff2c 	bl	801305c <siprintf>
    return((checkcalcstr[0] == check[0])
 8001204:	7a3a      	ldrb	r2, [r7, #8]
 8001206:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001208:	429a      	cmp	r2, r3
 800120a:	d108      	bne.n	800121e <GPS_validate+0xb6>
 800120c:	e001      	b.n	8001212 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800120e:	2300      	movs	r3, #0
 8001210:	e006      	b.n	8001220 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001212:	7a7a      	ldrb	r2, [r7, #9]
 8001214:	7b7b      	ldrb	r3, [r7, #13]
 8001216:	429a      	cmp	r2, r3
 8001218:	d101      	bne.n	800121e <GPS_validate+0xb6>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <GPS_validate+0xb8>
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	080171d0 	.word	0x080171d0

0800122c <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af08      	add	r7, sp, #32
 8001232:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8001234:	2206      	movs	r2, #6
 8001236:	497d      	ldr	r1, [pc, #500]	; (800142c <GPS_parse+0x200>)
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f011 ffa0 	bl	801317e <strncmp>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d143      	bne.n	80012cc <GPS_parse+0xa0>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%lf,%c,%lf,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001244:	4b7a      	ldr	r3, [pc, #488]	; (8001430 <GPS_parse+0x204>)
 8001246:	9307      	str	r3, [sp, #28]
 8001248:	4b7a      	ldr	r3, [pc, #488]	; (8001434 <GPS_parse+0x208>)
 800124a:	9306      	str	r3, [sp, #24]
 800124c:	4b7a      	ldr	r3, [pc, #488]	; (8001438 <GPS_parse+0x20c>)
 800124e:	9305      	str	r3, [sp, #20]
 8001250:	4b7a      	ldr	r3, [pc, #488]	; (800143c <GPS_parse+0x210>)
 8001252:	9304      	str	r3, [sp, #16]
 8001254:	4b7a      	ldr	r3, [pc, #488]	; (8001440 <GPS_parse+0x214>)
 8001256:	9303      	str	r3, [sp, #12]
 8001258:	4b7a      	ldr	r3, [pc, #488]	; (8001444 <GPS_parse+0x218>)
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	4b7a      	ldr	r3, [pc, #488]	; (8001448 <GPS_parse+0x21c>)
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	4b7a      	ldr	r3, [pc, #488]	; (800144c <GPS_parse+0x220>)
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4b7a      	ldr	r3, [pc, #488]	; (8001450 <GPS_parse+0x224>)
 8001266:	4a7b      	ldr	r2, [pc, #492]	; (8001454 <GPS_parse+0x228>)
 8001268:	497b      	ldr	r1, [pc, #492]	; (8001458 <GPS_parse+0x22c>)
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f011 ff16 	bl	801309c <siscanf>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	f340 80d4 	ble.w	8001420 <GPS_parse+0x1f4>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001278:	4b78      	ldr	r3, [pc, #480]	; (800145c <GPS_parse+0x230>)
 800127a:	ed93 7b08 	vldr	d7, [r3, #32]
 800127e:	4b77      	ldr	r3, [pc, #476]	; (800145c <GPS_parse+0x230>)
 8001280:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001284:	4618      	mov	r0, r3
 8001286:	eeb0 0a47 	vmov.f32	s0, s14
 800128a:	eef0 0a67 	vmov.f32	s1, s15
 800128e:	f000 f909 	bl	80014a4 <GPS_nmea_to_dec>
 8001292:	eeb0 7a40 	vmov.f32	s14, s0
 8001296:	eef0 7a60 	vmov.f32	s15, s1
 800129a:	4b70      	ldr	r3, [pc, #448]	; (800145c <GPS_parse+0x230>)
 800129c:	ed83 7b02 	vstr	d7, [r3, #8]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80012a0:	4b6e      	ldr	r3, [pc, #440]	; (800145c <GPS_parse+0x230>)
 80012a2:	ed93 7b06 	vldr	d7, [r3, #24]
 80012a6:	4b6d      	ldr	r3, [pc, #436]	; (800145c <GPS_parse+0x230>)
 80012a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80012ac:	4618      	mov	r0, r3
 80012ae:	eeb0 0a47 	vmov.f32	s0, s14
 80012b2:	eef0 0a67 	vmov.f32	s1, s15
 80012b6:	f000 f8f5 	bl	80014a4 <GPS_nmea_to_dec>
 80012ba:	eeb0 7a40 	vmov.f32	s14, s0
 80012be:	eef0 7a60 	vmov.f32	s15, s1
 80012c2:	4b66      	ldr	r3, [pc, #408]	; (800145c <GPS_parse+0x230>)
 80012c4:	ed83 7b00 	vstr	d7, [r3]
    		return 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e0aa      	b.n	8001422 <GPS_parse+0x1f6>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 80012cc:	2206      	movs	r2, #6
 80012ce:	4964      	ldr	r1, [pc, #400]	; (8001460 <GPS_parse+0x234>)
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f011 ff54 	bl	801317e <strncmp>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d13f      	bne.n	800135c <GPS_parse+0x130>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%lf,%c,%lf,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 80012dc:	4b61      	ldr	r3, [pc, #388]	; (8001464 <GPS_parse+0x238>)
 80012de:	9305      	str	r3, [sp, #20]
 80012e0:	4b61      	ldr	r3, [pc, #388]	; (8001468 <GPS_parse+0x23c>)
 80012e2:	9304      	str	r3, [sp, #16]
 80012e4:	4b61      	ldr	r3, [pc, #388]	; (800146c <GPS_parse+0x240>)
 80012e6:	9303      	str	r3, [sp, #12]
 80012e8:	4b56      	ldr	r3, [pc, #344]	; (8001444 <GPS_parse+0x218>)
 80012ea:	9302      	str	r3, [sp, #8]
 80012ec:	4b56      	ldr	r3, [pc, #344]	; (8001448 <GPS_parse+0x21c>)
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	4b56      	ldr	r3, [pc, #344]	; (800144c <GPS_parse+0x220>)
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	4b56      	ldr	r3, [pc, #344]	; (8001450 <GPS_parse+0x224>)
 80012f6:	4a57      	ldr	r2, [pc, #348]	; (8001454 <GPS_parse+0x228>)
 80012f8:	495d      	ldr	r1, [pc, #372]	; (8001470 <GPS_parse+0x244>)
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f011 fece 	bl	801309c <siscanf>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	f340 808c 	ble.w	8001420 <GPS_parse+0x1f4>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001308:	4b54      	ldr	r3, [pc, #336]	; (800145c <GPS_parse+0x230>)
 800130a:	ed93 7b08 	vldr	d7, [r3, #32]
 800130e:	4b53      	ldr	r3, [pc, #332]	; (800145c <GPS_parse+0x230>)
 8001310:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001314:	4618      	mov	r0, r3
 8001316:	eeb0 0a47 	vmov.f32	s0, s14
 800131a:	eef0 0a67 	vmov.f32	s1, s15
 800131e:	f000 f8c1 	bl	80014a4 <GPS_nmea_to_dec>
 8001322:	eeb0 7a40 	vmov.f32	s14, s0
 8001326:	eef0 7a60 	vmov.f32	s15, s1
 800132a:	4b4c      	ldr	r3, [pc, #304]	; (800145c <GPS_parse+0x230>)
 800132c:	ed83 7b02 	vstr	d7, [r3, #8]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001330:	4b4a      	ldr	r3, [pc, #296]	; (800145c <GPS_parse+0x230>)
 8001332:	ed93 7b06 	vldr	d7, [r3, #24]
 8001336:	4b49      	ldr	r3, [pc, #292]	; (800145c <GPS_parse+0x230>)
 8001338:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800133c:	4618      	mov	r0, r3
 800133e:	eeb0 0a47 	vmov.f32	s0, s14
 8001342:	eef0 0a67 	vmov.f32	s1, s15
 8001346:	f000 f8ad 	bl	80014a4 <GPS_nmea_to_dec>
 800134a:	eeb0 7a40 	vmov.f32	s14, s0
 800134e:	eef0 7a60 	vmov.f32	s15, s1
 8001352:	4b42      	ldr	r3, [pc, #264]	; (800145c <GPS_parse+0x230>)
 8001354:	ed83 7b00 	vstr	d7, [r3]
    		return 1;
 8001358:	2301      	movs	r3, #1
 800135a:	e062      	b.n	8001422 <GPS_parse+0x1f6>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 800135c:	2206      	movs	r2, #6
 800135e:	4945      	ldr	r1, [pc, #276]	; (8001474 <GPS_parse+0x248>)
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f011 ff0c 	bl	801317e <strncmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d13a      	bne.n	80013e2 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNGLL,%lf,%c,%lf,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 800136c:	4b42      	ldr	r3, [pc, #264]	; (8001478 <GPS_parse+0x24c>)
 800136e:	9303      	str	r3, [sp, #12]
 8001370:	4b38      	ldr	r3, [pc, #224]	; (8001454 <GPS_parse+0x228>)
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	4b33      	ldr	r3, [pc, #204]	; (8001444 <GPS_parse+0x218>)
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	4b33      	ldr	r3, [pc, #204]	; (8001448 <GPS_parse+0x21c>)
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4b33      	ldr	r3, [pc, #204]	; (800144c <GPS_parse+0x220>)
 800137e:	4a34      	ldr	r2, [pc, #208]	; (8001450 <GPS_parse+0x224>)
 8001380:	493e      	ldr	r1, [pc, #248]	; (800147c <GPS_parse+0x250>)
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f011 fe8a 	bl	801309c <siscanf>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	dd48      	ble.n	8001420 <GPS_parse+0x1f4>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800138e:	4b33      	ldr	r3, [pc, #204]	; (800145c <GPS_parse+0x230>)
 8001390:	ed93 7b08 	vldr	d7, [r3, #32]
 8001394:	4b31      	ldr	r3, [pc, #196]	; (800145c <GPS_parse+0x230>)
 8001396:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800139a:	4618      	mov	r0, r3
 800139c:	eeb0 0a47 	vmov.f32	s0, s14
 80013a0:	eef0 0a67 	vmov.f32	s1, s15
 80013a4:	f000 f87e 	bl	80014a4 <GPS_nmea_to_dec>
 80013a8:	eeb0 7a40 	vmov.f32	s14, s0
 80013ac:	eef0 7a60 	vmov.f32	s15, s1
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <GPS_parse+0x230>)
 80013b2:	ed83 7b02 	vstr	d7, [r3, #8]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <GPS_parse+0x230>)
 80013b8:	ed93 7b06 	vldr	d7, [r3, #24]
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <GPS_parse+0x230>)
 80013be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80013c2:	4618      	mov	r0, r3
 80013c4:	eeb0 0a47 	vmov.f32	s0, s14
 80013c8:	eef0 0a67 	vmov.f32	s1, s15
 80013cc:	f000 f86a 	bl	80014a4 <GPS_nmea_to_dec>
 80013d0:	eeb0 7a40 	vmov.f32	s14, s0
 80013d4:	eef0 7a60 	vmov.f32	s15, s1
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <GPS_parse+0x230>)
 80013da:	ed83 7b00 	vstr	d7, [r3]
        	return 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	e01f      	b.n	8001422 <GPS_parse+0x1f6>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80013e2:	2206      	movs	r2, #6
 80013e4:	4926      	ldr	r1, [pc, #152]	; (8001480 <GPS_parse+0x254>)
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f011 fec9 	bl	801317e <strncmp>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d116      	bne.n	8001420 <GPS_parse+0x1f4>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80013f2:	4b24      	ldr	r3, [pc, #144]	; (8001484 <GPS_parse+0x258>)
 80013f4:	9305      	str	r3, [sp, #20]
 80013f6:	4b24      	ldr	r3, [pc, #144]	; (8001488 <GPS_parse+0x25c>)
 80013f8:	9304      	str	r3, [sp, #16]
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <GPS_parse+0x260>)
 80013fc:	9303      	str	r3, [sp, #12]
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <GPS_parse+0x240>)
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <GPS_parse+0x264>)
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <GPS_parse+0x268>)
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <GPS_parse+0x26c>)
 800140c:	4a23      	ldr	r2, [pc, #140]	; (800149c <GPS_parse+0x270>)
 800140e:	4924      	ldr	r1, [pc, #144]	; (80014a0 <GPS_parse+0x274>)
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f011 fe43 	bl	801309c <siscanf>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	dd01      	ble.n	8001420 <GPS_parse+0x1f4>
            return 0;
 800141c:	2300      	movs	r3, #0
 800141e:	e000      	b.n	8001422 <GPS_parse+0x1f6>
    }
    return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	080171d8 	.word	0x080171d8
 8001430:	20009e40 	.word	0x20009e40
 8001434:	20009e3c 	.word	0x20009e3c
 8001438:	20009e38 	.word	0x20009e38
 800143c:	20009e34 	.word	0x20009e34
 8001440:	20009e30 	.word	0x20009e30
 8001444:	20009e2d 	.word	0x20009e2d
 8001448:	20009e18 	.word	0x20009e18
 800144c:	20009e2c 	.word	0x20009e2c
 8001450:	20009e20 	.word	0x20009e20
 8001454:	20009e28 	.word	0x20009e28
 8001458:	080171e0 	.word	0x080171e0
 800145c:	20009e00 	.word	0x20009e00
 8001460:	08017208 	.word	0x08017208
 8001464:	20009e4c 	.word	0x20009e4c
 8001468:	20009e48 	.word	0x20009e48
 800146c:	20009e44 	.word	0x20009e44
 8001470:	08017210 	.word	0x08017210
 8001474:	08017234 	.word	0x08017234
 8001478:	20009e50 	.word	0x20009e50
 800147c:	0801723c 	.word	0x0801723c
 8001480:	08017258 	.word	0x08017258
 8001484:	20009e68 	.word	0x20009e68
 8001488:	20009e64 	.word	0x20009e64
 800148c:	20009e61 	.word	0x20009e61
 8001490:	20009e60 	.word	0x20009e60
 8001494:	20009e5c 	.word	0x20009e5c
 8001498:	20009e58 	.word	0x20009e58
 800149c:	20009e54 	.word	0x20009e54
 80014a0:	08017260 	.word	0x08017260

080014a4 <GPS_nmea_to_dec>:

double GPS_nmea_to_dec(double deg_coord, char nsew) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	; 0x30
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	ed87 0b02 	vstr	d0, [r7, #8]
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
    int degree = (int)(deg_coord/100);
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <GPS_nmea_to_dec+0xac>)
 80014b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014bc:	f7ff f9d6 	bl	800086c <__aeabi_ddiv>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb56 	bl	8000b78 <__aeabi_d2iz>
 80014cc:	4603      	mov	r3, r0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    double minutes = deg_coord - degree*100;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	2264      	movs	r2, #100	; 0x64
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f833 	bl	8000544 <__aeabi_i2d>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014e6:	f7fe fedf 	bl	80002a8 <__aeabi_dsub>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double dec_deg = minutes / 60;
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <GPS_nmea_to_dec+0xb0>)
 80014f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014fc:	f7ff f9b6 	bl	800086c <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double decimal = degree + dec_deg;
 8001508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800150a:	f7ff f81b 	bl	8000544 <__aeabi_i2d>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001516:	f7fe fec9 	bl	80002ac <__adddf3>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b53      	cmp	r3, #83	; 0x53
 8001526:	d002      	beq.n	800152e <GPS_nmea_to_dec+0x8a>
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b57      	cmp	r3, #87	; 0x57
 800152c:	d105      	bne.n	800153a <GPS_nmea_to_dec+0x96>
        decimal *= -1;
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
 8001532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001534:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    return decimal;
 800153a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800153e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001542:	eeb0 0a47 	vmov.f32	s0, s14
 8001546:	eef0 0a67 	vmov.f32	s1, s15
 800154a:	3730      	adds	r7, #48	; 0x30
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40590000 	.word	0x40590000
 8001554:	404e0000 	.word	0x404e0000

08001558 <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001560:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <lsm6dsl_init+0xc8>)
 8001562:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 8001564:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <lsm6dsl_init+0xcc>)
 8001566:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 8001568:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <lsm6dsl_init+0xd0>)
 800156a:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 800156c:	200a      	movs	r0, #10
 800156e:	f000 f929 	bl	80017c4 <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	492d      	ldr	r1, [pc, #180]	; (800162c <lsm6dsl_init+0xd4>)
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fb15 	bl	8001ba8 <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <lsm6dsl_init+0xd4>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b6a      	cmp	r3, #106	; 0x6a
 8001584:	d005      	beq.n	8001592 <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001586:	2201      	movs	r2, #1
 8001588:	2102      	movs	r1, #2
 800158a:	4829      	ldr	r0, [pc, #164]	; (8001630 <lsm6dsl_init+0xd8>)
 800158c:	f002 faf8 	bl	8003b80 <HAL_GPIO_WritePin>
		__BKPT();
 8001590:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	2101      	movs	r1, #1
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fb16 	bl	8001bca <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	4924      	ldr	r1, [pc, #144]	; (8001634 <lsm6dsl_init+0xdc>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fb36 	bl	8001c16 <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <lsm6dsl_init+0xdc>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f5      	bne.n	800159e <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2101      	movs	r1, #1
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fa07 	bl	80019cc <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	2104      	movs	r1, #4
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f98f 	bl	80018e8 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2104      	movs	r1, #4
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 f9d5 	bl	8001980 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	2103      	movs	r1, #3
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 f95d 	bl	800189c <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	2106      	movs	r1, #6
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 f9a3 	bl	8001934 <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	2111      	movs	r1, #17
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fb27 	bl	8001c48 <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	21a8      	movs	r1, #168	; 0xa8
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fb58 	bl	8001cb6 <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	461c      	mov	r4, r3
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}
 800161e:	bf00      	nop
 8001620:	08001751 	.word	0x08001751
 8001624:	0800178b 	.word	0x0800178b
 8001628:	20009ec4 	.word	0x20009ec4
 800162c:	2000039e 	.word	0x2000039e
 8001630:	40020800 	.word	0x40020800
 8001634:	2000039f 	.word	0x2000039f

08001638 <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsl, float *acceleration_mg){
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	1d3c      	adds	r4, r7, #4
 8001640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001644:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsl_xl_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001646:	f107 0217 	add.w	r2, r7, #23
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f000 f9e2 	bl	8001a18 <lsm6dsl_xl_flag_data_ready_get>

	if (reg) {
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d02d      	beq.n	80016b6 <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800165a:	2206      	movs	r2, #6
 800165c:	2100      	movs	r1, #0
 800165e:	4818      	ldr	r0, [pc, #96]	; (80016c0 <get_acceleration+0x88>)
 8001660:	f010 fd9f 	bl	80121a2 <memset>
	  lsm6dsl_acceleration_raw_get(&dev_ctx_lsm6dsl, data_raw_acceleration);
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4916      	ldr	r1, [pc, #88]	; (80016c0 <get_acceleration+0x88>)
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fa52 	bl	8001b12 <lsm6dsl_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[0]);
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <get_acceleration+0x88>)
 8001670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f8e1 	bl	800183c <lsm6dsl_from_fs8g_to_mg>
 800167a:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <get_acceleration+0x88>)
 8001686:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 800168e:	4610      	mov	r0, r2
 8001690:	f000 f8d4 	bl	800183c <lsm6dsl_from_fs8g_to_mg>
 8001694:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 8001698:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <get_acceleration+0x88>)
 800169e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 80016a8:	4610      	mov	r0, r2
 80016aa:	f000 f8c7 	bl	800183c <lsm6dsl_from_fs8g_to_mg>
 80016ae:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 80016b2:	edc4 7a00 	vstr	s15, [r4]
	}

}
 80016b6:	bf00      	nop
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd90      	pop	{r4, r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000390 	.word	0x20000390

080016c4 <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsl, float *angular_rate_mdps){
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	1d3c      	adds	r4, r7, #4
 80016cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016d0:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsl_gy_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 80016d2:	f107 0217 	add.w	r2, r7, #23
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f9b5 	bl	8001a4a <lsm6dsl_gy_flag_data_ready_get>

	if (reg) {
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d02d      	beq.n	8001742 <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80016e6:	2206      	movs	r2, #6
 80016e8:	2100      	movs	r1, #0
 80016ea:	4818      	ldr	r0, [pc, #96]	; (800174c <get_angvelocity+0x88>)
 80016ec:	f010 fd59 	bl	80121a2 <memset>
	  lsm6dsl_angular_rate_raw_get(&dev_ctx_lsm6dsl, data_raw_angular_rate);
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4916      	ldr	r1, [pc, #88]	; (800174c <get_angvelocity+0x88>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f9c1 	bl	8001a7c <lsm6dsl_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <get_angvelocity+0x88>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	4618      	mov	r0, r3
 8001702:	f000 f8b3 	bl	800186c <lsm6dsl_from_fs2000dps_to_mdps>
 8001706:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <get_angvelocity+0x88>)
 8001712:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800171a:	4610      	mov	r0, r2
 800171c:	f000 f8a6 	bl	800186c <lsm6dsl_from_fs2000dps_to_mdps>
 8001720:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 8001724:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <get_angvelocity+0x88>)
 800172a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001734:	4610      	mov	r0, r2
 8001736:	f000 f899 	bl	800186c <lsm6dsl_from_fs2000dps_to_mdps>
 800173a:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 800173e:	edc4 7a00 	vstr	s15, [r4]
	}
}
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	bf00      	nop
 800174c:	20000398 	.word	0x20000398

08001750 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af04      	add	r7, sp, #16
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	461a      	mov	r2, r3
 800175c:	460b      	mov	r3, r1
 800175e:	72fb      	strb	r3, [r7, #11]
 8001760:	4613      	mov	r3, r2
 8001762:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 8001764:	7afb      	ldrb	r3, [r7, #11]
 8001766:	b29a      	uxth	r2, r3
 8001768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176c:	9302      	str	r3, [sp, #8]
 800176e:	893b      	ldrh	r3, [r7, #8]
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2301      	movs	r3, #1
 8001778:	21d5      	movs	r1, #213	; 0xd5
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f002 fb82 	bl	8003e84 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b088      	sub	sp, #32
 800178e:	af04      	add	r7, sp, #16
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	461a      	mov	r2, r3
 8001796:	460b      	mov	r3, r1
 8001798:	72fb      	strb	r3, [r7, #11]
 800179a:	4613      	mov	r3, r2
 800179c:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 800179e:	7afb      	ldrb	r3, [r7, #11]
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	893b      	ldrh	r3, [r7, #8]
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2301      	movs	r3, #1
 80017b2:	21d5      	movs	r1, #213	; 0xd5
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f002 fc5f 	bl	8004078 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f001 fc9b 	bl	8003108 <HAL_Delay>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80017da:	b590      	push	{r4, r7, lr}
 80017dc:	b087      	sub	sp, #28
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	461a      	mov	r2, r3
 80017e6:	460b      	mov	r3, r1
 80017e8:	72fb      	strb	r3, [r7, #11]
 80017ea:	4613      	mov	r3, r2
 80017ec:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	685c      	ldr	r4, [r3, #4]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6898      	ldr	r0, [r3, #8]
 80017f6:	893b      	ldrh	r3, [r7, #8]
 80017f8:	7af9      	ldrb	r1, [r7, #11]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	47a0      	blx	r4
 80017fe:	6178      	str	r0, [r7, #20]

  return ret;
 8001800:	697b      	ldr	r3, [r7, #20]
}
 8001802:	4618      	mov	r0, r3
 8001804:	371c      	adds	r7, #28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}

0800180a <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800180a:	b590      	push	{r4, r7, lr}
 800180c:	b087      	sub	sp, #28
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	461a      	mov	r2, r3
 8001816:	460b      	mov	r3, r1
 8001818:	72fb      	strb	r3, [r7, #11]
 800181a:	4613      	mov	r3, r2
 800181c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681c      	ldr	r4, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6898      	ldr	r0, [r3, #8]
 8001826:	893b      	ldrh	r3, [r7, #8]
 8001828:	7af9      	ldrb	r1, [r7, #11]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	47a0      	blx	r4
 800182e:	6178      	str	r0, [r7, #20]

  return ret;
 8001830:	697b      	ldr	r3, [r7, #20]
}
 8001832:	4618      	mov	r0, r3
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
	...

0800183c <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 8001846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001852:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001868 <lsm6dsl_from_fs8g_to_mg+0x2c>
 8001856:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	3e79db23 	.word	0x3e79db23

0800186c <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8001876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001882:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001898 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 8001886:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800188a:	eeb0 0a67 	vmov.f32	s0, s15
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	428c0000 	.word	0x428c0000

0800189c <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80018a8:	f107 0208 	add.w	r2, r7, #8
 80018ac:	2301      	movs	r3, #1
 80018ae:	2110      	movs	r1, #16
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff92 	bl	80017da <lsm6dsl_read_reg>
 80018b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10f      	bne.n	80018de <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	7a3b      	ldrb	r3, [r7, #8]
 80018c8:	f362 0383 	bfi	r3, r2, #2, #2
 80018cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80018ce:	f107 0208 	add.w	r2, r7, #8
 80018d2:	2301      	movs	r3, #1
 80018d4:	2110      	movs	r1, #16
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ff97 	bl	800180a <lsm6dsl_write_reg>
 80018dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80018f4:	f107 0208 	add.w	r2, r7, #8
 80018f8:	2301      	movs	r3, #1
 80018fa:	2110      	movs	r1, #16
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff6c 	bl	80017da <lsm6dsl_read_reg>
 8001902:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10f      	bne.n	800192a <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	b2da      	uxtb	r2, r3
 8001912:	7a3b      	ldrb	r3, [r7, #8]
 8001914:	f362 1307 	bfi	r3, r2, #4, #4
 8001918:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800191a:	f107 0208 	add.w	r2, r7, #8
 800191e:	2301      	movs	r3, #1
 8001920:	2110      	movs	r1, #16
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff71 	bl	800180a <lsm6dsl_write_reg>
 8001928:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001940:	f107 0208 	add.w	r2, r7, #8
 8001944:	2301      	movs	r3, #1
 8001946:	2111      	movs	r1, #17
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff46 	bl	80017da <lsm6dsl_read_reg>
 800194e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10f      	bne.n	8001976 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	b2da      	uxtb	r2, r3
 800195e:	7a3b      	ldrb	r3, [r7, #8]
 8001960:	f362 0343 	bfi	r3, r2, #1, #3
 8001964:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001966:	f107 0208 	add.w	r2, r7, #8
 800196a:	2301      	movs	r3, #1
 800196c:	2111      	movs	r1, #17
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ff4b 	bl	800180a <lsm6dsl_write_reg>
 8001974:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800198c:	f107 0208 	add.w	r2, r7, #8
 8001990:	2301      	movs	r3, #1
 8001992:	2111      	movs	r1, #17
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff20 	bl	80017da <lsm6dsl_read_reg>
 800199a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10f      	bne.n	80019c2 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	7a3b      	ldrb	r3, [r7, #8]
 80019ac:	f362 1307 	bfi	r3, r2, #4, #4
 80019b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80019b2:	f107 0208 	add.w	r2, r7, #8
 80019b6:	2301      	movs	r3, #1
 80019b8:	2111      	movs	r1, #17
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ff25 	bl	800180a <lsm6dsl_write_reg>
 80019c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80019d8:	f107 0208 	add.w	r2, r7, #8
 80019dc:	2301      	movs	r3, #1
 80019de:	2112      	movs	r1, #18
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff fefa 	bl	80017da <lsm6dsl_read_reg>
 80019e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10f      	bne.n	8001a0e <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	7a3b      	ldrb	r3, [r7, #8]
 80019f8:	f362 1386 	bfi	r3, r2, #6, #1
 80019fc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80019fe:	f107 0208 	add.w	r2, r7, #8
 8001a02:	2301      	movs	r3, #1
 8001a04:	2112      	movs	r1, #18
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff feff 	bl	800180a <lsm6dsl_write_reg>
 8001a0c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <lsm6dsl_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001a22:	f107 0208 	add.w	r2, r7, #8
 8001a26:	2301      	movs	r3, #1
 8001a28:	211e      	movs	r1, #30
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fed5 	bl	80017da <lsm6dsl_read_reg>
 8001a30:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8001a32:	7a3b      	ldrb	r3, [r7, #8]
 8001a34:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	701a      	strb	r2, [r3, #0]

  return ret;
 8001a40:	68fb      	ldr	r3, [r7, #12]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <lsm6dsl_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001a54:	f107 0208 	add.w	r2, r7, #8
 8001a58:	2301      	movs	r3, #1
 8001a5a:	211e      	movs	r1, #30
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff febc 	bl	80017da <lsm6dsl_read_reg>
 8001a62:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8001a64:	7a3b      	ldrb	r3, [r7, #8]
 8001a66:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	701a      	strb	r2, [r3, #0]

  return ret;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8001a86:	f107 020c 	add.w	r2, r7, #12
 8001a8a:	2306      	movs	r3, #6
 8001a8c:	2122      	movs	r1, #34	; 0x22
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fea3 	bl	80017da <lsm6dsl_read_reg>
 8001a94:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001a96:	7b7b      	ldrb	r3, [r7, #13]
 8001a98:	b21a      	sxth	r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	7b3b      	ldrb	r3, [r7, #12]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	3302      	adds	r3, #2
 8001abe:	b212      	sxth	r2, r2
 8001ac0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	7bbb      	ldrb	r3, [r7, #14]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	3302      	adds	r3, #2
 8001adc:	b212      	sxth	r2, r2
 8001ade:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001ae0:	7c7a      	ldrb	r2, [r7, #17]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	b212      	sxth	r2, r2
 8001ae8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	3304      	adds	r3, #4
 8001aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	7c3b      	ldrb	r3, [r7, #16]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	4413      	add	r3, r2
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	3304      	adds	r3, #4
 8001b04:	b212      	sxth	r2, r2
 8001b06:	801a      	strh	r2, [r3, #0]

  return ret;
 8001b08:	697b      	ldr	r3, [r7, #20]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001b1c:	f107 020c 	add.w	r2, r7, #12
 8001b20:	2306      	movs	r3, #6
 8001b22:	2128      	movs	r1, #40	; 0x28
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fe58 	bl	80017da <lsm6dsl_read_reg>
 8001b2a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001b2c:	7b7b      	ldrb	r3, [r7, #13]
 8001b2e:	b21a      	sxth	r2, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	7b3b      	ldrb	r3, [r7, #12]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	b21a      	sxth	r2, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	3302      	adds	r3, #2
 8001b54:	b212      	sxth	r2, r2
 8001b56:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	021b      	lsls	r3, r3, #8
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	7bbb      	ldrb	r3, [r7, #14]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	3302      	adds	r3, #2
 8001b72:	b212      	sxth	r2, r2
 8001b74:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001b76:	7c7a      	ldrb	r2, [r7, #17]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	b212      	sxth	r2, r2
 8001b7e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	3304      	adds	r3, #4
 8001b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	7c3b      	ldrb	r3, [r7, #16]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4413      	add	r3, r2
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	b212      	sxth	r2, r2
 8001b9c:	801a      	strh	r2, [r3, #0]

  return ret;
 8001b9e:	697b      	ldr	r3, [r7, #20]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff fe0e 	bl	80017da <lsm6dsl_read_reg>
 8001bbe:	60f8      	str	r0, [r7, #12]

  return ret;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001bd6:	f107 0208 	add.w	r2, r7, #8
 8001bda:	2301      	movs	r3, #1
 8001bdc:	2112      	movs	r1, #18
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fdfb 	bl	80017da <lsm6dsl_read_reg>
 8001be4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10f      	bne.n	8001c0c <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	7a3b      	ldrb	r3, [r7, #8]
 8001bf6:	f362 0300 	bfi	r3, r2, #0, #1
 8001bfa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001bfc:	f107 0208 	add.w	r2, r7, #8
 8001c00:	2301      	movs	r3, #1
 8001c02:	2112      	movs	r1, #18
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff fe00 	bl	800180a <lsm6dsl_write_reg>
 8001c0a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c20:	f107 0208 	add.w	r2, r7, #8
 8001c24:	2301      	movs	r3, #1
 8001c26:	2112      	movs	r1, #18
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff fdd6 	bl	80017da <lsm6dsl_read_reg>
 8001c2e:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001c30:	7a3b      	ldrb	r3, [r7, #8]
 8001c32:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	701a      	strb	r2, [r3, #0]

  return ret;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001c54:	f107 0208 	add.w	r2, r7, #8
 8001c58:	2301      	movs	r3, #1
 8001c5a:	2117      	movs	r1, #23
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fdbc 	bl	80017da <lsm6dsl_read_reg>
 8001c62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d120      	bne.n	8001cac <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	7a3b      	ldrb	r3, [r7, #8]
 8001c76:	f362 03c3 	bfi	r3, r2, #3, #1
 8001c7a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	7a3b      	ldrb	r3, [r7, #8]
 8001c86:	f362 1346 	bfi	r3, r2, #5, #2
 8001c8a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8001c8c:	7a3b      	ldrb	r3, [r7, #8]
 8001c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c92:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8001c94:	7a3b      	ldrb	r3, [r7, #8]
 8001c96:	f36f 0382 	bfc	r3, #2, #1
 8001c9a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001c9c:	f107 0208 	add.w	r2, r7, #8
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	2117      	movs	r1, #23
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff fdb0 	bl	800180a <lsm6dsl_write_reg>
 8001caa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001cc2:	f107 0208 	add.w	r2, r7, #8
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	2116      	movs	r1, #22
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fd85 	bl	80017da <lsm6dsl_read_reg>
 8001cd0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d157      	bne.n	8001d88 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	091b      	lsrs	r3, r3, #4
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	7a3b      	ldrb	r3, [r7, #8]
 8001ce4:	f362 1305 	bfi	r3, r2, #4, #2
 8001ce8:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	09db      	lsrs	r3, r3, #7
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	7a3b      	ldrb	r3, [r7, #8]
 8001cf8:	f362 1386 	bfi	r3, r2, #6, #1
 8001cfc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001cfe:	f107 0208 	add.w	r2, r7, #8
 8001d02:	2301      	movs	r3, #1
 8001d04:	2116      	movs	r1, #22
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fd7f 	bl	800180a <lsm6dsl_write_reg>
 8001d0c:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d139      	bne.n	8001d88 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001d14:	f107 020c 	add.w	r2, r7, #12
 8001d18:	2301      	movs	r3, #1
 8001d1a:	2115      	movs	r1, #21
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff fd5c 	bl	80017da <lsm6dsl_read_reg>
 8001d22:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d12e      	bne.n	8001d88 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	7b3b      	ldrb	r3, [r7, #12]
 8001d34:	f362 0301 	bfi	r3, r2, #0, #2
 8001d38:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001d3a:	f107 020c 	add.w	r2, r7, #12
 8001d3e:	2301      	movs	r3, #1
 8001d40:	2115      	movs	r1, #21
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff fd61 	bl	800180a <lsm6dsl_write_reg>
 8001d48:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d11b      	bne.n	8001d88 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8001d50:	f107 0210 	add.w	r2, r7, #16
 8001d54:	2301      	movs	r3, #1
 8001d56:	2113      	movs	r1, #19
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff fd3e 	bl	80017da <lsm6dsl_read_reg>
 8001d5e:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d110      	bne.n	8001d88 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	08db      	lsrs	r3, r3, #3
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	7c3b      	ldrb	r3, [r7, #16]
 8001d72:	f362 0341 	bfi	r3, r2, #1, #1
 8001d76:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8001d78:	f107 0210 	add.w	r2, r7, #16
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	2113      	movs	r1, #19
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fd42 	bl	800180a <lsm6dsl_write_reg>
 8001d86:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001d88:	697b      	ldr	r3, [r7, #20]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d9a:	f001 f973 	bl	8003084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d9e:	f000 f90d 	bl	8001fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da2:	f000 fb3d 	bl	8002420 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001da6:	f000 f973 	bl	8002090 <MX_ADC1_Init>
  MX_SPI4_Init();
 8001daa:	f000 fa03 	bl	80021b4 <MX_SPI4_Init>
  MX_TIM2_Init();
 8001dae:	f000 fa6d 	bl	800228c <MX_TIM2_Init>
  MX_SPI5_Init();
 8001db2:	f000 fa35 	bl	8002220 <MX_SPI5_Init>
  MX_FATFS_Init();
 8001db6:	f007 fef9 	bl	8009bac <MX_FATFS_Init>
  MX_I2C3_Init();
 8001dba:	f000 f9bb 	bl	8002134 <MX_I2C3_Init>
  MX_USART6_UART_Init();
 8001dbe:	f000 fb05 	bl	80023cc <MX_USART6_UART_Init>
  MX_UART8_Init();
 8001dc2:	f000 fad9 	bl	8002378 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2102      	movs	r1, #2
 8001dca:	485d      	ldr	r0, [pc, #372]	; (8001f40 <main+0x1ac>)
 8001dcc:	f001 fed8 	bl	8003b80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	485a      	ldr	r0, [pc, #360]	; (8001f40 <main+0x1ac>)
 8001dd6:	f001 fed3 	bl	8003b80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2108      	movs	r1, #8
 8001dde:	4858      	ldr	r0, [pc, #352]	; (8001f40 <main+0x1ac>)
 8001de0:	f001 fece 	bl	8003b80 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dea:	4856      	ldr	r0, [pc, #344]	; (8001f44 <main+0x1b0>)
 8001dec:	f001 fec8 	bl	8003b80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df6:	4853      	ldr	r0, [pc, #332]	; (8001f44 <main+0x1b0>)
 8001df8:	f001 fec2 	bl	8003b80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e02:	4850      	ldr	r0, [pc, #320]	; (8001f44 <main+0x1b0>)
 8001e04:	f001 febc 	bl	8003b80 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	484d      	ldr	r0, [pc, #308]	; (8001f44 <main+0x1b0>)
 8001e0e:	f001 feb7 	bl	8003b80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e18:	484b      	ldr	r0, [pc, #300]	; (8001f48 <main+0x1b4>)
 8001e1a:	f001 feb1 	bl	8003b80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e24:	4848      	ldr	r0, [pc, #288]	; (8001f48 <main+0x1b4>)
 8001e26:	f001 feab 	bl	8003b80 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	4847      	ldr	r0, [pc, #284]	; (8001f4c <main+0x1b8>)
 8001e30:	f001 fea6 	bl	8003b80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	4844      	ldr	r0, [pc, #272]	; (8001f4c <main+0x1b8>)
 8001e3a:	f001 fea1 	bl	8003b80 <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e44:	4841      	ldr	r0, [pc, #260]	; (8001f4c <main+0x1b8>)
 8001e46:	f001 fe9b 	bl	8003b80 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e50:	483b      	ldr	r0, [pc, #236]	; (8001f40 <main+0x1ac>)
 8001e52:	f001 fe95 	bl	8003b80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e5c:	483c      	ldr	r0, [pc, #240]	; (8001f50 <main+0x1bc>)
 8001e5e:	f001 fe8f 	bl	8003b80 <HAL_GPIO_WritePin>

  dev_ctx_lsm = lsm6dsl_init();
 8001e62:	4c3c      	ldr	r4, [pc, #240]	; (8001f54 <main+0x1c0>)
 8001e64:	463b      	mov	r3, r7
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fb76 	bl	8001558 <lsm6dsl_init>
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  //dev_ctx_lps = lps22hh_init();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001e76:	f00c fa4b 	bl	800e310 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of mutex */
  mutexHandle = osSemaphoreNew(1, 1, &mutex_attributes);
 8001e7a:	4a37      	ldr	r2, [pc, #220]	; (8001f58 <main+0x1c4>)
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f00c fb3d 	bl	800e4fe <osSemaphoreNew>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4a35      	ldr	r2, [pc, #212]	; (8001f5c <main+0x1c8>)
 8001e88:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of printSensors */
  printSensorsHandle = osThreadNew(printSensorsFunc, NULL, &printSensors_attributes);
 8001e8a:	4a35      	ldr	r2, [pc, #212]	; (8001f60 <main+0x1cc>)
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4835      	ldr	r0, [pc, #212]	; (8001f64 <main+0x1d0>)
 8001e90:	f00c fa88 	bl	800e3a4 <osThreadNew>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4a34      	ldr	r2, [pc, #208]	; (8001f68 <main+0x1d4>)
 8001e98:	6013      	str	r3, [r2, #0]

  /* creation of pollSensors */
  pollSensorsHandle = osThreadNew(pollSensorsFunc, NULL, &pollSensors_attributes);
 8001e9a:	4a34      	ldr	r2, [pc, #208]	; (8001f6c <main+0x1d8>)
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4834      	ldr	r0, [pc, #208]	; (8001f70 <main+0x1dc>)
 8001ea0:	f00c fa80 	bl	800e3a4 <osThreadNew>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4a33      	ldr	r2, [pc, #204]	; (8001f74 <main+0x1e0>)
 8001ea8:	6013      	str	r3, [r2, #0]

  /* creation of saveData */
  saveDataHandle = osThreadNew(saveDataFunc, NULL, &saveData_attributes);
 8001eaa:	4a33      	ldr	r2, [pc, #204]	; (8001f78 <main+0x1e4>)
 8001eac:	2100      	movs	r1, #0
 8001eae:	4833      	ldr	r0, [pc, #204]	; (8001f7c <main+0x1e8>)
 8001eb0:	f00c fa78 	bl	800e3a4 <osThreadNew>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4a32      	ldr	r2, [pc, #200]	; (8001f80 <main+0x1ec>)
 8001eb8:	6013      	str	r3, [r2, #0]

  /* creation of ejection */
  ejectionHandle = osThreadNew(ejectionFunc, NULL, &ejection_attributes);
 8001eba:	4a32      	ldr	r2, [pc, #200]	; (8001f84 <main+0x1f0>)
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4832      	ldr	r0, [pc, #200]	; (8001f88 <main+0x1f4>)
 8001ec0:	f00c fa70 	bl	800e3a4 <osThreadNew>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4a31      	ldr	r2, [pc, #196]	; (8001f8c <main+0x1f8>)
 8001ec8:	6013      	str	r3, [r2, #0]

  /* creation of transmitData */
  transmitDataHandle = osThreadNew(transmitDataFunc, NULL, &transmitData_attributes);
 8001eca:	4a31      	ldr	r2, [pc, #196]	; (8001f90 <main+0x1fc>)
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4831      	ldr	r0, [pc, #196]	; (8001f94 <main+0x200>)
 8001ed0:	f00c fa68 	bl	800e3a4 <osThreadNew>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4a30      	ldr	r2, [pc, #192]	; (8001f98 <main+0x204>)
 8001ed8:	6013      	str	r3, [r2, #0]
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */

  HAL_Delay(1000);
 8001eda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ede:	f001 f913 	bl	8003108 <HAL_Delay>

  //mount
    fres = f_mount(&FatFs, "", 1); //1=mount now
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	492d      	ldr	r1, [pc, #180]	; (8001f9c <main+0x208>)
 8001ee6:	482e      	ldr	r0, [pc, #184]	; (8001fa0 <main+0x20c>)
 8001ee8:	f00b fd50 	bl	800d98c <f_mount>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b2c      	ldr	r3, [pc, #176]	; (8001fa4 <main+0x210>)
 8001ef2:	701a      	strb	r2, [r3, #0]
  	if (fres != FR_OK) {
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <main+0x210>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <main+0x176>
  	  myprintf("f_mount error (%i)\r\n", fres);
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <main+0x210>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4619      	mov	r1, r3
 8001f02:	4829      	ldr	r0, [pc, #164]	; (8001fa8 <main+0x214>)
 8001f04:	f000 fccc 	bl	80028a0 <myprintf>
  	  while(1);
 8001f08:	e7fe      	b.n	8001f08 <main+0x174>
  	}
  	//open file
    fres = f_open(&fil, "new_file.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001f0a:	221a      	movs	r2, #26
 8001f0c:	4927      	ldr	r1, [pc, #156]	; (8001fac <main+0x218>)
 8001f0e:	4828      	ldr	r0, [pc, #160]	; (8001fb0 <main+0x21c>)
 8001f10:	f00b fd82 	bl	800da18 <f_open>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <main+0x210>)
 8001f1a:	701a      	strb	r2, [r3, #0]
  	if(fres == FR_OK) {
 8001f1c:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <main+0x210>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d103      	bne.n	8001f2c <main+0x198>
  		myprintf("I was able to open 'new_file.txt' for writing\r\n");
 8001f24:	4823      	ldr	r0, [pc, #140]	; (8001fb4 <main+0x220>)
 8001f26:	f000 fcbb 	bl	80028a0 <myprintf>
 8001f2a:	e005      	b.n	8001f38 <main+0x1a4>
  	} else {
  		myprintf("f_open error (%i)\r\n", fres);
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <main+0x210>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	4821      	ldr	r0, [pc, #132]	; (8001fb8 <main+0x224>)
 8001f34:	f000 fcb4 	bl	80028a0 <myprintf>
  	}

  osKernelStart();
 8001f38:	f00c fa0e 	bl	800e358 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <main+0x1a8>
 8001f3e:	bf00      	nop
 8001f40:	40020800 	.word	0x40020800
 8001f44:	40021800 	.word	0x40021800
 8001f48:	40021400 	.word	0x40021400
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40020000 	.word	0x40020000
 8001f54:	2000a350 	.word	0x2000a350
 8001f58:	080174e4 	.word	0x080174e4
 8001f5c:	2000a264 	.word	0x2000a264
 8001f60:	08017430 	.word	0x08017430
 8001f64:	08002685 	.word	0x08002685
 8001f68:	20009f74 	.word	0x20009f74
 8001f6c:	08017454 	.word	0x08017454
 8001f70:	08002705 	.word	0x08002705
 8001f74:	2000a1b0 	.word	0x2000a1b0
 8001f78:	08017478 	.word	0x08017478
 8001f7c:	080027a1 	.word	0x080027a1
 8001f80:	20009ec0 	.word	0x20009ec0
 8001f84:	0801749c 	.word	0x0801749c
 8001f88:	0800284d 	.word	0x0800284d
 8001f8c:	20009f78 	.word	0x20009f78
 8001f90:	080174c0 	.word	0x080174c0
 8001f94:	0800285f 	.word	0x0800285f
 8001f98:	2000a260 	.word	0x2000a260
 8001f9c:	080172cc 	.word	0x080172cc
 8001fa0:	20009f7c 	.word	0x20009f7c
 8001fa4:	2000a368 	.word	0x2000a368
 8001fa8:	080172d0 	.word	0x080172d0
 8001fac:	080172e8 	.word	0x080172e8
 8001fb0:	2000a36c 	.word	0x2000a36c
 8001fb4:	080172f8 	.word	0x080172f8
 8001fb8:	08017328 	.word	0x08017328

08001fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b094      	sub	sp, #80	; 0x50
 8001fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fc2:	f107 0320 	add.w	r3, r7, #32
 8001fc6:	2230      	movs	r2, #48	; 0x30
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f010 f8e9 	bl	80121a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	4b28      	ldr	r3, [pc, #160]	; (8002088 <SystemClock_Config+0xcc>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	4a27      	ldr	r2, [pc, #156]	; (8002088 <SystemClock_Config+0xcc>)
 8001fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fee:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <SystemClock_Config+0xcc>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	4b22      	ldr	r3, [pc, #136]	; (800208c <SystemClock_Config+0xd0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002008:	4a20      	ldr	r2, [pc, #128]	; (800208c <SystemClock_Config+0xd0>)
 800200a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b1e      	ldr	r3, [pc, #120]	; (800208c <SystemClock_Config+0xd0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800201c:	2301      	movs	r3, #1
 800201e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002026:	2302      	movs	r3, #2
 8002028:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800202a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800202e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002030:	2308      	movs	r3, #8
 8002032:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002034:	2348      	movs	r3, #72	; 0x48
 8002036:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002038:	2302      	movs	r3, #2
 800203a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800203c:	2303      	movs	r3, #3
 800203e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002040:	f107 0320 	add.w	r3, r7, #32
 8002044:	4618      	mov	r0, r3
 8002046:	f003 ff97 	bl	8005f78 <HAL_RCC_OscConfig>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002050:	f000 fc20 	bl	8002894 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002054:	230f      	movs	r3, #15
 8002056:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002058:	2302      	movs	r3, #2
 800205a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002064:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	2102      	movs	r1, #2
 8002070:	4618      	mov	r0, r3
 8002072:	f004 f9f9 	bl	8006468 <HAL_RCC_ClockConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800207c:	f000 fc0a 	bl	8002894 <Error_Handler>
  }
}
 8002080:	bf00      	nop
 8002082:	3750      	adds	r7, #80	; 0x50
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023800 	.word	0x40023800
 800208c:	40007000 	.word	0x40007000

08002090 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002096:	463b      	mov	r3, r7
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <MX_ADC1_Init+0x98>)
 80020a4:	4a21      	ldr	r2, [pc, #132]	; (800212c <MX_ADC1_Init+0x9c>)
 80020a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <MX_ADC1_Init+0x98>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020ae:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <MX_ADC1_Init+0x98>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80020b4:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <MX_ADC1_Init+0x98>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <MX_ADC1_Init+0x98>)
 80020bc:	2200      	movs	r2, #0
 80020be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <MX_ADC1_Init+0x98>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <MX_ADC1_Init+0x98>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <MX_ADC1_Init+0x98>)
 80020d0:	4a17      	ldr	r2, [pc, #92]	; (8002130 <MX_ADC1_Init+0xa0>)
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <MX_ADC1_Init+0x98>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <MX_ADC1_Init+0x98>)
 80020dc:	2201      	movs	r2, #1
 80020de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_ADC1_Init+0x98>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_ADC1_Init+0x98>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020ee:	480e      	ldr	r0, [pc, #56]	; (8002128 <MX_ADC1_Init+0x98>)
 80020f0:	f001 f82e 	bl	8003150 <HAL_ADC_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80020fa:	f000 fbcb 	bl	8002894 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80020fe:	2306      	movs	r3, #6
 8002100:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002102:	2301      	movs	r3, #1
 8002104:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002106:	2307      	movs	r3, #7
 8002108:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800210a:	463b      	mov	r3, r7
 800210c:	4619      	mov	r1, r3
 800210e:	4806      	ldr	r0, [pc, #24]	; (8002128 <MX_ADC1_Init+0x98>)
 8002110:	f001 f862 	bl	80031d8 <HAL_ADC_ConfigChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800211a:	f000 fbbb 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000a218 	.word	0x2000a218
 800212c:	40012000 	.word	0x40012000
 8002130:	0f000001 	.word	0x0f000001

08002134 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <MX_I2C3_Init+0x74>)
 800213a:	4a1c      	ldr	r2, [pc, #112]	; (80021ac <MX_I2C3_Init+0x78>)
 800213c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002140:	4a1b      	ldr	r2, [pc, #108]	; (80021b0 <MX_I2C3_Init+0x7c>)
 8002142:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800214a:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <MX_I2C3_Init+0x74>)
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002150:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002156:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <MX_I2C3_Init+0x74>)
 800215a:	2200      	movs	r2, #0
 800215c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002164:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <MX_I2C3_Init+0x74>)
 800216c:	2200      	movs	r2, #0
 800216e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002170:	480d      	ldr	r0, [pc, #52]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002172:	f001 fd43 	bl	8003bfc <HAL_I2C_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800217c:	f000 fb8a 	bl	8002894 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002180:	2100      	movs	r1, #0
 8002182:	4809      	ldr	r0, [pc, #36]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002184:	f002 fcf9 	bl	8004b7a <HAL_I2CEx_ConfigAnalogFilter>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800218e:	f000 fb81 	bl	8002894 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002192:	2100      	movs	r1, #0
 8002194:	4804      	ldr	r0, [pc, #16]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002196:	f002 fd2c 	bl	8004bf2 <HAL_I2CEx_ConfigDigitalFilter>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80021a0:	f000 fb78 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20009ec4 	.word	0x20009ec4
 80021ac:	40005c00 	.word	0x40005c00
 80021b0:	000186a0 	.word	0x000186a0

080021b4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80021b8:	4b17      	ldr	r3, [pc, #92]	; (8002218 <MX_SPI4_Init+0x64>)
 80021ba:	4a18      	ldr	r2, [pc, #96]	; (800221c <MX_SPI4_Init+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80021be:	4b16      	ldr	r3, [pc, #88]	; (8002218 <MX_SPI4_Init+0x64>)
 80021c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021c4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80021c6:	4b14      	ldr	r3, [pc, #80]	; (8002218 <MX_SPI4_Init+0x64>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <MX_SPI4_Init+0x64>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <MX_SPI4_Init+0x64>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <MX_SPI4_Init+0x64>)
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <MX_SPI4_Init+0x64>)
 80021e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021e4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <MX_SPI4_Init+0x64>)
 80021e8:	2230      	movs	r2, #48	; 0x30
 80021ea:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <MX_SPI4_Init+0x64>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <MX_SPI4_Init+0x64>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f8:	4b07      	ldr	r3, [pc, #28]	; (8002218 <MX_SPI4_Init+0x64>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <MX_SPI4_Init+0x64>)
 8002200:	220a      	movs	r2, #10
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002204:	4804      	ldr	r0, [pc, #16]	; (8002218 <MX_SPI4_Init+0x64>)
 8002206:	f004 fb5b 	bl	80068c0 <HAL_SPI_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002210:	f000 fb40 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20009da8 	.word	0x20009da8
 800221c:	40013400 	.word	0x40013400

08002220 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002224:	4b17      	ldr	r3, [pc, #92]	; (8002284 <MX_SPI5_Init+0x64>)
 8002226:	4a18      	ldr	r2, [pc, #96]	; (8002288 <MX_SPI5_Init+0x68>)
 8002228:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <MX_SPI5_Init+0x64>)
 800222c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002230:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <MX_SPI5_Init+0x64>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <MX_SPI5_Init+0x64>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <MX_SPI5_Init+0x64>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <MX_SPI5_Init+0x64>)
 8002246:	2200      	movs	r2, #0
 8002248:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <MX_SPI5_Init+0x64>)
 800224c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002250:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <MX_SPI5_Init+0x64>)
 8002254:	2238      	movs	r2, #56	; 0x38
 8002256:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <MX_SPI5_Init+0x64>)
 800225a:	2200      	movs	r2, #0
 800225c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <MX_SPI5_Init+0x64>)
 8002260:	2200      	movs	r2, #0
 8002262:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <MX_SPI5_Init+0x64>)
 8002266:	2200      	movs	r2, #0
 8002268:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <MX_SPI5_Init+0x64>)
 800226c:	220a      	movs	r2, #10
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002270:	4804      	ldr	r0, [pc, #16]	; (8002284 <MX_SPI5_Init+0x64>)
 8002272:	f004 fb25 	bl	80068c0 <HAL_SPI_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800227c:	f000 fb0a 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20009f1c 	.word	0x20009f1c
 8002288:	40015000 	.word	0x40015000

0800228c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08e      	sub	sp, #56	; 0x38
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a0:	f107 0320 	add.w	r3, r7, #32
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
 80022b8:	615a      	str	r2, [r3, #20]
 80022ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <MX_TIM2_Init+0xe8>)
 80022be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50;
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <MX_TIM2_Init+0xe8>)
 80022c6:	2232      	movs	r2, #50	; 0x32
 80022c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <MX_TIM2_Init+0xe8>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80022d0:	4b28      	ldr	r3, [pc, #160]	; (8002374 <MX_TIM2_Init+0xe8>)
 80022d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d8:	4b26      	ldr	r3, [pc, #152]	; (8002374 <MX_TIM2_Init+0xe8>)
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022de:	4b25      	ldr	r3, [pc, #148]	; (8002374 <MX_TIM2_Init+0xe8>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022e4:	4823      	ldr	r0, [pc, #140]	; (8002374 <MX_TIM2_Init+0xe8>)
 80022e6:	f004 fde1 	bl	8006eac <HAL_TIM_Base_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80022f0:	f000 fad0 	bl	8002894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022fe:	4619      	mov	r1, r3
 8002300:	481c      	ldr	r0, [pc, #112]	; (8002374 <MX_TIM2_Init+0xe8>)
 8002302:	f005 f8b7 	bl	8007474 <HAL_TIM_ConfigClockSource>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800230c:	f000 fac2 	bl	8002894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002310:	4818      	ldr	r0, [pc, #96]	; (8002374 <MX_TIM2_Init+0xe8>)
 8002312:	f004 fe8b 	bl	800702c <HAL_TIM_PWM_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800231c:	f000 faba 	bl	8002894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002320:	2320      	movs	r3, #32
 8002322:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002328:	f107 0320 	add.w	r3, r7, #32
 800232c:	4619      	mov	r1, r3
 800232e:	4811      	ldr	r0, [pc, #68]	; (8002374 <MX_TIM2_Init+0xe8>)
 8002330:	f005 fc7a 	bl	8007c28 <HAL_TIMEx_MasterConfigSynchronization>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800233a:	f000 faab 	bl	8002894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800233e:	2360      	movs	r3, #96	; 0x60
 8002340:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8002342:	2364      	movs	r3, #100	; 0x64
 8002344:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	2208      	movs	r2, #8
 8002352:	4619      	mov	r1, r3
 8002354:	4807      	ldr	r0, [pc, #28]	; (8002374 <MX_TIM2_Init+0xe8>)
 8002356:	f004 ffcb 	bl	80072f0 <HAL_TIM_PWM_ConfigChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002360:	f000 fa98 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <MX_TIM2_Init+0xe8>)
 8002366:	f000 fc3f 	bl	8002be8 <HAL_TIM_MspPostInit>

}
 800236a:	bf00      	nop
 800236c:	3738      	adds	r7, #56	; 0x38
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	2000a308 	.word	0x2000a308

08002378 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <MX_UART8_Init+0x4c>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <MX_UART8_Init+0x50>)
 8002380:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MX_UART8_Init+0x4c>)
 8002384:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002388:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <MX_UART8_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MX_UART8_Init+0x4c>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <MX_UART8_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <MX_UART8_Init+0x4c>)
 800239e:	220c      	movs	r2, #12
 80023a0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <MX_UART8_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <MX_UART8_Init+0x4c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_UART8_Init+0x4c>)
 80023b0:	f005 fcca 	bl	8007d48 <HAL_UART_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80023ba:	f000 fa6b 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000a274 	.word	0x2000a274
 80023c8:	40007c00 	.word	0x40007c00

080023cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <MX_USART6_UART_Init+0x50>)
 80023d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023f2:	220c      	movs	r2, #12
 80023f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 8002404:	f005 fca0 	bl	8007d48 <HAL_UART_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800240e:	f000 fa41 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000a2b8 	.word	0x2000a2b8
 800241c:	40011400 	.word	0x40011400

08002420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08c      	sub	sp, #48	; 0x30
 8002424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
 8002434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	4b8b      	ldr	r3, [pc, #556]	; (8002668 <MX_GPIO_Init+0x248>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a8a      	ldr	r2, [pc, #552]	; (8002668 <MX_GPIO_Init+0x248>)
 8002440:	f043 0310 	orr.w	r3, r3, #16
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b88      	ldr	r3, [pc, #544]	; (8002668 <MX_GPIO_Init+0x248>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	4b84      	ldr	r3, [pc, #528]	; (8002668 <MX_GPIO_Init+0x248>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a83      	ldr	r2, [pc, #524]	; (8002668 <MX_GPIO_Init+0x248>)
 800245c:	f043 0304 	orr.w	r3, r3, #4
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b81      	ldr	r3, [pc, #516]	; (8002668 <MX_GPIO_Init+0x248>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	4b7d      	ldr	r3, [pc, #500]	; (8002668 <MX_GPIO_Init+0x248>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a7c      	ldr	r2, [pc, #496]	; (8002668 <MX_GPIO_Init+0x248>)
 8002478:	f043 0320 	orr.w	r3, r3, #32
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b7a      	ldr	r3, [pc, #488]	; (8002668 <MX_GPIO_Init+0x248>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	4b76      	ldr	r3, [pc, #472]	; (8002668 <MX_GPIO_Init+0x248>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a75      	ldr	r2, [pc, #468]	; (8002668 <MX_GPIO_Init+0x248>)
 8002494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b73      	ldr	r3, [pc, #460]	; (8002668 <MX_GPIO_Init+0x248>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	4b6f      	ldr	r3, [pc, #444]	; (8002668 <MX_GPIO_Init+0x248>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a6e      	ldr	r2, [pc, #440]	; (8002668 <MX_GPIO_Init+0x248>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b6c      	ldr	r3, [pc, #432]	; (8002668 <MX_GPIO_Init+0x248>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	4b68      	ldr	r3, [pc, #416]	; (8002668 <MX_GPIO_Init+0x248>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a67      	ldr	r2, [pc, #412]	; (8002668 <MX_GPIO_Init+0x248>)
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b65      	ldr	r3, [pc, #404]	; (8002668 <MX_GPIO_Init+0x248>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	4b61      	ldr	r3, [pc, #388]	; (8002668 <MX_GPIO_Init+0x248>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a60      	ldr	r2, [pc, #384]	; (8002668 <MX_GPIO_Init+0x248>)
 80024e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b5e      	ldr	r3, [pc, #376]	; (8002668 <MX_GPIO_Init+0x248>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 80024fa:	2200      	movs	r2, #0
 80024fc:	f640 6184 	movw	r1, #3716	; 0xe84
 8002500:	485a      	ldr	r0, [pc, #360]	; (800266c <MX_GPIO_Init+0x24c>)
 8002502:	f001 fb3d 	bl	8003b80 <HAL_GPIO_WritePin>
                          |TH_CS_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 8002506:	2200      	movs	r2, #0
 8002508:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 800250c:	4858      	ldr	r0, [pc, #352]	; (8002670 <MX_GPIO_Init+0x250>)
 800250e:	f001 fb37 	bl	8003b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|VR_CTRL_PWR_Pin, GPIO_PIN_RESET);
 8002512:	2200      	movs	r2, #0
 8002514:	f240 410e 	movw	r1, #1038	; 0x40e
 8002518:	4856      	ldr	r0, [pc, #344]	; (8002674 <MX_GPIO_Init+0x254>)
 800251a:	f001 fb31 	bl	8003b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin, GPIO_PIN_RESET);
 800251e:	2200      	movs	r2, #0
 8002520:	f645 0102 	movw	r1, #22530	; 0x5802
 8002524:	4854      	ldr	r0, [pc, #336]	; (8002678 <MX_GPIO_Init+0x258>)
 8002526:	f001 fb2b 	bl	8003b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, GPIO_PIN_RESET);
 800252a:	2200      	movs	r2, #0
 800252c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002530:	4852      	ldr	r0, [pc, #328]	; (800267c <MX_GPIO_Init+0x25c>)
 8002532:	f001 fb25 	bl	8003b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PM_12V_EN_Pin Vent_Valve_EN_Pin Payload_EN_Pin TH_CS_1_Pin
                           TH_CS_2_Pin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 8002536:	f640 6384 	movw	r3, #3716	; 0xe84
 800253a:	61fb      	str	r3, [r7, #28]
                          |TH_CS_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253c:	2301      	movs	r3, #1
 800253e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	4619      	mov	r1, r3
 800254e:	4847      	ldr	r0, [pc, #284]	; (800266c <MX_GPIO_Init+0x24c>)
 8002550:	f001 f952 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255a:	2301      	movs	r3, #1
 800255c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800255e:	2301      	movs	r3, #1
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2300      	movs	r3, #0
 8002564:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002566:	f107 031c 	add.w	r3, r7, #28
 800256a:	4619      	mov	r1, r3
 800256c:	4840      	ldr	r0, [pc, #256]	; (8002670 <MX_GPIO_Init+0x250>)
 800256e:	f001 f943 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002572:	2301      	movs	r3, #1
 8002574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002576:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800257a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	4619      	mov	r1, r3
 8002586:	483b      	ldr	r0, [pc, #236]	; (8002674 <MX_GPIO_Init+0x254>)
 8002588:	f001 f936 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin VR_CTRL_PWR_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|VR_CTRL_PWR_Pin;
 800258c:	f240 430e 	movw	r3, #1038	; 0x40e
 8002590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002592:	2301      	movs	r3, #1
 8002594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800259e:	f107 031c 	add.w	r3, r7, #28
 80025a2:	4619      	mov	r1, r3
 80025a4:	4833      	ldr	r0, [pc, #204]	; (8002674 <MX_GPIO_Init+0x254>)
 80025a6:	f001 f927 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Vent_Valve_FB_Pin */
  GPIO_InitStruct.Pin = Vent_Valve_FB_Pin;
 80025aa:	2302      	movs	r3, #2
 80025ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Vent_Valve_FB_GPIO_Port, &GPIO_InitStruct);
 80025b6:	f107 031c 	add.w	r3, r7, #28
 80025ba:	4619      	mov	r1, r3
 80025bc:	4830      	ldr	r0, [pc, #192]	; (8002680 <MX_GPIO_Init+0x260>)
 80025be:	f001 f91b 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Prop_Cont_2_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 80025c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	4826      	ldr	r0, [pc, #152]	; (8002670 <MX_GPIO_Init+0x250>)
 80025d8:	f001 f90e 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Gate_2_Pin Prop_Gate_1_Pin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 80025dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80025e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e2:	2301      	movs	r3, #1
 80025e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2300      	movs	r3, #0
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025ee:	f107 031c 	add.w	r3, r7, #28
 80025f2:	4619      	mov	r1, r3
 80025f4:	481e      	ldr	r0, [pc, #120]	; (8002670 <MX_GPIO_Init+0x250>)
 80025f6:	f001 f8ff 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Cont_1_Pin Rcov_Cont_Main_Pin Rcov_Cont_Drogue_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|Rcov_Cont_Main_Pin|Rcov_Cont_Drogue_Pin;
 80025fa:	f242 4301 	movw	r3, #9217	; 0x2401
 80025fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002600:	2300      	movs	r3, #0
 8002602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	4619      	mov	r1, r3
 800260e:	481a      	ldr	r0, [pc, #104]	; (8002678 <MX_GPIO_Init+0x258>)
 8002610:	f001 f8f2 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Pyro_Arming_Pin Rcov_Gate_Main_Pin Rcov_Gate_Drogue_Pin Rcov_Arm_Pin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin;
 8002614:	f645 0302 	movw	r3, #22530	; 0x5802
 8002618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261a:	2301      	movs	r3, #1
 800261c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002626:	f107 031c 	add.w	r3, r7, #28
 800262a:	4619      	mov	r1, r3
 800262c:	4812      	ldr	r0, [pc, #72]	; (8002678 <MX_GPIO_Init+0x258>)
 800262e:	f001 f8e3 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VR_CTRL_REC_Pin */
  GPIO_InitStruct.Pin = VR_CTRL_REC_Pin;
 8002632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002638:	2301      	movs	r3, #1
 800263a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002640:	2300      	movs	r3, #0
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(VR_CTRL_REC_GPIO_Port, &GPIO_InitStruct);
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	4619      	mov	r1, r3
 800264a:	480c      	ldr	r0, [pc, #48]	; (800267c <MX_GPIO_Init+0x25c>)
 800264c:	f001 f8d4 	bl	80037f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002650:	2200      	movs	r2, #0
 8002652:	2105      	movs	r1, #5
 8002654:	2006      	movs	r0, #6
 8002656:	f001 f8a5 	bl	80037a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800265a:	2006      	movs	r0, #6
 800265c:	f001 f8be 	bl	80037dc <HAL_NVIC_EnableIRQ>

}
 8002660:	bf00      	nop
 8002662:	3730      	adds	r7, #48	; 0x30
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40023800 	.word	0x40023800
 800266c:	40021000 	.word	0x40021000
 8002670:	40021400 	.word	0x40021400
 8002674:	40020800 	.word	0x40020800
 8002678:	40021800 	.word	0x40021800
 800267c:	40020000 	.word	0x40020000
 8002680:	40020400 	.word	0x40020400

08002684 <printSensorsFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_printSensorsFunc */
void printSensorsFunc(void *argument)
{
 8002684:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af04      	add	r7, sp, #16
 800268c:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800268e:	f00e ff55 	bl	801153c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  for(;;)
  {
	//myprintf("ACCEL: %f, %f, %f\r\n", acceleration[0], acceleration[1], acceleration[2]);
	//myprintf("GPS: %lf, %lf, %f\r\n", latitude, longitude, time);
	xSemaphoreTake(mutexHandle,500);
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <printSensorsFunc+0x6c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800269a:	4618      	mov	r0, r3
 800269c:	f00c fcc2 	bl	800f024 <xQueueSemaphoreTake>
	GPS_Poll(&latitude, &longitude, &time);
 80026a0:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <printSensorsFunc+0x70>)
 80026a2:	4915      	ldr	r1, [pc, #84]	; (80026f8 <printSensorsFunc+0x74>)
 80026a4:	4815      	ldr	r0, [pc, #84]	; (80026fc <printSensorsFunc+0x78>)
 80026a6:	f7fe fcb1 	bl	800100c <GPS_Poll>
	myprintf("GPS 1: %lf, %lf, %f\r\n", latitude, longitude, time);
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <printSensorsFunc+0x78>)
 80026ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <printSensorsFunc+0x74>)
 80026b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026b6:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <printSensorsFunc+0x70>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd ff54 	bl	8000568 <__aeabi_f2d>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026c8:	e9cd 4500 	strd	r4, r5, [sp]
 80026cc:	4642      	mov	r2, r8
 80026ce:	464b      	mov	r3, r9
 80026d0:	480b      	ldr	r0, [pc, #44]	; (8002700 <printSensorsFunc+0x7c>)
 80026d2:	f000 f8e5 	bl	80028a0 <myprintf>
	xSemaphoreGive(mutexHandle);
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <printSensorsFunc+0x6c>)
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	2300      	movs	r3, #0
 80026dc:	2200      	movs	r2, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	f00c fa26 	bl	800eb30 <xQueueGenericSend>
    osDelay(1000);
 80026e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026e8:	f00b feee 	bl	800e4c8 <osDelay>
	xSemaphoreTake(mutexHandle,500);
 80026ec:	e7d1      	b.n	8002692 <printSensorsFunc+0xe>
 80026ee:	bf00      	nop
 80026f0:	2000a264 	.word	0x2000a264
 80026f4:	2000a270 	.word	0x2000a270
 80026f8:	2000a268 	.word	0x2000a268
 80026fc:	2000a300 	.word	0x2000a300
 8002700:	0801733c 	.word	0x0801733c

08002704 <pollSensorsFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pollSensorsFunc */
void pollSensorsFunc(void *argument)
{
 8002704:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af04      	add	r7, sp, #16
 800270c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pollSensorsFunc */
  /* Infinite loop */
  for(;;)
  {
	get_acceleration(dev_ctx_lsm, acceleration);
 800270e:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <pollSensorsFunc+0x7c>)
 8002710:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <pollSensorsFunc+0x80>)
 8002712:	ca07      	ldmia	r2, {r0, r1, r2}
 8002714:	f7fe ff90 	bl	8001638 <get_acceleration>
	get_angvelocity(dev_ctx_lsm, angular_rate);
 8002718:	4a19      	ldr	r2, [pc, #100]	; (8002780 <pollSensorsFunc+0x7c>)
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <pollSensorsFunc+0x84>)
 800271c:	ca07      	ldmia	r2, {r0, r1, r2}
 800271e:	f7fe ffd1 	bl	80016c4 <get_angvelocity>
	xSemaphoreTake(mutexHandle,500);
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <pollSensorsFunc+0x88>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800272a:	4618      	mov	r0, r3
 800272c:	f00c fc7a 	bl	800f024 <xQueueSemaphoreTake>
	GPS_Poll(&latitude, &longitude, &time);
 8002730:	4a17      	ldr	r2, [pc, #92]	; (8002790 <pollSensorsFunc+0x8c>)
 8002732:	4918      	ldr	r1, [pc, #96]	; (8002794 <pollSensorsFunc+0x90>)
 8002734:	4818      	ldr	r0, [pc, #96]	; (8002798 <pollSensorsFunc+0x94>)
 8002736:	f7fe fc69 	bl	800100c <GPS_Poll>
	myprintf("GPS 2: %lf, %lf, %f\r\n", latitude, longitude, time);
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <pollSensorsFunc+0x94>)
 800273c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <pollSensorsFunc+0x90>)
 8002742:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <pollSensorsFunc+0x8c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd ff0c 	bl	8000568 <__aeabi_f2d>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002758:	e9cd 4500 	strd	r4, r5, [sp]
 800275c:	4642      	mov	r2, r8
 800275e:	464b      	mov	r3, r9
 8002760:	480e      	ldr	r0, [pc, #56]	; (800279c <pollSensorsFunc+0x98>)
 8002762:	f000 f89d 	bl	80028a0 <myprintf>
	xSemaphoreGive(mutexHandle);
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <pollSensorsFunc+0x88>)
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	2300      	movs	r3, #0
 800276c:	2200      	movs	r2, #0
 800276e:	2100      	movs	r1, #0
 8002770:	f00c f9de 	bl	800eb30 <xQueueGenericSend>
    osDelay(500);
 8002774:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002778:	f00b fea6 	bl	800e4c8 <osDelay>
	get_acceleration(dev_ctx_lsm, acceleration);
 800277c:	e7c7      	b.n	800270e <pollSensorsFunc+0xa>
 800277e:	bf00      	nop
 8002780:	2000a350 	.word	0x2000a350
 8002784:	200003a0 	.word	0x200003a0
 8002788:	200003ac 	.word	0x200003ac
 800278c:	2000a264 	.word	0x2000a264
 8002790:	2000a270 	.word	0x2000a270
 8002794:	2000a268 	.word	0x2000a268
 8002798:	2000a300 	.word	0x2000a300
 800279c:	08017354 	.word	0x08017354

080027a0 <saveDataFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_saveDataFunc */
void saveDataFunc(void *argument)
{
 80027a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027a4:	b088      	sub	sp, #32
 80027a6:	af04      	add	r7, sp, #16
 80027a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN saveDataFunc */
  /* Infinite loop */

  for(;;)
  {
	buttonState = HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin);
 80027aa:	2101      	movs	r1, #1
 80027ac:	481d      	ldr	r0, [pc, #116]	; (8002824 <saveDataFunc+0x84>)
 80027ae:	f001 f9cf 	bl	8003b50 <HAL_GPIO_ReadPin>
 80027b2:	4603      	mov	r3, r0
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <saveDataFunc+0x88>)
 80027b8:	701a      	strb	r2, [r3, #0]
	if(buttonState == GPIO_PIN_RESET){
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <saveDataFunc+0x88>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d108      	bne.n	80027d4 <saveDataFunc+0x34>
		//close file
		f_close(&fil);
 80027c2:	481a      	ldr	r0, [pc, #104]	; (800282c <saveDataFunc+0x8c>)
 80027c4:	f00b fcd9 	bl	800e17a <f_close>
		//demount
		f_mount(NULL, "", 0);
 80027c8:	2200      	movs	r2, #0
 80027ca:	4919      	ldr	r1, [pc, #100]	; (8002830 <saveDataFunc+0x90>)
 80027cc:	2000      	movs	r0, #0
 80027ce:	f00b f8dd 	bl	800d98c <f_mount>
		while(1);
 80027d2:	e7fe      	b.n	80027d2 <saveDataFunc+0x32>
	}
	//write data
	sprintf((char*)writeBuf, "GPS: %lf, %lf, %f\r\n", latitude, longitude, time);
 80027d4:	4b17      	ldr	r3, [pc, #92]	; (8002834 <saveDataFunc+0x94>)
 80027d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80027da:	4b17      	ldr	r3, [pc, #92]	; (8002838 <saveDataFunc+0x98>)
 80027dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027e0:	4b16      	ldr	r3, [pc, #88]	; (800283c <saveDataFunc+0x9c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fd febf 	bl	8000568 <__aeabi_f2d>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027f2:	e9cd 4500 	strd	r4, r5, [sp]
 80027f6:	4642      	mov	r2, r8
 80027f8:	464b      	mov	r3, r9
 80027fa:	4911      	ldr	r1, [pc, #68]	; (8002840 <saveDataFunc+0xa0>)
 80027fc:	4811      	ldr	r0, [pc, #68]	; (8002844 <saveDataFunc+0xa4>)
 80027fe:	f010 fc2d 	bl	801305c <siprintf>
	UINT bytesWrote;
	fres = f_write(&fil, writeBuf, 43, &bytesWrote);
 8002802:	f107 030c 	add.w	r3, r7, #12
 8002806:	222b      	movs	r2, #43	; 0x2b
 8002808:	490e      	ldr	r1, [pc, #56]	; (8002844 <saveDataFunc+0xa4>)
 800280a:	4808      	ldr	r0, [pc, #32]	; (800282c <saveDataFunc+0x8c>)
 800280c:	f00b fac2 	bl	800dd94 <f_write>
 8002810:	4603      	mov	r3, r0
 8002812:	461a      	mov	r2, r3
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <saveDataFunc+0xa8>)
 8002816:	701a      	strb	r2, [r3, #0]
    osDelay(1000);
 8002818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800281c:	f00b fe54 	bl	800e4c8 <osDelay>
  {
 8002820:	e7c3      	b.n	80027aa <saveDataFunc+0xa>
 8002822:	bf00      	nop
 8002824:	40020800 	.word	0x40020800
 8002828:	20009f18 	.word	0x20009f18
 800282c:	2000a36c 	.word	0x2000a36c
 8002830:	080172cc 	.word	0x080172cc
 8002834:	2000a300 	.word	0x2000a300
 8002838:	2000a268 	.word	0x2000a268
 800283c:	2000a270 	.word	0x2000a270
 8002840:	0801736c 	.word	0x0801736c
 8002844:	2000a1b4 	.word	0x2000a1b4
 8002848:	2000a368 	.word	0x2000a368

0800284c <ejectionFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ejectionFunc */
void ejectionFunc(void *argument)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ejectionFunc */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8002854:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002858:	f00b fe36 	bl	800e4c8 <osDelay>
 800285c:	e7fa      	b.n	8002854 <ejectionFunc+0x8>

0800285e <transmitDataFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmitDataFunc */
void transmitDataFunc(void *argument)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmitDataFunc */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8002866:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800286a:	f00b fe2d 	bl	800e4c8 <osDelay>
 800286e:	e7fa      	b.n	8002866 <transmitDataFunc+0x8>

08002870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002882:	f000 fc21 	bl	80030c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40001000 	.word	0x40001000

08002894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002898:	b672      	cpsid	i
}
 800289a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800289c:	e7fe      	b.n	800289c <Error_Handler+0x8>
	...

080028a0 <myprintf>:
extern FIL fil;
uint8_t msg_buffer[1000];


// private functions
void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 80028a0:	b40f      	push	{r0, r1, r2, r3}
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028b6:	480a      	ldr	r0, [pc, #40]	; (80028e0 <myprintf+0x40>)
 80028b8:	f011 fb54 	bl	8013f64 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&huart8, (uint8_t*)buffer, strlen(buffer), -1);
 80028bc:	4808      	ldr	r0, [pc, #32]	; (80028e0 <myprintf+0x40>)
 80028be:	f7fd fc97 	bl	80001f0 <strlen>
 80028c2:	4603      	mov	r3, r0
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ca:	4905      	ldr	r1, [pc, #20]	; (80028e0 <myprintf+0x40>)
 80028cc:	4805      	ldr	r0, [pc, #20]	; (80028e4 <myprintf+0x44>)
 80028ce:	f005 fa88 	bl	8007de2 <HAL_UART_Transmit>

}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028dc:	b004      	add	sp, #16
 80028de:	4770      	bx	lr
 80028e0:	200003b8 	.word	0x200003b8
 80028e4:	2000a274 	.word	0x2000a274

080028e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_MspInit+0x54>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	4a11      	ldr	r2, [pc, #68]	; (800293c <HAL_MspInit+0x54>)
 80028f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028fc:	6453      	str	r3, [r2, #68]	; 0x44
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <HAL_MspInit+0x54>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_MspInit+0x54>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <HAL_MspInit+0x54>)
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002918:	6413      	str	r3, [r2, #64]	; 0x40
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_MspInit+0x54>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	210f      	movs	r1, #15
 800292a:	f06f 0001 	mvn.w	r0, #1
 800292e:	f000 ff39 	bl	80037a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800

08002940 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	; 0x28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a17      	ldr	r2, [pc, #92]	; (80029bc <HAL_ADC_MspInit+0x7c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d127      	bne.n	80029b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <HAL_ADC_MspInit+0x80>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	4a15      	ldr	r2, [pc, #84]	; (80029c0 <HAL_ADC_MspInit+0x80>)
 800296c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002970:	6453      	str	r3, [r2, #68]	; 0x44
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <HAL_ADC_MspInit+0x80>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <HAL_ADC_MspInit+0x80>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <HAL_ADC_MspInit+0x80>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_ADC_MspInit+0x80>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800299a:	2340      	movs	r3, #64	; 0x40
 800299c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800299e:	2303      	movs	r3, #3
 80029a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4619      	mov	r1, r3
 80029ac:	4805      	ldr	r0, [pc, #20]	; (80029c4 <HAL_ADC_MspInit+0x84>)
 80029ae:	f000 ff23 	bl	80037f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029b2:	bf00      	nop
 80029b4:	3728      	adds	r7, #40	; 0x28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40012000 	.word	0x40012000
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020000 	.word	0x40020000

080029c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	; 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a29      	ldr	r2, [pc, #164]	; (8002a8c <HAL_I2C_MspInit+0xc4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d14b      	bne.n	8002a82 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <HAL_I2C_MspInit+0xc8>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <HAL_I2C_MspInit+0xc8>)
 80029f4:	f043 0304 	orr.w	r3, r3, #4
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <HAL_I2C_MspInit+0xc8>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <HAL_I2C_MspInit+0xc8>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a20      	ldr	r2, [pc, #128]	; (8002a90 <HAL_I2C_MspInit+0xc8>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <HAL_I2C_MspInit+0xc8>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a28:	2312      	movs	r3, #18
 8002a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a34:	2304      	movs	r3, #4
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4815      	ldr	r0, [pc, #84]	; (8002a94 <HAL_I2C_MspInit+0xcc>)
 8002a40:	f000 feda 	bl	80037f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a4a:	2312      	movs	r3, #18
 8002a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a52:	2303      	movs	r3, #3
 8002a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a56:	2304      	movs	r3, #4
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	4619      	mov	r1, r3
 8002a60:	480d      	ldr	r0, [pc, #52]	; (8002a98 <HAL_I2C_MspInit+0xd0>)
 8002a62:	f000 fec9 	bl	80037f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_I2C_MspInit+0xc8>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <HAL_I2C_MspInit+0xc8>)
 8002a70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_I2C_MspInit+0xc8>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a82:	bf00      	nop
 8002a84:	3728      	adds	r7, #40	; 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40005c00 	.word	0x40005c00
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40020800 	.word	0x40020800
 8002a98:	40020000 	.word	0x40020000

08002a9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08c      	sub	sp, #48	; 0x30
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 031c 	add.w	r3, r7, #28
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a33      	ldr	r2, [pc, #204]	; (8002b88 <HAL_SPI_MspInit+0xec>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d12d      	bne.n	8002b1a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	4b32      	ldr	r3, [pc, #200]	; (8002b8c <HAL_SPI_MspInit+0xf0>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	4a31      	ldr	r2, [pc, #196]	; (8002b8c <HAL_SPI_MspInit+0xf0>)
 8002ac8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002acc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ace:	4b2f      	ldr	r3, [pc, #188]	; (8002b8c <HAL_SPI_MspInit+0xf0>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <HAL_SPI_MspInit+0xf0>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a2a      	ldr	r2, [pc, #168]	; (8002b8c <HAL_SPI_MspInit+0xf0>)
 8002ae4:	f043 0310 	orr.w	r3, r3, #16
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <HAL_SPI_MspInit+0xf0>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002af6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002b08:	2305      	movs	r3, #5
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b0c:	f107 031c 	add.w	r3, r7, #28
 8002b10:	4619      	mov	r1, r3
 8002b12:	481f      	ldr	r0, [pc, #124]	; (8002b90 <HAL_SPI_MspInit+0xf4>)
 8002b14:	f000 fe70 	bl	80037f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002b18:	e031      	b.n	8002b7e <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI5)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <HAL_SPI_MspInit+0xf8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d12c      	bne.n	8002b7e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <HAL_SPI_MspInit+0xf0>)
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <HAL_SPI_MspInit+0xf0>)
 8002b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b32:	6453      	str	r3, [r2, #68]	; 0x44
 8002b34:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <HAL_SPI_MspInit+0xf0>)
 8002b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <HAL_SPI_MspInit+0xf0>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	4a10      	ldr	r2, [pc, #64]	; (8002b8c <HAL_SPI_MspInit+0xf0>)
 8002b4a:	f043 0320 	orr.w	r3, r3, #32
 8002b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <HAL_SPI_MspInit+0xf0>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002b5c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	2302      	movs	r3, #2
 8002b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b66:	2301      	movs	r3, #1
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002b6e:	2305      	movs	r3, #5
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b72:	f107 031c 	add.w	r3, r7, #28
 8002b76:	4619      	mov	r1, r3
 8002b78:	4807      	ldr	r0, [pc, #28]	; (8002b98 <HAL_SPI_MspInit+0xfc>)
 8002b7a:	f000 fe3d 	bl	80037f8 <HAL_GPIO_Init>
}
 8002b7e:	bf00      	nop
 8002b80:	3730      	adds	r7, #48	; 0x30
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40013400 	.word	0x40013400
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40015000 	.word	0x40015000
 8002b98:	40021400 	.word	0x40021400

08002b9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d115      	bne.n	8002bda <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <HAL_TIM_Base_MspInit+0x48>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	4a0b      	ldr	r2, [pc, #44]	; (8002be4 <HAL_TIM_Base_MspInit+0x48>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_TIM_Base_MspInit+0x48>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2105      	movs	r1, #5
 8002bce:	201c      	movs	r0, #28
 8002bd0:	f000 fde8 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bd4:	201c      	movs	r0, #28
 8002bd6:	f000 fe01 	bl	80037dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800

08002be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 030c 	add.w	r3, r7, #12
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c08:	d11d      	bne.n	8002c46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <HAL_TIM_MspPostInit+0x68>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	4a0f      	ldr	r2, [pc, #60]	; (8002c50 <HAL_TIM_MspPostInit+0x68>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <HAL_TIM_MspPostInit+0x68>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c26:	2304      	movs	r3, #4
 8002c28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3a:	f107 030c 	add.w	r3, r7, #12
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4804      	ldr	r0, [pc, #16]	; (8002c54 <HAL_TIM_MspPostInit+0x6c>)
 8002c42:	f000 fdd9 	bl	80037f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c46:	bf00      	nop
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40020000 	.word	0x40020000

08002c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08c      	sub	sp, #48	; 0x30
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 031c 	add.w	r3, r7, #28
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a32      	ldr	r2, [pc, #200]	; (8002d40 <HAL_UART_MspInit+0xe8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d12c      	bne.n	8002cd4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4a30      	ldr	r2, [pc, #192]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002c84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c88:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8a:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c92:	61bb      	str	r3, [r7, #24]
 8002c94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	4b2a      	ldr	r3, [pc, #168]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4a29      	ldr	r2, [pc, #164]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002ca0:	f043 0310 	orr.w	r3, r3, #16
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cc6:	f107 031c 	add.w	r3, r7, #28
 8002cca:	4619      	mov	r1, r3
 8002ccc:	481e      	ldr	r0, [pc, #120]	; (8002d48 <HAL_UART_MspInit+0xf0>)
 8002cce:	f000 fd93 	bl	80037f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cd2:	e030      	b.n	8002d36 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1c      	ldr	r2, [pc, #112]	; (8002d4c <HAL_UART_MspInit+0xf4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d12b      	bne.n	8002d36 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002ce8:	f043 0320 	orr.w	r3, r3, #32
 8002cec:	6453      	str	r3, [r2, #68]	; 0x44
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a10      	ldr	r2, [pc, #64]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <HAL_UART_MspInit+0xec>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d16:	23c0      	movs	r3, #192	; 0xc0
 8002d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d22:	2303      	movs	r3, #3
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d26:	2308      	movs	r3, #8
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2a:	f107 031c 	add.w	r3, r7, #28
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4807      	ldr	r0, [pc, #28]	; (8002d50 <HAL_UART_MspInit+0xf8>)
 8002d32:	f000 fd61 	bl	80037f8 <HAL_GPIO_Init>
}
 8002d36:	bf00      	nop
 8002d38:	3730      	adds	r7, #48	; 0x30
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40007c00 	.word	0x40007c00
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40011400 	.word	0x40011400
 8002d50:	40020800 	.word	0x40020800

08002d54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08c      	sub	sp, #48	; 0x30
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002d64:	2200      	movs	r2, #0
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	2036      	movs	r0, #54	; 0x36
 8002d6a:	f000 fd1b 	bl	80037a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d6e:	2036      	movs	r0, #54	; 0x36
 8002d70:	f000 fd34 	bl	80037dc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <HAL_InitTick+0xa4>)
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	4a1e      	ldr	r2, [pc, #120]	; (8002df8 <HAL_InitTick+0xa4>)
 8002d7e:	f043 0310 	orr.w	r3, r3, #16
 8002d82:	6413      	str	r3, [r2, #64]	; 0x40
 8002d84:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <HAL_InitTick+0xa4>)
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d90:	f107 0210 	add.w	r2, r7, #16
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 fd5e 	bl	800685c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002da0:	f003 fd34 	bl	800680c <HAL_RCC_GetPCLK1Freq>
 8002da4:	4603      	mov	r3, r0
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <HAL_InitTick+0xa8>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	0c9b      	lsrs	r3, r3, #18
 8002db4:	3b01      	subs	r3, #1
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_InitTick+0xac>)
 8002dba:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <HAL_InitTick+0xb0>)
 8002dbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <HAL_InitTick+0xac>)
 8002dc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002dc4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002dc6:	4a0e      	ldr	r2, [pc, #56]	; (8002e00 <HAL_InitTick+0xac>)
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <HAL_InitTick+0xac>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_InitTick+0xac>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002dd8:	4809      	ldr	r0, [pc, #36]	; (8002e00 <HAL_InitTick+0xac>)
 8002dda:	f004 f867 	bl	8006eac <HAL_TIM_Base_Init>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d104      	bne.n	8002dee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002de4:	4806      	ldr	r0, [pc, #24]	; (8002e00 <HAL_InitTick+0xac>)
 8002de6:	f004 f8b1 	bl	8006f4c <HAL_TIM_Base_Start_IT>
 8002dea:	4603      	mov	r3, r0
 8002dec:	e000      	b.n	8002df0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3730      	adds	r7, #48	; 0x30
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	431bde83 	.word	0x431bde83
 8002e00:	2000a59c 	.word	0x2000a59c
 8002e04:	40001000 	.word	0x40001000

08002e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e0c:	e7fe      	b.n	8002e0c <NMI_Handler+0x4>

08002e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e12:	e7fe      	b.n	8002e12 <HardFault_Handler+0x4>

08002e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e18:	e7fe      	b.n	8002e18 <MemManage_Handler+0x4>

08002e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e1e:	e7fe      	b.n	8002e1e <BusFault_Handler+0x4>

08002e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <UsageFault_Handler+0x4>

08002e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f000 febb 	bl	8003bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e48:	4802      	ldr	r0, [pc, #8]	; (8002e54 <TIM2_IRQHandler+0x10>)
 8002e4a:	f004 f948 	bl	80070de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	2000a308 	.word	0x2000a308

08002e58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e5c:	4802      	ldr	r0, [pc, #8]	; (8002e68 <TIM6_DAC_IRQHandler+0x10>)
 8002e5e:	f004 f93e 	bl	80070de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	2000a59c 	.word	0x2000a59c

08002e6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002e70:	4802      	ldr	r0, [pc, #8]	; (8002e7c <OTG_FS_IRQHandler+0x10>)
 8002e72:	f002 f84d 	bl	8004f10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	2000bf68 	.word	0x2000bf68

08002e80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
	return 1;
 8002e84:	2301      	movs	r3, #1
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <_kill>:

int _kill(int pid, int sig)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e9a:	f00f f851 	bl	8011f40 <__errno>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2216      	movs	r2, #22
 8002ea2:	601a      	str	r2, [r3, #0]
	return -1;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <_exit>:

void _exit (int status)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002eb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff ffe7 	bl	8002e90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ec2:	e7fe      	b.n	8002ec2 <_exit+0x12>

08002ec4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	e00a      	b.n	8002eec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ed6:	f3af 8000 	nop.w
 8002eda:	4601      	mov	r1, r0
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	60ba      	str	r2, [r7, #8]
 8002ee2:	b2ca      	uxtb	r2, r1
 8002ee4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	dbf0      	blt.n	8002ed6 <_read+0x12>
	}

return len;
 8002ef4:	687b      	ldr	r3, [r7, #4]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	e009      	b.n	8002f24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	60ba      	str	r2, [r7, #8]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	3301      	adds	r3, #1
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	dbf1      	blt.n	8002f10 <_write+0x12>
	}
	return len;
 8002f2c:	687b      	ldr	r3, [r7, #4]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <_close>:

int _close(int file)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
	return -1;
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f5e:	605a      	str	r2, [r3, #4]
	return 0;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <_isatty>:

int _isatty(int file)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
	return 1;
 8002f76:	2301      	movs	r3, #1
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
	return 0;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fa8:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <_sbrk+0x5c>)
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <_sbrk+0x60>)
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fb4:	4b13      	ldr	r3, [pc, #76]	; (8003004 <_sbrk+0x64>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <_sbrk+0x64>)
 8002fbe:	4a12      	ldr	r2, [pc, #72]	; (8003008 <_sbrk+0x68>)
 8002fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <_sbrk+0x64>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d207      	bcs.n	8002fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fd0:	f00e ffb6 	bl	8011f40 <__errno>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	220c      	movs	r2, #12
 8002fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fde:	e009      	b.n	8002ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <_sbrk+0x64>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <_sbrk+0x64>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	4a05      	ldr	r2, [pc, #20]	; (8003004 <_sbrk+0x64>)
 8002ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20030000 	.word	0x20030000
 8003000:	00000400 	.word	0x00000400
 8003004:	200004b8 	.word	0x200004b8
 8003008:	2000c380 	.word	0x2000c380

0800300c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <SystemInit+0x20>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	4a05      	ldr	r2, [pc, #20]	; (800302c <SystemInit+0x20>)
 8003018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800301c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003068 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003034:	480d      	ldr	r0, [pc, #52]	; (800306c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003036:	490e      	ldr	r1, [pc, #56]	; (8003070 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003038:	4a0e      	ldr	r2, [pc, #56]	; (8003074 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800303a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800303c:	e002      	b.n	8003044 <LoopCopyDataInit>

0800303e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800303e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003042:	3304      	adds	r3, #4

08003044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003048:	d3f9      	bcc.n	800303e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800304a:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800304c:	4c0b      	ldr	r4, [pc, #44]	; (800307c <LoopFillZerobss+0x26>)
  movs r3, #0
 800304e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003050:	e001      	b.n	8003056 <LoopFillZerobss>

08003052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003054:	3204      	adds	r2, #4

08003056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003058:	d3fb      	bcc.n	8003052 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800305a:	f7ff ffd7 	bl	800300c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800305e:	f00f f86b 	bl	8012138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003062:	f7fe fe97 	bl	8001d94 <main>
  bx  lr    
 8003066:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003068:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800306c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003070:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8003074:	08017a6c 	.word	0x08017a6c
  ldr r2, =_sbss
 8003078:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 800307c:	2000c380 	.word	0x2000c380

08003080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003080:	e7fe      	b.n	8003080 <ADC_IRQHandler>
	...

08003084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <HAL_Init+0x40>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0d      	ldr	r2, [pc, #52]	; (80030c4 <HAL_Init+0x40>)
 800308e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_Init+0x40>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <HAL_Init+0x40>)
 800309a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800309e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a0:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <HAL_Init+0x40>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <HAL_Init+0x40>)
 80030a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ac:	2003      	movs	r0, #3
 80030ae:	f000 fb6e 	bl	800378e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030b2:	200f      	movs	r0, #15
 80030b4:	f7ff fe4e 	bl	8002d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b8:	f7ff fc16 	bl	80028e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40023c00 	.word	0x40023c00

080030c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <HAL_IncTick+0x20>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <HAL_IncTick+0x24>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4413      	add	r3, r2
 80030d8:	4a04      	ldr	r2, [pc, #16]	; (80030ec <HAL_IncTick+0x24>)
 80030da:	6013      	str	r3, [r2, #0]
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000008 	.word	0x20000008
 80030ec:	2000a5e4 	.word	0x2000a5e4

080030f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return uwTick;
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <HAL_GetTick+0x14>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	2000a5e4 	.word	0x2000a5e4

08003108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003110:	f7ff ffee 	bl	80030f0 <HAL_GetTick>
 8003114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003120:	d005      	beq.n	800312e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_Delay+0x44>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800312e:	bf00      	nop
 8003130:	f7ff ffde 	bl	80030f0 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	429a      	cmp	r2, r3
 800313e:	d8f7      	bhi.n	8003130 <HAL_Delay+0x28>
  {
  }
}
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000008 	.word	0x20000008

08003150 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e033      	b.n	80031ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fbe6 	bl	8002940 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	d118      	bne.n	80031c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003196:	f023 0302 	bic.w	r3, r3, #2
 800319a:	f043 0202 	orr.w	r2, r3, #2
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f94a 	bl	800343c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f023 0303 	bic.w	r3, r3, #3
 80031b6:	f043 0201 	orr.w	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
 80031be:	e001      	b.n	80031c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x1c>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e113      	b.n	800341c <HAL_ADC_ConfigChannel+0x244>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b09      	cmp	r3, #9
 8003202:	d925      	bls.n	8003250 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68d9      	ldr	r1, [r3, #12]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	3b1e      	subs	r3, #30
 800321a:	2207      	movs	r2, #7
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43da      	mvns	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	400a      	ands	r2, r1
 8003228:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68d9      	ldr	r1, [r3, #12]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	4618      	mov	r0, r3
 800323c:	4603      	mov	r3, r0
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4403      	add	r3, r0
 8003242:	3b1e      	subs	r3, #30
 8003244:	409a      	lsls	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	e022      	b.n	8003296 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6919      	ldr	r1, [r3, #16]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	4613      	mov	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4413      	add	r3, r2
 8003264:	2207      	movs	r2, #7
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43da      	mvns	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	400a      	ands	r2, r1
 8003272:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6919      	ldr	r1, [r3, #16]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	4618      	mov	r0, r3
 8003286:	4603      	mov	r3, r0
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4403      	add	r3, r0
 800328c:	409a      	lsls	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b06      	cmp	r3, #6
 800329c:	d824      	bhi.n	80032e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	3b05      	subs	r3, #5
 80032b0:	221f      	movs	r2, #31
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43da      	mvns	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	400a      	ands	r2, r1
 80032be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	3b05      	subs	r3, #5
 80032da:	fa00 f203 	lsl.w	r2, r0, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	635a      	str	r2, [r3, #52]	; 0x34
 80032e6:	e04c      	b.n	8003382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b0c      	cmp	r3, #12
 80032ee:	d824      	bhi.n	800333a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	3b23      	subs	r3, #35	; 0x23
 8003302:	221f      	movs	r2, #31
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43da      	mvns	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	400a      	ands	r2, r1
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	b29b      	uxth	r3, r3
 800331e:	4618      	mov	r0, r3
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	3b23      	subs	r3, #35	; 0x23
 800332c:	fa00 f203 	lsl.w	r2, r0, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
 8003338:	e023      	b.n	8003382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	3b41      	subs	r3, #65	; 0x41
 800334c:	221f      	movs	r2, #31
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43da      	mvns	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	400a      	ands	r2, r1
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	4618      	mov	r0, r3
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	3b41      	subs	r3, #65	; 0x41
 8003376:	fa00 f203 	lsl.w	r2, r0, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003382:	4b29      	ldr	r3, [pc, #164]	; (8003428 <HAL_ADC_ConfigChannel+0x250>)
 8003384:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a28      	ldr	r2, [pc, #160]	; (800342c <HAL_ADC_ConfigChannel+0x254>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d10f      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1d8>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b12      	cmp	r3, #18
 8003396:	d10b      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1d      	ldr	r2, [pc, #116]	; (800342c <HAL_ADC_ConfigChannel+0x254>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d12b      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x23a>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <HAL_ADC_ConfigChannel+0x258>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <HAL_ADC_ConfigChannel+0x1f4>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b11      	cmp	r3, #17
 80033ca:	d122      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a11      	ldr	r2, [pc, #68]	; (8003430 <HAL_ADC_ConfigChannel+0x258>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d111      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <HAL_ADC_ConfigChannel+0x25c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a11      	ldr	r2, [pc, #68]	; (8003438 <HAL_ADC_ConfigChannel+0x260>)
 80033f4:	fba2 2303 	umull	r2, r3, r2, r3
 80033f8:	0c9a      	lsrs	r2, r3, #18
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003404:	e002      	b.n	800340c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	3b01      	subs	r3, #1
 800340a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f9      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40012300 	.word	0x40012300
 800342c:	40012000 	.word	0x40012000
 8003430:	10000012 	.word	0x10000012
 8003434:	20000000 	.word	0x20000000
 8003438:	431bde83 	.word	0x431bde83

0800343c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003444:	4b79      	ldr	r3, [pc, #484]	; (800362c <ADC_Init+0x1f0>)
 8003446:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	431a      	orrs	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003470:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	021a      	lsls	r2, r3, #8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	4a58      	ldr	r2, [pc, #352]	; (8003630 <ADC_Init+0x1f4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d022      	beq.n	800351a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6899      	ldr	r1, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003504:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6899      	ldr	r1, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	e00f      	b.n	800353a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003538:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0202 	bic.w	r2, r2, #2
 8003548:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6899      	ldr	r1, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	7e1b      	ldrb	r3, [r3, #24]
 8003554:	005a      	lsls	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d01b      	beq.n	80035a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003576:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003586:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	3b01      	subs	r3, #1
 8003594:	035a      	lsls	r2, r3, #13
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	e007      	b.n	80035b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	051a      	lsls	r2, r3, #20
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6899      	ldr	r1, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035f2:	025a      	lsls	r2, r3, #9
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6899      	ldr	r1, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	029a      	lsls	r2, r3, #10
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	40012300 	.word	0x40012300
 8003630:	0f000001 	.word	0x0f000001

08003634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <__NVIC_SetPriorityGrouping+0x44>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003650:	4013      	ands	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800365c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003666:	4a04      	ldr	r2, [pc, #16]	; (8003678 <__NVIC_SetPriorityGrouping+0x44>)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	60d3      	str	r3, [r2, #12]
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003680:	4b04      	ldr	r3, [pc, #16]	; (8003694 <__NVIC_GetPriorityGrouping+0x18>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	0a1b      	lsrs	r3, r3, #8
 8003686:	f003 0307 	and.w	r3, r3, #7
}
 800368a:	4618      	mov	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	db0b      	blt.n	80036c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	f003 021f 	and.w	r2, r3, #31
 80036b0:	4907      	ldr	r1, [pc, #28]	; (80036d0 <__NVIC_EnableIRQ+0x38>)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	2001      	movs	r0, #1
 80036ba:	fa00 f202 	lsl.w	r2, r0, r2
 80036be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000e100 	.word	0xe000e100

080036d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	6039      	str	r1, [r7, #0]
 80036de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	db0a      	blt.n	80036fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	490c      	ldr	r1, [pc, #48]	; (8003720 <__NVIC_SetPriority+0x4c>)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	0112      	lsls	r2, r2, #4
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	440b      	add	r3, r1
 80036f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036fc:	e00a      	b.n	8003714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4908      	ldr	r1, [pc, #32]	; (8003724 <__NVIC_SetPriority+0x50>)
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	3b04      	subs	r3, #4
 800370c:	0112      	lsls	r2, r2, #4
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	440b      	add	r3, r1
 8003712:	761a      	strb	r2, [r3, #24]
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000e100 	.word	0xe000e100
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003728:	b480      	push	{r7}
 800372a:	b089      	sub	sp, #36	; 0x24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f1c3 0307 	rsb	r3, r3, #7
 8003742:	2b04      	cmp	r3, #4
 8003744:	bf28      	it	cs
 8003746:	2304      	movcs	r3, #4
 8003748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3304      	adds	r3, #4
 800374e:	2b06      	cmp	r3, #6
 8003750:	d902      	bls.n	8003758 <NVIC_EncodePriority+0x30>
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3b03      	subs	r3, #3
 8003756:	e000      	b.n	800375a <NVIC_EncodePriority+0x32>
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800375c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43da      	mvns	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	401a      	ands	r2, r3
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003770:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	fa01 f303 	lsl.w	r3, r1, r3
 800377a:	43d9      	mvns	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003780:	4313      	orrs	r3, r2
         );
}
 8003782:	4618      	mov	r0, r3
 8003784:	3724      	adds	r7, #36	; 0x24
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff ff4c 	bl	8003634 <__NVIC_SetPriorityGrouping>
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037b6:	f7ff ff61 	bl	800367c <__NVIC_GetPriorityGrouping>
 80037ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	6978      	ldr	r0, [r7, #20]
 80037c2:	f7ff ffb1 	bl	8003728 <NVIC_EncodePriority>
 80037c6:	4602      	mov	r2, r0
 80037c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff ff80 	bl	80036d4 <__NVIC_SetPriority>
}
 80037d4:	bf00      	nop
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff ff54 	bl	8003698 <__NVIC_EnableIRQ>
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b089      	sub	sp, #36	; 0x24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	e177      	b.n	8003b04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003814:	2201      	movs	r2, #1
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4013      	ands	r3, r2
 8003826:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	429a      	cmp	r2, r3
 800382e:	f040 8166 	bne.w	8003afe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b01      	cmp	r3, #1
 800383c:	d005      	beq.n	800384a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003846:	2b02      	cmp	r3, #2
 8003848:	d130      	bne.n	80038ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	2203      	movs	r2, #3
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43db      	mvns	r3, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4013      	ands	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003880:	2201      	movs	r2, #1
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 0201 	and.w	r2, r3, #1
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d017      	beq.n	80038e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	2203      	movs	r2, #3
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d123      	bne.n	800393c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	08da      	lsrs	r2, r3, #3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3208      	adds	r2, #8
 80038fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003900:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	220f      	movs	r2, #15
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4313      	orrs	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	08da      	lsrs	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3208      	adds	r2, #8
 8003936:	69b9      	ldr	r1, [r7, #24]
 8003938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	2203      	movs	r2, #3
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 0203 	and.w	r2, r3, #3
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4313      	orrs	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80c0 	beq.w	8003afe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	4b66      	ldr	r3, [pc, #408]	; (8003b1c <HAL_GPIO_Init+0x324>)
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	4a65      	ldr	r2, [pc, #404]	; (8003b1c <HAL_GPIO_Init+0x324>)
 8003988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800398c:	6453      	str	r3, [r2, #68]	; 0x44
 800398e:	4b63      	ldr	r3, [pc, #396]	; (8003b1c <HAL_GPIO_Init+0x324>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800399a:	4a61      	ldr	r2, [pc, #388]	; (8003b20 <HAL_GPIO_Init+0x328>)
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	089b      	lsrs	r3, r3, #2
 80039a0:	3302      	adds	r3, #2
 80039a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	220f      	movs	r2, #15
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43db      	mvns	r3, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4013      	ands	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a58      	ldr	r2, [pc, #352]	; (8003b24 <HAL_GPIO_Init+0x32c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d037      	beq.n	8003a36 <HAL_GPIO_Init+0x23e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a57      	ldr	r2, [pc, #348]	; (8003b28 <HAL_GPIO_Init+0x330>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d031      	beq.n	8003a32 <HAL_GPIO_Init+0x23a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a56      	ldr	r2, [pc, #344]	; (8003b2c <HAL_GPIO_Init+0x334>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d02b      	beq.n	8003a2e <HAL_GPIO_Init+0x236>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a55      	ldr	r2, [pc, #340]	; (8003b30 <HAL_GPIO_Init+0x338>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d025      	beq.n	8003a2a <HAL_GPIO_Init+0x232>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a54      	ldr	r2, [pc, #336]	; (8003b34 <HAL_GPIO_Init+0x33c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d01f      	beq.n	8003a26 <HAL_GPIO_Init+0x22e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a53      	ldr	r2, [pc, #332]	; (8003b38 <HAL_GPIO_Init+0x340>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d019      	beq.n	8003a22 <HAL_GPIO_Init+0x22a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a52      	ldr	r2, [pc, #328]	; (8003b3c <HAL_GPIO_Init+0x344>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_GPIO_Init+0x226>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a51      	ldr	r2, [pc, #324]	; (8003b40 <HAL_GPIO_Init+0x348>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00d      	beq.n	8003a1a <HAL_GPIO_Init+0x222>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a50      	ldr	r2, [pc, #320]	; (8003b44 <HAL_GPIO_Init+0x34c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <HAL_GPIO_Init+0x21e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4f      	ldr	r2, [pc, #316]	; (8003b48 <HAL_GPIO_Init+0x350>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_GPIO_Init+0x21a>
 8003a0e:	2309      	movs	r3, #9
 8003a10:	e012      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a12:	230a      	movs	r3, #10
 8003a14:	e010      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a16:	2308      	movs	r3, #8
 8003a18:	e00e      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a1a:	2307      	movs	r3, #7
 8003a1c:	e00c      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a1e:	2306      	movs	r3, #6
 8003a20:	e00a      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a22:	2305      	movs	r3, #5
 8003a24:	e008      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a26:	2304      	movs	r3, #4
 8003a28:	e006      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e004      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e002      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a36:	2300      	movs	r3, #0
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	f002 0203 	and.w	r2, r2, #3
 8003a3e:	0092      	lsls	r2, r2, #2
 8003a40:	4093      	lsls	r3, r2
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a48:	4935      	ldr	r1, [pc, #212]	; (8003b20 <HAL_GPIO_Init+0x328>)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	089b      	lsrs	r3, r3, #2
 8003a4e:	3302      	adds	r3, #2
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a56:	4b3d      	ldr	r3, [pc, #244]	; (8003b4c <HAL_GPIO_Init+0x354>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a7a:	4a34      	ldr	r2, [pc, #208]	; (8003b4c <HAL_GPIO_Init+0x354>)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a80:	4b32      	ldr	r3, [pc, #200]	; (8003b4c <HAL_GPIO_Init+0x354>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aa4:	4a29      	ldr	r2, [pc, #164]	; (8003b4c <HAL_GPIO_Init+0x354>)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aaa:	4b28      	ldr	r3, [pc, #160]	; (8003b4c <HAL_GPIO_Init+0x354>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ace:	4a1f      	ldr	r2, [pc, #124]	; (8003b4c <HAL_GPIO_Init+0x354>)
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <HAL_GPIO_Init+0x354>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003af8:	4a14      	ldr	r2, [pc, #80]	; (8003b4c <HAL_GPIO_Init+0x354>)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3301      	adds	r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b0f      	cmp	r3, #15
 8003b08:	f67f ae84 	bls.w	8003814 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3724      	adds	r7, #36	; 0x24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40013800 	.word	0x40013800
 8003b24:	40020000 	.word	0x40020000
 8003b28:	40020400 	.word	0x40020400
 8003b2c:	40020800 	.word	0x40020800
 8003b30:	40020c00 	.word	0x40020c00
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40021400 	.word	0x40021400
 8003b3c:	40021800 	.word	0x40021800
 8003b40:	40021c00 	.word	0x40021c00
 8003b44:	40022000 	.word	0x40022000
 8003b48:	40022400 	.word	0x40022400
 8003b4c:	40013c00 	.word	0x40013c00

08003b50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	887b      	ldrh	r3, [r7, #2]
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
 8003b6c:	e001      	b.n	8003b72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	807b      	strh	r3, [r7, #2]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b90:	787b      	ldrb	r3, [r7, #1]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b9c:	e003      	b.n	8003ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b9e:	887b      	ldrh	r3, [r7, #2]
 8003ba0:	041a      	lsls	r2, r3, #16
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	619a      	str	r2, [r3, #24]
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
	...

08003bb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bbe:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d006      	beq.n	8003bd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bca:	4a05      	ldr	r2, [pc, #20]	; (8003be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f806 	bl	8003be4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40013c00 	.word	0x40013c00

08003be4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e12b      	b.n	8003e66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fe fed0 	bl	80029c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2224      	movs	r2, #36	; 0x24
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c60:	f002 fdd4 	bl	800680c <HAL_RCC_GetPCLK1Freq>
 8003c64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4a81      	ldr	r2, [pc, #516]	; (8003e70 <HAL_I2C_Init+0x274>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d807      	bhi.n	8003c80 <HAL_I2C_Init+0x84>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a80      	ldr	r2, [pc, #512]	; (8003e74 <HAL_I2C_Init+0x278>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	bf94      	ite	ls
 8003c78:	2301      	movls	r3, #1
 8003c7a:	2300      	movhi	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e006      	b.n	8003c8e <HAL_I2C_Init+0x92>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4a7d      	ldr	r2, [pc, #500]	; (8003e78 <HAL_I2C_Init+0x27c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	bf94      	ite	ls
 8003c88:	2301      	movls	r3, #1
 8003c8a:	2300      	movhi	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e0e7      	b.n	8003e66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4a78      	ldr	r2, [pc, #480]	; (8003e7c <HAL_I2C_Init+0x280>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0c9b      	lsrs	r3, r3, #18
 8003ca0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4a6a      	ldr	r2, [pc, #424]	; (8003e70 <HAL_I2C_Init+0x274>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d802      	bhi.n	8003cd0 <HAL_I2C_Init+0xd4>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	e009      	b.n	8003ce4 <HAL_I2C_Init+0xe8>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	4a69      	ldr	r2, [pc, #420]	; (8003e80 <HAL_I2C_Init+0x284>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	099b      	lsrs	r3, r3, #6
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	495c      	ldr	r1, [pc, #368]	; (8003e70 <HAL_I2C_Init+0x274>)
 8003d00:	428b      	cmp	r3, r1
 8003d02:	d819      	bhi.n	8003d38 <HAL_I2C_Init+0x13c>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1e59      	subs	r1, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d12:	1c59      	adds	r1, r3, #1
 8003d14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d18:	400b      	ands	r3, r1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_I2C_Init+0x138>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1e59      	subs	r1, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d32:	e051      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003d34:	2304      	movs	r3, #4
 8003d36:	e04f      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d111      	bne.n	8003d64 <HAL_I2C_Init+0x168>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1e58      	subs	r0, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	440b      	add	r3, r1
 8003d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d52:	3301      	adds	r3, #1
 8003d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e012      	b.n	8003d8a <HAL_I2C_Init+0x18e>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1e58      	subs	r0, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	0099      	lsls	r1, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bf0c      	ite	eq
 8003d84:	2301      	moveq	r3, #1
 8003d86:	2300      	movne	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Init+0x196>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e022      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10e      	bne.n	8003db8 <HAL_I2C_Init+0x1bc>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1e58      	subs	r0, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6859      	ldr	r1, [r3, #4]
 8003da2:	460b      	mov	r3, r1
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	440b      	add	r3, r1
 8003da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dac:	3301      	adds	r3, #1
 8003dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db6:	e00f      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1e58      	subs	r0, r3, #1
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6859      	ldr	r1, [r3, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	0099      	lsls	r1, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dce:	3301      	adds	r3, #1
 8003dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	6809      	ldr	r1, [r1, #0]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6911      	ldr	r1, [r2, #16]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68d2      	ldr	r2, [r2, #12]
 8003e12:	4311      	orrs	r1, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	000186a0 	.word	0x000186a0
 8003e74:	001e847f 	.word	0x001e847f
 8003e78:	003d08ff 	.word	0x003d08ff
 8003e7c:	431bde83 	.word	0x431bde83
 8003e80:	10624dd3 	.word	0x10624dd3

08003e84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	461a      	mov	r2, r3
 8003e92:	4603      	mov	r3, r0
 8003e94:	817b      	strh	r3, [r7, #10]
 8003e96:	460b      	mov	r3, r1
 8003e98:	813b      	strh	r3, [r7, #8]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e9e:	f7ff f927 	bl	80030f0 <HAL_GetTick>
 8003ea2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	f040 80d9 	bne.w	8004064 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	2319      	movs	r3, #25
 8003eb8:	2201      	movs	r2, #1
 8003eba:	496d      	ldr	r1, [pc, #436]	; (8004070 <HAL_I2C_Mem_Write+0x1ec>)
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fc7f 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e0cc      	b.n	8004066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_I2C_Mem_Write+0x56>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e0c5      	b.n	8004066 <HAL_I2C_Mem_Write+0x1e2>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d007      	beq.n	8003f00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2221      	movs	r2, #33	; 0x21
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2240      	movs	r2, #64	; 0x40
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a3a      	ldr	r2, [r7, #32]
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a4d      	ldr	r2, [pc, #308]	; (8004074 <HAL_I2C_Mem_Write+0x1f0>)
 8003f40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f42:	88f8      	ldrh	r0, [r7, #6]
 8003f44:	893a      	ldrh	r2, [r7, #8]
 8003f46:	8979      	ldrh	r1, [r7, #10]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	4603      	mov	r3, r0
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fab6 	bl	80044c4 <I2C_RequestMemoryWrite>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d052      	beq.n	8004004 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e081      	b.n	8004066 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fd00 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00d      	beq.n	8003f8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d107      	bne.n	8003f8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e06b      	b.n	8004066 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	781a      	ldrb	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d11b      	bne.n	8004004 <HAL_I2C_Mem_Write+0x180>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d017      	beq.n	8004004 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	781a      	ldrb	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1aa      	bne.n	8003f62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fcec 	bl	80049ee <I2C_WaitOnBTFFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00d      	beq.n	8004038 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	2b04      	cmp	r3, #4
 8004022:	d107      	bne.n	8004034 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004032:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e016      	b.n	8004066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	e000      	b.n	8004066 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004064:	2302      	movs	r3, #2
  }
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	00100002 	.word	0x00100002
 8004074:	ffff0000 	.word	0xffff0000

08004078 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08c      	sub	sp, #48	; 0x30
 800407c:	af02      	add	r7, sp, #8
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	461a      	mov	r2, r3
 8004086:	4603      	mov	r3, r0
 8004088:	817b      	strh	r3, [r7, #10]
 800408a:	460b      	mov	r3, r1
 800408c:	813b      	strh	r3, [r7, #8]
 800408e:	4613      	mov	r3, r2
 8004090:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004092:	f7ff f82d 	bl	80030f0 <HAL_GetTick>
 8004096:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	f040 8208 	bne.w	80044b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	2319      	movs	r3, #25
 80040ac:	2201      	movs	r2, #1
 80040ae:	497b      	ldr	r1, [pc, #492]	; (800429c <HAL_I2C_Mem_Read+0x224>)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fb85 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80040bc:	2302      	movs	r3, #2
 80040be:	e1fb      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_I2C_Mem_Read+0x56>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e1f4      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d007      	beq.n	80040f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2222      	movs	r2, #34	; 0x22
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2240      	movs	r2, #64	; 0x40
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004124:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a5b      	ldr	r2, [pc, #364]	; (80042a0 <HAL_I2C_Mem_Read+0x228>)
 8004134:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004136:	88f8      	ldrh	r0, [r7, #6]
 8004138:	893a      	ldrh	r2, [r7, #8]
 800413a:	8979      	ldrh	r1, [r7, #10]
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	4603      	mov	r3, r0
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fa52 	bl	80045f0 <I2C_RequestMemoryRead>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e1b0      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	2b00      	cmp	r3, #0
 800415c:	d113      	bne.n	8004186 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415e:	2300      	movs	r3, #0
 8004160:	623b      	str	r3, [r7, #32]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	623b      	str	r3, [r7, #32]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	623b      	str	r3, [r7, #32]
 8004172:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e184      	b.n	8004490 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418a:	2b01      	cmp	r3, #1
 800418c:	d11b      	bne.n	80041c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e164      	b.n	8004490 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d11b      	bne.n	8004206 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ee:	2300      	movs	r3, #0
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	e144      	b.n	8004490 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004206:	2300      	movs	r3, #0
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800421c:	e138      	b.n	8004490 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004222:	2b03      	cmp	r3, #3
 8004224:	f200 80f1 	bhi.w	800440a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	2b01      	cmp	r3, #1
 800422e:	d123      	bne.n	8004278 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004232:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fc1b 	bl	8004a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e139      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004276:	e10b      	b.n	8004490 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427c:	2b02      	cmp	r3, #2
 800427e:	d14e      	bne.n	800431e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004286:	2200      	movs	r2, #0
 8004288:	4906      	ldr	r1, [pc, #24]	; (80042a4 <HAL_I2C_Mem_Read+0x22c>)
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fa98 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d008      	beq.n	80042a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e10e      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
 800429a:	bf00      	nop
 800429c:	00100002 	.word	0x00100002
 80042a0:	ffff0000 	.word	0xffff0000
 80042a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800431c:	e0b8      	b.n	8004490 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004324:	2200      	movs	r2, #0
 8004326:	4966      	ldr	r1, [pc, #408]	; (80044c0 <HAL_I2C_Mem_Read+0x448>)
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fa49 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0bf      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	2200      	movs	r2, #0
 8004382:	494f      	ldr	r1, [pc, #316]	; (80044c0 <HAL_I2C_Mem_Read+0x448>)
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 fa1b 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e091      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004408:	e042      	b.n	8004490 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800440a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fb2e 	bl	8004a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e04c      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b04      	cmp	r3, #4
 800445c:	d118      	bne.n	8004490 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004494:	2b00      	cmp	r3, #0
 8004496:	f47f aec2 	bne.w	800421e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3728      	adds	r7, #40	; 0x28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	00010004 	.word	0x00010004

080044c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	4608      	mov	r0, r1
 80044ce:	4611      	mov	r1, r2
 80044d0:	461a      	mov	r2, r3
 80044d2:	4603      	mov	r3, r0
 80044d4:	817b      	strh	r3, [r7, #10]
 80044d6:	460b      	mov	r3, r1
 80044d8:	813b      	strh	r3, [r7, #8]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f960 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00d      	beq.n	8004522 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004514:	d103      	bne.n	800451e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800451c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e05f      	b.n	80045e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004522:	897b      	ldrh	r3, [r7, #10]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004530:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	6a3a      	ldr	r2, [r7, #32]
 8004536:	492d      	ldr	r1, [pc, #180]	; (80045ec <I2C_RequestMemoryWrite+0x128>)
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f998 	bl	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e04c      	b.n	80045e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800455e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004560:	6a39      	ldr	r1, [r7, #32]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fa02 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	2b04      	cmp	r3, #4
 8004574:	d107      	bne.n	8004586 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004584:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e02b      	b.n	80045e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004590:	893b      	ldrh	r3, [r7, #8]
 8004592:	b2da      	uxtb	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	611a      	str	r2, [r3, #16]
 800459a:	e021      	b.n	80045e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800459c:	893b      	ldrh	r3, [r7, #8]
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ac:	6a39      	ldr	r1, [r7, #32]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f9dc 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00d      	beq.n	80045d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d107      	bne.n	80045d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e005      	b.n	80045e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045d6:	893b      	ldrh	r3, [r7, #8]
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	00010002 	.word	0x00010002

080045f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	4603      	mov	r3, r0
 8004600:	817b      	strh	r3, [r7, #10]
 8004602:	460b      	mov	r3, r1
 8004604:	813b      	strh	r3, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004618:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004628:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	2200      	movs	r2, #0
 8004632:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f8c2 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00d      	beq.n	800465e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004650:	d103      	bne.n	800465a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e0aa      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800465e:	897b      	ldrh	r3, [r7, #10]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800466c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	6a3a      	ldr	r2, [r7, #32]
 8004672:	4952      	ldr	r1, [pc, #328]	; (80047bc <I2C_RequestMemoryRead+0x1cc>)
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f8fa 	bl	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e097      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800469a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469c:	6a39      	ldr	r1, [r7, #32]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f964 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00d      	beq.n	80046c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d107      	bne.n	80046c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e076      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d105      	bne.n	80046d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046cc:	893b      	ldrh	r3, [r7, #8]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	611a      	str	r2, [r3, #16]
 80046d6:	e021      	b.n	800471c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046d8:	893b      	ldrh	r3, [r7, #8]
 80046da:	0a1b      	lsrs	r3, r3, #8
 80046dc:	b29b      	uxth	r3, r3
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e8:	6a39      	ldr	r1, [r7, #32]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f93e 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00d      	beq.n	8004712 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d107      	bne.n	800470e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e050      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004712:	893b      	ldrh	r3, [r7, #8]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800471c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471e:	6a39      	ldr	r1, [r7, #32]
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f923 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00d      	beq.n	8004748 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	2b04      	cmp	r3, #4
 8004732:	d107      	bne.n	8004744 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004742:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e035      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004756:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	2200      	movs	r2, #0
 8004760:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f82b 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00d      	beq.n	800478c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477e:	d103      	bne.n	8004788 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004786:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e013      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800478c:	897b      	ldrh	r3, [r7, #10]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	b2da      	uxtb	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	6a3a      	ldr	r2, [r7, #32]
 80047a0:	4906      	ldr	r1, [pc, #24]	; (80047bc <I2C_RequestMemoryRead+0x1cc>)
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f863 	bl	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	00010002 	.word	0x00010002

080047c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	4613      	mov	r3, r2
 80047ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d0:	e025      	b.n	800481e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d8:	d021      	beq.n	800481e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047da:	f7fe fc89 	bl	80030f0 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d116      	bne.n	800481e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f043 0220 	orr.w	r2, r3, #32
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e023      	b.n	8004866 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	d10d      	bne.n	8004844 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	43da      	mvns	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4013      	ands	r3, r2
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	e00c      	b.n	800485e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	43da      	mvns	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4013      	ands	r3, r2
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	bf0c      	ite	eq
 8004856:	2301      	moveq	r3, #1
 8004858:	2300      	movne	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	429a      	cmp	r2, r3
 8004862:	d0b6      	beq.n	80047d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	607a      	str	r2, [r7, #4]
 800487a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800487c:	e051      	b.n	8004922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800488c:	d123      	bne.n	80048d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f043 0204 	orr.w	r2, r3, #4
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e046      	b.n	8004964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048dc:	d021      	beq.n	8004922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048de:	f7fe fc07 	bl	80030f0 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d302      	bcc.n	80048f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d116      	bne.n	8004922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f043 0220 	orr.w	r2, r3, #32
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e020      	b.n	8004964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	0c1b      	lsrs	r3, r3, #16
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	d10c      	bne.n	8004946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	43da      	mvns	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4013      	ands	r3, r2
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	bf14      	ite	ne
 800493e:	2301      	movne	r3, #1
 8004940:	2300      	moveq	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	e00b      	b.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	43da      	mvns	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4013      	ands	r3, r2
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	bf14      	ite	ne
 8004958:	2301      	movne	r3, #1
 800495a:	2300      	moveq	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d18d      	bne.n	800487e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004978:	e02d      	b.n	80049d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f8ce 	bl	8004b1c <I2C_IsAcknowledgeFailed>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e02d      	b.n	80049e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004990:	d021      	beq.n	80049d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004992:	f7fe fbad 	bl	80030f0 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d302      	bcc.n	80049a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d116      	bne.n	80049d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f043 0220 	orr.w	r2, r3, #32
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e007      	b.n	80049e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e0:	2b80      	cmp	r3, #128	; 0x80
 80049e2:	d1ca      	bne.n	800497a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049fa:	e02d      	b.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f88d 	bl	8004b1c <I2C_IsAcknowledgeFailed>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e02d      	b.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a12:	d021      	beq.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a14:	f7fe fb6c 	bl	80030f0 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d302      	bcc.n	8004a2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d116      	bne.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	f043 0220 	orr.w	r2, r3, #32
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e007      	b.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d1ca      	bne.n	80049fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a7c:	e042      	b.n	8004b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d119      	bne.n	8004ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0210 	mvn.w	r2, #16
 8004a94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e029      	b.n	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac0:	f7fe fb16 	bl	80030f0 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d302      	bcc.n	8004ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d116      	bne.n	8004b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e007      	b.n	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0e:	2b40      	cmp	r3, #64	; 0x40
 8004b10:	d1b5      	bne.n	8004a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b32:	d11b      	bne.n	8004b6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	f043 0204 	orr.w	r2, r3, #4
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b20      	cmp	r3, #32
 8004b8e:	d129      	bne.n	8004be4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2224      	movs	r2, #36	; 0x24
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0210 	bic.w	r2, r2, #16
 8004bb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e000      	b.n	8004be6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004be4:	2302      	movs	r3, #2
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d12a      	bne.n	8004c62 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2224      	movs	r2, #36	; 0x24
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0201 	bic.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004c2c:	89fb      	ldrh	r3, [r7, #14]
 8004c2e:	f023 030f 	bic.w	r3, r3, #15
 8004c32:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	89fb      	ldrh	r3, [r7, #14]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	89fa      	ldrh	r2, [r7, #14]
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f042 0201 	orr.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e000      	b.n	8004c64 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004c62:	2302      	movs	r3, #2
  }
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c72:	b08f      	sub	sp, #60	; 0x3c
 8004c74:	af0a      	add	r7, sp, #40	; 0x28
 8004c76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e10f      	b.n	8004ea2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d106      	bne.n	8004ca2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f00c fe2d 	bl	80118fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d102      	bne.n	8004cbc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f003 fd0e 	bl	80086e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	687e      	ldr	r6, [r7, #4]
 8004cce:	466d      	mov	r5, sp
 8004cd0:	f106 0410 	add.w	r4, r6, #16
 8004cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ce0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ce4:	1d33      	adds	r3, r6, #4
 8004ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ce8:	6838      	ldr	r0, [r7, #0]
 8004cea:	f003 fbe5 	bl	80084b8 <USB_CoreInit>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0d0      	b.n	8004ea2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2100      	movs	r1, #0
 8004d06:	4618      	mov	r0, r3
 8004d08:	f003 fcfc 	bl	8008704 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	73fb      	strb	r3, [r7, #15]
 8004d10:	e04a      	b.n	8004da8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d12:	7bfa      	ldrb	r2, [r7, #15]
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	4613      	mov	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	1a9b      	subs	r3, r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	440b      	add	r3, r1
 8004d20:	333d      	adds	r3, #61	; 0x3d
 8004d22:	2201      	movs	r2, #1
 8004d24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d26:	7bfa      	ldrb	r2, [r7, #15]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	333c      	adds	r3, #60	; 0x3c
 8004d36:	7bfa      	ldrb	r2, [r7, #15]
 8004d38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d3a:	7bfa      	ldrb	r2, [r7, #15]
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	b298      	uxth	r0, r3
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	3342      	adds	r3, #66	; 0x42
 8004d4e:	4602      	mov	r2, r0
 8004d50:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d52:	7bfa      	ldrb	r2, [r7, #15]
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	333f      	adds	r3, #63	; 0x3f
 8004d62:	2200      	movs	r2, #0
 8004d64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d66:	7bfa      	ldrb	r2, [r7, #15]
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	3344      	adds	r3, #68	; 0x44
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d7a:	7bfa      	ldrb	r2, [r7, #15]
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	3348      	adds	r3, #72	; 0x48
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d8e:	7bfa      	ldrb	r2, [r7, #15]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	3350      	adds	r3, #80	; 0x50
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	3301      	adds	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
 8004da8:	7bfa      	ldrb	r2, [r7, #15]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d3af      	bcc.n	8004d12 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004db2:	2300      	movs	r3, #0
 8004db4:	73fb      	strb	r3, [r7, #15]
 8004db6:	e044      	b.n	8004e42 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004db8:	7bfa      	ldrb	r2, [r7, #15]
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004dce:	7bfa      	ldrb	r2, [r7, #15]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004de0:	7bfa      	ldrb	r2, [r7, #15]
 8004de2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004de4:	7bfa      	ldrb	r2, [r7, #15]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004dfa:	7bfa      	ldrb	r2, [r7, #15]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	1a9b      	subs	r3, r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e10:	7bfa      	ldrb	r2, [r7, #15]
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e26:	7bfa      	ldrb	r2, [r7, #15]
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	1a9b      	subs	r3, r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	73fb      	strb	r3, [r7, #15]
 8004e42:	7bfa      	ldrb	r2, [r7, #15]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d3b5      	bcc.n	8004db8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	603b      	str	r3, [r7, #0]
 8004e52:	687e      	ldr	r6, [r7, #4]
 8004e54:	466d      	mov	r5, sp
 8004e56:	f106 0410 	add.w	r4, r6, #16
 8004e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e66:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e6a:	1d33      	adds	r3, r6, #4
 8004e6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e6e:	6838      	ldr	r0, [r7, #0]
 8004e70:	f003 fc94 	bl	800879c <USB_DevInit>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e00d      	b.n	8004ea2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f004 fd10 	bl	80098c0 <USB_DevDisconnect>

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eaa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d101      	bne.n	8004ec6 <HAL_PCD_Start+0x1c>
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e020      	b.n	8004f08 <HAL_PCD_Start+0x5e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d109      	bne.n	8004eea <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d005      	beq.n	8004eea <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f003 fbe6 	bl	80086c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f004 fcc0 	bl	800987e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b08d      	sub	sp, #52	; 0x34
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f004 fd7e 	bl	8009a28 <USB_GetMode>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f040 839d 	bne.w	800566e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f004 fce2 	bl	8009902 <USB_ReadInterrupts>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8393 	beq.w	800566c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f004 fcd9 	bl	8009902 <USB_ReadInterrupts>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d107      	bne.n	8004f6a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695a      	ldr	r2, [r3, #20]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f002 0202 	and.w	r2, r2, #2
 8004f68:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f004 fcc7 	bl	8009902 <USB_ReadInterrupts>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b10      	cmp	r3, #16
 8004f7c:	d161      	bne.n	8005042 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699a      	ldr	r2, [r3, #24]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0210 	bic.w	r2, r2, #16
 8004f8c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	f003 020f 	and.w	r2, r3, #15
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	4413      	add	r3, r2
 8004faa:	3304      	adds	r3, #4
 8004fac:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	0c5b      	lsrs	r3, r3, #17
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d124      	bne.n	8005004 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d035      	beq.n	8005032 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	091b      	lsrs	r3, r3, #4
 8004fce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004fd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	6a38      	ldr	r0, [r7, #32]
 8004fda:	f004 fafe 	bl	80095da <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	091b      	lsrs	r3, r3, #4
 8004fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fea:	441a      	add	r2, r3
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	699a      	ldr	r2, [r3, #24]
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	091b      	lsrs	r3, r3, #4
 8004ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ffc:	441a      	add	r2, r3
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	619a      	str	r2, [r3, #24]
 8005002:	e016      	b.n	8005032 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	0c5b      	lsrs	r3, r3, #17
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	2b06      	cmp	r3, #6
 800500e:	d110      	bne.n	8005032 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005016:	2208      	movs	r2, #8
 8005018:	4619      	mov	r1, r3
 800501a:	6a38      	ldr	r0, [r7, #32]
 800501c:	f004 fadd 	bl	80095da <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	699a      	ldr	r2, [r3, #24]
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	091b      	lsrs	r3, r3, #4
 8005028:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800502c:	441a      	add	r2, r3
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699a      	ldr	r2, [r3, #24]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0210 	orr.w	r2, r2, #16
 8005040:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f004 fc5b 	bl	8009902 <USB_ReadInterrupts>
 800504c:	4603      	mov	r3, r0
 800504e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005052:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005056:	d16e      	bne.n	8005136 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f004 fc61 	bl	8009928 <USB_ReadDevAllOutEpInterrupt>
 8005066:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005068:	e062      	b.n	8005130 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d057      	beq.n	8005124 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	4611      	mov	r1, r2
 800507e:	4618      	mov	r0, r3
 8005080:	f004 fc86 	bl	8009990 <USB_ReadDevOutEPInterrupt>
 8005084:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00c      	beq.n	80050aa <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509c:	461a      	mov	r2, r3
 800509e:	2301      	movs	r3, #1
 80050a0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80050a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fdb1 	bl	8005c0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00c      	beq.n	80050ce <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c0:	461a      	mov	r2, r3
 80050c2:	2308      	movs	r3, #8
 80050c4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80050c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 feab 	bl	8005e24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d008      	beq.n	80050ea <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e4:	461a      	mov	r2, r3
 80050e6:	2310      	movs	r3, #16
 80050e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	461a      	mov	r2, r3
 8005102:	2320      	movs	r3, #32
 8005104:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d009      	beq.n	8005124 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511c:	461a      	mov	r2, r3
 800511e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005122:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	3301      	adds	r3, #1
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	2b00      	cmp	r3, #0
 8005134:	d199      	bne.n	800506a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f004 fbe1 	bl	8009902 <USB_ReadInterrupts>
 8005140:	4603      	mov	r3, r0
 8005142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005146:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800514a:	f040 80c0 	bne.w	80052ce <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f004 fc02 	bl	800995c <USB_ReadDevAllInEpInterrupt>
 8005158:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800515e:	e0b2      	b.n	80052c6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 80a7 	beq.w	80052ba <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	4611      	mov	r1, r2
 8005176:	4618      	mov	r0, r3
 8005178:	f004 fc28 	bl	80099cc <USB_ReadDevInEPInterrupt>
 800517c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d057      	beq.n	8005238 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	2201      	movs	r2, #1
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	43db      	mvns	r3, r3
 80051a2:	69f9      	ldr	r1, [r7, #28]
 80051a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051a8:	4013      	ands	r3, r2
 80051aa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	461a      	mov	r2, r3
 80051ba:	2301      	movs	r3, #1
 80051bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d132      	bne.n	800522c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ca:	4613      	mov	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	3348      	adds	r3, #72	; 0x48
 80051d6:	6819      	ldr	r1, [r3, #0]
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	4613      	mov	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	1a9b      	subs	r3, r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4403      	add	r3, r0
 80051e6:	3344      	adds	r3, #68	; 0x44
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4419      	add	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f0:	4613      	mov	r3, r2
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	1a9b      	subs	r3, r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4403      	add	r3, r0
 80051fa:	3348      	adds	r3, #72	; 0x48
 80051fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	2b00      	cmp	r3, #0
 8005202:	d113      	bne.n	800522c <HAL_PCD_IRQHandler+0x31c>
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005208:	4613      	mov	r3, r2
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	1a9b      	subs	r3, r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	3350      	adds	r3, #80	; 0x50
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d108      	bne.n	800522c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005224:	461a      	mov	r2, r3
 8005226:	2101      	movs	r1, #1
 8005228:	f004 fc30 	bl	8009a8c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	b2db      	uxtb	r3, r3
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f00c fbf1 	bl	8011a1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d008      	beq.n	8005254 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524e:	461a      	mov	r2, r3
 8005250:	2308      	movs	r3, #8
 8005252:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	461a      	mov	r2, r3
 800526c:	2310      	movs	r3, #16
 800526e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d008      	beq.n	800528c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005286:	461a      	mov	r2, r3
 8005288:	2340      	movs	r3, #64	; 0x40
 800528a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a2:	461a      	mov	r2, r3
 80052a4:	2302      	movs	r3, #2
 80052a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80052b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fc1b 	bl	8005af0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	3301      	adds	r3, #1
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f47f af49 	bne.w	8005160 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f004 fb15 	bl	8009902 <USB_ReadInterrupts>
 80052d8:	4603      	mov	r3, r0
 80052da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052e2:	d122      	bne.n	800532a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052f2:	f023 0301 	bic.w	r3, r3, #1
 80052f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d108      	bne.n	8005314 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800530a:	2100      	movs	r1, #0
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fe27 	bl	8005f60 <HAL_PCDEx_LPM_Callback>
 8005312:	e002      	b.n	800531a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f00c fbf7 	bl	8011b08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695a      	ldr	r2, [r3, #20]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005328:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f004 fae7 	bl	8009902 <USB_ReadInterrupts>
 8005334:	4603      	mov	r3, r0
 8005336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800533a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800533e:	d112      	bne.n	8005366 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b01      	cmp	r3, #1
 800534e:	d102      	bne.n	8005356 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f00c fbb3 	bl	8011abc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695a      	ldr	r2, [r3, #20]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005364:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f004 fac9 	bl	8009902 <USB_ReadInterrupts>
 8005370:	4603      	mov	r3, r0
 8005372:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537a:	f040 80c7 	bne.w	800550c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800538c:	f023 0301 	bic.w	r3, r3, #1
 8005390:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2110      	movs	r1, #16
 8005398:	4618      	mov	r0, r3
 800539a:	f003 fb63 	bl	8008a64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800539e:	2300      	movs	r3, #0
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053a2:	e056      	b.n	8005452 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80053a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b0:	461a      	mov	r2, r3
 80053b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053d6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80053d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005404:	461a      	mov	r2, r3
 8005406:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800540a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	440a      	add	r2, r1
 8005422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005426:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800542a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800542c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800543c:	0151      	lsls	r1, r2, #5
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	440a      	add	r2, r1
 8005442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005446:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800544a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	3301      	adds	r3, #1
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005458:	429a      	cmp	r2, r3
 800545a:	d3a3      	bcc.n	80053a4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800546a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800546e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005474:	2b00      	cmp	r3, #0
 8005476:	d016      	beq.n	80054a6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005488:	f043 030b 	orr.w	r3, r3, #11
 800548c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800549e:	f043 030b 	orr.w	r3, r3, #11
 80054a2:	6453      	str	r3, [r2, #68]	; 0x44
 80054a4:	e015      	b.n	80054d2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	69fa      	ldr	r2, [r7, #28]
 80054b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054b8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80054bc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054cc:	f043 030b 	orr.w	r3, r3, #11
 80054d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054f6:	461a      	mov	r2, r3
 80054f8:	f004 fac8 	bl	8009a8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695a      	ldr	r2, [r3, #20]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800550a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4618      	mov	r0, r3
 8005512:	f004 f9f6 	bl	8009902 <USB_ReadInterrupts>
 8005516:	4603      	mov	r3, r0
 8005518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800551c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005520:	d124      	bne.n	800556c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f004 fa8c 	bl	8009a44 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4618      	mov	r0, r3
 8005532:	f003 faf4 	bl	8008b1e <USB_GetDevSpeed>
 8005536:	4603      	mov	r3, r0
 8005538:	461a      	mov	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681c      	ldr	r4, [r3, #0]
 8005542:	f001 f957 	bl	80067f4 <HAL_RCC_GetHCLKFreq>
 8005546:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800554c:	b2db      	uxtb	r3, r3
 800554e:	461a      	mov	r2, r3
 8005550:	4620      	mov	r0, r4
 8005552:	f003 f813 	bl	800857c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f00c fa87 	bl	8011a6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695a      	ldr	r2, [r3, #20]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800556a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f004 f9c6 	bl	8009902 <USB_ReadInterrupts>
 8005576:	4603      	mov	r3, r0
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b08      	cmp	r3, #8
 800557e:	d10a      	bne.n	8005596 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f00c fa64 	bl	8011a4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695a      	ldr	r2, [r3, #20]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f002 0208 	and.w	r2, r2, #8
 8005594:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f004 f9b1 	bl	8009902 <USB_ReadInterrupts>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055aa:	d10f      	bne.n	80055cc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f00c fac6 	bl	8011b48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695a      	ldr	r2, [r3, #20]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80055ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f004 f996 	bl	8009902 <USB_ReadInterrupts>
 80055d6:	4603      	mov	r3, r0
 80055d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055e0:	d10f      	bne.n	8005602 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f00c fa99 	bl	8011b24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695a      	ldr	r2, [r3, #20]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4618      	mov	r0, r3
 8005608:	f004 f97b 	bl	8009902 <USB_ReadInterrupts>
 800560c:	4603      	mov	r3, r0
 800560e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005616:	d10a      	bne.n	800562e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f00c faa7 	bl	8011b6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695a      	ldr	r2, [r3, #20]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800562c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f004 f965 	bl	8009902 <USB_ReadInterrupts>
 8005638:	4603      	mov	r3, r0
 800563a:	f003 0304 	and.w	r3, r3, #4
 800563e:	2b04      	cmp	r3, #4
 8005640:	d115      	bne.n	800566e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f00c fa97 	bl	8011b88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6859      	ldr	r1, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
 800566a:	e000      	b.n	800566e <HAL_PCD_IRQHandler+0x75e>
      return;
 800566c:	bf00      	nop
    }
  }
}
 800566e:	3734      	adds	r7, #52	; 0x34
 8005670:	46bd      	mov	sp, r7
 8005672:	bd90      	pop	{r4, r7, pc}

08005674 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <HAL_PCD_SetAddress+0x1a>
 800568a:	2302      	movs	r3, #2
 800568c:	e013      	b.n	80056b6 <HAL_PCD_SetAddress+0x42>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	78fa      	ldrb	r2, [r7, #3]
 800569a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	4611      	mov	r1, r2
 80056a6:	4618      	mov	r0, r3
 80056a8:	f004 f8c3 	bl	8009832 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	4608      	mov	r0, r1
 80056c8:	4611      	mov	r1, r2
 80056ca:	461a      	mov	r2, r3
 80056cc:	4603      	mov	r3, r0
 80056ce:	70fb      	strb	r3, [r7, #3]
 80056d0:	460b      	mov	r3, r1
 80056d2:	803b      	strh	r3, [r7, #0]
 80056d4:	4613      	mov	r3, r2
 80056d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	da0f      	bge.n	8005704 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	f003 020f 	and.w	r2, r3, #15
 80056ea:	4613      	mov	r3, r2
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	3338      	adds	r3, #56	; 0x38
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	4413      	add	r3, r2
 80056f8:	3304      	adds	r3, #4
 80056fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	705a      	strb	r2, [r3, #1]
 8005702:	e00f      	b.n	8005724 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	f003 020f 	and.w	r2, r3, #15
 800570a:	4613      	mov	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	1a9b      	subs	r3, r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	4413      	add	r3, r2
 800571a:	3304      	adds	r3, #4
 800571c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	b2da      	uxtb	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005730:	883a      	ldrh	r2, [r7, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	78ba      	ldrb	r2, [r7, #2]
 800573a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d004      	beq.n	800574e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800574e:	78bb      	ldrb	r3, [r7, #2]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d102      	bne.n	800575a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_PCD_EP_Open+0xaa>
 8005764:	2302      	movs	r3, #2
 8005766:	e00e      	b.n	8005786 <HAL_PCD_EP_Open+0xc8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68f9      	ldr	r1, [r7, #12]
 8005776:	4618      	mov	r0, r3
 8005778:	f003 f9f6 	bl	8008b68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005784:	7afb      	ldrb	r3, [r7, #11]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	460b      	mov	r3, r1
 8005798:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800579a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	da0f      	bge.n	80057c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057a2:	78fb      	ldrb	r3, [r7, #3]
 80057a4:	f003 020f 	and.w	r2, r3, #15
 80057a8:	4613      	mov	r3, r2
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	3338      	adds	r3, #56	; 0x38
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	4413      	add	r3, r2
 80057b6:	3304      	adds	r3, #4
 80057b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	705a      	strb	r2, [r3, #1]
 80057c0:	e00f      	b.n	80057e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	f003 020f 	and.w	r2, r3, #15
 80057c8:	4613      	mov	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	3304      	adds	r3, #4
 80057da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_PCD_EP_Close+0x6e>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e00e      	b.n	800581a <HAL_PCD_EP_Close+0x8c>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68f9      	ldr	r1, [r7, #12]
 800580a:	4618      	mov	r0, r3
 800580c:	f003 fa34 	bl	8008c78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b086      	sub	sp, #24
 8005826:	af00      	add	r7, sp, #0
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
 800582e:	460b      	mov	r3, r1
 8005830:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005832:	7afb      	ldrb	r3, [r7, #11]
 8005834:	f003 020f 	and.w	r2, r3, #15
 8005838:	4613      	mov	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	3304      	adds	r3, #4
 800584a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2200      	movs	r2, #0
 800585c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2200      	movs	r2, #0
 8005862:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005864:	7afb      	ldrb	r3, [r7, #11]
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	b2da      	uxtb	r2, r3
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d102      	bne.n	800587e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800587e:	7afb      	ldrb	r3, [r7, #11]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6818      	ldr	r0, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	461a      	mov	r2, r3
 8005894:	6979      	ldr	r1, [r7, #20]
 8005896:	f003 fd0f 	bl	80092b8 <USB_EP0StartXfer>
 800589a:	e008      	b.n	80058ae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	6979      	ldr	r1, [r7, #20]
 80058aa:	f003 fac1 	bl	8008e30 <USB_EPStartXfer>
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	f003 020f 	and.w	r2, r3, #15
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	4613      	mov	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	1a9b      	subs	r3, r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	440b      	add	r3, r1
 80058d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80058da:	681b      	ldr	r3, [r3, #0]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	460b      	mov	r3, r1
 80058f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058f8:	7afb      	ldrb	r3, [r7, #11]
 80058fa:	f003 020f 	and.w	r2, r3, #15
 80058fe:	4613      	mov	r3, r2
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	1a9b      	subs	r3, r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	3338      	adds	r3, #56	; 0x38
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	3304      	adds	r3, #4
 800590e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2200      	movs	r2, #0
 8005920:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2201      	movs	r2, #1
 8005926:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005928:	7afb      	ldrb	r3, [r7, #11]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	b2da      	uxtb	r2, r3
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d102      	bne.n	8005942 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005942:	7afb      	ldrb	r3, [r7, #11]
 8005944:	f003 030f 	and.w	r3, r3, #15
 8005948:	2b00      	cmp	r3, #0
 800594a:	d109      	bne.n	8005960 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6818      	ldr	r0, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	6979      	ldr	r1, [r7, #20]
 800595a:	f003 fcad 	bl	80092b8 <USB_EP0StartXfer>
 800595e:	e008      	b.n	8005972 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	461a      	mov	r2, r3
 800596c:	6979      	ldr	r1, [r7, #20]
 800596e:	f003 fa5f 	bl	8008e30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	f003 020f 	and.w	r2, r3, #15
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	429a      	cmp	r2, r3
 8005994:	d901      	bls.n	800599a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e050      	b.n	8005a3c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800599a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	da0f      	bge.n	80059c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	f003 020f 	and.w	r2, r3, #15
 80059a8:	4613      	mov	r3, r2
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	3338      	adds	r3, #56	; 0x38
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	4413      	add	r3, r2
 80059b6:	3304      	adds	r3, #4
 80059b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	705a      	strb	r2, [r3, #1]
 80059c0:	e00d      	b.n	80059de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059c2:	78fa      	ldrb	r2, [r7, #3]
 80059c4:	4613      	mov	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	4413      	add	r3, r2
 80059d4:	3304      	adds	r3, #4
 80059d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_PCD_EP_SetStall+0x82>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e01e      	b.n	8005a3c <HAL_PCD_EP_SetStall+0xc0>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68f9      	ldr	r1, [r7, #12]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f003 fe3c 	bl	800968a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	f003 030f 	and.w	r3, r3, #15
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6818      	ldr	r0, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	b2d9      	uxtb	r1, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f004 f82d 	bl	8009a8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	f003 020f 	and.w	r2, r3, #15
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d901      	bls.n	8005a62 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e042      	b.n	8005ae8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	da0f      	bge.n	8005a8a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	f003 020f 	and.w	r2, r3, #15
 8005a70:	4613      	mov	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	3338      	adds	r3, #56	; 0x38
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	3304      	adds	r3, #4
 8005a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2201      	movs	r2, #1
 8005a86:	705a      	strb	r2, [r3, #1]
 8005a88:	e00f      	b.n	8005aaa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	f003 020f 	and.w	r2, r3, #15
 8005a90:	4613      	mov	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_PCD_EP_ClrStall+0x86>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e00e      	b.n	8005ae8 <HAL_PCD_EP_ClrStall+0xa4>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68f9      	ldr	r1, [r7, #12]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f003 fe44 	bl	8009766 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08a      	sub	sp, #40	; 0x28
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	4613      	mov	r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	1a9b      	subs	r3, r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	3338      	adds	r3, #56	; 0x38
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	4413      	add	r3, r2
 8005b14:	3304      	adds	r3, #4
 8005b16:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	699a      	ldr	r2, [r3, #24]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d901      	bls.n	8005b28 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e06c      	b.n	8005c02 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	695a      	ldr	r2, [r3, #20]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d902      	bls.n	8005b44 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	3303      	adds	r3, #3
 8005b48:	089b      	lsrs	r3, r3, #2
 8005b4a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b4c:	e02b      	b.n	8005ba6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	695a      	ldr	r2, [r3, #20]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d902      	bls.n	8005b6a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	3303      	adds	r3, #3
 8005b6e:	089b      	lsrs	r3, r3, #2
 8005b70:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	68d9      	ldr	r1, [r3, #12]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	4603      	mov	r3, r0
 8005b88:	6978      	ldr	r0, [r7, #20]
 8005b8a:	f003 fce8 	bl	800955e <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	441a      	add	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	441a      	add	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d809      	bhi.n	8005bd0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d203      	bcs.n	8005bd0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1be      	bne.n	8005b4e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	695a      	ldr	r2, [r3, #20]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d811      	bhi.n	8005c00 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	2201      	movs	r2, #1
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	6939      	ldr	r1, [r7, #16]
 8005bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3720      	adds	r7, #32
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	333c      	adds	r3, #60	; 0x3c
 8005c24:	3304      	adds	r3, #4
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	f040 80a0 	bne.w	8005d84 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d015      	beq.n	8005c7a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4a72      	ldr	r2, [pc, #456]	; (8005e1c <PCD_EP_OutXfrComplete_int+0x210>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	f240 80dd 	bls.w	8005e12 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 80d7 	beq.w	8005e12 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c70:	461a      	mov	r2, r3
 8005c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c76:	6093      	str	r3, [r2, #8]
 8005c78:	e0cb      	b.n	8005e12 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d009      	beq.n	8005c98 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c90:	461a      	mov	r2, r3
 8005c92:	2320      	movs	r3, #32
 8005c94:	6093      	str	r3, [r2, #8]
 8005c96:	e0bc      	b.n	8005e12 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f040 80b7 	bne.w	8005e12 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4a5d      	ldr	r2, [pc, #372]	; (8005e1c <PCD_EP_OutXfrComplete_int+0x210>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d90f      	bls.n	8005ccc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc8:	6093      	str	r3, [r2, #8]
 8005cca:	e0a2      	b.n	8005e12 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005cde:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	0159      	lsls	r1, r3, #5
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	440b      	add	r3, r1
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005cf2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	1a9b      	subs	r3, r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4403      	add	r3, r0
 8005d02:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005d06:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	1a9b      	subs	r3, r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	440b      	add	r3, r1
 8005d16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d1a:	6819      	ldr	r1, [r3, #0]
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	4613      	mov	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	1a9b      	subs	r3, r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4403      	add	r3, r0
 8005d2a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4419      	add	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	4613      	mov	r3, r2
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	1a9b      	subs	r3, r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4403      	add	r3, r0
 8005d40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d44:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d114      	bne.n	8005d76 <PCD_EP_OutXfrComplete_int+0x16a>
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	4613      	mov	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	440b      	add	r3, r1
 8005d5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d108      	bne.n	8005d76 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d6e:	461a      	mov	r2, r3
 8005d70:	2101      	movs	r1, #1
 8005d72:	f003 fe8b 	bl	8009a8c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f00b fe31 	bl	80119e4 <HAL_PCD_DataOutStageCallback>
 8005d82:	e046      	b.n	8005e12 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4a26      	ldr	r2, [pc, #152]	; (8005e20 <PCD_EP_OutXfrComplete_int+0x214>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d124      	bne.n	8005dd6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da2:	461a      	mov	r2, r3
 8005da4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da8:	6093      	str	r3, [r2, #8]
 8005daa:	e032      	b.n	8005e12 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	2320      	movs	r3, #32
 8005dc6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f00b fe08 	bl	80119e4 <HAL_PCD_DataOutStageCallback>
 8005dd4:	e01d      	b.n	8005e12 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d114      	bne.n	8005e06 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	4613      	mov	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	440b      	add	r3, r1
 8005dea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d108      	bne.n	8005e06 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6818      	ldr	r0, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005dfe:	461a      	mov	r2, r3
 8005e00:	2100      	movs	r1, #0
 8005e02:	f003 fe43 	bl	8009a8c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f00b fde9 	bl	80119e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	4f54300a 	.word	0x4f54300a
 8005e20:	4f54310a 	.word	0x4f54310a

08005e24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	333c      	adds	r3, #60	; 0x3c
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4a15      	ldr	r2, [pc, #84]	; (8005eac <PCD_EP_OutSetupPacket_int+0x88>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d90e      	bls.n	8005e78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d009      	beq.n	8005e78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e70:	461a      	mov	r2, r3
 8005e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f00b fda1 	bl	80119c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <PCD_EP_OutSetupPacket_int+0x88>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d90c      	bls.n	8005ea0 <PCD_EP_OutSetupPacket_int+0x7c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d108      	bne.n	8005ea0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e98:	461a      	mov	r2, r3
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	f003 fdf6 	bl	8009a8c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	4f54300a 	.word	0x4f54300a

08005eb0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	70fb      	strb	r3, [r7, #3]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d107      	bne.n	8005ede <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005ece:	883b      	ldrh	r3, [r7, #0]
 8005ed0:	0419      	lsls	r1, r3, #16
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	629a      	str	r2, [r3, #40]	; 0x28
 8005edc:	e028      	b.n	8005f30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee4:	0c1b      	lsrs	r3, r3, #16
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	4413      	add	r3, r2
 8005eea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005eec:	2300      	movs	r3, #0
 8005eee:	73fb      	strb	r3, [r7, #15]
 8005ef0:	e00d      	b.n	8005f0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	3340      	adds	r3, #64	; 0x40
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	0c1b      	lsrs	r3, r3, #16
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	4413      	add	r3, r2
 8005f06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	73fb      	strb	r3, [r7, #15]
 8005f0e:	7bfa      	ldrb	r2, [r7, #15]
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d3ec      	bcc.n	8005ef2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f18:	883b      	ldrh	r3, [r7, #0]
 8005f1a:	0418      	lsls	r0, r3, #16
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6819      	ldr	r1, [r3, #0]
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	4302      	orrs	r2, r0
 8005f28:	3340      	adds	r3, #64	; 0x40
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	460b      	mov	r3, r1
 8005f48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	887a      	ldrh	r2, [r7, #2]
 8005f50:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e264      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d075      	beq.n	8006082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f96:	4ba3      	ldr	r3, [pc, #652]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 030c 	and.w	r3, r3, #12
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d00c      	beq.n	8005fbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fa2:	4ba0      	ldr	r3, [pc, #640]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d112      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fae:	4b9d      	ldr	r3, [pc, #628]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fba:	d10b      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fbc:	4b99      	ldr	r3, [pc, #612]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d05b      	beq.n	8006080 <HAL_RCC_OscConfig+0x108>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d157      	bne.n	8006080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e23f      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fdc:	d106      	bne.n	8005fec <HAL_RCC_OscConfig+0x74>
 8005fde:	4b91      	ldr	r3, [pc, #580]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a90      	ldr	r2, [pc, #576]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8005fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	e01d      	b.n	8006028 <HAL_RCC_OscConfig+0xb0>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ff4:	d10c      	bne.n	8006010 <HAL_RCC_OscConfig+0x98>
 8005ff6:	4b8b      	ldr	r3, [pc, #556]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a8a      	ldr	r2, [pc, #552]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8005ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	4b88      	ldr	r3, [pc, #544]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a87      	ldr	r2, [pc, #540]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8006008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	e00b      	b.n	8006028 <HAL_RCC_OscConfig+0xb0>
 8006010:	4b84      	ldr	r3, [pc, #528]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a83      	ldr	r2, [pc, #524]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8006016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	4b81      	ldr	r3, [pc, #516]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a80      	ldr	r2, [pc, #512]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8006022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d013      	beq.n	8006058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006030:	f7fd f85e 	bl	80030f0 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006038:	f7fd f85a 	bl	80030f0 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b64      	cmp	r3, #100	; 0x64
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e204      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800604a:	4b76      	ldr	r3, [pc, #472]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0f0      	beq.n	8006038 <HAL_RCC_OscConfig+0xc0>
 8006056:	e014      	b.n	8006082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006058:	f7fd f84a 	bl	80030f0 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006060:	f7fd f846 	bl	80030f0 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b64      	cmp	r3, #100	; 0x64
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e1f0      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006072:	4b6c      	ldr	r3, [pc, #432]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1f0      	bne.n	8006060 <HAL_RCC_OscConfig+0xe8>
 800607e:	e000      	b.n	8006082 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d063      	beq.n	8006156 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800608e:	4b65      	ldr	r3, [pc, #404]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 030c 	and.w	r3, r3, #12
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00b      	beq.n	80060b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800609a:	4b62      	ldr	r3, [pc, #392]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d11c      	bne.n	80060e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060a6:	4b5f      	ldr	r3, [pc, #380]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d116      	bne.n	80060e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060b2:	4b5c      	ldr	r3, [pc, #368]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d005      	beq.n	80060ca <HAL_RCC_OscConfig+0x152>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d001      	beq.n	80060ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e1c4      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ca:	4b56      	ldr	r3, [pc, #344]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	4952      	ldr	r1, [pc, #328]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060de:	e03a      	b.n	8006156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d020      	beq.n	800612a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060e8:	4b4f      	ldr	r3, [pc, #316]	; (8006228 <HAL_RCC_OscConfig+0x2b0>)
 80060ea:	2201      	movs	r2, #1
 80060ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ee:	f7fc ffff 	bl	80030f0 <HAL_GetTick>
 80060f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060f4:	e008      	b.n	8006108 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060f6:	f7fc fffb 	bl	80030f0 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e1a5      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006108:	4b46      	ldr	r3, [pc, #280]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0f0      	beq.n	80060f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006114:	4b43      	ldr	r3, [pc, #268]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	4940      	ldr	r1, [pc, #256]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 8006124:	4313      	orrs	r3, r2
 8006126:	600b      	str	r3, [r1, #0]
 8006128:	e015      	b.n	8006156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800612a:	4b3f      	ldr	r3, [pc, #252]	; (8006228 <HAL_RCC_OscConfig+0x2b0>)
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006130:	f7fc ffde 	bl	80030f0 <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006138:	f7fc ffda 	bl	80030f0 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e184      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800614a:	4b36      	ldr	r3, [pc, #216]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f0      	bne.n	8006138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d030      	beq.n	80061c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d016      	beq.n	8006198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800616a:	4b30      	ldr	r3, [pc, #192]	; (800622c <HAL_RCC_OscConfig+0x2b4>)
 800616c:	2201      	movs	r2, #1
 800616e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006170:	f7fc ffbe 	bl	80030f0 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006178:	f7fc ffba 	bl	80030f0 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e164      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800618a:	4b26      	ldr	r3, [pc, #152]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 800618c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f0      	beq.n	8006178 <HAL_RCC_OscConfig+0x200>
 8006196:	e015      	b.n	80061c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006198:	4b24      	ldr	r3, [pc, #144]	; (800622c <HAL_RCC_OscConfig+0x2b4>)
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800619e:	f7fc ffa7 	bl	80030f0 <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061a6:	f7fc ffa3 	bl	80030f0 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e14d      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061b8:	4b1a      	ldr	r3, [pc, #104]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 80061ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1f0      	bne.n	80061a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 80a0 	beq.w	8006312 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061d2:	2300      	movs	r3, #0
 80061d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061d6:	4b13      	ldr	r3, [pc, #76]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10f      	bne.n	8006202 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061e2:	2300      	movs	r3, #0
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	4a0e      	ldr	r2, [pc, #56]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 80061ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f0:	6413      	str	r3, [r2, #64]	; 0x40
 80061f2:	4b0c      	ldr	r3, [pc, #48]	; (8006224 <HAL_RCC_OscConfig+0x2ac>)
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fa:	60bb      	str	r3, [r7, #8]
 80061fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061fe:	2301      	movs	r3, #1
 8006200:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006202:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <HAL_RCC_OscConfig+0x2b8>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620a:	2b00      	cmp	r3, #0
 800620c:	d121      	bne.n	8006252 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800620e:	4b08      	ldr	r3, [pc, #32]	; (8006230 <HAL_RCC_OscConfig+0x2b8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a07      	ldr	r2, [pc, #28]	; (8006230 <HAL_RCC_OscConfig+0x2b8>)
 8006214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800621a:	f7fc ff69 	bl	80030f0 <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006220:	e011      	b.n	8006246 <HAL_RCC_OscConfig+0x2ce>
 8006222:	bf00      	nop
 8006224:	40023800 	.word	0x40023800
 8006228:	42470000 	.word	0x42470000
 800622c:	42470e80 	.word	0x42470e80
 8006230:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006234:	f7fc ff5c 	bl	80030f0 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e106      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006246:	4b85      	ldr	r3, [pc, #532]	; (800645c <HAL_RCC_OscConfig+0x4e4>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f0      	beq.n	8006234 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d106      	bne.n	8006268 <HAL_RCC_OscConfig+0x2f0>
 800625a:	4b81      	ldr	r3, [pc, #516]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 800625c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625e:	4a80      	ldr	r2, [pc, #512]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 8006260:	f043 0301 	orr.w	r3, r3, #1
 8006264:	6713      	str	r3, [r2, #112]	; 0x70
 8006266:	e01c      	b.n	80062a2 <HAL_RCC_OscConfig+0x32a>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	2b05      	cmp	r3, #5
 800626e:	d10c      	bne.n	800628a <HAL_RCC_OscConfig+0x312>
 8006270:	4b7b      	ldr	r3, [pc, #492]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 8006272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006274:	4a7a      	ldr	r2, [pc, #488]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 8006276:	f043 0304 	orr.w	r3, r3, #4
 800627a:	6713      	str	r3, [r2, #112]	; 0x70
 800627c:	4b78      	ldr	r3, [pc, #480]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 800627e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006280:	4a77      	ldr	r2, [pc, #476]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	6713      	str	r3, [r2, #112]	; 0x70
 8006288:	e00b      	b.n	80062a2 <HAL_RCC_OscConfig+0x32a>
 800628a:	4b75      	ldr	r3, [pc, #468]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 800628c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628e:	4a74      	ldr	r2, [pc, #464]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 8006290:	f023 0301 	bic.w	r3, r3, #1
 8006294:	6713      	str	r3, [r2, #112]	; 0x70
 8006296:	4b72      	ldr	r3, [pc, #456]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 8006298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629a:	4a71      	ldr	r2, [pc, #452]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 800629c:	f023 0304 	bic.w	r3, r3, #4
 80062a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d015      	beq.n	80062d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062aa:	f7fc ff21 	bl	80030f0 <HAL_GetTick>
 80062ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b0:	e00a      	b.n	80062c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062b2:	f7fc ff1d 	bl	80030f0 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e0c5      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c8:	4b65      	ldr	r3, [pc, #404]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 80062ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0ee      	beq.n	80062b2 <HAL_RCC_OscConfig+0x33a>
 80062d4:	e014      	b.n	8006300 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062d6:	f7fc ff0b 	bl	80030f0 <HAL_GetTick>
 80062da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062dc:	e00a      	b.n	80062f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062de:	f7fc ff07 	bl	80030f0 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e0af      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062f4:	4b5a      	ldr	r3, [pc, #360]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 80062f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1ee      	bne.n	80062de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006300:	7dfb      	ldrb	r3, [r7, #23]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d105      	bne.n	8006312 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006306:	4b56      	ldr	r3, [pc, #344]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 8006308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630a:	4a55      	ldr	r2, [pc, #340]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 800630c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006310:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 809b 	beq.w	8006452 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800631c:	4b50      	ldr	r3, [pc, #320]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f003 030c 	and.w	r3, r3, #12
 8006324:	2b08      	cmp	r3, #8
 8006326:	d05c      	beq.n	80063e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	2b02      	cmp	r3, #2
 800632e:	d141      	bne.n	80063b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006330:	4b4c      	ldr	r3, [pc, #304]	; (8006464 <HAL_RCC_OscConfig+0x4ec>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006336:	f7fc fedb 	bl	80030f0 <HAL_GetTick>
 800633a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800633e:	f7fc fed7 	bl	80030f0 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e081      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006350:	4b43      	ldr	r3, [pc, #268]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f0      	bne.n	800633e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	69da      	ldr	r2, [r3, #28]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	019b      	lsls	r3, r3, #6
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	3b01      	subs	r3, #1
 8006376:	041b      	lsls	r3, r3, #16
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637e:	061b      	lsls	r3, r3, #24
 8006380:	4937      	ldr	r1, [pc, #220]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 8006382:	4313      	orrs	r3, r2
 8006384:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006386:	4b37      	ldr	r3, [pc, #220]	; (8006464 <HAL_RCC_OscConfig+0x4ec>)
 8006388:	2201      	movs	r2, #1
 800638a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800638c:	f7fc feb0 	bl	80030f0 <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006394:	f7fc feac 	bl	80030f0 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e056      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063a6:	4b2e      	ldr	r3, [pc, #184]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0f0      	beq.n	8006394 <HAL_RCC_OscConfig+0x41c>
 80063b2:	e04e      	b.n	8006452 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063b4:	4b2b      	ldr	r3, [pc, #172]	; (8006464 <HAL_RCC_OscConfig+0x4ec>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ba:	f7fc fe99 	bl	80030f0 <HAL_GetTick>
 80063be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063c2:	f7fc fe95 	bl	80030f0 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e03f      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d4:	4b22      	ldr	r3, [pc, #136]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1f0      	bne.n	80063c2 <HAL_RCC_OscConfig+0x44a>
 80063e0:	e037      	b.n	8006452 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e032      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063ee:	4b1c      	ldr	r3, [pc, #112]	; (8006460 <HAL_RCC_OscConfig+0x4e8>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d028      	beq.n	800644e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006406:	429a      	cmp	r2, r3
 8006408:	d121      	bne.n	800644e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006414:	429a      	cmp	r2, r3
 8006416:	d11a      	bne.n	800644e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800641e:	4013      	ands	r3, r2
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006424:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006426:	4293      	cmp	r3, r2
 8006428:	d111      	bne.n	800644e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006434:	085b      	lsrs	r3, r3, #1
 8006436:	3b01      	subs	r3, #1
 8006438:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800643a:	429a      	cmp	r2, r3
 800643c:	d107      	bne.n	800644e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800644a:	429a      	cmp	r2, r3
 800644c:	d001      	beq.n	8006452 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40007000 	.word	0x40007000
 8006460:	40023800 	.word	0x40023800
 8006464:	42470060 	.word	0x42470060

08006468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e0cc      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800647c:	4b68      	ldr	r3, [pc, #416]	; (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 030f 	and.w	r3, r3, #15
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d90c      	bls.n	80064a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648a:	4b65      	ldr	r3, [pc, #404]	; (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006492:	4b63      	ldr	r3, [pc, #396]	; (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 030f 	and.w	r3, r3, #15
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d001      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0b8      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d020      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064bc:	4b59      	ldr	r3, [pc, #356]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4a58      	ldr	r2, [pc, #352]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064d4:	4b53      	ldr	r3, [pc, #332]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	4a52      	ldr	r2, [pc, #328]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064e0:	4b50      	ldr	r3, [pc, #320]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	494d      	ldr	r1, [pc, #308]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d044      	beq.n	8006588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d107      	bne.n	8006516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006506:	4b47      	ldr	r3, [pc, #284]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d119      	bne.n	8006546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e07f      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b02      	cmp	r3, #2
 800651c:	d003      	beq.n	8006526 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006522:	2b03      	cmp	r3, #3
 8006524:	d107      	bne.n	8006536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006526:	4b3f      	ldr	r3, [pc, #252]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e06f      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006536:	4b3b      	ldr	r3, [pc, #236]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e067      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006546:	4b37      	ldr	r3, [pc, #220]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f023 0203 	bic.w	r2, r3, #3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	4934      	ldr	r1, [pc, #208]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006554:	4313      	orrs	r3, r2
 8006556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006558:	f7fc fdca 	bl	80030f0 <HAL_GetTick>
 800655c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655e:	e00a      	b.n	8006576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006560:	f7fc fdc6 	bl	80030f0 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f241 3288 	movw	r2, #5000	; 0x1388
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e04f      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006576:	4b2b      	ldr	r3, [pc, #172]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 020c 	and.w	r2, r3, #12
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	429a      	cmp	r2, r3
 8006586:	d1eb      	bne.n	8006560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006588:	4b25      	ldr	r3, [pc, #148]	; (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d20c      	bcs.n	80065b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006596:	4b22      	ldr	r3, [pc, #136]	; (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800659e:	4b20      	ldr	r3, [pc, #128]	; (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d001      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e032      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065bc:	4b19      	ldr	r3, [pc, #100]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	4916      	ldr	r1, [pc, #88]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065da:	4b12      	ldr	r3, [pc, #72]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	490e      	ldr	r1, [pc, #56]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065ee:	f000 f821 	bl	8006634 <HAL_RCC_GetSysClockFreq>
 80065f2:	4602      	mov	r2, r0
 80065f4:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	091b      	lsrs	r3, r3, #4
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	490a      	ldr	r1, [pc, #40]	; (8006628 <HAL_RCC_ClockConfig+0x1c0>)
 8006600:	5ccb      	ldrb	r3, [r1, r3]
 8006602:	fa22 f303 	lsr.w	r3, r2, r3
 8006606:	4a09      	ldr	r2, [pc, #36]	; (800662c <HAL_RCC_ClockConfig+0x1c4>)
 8006608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800660a:	4b09      	ldr	r3, [pc, #36]	; (8006630 <HAL_RCC_ClockConfig+0x1c8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f7fc fba0 	bl	8002d54 <HAL_InitTick>

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40023c00 	.word	0x40023c00
 8006624:	40023800 	.word	0x40023800
 8006628:	080174f4 	.word	0x080174f4
 800662c:	20000000 	.word	0x20000000
 8006630:	20000004 	.word	0x20000004

08006634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006634:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	607b      	str	r3, [r7, #4]
 8006640:	2300      	movs	r3, #0
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	2300      	movs	r3, #0
 8006646:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800664c:	4b67      	ldr	r3, [pc, #412]	; (80067ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 030c 	and.w	r3, r3, #12
 8006654:	2b08      	cmp	r3, #8
 8006656:	d00d      	beq.n	8006674 <HAL_RCC_GetSysClockFreq+0x40>
 8006658:	2b08      	cmp	r3, #8
 800665a:	f200 80bd 	bhi.w	80067d8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <HAL_RCC_GetSysClockFreq+0x34>
 8006662:	2b04      	cmp	r3, #4
 8006664:	d003      	beq.n	800666e <HAL_RCC_GetSysClockFreq+0x3a>
 8006666:	e0b7      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006668:	4b61      	ldr	r3, [pc, #388]	; (80067f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800666a:	60bb      	str	r3, [r7, #8]
       break;
 800666c:	e0b7      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800666e:	4b60      	ldr	r3, [pc, #384]	; (80067f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006670:	60bb      	str	r3, [r7, #8]
      break;
 8006672:	e0b4      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006674:	4b5d      	ldr	r3, [pc, #372]	; (80067ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800667c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800667e:	4b5b      	ldr	r3, [pc, #364]	; (80067ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d04d      	beq.n	8006726 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800668a:	4b58      	ldr	r3, [pc, #352]	; (80067ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	099b      	lsrs	r3, r3, #6
 8006690:	461a      	mov	r2, r3
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	f240 10ff 	movw	r0, #511	; 0x1ff
 800669a:	f04f 0100 	mov.w	r1, #0
 800669e:	ea02 0800 	and.w	r8, r2, r0
 80066a2:	ea03 0901 	and.w	r9, r3, r1
 80066a6:	4640      	mov	r0, r8
 80066a8:	4649      	mov	r1, r9
 80066aa:	f04f 0200 	mov.w	r2, #0
 80066ae:	f04f 0300 	mov.w	r3, #0
 80066b2:	014b      	lsls	r3, r1, #5
 80066b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80066b8:	0142      	lsls	r2, r0, #5
 80066ba:	4610      	mov	r0, r2
 80066bc:	4619      	mov	r1, r3
 80066be:	ebb0 0008 	subs.w	r0, r0, r8
 80066c2:	eb61 0109 	sbc.w	r1, r1, r9
 80066c6:	f04f 0200 	mov.w	r2, #0
 80066ca:	f04f 0300 	mov.w	r3, #0
 80066ce:	018b      	lsls	r3, r1, #6
 80066d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80066d4:	0182      	lsls	r2, r0, #6
 80066d6:	1a12      	subs	r2, r2, r0
 80066d8:	eb63 0301 	sbc.w	r3, r3, r1
 80066dc:	f04f 0000 	mov.w	r0, #0
 80066e0:	f04f 0100 	mov.w	r1, #0
 80066e4:	00d9      	lsls	r1, r3, #3
 80066e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066ea:	00d0      	lsls	r0, r2, #3
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	eb12 0208 	adds.w	r2, r2, r8
 80066f4:	eb43 0309 	adc.w	r3, r3, r9
 80066f8:	f04f 0000 	mov.w	r0, #0
 80066fc:	f04f 0100 	mov.w	r1, #0
 8006700:	0299      	lsls	r1, r3, #10
 8006702:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006706:	0290      	lsls	r0, r2, #10
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	4610      	mov	r0, r2
 800670e:	4619      	mov	r1, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	461a      	mov	r2, r3
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	f7fa fac6 	bl	8000ca8 <__aeabi_uldivmod>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	4613      	mov	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	e04a      	b.n	80067bc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006726:	4b31      	ldr	r3, [pc, #196]	; (80067ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	099b      	lsrs	r3, r3, #6
 800672c:	461a      	mov	r2, r3
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006736:	f04f 0100 	mov.w	r1, #0
 800673a:	ea02 0400 	and.w	r4, r2, r0
 800673e:	ea03 0501 	and.w	r5, r3, r1
 8006742:	4620      	mov	r0, r4
 8006744:	4629      	mov	r1, r5
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	014b      	lsls	r3, r1, #5
 8006750:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006754:	0142      	lsls	r2, r0, #5
 8006756:	4610      	mov	r0, r2
 8006758:	4619      	mov	r1, r3
 800675a:	1b00      	subs	r0, r0, r4
 800675c:	eb61 0105 	sbc.w	r1, r1, r5
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	f04f 0300 	mov.w	r3, #0
 8006768:	018b      	lsls	r3, r1, #6
 800676a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800676e:	0182      	lsls	r2, r0, #6
 8006770:	1a12      	subs	r2, r2, r0
 8006772:	eb63 0301 	sbc.w	r3, r3, r1
 8006776:	f04f 0000 	mov.w	r0, #0
 800677a:	f04f 0100 	mov.w	r1, #0
 800677e:	00d9      	lsls	r1, r3, #3
 8006780:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006784:	00d0      	lsls	r0, r2, #3
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	1912      	adds	r2, r2, r4
 800678c:	eb45 0303 	adc.w	r3, r5, r3
 8006790:	f04f 0000 	mov.w	r0, #0
 8006794:	f04f 0100 	mov.w	r1, #0
 8006798:	0299      	lsls	r1, r3, #10
 800679a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800679e:	0290      	lsls	r0, r2, #10
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	4610      	mov	r0, r2
 80067a6:	4619      	mov	r1, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	461a      	mov	r2, r3
 80067ac:	f04f 0300 	mov.w	r3, #0
 80067b0:	f7fa fa7a 	bl	8000ca8 <__aeabi_uldivmod>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4613      	mov	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067bc:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	0c1b      	lsrs	r3, r3, #16
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	3301      	adds	r3, #1
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d4:	60bb      	str	r3, [r7, #8]
      break;
 80067d6:	e002      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067d8:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80067da:	60bb      	str	r3, [r7, #8]
      break;
 80067dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067de:	68bb      	ldr	r3, [r7, #8]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80067ea:	bf00      	nop
 80067ec:	40023800 	.word	0x40023800
 80067f0:	00f42400 	.word	0x00f42400

080067f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067f8:	4b03      	ldr	r3, [pc, #12]	; (8006808 <HAL_RCC_GetHCLKFreq+0x14>)
 80067fa:	681b      	ldr	r3, [r3, #0]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	20000000 	.word	0x20000000

0800680c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006810:	f7ff fff0 	bl	80067f4 <HAL_RCC_GetHCLKFreq>
 8006814:	4602      	mov	r2, r0
 8006816:	4b05      	ldr	r3, [pc, #20]	; (800682c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	0a9b      	lsrs	r3, r3, #10
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	4903      	ldr	r1, [pc, #12]	; (8006830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006822:	5ccb      	ldrb	r3, [r1, r3]
 8006824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006828:	4618      	mov	r0, r3
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40023800 	.word	0x40023800
 8006830:	08017504 	.word	0x08017504

08006834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006838:	f7ff ffdc 	bl	80067f4 <HAL_RCC_GetHCLKFreq>
 800683c:	4602      	mov	r2, r0
 800683e:	4b05      	ldr	r3, [pc, #20]	; (8006854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	0b5b      	lsrs	r3, r3, #13
 8006844:	f003 0307 	and.w	r3, r3, #7
 8006848:	4903      	ldr	r1, [pc, #12]	; (8006858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800684a:	5ccb      	ldrb	r3, [r1, r3]
 800684c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006850:	4618      	mov	r0, r3
 8006852:	bd80      	pop	{r7, pc}
 8006854:	40023800 	.word	0x40023800
 8006858:	08017504 	.word	0x08017504

0800685c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	220f      	movs	r2, #15
 800686a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800686c:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <HAL_RCC_GetClockConfig+0x5c>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f003 0203 	and.w	r2, r3, #3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006878:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <HAL_RCC_GetClockConfig+0x5c>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006884:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <HAL_RCC_GetClockConfig+0x5c>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006890:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <HAL_RCC_GetClockConfig+0x5c>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	08db      	lsrs	r3, r3, #3
 8006896:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800689e:	4b07      	ldr	r3, [pc, #28]	; (80068bc <HAL_RCC_GetClockConfig+0x60>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 020f 	and.w	r2, r3, #15
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	601a      	str	r2, [r3, #0]
}
 80068aa:	bf00      	nop
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40023800 	.word	0x40023800
 80068bc:	40023c00 	.word	0x40023c00

080068c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e07b      	b.n	80069ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d108      	bne.n	80068ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068e2:	d009      	beq.n	80068f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	61da      	str	r2, [r3, #28]
 80068ea:	e005      	b.n	80068f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d106      	bne.n	8006918 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7fc f8c2 	bl	8002a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800692e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006940:	431a      	orrs	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697c:	ea42 0103 	orr.w	r1, r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006984:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	0c1b      	lsrs	r3, r3, #16
 8006996:	f003 0104 	and.w	r1, r3, #4
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	f003 0210 	and.w	r2, r3, #16
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69da      	ldr	r2, [r3, #28]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b08c      	sub	sp, #48	; 0x30
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	607a      	str	r2, [r7, #4]
 80069de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069e0:	2301      	movs	r3, #1
 80069e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_SPI_TransmitReceive+0x26>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e18a      	b.n	8006d0e <HAL_SPI_TransmitReceive+0x33c>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a00:	f7fc fb76 	bl	80030f0 <HAL_GetTick>
 8006a04:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006a16:	887b      	ldrh	r3, [r7, #2]
 8006a18:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d00f      	beq.n	8006a42 <HAL_SPI_TransmitReceive+0x70>
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a28:	d107      	bne.n	8006a3a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d103      	bne.n	8006a3a <HAL_SPI_TransmitReceive+0x68>
 8006a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d003      	beq.n	8006a42 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006a40:	e15b      	b.n	8006cfa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d005      	beq.n	8006a54 <HAL_SPI_TransmitReceive+0x82>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <HAL_SPI_TransmitReceive+0x82>
 8006a4e:	887b      	ldrh	r3, [r7, #2]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d103      	bne.n	8006a5c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006a5a:	e14e      	b.n	8006cfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	d003      	beq.n	8006a70 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2205      	movs	r2, #5
 8006a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	887a      	ldrh	r2, [r7, #2]
 8006a80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	887a      	ldrh	r2, [r7, #2]
 8006a86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	887a      	ldrh	r2, [r7, #2]
 8006a92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	887a      	ldrh	r2, [r7, #2]
 8006a98:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab0:	2b40      	cmp	r3, #64	; 0x40
 8006ab2:	d007      	beq.n	8006ac4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ac2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006acc:	d178      	bne.n	8006bc0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <HAL_SPI_TransmitReceive+0x10a>
 8006ad6:	8b7b      	ldrh	r3, [r7, #26]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d166      	bne.n	8006baa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae0:	881a      	ldrh	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aec:	1c9a      	adds	r2, r3, #2
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3b01      	subs	r3, #1
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b00:	e053      	b.n	8006baa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d11b      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x176>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d016      	beq.n	8006b48 <HAL_SPI_TransmitReceive+0x176>
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d113      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	881a      	ldrh	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b30:	1c9a      	adds	r2, r3, #2
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d119      	bne.n	8006b8a <HAL_SPI_TransmitReceive+0x1b8>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d014      	beq.n	8006b8a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	b292      	uxth	r2, r2
 8006b6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b72:	1c9a      	adds	r2, r3, #2
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b86:	2301      	movs	r3, #1
 8006b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b8a:	f7fc fab1 	bl	80030f0 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d807      	bhi.n	8006baa <HAL_SPI_TransmitReceive+0x1d8>
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ba0:	d003      	beq.n	8006baa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ba8:	e0a7      	b.n	8006cfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1a6      	bne.n	8006b02 <HAL_SPI_TransmitReceive+0x130>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1a1      	bne.n	8006b02 <HAL_SPI_TransmitReceive+0x130>
 8006bbe:	e07c      	b.n	8006cba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <HAL_SPI_TransmitReceive+0x1fc>
 8006bc8:	8b7b      	ldrh	r3, [r7, #26]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d16b      	bne.n	8006ca6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	330c      	adds	r3, #12
 8006bd8:	7812      	ldrb	r2, [r2, #0]
 8006bda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bf4:	e057      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f003 0302 	and.w	r3, r3, #2
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d11c      	bne.n	8006c3e <HAL_SPI_TransmitReceive+0x26c>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d017      	beq.n	8006c3e <HAL_SPI_TransmitReceive+0x26c>
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d114      	bne.n	8006c3e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	330c      	adds	r3, #12
 8006c1e:	7812      	ldrb	r2, [r2, #0]
 8006c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d119      	bne.n	8006c80 <HAL_SPI_TransmitReceive+0x2ae>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d014      	beq.n	8006c80 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	b2d2      	uxtb	r2, r2
 8006c62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c80:	f7fc fa36 	bl	80030f0 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d803      	bhi.n	8006c98 <HAL_SPI_TransmitReceive+0x2c6>
 8006c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c96:	d102      	bne.n	8006c9e <HAL_SPI_TransmitReceive+0x2cc>
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d103      	bne.n	8006ca6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ca4:	e029      	b.n	8006cfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1a2      	bne.n	8006bf6 <HAL_SPI_TransmitReceive+0x224>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d19d      	bne.n	8006bf6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 f8b2 	bl	8006e28 <SPI_EndRxTxTransaction>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d006      	beq.n	8006cd8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006cd6:	e010      	b.n	8006cfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10b      	bne.n	8006cf8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	e000      	b.n	8006cfa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006cf8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3730      	adds	r7, #48	; 0x30
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b088      	sub	sp, #32
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	4613      	mov	r3, r2
 8006d26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d28:	f7fc f9e2 	bl	80030f0 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	1a9b      	subs	r3, r3, r2
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	4413      	add	r3, r2
 8006d36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d38:	f7fc f9da 	bl	80030f0 <HAL_GetTick>
 8006d3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d3e:	4b39      	ldr	r3, [pc, #228]	; (8006e24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	015b      	lsls	r3, r3, #5
 8006d44:	0d1b      	lsrs	r3, r3, #20
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	fb02 f303 	mul.w	r3, r2, r3
 8006d4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d4e:	e054      	b.n	8006dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d56:	d050      	beq.n	8006dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d58:	f7fc f9ca 	bl	80030f0 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d902      	bls.n	8006d6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d13d      	bne.n	8006dea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d86:	d111      	bne.n	8006dac <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d90:	d004      	beq.n	8006d9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d9a:	d107      	bne.n	8006dac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006daa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db4:	d10f      	bne.n	8006dd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e017      	b.n	8006e1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4013      	ands	r3, r2
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	bf0c      	ite	eq
 8006e0a:	2301      	moveq	r3, #1
 8006e0c:	2300      	movne	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d19b      	bne.n	8006d50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3720      	adds	r7, #32
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20000000 	.word	0x20000000

08006e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e34:	4b1b      	ldr	r3, [pc, #108]	; (8006ea4 <SPI_EndRxTxTransaction+0x7c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1b      	ldr	r2, [pc, #108]	; (8006ea8 <SPI_EndRxTxTransaction+0x80>)
 8006e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3e:	0d5b      	lsrs	r3, r3, #21
 8006e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e44:	fb02 f303 	mul.w	r3, r2, r3
 8006e48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e52:	d112      	bne.n	8006e7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2180      	movs	r1, #128	; 0x80
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff ff5a 	bl	8006d18 <SPI_WaitFlagStateUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d016      	beq.n	8006e98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6e:	f043 0220 	orr.w	r2, r3, #32
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e00f      	b.n	8006e9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d0f2      	beq.n	8006e7a <SPI_EndRxTxTransaction+0x52>
 8006e94:	e000      	b.n	8006e98 <SPI_EndRxTxTransaction+0x70>
        break;
 8006e96:	bf00      	nop
  }

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000000 	.word	0x20000000
 8006ea8:	165e9f81 	.word	0x165e9f81

08006eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e041      	b.n	8006f42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fb fe62 	bl	8002b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4610      	mov	r0, r2
 8006eec:	f000 fbb2 	bl	8007654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d001      	beq.n	8006f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e04e      	b.n	8007002 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0201 	orr.w	r2, r2, #1
 8006f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a23      	ldr	r2, [pc, #140]	; (8007010 <HAL_TIM_Base_Start_IT+0xc4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d022      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x80>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f8e:	d01d      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x80>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a1f      	ldr	r2, [pc, #124]	; (8007014 <HAL_TIM_Base_Start_IT+0xc8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d018      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x80>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a1e      	ldr	r2, [pc, #120]	; (8007018 <HAL_TIM_Base_Start_IT+0xcc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d013      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x80>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1c      	ldr	r2, [pc, #112]	; (800701c <HAL_TIM_Base_Start_IT+0xd0>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00e      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x80>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1b      	ldr	r2, [pc, #108]	; (8007020 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d009      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x80>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a19      	ldr	r2, [pc, #100]	; (8007024 <HAL_TIM_Base_Start_IT+0xd8>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d004      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x80>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a18      	ldr	r2, [pc, #96]	; (8007028 <HAL_TIM_Base_Start_IT+0xdc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d111      	bne.n	8006ff0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b06      	cmp	r3, #6
 8006fdc:	d010      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f042 0201 	orr.w	r2, r2, #1
 8006fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fee:	e007      	b.n	8007000 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0201 	orr.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	40010000 	.word	0x40010000
 8007014:	40000400 	.word	0x40000400
 8007018:	40000800 	.word	0x40000800
 800701c:	40000c00 	.word	0x40000c00
 8007020:	40010400 	.word	0x40010400
 8007024:	40014000 	.word	0x40014000
 8007028:	40001800 	.word	0x40001800

0800702c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e041      	b.n	80070c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d106      	bne.n	8007058 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f839 	bl	80070ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	3304      	adds	r3, #4
 8007068:	4619      	mov	r1, r3
 800706a:	4610      	mov	r0, r2
 800706c:	f000 faf2 	bl	8007654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b082      	sub	sp, #8
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d122      	bne.n	800713a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d11b      	bne.n	800713a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f06f 0202 	mvn.w	r2, #2
 800710a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fa78 	bl	8007616 <HAL_TIM_IC_CaptureCallback>
 8007126:	e005      	b.n	8007134 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fa6a 	bl	8007602 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fa7b 	bl	800762a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	2b04      	cmp	r3, #4
 8007146:	d122      	bne.n	800718e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f003 0304 	and.w	r3, r3, #4
 8007152:	2b04      	cmp	r3, #4
 8007154:	d11b      	bne.n	800718e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f06f 0204 	mvn.w	r2, #4
 800715e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fa4e 	bl	8007616 <HAL_TIM_IC_CaptureCallback>
 800717a:	e005      	b.n	8007188 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fa40 	bl	8007602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa51 	bl	800762a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b08      	cmp	r3, #8
 800719a:	d122      	bne.n	80071e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f003 0308 	and.w	r3, r3, #8
 80071a6:	2b08      	cmp	r3, #8
 80071a8:	d11b      	bne.n	80071e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f06f 0208 	mvn.w	r2, #8
 80071b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2204      	movs	r2, #4
 80071b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d003      	beq.n	80071d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fa24 	bl	8007616 <HAL_TIM_IC_CaptureCallback>
 80071ce:	e005      	b.n	80071dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fa16 	bl	8007602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa27 	bl	800762a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b10      	cmp	r3, #16
 80071ee:	d122      	bne.n	8007236 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f003 0310 	and.w	r3, r3, #16
 80071fa:	2b10      	cmp	r3, #16
 80071fc:	d11b      	bne.n	8007236 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f06f 0210 	mvn.w	r2, #16
 8007206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2208      	movs	r2, #8
 800720c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f9fa 	bl	8007616 <HAL_TIM_IC_CaptureCallback>
 8007222:	e005      	b.n	8007230 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f9ec 	bl	8007602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f9fd 	bl	800762a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b01      	cmp	r3, #1
 8007242:	d10e      	bne.n	8007262 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b01      	cmp	r3, #1
 8007250:	d107      	bne.n	8007262 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f06f 0201 	mvn.w	r2, #1
 800725a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7fb fb07 	bl	8002870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726c:	2b80      	cmp	r3, #128	; 0x80
 800726e:	d10e      	bne.n	800728e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727a:	2b80      	cmp	r3, #128	; 0x80
 800727c:	d107      	bne.n	800728e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fd53 	bl	8007d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007298:	2b40      	cmp	r3, #64	; 0x40
 800729a:	d10e      	bne.n	80072ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a6:	2b40      	cmp	r3, #64	; 0x40
 80072a8:	d107      	bne.n	80072ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f9c2 	bl	800763e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	f003 0320 	and.w	r3, r3, #32
 80072c4:	2b20      	cmp	r3, #32
 80072c6:	d10e      	bne.n	80072e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f003 0320 	and.w	r3, r3, #32
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d107      	bne.n	80072e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f06f 0220 	mvn.w	r2, #32
 80072de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fd1d 	bl	8007d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072e6:	bf00      	nop
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007306:	2b01      	cmp	r3, #1
 8007308:	d101      	bne.n	800730e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800730a:	2302      	movs	r3, #2
 800730c:	e0ae      	b.n	800746c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b0c      	cmp	r3, #12
 800731a:	f200 809f 	bhi.w	800745c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800731e:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	08007359 	.word	0x08007359
 8007328:	0800745d 	.word	0x0800745d
 800732c:	0800745d 	.word	0x0800745d
 8007330:	0800745d 	.word	0x0800745d
 8007334:	08007399 	.word	0x08007399
 8007338:	0800745d 	.word	0x0800745d
 800733c:	0800745d 	.word	0x0800745d
 8007340:	0800745d 	.word	0x0800745d
 8007344:	080073db 	.word	0x080073db
 8007348:	0800745d 	.word	0x0800745d
 800734c:	0800745d 	.word	0x0800745d
 8007350:	0800745d 	.word	0x0800745d
 8007354:	0800741b 	.word	0x0800741b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68b9      	ldr	r1, [r7, #8]
 800735e:	4618      	mov	r0, r3
 8007360:	f000 fa18 	bl	8007794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699a      	ldr	r2, [r3, #24]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f042 0208 	orr.w	r2, r2, #8
 8007372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699a      	ldr	r2, [r3, #24]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0204 	bic.w	r2, r2, #4
 8007382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6999      	ldr	r1, [r3, #24]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	619a      	str	r2, [r3, #24]
      break;
 8007396:	e064      	b.n	8007462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68b9      	ldr	r1, [r7, #8]
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fa68 	bl	8007874 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699a      	ldr	r2, [r3, #24]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6999      	ldr	r1, [r3, #24]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	021a      	lsls	r2, r3, #8
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	430a      	orrs	r2, r1
 80073d6:	619a      	str	r2, [r3, #24]
      break;
 80073d8:	e043      	b.n	8007462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68b9      	ldr	r1, [r7, #8]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fabd 	bl	8007960 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f042 0208 	orr.w	r2, r2, #8
 80073f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69da      	ldr	r2, [r3, #28]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0204 	bic.w	r2, r2, #4
 8007404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69d9      	ldr	r1, [r3, #28]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	691a      	ldr	r2, [r3, #16]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	61da      	str	r2, [r3, #28]
      break;
 8007418:	e023      	b.n	8007462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fb11 	bl	8007a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69da      	ldr	r2, [r3, #28]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69da      	ldr	r2, [r3, #28]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69d9      	ldr	r1, [r3, #28]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	021a      	lsls	r2, r3, #8
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	61da      	str	r2, [r3, #28]
      break;
 800745a:	e002      	b.n	8007462 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	75fb      	strb	r3, [r7, #23]
      break;
 8007460:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800746a:	7dfb      	ldrb	r3, [r7, #23]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_TIM_ConfigClockSource+0x1c>
 800748c:	2302      	movs	r3, #2
 800748e:	e0b4      	b.n	80075fa <HAL_TIM_ConfigClockSource+0x186>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074c8:	d03e      	beq.n	8007548 <HAL_TIM_ConfigClockSource+0xd4>
 80074ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ce:	f200 8087 	bhi.w	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 80074d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d6:	f000 8086 	beq.w	80075e6 <HAL_TIM_ConfigClockSource+0x172>
 80074da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074de:	d87f      	bhi.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 80074e0:	2b70      	cmp	r3, #112	; 0x70
 80074e2:	d01a      	beq.n	800751a <HAL_TIM_ConfigClockSource+0xa6>
 80074e4:	2b70      	cmp	r3, #112	; 0x70
 80074e6:	d87b      	bhi.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 80074e8:	2b60      	cmp	r3, #96	; 0x60
 80074ea:	d050      	beq.n	800758e <HAL_TIM_ConfigClockSource+0x11a>
 80074ec:	2b60      	cmp	r3, #96	; 0x60
 80074ee:	d877      	bhi.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 80074f0:	2b50      	cmp	r3, #80	; 0x50
 80074f2:	d03c      	beq.n	800756e <HAL_TIM_ConfigClockSource+0xfa>
 80074f4:	2b50      	cmp	r3, #80	; 0x50
 80074f6:	d873      	bhi.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 80074f8:	2b40      	cmp	r3, #64	; 0x40
 80074fa:	d058      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0x13a>
 80074fc:	2b40      	cmp	r3, #64	; 0x40
 80074fe:	d86f      	bhi.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007500:	2b30      	cmp	r3, #48	; 0x30
 8007502:	d064      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0x15a>
 8007504:	2b30      	cmp	r3, #48	; 0x30
 8007506:	d86b      	bhi.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007508:	2b20      	cmp	r3, #32
 800750a:	d060      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0x15a>
 800750c:	2b20      	cmp	r3, #32
 800750e:	d867      	bhi.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007510:	2b00      	cmp	r3, #0
 8007512:	d05c      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0x15a>
 8007514:	2b10      	cmp	r3, #16
 8007516:	d05a      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0x15a>
 8007518:	e062      	b.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	6899      	ldr	r1, [r3, #8]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f000 fb5d 	bl	8007be8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800753c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	609a      	str	r2, [r3, #8]
      break;
 8007546:	e04f      	b.n	80075e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6818      	ldr	r0, [r3, #0]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	6899      	ldr	r1, [r3, #8]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f000 fb46 	bl	8007be8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689a      	ldr	r2, [r3, #8]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800756a:	609a      	str	r2, [r3, #8]
      break;
 800756c:	e03c      	b.n	80075e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	6859      	ldr	r1, [r3, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	461a      	mov	r2, r3
 800757c:	f000 faba 	bl	8007af4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2150      	movs	r1, #80	; 0x50
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fb13 	bl	8007bb2 <TIM_ITRx_SetConfig>
      break;
 800758c:	e02c      	b.n	80075e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	6859      	ldr	r1, [r3, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	461a      	mov	r2, r3
 800759c:	f000 fad9 	bl	8007b52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2160      	movs	r1, #96	; 0x60
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fb03 	bl	8007bb2 <TIM_ITRx_SetConfig>
      break;
 80075ac:	e01c      	b.n	80075e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	6859      	ldr	r1, [r3, #4]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	461a      	mov	r2, r3
 80075bc:	f000 fa9a 	bl	8007af4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2140      	movs	r1, #64	; 0x40
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 faf3 	bl	8007bb2 <TIM_ITRx_SetConfig>
      break;
 80075cc:	e00c      	b.n	80075e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4619      	mov	r1, r3
 80075d8:	4610      	mov	r0, r2
 80075da:	f000 faea 	bl	8007bb2 <TIM_ITRx_SetConfig>
      break;
 80075de:	e003      	b.n	80075e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	73fb      	strb	r3, [r7, #15]
      break;
 80075e4:	e000      	b.n	80075e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007602:	b480      	push	{r7}
 8007604:	b083      	sub	sp, #12
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800760a:	bf00      	nop
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
	...

08007654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a40      	ldr	r2, [pc, #256]	; (8007768 <TIM_Base_SetConfig+0x114>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d013      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007672:	d00f      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a3d      	ldr	r2, [pc, #244]	; (800776c <TIM_Base_SetConfig+0x118>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00b      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a3c      	ldr	r2, [pc, #240]	; (8007770 <TIM_Base_SetConfig+0x11c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d007      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a3b      	ldr	r2, [pc, #236]	; (8007774 <TIM_Base_SetConfig+0x120>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d003      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a3a      	ldr	r2, [pc, #232]	; (8007778 <TIM_Base_SetConfig+0x124>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d108      	bne.n	80076a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a2f      	ldr	r2, [pc, #188]	; (8007768 <TIM_Base_SetConfig+0x114>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d02b      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b4:	d027      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a2c      	ldr	r2, [pc, #176]	; (800776c <TIM_Base_SetConfig+0x118>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d023      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a2b      	ldr	r2, [pc, #172]	; (8007770 <TIM_Base_SetConfig+0x11c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d01f      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a2a      	ldr	r2, [pc, #168]	; (8007774 <TIM_Base_SetConfig+0x120>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d01b      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a29      	ldr	r2, [pc, #164]	; (8007778 <TIM_Base_SetConfig+0x124>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d017      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a28      	ldr	r2, [pc, #160]	; (800777c <TIM_Base_SetConfig+0x128>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d013      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a27      	ldr	r2, [pc, #156]	; (8007780 <TIM_Base_SetConfig+0x12c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00f      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a26      	ldr	r2, [pc, #152]	; (8007784 <TIM_Base_SetConfig+0x130>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00b      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a25      	ldr	r2, [pc, #148]	; (8007788 <TIM_Base_SetConfig+0x134>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d007      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a24      	ldr	r2, [pc, #144]	; (800778c <TIM_Base_SetConfig+0x138>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d003      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a23      	ldr	r2, [pc, #140]	; (8007790 <TIM_Base_SetConfig+0x13c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d108      	bne.n	8007718 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800770c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	4313      	orrs	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a0a      	ldr	r2, [pc, #40]	; (8007768 <TIM_Base_SetConfig+0x114>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_Base_SetConfig+0xf8>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a0c      	ldr	r2, [pc, #48]	; (8007778 <TIM_Base_SetConfig+0x124>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d103      	bne.n	8007754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	615a      	str	r2, [r3, #20]
}
 800775a:	bf00      	nop
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	40010000 	.word	0x40010000
 800776c:	40000400 	.word	0x40000400
 8007770:	40000800 	.word	0x40000800
 8007774:	40000c00 	.word	0x40000c00
 8007778:	40010400 	.word	0x40010400
 800777c:	40014000 	.word	0x40014000
 8007780:	40014400 	.word	0x40014400
 8007784:	40014800 	.word	0x40014800
 8007788:	40001800 	.word	0x40001800
 800778c:	40001c00 	.word	0x40001c00
 8007790:	40002000 	.word	0x40002000

08007794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	f023 0201 	bic.w	r2, r3, #1
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0303 	bic.w	r3, r3, #3
 80077ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f023 0302 	bic.w	r3, r3, #2
 80077dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a20      	ldr	r2, [pc, #128]	; (800786c <TIM_OC1_SetConfig+0xd8>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d003      	beq.n	80077f8 <TIM_OC1_SetConfig+0x64>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a1f      	ldr	r2, [pc, #124]	; (8007870 <TIM_OC1_SetConfig+0xdc>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d10c      	bne.n	8007812 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f023 0308 	bic.w	r3, r3, #8
 80077fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	4313      	orrs	r3, r2
 8007808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f023 0304 	bic.w	r3, r3, #4
 8007810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a15      	ldr	r2, [pc, #84]	; (800786c <TIM_OC1_SetConfig+0xd8>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d003      	beq.n	8007822 <TIM_OC1_SetConfig+0x8e>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a14      	ldr	r2, [pc, #80]	; (8007870 <TIM_OC1_SetConfig+0xdc>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d111      	bne.n	8007846 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	4313      	orrs	r3, r2
 800783a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	621a      	str	r2, [r3, #32]
}
 8007860:	bf00      	nop
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	40010000 	.word	0x40010000
 8007870:	40010400 	.word	0x40010400

08007874 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	f023 0210 	bic.w	r2, r3, #16
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	021b      	lsls	r3, r3, #8
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f023 0320 	bic.w	r3, r3, #32
 80078be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a22      	ldr	r2, [pc, #136]	; (8007958 <TIM_OC2_SetConfig+0xe4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d003      	beq.n	80078dc <TIM_OC2_SetConfig+0x68>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a21      	ldr	r2, [pc, #132]	; (800795c <TIM_OC2_SetConfig+0xe8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d10d      	bne.n	80078f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a17      	ldr	r2, [pc, #92]	; (8007958 <TIM_OC2_SetConfig+0xe4>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d003      	beq.n	8007908 <TIM_OC2_SetConfig+0x94>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a16      	ldr	r2, [pc, #88]	; (800795c <TIM_OC2_SetConfig+0xe8>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d113      	bne.n	8007930 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800790e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	4313      	orrs	r3, r2
 8007922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	621a      	str	r2, [r3, #32]
}
 800794a:	bf00      	nop
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	40010000 	.word	0x40010000
 800795c:	40010400 	.word	0x40010400

08007960 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 0303 	bic.w	r3, r3, #3
 8007996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	4313      	orrs	r3, r2
 80079a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	021b      	lsls	r3, r3, #8
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a21      	ldr	r2, [pc, #132]	; (8007a40 <TIM_OC3_SetConfig+0xe0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d003      	beq.n	80079c6 <TIM_OC3_SetConfig+0x66>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a20      	ldr	r2, [pc, #128]	; (8007a44 <TIM_OC3_SetConfig+0xe4>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d10d      	bne.n	80079e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a16      	ldr	r2, [pc, #88]	; (8007a40 <TIM_OC3_SetConfig+0xe0>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d003      	beq.n	80079f2 <TIM_OC3_SetConfig+0x92>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a15      	ldr	r2, [pc, #84]	; (8007a44 <TIM_OC3_SetConfig+0xe4>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d113      	bne.n	8007a1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	011b      	lsls	r3, r3, #4
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	011b      	lsls	r3, r3, #4
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	621a      	str	r2, [r3, #32]
}
 8007a34:	bf00      	nop
 8007a36:	371c      	adds	r7, #28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	40010000 	.word	0x40010000
 8007a44:	40010400 	.word	0x40010400

08007a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	021b      	lsls	r3, r3, #8
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	031b      	lsls	r3, r3, #12
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a12      	ldr	r2, [pc, #72]	; (8007aec <TIM_OC4_SetConfig+0xa4>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d003      	beq.n	8007ab0 <TIM_OC4_SetConfig+0x68>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a11      	ldr	r2, [pc, #68]	; (8007af0 <TIM_OC4_SetConfig+0xa8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d109      	bne.n	8007ac4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ab6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	019b      	lsls	r3, r3, #6
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	621a      	str	r2, [r3, #32]
}
 8007ade:	bf00      	nop
 8007ae0:	371c      	adds	r7, #28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	40010000 	.word	0x40010000
 8007af0:	40010400 	.word	0x40010400

08007af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	f023 0201 	bic.w	r2, r3, #1
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	011b      	lsls	r3, r3, #4
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f023 030a 	bic.w	r3, r3, #10
 8007b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	621a      	str	r2, [r3, #32]
}
 8007b46:	bf00      	nop
 8007b48:	371c      	adds	r7, #28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b087      	sub	sp, #28
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	60f8      	str	r0, [r7, #12]
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	f023 0210 	bic.w	r2, r3, #16
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	031b      	lsls	r3, r3, #12
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	011b      	lsls	r3, r3, #4
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	621a      	str	r2, [r3, #32]
}
 8007ba6:	bf00      	nop
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f043 0307 	orr.w	r3, r3, #7
 8007bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	609a      	str	r2, [r3, #8]
}
 8007bdc:	bf00      	nop
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	021a      	lsls	r2, r3, #8
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	609a      	str	r2, [r3, #8]
}
 8007c1c:	bf00      	nop
 8007c1e:	371c      	adds	r7, #28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d101      	bne.n	8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	e05a      	b.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a21      	ldr	r2, [pc, #132]	; (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d022      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c8c:	d01d      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1d      	ldr	r2, [pc, #116]	; (8007d08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d018      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a1b      	ldr	r2, [pc, #108]	; (8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d013      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a1a      	ldr	r2, [pc, #104]	; (8007d10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d00e      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a18      	ldr	r2, [pc, #96]	; (8007d14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d009      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a17      	ldr	r2, [pc, #92]	; (8007d18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d004      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a15      	ldr	r2, [pc, #84]	; (8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d10c      	bne.n	8007ce4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	40010000 	.word	0x40010000
 8007d08:	40000400 	.word	0x40000400
 8007d0c:	40000800 	.word	0x40000800
 8007d10:	40000c00 	.word	0x40000c00
 8007d14:	40010400 	.word	0x40010400
 8007d18:	40014000 	.word	0x40014000
 8007d1c:	40001800 	.word	0x40001800

08007d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e03f      	b.n	8007dda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d106      	bne.n	8007d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7fa ff72 	bl	8002c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2224      	movs	r2, #36	; 0x24
 8007d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68da      	ldr	r2, [r3, #12]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f9cb 	bl	8008128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	691a      	ldr	r2, [r3, #16]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	695a      	ldr	r2, [r3, #20]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68da      	ldr	r2, [r3, #12]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b08a      	sub	sp, #40	; 0x28
 8007de6:	af02      	add	r7, sp, #8
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	603b      	str	r3, [r7, #0]
 8007dee:	4613      	mov	r3, r2
 8007df0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007df2:	2300      	movs	r3, #0
 8007df4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d17c      	bne.n	8007efc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d002      	beq.n	8007e0e <HAL_UART_Transmit+0x2c>
 8007e08:	88fb      	ldrh	r3, [r7, #6]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e075      	b.n	8007efe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d101      	bne.n	8007e20 <HAL_UART_Transmit+0x3e>
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	e06e      	b.n	8007efe <HAL_UART_Transmit+0x11c>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2221      	movs	r2, #33	; 0x21
 8007e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e36:	f7fb f95b 	bl	80030f0 <HAL_GetTick>
 8007e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	88fa      	ldrh	r2, [r7, #6]
 8007e40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	88fa      	ldrh	r2, [r7, #6]
 8007e46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e50:	d108      	bne.n	8007e64 <HAL_UART_Transmit+0x82>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d104      	bne.n	8007e64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	61bb      	str	r3, [r7, #24]
 8007e62:	e003      	b.n	8007e6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007e74:	e02a      	b.n	8007ecc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2180      	movs	r1, #128	; 0x80
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 f8e2 	bl	800804a <UART_WaitOnFlagUntilTimeout>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e036      	b.n	8007efe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10b      	bne.n	8007eae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ea4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	3302      	adds	r3, #2
 8007eaa:	61bb      	str	r3, [r7, #24]
 8007eac:	e007      	b.n	8007ebe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	781a      	ldrb	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1cf      	bne.n	8007e76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	2200      	movs	r2, #0
 8007ede:	2140      	movs	r1, #64	; 0x40
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 f8b2 	bl	800804a <UART_WaitOnFlagUntilTimeout>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e006      	b.n	8007efe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e000      	b.n	8007efe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007efc:	2302      	movs	r3, #2
  }
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3720      	adds	r7, #32
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b08a      	sub	sp, #40	; 0x28
 8007f0a:	af02      	add	r7, sp, #8
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	60b9      	str	r1, [r7, #8]
 8007f10:	603b      	str	r3, [r7, #0]
 8007f12:	4613      	mov	r3, r2
 8007f14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b20      	cmp	r3, #32
 8007f24:	f040 808c 	bne.w	8008040 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <HAL_UART_Receive+0x2e>
 8007f2e:	88fb      	ldrh	r3, [r7, #6]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e084      	b.n	8008042 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d101      	bne.n	8007f46 <HAL_UART_Receive+0x40>
 8007f42:	2302      	movs	r3, #2
 8007f44:	e07d      	b.n	8008042 <HAL_UART_Receive+0x13c>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2222      	movs	r2, #34	; 0x22
 8007f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f62:	f7fb f8c5 	bl	80030f0 <HAL_GetTick>
 8007f66:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	88fa      	ldrh	r2, [r7, #6]
 8007f6c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	88fa      	ldrh	r2, [r7, #6]
 8007f72:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7c:	d108      	bne.n	8007f90 <HAL_UART_Receive+0x8a>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d104      	bne.n	8007f90 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	61bb      	str	r3, [r7, #24]
 8007f8e:	e003      	b.n	8007f98 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f94:	2300      	movs	r3, #0
 8007f96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007fa0:	e043      	b.n	800802a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2120      	movs	r1, #32
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 f84c 	bl	800804a <UART_WaitOnFlagUntilTimeout>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e042      	b.n	8008042 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10c      	bne.n	8007fdc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	3302      	adds	r3, #2
 8007fd8:	61bb      	str	r3, [r7, #24]
 8007fda:	e01f      	b.n	800801c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe4:	d007      	beq.n	8007ff6 <HAL_UART_Receive+0xf0>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10a      	bne.n	8008004 <HAL_UART_Receive+0xfe>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d106      	bne.n	8008004 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	701a      	strb	r2, [r3, #0]
 8008002:	e008      	b.n	8008016 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008010:	b2da      	uxtb	r2, r3
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	3301      	adds	r3, #1
 800801a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008020:	b29b      	uxth	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	b29a      	uxth	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800802e:	b29b      	uxth	r3, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1b6      	bne.n	8007fa2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2220      	movs	r2, #32
 8008038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	e000      	b.n	8008042 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008040:	2302      	movs	r3, #2
  }
}
 8008042:	4618      	mov	r0, r3
 8008044:	3720      	adds	r7, #32
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b090      	sub	sp, #64	; 0x40
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	603b      	str	r3, [r7, #0]
 8008056:	4613      	mov	r3, r2
 8008058:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800805a:	e050      	b.n	80080fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800805c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800805e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008062:	d04c      	beq.n	80080fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008066:	2b00      	cmp	r3, #0
 8008068:	d007      	beq.n	800807a <UART_WaitOnFlagUntilTimeout+0x30>
 800806a:	f7fb f841 	bl	80030f0 <HAL_GetTick>
 800806e:	4602      	mov	r2, r0
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008076:	429a      	cmp	r2, r3
 8008078:	d241      	bcs.n	80080fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	330c      	adds	r3, #12
 8008080:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	330c      	adds	r3, #12
 8008098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800809a:	637a      	str	r2, [r7, #52]	; 0x34
 800809c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e5      	bne.n	800807a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3314      	adds	r3, #20
 80080b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	613b      	str	r3, [r7, #16]
   return(result);
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f023 0301 	bic.w	r3, r3, #1
 80080c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3314      	adds	r3, #20
 80080cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080ce:	623a      	str	r2, [r7, #32]
 80080d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d2:	69f9      	ldr	r1, [r7, #28]
 80080d4:	6a3a      	ldr	r2, [r7, #32]
 80080d6:	e841 2300 	strex	r3, r2, [r1]
 80080da:	61bb      	str	r3, [r7, #24]
   return(result);
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1e5      	bne.n	80080ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e00f      	b.n	800811e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	4013      	ands	r3, r2
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	429a      	cmp	r2, r3
 800810c:	bf0c      	ite	eq
 800810e:	2301      	moveq	r3, #1
 8008110:	2300      	movne	r3, #0
 8008112:	b2db      	uxtb	r3, r3
 8008114:	461a      	mov	r2, r3
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	429a      	cmp	r2, r3
 800811a:	d09f      	beq.n	800805c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3740      	adds	r7, #64	; 0x40
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812c:	b09f      	sub	sp, #124	; 0x7c
 800812e:	af00      	add	r7, sp, #0
 8008130:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800813c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813e:	68d9      	ldr	r1, [r3, #12]
 8008140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	ea40 0301 	orr.w	r3, r0, r1
 8008148:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800814a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800814c:	689a      	ldr	r2, [r3, #8]
 800814e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	431a      	orrs	r2, r3
 8008154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	431a      	orrs	r2, r3
 800815a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	4313      	orrs	r3, r2
 8008160:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800816c:	f021 010c 	bic.w	r1, r1, #12
 8008170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008176:	430b      	orrs	r3, r1
 8008178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800817a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008186:	6999      	ldr	r1, [r3, #24]
 8008188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	ea40 0301 	orr.w	r3, r0, r1
 8008190:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	4bc5      	ldr	r3, [pc, #788]	; (80084ac <UART_SetConfig+0x384>)
 8008198:	429a      	cmp	r2, r3
 800819a:	d004      	beq.n	80081a6 <UART_SetConfig+0x7e>
 800819c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	4bc3      	ldr	r3, [pc, #780]	; (80084b0 <UART_SetConfig+0x388>)
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d103      	bne.n	80081ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081a6:	f7fe fb45 	bl	8006834 <HAL_RCC_GetPCLK2Freq>
 80081aa:	6778      	str	r0, [r7, #116]	; 0x74
 80081ac:	e002      	b.n	80081b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081ae:	f7fe fb2d 	bl	800680c <HAL_RCC_GetPCLK1Freq>
 80081b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081bc:	f040 80b6 	bne.w	800832c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081c2:	461c      	mov	r4, r3
 80081c4:	f04f 0500 	mov.w	r5, #0
 80081c8:	4622      	mov	r2, r4
 80081ca:	462b      	mov	r3, r5
 80081cc:	1891      	adds	r1, r2, r2
 80081ce:	6439      	str	r1, [r7, #64]	; 0x40
 80081d0:	415b      	adcs	r3, r3
 80081d2:	647b      	str	r3, [r7, #68]	; 0x44
 80081d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081d8:	1912      	adds	r2, r2, r4
 80081da:	eb45 0303 	adc.w	r3, r5, r3
 80081de:	f04f 0000 	mov.w	r0, #0
 80081e2:	f04f 0100 	mov.w	r1, #0
 80081e6:	00d9      	lsls	r1, r3, #3
 80081e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081ec:	00d0      	lsls	r0, r2, #3
 80081ee:	4602      	mov	r2, r0
 80081f0:	460b      	mov	r3, r1
 80081f2:	1911      	adds	r1, r2, r4
 80081f4:	6639      	str	r1, [r7, #96]	; 0x60
 80081f6:	416b      	adcs	r3, r5
 80081f8:	667b      	str	r3, [r7, #100]	; 0x64
 80081fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	461a      	mov	r2, r3
 8008200:	f04f 0300 	mov.w	r3, #0
 8008204:	1891      	adds	r1, r2, r2
 8008206:	63b9      	str	r1, [r7, #56]	; 0x38
 8008208:	415b      	adcs	r3, r3
 800820a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800820c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008210:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008214:	f7f8 fd48 	bl	8000ca8 <__aeabi_uldivmod>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4ba5      	ldr	r3, [pc, #660]	; (80084b4 <UART_SetConfig+0x38c>)
 800821e:	fba3 2302 	umull	r2, r3, r3, r2
 8008222:	095b      	lsrs	r3, r3, #5
 8008224:	011e      	lsls	r6, r3, #4
 8008226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008228:	461c      	mov	r4, r3
 800822a:	f04f 0500 	mov.w	r5, #0
 800822e:	4622      	mov	r2, r4
 8008230:	462b      	mov	r3, r5
 8008232:	1891      	adds	r1, r2, r2
 8008234:	6339      	str	r1, [r7, #48]	; 0x30
 8008236:	415b      	adcs	r3, r3
 8008238:	637b      	str	r3, [r7, #52]	; 0x34
 800823a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800823e:	1912      	adds	r2, r2, r4
 8008240:	eb45 0303 	adc.w	r3, r5, r3
 8008244:	f04f 0000 	mov.w	r0, #0
 8008248:	f04f 0100 	mov.w	r1, #0
 800824c:	00d9      	lsls	r1, r3, #3
 800824e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008252:	00d0      	lsls	r0, r2, #3
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	1911      	adds	r1, r2, r4
 800825a:	65b9      	str	r1, [r7, #88]	; 0x58
 800825c:	416b      	adcs	r3, r5
 800825e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	461a      	mov	r2, r3
 8008266:	f04f 0300 	mov.w	r3, #0
 800826a:	1891      	adds	r1, r2, r2
 800826c:	62b9      	str	r1, [r7, #40]	; 0x28
 800826e:	415b      	adcs	r3, r3
 8008270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008276:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800827a:	f7f8 fd15 	bl	8000ca8 <__aeabi_uldivmod>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	4b8c      	ldr	r3, [pc, #560]	; (80084b4 <UART_SetConfig+0x38c>)
 8008284:	fba3 1302 	umull	r1, r3, r3, r2
 8008288:	095b      	lsrs	r3, r3, #5
 800828a:	2164      	movs	r1, #100	; 0x64
 800828c:	fb01 f303 	mul.w	r3, r1, r3
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	00db      	lsls	r3, r3, #3
 8008294:	3332      	adds	r3, #50	; 0x32
 8008296:	4a87      	ldr	r2, [pc, #540]	; (80084b4 <UART_SetConfig+0x38c>)
 8008298:	fba2 2303 	umull	r2, r3, r2, r3
 800829c:	095b      	lsrs	r3, r3, #5
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082a4:	441e      	add	r6, r3
 80082a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082a8:	4618      	mov	r0, r3
 80082aa:	f04f 0100 	mov.w	r1, #0
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	1894      	adds	r4, r2, r2
 80082b4:	623c      	str	r4, [r7, #32]
 80082b6:	415b      	adcs	r3, r3
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
 80082ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082be:	1812      	adds	r2, r2, r0
 80082c0:	eb41 0303 	adc.w	r3, r1, r3
 80082c4:	f04f 0400 	mov.w	r4, #0
 80082c8:	f04f 0500 	mov.w	r5, #0
 80082cc:	00dd      	lsls	r5, r3, #3
 80082ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80082d2:	00d4      	lsls	r4, r2, #3
 80082d4:	4622      	mov	r2, r4
 80082d6:	462b      	mov	r3, r5
 80082d8:	1814      	adds	r4, r2, r0
 80082da:	653c      	str	r4, [r7, #80]	; 0x50
 80082dc:	414b      	adcs	r3, r1
 80082de:	657b      	str	r3, [r7, #84]	; 0x54
 80082e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	461a      	mov	r2, r3
 80082e6:	f04f 0300 	mov.w	r3, #0
 80082ea:	1891      	adds	r1, r2, r2
 80082ec:	61b9      	str	r1, [r7, #24]
 80082ee:	415b      	adcs	r3, r3
 80082f0:	61fb      	str	r3, [r7, #28]
 80082f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80082fa:	f7f8 fcd5 	bl	8000ca8 <__aeabi_uldivmod>
 80082fe:	4602      	mov	r2, r0
 8008300:	460b      	mov	r3, r1
 8008302:	4b6c      	ldr	r3, [pc, #432]	; (80084b4 <UART_SetConfig+0x38c>)
 8008304:	fba3 1302 	umull	r1, r3, r3, r2
 8008308:	095b      	lsrs	r3, r3, #5
 800830a:	2164      	movs	r1, #100	; 0x64
 800830c:	fb01 f303 	mul.w	r3, r1, r3
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	3332      	adds	r3, #50	; 0x32
 8008316:	4a67      	ldr	r2, [pc, #412]	; (80084b4 <UART_SetConfig+0x38c>)
 8008318:	fba2 2303 	umull	r2, r3, r2, r3
 800831c:	095b      	lsrs	r3, r3, #5
 800831e:	f003 0207 	and.w	r2, r3, #7
 8008322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4432      	add	r2, r6
 8008328:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800832a:	e0b9      	b.n	80084a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800832c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800832e:	461c      	mov	r4, r3
 8008330:	f04f 0500 	mov.w	r5, #0
 8008334:	4622      	mov	r2, r4
 8008336:	462b      	mov	r3, r5
 8008338:	1891      	adds	r1, r2, r2
 800833a:	6139      	str	r1, [r7, #16]
 800833c:	415b      	adcs	r3, r3
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008344:	1912      	adds	r2, r2, r4
 8008346:	eb45 0303 	adc.w	r3, r5, r3
 800834a:	f04f 0000 	mov.w	r0, #0
 800834e:	f04f 0100 	mov.w	r1, #0
 8008352:	00d9      	lsls	r1, r3, #3
 8008354:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008358:	00d0      	lsls	r0, r2, #3
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	eb12 0804 	adds.w	r8, r2, r4
 8008362:	eb43 0905 	adc.w	r9, r3, r5
 8008366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	4618      	mov	r0, r3
 800836c:	f04f 0100 	mov.w	r1, #0
 8008370:	f04f 0200 	mov.w	r2, #0
 8008374:	f04f 0300 	mov.w	r3, #0
 8008378:	008b      	lsls	r3, r1, #2
 800837a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800837e:	0082      	lsls	r2, r0, #2
 8008380:	4640      	mov	r0, r8
 8008382:	4649      	mov	r1, r9
 8008384:	f7f8 fc90 	bl	8000ca8 <__aeabi_uldivmod>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	4b49      	ldr	r3, [pc, #292]	; (80084b4 <UART_SetConfig+0x38c>)
 800838e:	fba3 2302 	umull	r2, r3, r3, r2
 8008392:	095b      	lsrs	r3, r3, #5
 8008394:	011e      	lsls	r6, r3, #4
 8008396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008398:	4618      	mov	r0, r3
 800839a:	f04f 0100 	mov.w	r1, #0
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	1894      	adds	r4, r2, r2
 80083a4:	60bc      	str	r4, [r7, #8]
 80083a6:	415b      	adcs	r3, r3
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083ae:	1812      	adds	r2, r2, r0
 80083b0:	eb41 0303 	adc.w	r3, r1, r3
 80083b4:	f04f 0400 	mov.w	r4, #0
 80083b8:	f04f 0500 	mov.w	r5, #0
 80083bc:	00dd      	lsls	r5, r3, #3
 80083be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083c2:	00d4      	lsls	r4, r2, #3
 80083c4:	4622      	mov	r2, r4
 80083c6:	462b      	mov	r3, r5
 80083c8:	1814      	adds	r4, r2, r0
 80083ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80083cc:	414b      	adcs	r3, r1
 80083ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f04f 0100 	mov.w	r1, #0
 80083da:	f04f 0200 	mov.w	r2, #0
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	008b      	lsls	r3, r1, #2
 80083e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083e8:	0082      	lsls	r2, r0, #2
 80083ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80083ee:	f7f8 fc5b 	bl	8000ca8 <__aeabi_uldivmod>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	4b2f      	ldr	r3, [pc, #188]	; (80084b4 <UART_SetConfig+0x38c>)
 80083f8:	fba3 1302 	umull	r1, r3, r3, r2
 80083fc:	095b      	lsrs	r3, r3, #5
 80083fe:	2164      	movs	r1, #100	; 0x64
 8008400:	fb01 f303 	mul.w	r3, r1, r3
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	011b      	lsls	r3, r3, #4
 8008408:	3332      	adds	r3, #50	; 0x32
 800840a:	4a2a      	ldr	r2, [pc, #168]	; (80084b4 <UART_SetConfig+0x38c>)
 800840c:	fba2 2303 	umull	r2, r3, r2, r3
 8008410:	095b      	lsrs	r3, r3, #5
 8008412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008416:	441e      	add	r6, r3
 8008418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800841a:	4618      	mov	r0, r3
 800841c:	f04f 0100 	mov.w	r1, #0
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	1894      	adds	r4, r2, r2
 8008426:	603c      	str	r4, [r7, #0]
 8008428:	415b      	adcs	r3, r3
 800842a:	607b      	str	r3, [r7, #4]
 800842c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008430:	1812      	adds	r2, r2, r0
 8008432:	eb41 0303 	adc.w	r3, r1, r3
 8008436:	f04f 0400 	mov.w	r4, #0
 800843a:	f04f 0500 	mov.w	r5, #0
 800843e:	00dd      	lsls	r5, r3, #3
 8008440:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008444:	00d4      	lsls	r4, r2, #3
 8008446:	4622      	mov	r2, r4
 8008448:	462b      	mov	r3, r5
 800844a:	eb12 0a00 	adds.w	sl, r2, r0
 800844e:	eb43 0b01 	adc.w	fp, r3, r1
 8008452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	4618      	mov	r0, r3
 8008458:	f04f 0100 	mov.w	r1, #0
 800845c:	f04f 0200 	mov.w	r2, #0
 8008460:	f04f 0300 	mov.w	r3, #0
 8008464:	008b      	lsls	r3, r1, #2
 8008466:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800846a:	0082      	lsls	r2, r0, #2
 800846c:	4650      	mov	r0, sl
 800846e:	4659      	mov	r1, fp
 8008470:	f7f8 fc1a 	bl	8000ca8 <__aeabi_uldivmod>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	4b0e      	ldr	r3, [pc, #56]	; (80084b4 <UART_SetConfig+0x38c>)
 800847a:	fba3 1302 	umull	r1, r3, r3, r2
 800847e:	095b      	lsrs	r3, r3, #5
 8008480:	2164      	movs	r1, #100	; 0x64
 8008482:	fb01 f303 	mul.w	r3, r1, r3
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	011b      	lsls	r3, r3, #4
 800848a:	3332      	adds	r3, #50	; 0x32
 800848c:	4a09      	ldr	r2, [pc, #36]	; (80084b4 <UART_SetConfig+0x38c>)
 800848e:	fba2 2303 	umull	r2, r3, r2, r3
 8008492:	095b      	lsrs	r3, r3, #5
 8008494:	f003 020f 	and.w	r2, r3, #15
 8008498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4432      	add	r2, r6
 800849e:	609a      	str	r2, [r3, #8]
}
 80084a0:	bf00      	nop
 80084a2:	377c      	adds	r7, #124	; 0x7c
 80084a4:	46bd      	mov	sp, r7
 80084a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084aa:	bf00      	nop
 80084ac:	40011000 	.word	0x40011000
 80084b0:	40011400 	.word	0x40011400
 80084b4:	51eb851f 	.word	0x51eb851f

080084b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084b8:	b084      	sub	sp, #16
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	f107 001c 	add.w	r0, r7, #28
 80084c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d122      	bne.n	8008516 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80084e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80084f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d105      	bne.n	800850a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f001 fb1c 	bl	8009b48 <USB_CoreReset>
 8008510:	4603      	mov	r3, r0
 8008512:	73fb      	strb	r3, [r7, #15]
 8008514:	e01a      	b.n	800854c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f001 fb10 	bl	8009b48 <USB_CoreReset>
 8008528:	4603      	mov	r3, r0
 800852a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800852c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800852e:	2b00      	cmp	r3, #0
 8008530:	d106      	bne.n	8008540 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008536:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	639a      	str	r2, [r3, #56]	; 0x38
 800853e:	e005      	b.n	800854c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008544:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800854c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854e:	2b01      	cmp	r3, #1
 8008550:	d10b      	bne.n	800856a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f043 0206 	orr.w	r2, r3, #6
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f043 0220 	orr.w	r2, r3, #32
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800856a:	7bfb      	ldrb	r3, [r7, #15]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008576:	b004      	add	sp, #16
 8008578:	4770      	bx	lr
	...

0800857c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	4613      	mov	r3, r2
 8008588:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800858a:	79fb      	ldrb	r3, [r7, #7]
 800858c:	2b02      	cmp	r3, #2
 800858e:	d165      	bne.n	800865c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	4a41      	ldr	r2, [pc, #260]	; (8008698 <USB_SetTurnaroundTime+0x11c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d906      	bls.n	80085a6 <USB_SetTurnaroundTime+0x2a>
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4a40      	ldr	r2, [pc, #256]	; (800869c <USB_SetTurnaroundTime+0x120>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d202      	bcs.n	80085a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80085a0:	230f      	movs	r3, #15
 80085a2:	617b      	str	r3, [r7, #20]
 80085a4:	e062      	b.n	800866c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	4a3c      	ldr	r2, [pc, #240]	; (800869c <USB_SetTurnaroundTime+0x120>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d306      	bcc.n	80085bc <USB_SetTurnaroundTime+0x40>
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	4a3b      	ldr	r2, [pc, #236]	; (80086a0 <USB_SetTurnaroundTime+0x124>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d202      	bcs.n	80085bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80085b6:	230e      	movs	r3, #14
 80085b8:	617b      	str	r3, [r7, #20]
 80085ba:	e057      	b.n	800866c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	4a38      	ldr	r2, [pc, #224]	; (80086a0 <USB_SetTurnaroundTime+0x124>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d306      	bcc.n	80085d2 <USB_SetTurnaroundTime+0x56>
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	4a37      	ldr	r2, [pc, #220]	; (80086a4 <USB_SetTurnaroundTime+0x128>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d202      	bcs.n	80085d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80085cc:	230d      	movs	r3, #13
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	e04c      	b.n	800866c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	4a33      	ldr	r2, [pc, #204]	; (80086a4 <USB_SetTurnaroundTime+0x128>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d306      	bcc.n	80085e8 <USB_SetTurnaroundTime+0x6c>
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	4a32      	ldr	r2, [pc, #200]	; (80086a8 <USB_SetTurnaroundTime+0x12c>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d802      	bhi.n	80085e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80085e2:	230c      	movs	r3, #12
 80085e4:	617b      	str	r3, [r7, #20]
 80085e6:	e041      	b.n	800866c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	4a2f      	ldr	r2, [pc, #188]	; (80086a8 <USB_SetTurnaroundTime+0x12c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d906      	bls.n	80085fe <USB_SetTurnaroundTime+0x82>
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	4a2e      	ldr	r2, [pc, #184]	; (80086ac <USB_SetTurnaroundTime+0x130>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d802      	bhi.n	80085fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80085f8:	230b      	movs	r3, #11
 80085fa:	617b      	str	r3, [r7, #20]
 80085fc:	e036      	b.n	800866c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	4a2a      	ldr	r2, [pc, #168]	; (80086ac <USB_SetTurnaroundTime+0x130>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d906      	bls.n	8008614 <USB_SetTurnaroundTime+0x98>
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	4a29      	ldr	r2, [pc, #164]	; (80086b0 <USB_SetTurnaroundTime+0x134>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d802      	bhi.n	8008614 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800860e:	230a      	movs	r3, #10
 8008610:	617b      	str	r3, [r7, #20]
 8008612:	e02b      	b.n	800866c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	4a26      	ldr	r2, [pc, #152]	; (80086b0 <USB_SetTurnaroundTime+0x134>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d906      	bls.n	800862a <USB_SetTurnaroundTime+0xae>
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4a25      	ldr	r2, [pc, #148]	; (80086b4 <USB_SetTurnaroundTime+0x138>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d202      	bcs.n	800862a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008624:	2309      	movs	r3, #9
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	e020      	b.n	800866c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	4a21      	ldr	r2, [pc, #132]	; (80086b4 <USB_SetTurnaroundTime+0x138>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d306      	bcc.n	8008640 <USB_SetTurnaroundTime+0xc4>
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	4a20      	ldr	r2, [pc, #128]	; (80086b8 <USB_SetTurnaroundTime+0x13c>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d802      	bhi.n	8008640 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800863a:	2308      	movs	r3, #8
 800863c:	617b      	str	r3, [r7, #20]
 800863e:	e015      	b.n	800866c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	4a1d      	ldr	r2, [pc, #116]	; (80086b8 <USB_SetTurnaroundTime+0x13c>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d906      	bls.n	8008656 <USB_SetTurnaroundTime+0xda>
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4a1c      	ldr	r2, [pc, #112]	; (80086bc <USB_SetTurnaroundTime+0x140>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d202      	bcs.n	8008656 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008650:	2307      	movs	r3, #7
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	e00a      	b.n	800866c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008656:	2306      	movs	r3, #6
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	e007      	b.n	800866c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800865c:	79fb      	ldrb	r3, [r7, #7]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d102      	bne.n	8008668 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008662:	2309      	movs	r3, #9
 8008664:	617b      	str	r3, [r7, #20]
 8008666:	e001      	b.n	800866c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008668:	2309      	movs	r3, #9
 800866a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	68da      	ldr	r2, [r3, #12]
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	029b      	lsls	r3, r3, #10
 8008680:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008684:	431a      	orrs	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	371c      	adds	r7, #28
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	00d8acbf 	.word	0x00d8acbf
 800869c:	00e4e1c0 	.word	0x00e4e1c0
 80086a0:	00f42400 	.word	0x00f42400
 80086a4:	01067380 	.word	0x01067380
 80086a8:	011a499f 	.word	0x011a499f
 80086ac:	01312cff 	.word	0x01312cff
 80086b0:	014ca43f 	.word	0x014ca43f
 80086b4:	016e3600 	.word	0x016e3600
 80086b8:	01a6ab1f 	.word	0x01a6ab1f
 80086bc:	01e84800 	.word	0x01e84800

080086c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	f043 0201 	orr.w	r2, r3, #1
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f023 0201 	bic.w	r2, r3, #1
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008710:	2300      	movs	r3, #0
 8008712:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d115      	bne.n	8008752 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008732:	2001      	movs	r0, #1
 8008734:	f7fa fce8 	bl	8003108 <HAL_Delay>
      ms++;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	3301      	adds	r3, #1
 800873c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f001 f972 	bl	8009a28 <USB_GetMode>
 8008744:	4603      	mov	r3, r0
 8008746:	2b01      	cmp	r3, #1
 8008748:	d01e      	beq.n	8008788 <USB_SetCurrentMode+0x84>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2b31      	cmp	r3, #49	; 0x31
 800874e:	d9f0      	bls.n	8008732 <USB_SetCurrentMode+0x2e>
 8008750:	e01a      	b.n	8008788 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008752:	78fb      	ldrb	r3, [r7, #3]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d115      	bne.n	8008784 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008764:	2001      	movs	r0, #1
 8008766:	f7fa fccf 	bl	8003108 <HAL_Delay>
      ms++;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3301      	adds	r3, #1
 800876e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f001 f959 	bl	8009a28 <USB_GetMode>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d005      	beq.n	8008788 <USB_SetCurrentMode+0x84>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b31      	cmp	r3, #49	; 0x31
 8008780:	d9f0      	bls.n	8008764 <USB_SetCurrentMode+0x60>
 8008782:	e001      	b.n	8008788 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e005      	b.n	8008794 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2b32      	cmp	r3, #50	; 0x32
 800878c:	d101      	bne.n	8008792 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e000      	b.n	8008794 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800879c:	b084      	sub	sp, #16
 800879e:	b580      	push	{r7, lr}
 80087a0:	b086      	sub	sp, #24
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80087aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80087b6:	2300      	movs	r3, #0
 80087b8:	613b      	str	r3, [r7, #16]
 80087ba:	e009      	b.n	80087d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	3340      	adds	r3, #64	; 0x40
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	2200      	movs	r2, #0
 80087c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	3301      	adds	r3, #1
 80087ce:	613b      	str	r3, [r7, #16]
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	2b0e      	cmp	r3, #14
 80087d4:	d9f2      	bls.n	80087bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80087d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d11c      	bne.n	8008816 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087ea:	f043 0302 	orr.w	r3, r3, #2
 80087ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008800:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	639a      	str	r2, [r3, #56]	; 0x38
 8008814:	e00b      	b.n	800882e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008826:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008834:	461a      	mov	r2, r3
 8008836:	2300      	movs	r3, #0
 8008838:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008840:	4619      	mov	r1, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008848:	461a      	mov	r2, r3
 800884a:	680b      	ldr	r3, [r1, #0]
 800884c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800884e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008850:	2b01      	cmp	r3, #1
 8008852:	d10c      	bne.n	800886e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008856:	2b00      	cmp	r3, #0
 8008858:	d104      	bne.n	8008864 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800885a:	2100      	movs	r1, #0
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f945 	bl	8008aec <USB_SetDevSpeed>
 8008862:	e008      	b.n	8008876 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008864:	2101      	movs	r1, #1
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f940 	bl	8008aec <USB_SetDevSpeed>
 800886c:	e003      	b.n	8008876 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800886e:	2103      	movs	r1, #3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f93b 	bl	8008aec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008876:	2110      	movs	r1, #16
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f8f3 	bl	8008a64 <USB_FlushTxFifo>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f90f 	bl	8008aac <USB_FlushRxFifo>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d001      	beq.n	8008898 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800889e:	461a      	mov	r2, r3
 80088a0:	2300      	movs	r3, #0
 80088a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088aa:	461a      	mov	r2, r3
 80088ac:	2300      	movs	r3, #0
 80088ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088b6:	461a      	mov	r2, r3
 80088b8:	2300      	movs	r3, #0
 80088ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088bc:	2300      	movs	r3, #0
 80088be:	613b      	str	r3, [r7, #16]
 80088c0:	e043      	b.n	800894a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	015a      	lsls	r2, r3, #5
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	4413      	add	r3, r2
 80088ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088d8:	d118      	bne.n	800890c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10a      	bne.n	80088f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ec:	461a      	mov	r2, r3
 80088ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	e013      	b.n	800891e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008902:	461a      	mov	r2, r3
 8008904:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008908:	6013      	str	r3, [r2, #0]
 800890a:	e008      	b.n	800891e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008918:	461a      	mov	r2, r3
 800891a:	2300      	movs	r3, #0
 800891c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	4413      	add	r3, r2
 8008926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800892a:	461a      	mov	r2, r3
 800892c:	2300      	movs	r3, #0
 800892e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800893c:	461a      	mov	r2, r3
 800893e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008942:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	3301      	adds	r3, #1
 8008948:	613b      	str	r3, [r7, #16]
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	429a      	cmp	r2, r3
 8008950:	d3b7      	bcc.n	80088c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008952:	2300      	movs	r3, #0
 8008954:	613b      	str	r3, [r7, #16]
 8008956:	e043      	b.n	80089e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	015a      	lsls	r2, r3, #5
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	4413      	add	r3, r2
 8008960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800896a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800896e:	d118      	bne.n	80089a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10a      	bne.n	800898c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008982:	461a      	mov	r2, r3
 8008984:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008988:	6013      	str	r3, [r2, #0]
 800898a:	e013      	b.n	80089b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008998:	461a      	mov	r2, r3
 800899a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	e008      	b.n	80089b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	015a      	lsls	r2, r3, #5
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	4413      	add	r3, r2
 80089aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ae:	461a      	mov	r2, r3
 80089b0:	2300      	movs	r3, #0
 80089b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c0:	461a      	mov	r2, r3
 80089c2:	2300      	movs	r3, #0
 80089c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d2:	461a      	mov	r2, r3
 80089d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	3301      	adds	r3, #1
 80089de:	613b      	str	r3, [r7, #16]
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d3b7      	bcc.n	8008958 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008a08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d105      	bne.n	8008a1c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	f043 0210 	orr.w	r2, r3, #16
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	699a      	ldr	r2, [r3, #24]
 8008a20:	4b0f      	ldr	r3, [pc, #60]	; (8008a60 <USB_DevInit+0x2c4>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d005      	beq.n	8008a3a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	f043 0208 	orr.w	r2, r3, #8
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d107      	bne.n	8008a50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a48:	f043 0304 	orr.w	r3, r3, #4
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a5c:	b004      	add	sp, #16
 8008a5e:	4770      	bx	lr
 8008a60:	803c3800 	.word	0x803c3800

08008a64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	019b      	lsls	r3, r3, #6
 8008a76:	f043 0220 	orr.w	r2, r3, #32
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3301      	adds	r3, #1
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	4a08      	ldr	r2, [pc, #32]	; (8008aa8 <USB_FlushTxFifo+0x44>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d901      	bls.n	8008a8e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e006      	b.n	8008a9c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	f003 0320 	and.w	r3, r3, #32
 8008a96:	2b20      	cmp	r3, #32
 8008a98:	d0f1      	beq.n	8008a7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	00030d40 	.word	0x00030d40

08008aac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2210      	movs	r2, #16
 8008abc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	4a08      	ldr	r2, [pc, #32]	; (8008ae8 <USB_FlushRxFifo+0x3c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d901      	bls.n	8008ace <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e006      	b.n	8008adc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	f003 0310 	and.w	r3, r3, #16
 8008ad6:	2b10      	cmp	r3, #16
 8008ad8:	d0f1      	beq.n	8008abe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	00030d40 	.word	0x00030d40

08008aec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	78fb      	ldrb	r3, [r7, #3]
 8008b06:	68f9      	ldr	r1, [r7, #12]
 8008b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b087      	sub	sp, #28
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f003 0306 	and.w	r3, r3, #6
 8008b36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d102      	bne.n	8008b44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	75fb      	strb	r3, [r7, #23]
 8008b42:	e00a      	b.n	8008b5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d002      	beq.n	8008b50 <USB_GetDevSpeed+0x32>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b06      	cmp	r3, #6
 8008b4e:	d102      	bne.n	8008b56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b50:	2302      	movs	r3, #2
 8008b52:	75fb      	strb	r3, [r7, #23]
 8008b54:	e001      	b.n	8008b5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008b56:	230f      	movs	r3, #15
 8008b58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	371c      	adds	r7, #28
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	785b      	ldrb	r3, [r3, #1]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d13a      	bne.n	8008bfa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8a:	69da      	ldr	r2, [r3, #28]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	f003 030f 	and.w	r3, r3, #15
 8008b94:	2101      	movs	r1, #1
 8008b96:	fa01 f303 	lsl.w	r3, r1, r3
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	68f9      	ldr	r1, [r7, #12]
 8008b9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	015a      	lsls	r2, r3, #5
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	4413      	add	r3, r2
 8008bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d155      	bne.n	8008c68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	015a      	lsls	r2, r3, #5
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	78db      	ldrb	r3, [r3, #3]
 8008bd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	059b      	lsls	r3, r3, #22
 8008bde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008be0:	4313      	orrs	r3, r2
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	0151      	lsls	r1, r2, #5
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	440a      	add	r2, r1
 8008bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	e036      	b.n	8008c68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c00:	69da      	ldr	r2, [r3, #28]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	f003 030f 	and.w	r3, r3, #15
 8008c0a:	2101      	movs	r1, #1
 8008c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c10:	041b      	lsls	r3, r3, #16
 8008c12:	68f9      	ldr	r1, [r7, #12]
 8008c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d11a      	bne.n	8008c68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	78db      	ldrb	r3, [r3, #3]
 8008c4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c4e:	430b      	orrs	r3, r1
 8008c50:	4313      	orrs	r3, r2
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	0151      	lsls	r1, r2, #5
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	440a      	add	r2, r1
 8008c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
	...

08008c78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	785b      	ldrb	r3, [r3, #1]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d161      	bne.n	8008d58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008caa:	d11f      	bne.n	8008cec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	015a      	lsls	r2, r3, #5
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	0151      	lsls	r1, r2, #5
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	440a      	add	r2, r1
 8008cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	0151      	lsls	r1, r2, #5
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	440a      	add	r2, r1
 8008ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ce6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	f003 030f 	and.w	r3, r3, #15
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	43db      	mvns	r3, r3
 8008d06:	68f9      	ldr	r1, [r7, #12]
 8008d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d16:	69da      	ldr	r2, [r3, #28]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	f003 030f 	and.w	r3, r3, #15
 8008d20:	2101      	movs	r1, #1
 8008d22:	fa01 f303 	lsl.w	r3, r1, r3
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	43db      	mvns	r3, r3
 8008d2a:	68f9      	ldr	r1, [r7, #12]
 8008d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d30:	4013      	ands	r3, r2
 8008d32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	0159      	lsls	r1, r3, #5
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	440b      	add	r3, r1
 8008d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d4e:	4619      	mov	r1, r3
 8008d50:	4b35      	ldr	r3, [pc, #212]	; (8008e28 <USB_DeactivateEndpoint+0x1b0>)
 8008d52:	4013      	ands	r3, r2
 8008d54:	600b      	str	r3, [r1, #0]
 8008d56:	e060      	b.n	8008e1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	015a      	lsls	r2, r3, #5
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d6e:	d11f      	bne.n	8008db0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	0151      	lsls	r1, r2, #5
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	440a      	add	r2, r1
 8008d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	0151      	lsls	r1, r2, #5
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	440a      	add	r2, r1
 8008da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008daa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	f003 030f 	and.w	r3, r3, #15
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc6:	041b      	lsls	r3, r3, #16
 8008dc8:	43db      	mvns	r3, r3
 8008dca:	68f9      	ldr	r1, [r7, #12]
 8008dcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dda:	69da      	ldr	r2, [r3, #28]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	f003 030f 	and.w	r3, r3, #15
 8008de4:	2101      	movs	r1, #1
 8008de6:	fa01 f303 	lsl.w	r3, r1, r3
 8008dea:	041b      	lsls	r3, r3, #16
 8008dec:	43db      	mvns	r3, r3
 8008dee:	68f9      	ldr	r1, [r7, #12]
 8008df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008df4:	4013      	ands	r3, r2
 8008df6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	0159      	lsls	r1, r3, #5
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	440b      	add	r3, r1
 8008e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e12:	4619      	mov	r1, r3
 8008e14:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <USB_DeactivateEndpoint+0x1b4>)
 8008e16:	4013      	ands	r3, r2
 8008e18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr
 8008e28:	ec337800 	.word	0xec337800
 8008e2c:	eff37800 	.word	0xeff37800

08008e30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b08a      	sub	sp, #40	; 0x28
 8008e34:	af02      	add	r7, sp, #8
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	785b      	ldrb	r3, [r3, #1]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	f040 815c 	bne.w	800910a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	695b      	ldr	r3, [r3, #20]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d132      	bne.n	8008ec0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	0151      	lsls	r1, r2, #5
 8008e6c:	69fa      	ldr	r2, [r7, #28]
 8008e6e:	440a      	add	r2, r1
 8008e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	015a      	lsls	r2, r3, #5
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	0151      	lsls	r1, r2, #5
 8008e90:	69fa      	ldr	r2, [r7, #28]
 8008e92:	440a      	add	r2, r1
 8008e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	69ba      	ldr	r2, [r7, #24]
 8008eae:	0151      	lsls	r1, r2, #5
 8008eb0:	69fa      	ldr	r2, [r7, #28]
 8008eb2:	440a      	add	r2, r1
 8008eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eb8:	0cdb      	lsrs	r3, r3, #19
 8008eba:	04db      	lsls	r3, r3, #19
 8008ebc:	6113      	str	r3, [r2, #16]
 8008ebe:	e074      	b.n	8008faa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	015a      	lsls	r2, r3, #5
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	69ba      	ldr	r2, [r7, #24]
 8008ed0:	0151      	lsls	r1, r2, #5
 8008ed2:	69fa      	ldr	r2, [r7, #28]
 8008ed4:	440a      	add	r2, r1
 8008ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eda:	0cdb      	lsrs	r3, r3, #19
 8008edc:	04db      	lsls	r3, r3, #19
 8008ede:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	69ba      	ldr	r2, [r7, #24]
 8008ef0:	0151      	lsls	r1, r2, #5
 8008ef2:	69fa      	ldr	r2, [r7, #28]
 8008ef4:	440a      	add	r2, r1
 8008ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008efa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008efe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f10:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	6959      	ldr	r1, [r3, #20]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	440b      	add	r3, r1
 8008f1c:	1e59      	subs	r1, r3, #1
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f26:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008f28:	4b9d      	ldr	r3, [pc, #628]	; (80091a0 <USB_EPStartXfer+0x370>)
 8008f2a:	400b      	ands	r3, r1
 8008f2c:	69b9      	ldr	r1, [r7, #24]
 8008f2e:	0148      	lsls	r0, r1, #5
 8008f30:	69f9      	ldr	r1, [r7, #28]
 8008f32:	4401      	add	r1, r0
 8008f34:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f48:	691a      	ldr	r2, [r3, #16]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f52:	69b9      	ldr	r1, [r7, #24]
 8008f54:	0148      	lsls	r0, r1, #5
 8008f56:	69f9      	ldr	r1, [r7, #28]
 8008f58:	4401      	add	r1, r0
 8008f5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	78db      	ldrb	r3, [r3, #3]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d11f      	bne.n	8008faa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	0151      	lsls	r1, r2, #5
 8008f7c:	69fa      	ldr	r2, [r7, #28]
 8008f7e:	440a      	add	r2, r1
 8008f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f84:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008f88:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	0151      	lsls	r1, r2, #5
 8008f9c:	69fa      	ldr	r2, [r7, #28]
 8008f9e:	440a      	add	r2, r1
 8008fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fa8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d14b      	bne.n	8009048 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d009      	beq.n	8008fcc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	78db      	ldrb	r3, [r3, #3]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d128      	bne.n	8009026 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d110      	bne.n	8009006 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	69ba      	ldr	r2, [r7, #24]
 8008ff4:	0151      	lsls	r1, r2, #5
 8008ff6:	69fa      	ldr	r2, [r7, #28]
 8008ff8:	440a      	add	r2, r1
 8008ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ffe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009002:	6013      	str	r3, [r2, #0]
 8009004:	e00f      	b.n	8009026 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	69fa      	ldr	r2, [r7, #28]
 800901a:	440a      	add	r2, r1
 800901c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009024:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	015a      	lsls	r2, r3, #5
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	4413      	add	r3, r2
 800902e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	69ba      	ldr	r2, [r7, #24]
 8009036:	0151      	lsls	r1, r2, #5
 8009038:	69fa      	ldr	r2, [r7, #28]
 800903a:	440a      	add	r2, r1
 800903c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009040:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009044:	6013      	str	r3, [r2, #0]
 8009046:	e12f      	b.n	80092a8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	69ba      	ldr	r2, [r7, #24]
 8009058:	0151      	lsls	r1, r2, #5
 800905a:	69fa      	ldr	r2, [r7, #28]
 800905c:	440a      	add	r2, r1
 800905e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009062:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009066:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	78db      	ldrb	r3, [r3, #3]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d015      	beq.n	800909c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 8117 	beq.w	80092a8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	f003 030f 	and.w	r3, r3, #15
 800908a:	2101      	movs	r1, #1
 800908c:	fa01 f303 	lsl.w	r3, r1, r3
 8009090:	69f9      	ldr	r1, [r7, #28]
 8009092:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009096:	4313      	orrs	r3, r2
 8009098:	634b      	str	r3, [r1, #52]	; 0x34
 800909a:	e105      	b.n	80092a8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d110      	bne.n	80090ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	69ba      	ldr	r2, [r7, #24]
 80090bc:	0151      	lsls	r1, r2, #5
 80090be:	69fa      	ldr	r2, [r7, #28]
 80090c0:	440a      	add	r2, r1
 80090c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	e00f      	b.n	80090ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	0151      	lsls	r1, r2, #5
 80090e0:	69fa      	ldr	r2, [r7, #28]
 80090e2:	440a      	add	r2, r1
 80090e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	68d9      	ldr	r1, [r3, #12]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	781a      	ldrb	r2, [r3, #0]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	b298      	uxth	r0, r3
 80090fc:	79fb      	ldrb	r3, [r7, #7]
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	4603      	mov	r3, r0
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f000 fa2b 	bl	800955e <USB_WritePacket>
 8009108:	e0ce      	b.n	80092a8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	4413      	add	r3, r2
 8009112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	69ba      	ldr	r2, [r7, #24]
 800911a:	0151      	lsls	r1, r2, #5
 800911c:	69fa      	ldr	r2, [r7, #28]
 800911e:	440a      	add	r2, r1
 8009120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009124:	0cdb      	lsrs	r3, r3, #19
 8009126:	04db      	lsls	r3, r3, #19
 8009128:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	69ba      	ldr	r2, [r7, #24]
 800913a:	0151      	lsls	r1, r2, #5
 800913c:	69fa      	ldr	r2, [r7, #28]
 800913e:	440a      	add	r2, r1
 8009140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009144:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009148:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800914c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d126      	bne.n	80091a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	4413      	add	r3, r2
 800915e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009162:	691a      	ldr	r2, [r3, #16]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800916c:	69b9      	ldr	r1, [r7, #24]
 800916e:	0148      	lsls	r0, r1, #5
 8009170:	69f9      	ldr	r1, [r7, #28]
 8009172:	4401      	add	r1, r0
 8009174:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009178:	4313      	orrs	r3, r2
 800917a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	69ba      	ldr	r2, [r7, #24]
 800918c:	0151      	lsls	r1, r2, #5
 800918e:	69fa      	ldr	r2, [r7, #28]
 8009190:	440a      	add	r2, r1
 8009192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800919a:	6113      	str	r3, [r2, #16]
 800919c:	e036      	b.n	800920c <USB_EPStartXfer+0x3dc>
 800919e:	bf00      	nop
 80091a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	695a      	ldr	r2, [r3, #20]
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	4413      	add	r3, r2
 80091ae:	1e5a      	subs	r2, r3, #1
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c6:	691a      	ldr	r2, [r3, #16]
 80091c8:	8afb      	ldrh	r3, [r7, #22]
 80091ca:	04d9      	lsls	r1, r3, #19
 80091cc:	4b39      	ldr	r3, [pc, #228]	; (80092b4 <USB_EPStartXfer+0x484>)
 80091ce:	400b      	ands	r3, r1
 80091d0:	69b9      	ldr	r1, [r7, #24]
 80091d2:	0148      	lsls	r0, r1, #5
 80091d4:	69f9      	ldr	r1, [r7, #28]
 80091d6:	4401      	add	r1, r0
 80091d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80091dc:	4313      	orrs	r3, r2
 80091de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ec:	691a      	ldr	r2, [r3, #16]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	8af9      	ldrh	r1, [r7, #22]
 80091f4:	fb01 f303 	mul.w	r3, r1, r3
 80091f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091fc:	69b9      	ldr	r1, [r7, #24]
 80091fe:	0148      	lsls	r0, r1, #5
 8009200:	69f9      	ldr	r1, [r7, #28]
 8009202:	4401      	add	r1, r0
 8009204:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009208:	4313      	orrs	r3, r2
 800920a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800920c:	79fb      	ldrb	r3, [r7, #7]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d10d      	bne.n	800922e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d009      	beq.n	800922e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	68d9      	ldr	r1, [r3, #12]
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922a:	460a      	mov	r2, r1
 800922c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	78db      	ldrb	r3, [r3, #3]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d128      	bne.n	8009288 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009242:	2b00      	cmp	r3, #0
 8009244:	d110      	bne.n	8009268 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	69ba      	ldr	r2, [r7, #24]
 8009256:	0151      	lsls	r1, r2, #5
 8009258:	69fa      	ldr	r2, [r7, #28]
 800925a:	440a      	add	r2, r1
 800925c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009260:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009264:	6013      	str	r3, [r2, #0]
 8009266:	e00f      	b.n	8009288 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	015a      	lsls	r2, r3, #5
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	4413      	add	r3, r2
 8009270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	69ba      	ldr	r2, [r7, #24]
 8009278:	0151      	lsls	r1, r2, #5
 800927a:	69fa      	ldr	r2, [r7, #28]
 800927c:	440a      	add	r2, r1
 800927e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009286:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	69ba      	ldr	r2, [r7, #24]
 8009298:	0151      	lsls	r1, r2, #5
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	440a      	add	r2, r1
 800929e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3720      	adds	r7, #32
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	1ff80000 	.word	0x1ff80000

080092b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b087      	sub	sp, #28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	4613      	mov	r3, r2
 80092c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	785b      	ldrb	r3, [r3, #1]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	f040 80cd 	bne.w	8009474 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d132      	bne.n	8009348 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	0151      	lsls	r1, r2, #5
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	440a      	add	r2, r1
 80092f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009304:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	4413      	add	r3, r2
 800930e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	0151      	lsls	r1, r2, #5
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	440a      	add	r2, r1
 800931c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009320:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009324:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	4413      	add	r3, r2
 800932e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	0151      	lsls	r1, r2, #5
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	440a      	add	r2, r1
 800933c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009340:	0cdb      	lsrs	r3, r3, #19
 8009342:	04db      	lsls	r3, r3, #19
 8009344:	6113      	str	r3, [r2, #16]
 8009346:	e04e      	b.n	80093e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	015a      	lsls	r2, r3, #5
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	4413      	add	r3, r2
 8009350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	0151      	lsls	r1, r2, #5
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	440a      	add	r2, r1
 800935e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009362:	0cdb      	lsrs	r3, r3, #19
 8009364:	04db      	lsls	r3, r3, #19
 8009366:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	4413      	add	r3, r2
 8009370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	0151      	lsls	r1, r2, #5
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	440a      	add	r2, r1
 800937e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009382:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009386:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800938a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	695a      	ldr	r2, [r3, #20]
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	429a      	cmp	r2, r3
 8009396:	d903      	bls.n	80093a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	689a      	ldr	r2, [r3, #8]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	015a      	lsls	r2, r3, #5
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	4413      	add	r3, r2
 80093a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	0151      	lsls	r1, r2, #5
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	440a      	add	r2, r1
 80093b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093cc:	691a      	ldr	r2, [r3, #16]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093d6:	6939      	ldr	r1, [r7, #16]
 80093d8:	0148      	lsls	r0, r1, #5
 80093da:	6979      	ldr	r1, [r7, #20]
 80093dc:	4401      	add	r1, r0
 80093de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093e2:	4313      	orrs	r3, r2
 80093e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80093e6:	79fb      	ldrb	r3, [r7, #7]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d11e      	bne.n	800942a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d009      	beq.n	8009408 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	015a      	lsls	r2, r3, #5
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009400:	461a      	mov	r2, r3
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	0151      	lsls	r1, r2, #5
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	440a      	add	r2, r1
 800941e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009422:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009426:	6013      	str	r3, [r2, #0]
 8009428:	e092      	b.n	8009550 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	0151      	lsls	r1, r2, #5
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	440a      	add	r2, r1
 8009440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009444:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009448:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d07e      	beq.n	8009550 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	f003 030f 	and.w	r3, r3, #15
 8009462:	2101      	movs	r1, #1
 8009464:	fa01 f303 	lsl.w	r3, r1, r3
 8009468:	6979      	ldr	r1, [r7, #20]
 800946a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800946e:	4313      	orrs	r3, r2
 8009470:	634b      	str	r3, [r1, #52]	; 0x34
 8009472:	e06d      	b.n	8009550 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	0151      	lsls	r1, r2, #5
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	440a      	add	r2, r1
 800948a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800948e:	0cdb      	lsrs	r3, r3, #19
 8009490:	04db      	lsls	r3, r3, #19
 8009492:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	0151      	lsls	r1, r2, #5
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	440a      	add	r2, r1
 80094aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094b6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	689a      	ldr	r2, [r3, #8]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	0151      	lsls	r1, r2, #5
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	440a      	add	r2, r1
 80094de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	015a      	lsls	r2, r3, #5
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	4413      	add	r3, r2
 80094f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f4:	691a      	ldr	r2, [r3, #16]
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094fe:	6939      	ldr	r1, [r7, #16]
 8009500:	0148      	lsls	r0, r1, #5
 8009502:	6979      	ldr	r1, [r7, #20]
 8009504:	4401      	add	r1, r0
 8009506:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800950a:	4313      	orrs	r3, r2
 800950c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d10d      	bne.n	8009530 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d009      	beq.n	8009530 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	68d9      	ldr	r1, [r3, #12]
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	015a      	lsls	r2, r3, #5
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	4413      	add	r3, r2
 8009528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800952c:	460a      	mov	r2, r1
 800952e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	015a      	lsls	r2, r3, #5
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	4413      	add	r3, r2
 8009538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	0151      	lsls	r1, r2, #5
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	440a      	add	r2, r1
 8009546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800954a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800954e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	371c      	adds	r7, #28
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800955e:	b480      	push	{r7}
 8009560:	b089      	sub	sp, #36	; 0x24
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	60b9      	str	r1, [r7, #8]
 8009568:	4611      	mov	r1, r2
 800956a:	461a      	mov	r2, r3
 800956c:	460b      	mov	r3, r1
 800956e:	71fb      	strb	r3, [r7, #7]
 8009570:	4613      	mov	r3, r2
 8009572:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800957c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009580:	2b00      	cmp	r3, #0
 8009582:	d123      	bne.n	80095cc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009584:	88bb      	ldrh	r3, [r7, #4]
 8009586:	3303      	adds	r3, #3
 8009588:	089b      	lsrs	r3, r3, #2
 800958a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800958c:	2300      	movs	r3, #0
 800958e:	61bb      	str	r3, [r7, #24]
 8009590:	e018      	b.n	80095c4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009592:	79fb      	ldrb	r3, [r7, #7]
 8009594:	031a      	lsls	r2, r3, #12
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	4413      	add	r3, r2
 800959a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800959e:	461a      	mov	r2, r3
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	3301      	adds	r3, #1
 80095aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	3301      	adds	r3, #1
 80095b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	3301      	adds	r3, #1
 80095b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	3301      	adds	r3, #1
 80095bc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	3301      	adds	r3, #1
 80095c2:	61bb      	str	r3, [r7, #24]
 80095c4:	69ba      	ldr	r2, [r7, #24]
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d3e2      	bcc.n	8009592 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3724      	adds	r7, #36	; 0x24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80095da:	b480      	push	{r7}
 80095dc:	b08b      	sub	sp, #44	; 0x2c
 80095de:	af00      	add	r7, sp, #0
 80095e0:	60f8      	str	r0, [r7, #12]
 80095e2:	60b9      	str	r1, [r7, #8]
 80095e4:	4613      	mov	r3, r2
 80095e6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80095f0:	88fb      	ldrh	r3, [r7, #6]
 80095f2:	089b      	lsrs	r3, r3, #2
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80095f8:	88fb      	ldrh	r3, [r7, #6]
 80095fa:	f003 0303 	and.w	r3, r3, #3
 80095fe:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009600:	2300      	movs	r3, #0
 8009602:	623b      	str	r3, [r7, #32]
 8009604:	e014      	b.n	8009630 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	601a      	str	r2, [r3, #0]
    pDest++;
 8009612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009614:	3301      	adds	r3, #1
 8009616:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	3301      	adds	r3, #1
 800961c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	3301      	adds	r3, #1
 8009622:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009626:	3301      	adds	r3, #1
 8009628:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	3301      	adds	r3, #1
 800962e:	623b      	str	r3, [r7, #32]
 8009630:	6a3a      	ldr	r2, [r7, #32]
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	429a      	cmp	r2, r3
 8009636:	d3e6      	bcc.n	8009606 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009638:	8bfb      	ldrh	r3, [r7, #30]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d01e      	beq.n	800967c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800963e:	2300      	movs	r3, #0
 8009640:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009648:	461a      	mov	r2, r3
 800964a:	f107 0310 	add.w	r3, r7, #16
 800964e:	6812      	ldr	r2, [r2, #0]
 8009650:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	b2db      	uxtb	r3, r3
 8009658:	00db      	lsls	r3, r3, #3
 800965a:	fa22 f303 	lsr.w	r3, r2, r3
 800965e:	b2da      	uxtb	r2, r3
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	701a      	strb	r2, [r3, #0]
      i++;
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	3301      	adds	r3, #1
 8009668:	623b      	str	r3, [r7, #32]
      pDest++;
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	3301      	adds	r3, #1
 800966e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009670:	8bfb      	ldrh	r3, [r7, #30]
 8009672:	3b01      	subs	r3, #1
 8009674:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009676:	8bfb      	ldrh	r3, [r7, #30]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1ea      	bne.n	8009652 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800967e:	4618      	mov	r0, r3
 8009680:	372c      	adds	r7, #44	; 0x2c
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800968a:	b480      	push	{r7}
 800968c:	b085      	sub	sp, #20
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	785b      	ldrb	r3, [r3, #1]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d12c      	bne.n	8009700 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	db12      	blt.n	80096de <USB_EPSetStall+0x54>
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00f      	beq.n	80096de <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	0151      	lsls	r1, r2, #5
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	440a      	add	r2, r1
 80096d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096dc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	015a      	lsls	r2, r3, #5
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	0151      	lsls	r1, r2, #5
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	440a      	add	r2, r1
 80096f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096fc:	6013      	str	r3, [r2, #0]
 80096fe:	e02b      	b.n	8009758 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	015a      	lsls	r2, r3, #5
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4413      	add	r3, r2
 8009708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	db12      	blt.n	8009738 <USB_EPSetStall+0xae>
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00f      	beq.n	8009738 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	015a      	lsls	r2, r3, #5
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	4413      	add	r3, r2
 8009720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	0151      	lsls	r1, r2, #5
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	440a      	add	r2, r1
 800972e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009732:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009736:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	0151      	lsls	r1, r2, #5
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	440a      	add	r2, r1
 800974e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009752:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009756:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009766:	b480      	push	{r7}
 8009768:	b085      	sub	sp, #20
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	785b      	ldrb	r3, [r3, #1]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d128      	bne.n	80097d4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	0151      	lsls	r1, r2, #5
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	440a      	add	r2, r1
 8009798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800979c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	78db      	ldrb	r3, [r3, #3]
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	d003      	beq.n	80097b2 <USB_EPClearStall+0x4c>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	78db      	ldrb	r3, [r3, #3]
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d138      	bne.n	8009824 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	0151      	lsls	r1, r2, #5
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	440a      	add	r2, r1
 80097c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097d0:	6013      	str	r3, [r2, #0]
 80097d2:	e027      	b.n	8009824 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	015a      	lsls	r2, r3, #5
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	4413      	add	r3, r2
 80097dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	0151      	lsls	r1, r2, #5
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	440a      	add	r2, r1
 80097ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	78db      	ldrb	r3, [r3, #3]
 80097f8:	2b03      	cmp	r3, #3
 80097fa:	d003      	beq.n	8009804 <USB_EPClearStall+0x9e>
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	78db      	ldrb	r3, [r3, #3]
 8009800:	2b02      	cmp	r3, #2
 8009802:	d10f      	bne.n	8009824 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	015a      	lsls	r2, r3, #5
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4413      	add	r3, r2
 800980c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	0151      	lsls	r1, r2, #5
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	440a      	add	r2, r1
 800981a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800981e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009822:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009832:	b480      	push	{r7}
 8009834:	b085      	sub	sp, #20
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	460b      	mov	r3, r1
 800983c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009850:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009854:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	78fb      	ldrb	r3, [r7, #3]
 8009860:	011b      	lsls	r3, r3, #4
 8009862:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009866:	68f9      	ldr	r1, [r7, #12]
 8009868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800986c:	4313      	orrs	r3, r2
 800986e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3714      	adds	r7, #20
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800987e:	b480      	push	{r7}
 8009880:	b085      	sub	sp, #20
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009898:	f023 0303 	bic.w	r3, r3, #3
 800989c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098ac:	f023 0302 	bic.w	r3, r3, #2
 80098b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098da:	f023 0303 	bic.w	r3, r3, #3
 80098de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098ee:	f043 0302 	orr.w	r3, r3, #2
 80098f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009902:	b480      	push	{r7}
 8009904:	b085      	sub	sp, #20
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	4013      	ands	r3, r2
 8009918:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800991a:	68fb      	ldr	r3, [r7, #12]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	4013      	ands	r3, r2
 800994a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	0c1b      	lsrs	r3, r3, #16
}
 8009950:	4618      	mov	r0, r3
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	4013      	ands	r3, r2
 800997e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	b29b      	uxth	r3, r3
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80099a0:	78fb      	ldrb	r3, [r7, #3]
 80099a2:	015a      	lsls	r2, r3, #5
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4413      	add	r3, r2
 80099a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b6:	695b      	ldr	r3, [r3, #20]
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	4013      	ands	r3, r2
 80099bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099be:	68bb      	ldr	r3, [r7, #8]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3714      	adds	r7, #20
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80099f0:	78fb      	ldrb	r3, [r7, #3]
 80099f2:	f003 030f 	and.w	r3, r3, #15
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	fa22 f303 	lsr.w	r3, r2, r3
 80099fc:	01db      	lsls	r3, r3, #7
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009a06:	78fb      	ldrb	r3, [r7, #3]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	4013      	ands	r3, r2
 8009a18:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a1a:	68bb      	ldr	r3, [r7, #8]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	371c      	adds	r7, #28
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	695b      	ldr	r3, [r3, #20]
 8009a34:	f003 0301 	and.w	r3, r3, #1
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a5e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009a62:	f023 0307 	bic.w	r3, r3, #7
 8009a66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
	...

08009a8c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b087      	sub	sp, #28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	460b      	mov	r3, r1
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	333c      	adds	r3, #60	; 0x3c
 8009aa2:	3304      	adds	r3, #4
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	4a26      	ldr	r2, [pc, #152]	; (8009b44 <USB_EP0_OutStart+0xb8>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d90a      	bls.n	8009ac6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009abc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ac0:	d101      	bne.n	8009ac6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	e037      	b.n	8009b36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009acc:	461a      	mov	r2, r3
 8009ace:	2300      	movs	r3, #0
 8009ad0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ae0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ae4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009af4:	f043 0318 	orr.w	r3, r3, #24
 8009af8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b08:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009b0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009b0e:	7afb      	ldrb	r3, [r7, #11]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d10f      	bne.n	8009b34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b2e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009b32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	371c      	adds	r7, #28
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	4f54300a 	.word	0x4f54300a

08009b48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b50:	2300      	movs	r3, #0
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	3301      	adds	r3, #1
 8009b58:	60fb      	str	r3, [r7, #12]
 8009b5a:	4a13      	ldr	r2, [pc, #76]	; (8009ba8 <USB_CoreReset+0x60>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d901      	bls.n	8009b64 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8009b60:	2303      	movs	r3, #3
 8009b62:	e01a      	b.n	8009b9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	daf3      	bge.n	8009b54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	f043 0201 	orr.w	r2, r3, #1
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	60fb      	str	r3, [r7, #12]
 8009b82:	4a09      	ldr	r2, [pc, #36]	; (8009ba8 <USB_CoreReset+0x60>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d901      	bls.n	8009b8c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	e006      	b.n	8009b9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	691b      	ldr	r3, [r3, #16]
 8009b90:	f003 0301 	and.w	r3, r3, #1
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d0f1      	beq.n	8009b7c <USB_CoreReset+0x34>

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	00030d40 	.word	0x00030d40

08009bac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009bb0:	4904      	ldr	r1, [pc, #16]	; (8009bc4 <MX_FATFS_Init+0x18>)
 8009bb2:	4805      	ldr	r0, [pc, #20]	; (8009bc8 <MX_FATFS_Init+0x1c>)
 8009bb4:	f004 fb58 	bl	800e268 <FATFS_LinkDriver>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	461a      	mov	r2, r3
 8009bbc:	4b03      	ldr	r3, [pc, #12]	; (8009bcc <MX_FATFS_Init+0x20>)
 8009bbe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009bc0:	bf00      	nop
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	2000a5e8 	.word	0x2000a5e8
 8009bc8:	2000000c 	.word	0x2000000c
 8009bcc:	2000a5ec 	.word	0x2000a5ec

08009bd0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009bd4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	4603      	mov	r3, r0
 8009be8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 f9dd 	bl	8009fac <USER_SPI_initialize>
 8009bf2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8009c06:	79fb      	ldrb	r3, [r7, #7]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 fab9 	bl	800a180 <USER_SPI_status>
 8009c0e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60b9      	str	r1, [r7, #8]
 8009c20:	607a      	str	r2, [r7, #4]
 8009c22:	603b      	str	r3, [r7, #0]
 8009c24:	4603      	mov	r3, r0
 8009c26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8009c28:	7bf8      	ldrb	r0, [r7, #15]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	68b9      	ldr	r1, [r7, #8]
 8009c30:	f000 fabc 	bl	800a1ac <USER_SPI_read>
 8009c34:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
 8009c48:	603b      	str	r3, [r7, #0]
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8009c4e:	7bf8      	ldrb	r0, [r7, #15]
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	68b9      	ldr	r1, [r7, #8]
 8009c56:	f000 fb0f 	bl	800a278 <USER_SPI_write>
 8009c5a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	603a      	str	r2, [r7, #0]
 8009c6e:	71fb      	strb	r3, [r7, #7]
 8009c70:	460b      	mov	r3, r1
 8009c72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8009c74:	79b9      	ldrb	r1, [r7, #6]
 8009c76:	79fb      	ldrb	r3, [r7, #7]
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 fb78 	bl	800a370 <USER_SPI_ioctl>
 8009c80:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009c94:	f7f9 fa2c 	bl	80030f0 <HAL_GetTick>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	4a04      	ldr	r2, [pc, #16]	; (8009cac <SPI_Timer_On+0x20>)
 8009c9c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8009c9e:	4a04      	ldr	r2, [pc, #16]	; (8009cb0 <SPI_Timer_On+0x24>)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6013      	str	r3, [r2, #0]
}
 8009ca4:	bf00      	nop
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	2000aa50 	.word	0x2000aa50
 8009cb0:	2000aa54 	.word	0x2000aa54

08009cb4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009cb8:	f7f9 fa1a 	bl	80030f0 <HAL_GetTick>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	4b06      	ldr	r3, [pc, #24]	; (8009cd8 <SPI_Timer_Status+0x24>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	1ad2      	subs	r2, r2, r3
 8009cc4:	4b05      	ldr	r3, [pc, #20]	; (8009cdc <SPI_Timer_Status+0x28>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	bf34      	ite	cc
 8009ccc:	2301      	movcc	r3, #1
 8009cce:	2300      	movcs	r3, #0
 8009cd0:	b2db      	uxtb	r3, r3
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	2000aa50 	.word	0x2000aa50
 8009cdc:	2000aa54 	.word	0x2000aa54

08009ce0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af02      	add	r7, sp, #8
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009cea:	f107 020f 	add.w	r2, r7, #15
 8009cee:	1df9      	adds	r1, r7, #7
 8009cf0:	2332      	movs	r3, #50	; 0x32
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	4804      	ldr	r0, [pc, #16]	; (8009d08 <xchg_spi+0x28>)
 8009cf8:	f7fc fe6b 	bl	80069d2 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20009f1c 	.word	0x20009f1c

08009d0c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009d0c:	b590      	push	{r4, r7, lr}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8009d16:	2300      	movs	r3, #0
 8009d18:	60fb      	str	r3, [r7, #12]
 8009d1a:	e00a      	b.n	8009d32 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	18d4      	adds	r4, r2, r3
 8009d22:	20ff      	movs	r0, #255	; 0xff
 8009d24:	f7ff ffdc 	bl	8009ce0 <xchg_spi>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	60fb      	str	r3, [r7, #12]
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d3f0      	bcc.n	8009d1c <rcvr_spi_multi+0x10>
	}
}
 8009d3a:	bf00      	nop
 8009d3c:	bf00      	nop
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd90      	pop	{r4, r7, pc}

08009d44 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60fb      	str	r3, [r7, #12]
 8009d52:	e009      	b.n	8009d68 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	4413      	add	r3, r2
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7ff ffbf 	bl	8009ce0 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	3301      	adds	r3, #1
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d3f1      	bcc.n	8009d54 <xmit_spi_multi+0x10>
	}
}
 8009d70:	bf00      	nop
 8009d72:	bf00      	nop
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b086      	sub	sp, #24
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009d82:	f7f9 f9b5 	bl	80030f0 <HAL_GetTick>
 8009d86:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8009d8c:	20ff      	movs	r0, #255	; 0xff
 8009d8e:	f7ff ffa7 	bl	8009ce0 <xchg_spi>
 8009d92:	4603      	mov	r3, r0
 8009d94:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	2bff      	cmp	r3, #255	; 0xff
 8009d9a:	d007      	beq.n	8009dac <wait_ready+0x32>
 8009d9c:	f7f9 f9a8 	bl	80030f0 <HAL_GetTick>
 8009da0:	4602      	mov	r2, r0
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d8ef      	bhi.n	8009d8c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
 8009dae:	2bff      	cmp	r3, #255	; 0xff
 8009db0:	bf0c      	ite	eq
 8009db2:	2301      	moveq	r3, #1
 8009db4:	2300      	movne	r3, #0
 8009db6:	b2db      	uxtb	r3, r3
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009dca:	4804      	ldr	r0, [pc, #16]	; (8009ddc <despiselect+0x1c>)
 8009dcc:	f7f9 fed8 	bl	8003b80 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8009dd0:	20ff      	movs	r0, #255	; 0xff
 8009dd2:	f7ff ff85 	bl	8009ce0 <xchg_spi>

}
 8009dd6:	bf00      	nop
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	40021400 	.word	0x40021400

08009de0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009de4:	2200      	movs	r2, #0
 8009de6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009dea:	480a      	ldr	r0, [pc, #40]	; (8009e14 <spiselect+0x34>)
 8009dec:	f7f9 fec8 	bl	8003b80 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8009df0:	20ff      	movs	r0, #255	; 0xff
 8009df2:	f7ff ff75 	bl	8009ce0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009df6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009dfa:	f7ff ffbe 	bl	8009d7a <wait_ready>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <spiselect+0x28>
 8009e04:	2301      	movs	r3, #1
 8009e06:	e002      	b.n	8009e0e <spiselect+0x2e>

	despiselect();
 8009e08:	f7ff ffda 	bl	8009dc0 <despiselect>
	return 0;	/* Timeout */
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	40021400 	.word	0x40021400

08009e18 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8009e22:	20c8      	movs	r0, #200	; 0xc8
 8009e24:	f7ff ff32 	bl	8009c8c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009e28:	20ff      	movs	r0, #255	; 0xff
 8009e2a:	f7ff ff59 	bl	8009ce0 <xchg_spi>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009e32:	7bfb      	ldrb	r3, [r7, #15]
 8009e34:	2bff      	cmp	r3, #255	; 0xff
 8009e36:	d104      	bne.n	8009e42 <rcvr_datablock+0x2a>
 8009e38:	f7ff ff3c 	bl	8009cb4 <SPI_Timer_Status>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1f2      	bne.n	8009e28 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009e42:	7bfb      	ldrb	r3, [r7, #15]
 8009e44:	2bfe      	cmp	r3, #254	; 0xfe
 8009e46:	d001      	beq.n	8009e4c <rcvr_datablock+0x34>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	e00a      	b.n	8009e62 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8009e4c:	6839      	ldr	r1, [r7, #0]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff ff5c 	bl	8009d0c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009e54:	20ff      	movs	r0, #255	; 0xff
 8009e56:	f7ff ff43 	bl	8009ce0 <xchg_spi>
 8009e5a:	20ff      	movs	r0, #255	; 0xff
 8009e5c:	f7ff ff40 	bl	8009ce0 <xchg_spi>

	return 1;						/* Function succeeded */
 8009e60:	2301      	movs	r3, #1
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b084      	sub	sp, #16
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	460b      	mov	r3, r1
 8009e74:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8009e76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009e7a:	f7ff ff7e 	bl	8009d7a <wait_ready>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d101      	bne.n	8009e88 <xmit_datablock+0x1e>
 8009e84:	2300      	movs	r3, #0
 8009e86:	e01e      	b.n	8009ec6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8009e88:	78fb      	ldrb	r3, [r7, #3]
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7ff ff28 	bl	8009ce0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8009e90:	78fb      	ldrb	r3, [r7, #3]
 8009e92:	2bfd      	cmp	r3, #253	; 0xfd
 8009e94:	d016      	beq.n	8009ec4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8009e96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7ff ff52 	bl	8009d44 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009ea0:	20ff      	movs	r0, #255	; 0xff
 8009ea2:	f7ff ff1d 	bl	8009ce0 <xchg_spi>
 8009ea6:	20ff      	movs	r0, #255	; 0xff
 8009ea8:	f7ff ff1a 	bl	8009ce0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009eac:	20ff      	movs	r0, #255	; 0xff
 8009eae:	f7ff ff17 	bl	8009ce0 <xchg_spi>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	f003 031f 	and.w	r3, r3, #31
 8009ebc:	2b05      	cmp	r3, #5
 8009ebe:	d001      	beq.n	8009ec4 <xmit_datablock+0x5a>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	e000      	b.n	8009ec6 <xmit_datablock+0x5c>
	}
	return 1;
 8009ec4:	2301      	movs	r3, #1
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	6039      	str	r1, [r7, #0]
 8009ed8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	da0e      	bge.n	8009f00 <send_cmd+0x32>
		cmd &= 0x7F;
 8009ee2:	79fb      	ldrb	r3, [r7, #7]
 8009ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ee8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009eea:	2100      	movs	r1, #0
 8009eec:	2037      	movs	r0, #55	; 0x37
 8009eee:	f7ff ffee 	bl	8009ece <send_cmd>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8009ef6:	7bbb      	ldrb	r3, [r7, #14]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d901      	bls.n	8009f00 <send_cmd+0x32>
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
 8009efe:	e051      	b.n	8009fa4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009f00:	79fb      	ldrb	r3, [r7, #7]
 8009f02:	2b0c      	cmp	r3, #12
 8009f04:	d008      	beq.n	8009f18 <send_cmd+0x4a>
		despiselect();
 8009f06:	f7ff ff5b 	bl	8009dc0 <despiselect>
		if (!spiselect()) return 0xFF;
 8009f0a:	f7ff ff69 	bl	8009de0 <spiselect>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <send_cmd+0x4a>
 8009f14:	23ff      	movs	r3, #255	; 0xff
 8009f16:	e045      	b.n	8009fa4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009f18:	79fb      	ldrb	r3, [r7, #7]
 8009f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7ff fedd 	bl	8009ce0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	0e1b      	lsrs	r3, r3, #24
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7ff fed7 	bl	8009ce0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	0c1b      	lsrs	r3, r3, #16
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7ff fed1 	bl	8009ce0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	0a1b      	lsrs	r3, r3, #8
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7ff fecb 	bl	8009ce0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7ff fec6 	bl	8009ce0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8009f54:	2301      	movs	r3, #1
 8009f56:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009f58:	79fb      	ldrb	r3, [r7, #7]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <send_cmd+0x94>
 8009f5e:	2395      	movs	r3, #149	; 0x95
 8009f60:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009f62:	79fb      	ldrb	r3, [r7, #7]
 8009f64:	2b08      	cmp	r3, #8
 8009f66:	d101      	bne.n	8009f6c <send_cmd+0x9e>
 8009f68:	2387      	movs	r3, #135	; 0x87
 8009f6a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff feb6 	bl	8009ce0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009f74:	79fb      	ldrb	r3, [r7, #7]
 8009f76:	2b0c      	cmp	r3, #12
 8009f78:	d102      	bne.n	8009f80 <send_cmd+0xb2>
 8009f7a:	20ff      	movs	r0, #255	; 0xff
 8009f7c:	f7ff feb0 	bl	8009ce0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009f80:	230a      	movs	r3, #10
 8009f82:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8009f84:	20ff      	movs	r0, #255	; 0xff
 8009f86:	f7ff feab 	bl	8009ce0 <xchg_spi>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8009f8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	da05      	bge.n	8009fa2 <send_cmd+0xd4>
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	73fb      	strb	r3, [r7, #15]
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1f0      	bne.n	8009f84 <send_cmd+0xb6>

	return res;							/* Return received response */
 8009fa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009fac:	b590      	push	{r4, r7, lr}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d001      	beq.n	8009fc0 <USER_SPI_initialize+0x14>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e0d4      	b.n	800a16a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009fc0:	4b6c      	ldr	r3, [pc, #432]	; (800a174 <USER_SPI_initialize+0x1c8>)
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	f003 0302 	and.w	r3, r3, #2
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <USER_SPI_initialize+0x2a>
 8009fce:	4b69      	ldr	r3, [pc, #420]	; (800a174 <USER_SPI_initialize+0x1c8>)
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	e0c9      	b.n	800a16a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8009fd6:	4b68      	ldr	r3, [pc, #416]	; (800a178 <USER_SPI_initialize+0x1cc>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	4b66      	ldr	r3, [pc, #408]	; (800a178 <USER_SPI_initialize+0x1cc>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8009fe4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009fe6:	230a      	movs	r3, #10
 8009fe8:	73fb      	strb	r3, [r7, #15]
 8009fea:	e005      	b.n	8009ff8 <USER_SPI_initialize+0x4c>
 8009fec:	20ff      	movs	r0, #255	; 0xff
 8009fee:	f7ff fe77 	bl	8009ce0 <xchg_spi>
 8009ff2:	7bfb      	ldrb	r3, [r7, #15]
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	73fb      	strb	r3, [r7, #15]
 8009ff8:	7bfb      	ldrb	r3, [r7, #15]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1f6      	bne.n	8009fec <USER_SPI_initialize+0x40>

	ty = 0;
 8009ffe:	2300      	movs	r3, #0
 800a000:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800a002:	2100      	movs	r1, #0
 800a004:	2000      	movs	r0, #0
 800a006:	f7ff ff62 	bl	8009ece <send_cmd>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	f040 808b 	bne.w	800a128 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800a012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a016:	f7ff fe39 	bl	8009c8c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a01a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a01e:	2008      	movs	r0, #8
 800a020:	f7ff ff55 	bl	8009ece <send_cmd>
 800a024:	4603      	mov	r3, r0
 800a026:	2b01      	cmp	r3, #1
 800a028:	d151      	bne.n	800a0ce <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800a02a:	2300      	movs	r3, #0
 800a02c:	73fb      	strb	r3, [r7, #15]
 800a02e:	e00d      	b.n	800a04c <USER_SPI_initialize+0xa0>
 800a030:	7bfc      	ldrb	r4, [r7, #15]
 800a032:	20ff      	movs	r0, #255	; 0xff
 800a034:	f7ff fe54 	bl	8009ce0 <xchg_spi>
 800a038:	4603      	mov	r3, r0
 800a03a:	461a      	mov	r2, r3
 800a03c:	f107 0310 	add.w	r3, r7, #16
 800a040:	4423      	add	r3, r4
 800a042:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a046:	7bfb      	ldrb	r3, [r7, #15]
 800a048:	3301      	adds	r3, #1
 800a04a:	73fb      	strb	r3, [r7, #15]
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
 800a04e:	2b03      	cmp	r3, #3
 800a050:	d9ee      	bls.n	800a030 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a052:	7abb      	ldrb	r3, [r7, #10]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d167      	bne.n	800a128 <USER_SPI_initialize+0x17c>
 800a058:	7afb      	ldrb	r3, [r7, #11]
 800a05a:	2baa      	cmp	r3, #170	; 0xaa
 800a05c:	d164      	bne.n	800a128 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a05e:	bf00      	nop
 800a060:	f7ff fe28 	bl	8009cb4 <SPI_Timer_Status>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d007      	beq.n	800a07a <USER_SPI_initialize+0xce>
 800a06a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a06e:	20a9      	movs	r0, #169	; 0xa9
 800a070:	f7ff ff2d 	bl	8009ece <send_cmd>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1f2      	bne.n	800a060 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a07a:	f7ff fe1b 	bl	8009cb4 <SPI_Timer_Status>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d051      	beq.n	800a128 <USER_SPI_initialize+0x17c>
 800a084:	2100      	movs	r1, #0
 800a086:	203a      	movs	r0, #58	; 0x3a
 800a088:	f7ff ff21 	bl	8009ece <send_cmd>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d14a      	bne.n	800a128 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a092:	2300      	movs	r3, #0
 800a094:	73fb      	strb	r3, [r7, #15]
 800a096:	e00d      	b.n	800a0b4 <USER_SPI_initialize+0x108>
 800a098:	7bfc      	ldrb	r4, [r7, #15]
 800a09a:	20ff      	movs	r0, #255	; 0xff
 800a09c:	f7ff fe20 	bl	8009ce0 <xchg_spi>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f107 0310 	add.w	r3, r7, #16
 800a0a8:	4423      	add	r3, r4
 800a0aa:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	73fb      	strb	r3, [r7, #15]
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	d9ee      	bls.n	800a098 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a0ba:	7a3b      	ldrb	r3, [r7, #8]
 800a0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <USER_SPI_initialize+0x11c>
 800a0c4:	230c      	movs	r3, #12
 800a0c6:	e000      	b.n	800a0ca <USER_SPI_initialize+0x11e>
 800a0c8:	2304      	movs	r3, #4
 800a0ca:	737b      	strb	r3, [r7, #13]
 800a0cc:	e02c      	b.n	800a128 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	20a9      	movs	r0, #169	; 0xa9
 800a0d2:	f7ff fefc 	bl	8009ece <send_cmd>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d804      	bhi.n	800a0e6 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800a0dc:	2302      	movs	r3, #2
 800a0de:	737b      	strb	r3, [r7, #13]
 800a0e0:	23a9      	movs	r3, #169	; 0xa9
 800a0e2:	73bb      	strb	r3, [r7, #14]
 800a0e4:	e003      	b.n	800a0ee <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	737b      	strb	r3, [r7, #13]
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a0ee:	bf00      	nop
 800a0f0:	f7ff fde0 	bl	8009cb4 <SPI_Timer_Status>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d007      	beq.n	800a10a <USER_SPI_initialize+0x15e>
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7ff fee5 	bl	8009ece <send_cmd>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1f2      	bne.n	800a0f0 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a10a:	f7ff fdd3 	bl	8009cb4 <SPI_Timer_Status>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d007      	beq.n	800a124 <USER_SPI_initialize+0x178>
 800a114:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a118:	2010      	movs	r0, #16
 800a11a:	f7ff fed8 	bl	8009ece <send_cmd>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d001      	beq.n	800a128 <USER_SPI_initialize+0x17c>
				ty = 0;
 800a124:	2300      	movs	r3, #0
 800a126:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800a128:	4a14      	ldr	r2, [pc, #80]	; (800a17c <USER_SPI_initialize+0x1d0>)
 800a12a:	7b7b      	ldrb	r3, [r7, #13]
 800a12c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800a12e:	f7ff fe47 	bl	8009dc0 <despiselect>

	if (ty) {			/* OK */
 800a132:	7b7b      	ldrb	r3, [r7, #13]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d012      	beq.n	800a15e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800a138:	4b0f      	ldr	r3, [pc, #60]	; (800a178 <USER_SPI_initialize+0x1cc>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a142:	4b0d      	ldr	r3, [pc, #52]	; (800a178 <USER_SPI_initialize+0x1cc>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f042 0218 	orr.w	r2, r2, #24
 800a14a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a14c:	4b09      	ldr	r3, [pc, #36]	; (800a174 <USER_SPI_initialize+0x1c8>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	f023 0301 	bic.w	r3, r3, #1
 800a156:	b2da      	uxtb	r2, r3
 800a158:	4b06      	ldr	r3, [pc, #24]	; (800a174 <USER_SPI_initialize+0x1c8>)
 800a15a:	701a      	strb	r2, [r3, #0]
 800a15c:	e002      	b.n	800a164 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800a15e:	4b05      	ldr	r3, [pc, #20]	; (800a174 <USER_SPI_initialize+0x1c8>)
 800a160:	2201      	movs	r2, #1
 800a162:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800a164:	4b03      	ldr	r3, [pc, #12]	; (800a174 <USER_SPI_initialize+0x1c8>)
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	b2db      	uxtb	r3, r3
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3714      	adds	r7, #20
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd90      	pop	{r4, r7, pc}
 800a172:	bf00      	nop
 800a174:	20000020 	.word	0x20000020
 800a178:	20009f1c 	.word	0x20009f1c
 800a17c:	200004bc 	.word	0x200004bc

0800a180 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	4603      	mov	r3, r0
 800a188:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a18a:	79fb      	ldrb	r3, [r7, #7]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d001      	beq.n	800a194 <USER_SPI_status+0x14>
 800a190:	2301      	movs	r3, #1
 800a192:	e002      	b.n	800a19a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800a194:	4b04      	ldr	r3, [pc, #16]	; (800a1a8 <USER_SPI_status+0x28>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	b2db      	uxtb	r3, r3
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	370c      	adds	r7, #12
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	20000020 	.word	0x20000020

0800a1ac <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60b9      	str	r1, [r7, #8]
 800a1b4:	607a      	str	r2, [r7, #4]
 800a1b6:	603b      	str	r3, [r7, #0]
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a1bc:	7bfb      	ldrb	r3, [r7, #15]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d102      	bne.n	800a1c8 <USER_SPI_read+0x1c>
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d101      	bne.n	800a1cc <USER_SPI_read+0x20>
 800a1c8:	2304      	movs	r3, #4
 800a1ca:	e04d      	b.n	800a268 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a1cc:	4b28      	ldr	r3, [pc, #160]	; (800a270 <USER_SPI_read+0xc4>)
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <USER_SPI_read+0x32>
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e044      	b.n	800a268 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a1de:	4b25      	ldr	r3, [pc, #148]	; (800a274 <USER_SPI_read+0xc8>)
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	f003 0308 	and.w	r3, r3, #8
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d102      	bne.n	800a1f0 <USER_SPI_read+0x44>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	025b      	lsls	r3, r3, #9
 800a1ee:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d111      	bne.n	800a21a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a1f6:	6879      	ldr	r1, [r7, #4]
 800a1f8:	2011      	movs	r0, #17
 800a1fa:	f7ff fe68 	bl	8009ece <send_cmd>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d129      	bne.n	800a258 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800a204:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a208:	68b8      	ldr	r0, [r7, #8]
 800a20a:	f7ff fe05 	bl	8009e18 <rcvr_datablock>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d021      	beq.n	800a258 <USER_SPI_read+0xac>
			count = 0;
 800a214:	2300      	movs	r3, #0
 800a216:	603b      	str	r3, [r7, #0]
 800a218:	e01e      	b.n	800a258 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a21a:	6879      	ldr	r1, [r7, #4]
 800a21c:	2012      	movs	r0, #18
 800a21e:	f7ff fe56 	bl	8009ece <send_cmd>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d117      	bne.n	800a258 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800a228:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a22c:	68b8      	ldr	r0, [r7, #8]
 800a22e:	f7ff fdf3 	bl	8009e18 <rcvr_datablock>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00a      	beq.n	800a24e <USER_SPI_read+0xa2>
				buff += 512;
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a23e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	3b01      	subs	r3, #1
 800a244:	603b      	str	r3, [r7, #0]
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1ed      	bne.n	800a228 <USER_SPI_read+0x7c>
 800a24c:	e000      	b.n	800a250 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800a24e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800a250:	2100      	movs	r1, #0
 800a252:	200c      	movs	r0, #12
 800a254:	f7ff fe3b 	bl	8009ece <send_cmd>
		}
	}
	despiselect();
 800a258:	f7ff fdb2 	bl	8009dc0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	bf14      	ite	ne
 800a262:	2301      	movne	r3, #1
 800a264:	2300      	moveq	r3, #0
 800a266:	b2db      	uxtb	r3, r3
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	20000020 	.word	0x20000020
 800a274:	200004bc 	.word	0x200004bc

0800a278 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60b9      	str	r1, [r7, #8]
 800a280:	607a      	str	r2, [r7, #4]
 800a282:	603b      	str	r3, [r7, #0]
 800a284:	4603      	mov	r3, r0
 800a286:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a288:	7bfb      	ldrb	r3, [r7, #15]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d102      	bne.n	800a294 <USER_SPI_write+0x1c>
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d101      	bne.n	800a298 <USER_SPI_write+0x20>
 800a294:	2304      	movs	r3, #4
 800a296:	e063      	b.n	800a360 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a298:	4b33      	ldr	r3, [pc, #204]	; (800a368 <USER_SPI_write+0xf0>)
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	f003 0301 	and.w	r3, r3, #1
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <USER_SPI_write+0x32>
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e05a      	b.n	800a360 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a2aa:	4b2f      	ldr	r3, [pc, #188]	; (800a368 <USER_SPI_write+0xf0>)
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <USER_SPI_write+0x44>
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	e051      	b.n	800a360 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800a2bc:	4b2b      	ldr	r3, [pc, #172]	; (800a36c <USER_SPI_write+0xf4>)
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	f003 0308 	and.w	r3, r3, #8
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d102      	bne.n	800a2ce <USER_SPI_write+0x56>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	025b      	lsls	r3, r3, #9
 800a2cc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d110      	bne.n	800a2f6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800a2d4:	6879      	ldr	r1, [r7, #4]
 800a2d6:	2018      	movs	r0, #24
 800a2d8:	f7ff fdf9 	bl	8009ece <send_cmd>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d136      	bne.n	800a350 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800a2e2:	21fe      	movs	r1, #254	; 0xfe
 800a2e4:	68b8      	ldr	r0, [r7, #8]
 800a2e6:	f7ff fdc0 	bl	8009e6a <xmit_datablock>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d02f      	beq.n	800a350 <USER_SPI_write+0xd8>
			count = 0;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	603b      	str	r3, [r7, #0]
 800a2f4:	e02c      	b.n	800a350 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a2f6:	4b1d      	ldr	r3, [pc, #116]	; (800a36c <USER_SPI_write+0xf4>)
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	f003 0306 	and.w	r3, r3, #6
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d003      	beq.n	800a30a <USER_SPI_write+0x92>
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	2097      	movs	r0, #151	; 0x97
 800a306:	f7ff fde2 	bl	8009ece <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800a30a:	6879      	ldr	r1, [r7, #4]
 800a30c:	2019      	movs	r0, #25
 800a30e:	f7ff fdde 	bl	8009ece <send_cmd>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d11b      	bne.n	800a350 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800a318:	21fc      	movs	r1, #252	; 0xfc
 800a31a:	68b8      	ldr	r0, [r7, #8]
 800a31c:	f7ff fda5 	bl	8009e6a <xmit_datablock>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00a      	beq.n	800a33c <USER_SPI_write+0xc4>
				buff += 512;
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a32c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	3b01      	subs	r3, #1
 800a332:	603b      	str	r3, [r7, #0]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1ee      	bne.n	800a318 <USER_SPI_write+0xa0>
 800a33a:	e000      	b.n	800a33e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800a33c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800a33e:	21fd      	movs	r1, #253	; 0xfd
 800a340:	2000      	movs	r0, #0
 800a342:	f7ff fd92 	bl	8009e6a <xmit_datablock>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <USER_SPI_write+0xd8>
 800a34c:	2301      	movs	r3, #1
 800a34e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800a350:	f7ff fd36 	bl	8009dc0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	bf14      	ite	ne
 800a35a:	2301      	movne	r3, #1
 800a35c:	2300      	moveq	r3, #0
 800a35e:	b2db      	uxtb	r3, r3
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	20000020 	.word	0x20000020
 800a36c:	200004bc 	.word	0x200004bc

0800a370 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b08c      	sub	sp, #48	; 0x30
 800a374:	af00      	add	r7, sp, #0
 800a376:	4603      	mov	r3, r0
 800a378:	603a      	str	r2, [r7, #0]
 800a37a:	71fb      	strb	r3, [r7, #7]
 800a37c:	460b      	mov	r3, r1
 800a37e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800a380:	79fb      	ldrb	r3, [r7, #7]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <USER_SPI_ioctl+0x1a>
 800a386:	2304      	movs	r3, #4
 800a388:	e15a      	b.n	800a640 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a38a:	4baf      	ldr	r3, [pc, #700]	; (800a648 <USER_SPI_ioctl+0x2d8>)
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <USER_SPI_ioctl+0x2c>
 800a398:	2303      	movs	r3, #3
 800a39a:	e151      	b.n	800a640 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800a3a2:	79bb      	ldrb	r3, [r7, #6]
 800a3a4:	2b04      	cmp	r3, #4
 800a3a6:	f200 8136 	bhi.w	800a616 <USER_SPI_ioctl+0x2a6>
 800a3aa:	a201      	add	r2, pc, #4	; (adr r2, 800a3b0 <USER_SPI_ioctl+0x40>)
 800a3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b0:	0800a3c5 	.word	0x0800a3c5
 800a3b4:	0800a3d9 	.word	0x0800a3d9
 800a3b8:	0800a617 	.word	0x0800a617
 800a3bc:	0800a485 	.word	0x0800a485
 800a3c0:	0800a57b 	.word	0x0800a57b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800a3c4:	f7ff fd0c 	bl	8009de0 <spiselect>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f000 8127 	beq.w	800a61e <USER_SPI_ioctl+0x2ae>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a3d6:	e122      	b.n	800a61e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a3d8:	2100      	movs	r1, #0
 800a3da:	2009      	movs	r0, #9
 800a3dc:	f7ff fd77 	bl	8009ece <send_cmd>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f040 811d 	bne.w	800a622 <USER_SPI_ioctl+0x2b2>
 800a3e8:	f107 030c 	add.w	r3, r7, #12
 800a3ec:	2110      	movs	r1, #16
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7ff fd12 	bl	8009e18 <rcvr_datablock>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f000 8113 	beq.w	800a622 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800a3fc:	7b3b      	ldrb	r3, [r7, #12]
 800a3fe:	099b      	lsrs	r3, r3, #6
 800a400:	b2db      	uxtb	r3, r3
 800a402:	2b01      	cmp	r3, #1
 800a404:	d111      	bne.n	800a42a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800a406:	7d7b      	ldrb	r3, [r7, #21]
 800a408:	461a      	mov	r2, r3
 800a40a:	7d3b      	ldrb	r3, [r7, #20]
 800a40c:	021b      	lsls	r3, r3, #8
 800a40e:	4413      	add	r3, r2
 800a410:	461a      	mov	r2, r3
 800a412:	7cfb      	ldrb	r3, [r7, #19]
 800a414:	041b      	lsls	r3, r3, #16
 800a416:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800a41a:	4413      	add	r3, r2
 800a41c:	3301      	adds	r3, #1
 800a41e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	029a      	lsls	r2, r3, #10
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	601a      	str	r2, [r3, #0]
 800a428:	e028      	b.n	800a47c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a42a:	7c7b      	ldrb	r3, [r7, #17]
 800a42c:	f003 030f 	and.w	r3, r3, #15
 800a430:	b2da      	uxtb	r2, r3
 800a432:	7dbb      	ldrb	r3, [r7, #22]
 800a434:	09db      	lsrs	r3, r3, #7
 800a436:	b2db      	uxtb	r3, r3
 800a438:	4413      	add	r3, r2
 800a43a:	b2da      	uxtb	r2, r3
 800a43c:	7d7b      	ldrb	r3, [r7, #21]
 800a43e:	005b      	lsls	r3, r3, #1
 800a440:	b2db      	uxtb	r3, r3
 800a442:	f003 0306 	and.w	r3, r3, #6
 800a446:	b2db      	uxtb	r3, r3
 800a448:	4413      	add	r3, r2
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	3302      	adds	r3, #2
 800a44e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a452:	7d3b      	ldrb	r3, [r7, #20]
 800a454:	099b      	lsrs	r3, r3, #6
 800a456:	b2db      	uxtb	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	7cfb      	ldrb	r3, [r7, #19]
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	441a      	add	r2, r3
 800a460:	7cbb      	ldrb	r3, [r7, #18]
 800a462:	029b      	lsls	r3, r3, #10
 800a464:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a468:	4413      	add	r3, r2
 800a46a:	3301      	adds	r3, #1
 800a46c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800a46e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a472:	3b09      	subs	r3, #9
 800a474:	69fa      	ldr	r2, [r7, #28]
 800a476:	409a      	lsls	r2, r3
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800a47c:	2300      	movs	r3, #0
 800a47e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a482:	e0ce      	b.n	800a622 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800a484:	4b71      	ldr	r3, [pc, #452]	; (800a64c <USER_SPI_ioctl+0x2dc>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	f003 0304 	and.w	r3, r3, #4
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d031      	beq.n	800a4f4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800a490:	2100      	movs	r1, #0
 800a492:	208d      	movs	r0, #141	; 0x8d
 800a494:	f7ff fd1b 	bl	8009ece <send_cmd>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f040 80c3 	bne.w	800a626 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800a4a0:	20ff      	movs	r0, #255	; 0xff
 800a4a2:	f7ff fc1d 	bl	8009ce0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800a4a6:	f107 030c 	add.w	r3, r7, #12
 800a4aa:	2110      	movs	r1, #16
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7ff fcb3 	bl	8009e18 <rcvr_datablock>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 80b6 	beq.w	800a626 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a4ba:	2330      	movs	r3, #48	; 0x30
 800a4bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a4c0:	e007      	b.n	800a4d2 <USER_SPI_ioctl+0x162>
 800a4c2:	20ff      	movs	r0, #255	; 0xff
 800a4c4:	f7ff fc0c 	bl	8009ce0 <xchg_spi>
 800a4c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a4d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1f3      	bne.n	800a4c2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800a4da:	7dbb      	ldrb	r3, [r7, #22]
 800a4dc:	091b      	lsrs	r3, r3, #4
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	2310      	movs	r3, #16
 800a4e4:	fa03 f202 	lsl.w	r2, r3, r2
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800a4f2:	e098      	b.n	800a626 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	2009      	movs	r0, #9
 800a4f8:	f7ff fce9 	bl	8009ece <send_cmd>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f040 8091 	bne.w	800a626 <USER_SPI_ioctl+0x2b6>
 800a504:	f107 030c 	add.w	r3, r7, #12
 800a508:	2110      	movs	r1, #16
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7ff fc84 	bl	8009e18 <rcvr_datablock>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 8087 	beq.w	800a626 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800a518:	4b4c      	ldr	r3, [pc, #304]	; (800a64c <USER_SPI_ioctl+0x2dc>)
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	f003 0302 	and.w	r3, r3, #2
 800a520:	2b00      	cmp	r3, #0
 800a522:	d012      	beq.n	800a54a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a524:	7dbb      	ldrb	r3, [r7, #22]
 800a526:	005b      	lsls	r3, r3, #1
 800a528:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a52c:	7dfa      	ldrb	r2, [r7, #23]
 800a52e:	09d2      	lsrs	r2, r2, #7
 800a530:	b2d2      	uxtb	r2, r2
 800a532:	4413      	add	r3, r2
 800a534:	1c5a      	adds	r2, r3, #1
 800a536:	7e7b      	ldrb	r3, [r7, #25]
 800a538:	099b      	lsrs	r3, r3, #6
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	3b01      	subs	r3, #1
 800a53e:	fa02 f303 	lsl.w	r3, r2, r3
 800a542:	461a      	mov	r2, r3
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	601a      	str	r2, [r3, #0]
 800a548:	e013      	b.n	800a572 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800a54a:	7dbb      	ldrb	r3, [r7, #22]
 800a54c:	109b      	asrs	r3, r3, #2
 800a54e:	b29b      	uxth	r3, r3
 800a550:	f003 031f 	and.w	r3, r3, #31
 800a554:	3301      	adds	r3, #1
 800a556:	7dfa      	ldrb	r2, [r7, #23]
 800a558:	00d2      	lsls	r2, r2, #3
 800a55a:	f002 0218 	and.w	r2, r2, #24
 800a55e:	7df9      	ldrb	r1, [r7, #23]
 800a560:	0949      	lsrs	r1, r1, #5
 800a562:	b2c9      	uxtb	r1, r1
 800a564:	440a      	add	r2, r1
 800a566:	3201      	adds	r2, #1
 800a568:	fb02 f303 	mul.w	r3, r2, r3
 800a56c:	461a      	mov	r2, r3
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a578:	e055      	b.n	800a626 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a57a:	4b34      	ldr	r3, [pc, #208]	; (800a64c <USER_SPI_ioctl+0x2dc>)
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	f003 0306 	and.w	r3, r3, #6
 800a582:	2b00      	cmp	r3, #0
 800a584:	d051      	beq.n	800a62a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a586:	f107 020c 	add.w	r2, r7, #12
 800a58a:	79fb      	ldrb	r3, [r7, #7]
 800a58c:	210b      	movs	r1, #11
 800a58e:	4618      	mov	r0, r3
 800a590:	f7ff feee 	bl	800a370 <USER_SPI_ioctl>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d149      	bne.n	800a62e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a59a:	7b3b      	ldrb	r3, [r7, #12]
 800a59c:	099b      	lsrs	r3, r3, #6
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d104      	bne.n	800a5ae <USER_SPI_ioctl+0x23e>
 800a5a4:	7dbb      	ldrb	r3, [r7, #22]
 800a5a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d041      	beq.n	800a632 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	623b      	str	r3, [r7, #32]
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5b8:	6a3b      	ldr	r3, [r7, #32]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800a5be:	4b23      	ldr	r3, [pc, #140]	; (800a64c <USER_SPI_ioctl+0x2dc>)
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	f003 0308 	and.w	r3, r3, #8
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d105      	bne.n	800a5d6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5cc:	025b      	lsls	r3, r3, #9
 800a5ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d2:	025b      	lsls	r3, r3, #9
 800a5d4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a5d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5d8:	2020      	movs	r0, #32
 800a5da:	f7ff fc78 	bl	8009ece <send_cmd>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d128      	bne.n	800a636 <USER_SPI_ioctl+0x2c6>
 800a5e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a5e6:	2021      	movs	r0, #33	; 0x21
 800a5e8:	f7ff fc71 	bl	8009ece <send_cmd>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d121      	bne.n	800a636 <USER_SPI_ioctl+0x2c6>
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	2026      	movs	r0, #38	; 0x26
 800a5f6:	f7ff fc6a 	bl	8009ece <send_cmd>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d11a      	bne.n	800a636 <USER_SPI_ioctl+0x2c6>
 800a600:	f247 5030 	movw	r0, #30000	; 0x7530
 800a604:	f7ff fbb9 	bl	8009d7a <wait_ready>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d013      	beq.n	800a636 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800a60e:	2300      	movs	r3, #0
 800a610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a614:	e00f      	b.n	800a636 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800a616:	2304      	movs	r3, #4
 800a618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a61c:	e00c      	b.n	800a638 <USER_SPI_ioctl+0x2c8>
		break;
 800a61e:	bf00      	nop
 800a620:	e00a      	b.n	800a638 <USER_SPI_ioctl+0x2c8>
		break;
 800a622:	bf00      	nop
 800a624:	e008      	b.n	800a638 <USER_SPI_ioctl+0x2c8>
		break;
 800a626:	bf00      	nop
 800a628:	e006      	b.n	800a638 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a62a:	bf00      	nop
 800a62c:	e004      	b.n	800a638 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a62e:	bf00      	nop
 800a630:	e002      	b.n	800a638 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a632:	bf00      	nop
 800a634:	e000      	b.n	800a638 <USER_SPI_ioctl+0x2c8>
		break;
 800a636:	bf00      	nop
	}

	despiselect();
 800a638:	f7ff fbc2 	bl	8009dc0 <despiselect>

	return res;
 800a63c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a640:	4618      	mov	r0, r3
 800a642:	3730      	adds	r7, #48	; 0x30
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	20000020 	.word	0x20000020
 800a64c:	200004bc 	.word	0x200004bc

0800a650 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	460b      	mov	r3, r1
 800a65a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a65c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a660:	f007 fc2a 	bl	8011eb8 <USBD_static_malloc>
 800a664:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d105      	bne.n	800a678 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a674:	2302      	movs	r3, #2
 800a676:	e066      	b.n	800a746 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	7c1b      	ldrb	r3, [r3, #16]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d119      	bne.n	800a6bc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a68c:	2202      	movs	r2, #2
 800a68e:	2181      	movs	r1, #129	; 0x81
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f007 faee 	bl	8011c72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2201      	movs	r2, #1
 800a69a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a69c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6a0:	2202      	movs	r2, #2
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f007 fae4 	bl	8011c72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2210      	movs	r2, #16
 800a6b6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a6ba:	e016      	b.n	800a6ea <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a6bc:	2340      	movs	r3, #64	; 0x40
 800a6be:	2202      	movs	r2, #2
 800a6c0:	2181      	movs	r1, #129	; 0x81
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f007 fad5 	bl	8011c72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a6ce:	2340      	movs	r3, #64	; 0x40
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f007 facc 	bl	8011c72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2210      	movs	r2, #16
 800a6e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a6ea:	2308      	movs	r3, #8
 800a6ec:	2203      	movs	r2, #3
 800a6ee:	2182      	movs	r1, #130	; 0x82
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f007 fabe 	bl	8011c72 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	7c1b      	ldrb	r3, [r3, #16]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d109      	bne.n	800a734 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a72a:	2101      	movs	r1, #1
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f007 fb8f 	bl	8011e50 <USBD_LL_PrepareReceive>
 800a732:	e007      	b.n	800a744 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a73a:	2340      	movs	r3, #64	; 0x40
 800a73c:	2101      	movs	r1, #1
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f007 fb86 	bl	8011e50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b082      	sub	sp, #8
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
 800a756:	460b      	mov	r3, r1
 800a758:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a75a:	2181      	movs	r1, #129	; 0x81
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f007 faae 	bl	8011cbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a768:	2101      	movs	r1, #1
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f007 faa7 	bl	8011cbe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a778:	2182      	movs	r1, #130	; 0x82
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f007 fa9f 	bl	8011cbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00e      	beq.n	800a7b8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f007 fb92 	bl	8011ed4 <USBD_static_free>
    pdev->pClassData = NULL;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
	...

0800a7c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d101      	bne.n	800a7ec <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	e0af      	b.n	800a94c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d03f      	beq.n	800a878 <USBD_CDC_Setup+0xb4>
 800a7f8:	2b20      	cmp	r3, #32
 800a7fa:	f040 809f 	bne.w	800a93c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	88db      	ldrh	r3, [r3, #6]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d02e      	beq.n	800a864 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	b25b      	sxtb	r3, r3
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	da16      	bge.n	800a83e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a81c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	88d2      	ldrh	r2, [r2, #6]
 800a822:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	88db      	ldrh	r3, [r3, #6]
 800a828:	2b07      	cmp	r3, #7
 800a82a:	bf28      	it	cs
 800a82c:	2307      	movcs	r3, #7
 800a82e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	89fa      	ldrh	r2, [r7, #14]
 800a834:	4619      	mov	r1, r3
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f001 fae9 	bl	800be0e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a83c:	e085      	b.n	800a94a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	785a      	ldrb	r2, [r3, #1]
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	88db      	ldrh	r3, [r3, #6]
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a854:	6939      	ldr	r1, [r7, #16]
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	88db      	ldrh	r3, [r3, #6]
 800a85a:	461a      	mov	r2, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f001 fb02 	bl	800be66 <USBD_CtlPrepareRx>
      break;
 800a862:	e072      	b.n	800a94a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	7850      	ldrb	r0, [r2, #1]
 800a870:	2200      	movs	r2, #0
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	4798      	blx	r3
      break;
 800a876:	e068      	b.n	800a94a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	785b      	ldrb	r3, [r3, #1]
 800a87c:	2b0b      	cmp	r3, #11
 800a87e:	d852      	bhi.n	800a926 <USBD_CDC_Setup+0x162>
 800a880:	a201      	add	r2, pc, #4	; (adr r2, 800a888 <USBD_CDC_Setup+0xc4>)
 800a882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a886:	bf00      	nop
 800a888:	0800a8b9 	.word	0x0800a8b9
 800a88c:	0800a935 	.word	0x0800a935
 800a890:	0800a927 	.word	0x0800a927
 800a894:	0800a927 	.word	0x0800a927
 800a898:	0800a927 	.word	0x0800a927
 800a89c:	0800a927 	.word	0x0800a927
 800a8a0:	0800a927 	.word	0x0800a927
 800a8a4:	0800a927 	.word	0x0800a927
 800a8a8:	0800a927 	.word	0x0800a927
 800a8ac:	0800a927 	.word	0x0800a927
 800a8b0:	0800a8e3 	.word	0x0800a8e3
 800a8b4:	0800a90d 	.word	0x0800a90d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b03      	cmp	r3, #3
 800a8c2:	d107      	bne.n	800a8d4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a8c4:	f107 030a 	add.w	r3, r7, #10
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f001 fa9e 	bl	800be0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a8d2:	e032      	b.n	800a93a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a8d4:	6839      	ldr	r1, [r7, #0]
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f001 fa28 	bl	800bd2c <USBD_CtlError>
            ret = USBD_FAIL;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	75fb      	strb	r3, [r7, #23]
          break;
 800a8e0:	e02b      	b.n	800a93a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	2b03      	cmp	r3, #3
 800a8ec:	d107      	bne.n	800a8fe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a8ee:	f107 030d 	add.w	r3, r7, #13
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f001 fa89 	bl	800be0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a8fc:	e01d      	b.n	800a93a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f001 fa13 	bl	800bd2c <USBD_CtlError>
            ret = USBD_FAIL;
 800a906:	2303      	movs	r3, #3
 800a908:	75fb      	strb	r3, [r7, #23]
          break;
 800a90a:	e016      	b.n	800a93a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a912:	b2db      	uxtb	r3, r3
 800a914:	2b03      	cmp	r3, #3
 800a916:	d00f      	beq.n	800a938 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a918:	6839      	ldr	r1, [r7, #0]
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f001 fa06 	bl	800bd2c <USBD_CtlError>
            ret = USBD_FAIL;
 800a920:	2303      	movs	r3, #3
 800a922:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a924:	e008      	b.n	800a938 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f001 f9ff 	bl	800bd2c <USBD_CtlError>
          ret = USBD_FAIL;
 800a92e:	2303      	movs	r3, #3
 800a930:	75fb      	strb	r3, [r7, #23]
          break;
 800a932:	e002      	b.n	800a93a <USBD_CDC_Setup+0x176>
          break;
 800a934:	bf00      	nop
 800a936:	e008      	b.n	800a94a <USBD_CDC_Setup+0x186>
          break;
 800a938:	bf00      	nop
      }
      break;
 800a93a:	e006      	b.n	800a94a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f001 f9f4 	bl	800bd2c <USBD_CtlError>
      ret = USBD_FAIL;
 800a944:	2303      	movs	r3, #3
 800a946:	75fb      	strb	r3, [r7, #23]
      break;
 800a948:	bf00      	nop
  }

  return (uint8_t)ret;
 800a94a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3718      	adds	r7, #24
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	460b      	mov	r3, r1
 800a95e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a966:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a972:	2303      	movs	r3, #3
 800a974:	e04f      	b.n	800aa16 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a97c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a97e:	78fa      	ldrb	r2, [r7, #3]
 800a980:	6879      	ldr	r1, [r7, #4]
 800a982:	4613      	mov	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4413      	add	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	440b      	add	r3, r1
 800a98c:	3318      	adds	r3, #24
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d029      	beq.n	800a9e8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a994:	78fa      	ldrb	r2, [r7, #3]
 800a996:	6879      	ldr	r1, [r7, #4]
 800a998:	4613      	mov	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4413      	add	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	440b      	add	r3, r1
 800a9a2:	3318      	adds	r3, #24
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	78f9      	ldrb	r1, [r7, #3]
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	00db      	lsls	r3, r3, #3
 800a9ae:	1a5b      	subs	r3, r3, r1
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4403      	add	r3, r0
 800a9b4:	3344      	adds	r3, #68	; 0x44
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	fbb2 f1f3 	udiv	r1, r2, r3
 800a9bc:	fb03 f301 	mul.w	r3, r3, r1
 800a9c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d110      	bne.n	800a9e8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a9c6:	78fa      	ldrb	r2, [r7, #3]
 800a9c8:	6879      	ldr	r1, [r7, #4]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	4413      	add	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	440b      	add	r3, r1
 800a9d4:	3318      	adds	r3, #24
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a9da:	78f9      	ldrb	r1, [r7, #3]
 800a9dc:	2300      	movs	r3, #0
 800a9de:	2200      	movs	r2, #0
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f007 fa14 	bl	8011e0e <USBD_LL_Transmit>
 800a9e6:	e015      	b.n	800aa14 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00b      	beq.n	800aa14 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	68ba      	ldr	r2, [r7, #8]
 800aa06:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800aa10:	78fa      	ldrb	r2, [r7, #3]
 800aa12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b084      	sub	sp, #16
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	460b      	mov	r3, r1
 800aa28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	e015      	b.n	800aa6c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aa40:	78fb      	ldrb	r3, [r7, #3]
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f007 fa24 	bl	8011e92 <USBD_LL_GetRxDataSize>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aa66:	4611      	mov	r1, r2
 800aa68:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa82:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d101      	bne.n	800aa8e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	e01b      	b.n	800aac6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d015      	beq.n	800aac4 <USBD_CDC_EP0_RxReady+0x50>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aa9e:	2bff      	cmp	r3, #255	; 0xff
 800aaa0:	d010      	beq.n	800aac4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800aab0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aab8:	b292      	uxth	r2, r2
 800aaba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	22ff      	movs	r2, #255	; 0xff
 800aac0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
	...

0800aad0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2243      	movs	r2, #67	; 0x43
 800aadc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800aade:	4b03      	ldr	r3, [pc, #12]	; (800aaec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr
 800aaec:	200000ac 	.word	0x200000ac

0800aaf0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2243      	movs	r2, #67	; 0x43
 800aafc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800aafe:	4b03      	ldr	r3, [pc, #12]	; (800ab0c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	20000068 	.word	0x20000068

0800ab10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2243      	movs	r2, #67	; 0x43
 800ab1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ab1e:	4b03      	ldr	r3, [pc, #12]	; (800ab2c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	370c      	adds	r7, #12
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr
 800ab2c:	200000f0 	.word	0x200000f0

0800ab30 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	220a      	movs	r2, #10
 800ab3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ab3e:	4b03      	ldr	r3, [pc, #12]	; (800ab4c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr
 800ab4c:	20000024 	.word	0x20000024

0800ab50 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d101      	bne.n	800ab64 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e004      	b.n	800ab6e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b087      	sub	sp, #28
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	60f8      	str	r0, [r7, #12]
 800ab82:	60b9      	str	r1, [r7, #8]
 800ab84:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab8c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ab94:	2303      	movs	r3, #3
 800ab96:	e008      	b.n	800abaa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	371c      	adds	r7, #28
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800abb6:	b480      	push	{r7}
 800abb8:	b085      	sub	sp, #20
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
 800abbe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abc6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d101      	bne.n	800abd2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800abce:	2303      	movs	r3, #3
 800abd0:	e004      	b.n	800abdc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	683a      	ldr	r2, [r7, #0]
 800abd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3714      	adds	r7, #20
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abf6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d101      	bne.n	800ac06 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ac02:	2303      	movs	r3, #3
 800ac04:	e016      	b.n	800ac34 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	7c1b      	ldrb	r3, [r3, #16]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d109      	bne.n	800ac22 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac18:	2101      	movs	r1, #1
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f007 f918 	bl	8011e50 <USBD_LL_PrepareReceive>
 800ac20:	e007      	b.n	800ac32 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac28:	2340      	movs	r3, #64	; 0x40
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f007 f90f 	bl	8011e50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	4613      	mov	r3, r2
 800ac48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d101      	bne.n	800ac54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ac50:	2303      	movs	r3, #3
 800ac52:	e01f      	b.n	800ac94 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d003      	beq.n	800ac7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	79fa      	ldrb	r2, [r7, #7]
 800ac86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f006 ff8b 	bl	8011ba4 <USBD_LL_Init>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ac92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aca6:	2300      	movs	r3, #0
 800aca8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d101      	bne.n	800acb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800acb0:	2303      	movs	r3, #3
 800acb2:	e016      	b.n	800ace2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00b      	beq.n	800ace0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd0:	f107 020e 	add.w	r2, r7, #14
 800acd4:	4610      	mov	r0, r2
 800acd6:	4798      	blx	r3
 800acd8:	4602      	mov	r2, r0
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b082      	sub	sp, #8
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f006 ffa2 	bl	8011c3c <USBD_LL_Start>
 800acf8:	4603      	mov	r3, r0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b083      	sub	sp, #12
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ad24:	2303      	movs	r3, #3
 800ad26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d009      	beq.n	800ad46 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	78fa      	ldrb	r2, [r7, #3]
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	4798      	blx	r3
 800ad42:	4603      	mov	r3, r0
 800ad44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ad46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d007      	beq.n	800ad76 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	78fa      	ldrb	r2, [r7, #3]
 800ad70:	4611      	mov	r1, r2
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	4798      	blx	r3
  }

  return USBD_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	4618      	mov	r0, r3
 800ad94:	f000 ff90 	bl	800bcb8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ada6:	461a      	mov	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800adb4:	f003 031f 	and.w	r3, r3, #31
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d01a      	beq.n	800adf2 <USBD_LL_SetupStage+0x72>
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d822      	bhi.n	800ae06 <USBD_LL_SetupStage+0x86>
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <USBD_LL_SetupStage+0x4a>
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d00a      	beq.n	800adde <USBD_LL_SetupStage+0x5e>
 800adc8:	e01d      	b.n	800ae06 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800add0:	4619      	mov	r1, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fa62 	bl	800b29c <USBD_StdDevReq>
 800add8:	4603      	mov	r3, r0
 800adda:	73fb      	strb	r3, [r7, #15]
      break;
 800addc:	e020      	b.n	800ae20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fac6 	bl	800b378 <USBD_StdItfReq>
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]
      break;
 800adf0:	e016      	b.n	800ae20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fb05 	bl	800b40a <USBD_StdEPReq>
 800ae00:	4603      	mov	r3, r0
 800ae02:	73fb      	strb	r3, [r7, #15]
      break;
 800ae04:	e00c      	b.n	800ae20 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	4619      	mov	r1, r3
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f006 ff71 	bl	8011cfc <USBD_LL_StallEP>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae1e:	bf00      	nop
  }

  return ret;
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b086      	sub	sp, #24
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	60f8      	str	r0, [r7, #12]
 800ae32:	460b      	mov	r3, r1
 800ae34:	607a      	str	r2, [r7, #4]
 800ae36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ae38:	7afb      	ldrb	r3, [r7, #11]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d138      	bne.n	800aeb0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ae44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae4c:	2b03      	cmp	r3, #3
 800ae4e:	d14a      	bne.n	800aee6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	689a      	ldr	r2, [r3, #8]
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d913      	bls.n	800ae84 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	689a      	ldr	r2, [r3, #8]
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	1ad2      	subs	r2, r2, r3
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	68da      	ldr	r2, [r3, #12]
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	4293      	cmp	r3, r2
 800ae74:	bf28      	it	cs
 800ae76:	4613      	movcs	r3, r2
 800ae78:	461a      	mov	r2, r3
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f001 f80f 	bl	800bea0 <USBD_CtlContinueRx>
 800ae82:	e030      	b.n	800aee6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	2b03      	cmp	r3, #3
 800ae8e:	d10b      	bne.n	800aea8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d005      	beq.n	800aea8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f001 f80a 	bl	800bec2 <USBD_CtlSendStatus>
 800aeae:	e01a      	b.n	800aee6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	2b03      	cmp	r3, #3
 800aeba:	d114      	bne.n	800aee6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00e      	beq.n	800aee6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aece:	699b      	ldr	r3, [r3, #24]
 800aed0:	7afa      	ldrb	r2, [r7, #11]
 800aed2:	4611      	mov	r1, r2
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	4798      	blx	r3
 800aed8:	4603      	mov	r3, r0
 800aeda:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aedc:	7dfb      	ldrb	r3, [r7, #23]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800aee2:	7dfb      	ldrb	r3, [r7, #23]
 800aee4:	e000      	b.n	800aee8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3718      	adds	r7, #24
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	460b      	mov	r3, r1
 800aefa:	607a      	str	r2, [r7, #4]
 800aefc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aefe:	7afb      	ldrb	r3, [r7, #11]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d16b      	bne.n	800afdc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	3314      	adds	r3, #20
 800af08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af10:	2b02      	cmp	r3, #2
 800af12:	d156      	bne.n	800afc2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d914      	bls.n	800af4a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	689a      	ldr	r2, [r3, #8]
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	1ad2      	subs	r2, r2, r3
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	461a      	mov	r2, r3
 800af34:	6879      	ldr	r1, [r7, #4]
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f000 ff84 	bl	800be44 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af3c:	2300      	movs	r3, #0
 800af3e:	2200      	movs	r2, #0
 800af40:	2100      	movs	r1, #0
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f006 ff84 	bl	8011e50 <USBD_LL_PrepareReceive>
 800af48:	e03b      	b.n	800afc2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	68da      	ldr	r2, [r3, #12]
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	429a      	cmp	r2, r3
 800af54:	d11c      	bne.n	800af90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800af5e:	429a      	cmp	r2, r3
 800af60:	d316      	bcc.n	800af90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d20f      	bcs.n	800af90 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800af70:	2200      	movs	r2, #0
 800af72:	2100      	movs	r1, #0
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f000 ff65 	bl	800be44 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af82:	2300      	movs	r3, #0
 800af84:	2200      	movs	r2, #0
 800af86:	2100      	movs	r1, #0
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f006 ff61 	bl	8011e50 <USBD_LL_PrepareReceive>
 800af8e:	e018      	b.n	800afc2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b03      	cmp	r3, #3
 800af9a:	d10b      	bne.n	800afb4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d005      	beq.n	800afb4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800afb4:	2180      	movs	r1, #128	; 0x80
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f006 fea0 	bl	8011cfc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f000 ff93 	bl	800bee8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d122      	bne.n	800b012 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800afcc:	68f8      	ldr	r0, [r7, #12]
 800afce:	f7ff fe98 	bl	800ad02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800afda:	e01a      	b.n	800b012 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b03      	cmp	r3, #3
 800afe6:	d114      	bne.n	800b012 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afee:	695b      	ldr	r3, [r3, #20]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00e      	beq.n	800b012 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800affa:	695b      	ldr	r3, [r3, #20]
 800affc:	7afa      	ldrb	r2, [r7, #11]
 800affe:	4611      	mov	r1, r2
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	4798      	blx	r3
 800b004:	4603      	mov	r3, r0
 800b006:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b008:	7dfb      	ldrb	r3, [r7, #23]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d001      	beq.n	800b012 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b00e:	7dfb      	ldrb	r3, [r7, #23]
 800b010:	e000      	b.n	800b014 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3718      	adds	r7, #24
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d101      	bne.n	800b050 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b04c:	2303      	movs	r3, #3
 800b04e:	e02f      	b.n	800b0b0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00f      	beq.n	800b07a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d009      	beq.n	800b07a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	6852      	ldr	r2, [r2, #4]
 800b072:	b2d2      	uxtb	r2, r2
 800b074:	4611      	mov	r1, r2
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b07a:	2340      	movs	r3, #64	; 0x40
 800b07c:	2200      	movs	r2, #0
 800b07e:	2100      	movs	r1, #0
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f006 fdf6 	bl	8011c72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2201      	movs	r2, #1
 800b08a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2240      	movs	r2, #64	; 0x40
 800b092:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b096:	2340      	movs	r3, #64	; 0x40
 800b098:	2200      	movs	r2, #0
 800b09a:	2180      	movs	r1, #128	; 0x80
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f006 fde8 	bl	8011c72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2240      	movs	r2, #64	; 0x40
 800b0ac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	78fa      	ldrb	r2, [r7, #3]
 800b0c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2204      	movs	r2, #4
 800b0f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	370c      	adds	r7, #12
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr

0800b104 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2b04      	cmp	r3, #4
 800b116:	d106      	bne.n	800b126 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b146:	2303      	movs	r3, #3
 800b148:	e012      	b.n	800b170 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b150:	b2db      	uxtb	r3, r3
 800b152:	2b03      	cmp	r3, #3
 800b154:	d10b      	bne.n	800b16e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d005      	beq.n	800b16e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b168:	69db      	ldr	r3, [r3, #28]
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	460b      	mov	r3, r1
 800b182:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d101      	bne.n	800b192 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b18e:	2303      	movs	r3, #3
 800b190:	e014      	b.n	800b1bc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b03      	cmp	r3, #3
 800b19c:	d10d      	bne.n	800b1ba <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a4:	6a1b      	ldr	r3, [r3, #32]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d007      	beq.n	800b1ba <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1b0:	6a1b      	ldr	r3, [r3, #32]
 800b1b2:	78fa      	ldrb	r2, [r7, #3]
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d101      	bne.n	800b1de <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b1da:	2303      	movs	r3, #3
 800b1dc:	e014      	b.n	800b208 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	d10d      	bne.n	800b206 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d007      	beq.n	800b206 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fe:	78fa      	ldrb	r2, [r7, #3]
 800b200:	4611      	mov	r1, r2
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	370c      	adds	r7, #12
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr

0800b226 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b082      	sub	sp, #8
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d009      	beq.n	800b254 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	6852      	ldr	r2, [r2, #4]
 800b24c:	b2d2      	uxtb	r2, r2
 800b24e:	4611      	mov	r1, r2
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	4798      	blx	r3
  }

  return USBD_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b25e:	b480      	push	{r7}
 800b260:	b087      	sub	sp, #28
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	3301      	adds	r3, #1
 800b274:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b27c:	8a3b      	ldrh	r3, [r7, #16]
 800b27e:	021b      	lsls	r3, r3, #8
 800b280:	b21a      	sxth	r2, r3
 800b282:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b286:	4313      	orrs	r3, r2
 800b288:	b21b      	sxth	r3, r3
 800b28a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b28c:	89fb      	ldrh	r3, [r7, #14]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	371c      	adds	r7, #28
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
	...

0800b29c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2b2:	2b40      	cmp	r3, #64	; 0x40
 800b2b4:	d005      	beq.n	800b2c2 <USBD_StdDevReq+0x26>
 800b2b6:	2b40      	cmp	r3, #64	; 0x40
 800b2b8:	d853      	bhi.n	800b362 <USBD_StdDevReq+0xc6>
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00b      	beq.n	800b2d6 <USBD_StdDevReq+0x3a>
 800b2be:	2b20      	cmp	r3, #32
 800b2c0:	d14f      	bne.n	800b362 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	4798      	blx	r3
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b2d4:	e04a      	b.n	800b36c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	785b      	ldrb	r3, [r3, #1]
 800b2da:	2b09      	cmp	r3, #9
 800b2dc:	d83b      	bhi.n	800b356 <USBD_StdDevReq+0xba>
 800b2de:	a201      	add	r2, pc, #4	; (adr r2, 800b2e4 <USBD_StdDevReq+0x48>)
 800b2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e4:	0800b339 	.word	0x0800b339
 800b2e8:	0800b34d 	.word	0x0800b34d
 800b2ec:	0800b357 	.word	0x0800b357
 800b2f0:	0800b343 	.word	0x0800b343
 800b2f4:	0800b357 	.word	0x0800b357
 800b2f8:	0800b317 	.word	0x0800b317
 800b2fc:	0800b30d 	.word	0x0800b30d
 800b300:	0800b357 	.word	0x0800b357
 800b304:	0800b32f 	.word	0x0800b32f
 800b308:	0800b321 	.word	0x0800b321
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b30c:	6839      	ldr	r1, [r7, #0]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f9de 	bl	800b6d0 <USBD_GetDescriptor>
          break;
 800b314:	e024      	b.n	800b360 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 fb43 	bl	800b9a4 <USBD_SetAddress>
          break;
 800b31e:	e01f      	b.n	800b360 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b320:	6839      	ldr	r1, [r7, #0]
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fb82 	bl	800ba2c <USBD_SetConfig>
 800b328:	4603      	mov	r3, r0
 800b32a:	73fb      	strb	r3, [r7, #15]
          break;
 800b32c:	e018      	b.n	800b360 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b32e:	6839      	ldr	r1, [r7, #0]
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fc21 	bl	800bb78 <USBD_GetConfig>
          break;
 800b336:	e013      	b.n	800b360 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b338:	6839      	ldr	r1, [r7, #0]
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fc52 	bl	800bbe4 <USBD_GetStatus>
          break;
 800b340:	e00e      	b.n	800b360 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b342:	6839      	ldr	r1, [r7, #0]
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 fc81 	bl	800bc4c <USBD_SetFeature>
          break;
 800b34a:	e009      	b.n	800b360 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b34c:	6839      	ldr	r1, [r7, #0]
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 fc90 	bl	800bc74 <USBD_ClrFeature>
          break;
 800b354:	e004      	b.n	800b360 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b356:	6839      	ldr	r1, [r7, #0]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 fce7 	bl	800bd2c <USBD_CtlError>
          break;
 800b35e:	bf00      	nop
      }
      break;
 800b360:	e004      	b.n	800b36c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b362:	6839      	ldr	r1, [r7, #0]
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fce1 	bl	800bd2c <USBD_CtlError>
      break;
 800b36a:	bf00      	nop
  }

  return ret;
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop

0800b378 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b38e:	2b40      	cmp	r3, #64	; 0x40
 800b390:	d005      	beq.n	800b39e <USBD_StdItfReq+0x26>
 800b392:	2b40      	cmp	r3, #64	; 0x40
 800b394:	d82f      	bhi.n	800b3f6 <USBD_StdItfReq+0x7e>
 800b396:	2b00      	cmp	r3, #0
 800b398:	d001      	beq.n	800b39e <USBD_StdItfReq+0x26>
 800b39a:	2b20      	cmp	r3, #32
 800b39c:	d12b      	bne.n	800b3f6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d81d      	bhi.n	800b3e8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	889b      	ldrh	r3, [r3, #4]
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d813      	bhi.n	800b3de <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	6839      	ldr	r1, [r7, #0]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	4798      	blx	r3
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	88db      	ldrh	r3, [r3, #6]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d110      	bne.n	800b3f2 <USBD_StdItfReq+0x7a>
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d10d      	bne.n	800b3f2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fd73 	bl	800bec2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b3dc:	e009      	b.n	800b3f2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 fca3 	bl	800bd2c <USBD_CtlError>
          break;
 800b3e6:	e004      	b.n	800b3f2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fc9e 	bl	800bd2c <USBD_CtlError>
          break;
 800b3f0:	e000      	b.n	800b3f4 <USBD_StdItfReq+0x7c>
          break;
 800b3f2:	bf00      	nop
      }
      break;
 800b3f4:	e004      	b.n	800b400 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fc97 	bl	800bd2c <USBD_CtlError>
      break;
 800b3fe:	bf00      	nop
  }

  return ret;
 800b400:	7bfb      	ldrb	r3, [r7, #15]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b084      	sub	sp, #16
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
 800b412:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b414:	2300      	movs	r3, #0
 800b416:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	889b      	ldrh	r3, [r3, #4]
 800b41c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b426:	2b40      	cmp	r3, #64	; 0x40
 800b428:	d007      	beq.n	800b43a <USBD_StdEPReq+0x30>
 800b42a:	2b40      	cmp	r3, #64	; 0x40
 800b42c:	f200 8145 	bhi.w	800b6ba <USBD_StdEPReq+0x2b0>
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00c      	beq.n	800b44e <USBD_StdEPReq+0x44>
 800b434:	2b20      	cmp	r3, #32
 800b436:	f040 8140 	bne.w	800b6ba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	6839      	ldr	r1, [r7, #0]
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	4798      	blx	r3
 800b448:	4603      	mov	r3, r0
 800b44a:	73fb      	strb	r3, [r7, #15]
      break;
 800b44c:	e13a      	b.n	800b6c4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	785b      	ldrb	r3, [r3, #1]
 800b452:	2b03      	cmp	r3, #3
 800b454:	d007      	beq.n	800b466 <USBD_StdEPReq+0x5c>
 800b456:	2b03      	cmp	r3, #3
 800b458:	f300 8129 	bgt.w	800b6ae <USBD_StdEPReq+0x2a4>
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d07f      	beq.n	800b560 <USBD_StdEPReq+0x156>
 800b460:	2b01      	cmp	r3, #1
 800b462:	d03c      	beq.n	800b4de <USBD_StdEPReq+0xd4>
 800b464:	e123      	b.n	800b6ae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d002      	beq.n	800b478 <USBD_StdEPReq+0x6e>
 800b472:	2b03      	cmp	r3, #3
 800b474:	d016      	beq.n	800b4a4 <USBD_StdEPReq+0x9a>
 800b476:	e02c      	b.n	800b4d2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b478:	7bbb      	ldrb	r3, [r7, #14]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00d      	beq.n	800b49a <USBD_StdEPReq+0x90>
 800b47e:	7bbb      	ldrb	r3, [r7, #14]
 800b480:	2b80      	cmp	r3, #128	; 0x80
 800b482:	d00a      	beq.n	800b49a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b484:	7bbb      	ldrb	r3, [r7, #14]
 800b486:	4619      	mov	r1, r3
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f006 fc37 	bl	8011cfc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b48e:	2180      	movs	r1, #128	; 0x80
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f006 fc33 	bl	8011cfc <USBD_LL_StallEP>
 800b496:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b498:	e020      	b.n	800b4dc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b49a:	6839      	ldr	r1, [r7, #0]
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fc45 	bl	800bd2c <USBD_CtlError>
              break;
 800b4a2:	e01b      	b.n	800b4dc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	885b      	ldrh	r3, [r3, #2]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10e      	bne.n	800b4ca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b4ac:	7bbb      	ldrb	r3, [r7, #14]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00b      	beq.n	800b4ca <USBD_StdEPReq+0xc0>
 800b4b2:	7bbb      	ldrb	r3, [r7, #14]
 800b4b4:	2b80      	cmp	r3, #128	; 0x80
 800b4b6:	d008      	beq.n	800b4ca <USBD_StdEPReq+0xc0>
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	88db      	ldrh	r3, [r3, #6]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d104      	bne.n	800b4ca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4c0:	7bbb      	ldrb	r3, [r7, #14]
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f006 fc19 	bl	8011cfc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fcf9 	bl	800bec2 <USBD_CtlSendStatus>

              break;
 800b4d0:	e004      	b.n	800b4dc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b4d2:	6839      	ldr	r1, [r7, #0]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 fc29 	bl	800bd2c <USBD_CtlError>
              break;
 800b4da:	bf00      	nop
          }
          break;
 800b4dc:	e0ec      	b.n	800b6b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d002      	beq.n	800b4f0 <USBD_StdEPReq+0xe6>
 800b4ea:	2b03      	cmp	r3, #3
 800b4ec:	d016      	beq.n	800b51c <USBD_StdEPReq+0x112>
 800b4ee:	e030      	b.n	800b552 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00d      	beq.n	800b512 <USBD_StdEPReq+0x108>
 800b4f6:	7bbb      	ldrb	r3, [r7, #14]
 800b4f8:	2b80      	cmp	r3, #128	; 0x80
 800b4fa:	d00a      	beq.n	800b512 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4fc:	7bbb      	ldrb	r3, [r7, #14]
 800b4fe:	4619      	mov	r1, r3
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f006 fbfb 	bl	8011cfc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b506:	2180      	movs	r1, #128	; 0x80
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f006 fbf7 	bl	8011cfc <USBD_LL_StallEP>
 800b50e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b510:	e025      	b.n	800b55e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b512:	6839      	ldr	r1, [r7, #0]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fc09 	bl	800bd2c <USBD_CtlError>
              break;
 800b51a:	e020      	b.n	800b55e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	885b      	ldrh	r3, [r3, #2]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d11b      	bne.n	800b55c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b524:	7bbb      	ldrb	r3, [r7, #14]
 800b526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d004      	beq.n	800b538 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b52e:	7bbb      	ldrb	r3, [r7, #14]
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f006 fc01 	bl	8011d3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 fcc2 	bl	800bec2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	4798      	blx	r3
 800b54c:	4603      	mov	r3, r0
 800b54e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b550:	e004      	b.n	800b55c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b552:	6839      	ldr	r1, [r7, #0]
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fbe9 	bl	800bd2c <USBD_CtlError>
              break;
 800b55a:	e000      	b.n	800b55e <USBD_StdEPReq+0x154>
              break;
 800b55c:	bf00      	nop
          }
          break;
 800b55e:	e0ab      	b.n	800b6b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b566:	b2db      	uxtb	r3, r3
 800b568:	2b02      	cmp	r3, #2
 800b56a:	d002      	beq.n	800b572 <USBD_StdEPReq+0x168>
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	d032      	beq.n	800b5d6 <USBD_StdEPReq+0x1cc>
 800b570:	e097      	b.n	800b6a2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b572:	7bbb      	ldrb	r3, [r7, #14]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d007      	beq.n	800b588 <USBD_StdEPReq+0x17e>
 800b578:	7bbb      	ldrb	r3, [r7, #14]
 800b57a:	2b80      	cmp	r3, #128	; 0x80
 800b57c:	d004      	beq.n	800b588 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b57e:	6839      	ldr	r1, [r7, #0]
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 fbd3 	bl	800bd2c <USBD_CtlError>
                break;
 800b586:	e091      	b.n	800b6ac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	da0b      	bge.n	800b5a8 <USBD_StdEPReq+0x19e>
 800b590:	7bbb      	ldrb	r3, [r7, #14]
 800b592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b596:	4613      	mov	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	4413      	add	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	3310      	adds	r3, #16
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	e00b      	b.n	800b5c0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b5a8:	7bbb      	ldrb	r3, [r7, #14]
 800b5aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	4413      	add	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	4413      	add	r3, r2
 800b5be:	3304      	adds	r3, #4
 800b5c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2202      	movs	r2, #2
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 fc1d 	bl	800be0e <USBD_CtlSendData>
              break;
 800b5d4:	e06a      	b.n	800b6ac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b5d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	da11      	bge.n	800b602 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b5de:	7bbb      	ldrb	r3, [r7, #14]
 800b5e0:	f003 020f 	and.w	r2, r3, #15
 800b5e4:	6879      	ldr	r1, [r7, #4]
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	4413      	add	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	440b      	add	r3, r1
 800b5f0:	3324      	adds	r3, #36	; 0x24
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d117      	bne.n	800b628 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fb96 	bl	800bd2c <USBD_CtlError>
                  break;
 800b600:	e054      	b.n	800b6ac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b602:	7bbb      	ldrb	r3, [r7, #14]
 800b604:	f003 020f 	and.w	r2, r3, #15
 800b608:	6879      	ldr	r1, [r7, #4]
 800b60a:	4613      	mov	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4413      	add	r3, r2
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	440b      	add	r3, r1
 800b614:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b618:	881b      	ldrh	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d104      	bne.n	800b628 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b61e:	6839      	ldr	r1, [r7, #0]
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 fb83 	bl	800bd2c <USBD_CtlError>
                  break;
 800b626:	e041      	b.n	800b6ac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	da0b      	bge.n	800b648 <USBD_StdEPReq+0x23e>
 800b630:	7bbb      	ldrb	r3, [r7, #14]
 800b632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b636:	4613      	mov	r3, r2
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	4413      	add	r3, r2
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	3310      	adds	r3, #16
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	4413      	add	r3, r2
 800b644:	3304      	adds	r3, #4
 800b646:	e00b      	b.n	800b660 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b648:	7bbb      	ldrb	r3, [r7, #14]
 800b64a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b64e:	4613      	mov	r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4413      	add	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	4413      	add	r3, r2
 800b65e:	3304      	adds	r3, #4
 800b660:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b662:	7bbb      	ldrb	r3, [r7, #14]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d002      	beq.n	800b66e <USBD_StdEPReq+0x264>
 800b668:	7bbb      	ldrb	r3, [r7, #14]
 800b66a:	2b80      	cmp	r3, #128	; 0x80
 800b66c:	d103      	bne.n	800b676 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	2200      	movs	r2, #0
 800b672:	601a      	str	r2, [r3, #0]
 800b674:	e00e      	b.n	800b694 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b676:	7bbb      	ldrb	r3, [r7, #14]
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f006 fb7c 	bl	8011d78 <USBD_LL_IsStallEP>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d003      	beq.n	800b68e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	2201      	movs	r2, #1
 800b68a:	601a      	str	r2, [r3, #0]
 800b68c:	e002      	b.n	800b694 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	2200      	movs	r2, #0
 800b692:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	2202      	movs	r2, #2
 800b698:	4619      	mov	r1, r3
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fbb7 	bl	800be0e <USBD_CtlSendData>
              break;
 800b6a0:	e004      	b.n	800b6ac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fb41 	bl	800bd2c <USBD_CtlError>
              break;
 800b6aa:	bf00      	nop
          }
          break;
 800b6ac:	e004      	b.n	800b6b8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b6ae:	6839      	ldr	r1, [r7, #0]
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 fb3b 	bl	800bd2c <USBD_CtlError>
          break;
 800b6b6:	bf00      	nop
      }
      break;
 800b6b8:	e004      	b.n	800b6c4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b6ba:	6839      	ldr	r1, [r7, #0]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fb35 	bl	800bd2c <USBD_CtlError>
      break;
 800b6c2:	bf00      	nop
  }

  return ret;
 800b6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
	...

0800b6d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	885b      	ldrh	r3, [r3, #2]
 800b6ea:	0a1b      	lsrs	r3, r3, #8
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	2b06      	cmp	r3, #6
 800b6f2:	f200 8128 	bhi.w	800b946 <USBD_GetDescriptor+0x276>
 800b6f6:	a201      	add	r2, pc, #4	; (adr r2, 800b6fc <USBD_GetDescriptor+0x2c>)
 800b6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6fc:	0800b719 	.word	0x0800b719
 800b700:	0800b731 	.word	0x0800b731
 800b704:	0800b771 	.word	0x0800b771
 800b708:	0800b947 	.word	0x0800b947
 800b70c:	0800b947 	.word	0x0800b947
 800b710:	0800b8e7 	.word	0x0800b8e7
 800b714:	0800b913 	.word	0x0800b913
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	7c12      	ldrb	r2, [r2, #16]
 800b724:	f107 0108 	add.w	r1, r7, #8
 800b728:	4610      	mov	r0, r2
 800b72a:	4798      	blx	r3
 800b72c:	60f8      	str	r0, [r7, #12]
      break;
 800b72e:	e112      	b.n	800b956 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	7c1b      	ldrb	r3, [r3, #16]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10d      	bne.n	800b754 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b740:	f107 0208 	add.w	r2, r7, #8
 800b744:	4610      	mov	r0, r2
 800b746:	4798      	blx	r3
 800b748:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3301      	adds	r3, #1
 800b74e:	2202      	movs	r2, #2
 800b750:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b752:	e100      	b.n	800b956 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75c:	f107 0208 	add.w	r2, r7, #8
 800b760:	4610      	mov	r0, r2
 800b762:	4798      	blx	r3
 800b764:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3301      	adds	r3, #1
 800b76a:	2202      	movs	r2, #2
 800b76c:	701a      	strb	r2, [r3, #0]
      break;
 800b76e:	e0f2      	b.n	800b956 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	885b      	ldrh	r3, [r3, #2]
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b05      	cmp	r3, #5
 800b778:	f200 80ac 	bhi.w	800b8d4 <USBD_GetDescriptor+0x204>
 800b77c:	a201      	add	r2, pc, #4	; (adr r2, 800b784 <USBD_GetDescriptor+0xb4>)
 800b77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b782:	bf00      	nop
 800b784:	0800b79d 	.word	0x0800b79d
 800b788:	0800b7d1 	.word	0x0800b7d1
 800b78c:	0800b805 	.word	0x0800b805
 800b790:	0800b839 	.word	0x0800b839
 800b794:	0800b86d 	.word	0x0800b86d
 800b798:	0800b8a1 	.word	0x0800b8a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00b      	beq.n	800b7c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	7c12      	ldrb	r2, [r2, #16]
 800b7b4:	f107 0108 	add.w	r1, r7, #8
 800b7b8:	4610      	mov	r0, r2
 800b7ba:	4798      	blx	r3
 800b7bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7be:	e091      	b.n	800b8e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7c0:	6839      	ldr	r1, [r7, #0]
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 fab2 	bl	800bd2c <USBD_CtlError>
            err++;
 800b7c8:	7afb      	ldrb	r3, [r7, #11]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ce:	e089      	b.n	800b8e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00b      	beq.n	800b7f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	7c12      	ldrb	r2, [r2, #16]
 800b7e8:	f107 0108 	add.w	r1, r7, #8
 800b7ec:	4610      	mov	r0, r2
 800b7ee:	4798      	blx	r3
 800b7f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7f2:	e077      	b.n	800b8e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7f4:	6839      	ldr	r1, [r7, #0]
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fa98 	bl	800bd2c <USBD_CtlError>
            err++;
 800b7fc:	7afb      	ldrb	r3, [r7, #11]
 800b7fe:	3301      	adds	r3, #1
 800b800:	72fb      	strb	r3, [r7, #11]
          break;
 800b802:	e06f      	b.n	800b8e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d00b      	beq.n	800b828 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	7c12      	ldrb	r2, [r2, #16]
 800b81c:	f107 0108 	add.w	r1, r7, #8
 800b820:	4610      	mov	r0, r2
 800b822:	4798      	blx	r3
 800b824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b826:	e05d      	b.n	800b8e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fa7e 	bl	800bd2c <USBD_CtlError>
            err++;
 800b830:	7afb      	ldrb	r3, [r7, #11]
 800b832:	3301      	adds	r3, #1
 800b834:	72fb      	strb	r3, [r7, #11]
          break;
 800b836:	e055      	b.n	800b8e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00b      	beq.n	800b85c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b84a:	691b      	ldr	r3, [r3, #16]
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	7c12      	ldrb	r2, [r2, #16]
 800b850:	f107 0108 	add.w	r1, r7, #8
 800b854:	4610      	mov	r0, r2
 800b856:	4798      	blx	r3
 800b858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b85a:	e043      	b.n	800b8e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b85c:	6839      	ldr	r1, [r7, #0]
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 fa64 	bl	800bd2c <USBD_CtlError>
            err++;
 800b864:	7afb      	ldrb	r3, [r7, #11]
 800b866:	3301      	adds	r3, #1
 800b868:	72fb      	strb	r3, [r7, #11]
          break;
 800b86a:	e03b      	b.n	800b8e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b872:	695b      	ldr	r3, [r3, #20]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00b      	beq.n	800b890 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b87e:	695b      	ldr	r3, [r3, #20]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	7c12      	ldrb	r2, [r2, #16]
 800b884:	f107 0108 	add.w	r1, r7, #8
 800b888:	4610      	mov	r0, r2
 800b88a:	4798      	blx	r3
 800b88c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b88e:	e029      	b.n	800b8e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b890:	6839      	ldr	r1, [r7, #0]
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 fa4a 	bl	800bd2c <USBD_CtlError>
            err++;
 800b898:	7afb      	ldrb	r3, [r7, #11]
 800b89a:	3301      	adds	r3, #1
 800b89c:	72fb      	strb	r3, [r7, #11]
          break;
 800b89e:	e021      	b.n	800b8e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8a6:	699b      	ldr	r3, [r3, #24]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00b      	beq.n	800b8c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8b2:	699b      	ldr	r3, [r3, #24]
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	7c12      	ldrb	r2, [r2, #16]
 800b8b8:	f107 0108 	add.w	r1, r7, #8
 800b8bc:	4610      	mov	r0, r2
 800b8be:	4798      	blx	r3
 800b8c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8c2:	e00f      	b.n	800b8e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8c4:	6839      	ldr	r1, [r7, #0]
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 fa30 	bl	800bd2c <USBD_CtlError>
            err++;
 800b8cc:	7afb      	ldrb	r3, [r7, #11]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b8d2:	e007      	b.n	800b8e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b8d4:	6839      	ldr	r1, [r7, #0]
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 fa28 	bl	800bd2c <USBD_CtlError>
          err++;
 800b8dc:	7afb      	ldrb	r3, [r7, #11]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b8e2:	bf00      	nop
      }
      break;
 800b8e4:	e037      	b.n	800b956 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	7c1b      	ldrb	r3, [r3, #16]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d109      	bne.n	800b902 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f6:	f107 0208 	add.w	r2, r7, #8
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	4798      	blx	r3
 800b8fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b900:	e029      	b.n	800b956 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fa11 	bl	800bd2c <USBD_CtlError>
        err++;
 800b90a:	7afb      	ldrb	r3, [r7, #11]
 800b90c:	3301      	adds	r3, #1
 800b90e:	72fb      	strb	r3, [r7, #11]
      break;
 800b910:	e021      	b.n	800b956 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	7c1b      	ldrb	r3, [r3, #16]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10d      	bne.n	800b936 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b922:	f107 0208 	add.w	r2, r7, #8
 800b926:	4610      	mov	r0, r2
 800b928:	4798      	blx	r3
 800b92a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	3301      	adds	r3, #1
 800b930:	2207      	movs	r2, #7
 800b932:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b934:	e00f      	b.n	800b956 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b936:	6839      	ldr	r1, [r7, #0]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 f9f7 	bl	800bd2c <USBD_CtlError>
        err++;
 800b93e:	7afb      	ldrb	r3, [r7, #11]
 800b940:	3301      	adds	r3, #1
 800b942:	72fb      	strb	r3, [r7, #11]
      break;
 800b944:	e007      	b.n	800b956 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b946:	6839      	ldr	r1, [r7, #0]
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 f9ef 	bl	800bd2c <USBD_CtlError>
      err++;
 800b94e:	7afb      	ldrb	r3, [r7, #11]
 800b950:	3301      	adds	r3, #1
 800b952:	72fb      	strb	r3, [r7, #11]
      break;
 800b954:	bf00      	nop
  }

  if (err != 0U)
 800b956:	7afb      	ldrb	r3, [r7, #11]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d11e      	bne.n	800b99a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	88db      	ldrh	r3, [r3, #6]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d016      	beq.n	800b992 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b964:	893b      	ldrh	r3, [r7, #8]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00e      	beq.n	800b988 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	88da      	ldrh	r2, [r3, #6]
 800b96e:	893b      	ldrh	r3, [r7, #8]
 800b970:	4293      	cmp	r3, r2
 800b972:	bf28      	it	cs
 800b974:	4613      	movcs	r3, r2
 800b976:	b29b      	uxth	r3, r3
 800b978:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b97a:	893b      	ldrh	r3, [r7, #8]
 800b97c:	461a      	mov	r2, r3
 800b97e:	68f9      	ldr	r1, [r7, #12]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fa44 	bl	800be0e <USBD_CtlSendData>
 800b986:	e009      	b.n	800b99c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b988:	6839      	ldr	r1, [r7, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f9ce 	bl	800bd2c <USBD_CtlError>
 800b990:	e004      	b.n	800b99c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 fa95 	bl	800bec2 <USBD_CtlSendStatus>
 800b998:	e000      	b.n	800b99c <USBD_GetDescriptor+0x2cc>
    return;
 800b99a:	bf00      	nop
  }
}
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop

0800b9a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	889b      	ldrh	r3, [r3, #4]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d131      	bne.n	800ba1a <USBD_SetAddress+0x76>
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	88db      	ldrh	r3, [r3, #6]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d12d      	bne.n	800ba1a <USBD_SetAddress+0x76>
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	885b      	ldrh	r3, [r3, #2]
 800b9c2:	2b7f      	cmp	r3, #127	; 0x7f
 800b9c4:	d829      	bhi.n	800ba1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	885b      	ldrh	r3, [r3, #2]
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b03      	cmp	r3, #3
 800b9dc:	d104      	bne.n	800b9e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 f9a3 	bl	800bd2c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9e6:	e01d      	b.n	800ba24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	7bfa      	ldrb	r2, [r7, #15]
 800b9ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9f0:	7bfb      	ldrb	r3, [r7, #15]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f006 f9eb 	bl	8011dd0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fa61 	bl	800bec2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ba00:	7bfb      	ldrb	r3, [r7, #15]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d004      	beq.n	800ba10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2202      	movs	r2, #2
 800ba0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba0e:	e009      	b.n	800ba24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba18:	e004      	b.n	800ba24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 f985 	bl	800bd2c <USBD_CtlError>
  }
}
 800ba22:	bf00      	nop
 800ba24:	bf00      	nop
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	885b      	ldrh	r3, [r3, #2]
 800ba3e:	b2da      	uxtb	r2, r3
 800ba40:	4b4c      	ldr	r3, [pc, #304]	; (800bb74 <USBD_SetConfig+0x148>)
 800ba42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba44:	4b4b      	ldr	r3, [pc, #300]	; (800bb74 <USBD_SetConfig+0x148>)
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d905      	bls.n	800ba58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f96c 	bl	800bd2c <USBD_CtlError>
    return USBD_FAIL;
 800ba54:	2303      	movs	r3, #3
 800ba56:	e088      	b.n	800bb6a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	d002      	beq.n	800ba6a <USBD_SetConfig+0x3e>
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	d025      	beq.n	800bab4 <USBD_SetConfig+0x88>
 800ba68:	e071      	b.n	800bb4e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ba6a:	4b42      	ldr	r3, [pc, #264]	; (800bb74 <USBD_SetConfig+0x148>)
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d01c      	beq.n	800baac <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ba72:	4b40      	ldr	r3, [pc, #256]	; (800bb74 <USBD_SetConfig+0x148>)
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	461a      	mov	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba7c:	4b3d      	ldr	r3, [pc, #244]	; (800bb74 <USBD_SetConfig+0x148>)
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	4619      	mov	r1, r3
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7ff f948 	bl	800ad18 <USBD_SetClassConfig>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d004      	beq.n	800ba9c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ba92:	6839      	ldr	r1, [r7, #0]
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 f949 	bl	800bd2c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ba9a:	e065      	b.n	800bb68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fa10 	bl	800bec2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2203      	movs	r2, #3
 800baa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800baaa:	e05d      	b.n	800bb68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fa08 	bl	800bec2 <USBD_CtlSendStatus>
      break;
 800bab2:	e059      	b.n	800bb68 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bab4:	4b2f      	ldr	r3, [pc, #188]	; (800bb74 <USBD_SetConfig+0x148>)
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d112      	bne.n	800bae2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2202      	movs	r2, #2
 800bac0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bac4:	4b2b      	ldr	r3, [pc, #172]	; (800bb74 <USBD_SetConfig+0x148>)
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	461a      	mov	r2, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bace:	4b29      	ldr	r3, [pc, #164]	; (800bb74 <USBD_SetConfig+0x148>)
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f7ff f93b 	bl	800ad50 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 f9f1 	bl	800bec2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bae0:	e042      	b.n	800bb68 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bae2:	4b24      	ldr	r3, [pc, #144]	; (800bb74 <USBD_SetConfig+0x148>)
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	461a      	mov	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	429a      	cmp	r2, r3
 800baee:	d02a      	beq.n	800bb46 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	4619      	mov	r1, r3
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f7ff f929 	bl	800ad50 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bafe:	4b1d      	ldr	r3, [pc, #116]	; (800bb74 <USBD_SetConfig+0x148>)
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	461a      	mov	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb08:	4b1a      	ldr	r3, [pc, #104]	; (800bb74 <USBD_SetConfig+0x148>)
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7ff f902 	bl	800ad18 <USBD_SetClassConfig>
 800bb14:	4603      	mov	r3, r0
 800bb16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00f      	beq.n	800bb3e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 f903 	bl	800bd2c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f7ff f90e 	bl	800ad50 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2202      	movs	r2, #2
 800bb38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb3c:	e014      	b.n	800bb68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f9bf 	bl	800bec2 <USBD_CtlSendStatus>
      break;
 800bb44:	e010      	b.n	800bb68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 f9bb 	bl	800bec2 <USBD_CtlSendStatus>
      break;
 800bb4c:	e00c      	b.n	800bb68 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f8eb 	bl	800bd2c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb56:	4b07      	ldr	r3, [pc, #28]	; (800bb74 <USBD_SetConfig+0x148>)
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7ff f8f7 	bl	800ad50 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bb62:	2303      	movs	r3, #3
 800bb64:	73fb      	strb	r3, [r7, #15]
      break;
 800bb66:	bf00      	nop
  }

  return ret;
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	200004bd 	.word	0x200004bd

0800bb78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	88db      	ldrh	r3, [r3, #6]
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d004      	beq.n	800bb94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb8a:	6839      	ldr	r1, [r7, #0]
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 f8cd 	bl	800bd2c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb92:	e023      	b.n	800bbdc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	2b02      	cmp	r3, #2
 800bb9e:	dc02      	bgt.n	800bba6 <USBD_GetConfig+0x2e>
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	dc03      	bgt.n	800bbac <USBD_GetConfig+0x34>
 800bba4:	e015      	b.n	800bbd2 <USBD_GetConfig+0x5a>
 800bba6:	2b03      	cmp	r3, #3
 800bba8:	d00b      	beq.n	800bbc2 <USBD_GetConfig+0x4a>
 800bbaa:	e012      	b.n	800bbd2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	3308      	adds	r3, #8
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f927 	bl	800be0e <USBD_CtlSendData>
        break;
 800bbc0:	e00c      	b.n	800bbdc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	3304      	adds	r3, #4
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	4619      	mov	r1, r3
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 f91f 	bl	800be0e <USBD_CtlSendData>
        break;
 800bbd0:	e004      	b.n	800bbdc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bbd2:	6839      	ldr	r1, [r7, #0]
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f8a9 	bl	800bd2c <USBD_CtlError>
        break;
 800bbda:	bf00      	nop
}
 800bbdc:	bf00      	nop
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d81e      	bhi.n	800bc3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	88db      	ldrh	r3, [r3, #6]
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d004      	beq.n	800bc0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f890 	bl	800bd2c <USBD_CtlError>
        break;
 800bc0c:	e01a      	b.n	800bc44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2201      	movs	r2, #1
 800bc12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d005      	beq.n	800bc2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	f043 0202 	orr.w	r2, r3, #2
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	330c      	adds	r3, #12
 800bc2e:	2202      	movs	r2, #2
 800bc30:	4619      	mov	r1, r3
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 f8eb 	bl	800be0e <USBD_CtlSendData>
      break;
 800bc38:	e004      	b.n	800bc44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bc3a:	6839      	ldr	r1, [r7, #0]
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 f875 	bl	800bd2c <USBD_CtlError>
      break;
 800bc42:	bf00      	nop
  }
}
 800bc44:	bf00      	nop
 800bc46:	3708      	adds	r7, #8
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	885b      	ldrh	r3, [r3, #2]
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d106      	bne.n	800bc6c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 f92b 	bl	800bec2 <USBD_CtlSendStatus>
  }
}
 800bc6c:	bf00      	nop
 800bc6e:	3708      	adds	r7, #8
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	3b01      	subs	r3, #1
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d80b      	bhi.n	800bca4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	885b      	ldrh	r3, [r3, #2]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d10c      	bne.n	800bcae <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 f910 	bl	800bec2 <USBD_CtlSendStatus>
      }
      break;
 800bca2:	e004      	b.n	800bcae <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bca4:	6839      	ldr	r1, [r7, #0]
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 f840 	bl	800bd2c <USBD_CtlError>
      break;
 800bcac:	e000      	b.n	800bcb0 <USBD_ClrFeature+0x3c>
      break;
 800bcae:	bf00      	nop
  }
}
 800bcb0:	bf00      	nop
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	781a      	ldrb	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	781a      	ldrb	r2, [r3, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	3301      	adds	r3, #1
 800bce0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f7ff fabb 	bl	800b25e <SWAPBYTE>
 800bce8:	4603      	mov	r3, r0
 800bcea:	461a      	mov	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	f7ff faae 	bl	800b25e <SWAPBYTE>
 800bd02:	4603      	mov	r3, r0
 800bd04:	461a      	mov	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3301      	adds	r3, #1
 800bd14:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f7ff faa1 	bl	800b25e <SWAPBYTE>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	461a      	mov	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	80da      	strh	r2, [r3, #6]
}
 800bd24:	bf00      	nop
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd36:	2180      	movs	r1, #128	; 0x80
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f005 ffdf 	bl	8011cfc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bd3e:	2100      	movs	r1, #0
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f005 ffdb 	bl	8011cfc <USBD_LL_StallEP>
}
 800bd46:	bf00      	nop
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b086      	sub	sp, #24
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	60f8      	str	r0, [r7, #12]
 800bd56:	60b9      	str	r1, [r7, #8]
 800bd58:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d036      	beq.n	800bdd2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bd68:	6938      	ldr	r0, [r7, #16]
 800bd6a:	f000 f836 	bl	800bdda <USBD_GetLen>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	3301      	adds	r3, #1
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	005b      	lsls	r3, r3, #1
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bd7c:	7dfb      	ldrb	r3, [r7, #23]
 800bd7e:	68ba      	ldr	r2, [r7, #8]
 800bd80:	4413      	add	r3, r2
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	7812      	ldrb	r2, [r2, #0]
 800bd86:	701a      	strb	r2, [r3, #0]
  idx++;
 800bd88:	7dfb      	ldrb	r3, [r7, #23]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bd8e:	7dfb      	ldrb	r3, [r7, #23]
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	4413      	add	r3, r2
 800bd94:	2203      	movs	r2, #3
 800bd96:	701a      	strb	r2, [r3, #0]
  idx++;
 800bd98:	7dfb      	ldrb	r3, [r7, #23]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bd9e:	e013      	b.n	800bdc8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bda0:	7dfb      	ldrb	r3, [r7, #23]
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	4413      	add	r3, r2
 800bda6:	693a      	ldr	r2, [r7, #16]
 800bda8:	7812      	ldrb	r2, [r2, #0]
 800bdaa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	613b      	str	r3, [r7, #16]
    idx++;
 800bdb2:	7dfb      	ldrb	r3, [r7, #23]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bdb8:	7dfb      	ldrb	r3, [r7, #23]
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	701a      	strb	r2, [r3, #0]
    idx++;
 800bdc2:	7dfb      	ldrb	r3, [r7, #23]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d1e7      	bne.n	800bda0 <USBD_GetString+0x52>
 800bdd0:	e000      	b.n	800bdd4 <USBD_GetString+0x86>
    return;
 800bdd2:	bf00      	nop
  }
}
 800bdd4:	3718      	adds	r7, #24
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bdda:	b480      	push	{r7}
 800bddc:	b085      	sub	sp, #20
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bde2:	2300      	movs	r3, #0
 800bde4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bdea:	e005      	b.n	800bdf8 <USBD_GetLen+0x1e>
  {
    len++;
 800bdec:	7bfb      	ldrb	r3, [r7, #15]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1f5      	bne.n	800bdec <USBD_GetLen+0x12>
  }

  return len;
 800be00:	7bfb      	ldrb	r3, [r7, #15]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3714      	adds	r7, #20
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b084      	sub	sp, #16
 800be12:	af00      	add	r7, sp, #0
 800be14:	60f8      	str	r0, [r7, #12]
 800be16:	60b9      	str	r1, [r7, #8]
 800be18:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2202      	movs	r2, #2
 800be1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	2100      	movs	r1, #0
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f005 ffea 	bl	8011e0e <USBD_LL_Transmit>

  return USBD_OK;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	2100      	movs	r1, #0
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f005 ffd9 	bl	8011e0e <USBD_LL_Transmit>

  return USBD_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b084      	sub	sp, #16
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	60f8      	str	r0, [r7, #12]
 800be6e:	60b9      	str	r1, [r7, #8]
 800be70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2203      	movs	r2, #3
 800be76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	2100      	movs	r1, #0
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f005 ffdd 	bl	8011e50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	2100      	movs	r1, #0
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f005 ffcc 	bl	8011e50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b082      	sub	sp, #8
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2204      	movs	r2, #4
 800bece:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bed2:	2300      	movs	r3, #0
 800bed4:	2200      	movs	r2, #0
 800bed6:	2100      	movs	r1, #0
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f005 ff98 	bl	8011e0e <USBD_LL_Transmit>

  return USBD_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2205      	movs	r2, #5
 800bef4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bef8:	2300      	movs	r3, #0
 800befa:	2200      	movs	r2, #0
 800befc:	2100      	movs	r1, #0
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f005 ffa6 	bl	8011e50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
	...

0800bf10 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	4603      	mov	r3, r0
 800bf18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bf1a:	79fb      	ldrb	r3, [r7, #7]
 800bf1c:	4a08      	ldr	r2, [pc, #32]	; (800bf40 <disk_status+0x30>)
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	4413      	add	r3, r2
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	79fa      	ldrb	r2, [r7, #7]
 800bf28:	4905      	ldr	r1, [pc, #20]	; (800bf40 <disk_status+0x30>)
 800bf2a:	440a      	add	r2, r1
 800bf2c:	7a12      	ldrb	r2, [r2, #8]
 800bf2e:	4610      	mov	r0, r2
 800bf30:	4798      	blx	r3
 800bf32:	4603      	mov	r3, r0
 800bf34:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bf36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	200004e8 	.word	0x200004e8

0800bf44 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bf52:	79fb      	ldrb	r3, [r7, #7]
 800bf54:	4a0d      	ldr	r2, [pc, #52]	; (800bf8c <disk_initialize+0x48>)
 800bf56:	5cd3      	ldrb	r3, [r2, r3]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d111      	bne.n	800bf80 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bf5c:	79fb      	ldrb	r3, [r7, #7]
 800bf5e:	4a0b      	ldr	r2, [pc, #44]	; (800bf8c <disk_initialize+0x48>)
 800bf60:	2101      	movs	r1, #1
 800bf62:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bf64:	79fb      	ldrb	r3, [r7, #7]
 800bf66:	4a09      	ldr	r2, [pc, #36]	; (800bf8c <disk_initialize+0x48>)
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	79fa      	ldrb	r2, [r7, #7]
 800bf72:	4906      	ldr	r1, [pc, #24]	; (800bf8c <disk_initialize+0x48>)
 800bf74:	440a      	add	r2, r1
 800bf76:	7a12      	ldrb	r2, [r2, #8]
 800bf78:	4610      	mov	r0, r2
 800bf7a:	4798      	blx	r3
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bf80:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	200004e8 	.word	0x200004e8

0800bf90 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bf90:	b590      	push	{r4, r7, lr}
 800bf92:	b087      	sub	sp, #28
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60b9      	str	r1, [r7, #8]
 800bf98:	607a      	str	r2, [r7, #4]
 800bf9a:	603b      	str	r3, [r7, #0]
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
 800bfa2:	4a0a      	ldr	r2, [pc, #40]	; (800bfcc <disk_read+0x3c>)
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	4413      	add	r3, r2
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	689c      	ldr	r4, [r3, #8]
 800bfac:	7bfb      	ldrb	r3, [r7, #15]
 800bfae:	4a07      	ldr	r2, [pc, #28]	; (800bfcc <disk_read+0x3c>)
 800bfb0:	4413      	add	r3, r2
 800bfb2:	7a18      	ldrb	r0, [r3, #8]
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	68b9      	ldr	r1, [r7, #8]
 800bfba:	47a0      	blx	r4
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	75fb      	strb	r3, [r7, #23]
  return res;
 800bfc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	371c      	adds	r7, #28
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd90      	pop	{r4, r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	200004e8 	.word	0x200004e8

0800bfd0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bfd0:	b590      	push	{r4, r7, lr}
 800bfd2:	b087      	sub	sp, #28
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60b9      	str	r1, [r7, #8]
 800bfd8:	607a      	str	r2, [r7, #4]
 800bfda:	603b      	str	r3, [r7, #0]
 800bfdc:	4603      	mov	r3, r0
 800bfde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bfe0:	7bfb      	ldrb	r3, [r7, #15]
 800bfe2:	4a0a      	ldr	r2, [pc, #40]	; (800c00c <disk_write+0x3c>)
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4413      	add	r3, r2
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	68dc      	ldr	r4, [r3, #12]
 800bfec:	7bfb      	ldrb	r3, [r7, #15]
 800bfee:	4a07      	ldr	r2, [pc, #28]	; (800c00c <disk_write+0x3c>)
 800bff0:	4413      	add	r3, r2
 800bff2:	7a18      	ldrb	r0, [r3, #8]
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	68b9      	ldr	r1, [r7, #8]
 800bffa:	47a0      	blx	r4
 800bffc:	4603      	mov	r3, r0
 800bffe:	75fb      	strb	r3, [r7, #23]
  return res;
 800c000:	7dfb      	ldrb	r3, [r7, #23]
}
 800c002:	4618      	mov	r0, r3
 800c004:	371c      	adds	r7, #28
 800c006:	46bd      	mov	sp, r7
 800c008:	bd90      	pop	{r4, r7, pc}
 800c00a:	bf00      	nop
 800c00c:	200004e8 	.word	0x200004e8

0800c010 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	4603      	mov	r3, r0
 800c018:	603a      	str	r2, [r7, #0]
 800c01a:	71fb      	strb	r3, [r7, #7]
 800c01c:	460b      	mov	r3, r1
 800c01e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c020:	79fb      	ldrb	r3, [r7, #7]
 800c022:	4a09      	ldr	r2, [pc, #36]	; (800c048 <disk_ioctl+0x38>)
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	4413      	add	r3, r2
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	79fa      	ldrb	r2, [r7, #7]
 800c02e:	4906      	ldr	r1, [pc, #24]	; (800c048 <disk_ioctl+0x38>)
 800c030:	440a      	add	r2, r1
 800c032:	7a10      	ldrb	r0, [r2, #8]
 800c034:	79b9      	ldrb	r1, [r7, #6]
 800c036:	683a      	ldr	r2, [r7, #0]
 800c038:	4798      	blx	r3
 800c03a:	4603      	mov	r3, r0
 800c03c:	73fb      	strb	r3, [r7, #15]
  return res;
 800c03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c040:	4618      	mov	r0, r3
 800c042:	3710      	adds	r7, #16
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	200004e8 	.word	0x200004e8

0800c04c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3301      	adds	r3, #1
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c05c:	89fb      	ldrh	r3, [r7, #14]
 800c05e:	021b      	lsls	r3, r3, #8
 800c060:	b21a      	sxth	r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	b21b      	sxth	r3, r3
 800c068:	4313      	orrs	r3, r2
 800c06a:	b21b      	sxth	r3, r3
 800c06c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c06e:	89fb      	ldrh	r3, [r7, #14]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c07c:	b480      	push	{r7}
 800c07e:	b085      	sub	sp, #20
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	3303      	adds	r3, #3
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	021b      	lsls	r3, r3, #8
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	3202      	adds	r2, #2
 800c094:	7812      	ldrb	r2, [r2, #0]
 800c096:	4313      	orrs	r3, r2
 800c098:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	021b      	lsls	r3, r3, #8
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	3201      	adds	r2, #1
 800c0a2:	7812      	ldrb	r2, [r2, #0]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	021b      	lsls	r3, r3, #8
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	7812      	ldrb	r2, [r2, #0]
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	60fb      	str	r3, [r7, #12]
	return rv;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3714      	adds	r7, #20
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr

0800c0c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c0c2:	b480      	push	{r7}
 800c0c4:	b083      	sub	sp, #12
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	1c5a      	adds	r2, r3, #1
 800c0d2:	607a      	str	r2, [r7, #4]
 800c0d4:	887a      	ldrh	r2, [r7, #2]
 800c0d6:	b2d2      	uxtb	r2, r2
 800c0d8:	701a      	strb	r2, [r3, #0]
 800c0da:	887b      	ldrh	r3, [r7, #2]
 800c0dc:	0a1b      	lsrs	r3, r3, #8
 800c0de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	1c5a      	adds	r2, r3, #1
 800c0e4:	607a      	str	r2, [r7, #4]
 800c0e6:	887a      	ldrh	r2, [r7, #2]
 800c0e8:	b2d2      	uxtb	r2, r2
 800c0ea:	701a      	strb	r2, [r3, #0]
}
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	1c5a      	adds	r2, r3, #1
 800c106:	607a      	str	r2, [r7, #4]
 800c108:	683a      	ldr	r2, [r7, #0]
 800c10a:	b2d2      	uxtb	r2, r2
 800c10c:	701a      	strb	r2, [r3, #0]
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	0a1b      	lsrs	r3, r3, #8
 800c112:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	1c5a      	adds	r2, r3, #1
 800c118:	607a      	str	r2, [r7, #4]
 800c11a:	683a      	ldr	r2, [r7, #0]
 800c11c:	b2d2      	uxtb	r2, r2
 800c11e:	701a      	strb	r2, [r3, #0]
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	0a1b      	lsrs	r3, r3, #8
 800c124:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	1c5a      	adds	r2, r3, #1
 800c12a:	607a      	str	r2, [r7, #4]
 800c12c:	683a      	ldr	r2, [r7, #0]
 800c12e:	b2d2      	uxtb	r2, r2
 800c130:	701a      	strb	r2, [r3, #0]
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	0a1b      	lsrs	r3, r3, #8
 800c136:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	1c5a      	adds	r2, r3, #1
 800c13c:	607a      	str	r2, [r7, #4]
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	b2d2      	uxtb	r2, r2
 800c142:	701a      	strb	r2, [r3, #0]
}
 800c144:	bf00      	nop
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c150:	b480      	push	{r7}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00d      	beq.n	800c186 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c16a:	693a      	ldr	r2, [r7, #16]
 800c16c:	1c53      	adds	r3, r2, #1
 800c16e:	613b      	str	r3, [r7, #16]
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	1c59      	adds	r1, r3, #1
 800c174:	6179      	str	r1, [r7, #20]
 800c176:	7812      	ldrb	r2, [r2, #0]
 800c178:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	3b01      	subs	r3, #1
 800c17e:	607b      	str	r3, [r7, #4]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1f1      	bne.n	800c16a <mem_cpy+0x1a>
	}
}
 800c186:	bf00      	nop
 800c188:	371c      	adds	r7, #28
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr

0800c192 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c192:	b480      	push	{r7}
 800c194:	b087      	sub	sp, #28
 800c196:	af00      	add	r7, sp, #0
 800c198:	60f8      	str	r0, [r7, #12]
 800c19a:	60b9      	str	r1, [r7, #8]
 800c19c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	617a      	str	r2, [r7, #20]
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	b2d2      	uxtb	r2, r2
 800c1ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	3b01      	subs	r3, #1
 800c1b2:	607b      	str	r3, [r7, #4]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d1f3      	bne.n	800c1a2 <mem_set+0x10>
}
 800c1ba:	bf00      	nop
 800c1bc:	bf00      	nop
 800c1be:	371c      	adds	r7, #28
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c1c8:	b480      	push	{r7}
 800c1ca:	b089      	sub	sp, #36	; 0x24
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	61fb      	str	r3, [r7, #28]
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	1c5a      	adds	r2, r3, #1
 800c1e4:	61fa      	str	r2, [r7, #28]
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	1c5a      	adds	r2, r3, #1
 800c1ee:	61ba      	str	r2, [r7, #24]
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	1acb      	subs	r3, r1, r3
 800c1f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	607b      	str	r3, [r7, #4]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d002      	beq.n	800c208 <mem_cmp+0x40>
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d0eb      	beq.n	800c1e0 <mem_cmp+0x18>

	return r;
 800c208:	697b      	ldr	r3, [r7, #20]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3724      	adds	r7, #36	; 0x24
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr

0800c216 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c216:	b480      	push	{r7}
 800c218:	b083      	sub	sp, #12
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c220:	e002      	b.n	800c228 <chk_chr+0x12>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	3301      	adds	r3, #1
 800c226:	607b      	str	r3, [r7, #4]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d005      	beq.n	800c23c <chk_chr+0x26>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	461a      	mov	r2, r3
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	4293      	cmp	r3, r2
 800c23a:	d1f2      	bne.n	800c222 <chk_chr+0xc>
	return *str;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	781b      	ldrb	r3, [r3, #0]
}
 800c240:	4618      	mov	r0, r3
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c256:	2300      	movs	r3, #0
 800c258:	60bb      	str	r3, [r7, #8]
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	60fb      	str	r3, [r7, #12]
 800c25e:	e029      	b.n	800c2b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c260:	4a27      	ldr	r2, [pc, #156]	; (800c300 <chk_lock+0xb4>)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	011b      	lsls	r3, r3, #4
 800c266:	4413      	add	r3, r2
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d01d      	beq.n	800c2aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c26e:	4a24      	ldr	r2, [pc, #144]	; (800c300 <chk_lock+0xb4>)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	011b      	lsls	r3, r3, #4
 800c274:	4413      	add	r3, r2
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d116      	bne.n	800c2ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c280:	4a1f      	ldr	r2, [pc, #124]	; (800c300 <chk_lock+0xb4>)
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	011b      	lsls	r3, r3, #4
 800c286:	4413      	add	r3, r2
 800c288:	3304      	adds	r3, #4
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c290:	429a      	cmp	r2, r3
 800c292:	d10c      	bne.n	800c2ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c294:	4a1a      	ldr	r2, [pc, #104]	; (800c300 <chk_lock+0xb4>)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	011b      	lsls	r3, r3, #4
 800c29a:	4413      	add	r3, r2
 800c29c:	3308      	adds	r3, #8
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d102      	bne.n	800c2ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c2a8:	e007      	b.n	800c2ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	60fb      	str	r3, [r7, #12]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d9d2      	bls.n	800c260 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d109      	bne.n	800c2d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d102      	bne.n	800c2cc <chk_lock+0x80>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	d101      	bne.n	800c2d0 <chk_lock+0x84>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	e010      	b.n	800c2f2 <chk_lock+0xa6>
 800c2d0:	2312      	movs	r3, #18
 800c2d2:	e00e      	b.n	800c2f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d108      	bne.n	800c2ec <chk_lock+0xa0>
 800c2da:	4a09      	ldr	r2, [pc, #36]	; (800c300 <chk_lock+0xb4>)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	011b      	lsls	r3, r3, #4
 800c2e0:	4413      	add	r3, r2
 800c2e2:	330c      	adds	r3, #12
 800c2e4:	881b      	ldrh	r3, [r3, #0]
 800c2e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2ea:	d101      	bne.n	800c2f0 <chk_lock+0xa4>
 800c2ec:	2310      	movs	r3, #16
 800c2ee:	e000      	b.n	800c2f2 <chk_lock+0xa6>
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3714      	adds	r7, #20
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	200004c8 	.word	0x200004c8

0800c304 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c30a:	2300      	movs	r3, #0
 800c30c:	607b      	str	r3, [r7, #4]
 800c30e:	e002      	b.n	800c316 <enq_lock+0x12>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	3301      	adds	r3, #1
 800c314:	607b      	str	r3, [r7, #4]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d806      	bhi.n	800c32a <enq_lock+0x26>
 800c31c:	4a09      	ldr	r2, [pc, #36]	; (800c344 <enq_lock+0x40>)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	011b      	lsls	r3, r3, #4
 800c322:	4413      	add	r3, r2
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1f2      	bne.n	800c310 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	bf14      	ite	ne
 800c330:	2301      	movne	r3, #1
 800c332:	2300      	moveq	r3, #0
 800c334:	b2db      	uxtb	r3, r3
}
 800c336:	4618      	mov	r0, r3
 800c338:	370c      	adds	r7, #12
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	200004c8 	.word	0x200004c8

0800c348 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c352:	2300      	movs	r3, #0
 800c354:	60fb      	str	r3, [r7, #12]
 800c356:	e01f      	b.n	800c398 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c358:	4a41      	ldr	r2, [pc, #260]	; (800c460 <inc_lock+0x118>)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	011b      	lsls	r3, r3, #4
 800c35e:	4413      	add	r3, r2
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	429a      	cmp	r2, r3
 800c368:	d113      	bne.n	800c392 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c36a:	4a3d      	ldr	r2, [pc, #244]	; (800c460 <inc_lock+0x118>)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	011b      	lsls	r3, r3, #4
 800c370:	4413      	add	r3, r2
 800c372:	3304      	adds	r3, #4
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d109      	bne.n	800c392 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c37e:	4a38      	ldr	r2, [pc, #224]	; (800c460 <inc_lock+0x118>)
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	011b      	lsls	r3, r3, #4
 800c384:	4413      	add	r3, r2
 800c386:	3308      	adds	r3, #8
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c38e:	429a      	cmp	r2, r3
 800c390:	d006      	beq.n	800c3a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	3301      	adds	r3, #1
 800c396:	60fb      	str	r3, [r7, #12]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d9dc      	bls.n	800c358 <inc_lock+0x10>
 800c39e:	e000      	b.n	800c3a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c3a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2b02      	cmp	r3, #2
 800c3a6:	d132      	bne.n	800c40e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	60fb      	str	r3, [r7, #12]
 800c3ac:	e002      	b.n	800c3b4 <inc_lock+0x6c>
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	60fb      	str	r3, [r7, #12]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d806      	bhi.n	800c3c8 <inc_lock+0x80>
 800c3ba:	4a29      	ldr	r2, [pc, #164]	; (800c460 <inc_lock+0x118>)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	011b      	lsls	r3, r3, #4
 800c3c0:	4413      	add	r3, r2
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d1f2      	bne.n	800c3ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2b02      	cmp	r3, #2
 800c3cc:	d101      	bne.n	800c3d2 <inc_lock+0x8a>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	e040      	b.n	800c454 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	4922      	ldr	r1, [pc, #136]	; (800c460 <inc_lock+0x118>)
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	011b      	lsls	r3, r3, #4
 800c3dc:	440b      	add	r3, r1
 800c3de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	689a      	ldr	r2, [r3, #8]
 800c3e4:	491e      	ldr	r1, [pc, #120]	; (800c460 <inc_lock+0x118>)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	011b      	lsls	r3, r3, #4
 800c3ea:	440b      	add	r3, r1
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	695a      	ldr	r2, [r3, #20]
 800c3f4:	491a      	ldr	r1, [pc, #104]	; (800c460 <inc_lock+0x118>)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	011b      	lsls	r3, r3, #4
 800c3fa:	440b      	add	r3, r1
 800c3fc:	3308      	adds	r3, #8
 800c3fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c400:	4a17      	ldr	r2, [pc, #92]	; (800c460 <inc_lock+0x118>)
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	011b      	lsls	r3, r3, #4
 800c406:	4413      	add	r3, r2
 800c408:	330c      	adds	r3, #12
 800c40a:	2200      	movs	r2, #0
 800c40c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d009      	beq.n	800c428 <inc_lock+0xe0>
 800c414:	4a12      	ldr	r2, [pc, #72]	; (800c460 <inc_lock+0x118>)
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	011b      	lsls	r3, r3, #4
 800c41a:	4413      	add	r3, r2
 800c41c:	330c      	adds	r3, #12
 800c41e:	881b      	ldrh	r3, [r3, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d001      	beq.n	800c428 <inc_lock+0xe0>
 800c424:	2300      	movs	r3, #0
 800c426:	e015      	b.n	800c454 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d108      	bne.n	800c440 <inc_lock+0xf8>
 800c42e:	4a0c      	ldr	r2, [pc, #48]	; (800c460 <inc_lock+0x118>)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	011b      	lsls	r3, r3, #4
 800c434:	4413      	add	r3, r2
 800c436:	330c      	adds	r3, #12
 800c438:	881b      	ldrh	r3, [r3, #0]
 800c43a:	3301      	adds	r3, #1
 800c43c:	b29a      	uxth	r2, r3
 800c43e:	e001      	b.n	800c444 <inc_lock+0xfc>
 800c440:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c444:	4906      	ldr	r1, [pc, #24]	; (800c460 <inc_lock+0x118>)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	011b      	lsls	r3, r3, #4
 800c44a:	440b      	add	r3, r1
 800c44c:	330c      	adds	r3, #12
 800c44e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	3301      	adds	r3, #1
}
 800c454:	4618      	mov	r0, r3
 800c456:	3714      	adds	r7, #20
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr
 800c460:	200004c8 	.word	0x200004c8

0800c464 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c464:	b480      	push	{r7}
 800c466:	b085      	sub	sp, #20
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	3b01      	subs	r3, #1
 800c470:	607b      	str	r3, [r7, #4]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d825      	bhi.n	800c4c4 <dec_lock+0x60>
		n = Files[i].ctr;
 800c478:	4a17      	ldr	r2, [pc, #92]	; (800c4d8 <dec_lock+0x74>)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	011b      	lsls	r3, r3, #4
 800c47e:	4413      	add	r3, r2
 800c480:	330c      	adds	r3, #12
 800c482:	881b      	ldrh	r3, [r3, #0]
 800c484:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c486:	89fb      	ldrh	r3, [r7, #14]
 800c488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c48c:	d101      	bne.n	800c492 <dec_lock+0x2e>
 800c48e:	2300      	movs	r3, #0
 800c490:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c492:	89fb      	ldrh	r3, [r7, #14]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <dec_lock+0x3a>
 800c498:	89fb      	ldrh	r3, [r7, #14]
 800c49a:	3b01      	subs	r3, #1
 800c49c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c49e:	4a0e      	ldr	r2, [pc, #56]	; (800c4d8 <dec_lock+0x74>)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	011b      	lsls	r3, r3, #4
 800c4a4:	4413      	add	r3, r2
 800c4a6:	330c      	adds	r3, #12
 800c4a8:	89fa      	ldrh	r2, [r7, #14]
 800c4aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c4ac:	89fb      	ldrh	r3, [r7, #14]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d105      	bne.n	800c4be <dec_lock+0x5a>
 800c4b2:	4a09      	ldr	r2, [pc, #36]	; (800c4d8 <dec_lock+0x74>)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	011b      	lsls	r3, r3, #4
 800c4b8:	4413      	add	r3, r2
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	737b      	strb	r3, [r7, #13]
 800c4c2:	e001      	b.n	800c4c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c4c4:	2302      	movs	r3, #2
 800c4c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c4c8:	7b7b      	ldrb	r3, [r7, #13]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3714      	adds	r7, #20
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop
 800c4d8:	200004c8 	.word	0x200004c8

0800c4dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	60fb      	str	r3, [r7, #12]
 800c4e8:	e010      	b.n	800c50c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c4ea:	4a0d      	ldr	r2, [pc, #52]	; (800c520 <clear_lock+0x44>)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	011b      	lsls	r3, r3, #4
 800c4f0:	4413      	add	r3, r2
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d105      	bne.n	800c506 <clear_lock+0x2a>
 800c4fa:	4a09      	ldr	r2, [pc, #36]	; (800c520 <clear_lock+0x44>)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	011b      	lsls	r3, r3, #4
 800c500:	4413      	add	r3, r2
 800c502:	2200      	movs	r2, #0
 800c504:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	3301      	adds	r3, #1
 800c50a:	60fb      	str	r3, [r7, #12]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2b01      	cmp	r3, #1
 800c510:	d9eb      	bls.n	800c4ea <clear_lock+0xe>
	}
}
 800c512:	bf00      	nop
 800c514:	bf00      	nop
 800c516:	3714      	adds	r7, #20
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr
 800c520:	200004c8 	.word	0x200004c8

0800c524 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	78db      	ldrb	r3, [r3, #3]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d034      	beq.n	800c5a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	7858      	ldrb	r0, [r3, #1]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c548:	2301      	movs	r3, #1
 800c54a:	697a      	ldr	r2, [r7, #20]
 800c54c:	f7ff fd40 	bl	800bfd0 <disk_write>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d002      	beq.n	800c55c <sync_window+0x38>
			res = FR_DISK_ERR;
 800c556:	2301      	movs	r3, #1
 800c558:	73fb      	strb	r3, [r7, #15]
 800c55a:	e022      	b.n	800c5a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	697a      	ldr	r2, [r7, #20]
 800c568:	1ad2      	subs	r2, r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	699b      	ldr	r3, [r3, #24]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d217      	bcs.n	800c5a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	789b      	ldrb	r3, [r3, #2]
 800c576:	613b      	str	r3, [r7, #16]
 800c578:	e010      	b.n	800c59c <sync_window+0x78>
					wsect += fs->fsize;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	699b      	ldr	r3, [r3, #24]
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	4413      	add	r3, r2
 800c582:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	7858      	ldrb	r0, [r3, #1]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c58e:	2301      	movs	r3, #1
 800c590:	697a      	ldr	r2, [r7, #20]
 800c592:	f7ff fd1d 	bl	800bfd0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	3b01      	subs	r3, #1
 800c59a:	613b      	str	r3, [r7, #16]
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d8eb      	bhi.n	800c57a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3718      	adds	r7, #24
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5be:	683a      	ldr	r2, [r7, #0]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d01b      	beq.n	800c5fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f7ff ffad 	bl	800c524 <sync_window>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c5ce:	7bfb      	ldrb	r3, [r7, #15]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d113      	bne.n	800c5fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	7858      	ldrb	r0, [r3, #1]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5de:	2301      	movs	r3, #1
 800c5e0:	683a      	ldr	r2, [r7, #0]
 800c5e2:	f7ff fcd5 	bl	800bf90 <disk_read>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d004      	beq.n	800c5f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c5ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	683a      	ldr	r2, [r7, #0]
 800c5fa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800c5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
	...

0800c608 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7ff ff87 	bl	800c524 <sync_window>
 800c616:	4603      	mov	r3, r0
 800c618:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d158      	bne.n	800c6d2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2b03      	cmp	r3, #3
 800c626:	d148      	bne.n	800c6ba <sync_fs+0xb2>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	791b      	ldrb	r3, [r3, #4]
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d144      	bne.n	800c6ba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	3330      	adds	r3, #48	; 0x30
 800c634:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c638:	2100      	movs	r1, #0
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7ff fda9 	bl	800c192 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	3330      	adds	r3, #48	; 0x30
 800c644:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c648:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7ff fd38 	bl	800c0c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	3330      	adds	r3, #48	; 0x30
 800c656:	4921      	ldr	r1, [pc, #132]	; (800c6dc <sync_fs+0xd4>)
 800c658:	4618      	mov	r0, r3
 800c65a:	f7ff fd4d 	bl	800c0f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	3330      	adds	r3, #48	; 0x30
 800c662:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c666:	491e      	ldr	r1, [pc, #120]	; (800c6e0 <sync_fs+0xd8>)
 800c668:	4618      	mov	r0, r3
 800c66a:	f7ff fd45 	bl	800c0f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	3330      	adds	r3, #48	; 0x30
 800c672:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	691b      	ldr	r3, [r3, #16]
 800c67a:	4619      	mov	r1, r3
 800c67c:	4610      	mov	r0, r2
 800c67e:	f7ff fd3b 	bl	800c0f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	3330      	adds	r3, #48	; 0x30
 800c686:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	4619      	mov	r1, r3
 800c690:	4610      	mov	r0, r2
 800c692:	f7ff fd31 	bl	800c0f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	69db      	ldr	r3, [r3, #28]
 800c69a:	1c5a      	adds	r2, r3, #1
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	7858      	ldrb	r0, [r3, #1]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	f7ff fc8e 	bl	800bfd0 <disk_write>
			fs->fsi_flag = 0;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	785b      	ldrb	r3, [r3, #1]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7ff fca4 	bl	800c010 <disk_ioctl>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d001      	beq.n	800c6d2 <sync_fs+0xca>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}
 800c6dc:	41615252 	.word	0x41615252
 800c6e0:	61417272 	.word	0x61417272

0800c6e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	3b02      	subs	r3, #2
 800c6f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	695b      	ldr	r3, [r3, #20]
 800c6f8:	3b02      	subs	r3, #2
 800c6fa:	683a      	ldr	r2, [r7, #0]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d301      	bcc.n	800c704 <clust2sect+0x20>
 800c700:	2300      	movs	r3, #0
 800c702:	e008      	b.n	800c716 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	895b      	ldrh	r3, [r3, #10]
 800c708:	461a      	mov	r2, r3
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	fb03 f202 	mul.w	r2, r3, r2
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c714:	4413      	add	r3, r2
}
 800c716:	4618      	mov	r0, r3
 800c718:	370c      	adds	r7, #12
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr

0800c722 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b086      	sub	sp, #24
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
 800c72a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d904      	bls.n	800c742 <get_fat+0x20>
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	695b      	ldr	r3, [r3, #20]
 800c73c:	683a      	ldr	r2, [r7, #0]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d302      	bcc.n	800c748 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c742:	2301      	movs	r3, #1
 800c744:	617b      	str	r3, [r7, #20]
 800c746:	e08f      	b.n	800c868 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c74c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	2b03      	cmp	r3, #3
 800c754:	d062      	beq.n	800c81c <get_fat+0xfa>
 800c756:	2b03      	cmp	r3, #3
 800c758:	dc7c      	bgt.n	800c854 <get_fat+0x132>
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d002      	beq.n	800c764 <get_fat+0x42>
 800c75e:	2b02      	cmp	r3, #2
 800c760:	d042      	beq.n	800c7e8 <get_fat+0xc6>
 800c762:	e077      	b.n	800c854 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	60fb      	str	r3, [r7, #12]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	085b      	lsrs	r3, r3, #1
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	4413      	add	r3, r2
 800c770:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	6a1a      	ldr	r2, [r3, #32]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	0a5b      	lsrs	r3, r3, #9
 800c77a:	4413      	add	r3, r2
 800c77c:	4619      	mov	r1, r3
 800c77e:	6938      	ldr	r0, [r7, #16]
 800c780:	f7ff ff14 	bl	800c5ac <move_window>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d167      	bne.n	800c85a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	1c5a      	adds	r2, r3, #1
 800c78e:	60fa      	str	r2, [r7, #12]
 800c790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c794:	693a      	ldr	r2, [r7, #16]
 800c796:	4413      	add	r3, r2
 800c798:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c79c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	6a1a      	ldr	r2, [r3, #32]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	0a5b      	lsrs	r3, r3, #9
 800c7a6:	4413      	add	r3, r2
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	6938      	ldr	r0, [r7, #16]
 800c7ac:	f7ff fefe 	bl	800c5ac <move_window>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d153      	bne.n	800c85e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7bc:	693a      	ldr	r2, [r7, #16]
 800c7be:	4413      	add	r3, r2
 800c7c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7c4:	021b      	lsls	r3, r3, #8
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	f003 0301 	and.w	r3, r3, #1
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d002      	beq.n	800c7de <get_fat+0xbc>
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	091b      	lsrs	r3, r3, #4
 800c7dc:	e002      	b.n	800c7e4 <get_fat+0xc2>
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c7e4:	617b      	str	r3, [r7, #20]
			break;
 800c7e6:	e03f      	b.n	800c868 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	6a1a      	ldr	r2, [r3, #32]
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	0a1b      	lsrs	r3, r3, #8
 800c7f0:	4413      	add	r3, r2
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	6938      	ldr	r0, [r7, #16]
 800c7f6:	f7ff fed9 	bl	800c5ac <move_window>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d130      	bne.n	800c862 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	005b      	lsls	r3, r3, #1
 800c80a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c80e:	4413      	add	r3, r2
 800c810:	4618      	mov	r0, r3
 800c812:	f7ff fc1b 	bl	800c04c <ld_word>
 800c816:	4603      	mov	r3, r0
 800c818:	617b      	str	r3, [r7, #20]
			break;
 800c81a:	e025      	b.n	800c868 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	6a1a      	ldr	r2, [r3, #32]
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	09db      	lsrs	r3, r3, #7
 800c824:	4413      	add	r3, r2
 800c826:	4619      	mov	r1, r3
 800c828:	6938      	ldr	r0, [r7, #16]
 800c82a:	f7ff febf 	bl	800c5ac <move_window>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d118      	bne.n	800c866 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c842:	4413      	add	r3, r2
 800c844:	4618      	mov	r0, r3
 800c846:	f7ff fc19 	bl	800c07c <ld_dword>
 800c84a:	4603      	mov	r3, r0
 800c84c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c850:	617b      	str	r3, [r7, #20]
			break;
 800c852:	e009      	b.n	800c868 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c854:	2301      	movs	r3, #1
 800c856:	617b      	str	r3, [r7, #20]
 800c858:	e006      	b.n	800c868 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c85a:	bf00      	nop
 800c85c:	e004      	b.n	800c868 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c85e:	bf00      	nop
 800c860:	e002      	b.n	800c868 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c862:	bf00      	nop
 800c864:	e000      	b.n	800c868 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c866:	bf00      	nop
		}
	}

	return val;
 800c868:	697b      	ldr	r3, [r7, #20]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3718      	adds	r7, #24
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c872:	b590      	push	{r4, r7, lr}
 800c874:	b089      	sub	sp, #36	; 0x24
 800c876:	af00      	add	r7, sp, #0
 800c878:	60f8      	str	r0, [r7, #12]
 800c87a:	60b9      	str	r1, [r7, #8]
 800c87c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c87e:	2302      	movs	r3, #2
 800c880:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	2b01      	cmp	r3, #1
 800c886:	f240 80d2 	bls.w	800ca2e <put_fat+0x1bc>
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	695b      	ldr	r3, [r3, #20]
 800c88e:	68ba      	ldr	r2, [r7, #8]
 800c890:	429a      	cmp	r2, r3
 800c892:	f080 80cc 	bcs.w	800ca2e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	2b03      	cmp	r3, #3
 800c89c:	f000 8096 	beq.w	800c9cc <put_fat+0x15a>
 800c8a0:	2b03      	cmp	r3, #3
 800c8a2:	f300 80cd 	bgt.w	800ca40 <put_fat+0x1ce>
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d002      	beq.n	800c8b0 <put_fat+0x3e>
 800c8aa:	2b02      	cmp	r3, #2
 800c8ac:	d06e      	beq.n	800c98c <put_fat+0x11a>
 800c8ae:	e0c7      	b.n	800ca40 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	61bb      	str	r3, [r7, #24]
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	085b      	lsrs	r3, r3, #1
 800c8b8:	69ba      	ldr	r2, [r7, #24]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6a1a      	ldr	r2, [r3, #32]
 800c8c2:	69bb      	ldr	r3, [r7, #24]
 800c8c4:	0a5b      	lsrs	r3, r3, #9
 800c8c6:	4413      	add	r3, r2
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f7ff fe6e 	bl	800c5ac <move_window>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8d4:	7ffb      	ldrb	r3, [r7, #31]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f040 80ab 	bne.w	800ca32 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	1c59      	adds	r1, r3, #1
 800c8e6:	61b9      	str	r1, [r7, #24]
 800c8e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ec:	4413      	add	r3, r2
 800c8ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	f003 0301 	and.w	r3, r3, #1
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00d      	beq.n	800c916 <put_fat+0xa4>
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	b25b      	sxtb	r3, r3
 800c900:	f003 030f 	and.w	r3, r3, #15
 800c904:	b25a      	sxtb	r2, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	011b      	lsls	r3, r3, #4
 800c90c:	b25b      	sxtb	r3, r3
 800c90e:	4313      	orrs	r3, r2
 800c910:	b25b      	sxtb	r3, r3
 800c912:	b2db      	uxtb	r3, r3
 800c914:	e001      	b.n	800c91a <put_fat+0xa8>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2201      	movs	r2, #1
 800c922:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	6a1a      	ldr	r2, [r3, #32]
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	0a5b      	lsrs	r3, r3, #9
 800c92c:	4413      	add	r3, r2
 800c92e:	4619      	mov	r1, r3
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f7ff fe3b 	bl	800c5ac <move_window>
 800c936:	4603      	mov	r3, r0
 800c938:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c93a:	7ffb      	ldrb	r3, [r7, #31]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d17a      	bne.n	800ca36 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c94c:	4413      	add	r3, r2
 800c94e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	f003 0301 	and.w	r3, r3, #1
 800c956:	2b00      	cmp	r3, #0
 800c958:	d003      	beq.n	800c962 <put_fat+0xf0>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	091b      	lsrs	r3, r3, #4
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	e00e      	b.n	800c980 <put_fat+0x10e>
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	b25b      	sxtb	r3, r3
 800c968:	f023 030f 	bic.w	r3, r3, #15
 800c96c:	b25a      	sxtb	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	0a1b      	lsrs	r3, r3, #8
 800c972:	b25b      	sxtb	r3, r3
 800c974:	f003 030f 	and.w	r3, r3, #15
 800c978:	b25b      	sxtb	r3, r3
 800c97a:	4313      	orrs	r3, r2
 800c97c:	b25b      	sxtb	r3, r3
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	697a      	ldr	r2, [r7, #20]
 800c982:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2201      	movs	r2, #1
 800c988:	70da      	strb	r2, [r3, #3]
			break;
 800c98a:	e059      	b.n	800ca40 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	6a1a      	ldr	r2, [r3, #32]
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	0a1b      	lsrs	r3, r3, #8
 800c994:	4413      	add	r3, r2
 800c996:	4619      	mov	r1, r3
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f7ff fe07 	bl	800c5ac <move_window>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c9a2:	7ffb      	ldrb	r3, [r7, #31]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d148      	bne.n	800ca3a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	005b      	lsls	r3, r3, #1
 800c9b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c9b6:	4413      	add	r3, r2
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	b292      	uxth	r2, r2
 800c9bc:	4611      	mov	r1, r2
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7ff fb7f 	bl	800c0c2 <st_word>
			fs->wflag = 1;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	70da      	strb	r2, [r3, #3]
			break;
 800c9ca:	e039      	b.n	800ca40 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6a1a      	ldr	r2, [r3, #32]
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	09db      	lsrs	r3, r3, #7
 800c9d4:	4413      	add	r3, r2
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	68f8      	ldr	r0, [r7, #12]
 800c9da:	f7ff fde7 	bl	800c5ac <move_window>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c9e2:	7ffb      	ldrb	r3, [r7, #31]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d12a      	bne.n	800ca3e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c9fc:	4413      	add	r3, r2
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7ff fb3c 	bl	800c07c <ld_dword>
 800ca04:	4603      	mov	r3, r0
 800ca06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ca0a:	4323      	orrs	r3, r4
 800ca0c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	009b      	lsls	r3, r3, #2
 800ca18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ca1c:	4413      	add	r3, r2
 800ca1e:	6879      	ldr	r1, [r7, #4]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7ff fb69 	bl	800c0f8 <st_dword>
			fs->wflag = 1;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2201      	movs	r2, #1
 800ca2a:	70da      	strb	r2, [r3, #3]
			break;
 800ca2c:	e008      	b.n	800ca40 <put_fat+0x1ce>
		}
	}
 800ca2e:	bf00      	nop
 800ca30:	e006      	b.n	800ca40 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ca32:	bf00      	nop
 800ca34:	e004      	b.n	800ca40 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ca36:	bf00      	nop
 800ca38:	e002      	b.n	800ca40 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ca3a:	bf00      	nop
 800ca3c:	e000      	b.n	800ca40 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ca3e:	bf00      	nop
	return res;
 800ca40:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3724      	adds	r7, #36	; 0x24
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd90      	pop	{r4, r7, pc}

0800ca4a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b088      	sub	sp, #32
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	60f8      	str	r0, [r7, #12]
 800ca52:	60b9      	str	r1, [r7, #8]
 800ca54:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ca56:	2300      	movs	r3, #0
 800ca58:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d904      	bls.n	800ca70 <remove_chain+0x26>
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	695b      	ldr	r3, [r3, #20]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d301      	bcc.n	800ca74 <remove_chain+0x2a>
 800ca70:	2302      	movs	r3, #2
 800ca72:	e04b      	b.n	800cb0c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00c      	beq.n	800ca94 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ca7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca7e:	6879      	ldr	r1, [r7, #4]
 800ca80:	69b8      	ldr	r0, [r7, #24]
 800ca82:	f7ff fef6 	bl	800c872 <put_fat>
 800ca86:	4603      	mov	r3, r0
 800ca88:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ca8a:	7ffb      	ldrb	r3, [r7, #31]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d001      	beq.n	800ca94 <remove_chain+0x4a>
 800ca90:	7ffb      	ldrb	r3, [r7, #31]
 800ca92:	e03b      	b.n	800cb0c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ca94:	68b9      	ldr	r1, [r7, #8]
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f7ff fe43 	bl	800c722 <get_fat>
 800ca9c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d031      	beq.n	800cb08 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d101      	bne.n	800caae <remove_chain+0x64>
 800caaa:	2302      	movs	r3, #2
 800caac:	e02e      	b.n	800cb0c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cab4:	d101      	bne.n	800caba <remove_chain+0x70>
 800cab6:	2301      	movs	r3, #1
 800cab8:	e028      	b.n	800cb0c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800caba:	2200      	movs	r2, #0
 800cabc:	68b9      	ldr	r1, [r7, #8]
 800cabe:	69b8      	ldr	r0, [r7, #24]
 800cac0:	f7ff fed7 	bl	800c872 <put_fat>
 800cac4:	4603      	mov	r3, r0
 800cac6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cac8:	7ffb      	ldrb	r3, [r7, #31]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <remove_chain+0x88>
 800cace:	7ffb      	ldrb	r3, [r7, #31]
 800cad0:	e01c      	b.n	800cb0c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	691a      	ldr	r2, [r3, #16]
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	695b      	ldr	r3, [r3, #20]
 800cada:	3b02      	subs	r3, #2
 800cadc:	429a      	cmp	r2, r3
 800cade:	d20b      	bcs.n	800caf8 <remove_chain+0xae>
			fs->free_clst++;
 800cae0:	69bb      	ldr	r3, [r7, #24]
 800cae2:	691b      	ldr	r3, [r3, #16]
 800cae4:	1c5a      	adds	r2, r3, #1
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	791b      	ldrb	r3, [r3, #4]
 800caee:	f043 0301 	orr.w	r3, r3, #1
 800caf2:	b2da      	uxtb	r2, r3
 800caf4:	69bb      	ldr	r3, [r7, #24]
 800caf6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	695b      	ldr	r3, [r3, #20]
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d3c6      	bcc.n	800ca94 <remove_chain+0x4a>
 800cb06:	e000      	b.n	800cb0a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cb08:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cb0a:	2300      	movs	r3, #0
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3720      	adds	r7, #32
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b088      	sub	sp, #32
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d10d      	bne.n	800cb46 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d004      	beq.n	800cb40 <create_chain+0x2c>
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	695b      	ldr	r3, [r3, #20]
 800cb3a:	69ba      	ldr	r2, [r7, #24]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d31b      	bcc.n	800cb78 <create_chain+0x64>
 800cb40:	2301      	movs	r3, #1
 800cb42:	61bb      	str	r3, [r7, #24]
 800cb44:	e018      	b.n	800cb78 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cb46:	6839      	ldr	r1, [r7, #0]
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f7ff fdea 	bl	800c722 <get_fat>
 800cb4e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d801      	bhi.n	800cb5a <create_chain+0x46>
 800cb56:	2301      	movs	r3, #1
 800cb58:	e070      	b.n	800cc3c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb60:	d101      	bne.n	800cb66 <create_chain+0x52>
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	e06a      	b.n	800cc3c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	695b      	ldr	r3, [r3, #20]
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d201      	bcs.n	800cb74 <create_chain+0x60>
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	e063      	b.n	800cc3c <create_chain+0x128>
		scl = clst;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	695b      	ldr	r3, [r3, #20]
 800cb86:	69fa      	ldr	r2, [r7, #28]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d307      	bcc.n	800cb9c <create_chain+0x88>
				ncl = 2;
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cb90:	69fa      	ldr	r2, [r7, #28]
 800cb92:	69bb      	ldr	r3, [r7, #24]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d901      	bls.n	800cb9c <create_chain+0x88>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	e04f      	b.n	800cc3c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cb9c:	69f9      	ldr	r1, [r7, #28]
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f7ff fdbf 	bl	800c722 <get_fat>
 800cba4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00e      	beq.n	800cbca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d003      	beq.n	800cbba <create_chain+0xa6>
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbb8:	d101      	bne.n	800cbbe <create_chain+0xaa>
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	e03e      	b.n	800cc3c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cbbe:	69fa      	ldr	r2, [r7, #28]
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d1da      	bne.n	800cb7c <create_chain+0x68>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	e038      	b.n	800cc3c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cbca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cbcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbd0:	69f9      	ldr	r1, [r7, #28]
 800cbd2:	6938      	ldr	r0, [r7, #16]
 800cbd4:	f7ff fe4d 	bl	800c872 <put_fat>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cbdc:	7dfb      	ldrb	r3, [r7, #23]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d109      	bne.n	800cbf6 <create_chain+0xe2>
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d006      	beq.n	800cbf6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cbe8:	69fa      	ldr	r2, [r7, #28]
 800cbea:	6839      	ldr	r1, [r7, #0]
 800cbec:	6938      	ldr	r0, [r7, #16]
 800cbee:	f7ff fe40 	bl	800c872 <put_fat>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cbf6:	7dfb      	ldrb	r3, [r7, #23]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d116      	bne.n	800cc2a <create_chain+0x116>
		fs->last_clst = ncl;
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	69fa      	ldr	r2, [r7, #28]
 800cc00:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	691a      	ldr	r2, [r3, #16]
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	695b      	ldr	r3, [r3, #20]
 800cc0a:	3b02      	subs	r3, #2
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d804      	bhi.n	800cc1a <create_chain+0x106>
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	691b      	ldr	r3, [r3, #16]
 800cc14:	1e5a      	subs	r2, r3, #1
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	791b      	ldrb	r3, [r3, #4]
 800cc1e:	f043 0301 	orr.w	r3, r3, #1
 800cc22:	b2da      	uxtb	r2, r3
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	711a      	strb	r2, [r3, #4]
 800cc28:	e007      	b.n	800cc3a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cc2a:	7dfb      	ldrb	r3, [r7, #23]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d102      	bne.n	800cc36 <create_chain+0x122>
 800cc30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc34:	e000      	b.n	800cc38 <create_chain+0x124>
 800cc36:	2301      	movs	r3, #1
 800cc38:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cc3a:	69fb      	ldr	r3, [r7, #28]
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3720      	adds	r7, #32
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b087      	sub	sp, #28
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc58:	3304      	adds	r3, #4
 800cc5a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	0a5b      	lsrs	r3, r3, #9
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	8952      	ldrh	r2, [r2, #10]
 800cc64:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc68:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	1d1a      	adds	r2, r3, #4
 800cc6e:	613a      	str	r2, [r7, #16]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d101      	bne.n	800cc7e <clmt_clust+0x3a>
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	e010      	b.n	800cca0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cc7e:	697a      	ldr	r2, [r7, #20]
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d307      	bcc.n	800cc96 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cc86:	697a      	ldr	r2, [r7, #20]
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	1ad3      	subs	r3, r2, r3
 800cc8c:	617b      	str	r3, [r7, #20]
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	3304      	adds	r3, #4
 800cc92:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc94:	e7e9      	b.n	800cc6a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cc96:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	4413      	add	r3, r2
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	371c      	adds	r7, #28
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b086      	sub	sp, #24
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ccc2:	d204      	bcs.n	800ccce <dir_sdi+0x22>
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	f003 031f 	and.w	r3, r3, #31
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d001      	beq.n	800ccd2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ccce:	2302      	movs	r3, #2
 800ccd0:	e063      	b.n	800cd9a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	683a      	ldr	r2, [r7, #0]
 800ccd6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d106      	bne.n	800ccf2 <dir_sdi+0x46>
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	2b02      	cmp	r3, #2
 800ccea:	d902      	bls.n	800ccf2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d10c      	bne.n	800cd12 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	095b      	lsrs	r3, r3, #5
 800ccfc:	693a      	ldr	r2, [r7, #16]
 800ccfe:	8912      	ldrh	r2, [r2, #8]
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d301      	bcc.n	800cd08 <dir_sdi+0x5c>
 800cd04:	2302      	movs	r3, #2
 800cd06:	e048      	b.n	800cd9a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	61da      	str	r2, [r3, #28]
 800cd10:	e029      	b.n	800cd66 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	895b      	ldrh	r3, [r3, #10]
 800cd16:	025b      	lsls	r3, r3, #9
 800cd18:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd1a:	e019      	b.n	800cd50 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6979      	ldr	r1, [r7, #20]
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7ff fcfe 	bl	800c722 <get_fat>
 800cd26:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd2e:	d101      	bne.n	800cd34 <dir_sdi+0x88>
 800cd30:	2301      	movs	r3, #1
 800cd32:	e032      	b.n	800cd9a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d904      	bls.n	800cd44 <dir_sdi+0x98>
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	695b      	ldr	r3, [r3, #20]
 800cd3e:	697a      	ldr	r2, [r7, #20]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d301      	bcc.n	800cd48 <dir_sdi+0x9c>
 800cd44:	2302      	movs	r3, #2
 800cd46:	e028      	b.n	800cd9a <dir_sdi+0xee>
			ofs -= csz;
 800cd48:	683a      	ldr	r2, [r7, #0]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd50:	683a      	ldr	r2, [r7, #0]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d2e1      	bcs.n	800cd1c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cd58:	6979      	ldr	r1, [r7, #20]
 800cd5a:	6938      	ldr	r0, [r7, #16]
 800cd5c:	f7ff fcc2 	bl	800c6e4 <clust2sect>
 800cd60:	4602      	mov	r2, r0
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	697a      	ldr	r2, [r7, #20]
 800cd6a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	69db      	ldr	r3, [r3, #28]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d101      	bne.n	800cd78 <dir_sdi+0xcc>
 800cd74:	2302      	movs	r3, #2
 800cd76:	e010      	b.n	800cd9a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	69da      	ldr	r2, [r3, #28]
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	0a5b      	lsrs	r3, r3, #9
 800cd80:	441a      	add	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd92:	441a      	add	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cd98:	2300      	movs	r3, #0
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3718      	adds	r7, #24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b086      	sub	sp, #24
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
 800cdaa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	695b      	ldr	r3, [r3, #20]
 800cdb6:	3320      	adds	r3, #32
 800cdb8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	69db      	ldr	r3, [r3, #28]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d003      	beq.n	800cdca <dir_next+0x28>
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cdc8:	d301      	bcc.n	800cdce <dir_next+0x2c>
 800cdca:	2304      	movs	r3, #4
 800cdcc:	e0aa      	b.n	800cf24 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f040 8098 	bne.w	800cf0a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	69db      	ldr	r3, [r3, #28]
 800cdde:	1c5a      	adds	r2, r3, #1
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	699b      	ldr	r3, [r3, #24]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10b      	bne.n	800ce04 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	095b      	lsrs	r3, r3, #5
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	8912      	ldrh	r2, [r2, #8]
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	f0c0 8088 	bcc.w	800cf0a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	61da      	str	r2, [r3, #28]
 800ce00:	2304      	movs	r3, #4
 800ce02:	e08f      	b.n	800cf24 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	0a5b      	lsrs	r3, r3, #9
 800ce08:	68fa      	ldr	r2, [r7, #12]
 800ce0a:	8952      	ldrh	r2, [r2, #10]
 800ce0c:	3a01      	subs	r2, #1
 800ce0e:	4013      	ands	r3, r2
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d17a      	bne.n	800cf0a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	699b      	ldr	r3, [r3, #24]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	f7ff fc80 	bl	800c722 <get_fat>
 800ce22:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d801      	bhi.n	800ce2e <dir_next+0x8c>
 800ce2a:	2302      	movs	r3, #2
 800ce2c:	e07a      	b.n	800cf24 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce34:	d101      	bne.n	800ce3a <dir_next+0x98>
 800ce36:	2301      	movs	r3, #1
 800ce38:	e074      	b.n	800cf24 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	695b      	ldr	r3, [r3, #20]
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d358      	bcc.n	800cef6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d104      	bne.n	800ce54 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	61da      	str	r2, [r3, #28]
 800ce50:	2304      	movs	r3, #4
 800ce52:	e067      	b.n	800cf24 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	699b      	ldr	r3, [r3, #24]
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	4610      	mov	r0, r2
 800ce5e:	f7ff fe59 	bl	800cb14 <create_chain>
 800ce62:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d101      	bne.n	800ce6e <dir_next+0xcc>
 800ce6a:	2307      	movs	r3, #7
 800ce6c:	e05a      	b.n	800cf24 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d101      	bne.n	800ce78 <dir_next+0xd6>
 800ce74:	2302      	movs	r3, #2
 800ce76:	e055      	b.n	800cf24 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce7e:	d101      	bne.n	800ce84 <dir_next+0xe2>
 800ce80:	2301      	movs	r3, #1
 800ce82:	e04f      	b.n	800cf24 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7ff fb4d 	bl	800c524 <sync_window>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d001      	beq.n	800ce94 <dir_next+0xf2>
 800ce90:	2301      	movs	r3, #1
 800ce92:	e047      	b.n	800cf24 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	3330      	adds	r3, #48	; 0x30
 800ce98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce9c:	2100      	movs	r1, #0
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7ff f977 	bl	800c192 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cea4:	2300      	movs	r3, #0
 800cea6:	613b      	str	r3, [r7, #16]
 800cea8:	6979      	ldr	r1, [r7, #20]
 800ceaa:	68f8      	ldr	r0, [r7, #12]
 800ceac:	f7ff fc1a 	bl	800c6e4 <clust2sect>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	62da      	str	r2, [r3, #44]	; 0x2c
 800ceb6:	e012      	b.n	800cede <dir_next+0x13c>
						fs->wflag = 1;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2201      	movs	r2, #1
 800cebc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cebe:	68f8      	ldr	r0, [r7, #12]
 800cec0:	f7ff fb30 	bl	800c524 <sync_window>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <dir_next+0x12c>
 800ceca:	2301      	movs	r3, #1
 800cecc:	e02a      	b.n	800cf24 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	3301      	adds	r3, #1
 800ced2:	613b      	str	r3, [r7, #16]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced8:	1c5a      	adds	r2, r3, #1
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	62da      	str	r2, [r3, #44]	; 0x2c
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	895b      	ldrh	r3, [r3, #10]
 800cee2:	461a      	mov	r2, r3
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d3e6      	bcc.n	800ceb8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	1ad2      	subs	r2, r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	697a      	ldr	r2, [r7, #20]
 800cefa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cefc:	6979      	ldr	r1, [r7, #20]
 800cefe:	68f8      	ldr	r0, [r7, #12]
 800cf00:	f7ff fbf0 	bl	800c6e4 <clust2sect>
 800cf04:	4602      	mov	r2, r0
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	68ba      	ldr	r2, [r7, #8]
 800cf0e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf1c:	441a      	add	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cf22:	2300      	movs	r3, #0
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3718      	adds	r7, #24
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b086      	sub	sp, #24
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7ff feb4 	bl	800ccac <dir_sdi>
 800cf44:	4603      	mov	r3, r0
 800cf46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cf48:	7dfb      	ldrb	r3, [r7, #23]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d12b      	bne.n	800cfa6 <dir_alloc+0x7a>
		n = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	69db      	ldr	r3, [r3, #28]
 800cf56:	4619      	mov	r1, r3
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f7ff fb27 	bl	800c5ac <move_window>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cf62:	7dfb      	ldrb	r3, [r7, #23]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d11d      	bne.n	800cfa4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6a1b      	ldr	r3, [r3, #32]
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	2be5      	cmp	r3, #229	; 0xe5
 800cf70:	d004      	beq.n	800cf7c <dir_alloc+0x50>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6a1b      	ldr	r3, [r3, #32]
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d107      	bne.n	800cf8c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	613b      	str	r3, [r7, #16]
 800cf82:	693a      	ldr	r2, [r7, #16]
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d102      	bne.n	800cf90 <dir_alloc+0x64>
 800cf8a:	e00c      	b.n	800cfa6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cf90:	2101      	movs	r1, #1
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f7ff ff05 	bl	800cda2 <dir_next>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cf9c:	7dfb      	ldrb	r3, [r7, #23]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d0d7      	beq.n	800cf52 <dir_alloc+0x26>
 800cfa2:	e000      	b.n	800cfa6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cfa4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cfa6:	7dfb      	ldrb	r3, [r7, #23]
 800cfa8:	2b04      	cmp	r3, #4
 800cfaa:	d101      	bne.n	800cfb0 <dir_alloc+0x84>
 800cfac:	2307      	movs	r3, #7
 800cfae:	75fb      	strb	r3, [r7, #23]
	return res;
 800cfb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3718      	adds	r7, #24
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b084      	sub	sp, #16
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
 800cfc2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	331a      	adds	r3, #26
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7ff f83f 	bl	800c04c <ld_word>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	2b03      	cmp	r3, #3
 800cfd8:	d109      	bne.n	800cfee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	3314      	adds	r3, #20
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7ff f834 	bl	800c04c <ld_word>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	041b      	lsls	r3, r3, #16
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	4313      	orrs	r3, r2
 800cfec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cfee:	68fb      	ldr	r3, [r7, #12]
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3710      	adds	r7, #16
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	331a      	adds	r3, #26
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	b292      	uxth	r2, r2
 800d00c:	4611      	mov	r1, r2
 800d00e:	4618      	mov	r0, r3
 800d010:	f7ff f857 	bl	800c0c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	2b03      	cmp	r3, #3
 800d01a:	d109      	bne.n	800d030 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	f103 0214 	add.w	r2, r3, #20
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	0c1b      	lsrs	r3, r3, #16
 800d026:	b29b      	uxth	r3, r3
 800d028:	4619      	mov	r1, r3
 800d02a:	4610      	mov	r0, r2
 800d02c:	f7ff f849 	bl	800c0c2 <st_word>
	}
}
 800d030:	bf00      	nop
 800d032:	3710      	adds	r7, #16
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b086      	sub	sp, #24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d046:	2100      	movs	r1, #0
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7ff fe2f 	bl	800ccac <dir_sdi>
 800d04e:	4603      	mov	r3, r0
 800d050:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d052:	7dfb      	ldrb	r3, [r7, #23]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d001      	beq.n	800d05c <dir_find+0x24>
 800d058:	7dfb      	ldrb	r3, [r7, #23]
 800d05a:	e03e      	b.n	800d0da <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	69db      	ldr	r3, [r3, #28]
 800d060:	4619      	mov	r1, r3
 800d062:	6938      	ldr	r0, [r7, #16]
 800d064:	f7ff faa2 	bl	800c5ac <move_window>
 800d068:	4603      	mov	r3, r0
 800d06a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d06c:	7dfb      	ldrb	r3, [r7, #23]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d12f      	bne.n	800d0d2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6a1b      	ldr	r3, [r3, #32]
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d07a:	7bfb      	ldrb	r3, [r7, #15]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d102      	bne.n	800d086 <dir_find+0x4e>
 800d080:	2304      	movs	r3, #4
 800d082:	75fb      	strb	r3, [r7, #23]
 800d084:	e028      	b.n	800d0d8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6a1b      	ldr	r3, [r3, #32]
 800d08a:	330b      	adds	r3, #11
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d092:	b2da      	uxtb	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6a1b      	ldr	r3, [r3, #32]
 800d09c:	330b      	adds	r3, #11
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	f003 0308 	and.w	r3, r3, #8
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d10a      	bne.n	800d0be <dir_find+0x86>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6a18      	ldr	r0, [r3, #32]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	3324      	adds	r3, #36	; 0x24
 800d0b0:	220b      	movs	r2, #11
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	f7ff f888 	bl	800c1c8 <mem_cmp>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00b      	beq.n	800d0d6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d0be:	2100      	movs	r1, #0
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f7ff fe6e 	bl	800cda2 <dir_next>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d0ca:	7dfb      	ldrb	r3, [r7, #23]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d0c5      	beq.n	800d05c <dir_find+0x24>
 800d0d0:	e002      	b.n	800d0d8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d0d2:	bf00      	nop
 800d0d4:	e000      	b.n	800d0d8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d0d6:	bf00      	nop

	return res;
 800d0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3718      	adds	r7, #24
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b084      	sub	sp, #16
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d0f0:	2101      	movs	r1, #1
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff ff1a 	bl	800cf2c <dir_alloc>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d0fc:	7bfb      	ldrb	r3, [r7, #15]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d11c      	bne.n	800d13c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	69db      	ldr	r3, [r3, #28]
 800d106:	4619      	mov	r1, r3
 800d108:	68b8      	ldr	r0, [r7, #8]
 800d10a:	f7ff fa4f 	bl	800c5ac <move_window>
 800d10e:	4603      	mov	r3, r0
 800d110:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d112:	7bfb      	ldrb	r3, [r7, #15]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d111      	bne.n	800d13c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6a1b      	ldr	r3, [r3, #32]
 800d11c:	2220      	movs	r2, #32
 800d11e:	2100      	movs	r1, #0
 800d120:	4618      	mov	r0, r3
 800d122:	f7ff f836 	bl	800c192 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6a18      	ldr	r0, [r3, #32]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	3324      	adds	r3, #36	; 0x24
 800d12e:	220b      	movs	r2, #11
 800d130:	4619      	mov	r1, r3
 800d132:	f7ff f80d 	bl	800c150 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	2201      	movs	r2, #1
 800d13a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
	...

0800d148 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b088      	sub	sp, #32
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	60fb      	str	r3, [r7, #12]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	3324      	adds	r3, #36	; 0x24
 800d15c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d15e:	220b      	movs	r2, #11
 800d160:	2120      	movs	r1, #32
 800d162:	68b8      	ldr	r0, [r7, #8]
 800d164:	f7ff f815 	bl	800c192 <mem_set>
	si = i = 0; ni = 8;
 800d168:	2300      	movs	r3, #0
 800d16a:	613b      	str	r3, [r7, #16]
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	61fb      	str	r3, [r7, #28]
 800d170:	2308      	movs	r3, #8
 800d172:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	1c5a      	adds	r2, r3, #1
 800d178:	61fa      	str	r2, [r7, #28]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	4413      	add	r3, r2
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d182:	7efb      	ldrb	r3, [r7, #27]
 800d184:	2b20      	cmp	r3, #32
 800d186:	d94e      	bls.n	800d226 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d188:	7efb      	ldrb	r3, [r7, #27]
 800d18a:	2b2f      	cmp	r3, #47	; 0x2f
 800d18c:	d006      	beq.n	800d19c <create_name+0x54>
 800d18e:	7efb      	ldrb	r3, [r7, #27]
 800d190:	2b5c      	cmp	r3, #92	; 0x5c
 800d192:	d110      	bne.n	800d1b6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d194:	e002      	b.n	800d19c <create_name+0x54>
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	3301      	adds	r3, #1
 800d19a:	61fb      	str	r3, [r7, #28]
 800d19c:	68fa      	ldr	r2, [r7, #12]
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	2b2f      	cmp	r3, #47	; 0x2f
 800d1a6:	d0f6      	beq.n	800d196 <create_name+0x4e>
 800d1a8:	68fa      	ldr	r2, [r7, #12]
 800d1aa:	69fb      	ldr	r3, [r7, #28]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	2b5c      	cmp	r3, #92	; 0x5c
 800d1b2:	d0f0      	beq.n	800d196 <create_name+0x4e>
			break;
 800d1b4:	e038      	b.n	800d228 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d1b6:	7efb      	ldrb	r3, [r7, #27]
 800d1b8:	2b2e      	cmp	r3, #46	; 0x2e
 800d1ba:	d003      	beq.n	800d1c4 <create_name+0x7c>
 800d1bc:	693a      	ldr	r2, [r7, #16]
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d30c      	bcc.n	800d1de <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	2b0b      	cmp	r3, #11
 800d1c8:	d002      	beq.n	800d1d0 <create_name+0x88>
 800d1ca:	7efb      	ldrb	r3, [r7, #27]
 800d1cc:	2b2e      	cmp	r3, #46	; 0x2e
 800d1ce:	d001      	beq.n	800d1d4 <create_name+0x8c>
 800d1d0:	2306      	movs	r3, #6
 800d1d2:	e044      	b.n	800d25e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d1d4:	2308      	movs	r3, #8
 800d1d6:	613b      	str	r3, [r7, #16]
 800d1d8:	230b      	movs	r3, #11
 800d1da:	617b      	str	r3, [r7, #20]
			continue;
 800d1dc:	e022      	b.n	800d224 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d1de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	da04      	bge.n	800d1f0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d1e6:	7efb      	ldrb	r3, [r7, #27]
 800d1e8:	3b80      	subs	r3, #128	; 0x80
 800d1ea:	4a1f      	ldr	r2, [pc, #124]	; (800d268 <create_name+0x120>)
 800d1ec:	5cd3      	ldrb	r3, [r2, r3]
 800d1ee:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d1f0:	7efb      	ldrb	r3, [r7, #27]
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	481d      	ldr	r0, [pc, #116]	; (800d26c <create_name+0x124>)
 800d1f6:	f7ff f80e 	bl	800c216 <chk_chr>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d001      	beq.n	800d204 <create_name+0xbc>
 800d200:	2306      	movs	r3, #6
 800d202:	e02c      	b.n	800d25e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d204:	7efb      	ldrb	r3, [r7, #27]
 800d206:	2b60      	cmp	r3, #96	; 0x60
 800d208:	d905      	bls.n	800d216 <create_name+0xce>
 800d20a:	7efb      	ldrb	r3, [r7, #27]
 800d20c:	2b7a      	cmp	r3, #122	; 0x7a
 800d20e:	d802      	bhi.n	800d216 <create_name+0xce>
 800d210:	7efb      	ldrb	r3, [r7, #27]
 800d212:	3b20      	subs	r3, #32
 800d214:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	1c5a      	adds	r2, r3, #1
 800d21a:	613a      	str	r2, [r7, #16]
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	4413      	add	r3, r2
 800d220:	7efa      	ldrb	r2, [r7, #27]
 800d222:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d224:	e7a6      	b.n	800d174 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d226:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	441a      	add	r2, r3
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d101      	bne.n	800d23c <create_name+0xf4>
 800d238:	2306      	movs	r3, #6
 800d23a:	e010      	b.n	800d25e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	2be5      	cmp	r3, #229	; 0xe5
 800d242:	d102      	bne.n	800d24a <create_name+0x102>
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	2205      	movs	r2, #5
 800d248:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d24a:	7efb      	ldrb	r3, [r7, #27]
 800d24c:	2b20      	cmp	r3, #32
 800d24e:	d801      	bhi.n	800d254 <create_name+0x10c>
 800d250:	2204      	movs	r2, #4
 800d252:	e000      	b.n	800d256 <create_name+0x10e>
 800d254:	2200      	movs	r2, #0
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	330b      	adds	r3, #11
 800d25a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d25c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3720      	adds	r7, #32
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	0801750c 	.word	0x0801750c
 800d26c:	08017380 	.word	0x08017380

0800d270 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b086      	sub	sp, #24
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d284:	e002      	b.n	800d28c <follow_path+0x1c>
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	3301      	adds	r3, #1
 800d28a:	603b      	str	r3, [r7, #0]
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	2b2f      	cmp	r3, #47	; 0x2f
 800d292:	d0f8      	beq.n	800d286 <follow_path+0x16>
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	2b5c      	cmp	r3, #92	; 0x5c
 800d29a:	d0f4      	beq.n	800d286 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	2b1f      	cmp	r3, #31
 800d2a8:	d80a      	bhi.n	800d2c0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2280      	movs	r2, #128	; 0x80
 800d2ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d2b2:	2100      	movs	r1, #0
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f7ff fcf9 	bl	800ccac <dir_sdi>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	75fb      	strb	r3, [r7, #23]
 800d2be:	e043      	b.n	800d348 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d2c0:	463b      	mov	r3, r7
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7ff ff3f 	bl	800d148 <create_name>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d2ce:	7dfb      	ldrb	r3, [r7, #23]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d134      	bne.n	800d33e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f7ff feaf 	bl	800d038 <dir_find>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d2e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d2e6:	7dfb      	ldrb	r3, [r7, #23]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d00a      	beq.n	800d302 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d2ec:	7dfb      	ldrb	r3, [r7, #23]
 800d2ee:	2b04      	cmp	r3, #4
 800d2f0:	d127      	bne.n	800d342 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d2f2:	7afb      	ldrb	r3, [r7, #11]
 800d2f4:	f003 0304 	and.w	r3, r3, #4
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d122      	bne.n	800d342 <follow_path+0xd2>
 800d2fc:	2305      	movs	r3, #5
 800d2fe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d300:	e01f      	b.n	800d342 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d302:	7afb      	ldrb	r3, [r7, #11]
 800d304:	f003 0304 	and.w	r3, r3, #4
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d11c      	bne.n	800d346 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	799b      	ldrb	r3, [r3, #6]
 800d310:	f003 0310 	and.w	r3, r3, #16
 800d314:	2b00      	cmp	r3, #0
 800d316:	d102      	bne.n	800d31e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d318:	2305      	movs	r3, #5
 800d31a:	75fb      	strb	r3, [r7, #23]
 800d31c:	e014      	b.n	800d348 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	695b      	ldr	r3, [r3, #20]
 800d328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d32c:	4413      	add	r3, r2
 800d32e:	4619      	mov	r1, r3
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f7ff fe42 	bl	800cfba <ld_clust>
 800d336:	4602      	mov	r2, r0
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d33c:	e7c0      	b.n	800d2c0 <follow_path+0x50>
			if (res != FR_OK) break;
 800d33e:	bf00      	nop
 800d340:	e002      	b.n	800d348 <follow_path+0xd8>
				break;
 800d342:	bf00      	nop
 800d344:	e000      	b.n	800d348 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d346:	bf00      	nop
			}
		}
	}

	return res;
 800d348:	7dfb      	ldrb	r3, [r7, #23]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3718      	adds	r7, #24
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d352:	b480      	push	{r7}
 800d354:	b087      	sub	sp, #28
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d35a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d35e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d031      	beq.n	800d3cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	617b      	str	r3, [r7, #20]
 800d36e:	e002      	b.n	800d376 <get_ldnumber+0x24>
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	3301      	adds	r3, #1
 800d374:	617b      	str	r3, [r7, #20]
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	2b20      	cmp	r3, #32
 800d37c:	d903      	bls.n	800d386 <get_ldnumber+0x34>
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	2b3a      	cmp	r3, #58	; 0x3a
 800d384:	d1f4      	bne.n	800d370 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	2b3a      	cmp	r3, #58	; 0x3a
 800d38c:	d11c      	bne.n	800d3c8 <get_ldnumber+0x76>
			tp = *path;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	1c5a      	adds	r2, r3, #1
 800d398:	60fa      	str	r2, [r7, #12]
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	3b30      	subs	r3, #48	; 0x30
 800d39e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	2b09      	cmp	r3, #9
 800d3a4:	d80e      	bhi.n	800d3c4 <get_ldnumber+0x72>
 800d3a6:	68fa      	ldr	r2, [r7, #12]
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d10a      	bne.n	800d3c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d107      	bne.n	800d3c4 <get_ldnumber+0x72>
					vol = (int)i;
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	617b      	str	r3, [r7, #20]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	697a      	ldr	r2, [r7, #20]
 800d3c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	e002      	b.n	800d3ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d3cc:	693b      	ldr	r3, [r7, #16]
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	371c      	adds	r7, #28
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr
	...

0800d3dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	70da      	strb	r2, [r3, #3]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d3f4:	6839      	ldr	r1, [r7, #0]
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f7ff f8d8 	bl	800c5ac <move_window>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d001      	beq.n	800d406 <check_fs+0x2a>
 800d402:	2304      	movs	r3, #4
 800d404:	e038      	b.n	800d478 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	3330      	adds	r3, #48	; 0x30
 800d40a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d40e:	4618      	mov	r0, r3
 800d410:	f7fe fe1c 	bl	800c04c <ld_word>
 800d414:	4603      	mov	r3, r0
 800d416:	461a      	mov	r2, r3
 800d418:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d001      	beq.n	800d424 <check_fs+0x48>
 800d420:	2303      	movs	r3, #3
 800d422:	e029      	b.n	800d478 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d42a:	2be9      	cmp	r3, #233	; 0xe9
 800d42c:	d009      	beq.n	800d442 <check_fs+0x66>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d434:	2beb      	cmp	r3, #235	; 0xeb
 800d436:	d11e      	bne.n	800d476 <check_fs+0x9a>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d43e:	2b90      	cmp	r3, #144	; 0x90
 800d440:	d119      	bne.n	800d476 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	3330      	adds	r3, #48	; 0x30
 800d446:	3336      	adds	r3, #54	; 0x36
 800d448:	4618      	mov	r0, r3
 800d44a:	f7fe fe17 	bl	800c07c <ld_dword>
 800d44e:	4603      	mov	r3, r0
 800d450:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d454:	4a0a      	ldr	r2, [pc, #40]	; (800d480 <check_fs+0xa4>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d101      	bne.n	800d45e <check_fs+0x82>
 800d45a:	2300      	movs	r3, #0
 800d45c:	e00c      	b.n	800d478 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	3330      	adds	r3, #48	; 0x30
 800d462:	3352      	adds	r3, #82	; 0x52
 800d464:	4618      	mov	r0, r3
 800d466:	f7fe fe09 	bl	800c07c <ld_dword>
 800d46a:	4603      	mov	r3, r0
 800d46c:	4a05      	ldr	r2, [pc, #20]	; (800d484 <check_fs+0xa8>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d101      	bne.n	800d476 <check_fs+0x9a>
 800d472:	2300      	movs	r3, #0
 800d474:	e000      	b.n	800d478 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d476:	2302      	movs	r3, #2
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	00544146 	.word	0x00544146
 800d484:	33544146 	.word	0x33544146

0800d488 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b096      	sub	sp, #88	; 0x58
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	4613      	mov	r3, r2
 800d494:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	2200      	movs	r2, #0
 800d49a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f7ff ff58 	bl	800d352 <get_ldnumber>
 800d4a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	da01      	bge.n	800d4ae <find_volume+0x26>
 800d4aa:	230b      	movs	r3, #11
 800d4ac:	e22e      	b.n	800d90c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d4ae:	4aa8      	ldr	r2, [pc, #672]	; (800d750 <find_volume+0x2c8>)
 800d4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d101      	bne.n	800d4c2 <find_volume+0x3a>
 800d4be:	230c      	movs	r3, #12
 800d4c0:	e224      	b.n	800d90c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d4c8:	79fb      	ldrb	r3, [r7, #7]
 800d4ca:	f023 0301 	bic.w	r3, r3, #1
 800d4ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d01a      	beq.n	800d50e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4da:	785b      	ldrb	r3, [r3, #1]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7fe fd17 	bl	800bf10 <disk_status>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d4e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d4ec:	f003 0301 	and.w	r3, r3, #1
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d10c      	bne.n	800d50e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d4f4:	79fb      	ldrb	r3, [r7, #7]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d007      	beq.n	800d50a <find_volume+0x82>
 800d4fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d4fe:	f003 0304 	and.w	r3, r3, #4
 800d502:	2b00      	cmp	r3, #0
 800d504:	d001      	beq.n	800d50a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d506:	230a      	movs	r3, #10
 800d508:	e200      	b.n	800d90c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800d50a:	2300      	movs	r3, #0
 800d50c:	e1fe      	b.n	800d90c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d510:	2200      	movs	r2, #0
 800d512:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d516:	b2da      	uxtb	r2, r3
 800d518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51e:	785b      	ldrb	r3, [r3, #1]
 800d520:	4618      	mov	r0, r3
 800d522:	f7fe fd0f 	bl	800bf44 <disk_initialize>
 800d526:	4603      	mov	r3, r0
 800d528:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d52c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d530:	f003 0301 	and.w	r3, r3, #1
 800d534:	2b00      	cmp	r3, #0
 800d536:	d001      	beq.n	800d53c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d538:	2303      	movs	r3, #3
 800d53a:	e1e7      	b.n	800d90c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d53c:	79fb      	ldrb	r3, [r7, #7]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d007      	beq.n	800d552 <find_volume+0xca>
 800d542:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d546:	f003 0304 	and.w	r3, r3, #4
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d001      	beq.n	800d552 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d54e:	230a      	movs	r3, #10
 800d550:	e1dc      	b.n	800d90c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d556:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d558:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d55a:	f7ff ff3f 	bl	800d3dc <check_fs>
 800d55e:	4603      	mov	r3, r0
 800d560:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d564:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d568:	2b02      	cmp	r3, #2
 800d56a:	d14b      	bne.n	800d604 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d56c:	2300      	movs	r3, #0
 800d56e:	643b      	str	r3, [r7, #64]	; 0x40
 800d570:	e01f      	b.n	800d5b2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d574:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d57a:	011b      	lsls	r3, r3, #4
 800d57c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d580:	4413      	add	r3, r2
 800d582:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d586:	3304      	adds	r3, #4
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d006      	beq.n	800d59c <find_volume+0x114>
 800d58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d590:	3308      	adds	r3, #8
 800d592:	4618      	mov	r0, r3
 800d594:	f7fe fd72 	bl	800c07c <ld_dword>
 800d598:	4602      	mov	r2, r0
 800d59a:	e000      	b.n	800d59e <find_volume+0x116>
 800d59c:	2200      	movs	r2, #0
 800d59e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d5a6:	440b      	add	r3, r1
 800d5a8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	643b      	str	r3, [r7, #64]	; 0x40
 800d5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5b4:	2b03      	cmp	r3, #3
 800d5b6:	d9dc      	bls.n	800d572 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d002      	beq.n	800d5c8 <find_volume+0x140>
 800d5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5c4:	3b01      	subs	r3, #1
 800d5c6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d5c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d5d0:	4413      	add	r3, r2
 800d5d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d5d6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d5d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d005      	beq.n	800d5ea <find_volume+0x162>
 800d5de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d5e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5e2:	f7ff fefb 	bl	800d3dc <check_fs>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	e000      	b.n	800d5ec <find_volume+0x164>
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d5f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d905      	bls.n	800d604 <find_volume+0x17c>
 800d5f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	643b      	str	r3, [r7, #64]	; 0x40
 800d5fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d600:	2b03      	cmp	r3, #3
 800d602:	d9e1      	bls.n	800d5c8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d604:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d608:	2b04      	cmp	r3, #4
 800d60a:	d101      	bne.n	800d610 <find_volume+0x188>
 800d60c:	2301      	movs	r3, #1
 800d60e:	e17d      	b.n	800d90c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d610:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d614:	2b01      	cmp	r3, #1
 800d616:	d901      	bls.n	800d61c <find_volume+0x194>
 800d618:	230d      	movs	r3, #13
 800d61a:	e177      	b.n	800d90c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61e:	3330      	adds	r3, #48	; 0x30
 800d620:	330b      	adds	r3, #11
 800d622:	4618      	mov	r0, r3
 800d624:	f7fe fd12 	bl	800c04c <ld_word>
 800d628:	4603      	mov	r3, r0
 800d62a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d62e:	d001      	beq.n	800d634 <find_volume+0x1ac>
 800d630:	230d      	movs	r3, #13
 800d632:	e16b      	b.n	800d90c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d636:	3330      	adds	r3, #48	; 0x30
 800d638:	3316      	adds	r3, #22
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fe fd06 	bl	800c04c <ld_word>
 800d640:	4603      	mov	r3, r0
 800d642:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d646:	2b00      	cmp	r3, #0
 800d648:	d106      	bne.n	800d658 <find_volume+0x1d0>
 800d64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64c:	3330      	adds	r3, #48	; 0x30
 800d64e:	3324      	adds	r3, #36	; 0x24
 800d650:	4618      	mov	r0, r3
 800d652:	f7fe fd13 	bl	800c07c <ld_dword>
 800d656:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d65c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d660:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d666:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66a:	789b      	ldrb	r3, [r3, #2]
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d005      	beq.n	800d67c <find_volume+0x1f4>
 800d670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d672:	789b      	ldrb	r3, [r3, #2]
 800d674:	2b02      	cmp	r3, #2
 800d676:	d001      	beq.n	800d67c <find_volume+0x1f4>
 800d678:	230d      	movs	r3, #13
 800d67a:	e147      	b.n	800d90c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67e:	789b      	ldrb	r3, [r3, #2]
 800d680:	461a      	mov	r2, r3
 800d682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d684:	fb02 f303 	mul.w	r3, r2, r3
 800d688:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d690:	b29a      	uxth	r2, r3
 800d692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d694:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d698:	895b      	ldrh	r3, [r3, #10]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d008      	beq.n	800d6b0 <find_volume+0x228>
 800d69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a0:	895b      	ldrh	r3, [r3, #10]
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a6:	895b      	ldrh	r3, [r3, #10]
 800d6a8:	3b01      	subs	r3, #1
 800d6aa:	4013      	ands	r3, r2
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d001      	beq.n	800d6b4 <find_volume+0x22c>
 800d6b0:	230d      	movs	r3, #13
 800d6b2:	e12b      	b.n	800d90c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b6:	3330      	adds	r3, #48	; 0x30
 800d6b8:	3311      	adds	r3, #17
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fe fcc6 	bl	800c04c <ld_word>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ca:	891b      	ldrh	r3, [r3, #8]
 800d6cc:	f003 030f 	and.w	r3, r3, #15
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d001      	beq.n	800d6da <find_volume+0x252>
 800d6d6:	230d      	movs	r3, #13
 800d6d8:	e118      	b.n	800d90c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6dc:	3330      	adds	r3, #48	; 0x30
 800d6de:	3313      	adds	r3, #19
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7fe fcb3 	bl	800c04c <ld_word>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d6ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d106      	bne.n	800d6fe <find_volume+0x276>
 800d6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f2:	3330      	adds	r3, #48	; 0x30
 800d6f4:	3320      	adds	r3, #32
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7fe fcc0 	bl	800c07c <ld_dword>
 800d6fc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d700:	3330      	adds	r3, #48	; 0x30
 800d702:	330e      	adds	r3, #14
 800d704:	4618      	mov	r0, r3
 800d706:	f7fe fca1 	bl	800c04c <ld_word>
 800d70a:	4603      	mov	r3, r0
 800d70c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d70e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d710:	2b00      	cmp	r3, #0
 800d712:	d101      	bne.n	800d718 <find_volume+0x290>
 800d714:	230d      	movs	r3, #13
 800d716:	e0f9      	b.n	800d90c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d718:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d71a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d71c:	4413      	add	r3, r2
 800d71e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d720:	8912      	ldrh	r2, [r2, #8]
 800d722:	0912      	lsrs	r2, r2, #4
 800d724:	b292      	uxth	r2, r2
 800d726:	4413      	add	r3, r2
 800d728:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d72a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72e:	429a      	cmp	r2, r3
 800d730:	d201      	bcs.n	800d736 <find_volume+0x2ae>
 800d732:	230d      	movs	r3, #13
 800d734:	e0ea      	b.n	800d90c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73a:	1ad3      	subs	r3, r2, r3
 800d73c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d73e:	8952      	ldrh	r2, [r2, #10]
 800d740:	fbb3 f3f2 	udiv	r3, r3, r2
 800d744:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d103      	bne.n	800d754 <find_volume+0x2cc>
 800d74c:	230d      	movs	r3, #13
 800d74e:	e0dd      	b.n	800d90c <find_volume+0x484>
 800d750:	200004c0 	.word	0x200004c0
		fmt = FS_FAT32;
 800d754:	2303      	movs	r3, #3
 800d756:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d760:	4293      	cmp	r3, r2
 800d762:	d802      	bhi.n	800d76a <find_volume+0x2e2>
 800d764:	2302      	movs	r3, #2
 800d766:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d770:	4293      	cmp	r3, r2
 800d772:	d802      	bhi.n	800d77a <find_volume+0x2f2>
 800d774:	2301      	movs	r3, #1
 800d776:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77c:	1c9a      	adds	r2, r3, #2
 800d77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d780:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d784:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d786:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d788:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d78a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d78c:	441a      	add	r2, r3
 800d78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d790:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d796:	441a      	add	r2, r3
 800d798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d79c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7a0:	2b03      	cmp	r3, #3
 800d7a2:	d11e      	bne.n	800d7e2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a6:	3330      	adds	r3, #48	; 0x30
 800d7a8:	332a      	adds	r3, #42	; 0x2a
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fe fc4e 	bl	800c04c <ld_word>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d001      	beq.n	800d7ba <find_volume+0x332>
 800d7b6:	230d      	movs	r3, #13
 800d7b8:	e0a8      	b.n	800d90c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7bc:	891b      	ldrh	r3, [r3, #8]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d001      	beq.n	800d7c6 <find_volume+0x33e>
 800d7c2:	230d      	movs	r3, #13
 800d7c4:	e0a2      	b.n	800d90c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c8:	3330      	adds	r3, #48	; 0x30
 800d7ca:	332c      	adds	r3, #44	; 0x2c
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fe fc55 	bl	800c07c <ld_dword>
 800d7d2:	4602      	mov	r2, r0
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7da:	695b      	ldr	r3, [r3, #20]
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	647b      	str	r3, [r7, #68]	; 0x44
 800d7e0:	e01f      	b.n	800d822 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e4:	891b      	ldrh	r3, [r3, #8]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d101      	bne.n	800d7ee <find_volume+0x366>
 800d7ea:	230d      	movs	r3, #13
 800d7ec:	e08e      	b.n	800d90c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f0:	6a1a      	ldr	r2, [r3, #32]
 800d7f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7f4:	441a      	add	r2, r3
 800d7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d7fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7fe:	2b02      	cmp	r3, #2
 800d800:	d103      	bne.n	800d80a <find_volume+0x382>
 800d802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d804:	695b      	ldr	r3, [r3, #20]
 800d806:	005b      	lsls	r3, r3, #1
 800d808:	e00a      	b.n	800d820 <find_volume+0x398>
 800d80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80c:	695a      	ldr	r2, [r3, #20]
 800d80e:	4613      	mov	r3, r2
 800d810:	005b      	lsls	r3, r3, #1
 800d812:	4413      	add	r3, r2
 800d814:	085a      	lsrs	r2, r3, #1
 800d816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d818:	695b      	ldr	r3, [r3, #20]
 800d81a:	f003 0301 	and.w	r3, r3, #1
 800d81e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d820:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d824:	699a      	ldr	r2, [r3, #24]
 800d826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d828:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d82c:	0a5b      	lsrs	r3, r3, #9
 800d82e:	429a      	cmp	r2, r3
 800d830:	d201      	bcs.n	800d836 <find_volume+0x3ae>
 800d832:	230d      	movs	r3, #13
 800d834:	e06a      	b.n	800d90c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d83c:	611a      	str	r2, [r3, #16]
 800d83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d840:	691a      	ldr	r2, [r3, #16]
 800d842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d844:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d848:	2280      	movs	r2, #128	; 0x80
 800d84a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d84c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d850:	2b03      	cmp	r3, #3
 800d852:	d149      	bne.n	800d8e8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d856:	3330      	adds	r3, #48	; 0x30
 800d858:	3330      	adds	r3, #48	; 0x30
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7fe fbf6 	bl	800c04c <ld_word>
 800d860:	4603      	mov	r3, r0
 800d862:	2b01      	cmp	r3, #1
 800d864:	d140      	bne.n	800d8e8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d868:	3301      	adds	r3, #1
 800d86a:	4619      	mov	r1, r3
 800d86c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d86e:	f7fe fe9d 	bl	800c5ac <move_window>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d137      	bne.n	800d8e8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87a:	2200      	movs	r2, #0
 800d87c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d880:	3330      	adds	r3, #48	; 0x30
 800d882:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d886:	4618      	mov	r0, r3
 800d888:	f7fe fbe0 	bl	800c04c <ld_word>
 800d88c:	4603      	mov	r3, r0
 800d88e:	461a      	mov	r2, r3
 800d890:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d894:	429a      	cmp	r2, r3
 800d896:	d127      	bne.n	800d8e8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d89a:	3330      	adds	r3, #48	; 0x30
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7fe fbed 	bl	800c07c <ld_dword>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	4a1b      	ldr	r2, [pc, #108]	; (800d914 <find_volume+0x48c>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d11e      	bne.n	800d8e8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ac:	3330      	adds	r3, #48	; 0x30
 800d8ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7fe fbe2 	bl	800c07c <ld_dword>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	4a17      	ldr	r2, [pc, #92]	; (800d918 <find_volume+0x490>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d113      	bne.n	800d8e8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c2:	3330      	adds	r3, #48	; 0x30
 800d8c4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7fe fbd7 	bl	800c07c <ld_dword>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d6:	3330      	adds	r3, #48	; 0x30
 800d8d8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7fe fbcd 	bl	800c07c <ld_dword>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d8ee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d8f0:	4b0a      	ldr	r3, [pc, #40]	; (800d91c <find_volume+0x494>)
 800d8f2:	881b      	ldrh	r3, [r3, #0]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	4b08      	ldr	r3, [pc, #32]	; (800d91c <find_volume+0x494>)
 800d8fa:	801a      	strh	r2, [r3, #0]
 800d8fc:	4b07      	ldr	r3, [pc, #28]	; (800d91c <find_volume+0x494>)
 800d8fe:	881a      	ldrh	r2, [r3, #0]
 800d900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d902:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d904:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d906:	f7fe fde9 	bl	800c4dc <clear_lock>
#endif
	return FR_OK;
 800d90a:	2300      	movs	r3, #0
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3758      	adds	r7, #88	; 0x58
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	41615252 	.word	0x41615252
 800d918:	61417272 	.word	0x61417272
 800d91c:	200004c4 	.word	0x200004c4

0800d920 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b084      	sub	sp, #16
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d92a:	2309      	movs	r3, #9
 800d92c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d01c      	beq.n	800d96e <validate+0x4e>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d018      	beq.n	800d96e <validate+0x4e>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d013      	beq.n	800d96e <validate+0x4e>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	889a      	ldrh	r2, [r3, #4]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	88db      	ldrh	r3, [r3, #6]
 800d950:	429a      	cmp	r2, r3
 800d952:	d10c      	bne.n	800d96e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	785b      	ldrb	r3, [r3, #1]
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7fe fad8 	bl	800bf10 <disk_status>
 800d960:	4603      	mov	r3, r0
 800d962:	f003 0301 	and.w	r3, r3, #1
 800d966:	2b00      	cmp	r3, #0
 800d968:	d101      	bne.n	800d96e <validate+0x4e>
			res = FR_OK;
 800d96a:	2300      	movs	r3, #0
 800d96c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d102      	bne.n	800d97a <validate+0x5a>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	e000      	b.n	800d97c <validate+0x5c>
 800d97a:	2300      	movs	r3, #0
 800d97c:	683a      	ldr	r2, [r7, #0]
 800d97e:	6013      	str	r3, [r2, #0]
	return res;
 800d980:	7bfb      	ldrb	r3, [r7, #15]
}
 800d982:	4618      	mov	r0, r3
 800d984:	3710      	adds	r7, #16
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
	...

0800d98c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b088      	sub	sp, #32
 800d990:	af00      	add	r7, sp, #0
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	4613      	mov	r3, r2
 800d998:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d99e:	f107 0310 	add.w	r3, r7, #16
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7ff fcd5 	bl	800d352 <get_ldnumber>
 800d9a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	da01      	bge.n	800d9b4 <f_mount+0x28>
 800d9b0:	230b      	movs	r3, #11
 800d9b2:	e02b      	b.n	800da0c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d9b4:	4a17      	ldr	r2, [pc, #92]	; (800da14 <f_mount+0x88>)
 800d9b6:	69fb      	ldr	r3, [r7, #28]
 800d9b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d005      	beq.n	800d9d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d9c4:	69b8      	ldr	r0, [r7, #24]
 800d9c6:	f7fe fd89 	bl	800c4dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d002      	beq.n	800d9dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	490d      	ldr	r1, [pc, #52]	; (800da14 <f_mount+0x88>)
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d002      	beq.n	800d9f2 <f_mount+0x66>
 800d9ec:	79fb      	ldrb	r3, [r7, #7]
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d001      	beq.n	800d9f6 <f_mount+0x6a>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	e00a      	b.n	800da0c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d9f6:	f107 010c 	add.w	r1, r7, #12
 800d9fa:	f107 0308 	add.w	r3, r7, #8
 800d9fe:	2200      	movs	r2, #0
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff fd41 	bl	800d488 <find_volume>
 800da06:	4603      	mov	r3, r0
 800da08:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800da0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3720      	adds	r7, #32
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	200004c0 	.word	0x200004c0

0800da18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b098      	sub	sp, #96	; 0x60
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	4613      	mov	r3, r2
 800da24:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d101      	bne.n	800da30 <f_open+0x18>
 800da2c:	2309      	movs	r3, #9
 800da2e:	e1ad      	b.n	800dd8c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800da30:	79fb      	ldrb	r3, [r7, #7]
 800da32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da36:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800da38:	79fa      	ldrb	r2, [r7, #7]
 800da3a:	f107 0110 	add.w	r1, r7, #16
 800da3e:	f107 0308 	add.w	r3, r7, #8
 800da42:	4618      	mov	r0, r3
 800da44:	f7ff fd20 	bl	800d488 <find_volume>
 800da48:	4603      	mov	r3, r0
 800da4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800da4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da52:	2b00      	cmp	r3, #0
 800da54:	f040 8191 	bne.w	800dd7a <f_open+0x362>
		dj.obj.fs = fs;
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800da5c:	68ba      	ldr	r2, [r7, #8]
 800da5e:	f107 0314 	add.w	r3, r7, #20
 800da62:	4611      	mov	r1, r2
 800da64:	4618      	mov	r0, r3
 800da66:	f7ff fc03 	bl	800d270 <follow_path>
 800da6a:	4603      	mov	r3, r0
 800da6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800da70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da74:	2b00      	cmp	r3, #0
 800da76:	d11a      	bne.n	800daae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800da78:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da7c:	b25b      	sxtb	r3, r3
 800da7e:	2b00      	cmp	r3, #0
 800da80:	da03      	bge.n	800da8a <f_open+0x72>
				res = FR_INVALID_NAME;
 800da82:	2306      	movs	r3, #6
 800da84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800da88:	e011      	b.n	800daae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800da8a:	79fb      	ldrb	r3, [r7, #7]
 800da8c:	f023 0301 	bic.w	r3, r3, #1
 800da90:	2b00      	cmp	r3, #0
 800da92:	bf14      	ite	ne
 800da94:	2301      	movne	r3, #1
 800da96:	2300      	moveq	r3, #0
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	461a      	mov	r2, r3
 800da9c:	f107 0314 	add.w	r3, r7, #20
 800daa0:	4611      	mov	r1, r2
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7fe fbd2 	bl	800c24c <chk_lock>
 800daa8:	4603      	mov	r3, r0
 800daaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800daae:	79fb      	ldrb	r3, [r7, #7]
 800dab0:	f003 031c 	and.w	r3, r3, #28
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d07f      	beq.n	800dbb8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dab8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d017      	beq.n	800daf0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dac0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dac4:	2b04      	cmp	r3, #4
 800dac6:	d10e      	bne.n	800dae6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dac8:	f7fe fc1c 	bl	800c304 <enq_lock>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d006      	beq.n	800dae0 <f_open+0xc8>
 800dad2:	f107 0314 	add.w	r3, r7, #20
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7ff fb03 	bl	800d0e2 <dir_register>
 800dadc:	4603      	mov	r3, r0
 800dade:	e000      	b.n	800dae2 <f_open+0xca>
 800dae0:	2312      	movs	r3, #18
 800dae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dae6:	79fb      	ldrb	r3, [r7, #7]
 800dae8:	f043 0308 	orr.w	r3, r3, #8
 800daec:	71fb      	strb	r3, [r7, #7]
 800daee:	e010      	b.n	800db12 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800daf0:	7ebb      	ldrb	r3, [r7, #26]
 800daf2:	f003 0311 	and.w	r3, r3, #17
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d003      	beq.n	800db02 <f_open+0xea>
					res = FR_DENIED;
 800dafa:	2307      	movs	r3, #7
 800dafc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800db00:	e007      	b.n	800db12 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800db02:	79fb      	ldrb	r3, [r7, #7]
 800db04:	f003 0304 	and.w	r3, r3, #4
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d002      	beq.n	800db12 <f_open+0xfa>
 800db0c:	2308      	movs	r3, #8
 800db0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800db12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db16:	2b00      	cmp	r3, #0
 800db18:	d168      	bne.n	800dbec <f_open+0x1d4>
 800db1a:	79fb      	ldrb	r3, [r7, #7]
 800db1c:	f003 0308 	and.w	r3, r3, #8
 800db20:	2b00      	cmp	r3, #0
 800db22:	d063      	beq.n	800dbec <f_open+0x1d4>
				dw = GET_FATTIME();
 800db24:	f7fc f854 	bl	8009bd0 <get_fattime>
 800db28:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800db2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db2c:	330e      	adds	r3, #14
 800db2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db30:	4618      	mov	r0, r3
 800db32:	f7fe fae1 	bl	800c0f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800db36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db38:	3316      	adds	r3, #22
 800db3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7fe fadb 	bl	800c0f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800db42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db44:	330b      	adds	r3, #11
 800db46:	2220      	movs	r2, #32
 800db48:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db4e:	4611      	mov	r1, r2
 800db50:	4618      	mov	r0, r3
 800db52:	f7ff fa32 	bl	800cfba <ld_clust>
 800db56:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800db5c:	2200      	movs	r2, #0
 800db5e:	4618      	mov	r0, r3
 800db60:	f7ff fa4a 	bl	800cff8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800db64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db66:	331c      	adds	r3, #28
 800db68:	2100      	movs	r1, #0
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fe fac4 	bl	800c0f8 <st_dword>
					fs->wflag = 1;
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	2201      	movs	r2, #1
 800db74:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800db76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d037      	beq.n	800dbec <f_open+0x1d4>
						dw = fs->winsect;
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db80:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800db82:	f107 0314 	add.w	r3, r7, #20
 800db86:	2200      	movs	r2, #0
 800db88:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7fe ff5d 	bl	800ca4a <remove_chain>
 800db90:	4603      	mov	r3, r0
 800db92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800db96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d126      	bne.n	800dbec <f_open+0x1d4>
							res = move_window(fs, dw);
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fe fd02 	bl	800c5ac <move_window>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dbb2:	3a01      	subs	r2, #1
 800dbb4:	60da      	str	r2, [r3, #12]
 800dbb6:	e019      	b.n	800dbec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dbb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d115      	bne.n	800dbec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dbc0:	7ebb      	ldrb	r3, [r7, #26]
 800dbc2:	f003 0310 	and.w	r3, r3, #16
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d003      	beq.n	800dbd2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800dbca:	2304      	movs	r3, #4
 800dbcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dbd0:	e00c      	b.n	800dbec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dbd2:	79fb      	ldrb	r3, [r7, #7]
 800dbd4:	f003 0302 	and.w	r3, r3, #2
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d007      	beq.n	800dbec <f_open+0x1d4>
 800dbdc:	7ebb      	ldrb	r3, [r7, #26]
 800dbde:	f003 0301 	and.w	r3, r3, #1
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d002      	beq.n	800dbec <f_open+0x1d4>
						res = FR_DENIED;
 800dbe6:	2307      	movs	r3, #7
 800dbe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dbec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d128      	bne.n	800dc46 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dbf4:	79fb      	ldrb	r3, [r7, #7]
 800dbf6:	f003 0308 	and.w	r3, r3, #8
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d003      	beq.n	800dc06 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dbfe:	79fb      	ldrb	r3, [r7, #7]
 800dc00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc04:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dc0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dc14:	79fb      	ldrb	r3, [r7, #7]
 800dc16:	f023 0301 	bic.w	r3, r3, #1
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	bf14      	ite	ne
 800dc1e:	2301      	movne	r3, #1
 800dc20:	2300      	moveq	r3, #0
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	461a      	mov	r2, r3
 800dc26:	f107 0314 	add.w	r3, r7, #20
 800dc2a:	4611      	mov	r1, r2
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7fe fb8b 	bl	800c348 <inc_lock>
 800dc32:	4602      	mov	r2, r0
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	691b      	ldr	r3, [r3, #16]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d102      	bne.n	800dc46 <f_open+0x22e>
 800dc40:	2302      	movs	r3, #2
 800dc42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dc46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	f040 8095 	bne.w	800dd7a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc54:	4611      	mov	r1, r2
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7ff f9af 	bl	800cfba <ld_clust>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc64:	331c      	adds	r3, #28
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fe fa08 	bl	800c07c <ld_dword>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2200      	movs	r2, #0
 800dc76:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dc78:	693a      	ldr	r2, [r7, #16]
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	88da      	ldrh	r2, [r3, #6]
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	79fa      	ldrb	r2, [r7, #7]
 800dc8a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2200      	movs	r2, #0
 800dc96:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	3330      	adds	r3, #48	; 0x30
 800dca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dca6:	2100      	movs	r1, #0
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7fe fa72 	bl	800c192 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dcae:	79fb      	ldrb	r3, [r7, #7]
 800dcb0:	f003 0320 	and.w	r3, r3, #32
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d060      	beq.n	800dd7a <f_open+0x362>
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d05c      	beq.n	800dd7a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	68da      	ldr	r2, [r3, #12]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	895b      	ldrh	r3, [r3, #10]
 800dccc:	025b      	lsls	r3, r3, #9
 800dcce:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	68db      	ldr	r3, [r3, #12]
 800dcda:	657b      	str	r3, [r7, #84]	; 0x54
 800dcdc:	e016      	b.n	800dd0c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fe fd1d 	bl	800c722 <get_fat>
 800dce8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800dcea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d802      	bhi.n	800dcf6 <f_open+0x2de>
 800dcf0:	2302      	movs	r3, #2
 800dcf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dcf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcfc:	d102      	bne.n	800dd04 <f_open+0x2ec>
 800dcfe:	2301      	movs	r3, #1
 800dd00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dd04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd08:	1ad3      	subs	r3, r2, r3
 800dd0a:	657b      	str	r3, [r7, #84]	; 0x54
 800dd0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d103      	bne.n	800dd1c <f_open+0x304>
 800dd14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d8e0      	bhi.n	800dcde <f_open+0x2c6>
				}
				fp->clust = clst;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd20:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dd22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d127      	bne.n	800dd7a <f_open+0x362>
 800dd2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d022      	beq.n	800dd7a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7fe fcd3 	bl	800c6e4 <clust2sect>
 800dd3e:	6478      	str	r0, [r7, #68]	; 0x44
 800dd40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d103      	bne.n	800dd4e <f_open+0x336>
						res = FR_INT_ERR;
 800dd46:	2302      	movs	r3, #2
 800dd48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dd4c:	e015      	b.n	800dd7a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dd4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd50:	0a5a      	lsrs	r2, r3, #9
 800dd52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd54:	441a      	add	r2, r3
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	7858      	ldrb	r0, [r3, #1]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6a1a      	ldr	r2, [r3, #32]
 800dd68:	2301      	movs	r3, #1
 800dd6a:	f7fe f911 	bl	800bf90 <disk_read>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d002      	beq.n	800dd7a <f_open+0x362>
 800dd74:	2301      	movs	r3, #1
 800dd76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dd7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d002      	beq.n	800dd88 <f_open+0x370>
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2200      	movs	r2, #0
 800dd86:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dd88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3760      	adds	r7, #96	; 0x60
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b08c      	sub	sp, #48	; 0x30
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	60f8      	str	r0, [r7, #12]
 800dd9c:	60b9      	str	r1, [r7, #8]
 800dd9e:	607a      	str	r2, [r7, #4]
 800dda0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f107 0210 	add.w	r2, r7, #16
 800ddb2:	4611      	mov	r1, r2
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7ff fdb3 	bl	800d920 <validate>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ddc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d107      	bne.n	800ddd8 <f_write+0x44>
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	7d5b      	ldrb	r3, [r3, #21]
 800ddcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ddd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d002      	beq.n	800ddde <f_write+0x4a>
 800ddd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dddc:	e14b      	b.n	800e076 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	7d1b      	ldrb	r3, [r3, #20]
 800dde2:	f003 0302 	and.w	r3, r3, #2
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d101      	bne.n	800ddee <f_write+0x5a>
 800ddea:	2307      	movs	r3, #7
 800ddec:	e143      	b.n	800e076 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	699a      	ldr	r2, [r3, #24]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	441a      	add	r2, r3
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	699b      	ldr	r3, [r3, #24]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	f080 812d 	bcs.w	800e05a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	699b      	ldr	r3, [r3, #24]
 800de04:	43db      	mvns	r3, r3
 800de06:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800de08:	e127      	b.n	800e05a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	699b      	ldr	r3, [r3, #24]
 800de0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de12:	2b00      	cmp	r3, #0
 800de14:	f040 80e3 	bne.w	800dfde <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	699b      	ldr	r3, [r3, #24]
 800de1c:	0a5b      	lsrs	r3, r3, #9
 800de1e:	693a      	ldr	r2, [r7, #16]
 800de20:	8952      	ldrh	r2, [r2, #10]
 800de22:	3a01      	subs	r2, #1
 800de24:	4013      	ands	r3, r2
 800de26:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800de28:	69bb      	ldr	r3, [r7, #24]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d143      	bne.n	800deb6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	699b      	ldr	r3, [r3, #24]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10c      	bne.n	800de50 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	689b      	ldr	r3, [r3, #8]
 800de3a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800de3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d11a      	bne.n	800de78 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2100      	movs	r1, #0
 800de46:	4618      	mov	r0, r3
 800de48:	f7fe fe64 	bl	800cb14 <create_chain>
 800de4c:	62b8      	str	r0, [r7, #40]	; 0x28
 800de4e:	e013      	b.n	800de78 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de54:	2b00      	cmp	r3, #0
 800de56:	d007      	beq.n	800de68 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	699b      	ldr	r3, [r3, #24]
 800de5c:	4619      	mov	r1, r3
 800de5e:	68f8      	ldr	r0, [r7, #12]
 800de60:	f7fe fef0 	bl	800cc44 <clmt_clust>
 800de64:	62b8      	str	r0, [r7, #40]	; 0x28
 800de66:	e007      	b.n	800de78 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	69db      	ldr	r3, [r3, #28]
 800de6e:	4619      	mov	r1, r3
 800de70:	4610      	mov	r0, r2
 800de72:	f7fe fe4f 	bl	800cb14 <create_chain>
 800de76:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800de78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	f000 80f2 	beq.w	800e064 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800de80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de82:	2b01      	cmp	r3, #1
 800de84:	d104      	bne.n	800de90 <f_write+0xfc>
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2202      	movs	r2, #2
 800de8a:	755a      	strb	r2, [r3, #21]
 800de8c:	2302      	movs	r3, #2
 800de8e:	e0f2      	b.n	800e076 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800de90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de96:	d104      	bne.n	800dea2 <f_write+0x10e>
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2201      	movs	r2, #1
 800de9c:	755a      	strb	r2, [r3, #21]
 800de9e:	2301      	movs	r3, #1
 800dea0:	e0e9      	b.n	800e076 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dea6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d102      	bne.n	800deb6 <f_write+0x122>
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800deb4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	7d1b      	ldrb	r3, [r3, #20]
 800deba:	b25b      	sxtb	r3, r3
 800debc:	2b00      	cmp	r3, #0
 800debe:	da18      	bge.n	800def2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	7858      	ldrb	r0, [r3, #1]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	6a1a      	ldr	r2, [r3, #32]
 800dece:	2301      	movs	r3, #1
 800ded0:	f7fe f87e 	bl	800bfd0 <disk_write>
 800ded4:	4603      	mov	r3, r0
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d004      	beq.n	800dee4 <f_write+0x150>
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2201      	movs	r2, #1
 800dede:	755a      	strb	r2, [r3, #21]
 800dee0:	2301      	movs	r3, #1
 800dee2:	e0c8      	b.n	800e076 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	7d1b      	ldrb	r3, [r3, #20]
 800dee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deec:	b2da      	uxtb	r2, r3
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800def2:	693a      	ldr	r2, [r7, #16]
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	69db      	ldr	r3, [r3, #28]
 800def8:	4619      	mov	r1, r3
 800defa:	4610      	mov	r0, r2
 800defc:	f7fe fbf2 	bl	800c6e4 <clust2sect>
 800df00:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d104      	bne.n	800df12 <f_write+0x17e>
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2202      	movs	r2, #2
 800df0c:	755a      	strb	r2, [r3, #21]
 800df0e:	2302      	movs	r3, #2
 800df10:	e0b1      	b.n	800e076 <f_write+0x2e2>
			sect += csect;
 800df12:	697a      	ldr	r2, [r7, #20]
 800df14:	69bb      	ldr	r3, [r7, #24]
 800df16:	4413      	add	r3, r2
 800df18:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	0a5b      	lsrs	r3, r3, #9
 800df1e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800df20:	6a3b      	ldr	r3, [r7, #32]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d03c      	beq.n	800dfa0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800df26:	69ba      	ldr	r2, [r7, #24]
 800df28:	6a3b      	ldr	r3, [r7, #32]
 800df2a:	4413      	add	r3, r2
 800df2c:	693a      	ldr	r2, [r7, #16]
 800df2e:	8952      	ldrh	r2, [r2, #10]
 800df30:	4293      	cmp	r3, r2
 800df32:	d905      	bls.n	800df40 <f_write+0x1ac>
					cc = fs->csize - csect;
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	895b      	ldrh	r3, [r3, #10]
 800df38:	461a      	mov	r2, r3
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	7858      	ldrb	r0, [r3, #1]
 800df44:	6a3b      	ldr	r3, [r7, #32]
 800df46:	697a      	ldr	r2, [r7, #20]
 800df48:	69f9      	ldr	r1, [r7, #28]
 800df4a:	f7fe f841 	bl	800bfd0 <disk_write>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d004      	beq.n	800df5e <f_write+0x1ca>
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2201      	movs	r2, #1
 800df58:	755a      	strb	r2, [r3, #21]
 800df5a:	2301      	movs	r3, #1
 800df5c:	e08b      	b.n	800e076 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6a1a      	ldr	r2, [r3, #32]
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	1ad3      	subs	r3, r2, r3
 800df66:	6a3a      	ldr	r2, [r7, #32]
 800df68:	429a      	cmp	r2, r3
 800df6a:	d915      	bls.n	800df98 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6a1a      	ldr	r2, [r3, #32]
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	1ad3      	subs	r3, r2, r3
 800df7a:	025b      	lsls	r3, r3, #9
 800df7c:	69fa      	ldr	r2, [r7, #28]
 800df7e:	4413      	add	r3, r2
 800df80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df84:	4619      	mov	r1, r3
 800df86:	f7fe f8e3 	bl	800c150 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	7d1b      	ldrb	r3, [r3, #20]
 800df8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df92:	b2da      	uxtb	r2, r3
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800df98:	6a3b      	ldr	r3, [r7, #32]
 800df9a:	025b      	lsls	r3, r3, #9
 800df9c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800df9e:	e03f      	b.n	800e020 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6a1b      	ldr	r3, [r3, #32]
 800dfa4:	697a      	ldr	r2, [r7, #20]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d016      	beq.n	800dfd8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	699a      	ldr	r2, [r3, #24]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d210      	bcs.n	800dfd8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	7858      	ldrb	r0, [r3, #1]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	697a      	ldr	r2, [r7, #20]
 800dfc4:	f7fd ffe4 	bl	800bf90 <disk_read>
 800dfc8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d004      	beq.n	800dfd8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	755a      	strb	r2, [r3, #21]
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e04e      	b.n	800e076 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	697a      	ldr	r2, [r7, #20]
 800dfdc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	699b      	ldr	r3, [r3, #24]
 800dfe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfe6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800dfea:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800dfec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d901      	bls.n	800dff8 <f_write+0x264>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	699b      	ldr	r3, [r3, #24]
 800e002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e006:	4413      	add	r3, r2
 800e008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e00a:	69f9      	ldr	r1, [r7, #28]
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fe f89f 	bl	800c150 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	7d1b      	ldrb	r3, [r3, #20]
 800e016:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e01a:	b2da      	uxtb	r2, r3
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e020:	69fa      	ldr	r2, [r7, #28]
 800e022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e024:	4413      	add	r3, r2
 800e026:	61fb      	str	r3, [r7, #28]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	699a      	ldr	r2, [r3, #24]
 800e02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02e:	441a      	add	r2, r3
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	619a      	str	r2, [r3, #24]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	68da      	ldr	r2, [r3, #12]
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	bf38      	it	cc
 800e040:	461a      	movcc	r2, r3
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	60da      	str	r2, [r3, #12]
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04c:	441a      	add	r2, r3
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	601a      	str	r2, [r3, #0]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e056:	1ad3      	subs	r3, r2, r3
 800e058:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f47f aed4 	bne.w	800de0a <f_write+0x76>
 800e062:	e000      	b.n	800e066 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e064:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	7d1b      	ldrb	r3, [r3, #20]
 800e06a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e06e:	b2da      	uxtb	r2, r3
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e074:	2300      	movs	r3, #0
}
 800e076:	4618      	mov	r0, r3
 800e078:	3730      	adds	r7, #48	; 0x30
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e07e:	b580      	push	{r7, lr}
 800e080:	b086      	sub	sp, #24
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f107 0208 	add.w	r2, r7, #8
 800e08c:	4611      	mov	r1, r2
 800e08e:	4618      	mov	r0, r3
 800e090:	f7ff fc46 	bl	800d920 <validate>
 800e094:	4603      	mov	r3, r0
 800e096:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e098:	7dfb      	ldrb	r3, [r7, #23]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d168      	bne.n	800e170 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	7d1b      	ldrb	r3, [r3, #20]
 800e0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d062      	beq.n	800e170 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	7d1b      	ldrb	r3, [r3, #20]
 800e0ae:	b25b      	sxtb	r3, r3
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	da15      	bge.n	800e0e0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	7858      	ldrb	r0, [r3, #1]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6a1a      	ldr	r2, [r3, #32]
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	f7fd ff84 	bl	800bfd0 <disk_write>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d001      	beq.n	800e0d2 <f_sync+0x54>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e04f      	b.n	800e172 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	7d1b      	ldrb	r3, [r3, #20]
 800e0d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0da:	b2da      	uxtb	r2, r3
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e0e0:	f7fb fd76 	bl	8009bd0 <get_fattime>
 800e0e4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e0e6:	68ba      	ldr	r2, [r7, #8]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	4610      	mov	r0, r2
 800e0f0:	f7fe fa5c 	bl	800c5ac <move_window>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e0f8:	7dfb      	ldrb	r3, [r7, #23]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d138      	bne.n	800e170 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e102:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	330b      	adds	r3, #11
 800e108:	781a      	ldrb	r2, [r3, #0]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	330b      	adds	r3, #11
 800e10e:	f042 0220 	orr.w	r2, r2, #32
 800e112:	b2d2      	uxtb	r2, r2
 800e114:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6818      	ldr	r0, [r3, #0]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	689b      	ldr	r3, [r3, #8]
 800e11e:	461a      	mov	r2, r3
 800e120:	68f9      	ldr	r1, [r7, #12]
 800e122:	f7fe ff69 	bl	800cff8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f103 021c 	add.w	r2, r3, #28
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	4619      	mov	r1, r3
 800e132:	4610      	mov	r0, r2
 800e134:	f7fd ffe0 	bl	800c0f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	3316      	adds	r3, #22
 800e13c:	6939      	ldr	r1, [r7, #16]
 800e13e:	4618      	mov	r0, r3
 800e140:	f7fd ffda 	bl	800c0f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	3312      	adds	r3, #18
 800e148:	2100      	movs	r1, #0
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fd ffb9 	bl	800c0c2 <st_word>
					fs->wflag = 1;
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	2201      	movs	r2, #1
 800e154:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	4618      	mov	r0, r3
 800e15a:	f7fe fa55 	bl	800c608 <sync_fs>
 800e15e:	4603      	mov	r3, r0
 800e160:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	7d1b      	ldrb	r3, [r3, #20]
 800e166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e16a:	b2da      	uxtb	r2, r3
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e170:	7dfb      	ldrb	r3, [r7, #23]
}
 800e172:	4618      	mov	r0, r3
 800e174:	3718      	adds	r7, #24
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}

0800e17a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b084      	sub	sp, #16
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7ff ff7b 	bl	800e07e <f_sync>
 800e188:	4603      	mov	r3, r0
 800e18a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e18c:	7bfb      	ldrb	r3, [r7, #15]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d118      	bne.n	800e1c4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f107 0208 	add.w	r2, r7, #8
 800e198:	4611      	mov	r1, r2
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7ff fbc0 	bl	800d920 <validate>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e1a4:	7bfb      	ldrb	r3, [r7, #15]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d10c      	bne.n	800e1c4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	691b      	ldr	r3, [r3, #16]
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7fe f958 	bl	800c464 <dec_lock>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e1b8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d102      	bne.n	800e1c4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
	...

0800e1d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b087      	sub	sp, #28
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	4613      	mov	r3, r2
 800e1dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e1e6:	4b1f      	ldr	r3, [pc, #124]	; (800e264 <FATFS_LinkDriverEx+0x94>)
 800e1e8:	7a5b      	ldrb	r3, [r3, #9]
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d131      	bne.n	800e254 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e1f0:	4b1c      	ldr	r3, [pc, #112]	; (800e264 <FATFS_LinkDriverEx+0x94>)
 800e1f2:	7a5b      	ldrb	r3, [r3, #9]
 800e1f4:	b2db      	uxtb	r3, r3
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	4b1a      	ldr	r3, [pc, #104]	; (800e264 <FATFS_LinkDriverEx+0x94>)
 800e1fa:	2100      	movs	r1, #0
 800e1fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e1fe:	4b19      	ldr	r3, [pc, #100]	; (800e264 <FATFS_LinkDriverEx+0x94>)
 800e200:	7a5b      	ldrb	r3, [r3, #9]
 800e202:	b2db      	uxtb	r3, r3
 800e204:	4a17      	ldr	r2, [pc, #92]	; (800e264 <FATFS_LinkDriverEx+0x94>)
 800e206:	009b      	lsls	r3, r3, #2
 800e208:	4413      	add	r3, r2
 800e20a:	68fa      	ldr	r2, [r7, #12]
 800e20c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e20e:	4b15      	ldr	r3, [pc, #84]	; (800e264 <FATFS_LinkDriverEx+0x94>)
 800e210:	7a5b      	ldrb	r3, [r3, #9]
 800e212:	b2db      	uxtb	r3, r3
 800e214:	461a      	mov	r2, r3
 800e216:	4b13      	ldr	r3, [pc, #76]	; (800e264 <FATFS_LinkDriverEx+0x94>)
 800e218:	4413      	add	r3, r2
 800e21a:	79fa      	ldrb	r2, [r7, #7]
 800e21c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e21e:	4b11      	ldr	r3, [pc, #68]	; (800e264 <FATFS_LinkDriverEx+0x94>)
 800e220:	7a5b      	ldrb	r3, [r3, #9]
 800e222:	b2db      	uxtb	r3, r3
 800e224:	1c5a      	adds	r2, r3, #1
 800e226:	b2d1      	uxtb	r1, r2
 800e228:	4a0e      	ldr	r2, [pc, #56]	; (800e264 <FATFS_LinkDriverEx+0x94>)
 800e22a:	7251      	strb	r1, [r2, #9]
 800e22c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e22e:	7dbb      	ldrb	r3, [r7, #22]
 800e230:	3330      	adds	r3, #48	; 0x30
 800e232:	b2da      	uxtb	r2, r3
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	3301      	adds	r3, #1
 800e23c:	223a      	movs	r2, #58	; 0x3a
 800e23e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	3302      	adds	r3, #2
 800e244:	222f      	movs	r2, #47	; 0x2f
 800e246:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	3303      	adds	r3, #3
 800e24c:	2200      	movs	r2, #0
 800e24e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e250:	2300      	movs	r3, #0
 800e252:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e254:	7dfb      	ldrb	r3, [r7, #23]
}
 800e256:	4618      	mov	r0, r3
 800e258:	371c      	adds	r7, #28
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop
 800e264:	200004e8 	.word	0x200004e8

0800e268 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e272:	2200      	movs	r2, #0
 800e274:	6839      	ldr	r1, [r7, #0]
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f7ff ffaa 	bl	800e1d0 <FATFS_LinkDriverEx>
 800e27c:	4603      	mov	r3, r0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3708      	adds	r7, #8
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
	...

0800e288 <__NVIC_SetPriority>:
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	4603      	mov	r3, r0
 800e290:	6039      	str	r1, [r7, #0]
 800e292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	db0a      	blt.n	800e2b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	b2da      	uxtb	r2, r3
 800e2a0:	490c      	ldr	r1, [pc, #48]	; (800e2d4 <__NVIC_SetPriority+0x4c>)
 800e2a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2a6:	0112      	lsls	r2, r2, #4
 800e2a8:	b2d2      	uxtb	r2, r2
 800e2aa:	440b      	add	r3, r1
 800e2ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e2b0:	e00a      	b.n	800e2c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	b2da      	uxtb	r2, r3
 800e2b6:	4908      	ldr	r1, [pc, #32]	; (800e2d8 <__NVIC_SetPriority+0x50>)
 800e2b8:	79fb      	ldrb	r3, [r7, #7]
 800e2ba:	f003 030f 	and.w	r3, r3, #15
 800e2be:	3b04      	subs	r3, #4
 800e2c0:	0112      	lsls	r2, r2, #4
 800e2c2:	b2d2      	uxtb	r2, r2
 800e2c4:	440b      	add	r3, r1
 800e2c6:	761a      	strb	r2, [r3, #24]
}
 800e2c8:	bf00      	nop
 800e2ca:	370c      	adds	r7, #12
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr
 800e2d4:	e000e100 	.word	0xe000e100
 800e2d8:	e000ed00 	.word	0xe000ed00

0800e2dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e2e0:	4b05      	ldr	r3, [pc, #20]	; (800e2f8 <SysTick_Handler+0x1c>)
 800e2e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e2e4:	f001 ffc6 	bl	8010274 <xTaskGetSchedulerState>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d001      	beq.n	800e2f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e2ee:	f002 feab 	bl	8011048 <xPortSysTickHandler>
  }
}
 800e2f2:	bf00      	nop
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	e000e010 	.word	0xe000e010

0800e2fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e300:	2100      	movs	r1, #0
 800e302:	f06f 0004 	mvn.w	r0, #4
 800e306:	f7ff ffbf 	bl	800e288 <__NVIC_SetPriority>
#endif
}
 800e30a:	bf00      	nop
 800e30c:	bd80      	pop	{r7, pc}
	...

0800e310 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e310:	b480      	push	{r7}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e316:	f3ef 8305 	mrs	r3, IPSR
 800e31a:	603b      	str	r3, [r7, #0]
  return(result);
 800e31c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d003      	beq.n	800e32a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e322:	f06f 0305 	mvn.w	r3, #5
 800e326:	607b      	str	r3, [r7, #4]
 800e328:	e00c      	b.n	800e344 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e32a:	4b0a      	ldr	r3, [pc, #40]	; (800e354 <osKernelInitialize+0x44>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d105      	bne.n	800e33e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e332:	4b08      	ldr	r3, [pc, #32]	; (800e354 <osKernelInitialize+0x44>)
 800e334:	2201      	movs	r2, #1
 800e336:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e338:	2300      	movs	r3, #0
 800e33a:	607b      	str	r3, [r7, #4]
 800e33c:	e002      	b.n	800e344 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e33e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e342:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e344:	687b      	ldr	r3, [r7, #4]
}
 800e346:	4618      	mov	r0, r3
 800e348:	370c      	adds	r7, #12
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	200004f4 	.word	0x200004f4

0800e358 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e35e:	f3ef 8305 	mrs	r3, IPSR
 800e362:	603b      	str	r3, [r7, #0]
  return(result);
 800e364:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e366:	2b00      	cmp	r3, #0
 800e368:	d003      	beq.n	800e372 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e36a:	f06f 0305 	mvn.w	r3, #5
 800e36e:	607b      	str	r3, [r7, #4]
 800e370:	e010      	b.n	800e394 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e372:	4b0b      	ldr	r3, [pc, #44]	; (800e3a0 <osKernelStart+0x48>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2b01      	cmp	r3, #1
 800e378:	d109      	bne.n	800e38e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e37a:	f7ff ffbf 	bl	800e2fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e37e:	4b08      	ldr	r3, [pc, #32]	; (800e3a0 <osKernelStart+0x48>)
 800e380:	2202      	movs	r2, #2
 800e382:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e384:	f001 fb1a 	bl	800f9bc <vTaskStartScheduler>
      stat = osOK;
 800e388:	2300      	movs	r3, #0
 800e38a:	607b      	str	r3, [r7, #4]
 800e38c:	e002      	b.n	800e394 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e38e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e392:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e394:	687b      	ldr	r3, [r7, #4]
}
 800e396:	4618      	mov	r0, r3
 800e398:	3708      	adds	r7, #8
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	200004f4 	.word	0x200004f4

0800e3a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b08e      	sub	sp, #56	; 0x38
 800e3a8:	af04      	add	r7, sp, #16
 800e3aa:	60f8      	str	r0, [r7, #12]
 800e3ac:	60b9      	str	r1, [r7, #8]
 800e3ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3b4:	f3ef 8305 	mrs	r3, IPSR
 800e3b8:	617b      	str	r3, [r7, #20]
  return(result);
 800e3ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d17e      	bne.n	800e4be <osThreadNew+0x11a>
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d07b      	beq.n	800e4be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e3c6:	2380      	movs	r3, #128	; 0x80
 800e3c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e3ca:	2318      	movs	r3, #24
 800e3cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e3d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e3d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d045      	beq.n	800e46a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d002      	beq.n	800e3ec <osThreadNew+0x48>
        name = attr->name;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	699b      	ldr	r3, [r3, #24]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d002      	beq.n	800e3fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	699b      	ldr	r3, [r3, #24]
 800e3f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e3fa:	69fb      	ldr	r3, [r7, #28]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d008      	beq.n	800e412 <osThreadNew+0x6e>
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	2b38      	cmp	r3, #56	; 0x38
 800e404:	d805      	bhi.n	800e412 <osThreadNew+0x6e>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	f003 0301 	and.w	r3, r3, #1
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d001      	beq.n	800e416 <osThreadNew+0x72>
        return (NULL);
 800e412:	2300      	movs	r3, #0
 800e414:	e054      	b.n	800e4c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	695b      	ldr	r3, [r3, #20]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d003      	beq.n	800e426 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	695b      	ldr	r3, [r3, #20]
 800e422:	089b      	lsrs	r3, r3, #2
 800e424:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	689b      	ldr	r3, [r3, #8]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00e      	beq.n	800e44c <osThreadNew+0xa8>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	68db      	ldr	r3, [r3, #12]
 800e432:	2bbb      	cmp	r3, #187	; 0xbb
 800e434:	d90a      	bls.n	800e44c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d006      	beq.n	800e44c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	695b      	ldr	r3, [r3, #20]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d002      	beq.n	800e44c <osThreadNew+0xa8>
        mem = 1;
 800e446:	2301      	movs	r3, #1
 800e448:	61bb      	str	r3, [r7, #24]
 800e44a:	e010      	b.n	800e46e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d10c      	bne.n	800e46e <osThreadNew+0xca>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d108      	bne.n	800e46e <osThreadNew+0xca>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	691b      	ldr	r3, [r3, #16]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d104      	bne.n	800e46e <osThreadNew+0xca>
          mem = 0;
 800e464:	2300      	movs	r3, #0
 800e466:	61bb      	str	r3, [r7, #24]
 800e468:	e001      	b.n	800e46e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e46a:	2300      	movs	r3, #0
 800e46c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e46e:	69bb      	ldr	r3, [r7, #24]
 800e470:	2b01      	cmp	r3, #1
 800e472:	d110      	bne.n	800e496 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e47c:	9202      	str	r2, [sp, #8]
 800e47e:	9301      	str	r3, [sp, #4]
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	9300      	str	r3, [sp, #0]
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	6a3a      	ldr	r2, [r7, #32]
 800e488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e48a:	68f8      	ldr	r0, [r7, #12]
 800e48c:	f001 f8aa 	bl	800f5e4 <xTaskCreateStatic>
 800e490:	4603      	mov	r3, r0
 800e492:	613b      	str	r3, [r7, #16]
 800e494:	e013      	b.n	800e4be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d110      	bne.n	800e4be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e49c:	6a3b      	ldr	r3, [r7, #32]
 800e49e:	b29a      	uxth	r2, r3
 800e4a0:	f107 0310 	add.w	r3, r7, #16
 800e4a4:	9301      	str	r3, [sp, #4]
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4ae:	68f8      	ldr	r0, [r7, #12]
 800e4b0:	f001 f8f5 	bl	800f69e <xTaskCreate>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b01      	cmp	r3, #1
 800e4b8:	d001      	beq.n	800e4be <osThreadNew+0x11a>
            hTask = NULL;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e4be:	693b      	ldr	r3, [r7, #16]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3728      	adds	r7, #40	; 0x28
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4d0:	f3ef 8305 	mrs	r3, IPSR
 800e4d4:	60bb      	str	r3, [r7, #8]
  return(result);
 800e4d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d003      	beq.n	800e4e4 <osDelay+0x1c>
    stat = osErrorISR;
 800e4dc:	f06f 0305 	mvn.w	r3, #5
 800e4e0:	60fb      	str	r3, [r7, #12]
 800e4e2:	e007      	b.n	800e4f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d002      	beq.n	800e4f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f001 fa30 	bl	800f954 <vTaskDelay>
    }
  }

  return (stat);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3710      	adds	r7, #16
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}

0800e4fe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e4fe:	b580      	push	{r7, lr}
 800e500:	b08a      	sub	sp, #40	; 0x28
 800e502:	af02      	add	r7, sp, #8
 800e504:	60f8      	str	r0, [r7, #12]
 800e506:	60b9      	str	r1, [r7, #8]
 800e508:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e50a:	2300      	movs	r3, #0
 800e50c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e50e:	f3ef 8305 	mrs	r3, IPSR
 800e512:	613b      	str	r3, [r7, #16]
  return(result);
 800e514:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e516:	2b00      	cmp	r3, #0
 800e518:	d175      	bne.n	800e606 <osSemaphoreNew+0x108>
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d072      	beq.n	800e606 <osSemaphoreNew+0x108>
 800e520:	68ba      	ldr	r2, [r7, #8]
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	429a      	cmp	r2, r3
 800e526:	d86e      	bhi.n	800e606 <osSemaphoreNew+0x108>
    mem = -1;
 800e528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e52c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d015      	beq.n	800e560 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	689b      	ldr	r3, [r3, #8]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d006      	beq.n	800e54a <osSemaphoreNew+0x4c>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	2b4f      	cmp	r3, #79	; 0x4f
 800e542:	d902      	bls.n	800e54a <osSemaphoreNew+0x4c>
        mem = 1;
 800e544:	2301      	movs	r3, #1
 800e546:	61bb      	str	r3, [r7, #24]
 800e548:	e00c      	b.n	800e564 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	689b      	ldr	r3, [r3, #8]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d108      	bne.n	800e564 <osSemaphoreNew+0x66>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d104      	bne.n	800e564 <osSemaphoreNew+0x66>
          mem = 0;
 800e55a:	2300      	movs	r3, #0
 800e55c:	61bb      	str	r3, [r7, #24]
 800e55e:	e001      	b.n	800e564 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e560:	2300      	movs	r3, #0
 800e562:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e56a:	d04c      	beq.n	800e606 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d128      	bne.n	800e5c4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	2b01      	cmp	r3, #1
 800e576:	d10a      	bne.n	800e58e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	689b      	ldr	r3, [r3, #8]
 800e57c:	2203      	movs	r2, #3
 800e57e:	9200      	str	r2, [sp, #0]
 800e580:	2200      	movs	r2, #0
 800e582:	2100      	movs	r1, #0
 800e584:	2001      	movs	r0, #1
 800e586:	f000 f993 	bl	800e8b0 <xQueueGenericCreateStatic>
 800e58a:	61f8      	str	r0, [r7, #28]
 800e58c:	e005      	b.n	800e59a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e58e:	2203      	movs	r2, #3
 800e590:	2100      	movs	r1, #0
 800e592:	2001      	movs	r0, #1
 800e594:	f000 fa04 	bl	800e9a0 <xQueueGenericCreate>
 800e598:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d022      	beq.n	800e5e6 <osSemaphoreNew+0xe8>
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d01f      	beq.n	800e5e6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	2100      	movs	r1, #0
 800e5ac:	69f8      	ldr	r0, [r7, #28]
 800e5ae:	f000 fabf 	bl	800eb30 <xQueueGenericSend>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d016      	beq.n	800e5e6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e5b8:	69f8      	ldr	r0, [r7, #28]
 800e5ba:	f000 fe3f 	bl	800f23c <vQueueDelete>
            hSemaphore = NULL;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	61fb      	str	r3, [r7, #28]
 800e5c2:	e010      	b.n	800e5e6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e5c4:	69bb      	ldr	r3, [r7, #24]
 800e5c6:	2b01      	cmp	r3, #1
 800e5c8:	d108      	bne.n	800e5dc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	689b      	ldr	r3, [r3, #8]
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	68b9      	ldr	r1, [r7, #8]
 800e5d2:	68f8      	ldr	r0, [r7, #12]
 800e5d4:	f000 fa41 	bl	800ea5a <xQueueCreateCountingSemaphoreStatic>
 800e5d8:	61f8      	str	r0, [r7, #28]
 800e5da:	e004      	b.n	800e5e6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e5dc:	68b9      	ldr	r1, [r7, #8]
 800e5de:	68f8      	ldr	r0, [r7, #12]
 800e5e0:	f000 fa72 	bl	800eac8 <xQueueCreateCountingSemaphore>
 800e5e4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e5e6:	69fb      	ldr	r3, [r7, #28]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00c      	beq.n	800e606 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d003      	beq.n	800e5fa <osSemaphoreNew+0xfc>
          name = attr->name;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	617b      	str	r3, [r7, #20]
 800e5f8:	e001      	b.n	800e5fe <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e5fe:	6979      	ldr	r1, [r7, #20]
 800e600:	69f8      	ldr	r0, [r7, #28]
 800e602:	f000 ff67 	bl	800f4d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e606:	69fb      	ldr	r3, [r7, #28]
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3720      	adds	r7, #32
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e610:	b480      	push	{r7}
 800e612:	b085      	sub	sp, #20
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	4a07      	ldr	r2, [pc, #28]	; (800e63c <vApplicationGetIdleTaskMemory+0x2c>)
 800e620:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	4a06      	ldr	r2, [pc, #24]	; (800e640 <vApplicationGetIdleTaskMemory+0x30>)
 800e626:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2280      	movs	r2, #128	; 0x80
 800e62c:	601a      	str	r2, [r3, #0]
}
 800e62e:	bf00      	nop
 800e630:	3714      	adds	r7, #20
 800e632:	46bd      	mov	sp, r7
 800e634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e638:	4770      	bx	lr
 800e63a:	bf00      	nop
 800e63c:	200004f8 	.word	0x200004f8
 800e640:	200005b4 	.word	0x200005b4

0800e644 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e644:	b480      	push	{r7}
 800e646:	b085      	sub	sp, #20
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	4a07      	ldr	r2, [pc, #28]	; (800e670 <vApplicationGetTimerTaskMemory+0x2c>)
 800e654:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	4a06      	ldr	r2, [pc, #24]	; (800e674 <vApplicationGetTimerTaskMemory+0x30>)
 800e65a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e662:	601a      	str	r2, [r3, #0]
}
 800e664:	bf00      	nop
 800e666:	3714      	adds	r7, #20
 800e668:	46bd      	mov	sp, r7
 800e66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66e:	4770      	bx	lr
 800e670:	200007b4 	.word	0x200007b4
 800e674:	20000870 	.word	0x20000870

0800e678 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f103 0208 	add.w	r2, r3, #8
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e690:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f103 0208 	add.w	r2, r3, #8
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f103 0208 	add.w	r2, r3, #8
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e6ac:	bf00      	nop
 800e6ae:	370c      	adds	r7, #12
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr

0800e6b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b083      	sub	sp, #12
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e6c6:	bf00      	nop
 800e6c8:	370c      	adds	r7, #12
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr

0800e6d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e6d2:	b480      	push	{r7}
 800e6d4:	b085      	sub	sp, #20
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
 800e6da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	68fa      	ldr	r2, [r7, #12]
 800e6e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	689a      	ldr	r2, [r3, #8]
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	689b      	ldr	r3, [r3, #8]
 800e6f4:	683a      	ldr	r2, [r7, #0]
 800e6f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	683a      	ldr	r2, [r7, #0]
 800e6fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	1c5a      	adds	r2, r3, #1
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	601a      	str	r2, [r3, #0]
}
 800e70e:	bf00      	nop
 800e710:	3714      	adds	r7, #20
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr

0800e71a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e71a:	b480      	push	{r7}
 800e71c:	b085      	sub	sp, #20
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
 800e722:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e730:	d103      	bne.n	800e73a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	691b      	ldr	r3, [r3, #16]
 800e736:	60fb      	str	r3, [r7, #12]
 800e738:	e00c      	b.n	800e754 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	3308      	adds	r3, #8
 800e73e:	60fb      	str	r3, [r7, #12]
 800e740:	e002      	b.n	800e748 <vListInsert+0x2e>
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	685b      	ldr	r3, [r3, #4]
 800e746:	60fb      	str	r3, [r7, #12]
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	429a      	cmp	r2, r3
 800e752:	d2f6      	bcs.n	800e742 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	685a      	ldr	r2, [r3, #4]
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	683a      	ldr	r2, [r7, #0]
 800e762:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	68fa      	ldr	r2, [r7, #12]
 800e768:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	683a      	ldr	r2, [r7, #0]
 800e76e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	1c5a      	adds	r2, r3, #1
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	601a      	str	r2, [r3, #0]
}
 800e780:	bf00      	nop
 800e782:	3714      	adds	r7, #20
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e78c:	b480      	push	{r7}
 800e78e:	b085      	sub	sp, #20
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	691b      	ldr	r3, [r3, #16]
 800e798:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	6892      	ldr	r2, [r2, #8]
 800e7a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	689b      	ldr	r3, [r3, #8]
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	6852      	ldr	r2, [r2, #4]
 800e7ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d103      	bne.n	800e7c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	689a      	ldr	r2, [r3, #8]
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	1e5a      	subs	r2, r3, #1
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3714      	adds	r7, #20
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d10a      	bne.n	800e80a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f8:	f383 8811 	msr	BASEPRI, r3
 800e7fc:	f3bf 8f6f 	isb	sy
 800e800:	f3bf 8f4f 	dsb	sy
 800e804:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e806:	bf00      	nop
 800e808:	e7fe      	b.n	800e808 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e80a:	f002 fb8b 	bl	8010f24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e816:	68f9      	ldr	r1, [r7, #12]
 800e818:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e81a:	fb01 f303 	mul.w	r3, r1, r3
 800e81e:	441a      	add	r2, r3
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2200      	movs	r2, #0
 800e828:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e83a:	3b01      	subs	r3, #1
 800e83c:	68f9      	ldr	r1, [r7, #12]
 800e83e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e840:	fb01 f303 	mul.w	r3, r1, r3
 800e844:	441a      	add	r2, r3
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	22ff      	movs	r2, #255	; 0xff
 800e84e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	22ff      	movs	r2, #255	; 0xff
 800e856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d114      	bne.n	800e88a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	691b      	ldr	r3, [r3, #16]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d01a      	beq.n	800e89e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	3310      	adds	r3, #16
 800e86c:	4618      	mov	r0, r3
 800e86e:	f001 fb3f 	bl	800fef0 <xTaskRemoveFromEventList>
 800e872:	4603      	mov	r3, r0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d012      	beq.n	800e89e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e878:	4b0c      	ldr	r3, [pc, #48]	; (800e8ac <xQueueGenericReset+0xcc>)
 800e87a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e87e:	601a      	str	r2, [r3, #0]
 800e880:	f3bf 8f4f 	dsb	sy
 800e884:	f3bf 8f6f 	isb	sy
 800e888:	e009      	b.n	800e89e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	3310      	adds	r3, #16
 800e88e:	4618      	mov	r0, r3
 800e890:	f7ff fef2 	bl	800e678 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	3324      	adds	r3, #36	; 0x24
 800e898:	4618      	mov	r0, r3
 800e89a:	f7ff feed 	bl	800e678 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e89e:	f002 fb71 	bl	8010f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e8a2:	2301      	movs	r3, #1
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3710      	adds	r7, #16
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	e000ed04 	.word	0xe000ed04

0800e8b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b08e      	sub	sp, #56	; 0x38
 800e8b4:	af02      	add	r7, sp, #8
 800e8b6:	60f8      	str	r0, [r7, #12]
 800e8b8:	60b9      	str	r1, [r7, #8]
 800e8ba:	607a      	str	r2, [r7, #4]
 800e8bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d10a      	bne.n	800e8da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c8:	f383 8811 	msr	BASEPRI, r3
 800e8cc:	f3bf 8f6f 	isb	sy
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e8d6:	bf00      	nop
 800e8d8:	e7fe      	b.n	800e8d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d10a      	bne.n	800e8f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e4:	f383 8811 	msr	BASEPRI, r3
 800e8e8:	f3bf 8f6f 	isb	sy
 800e8ec:	f3bf 8f4f 	dsb	sy
 800e8f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e8f2:	bf00      	nop
 800e8f4:	e7fe      	b.n	800e8f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d002      	beq.n	800e902 <xQueueGenericCreateStatic+0x52>
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d001      	beq.n	800e906 <xQueueGenericCreateStatic+0x56>
 800e902:	2301      	movs	r3, #1
 800e904:	e000      	b.n	800e908 <xQueueGenericCreateStatic+0x58>
 800e906:	2300      	movs	r3, #0
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d10a      	bne.n	800e922 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e910:	f383 8811 	msr	BASEPRI, r3
 800e914:	f3bf 8f6f 	isb	sy
 800e918:	f3bf 8f4f 	dsb	sy
 800e91c:	623b      	str	r3, [r7, #32]
}
 800e91e:	bf00      	nop
 800e920:	e7fe      	b.n	800e920 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d102      	bne.n	800e92e <xQueueGenericCreateStatic+0x7e>
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d101      	bne.n	800e932 <xQueueGenericCreateStatic+0x82>
 800e92e:	2301      	movs	r3, #1
 800e930:	e000      	b.n	800e934 <xQueueGenericCreateStatic+0x84>
 800e932:	2300      	movs	r3, #0
 800e934:	2b00      	cmp	r3, #0
 800e936:	d10a      	bne.n	800e94e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e93c:	f383 8811 	msr	BASEPRI, r3
 800e940:	f3bf 8f6f 	isb	sy
 800e944:	f3bf 8f4f 	dsb	sy
 800e948:	61fb      	str	r3, [r7, #28]
}
 800e94a:	bf00      	nop
 800e94c:	e7fe      	b.n	800e94c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e94e:	2350      	movs	r3, #80	; 0x50
 800e950:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	2b50      	cmp	r3, #80	; 0x50
 800e956:	d00a      	beq.n	800e96e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95c:	f383 8811 	msr	BASEPRI, r3
 800e960:	f3bf 8f6f 	isb	sy
 800e964:	f3bf 8f4f 	dsb	sy
 800e968:	61bb      	str	r3, [r7, #24]
}
 800e96a:	bf00      	nop
 800e96c:	e7fe      	b.n	800e96c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e96e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00d      	beq.n	800e996 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97c:	2201      	movs	r2, #1
 800e97e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e982:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e988:	9300      	str	r3, [sp, #0]
 800e98a:	4613      	mov	r3, r2
 800e98c:	687a      	ldr	r2, [r7, #4]
 800e98e:	68b9      	ldr	r1, [r7, #8]
 800e990:	68f8      	ldr	r0, [r7, #12]
 800e992:	f000 f83f 	bl	800ea14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e998:	4618      	mov	r0, r3
 800e99a:	3730      	adds	r7, #48	; 0x30
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b08a      	sub	sp, #40	; 0x28
 800e9a4:	af02      	add	r7, sp, #8
 800e9a6:	60f8      	str	r0, [r7, #12]
 800e9a8:	60b9      	str	r1, [r7, #8]
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d10a      	bne.n	800e9ca <xQueueGenericCreate+0x2a>
	__asm volatile
 800e9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b8:	f383 8811 	msr	BASEPRI, r3
 800e9bc:	f3bf 8f6f 	isb	sy
 800e9c0:	f3bf 8f4f 	dsb	sy
 800e9c4:	613b      	str	r3, [r7, #16]
}
 800e9c6:	bf00      	nop
 800e9c8:	e7fe      	b.n	800e9c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	68ba      	ldr	r2, [r7, #8]
 800e9ce:	fb02 f303 	mul.w	r3, r2, r3
 800e9d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e9d4:	69fb      	ldr	r3, [r7, #28]
 800e9d6:	3350      	adds	r3, #80	; 0x50
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f002 fbc5 	bl	8011168 <pvPortMalloc>
 800e9de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d011      	beq.n	800ea0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	3350      	adds	r3, #80	; 0x50
 800e9ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e9f8:	79fa      	ldrb	r2, [r7, #7]
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	9300      	str	r3, [sp, #0]
 800e9fe:	4613      	mov	r3, r2
 800ea00:	697a      	ldr	r2, [r7, #20]
 800ea02:	68b9      	ldr	r1, [r7, #8]
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	f000 f805 	bl	800ea14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea0a:	69bb      	ldr	r3, [r7, #24]
	}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3720      	adds	r7, #32
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	607a      	str	r2, [r7, #4]
 800ea20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d103      	bne.n	800ea30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ea28:	69bb      	ldr	r3, [r7, #24]
 800ea2a:	69ba      	ldr	r2, [r7, #24]
 800ea2c:	601a      	str	r2, [r3, #0]
 800ea2e:	e002      	b.n	800ea36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	68fa      	ldr	r2, [r7, #12]
 800ea3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ea3c:	69bb      	ldr	r3, [r7, #24]
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ea42:	2101      	movs	r1, #1
 800ea44:	69b8      	ldr	r0, [r7, #24]
 800ea46:	f7ff fecb 	bl	800e7e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ea4a:	69bb      	ldr	r3, [r7, #24]
 800ea4c:	78fa      	ldrb	r2, [r7, #3]
 800ea4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ea52:	bf00      	nop
 800ea54:	3710      	adds	r7, #16
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}

0800ea5a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ea5a:	b580      	push	{r7, lr}
 800ea5c:	b08a      	sub	sp, #40	; 0x28
 800ea5e:	af02      	add	r7, sp, #8
 800ea60:	60f8      	str	r0, [r7, #12]
 800ea62:	60b9      	str	r1, [r7, #8]
 800ea64:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d10a      	bne.n	800ea82 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ea6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea70:	f383 8811 	msr	BASEPRI, r3
 800ea74:	f3bf 8f6f 	isb	sy
 800ea78:	f3bf 8f4f 	dsb	sy
 800ea7c:	61bb      	str	r3, [r7, #24]
}
 800ea7e:	bf00      	nop
 800ea80:	e7fe      	b.n	800ea80 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ea82:	68ba      	ldr	r2, [r7, #8]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d90a      	bls.n	800eaa0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800ea8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea8e:	f383 8811 	msr	BASEPRI, r3
 800ea92:	f3bf 8f6f 	isb	sy
 800ea96:	f3bf 8f4f 	dsb	sy
 800ea9a:	617b      	str	r3, [r7, #20]
}
 800ea9c:	bf00      	nop
 800ea9e:	e7fe      	b.n	800ea9e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800eaa0:	2302      	movs	r3, #2
 800eaa2:	9300      	str	r3, [sp, #0]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	68f8      	ldr	r0, [r7, #12]
 800eaac:	f7ff ff00 	bl	800e8b0 <xQueueGenericCreateStatic>
 800eab0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800eab2:	69fb      	ldr	r3, [r7, #28]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d002      	beq.n	800eabe <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	68ba      	ldr	r2, [r7, #8]
 800eabc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800eabe:	69fb      	ldr	r3, [r7, #28]
	}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3720      	adds	r7, #32
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b086      	sub	sp, #24
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d10a      	bne.n	800eaee <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ead8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eadc:	f383 8811 	msr	BASEPRI, r3
 800eae0:	f3bf 8f6f 	isb	sy
 800eae4:	f3bf 8f4f 	dsb	sy
 800eae8:	613b      	str	r3, [r7, #16]
}
 800eaea:	bf00      	nop
 800eaec:	e7fe      	b.n	800eaec <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800eaee:	683a      	ldr	r2, [r7, #0]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d90a      	bls.n	800eb0c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800eaf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eafa:	f383 8811 	msr	BASEPRI, r3
 800eafe:	f3bf 8f6f 	isb	sy
 800eb02:	f3bf 8f4f 	dsb	sy
 800eb06:	60fb      	str	r3, [r7, #12]
}
 800eb08:	bf00      	nop
 800eb0a:	e7fe      	b.n	800eb0a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800eb0c:	2202      	movs	r2, #2
 800eb0e:	2100      	movs	r1, #0
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7ff ff45 	bl	800e9a0 <xQueueGenericCreate>
 800eb16:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d002      	beq.n	800eb24 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	683a      	ldr	r2, [r7, #0]
 800eb22:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800eb24:	697b      	ldr	r3, [r7, #20]
	}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3718      	adds	r7, #24
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
	...

0800eb30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b08e      	sub	sp, #56	; 0x38
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	607a      	str	r2, [r7, #4]
 800eb3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d10a      	bne.n	800eb62 <xQueueGenericSend+0x32>
	__asm volatile
 800eb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb50:	f383 8811 	msr	BASEPRI, r3
 800eb54:	f3bf 8f6f 	isb	sy
 800eb58:	f3bf 8f4f 	dsb	sy
 800eb5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eb5e:	bf00      	nop
 800eb60:	e7fe      	b.n	800eb60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d103      	bne.n	800eb70 <xQueueGenericSend+0x40>
 800eb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d101      	bne.n	800eb74 <xQueueGenericSend+0x44>
 800eb70:	2301      	movs	r3, #1
 800eb72:	e000      	b.n	800eb76 <xQueueGenericSend+0x46>
 800eb74:	2300      	movs	r3, #0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d10a      	bne.n	800eb90 <xQueueGenericSend+0x60>
	__asm volatile
 800eb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7e:	f383 8811 	msr	BASEPRI, r3
 800eb82:	f3bf 8f6f 	isb	sy
 800eb86:	f3bf 8f4f 	dsb	sy
 800eb8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eb8c:	bf00      	nop
 800eb8e:	e7fe      	b.n	800eb8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	2b02      	cmp	r3, #2
 800eb94:	d103      	bne.n	800eb9e <xQueueGenericSend+0x6e>
 800eb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d101      	bne.n	800eba2 <xQueueGenericSend+0x72>
 800eb9e:	2301      	movs	r3, #1
 800eba0:	e000      	b.n	800eba4 <xQueueGenericSend+0x74>
 800eba2:	2300      	movs	r3, #0
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d10a      	bne.n	800ebbe <xQueueGenericSend+0x8e>
	__asm volatile
 800eba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebac:	f383 8811 	msr	BASEPRI, r3
 800ebb0:	f3bf 8f6f 	isb	sy
 800ebb4:	f3bf 8f4f 	dsb	sy
 800ebb8:	623b      	str	r3, [r7, #32]
}
 800ebba:	bf00      	nop
 800ebbc:	e7fe      	b.n	800ebbc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ebbe:	f001 fb59 	bl	8010274 <xTaskGetSchedulerState>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d102      	bne.n	800ebce <xQueueGenericSend+0x9e>
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d101      	bne.n	800ebd2 <xQueueGenericSend+0xa2>
 800ebce:	2301      	movs	r3, #1
 800ebd0:	e000      	b.n	800ebd4 <xQueueGenericSend+0xa4>
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d10a      	bne.n	800ebee <xQueueGenericSend+0xbe>
	__asm volatile
 800ebd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebdc:	f383 8811 	msr	BASEPRI, r3
 800ebe0:	f3bf 8f6f 	isb	sy
 800ebe4:	f3bf 8f4f 	dsb	sy
 800ebe8:	61fb      	str	r3, [r7, #28]
}
 800ebea:	bf00      	nop
 800ebec:	e7fe      	b.n	800ebec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ebee:	f002 f999 	bl	8010f24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ebf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d302      	bcc.n	800ec04 <xQueueGenericSend+0xd4>
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	2b02      	cmp	r3, #2
 800ec02:	d129      	bne.n	800ec58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec04:	683a      	ldr	r2, [r7, #0]
 800ec06:	68b9      	ldr	r1, [r7, #8]
 800ec08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec0a:	f000 fb52 	bl	800f2b2 <prvCopyDataToQueue>
 800ec0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d010      	beq.n	800ec3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1a:	3324      	adds	r3, #36	; 0x24
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f001 f967 	bl	800fef0 <xTaskRemoveFromEventList>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d013      	beq.n	800ec50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ec28:	4b3f      	ldr	r3, [pc, #252]	; (800ed28 <xQueueGenericSend+0x1f8>)
 800ec2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec2e:	601a      	str	r2, [r3, #0]
 800ec30:	f3bf 8f4f 	dsb	sy
 800ec34:	f3bf 8f6f 	isb	sy
 800ec38:	e00a      	b.n	800ec50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ec3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d007      	beq.n	800ec50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ec40:	4b39      	ldr	r3, [pc, #228]	; (800ed28 <xQueueGenericSend+0x1f8>)
 800ec42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec46:	601a      	str	r2, [r3, #0]
 800ec48:	f3bf 8f4f 	dsb	sy
 800ec4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ec50:	f002 f998 	bl	8010f84 <vPortExitCritical>
				return pdPASS;
 800ec54:	2301      	movs	r3, #1
 800ec56:	e063      	b.n	800ed20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d103      	bne.n	800ec66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ec5e:	f002 f991 	bl	8010f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ec62:	2300      	movs	r3, #0
 800ec64:	e05c      	b.n	800ed20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d106      	bne.n	800ec7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec6c:	f107 0314 	add.w	r3, r7, #20
 800ec70:	4618      	mov	r0, r3
 800ec72:	f001 f9a1 	bl	800ffb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec76:	2301      	movs	r3, #1
 800ec78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec7a:	f002 f983 	bl	8010f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec7e:	f000 ff0d 	bl	800fa9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec82:	f002 f94f 	bl	8010f24 <vPortEnterCritical>
 800ec86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec8c:	b25b      	sxtb	r3, r3
 800ec8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec92:	d103      	bne.n	800ec9c <xQueueGenericSend+0x16c>
 800ec94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec96:	2200      	movs	r2, #0
 800ec98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eca2:	b25b      	sxtb	r3, r3
 800eca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eca8:	d103      	bne.n	800ecb2 <xQueueGenericSend+0x182>
 800ecaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecac:	2200      	movs	r2, #0
 800ecae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ecb2:	f002 f967 	bl	8010f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ecb6:	1d3a      	adds	r2, r7, #4
 800ecb8:	f107 0314 	add.w	r3, r7, #20
 800ecbc:	4611      	mov	r1, r2
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f001 f990 	bl	800ffe4 <xTaskCheckForTimeOut>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d124      	bne.n	800ed14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ecca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eccc:	f000 fbe9 	bl	800f4a2 <prvIsQueueFull>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d018      	beq.n	800ed08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ecd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd8:	3310      	adds	r3, #16
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	4611      	mov	r1, r2
 800ecde:	4618      	mov	r0, r3
 800ece0:	f001 f8b6 	bl	800fe50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ece4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ece6:	f000 fb74 	bl	800f3d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ecea:	f000 fee5 	bl	800fab8 <xTaskResumeAll>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	f47f af7c 	bne.w	800ebee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ecf6:	4b0c      	ldr	r3, [pc, #48]	; (800ed28 <xQueueGenericSend+0x1f8>)
 800ecf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecfc:	601a      	str	r2, [r3, #0]
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	f3bf 8f6f 	isb	sy
 800ed06:	e772      	b.n	800ebee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ed08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed0a:	f000 fb62 	bl	800f3d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed0e:	f000 fed3 	bl	800fab8 <xTaskResumeAll>
 800ed12:	e76c      	b.n	800ebee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ed14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed16:	f000 fb5c 	bl	800f3d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed1a:	f000 fecd 	bl	800fab8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ed1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3738      	adds	r7, #56	; 0x38
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	e000ed04 	.word	0xe000ed04

0800ed2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b090      	sub	sp, #64	; 0x40
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	607a      	str	r2, [r7, #4]
 800ed38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ed3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d10a      	bne.n	800ed5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ed44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed48:	f383 8811 	msr	BASEPRI, r3
 800ed4c:	f3bf 8f6f 	isb	sy
 800ed50:	f3bf 8f4f 	dsb	sy
 800ed54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ed56:	bf00      	nop
 800ed58:	e7fe      	b.n	800ed58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d103      	bne.n	800ed68 <xQueueGenericSendFromISR+0x3c>
 800ed60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d101      	bne.n	800ed6c <xQueueGenericSendFromISR+0x40>
 800ed68:	2301      	movs	r3, #1
 800ed6a:	e000      	b.n	800ed6e <xQueueGenericSendFromISR+0x42>
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d10a      	bne.n	800ed88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ed72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed76:	f383 8811 	msr	BASEPRI, r3
 800ed7a:	f3bf 8f6f 	isb	sy
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed84:	bf00      	nop
 800ed86:	e7fe      	b.n	800ed86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	2b02      	cmp	r3, #2
 800ed8c:	d103      	bne.n	800ed96 <xQueueGenericSendFromISR+0x6a>
 800ed8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	d101      	bne.n	800ed9a <xQueueGenericSendFromISR+0x6e>
 800ed96:	2301      	movs	r3, #1
 800ed98:	e000      	b.n	800ed9c <xQueueGenericSendFromISR+0x70>
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d10a      	bne.n	800edb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800eda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda4:	f383 8811 	msr	BASEPRI, r3
 800eda8:	f3bf 8f6f 	isb	sy
 800edac:	f3bf 8f4f 	dsb	sy
 800edb0:	623b      	str	r3, [r7, #32]
}
 800edb2:	bf00      	nop
 800edb4:	e7fe      	b.n	800edb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edb6:	f002 f997 	bl	80110e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800edba:	f3ef 8211 	mrs	r2, BASEPRI
 800edbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc2:	f383 8811 	msr	BASEPRI, r3
 800edc6:	f3bf 8f6f 	isb	sy
 800edca:	f3bf 8f4f 	dsb	sy
 800edce:	61fa      	str	r2, [r7, #28]
 800edd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800edd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800edd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800edd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edde:	429a      	cmp	r2, r3
 800ede0:	d302      	bcc.n	800ede8 <xQueueGenericSendFromISR+0xbc>
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	2b02      	cmp	r3, #2
 800ede6:	d12f      	bne.n	800ee48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ede8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800edee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800edf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800edf8:	683a      	ldr	r2, [r7, #0]
 800edfa:	68b9      	ldr	r1, [r7, #8]
 800edfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800edfe:	f000 fa58 	bl	800f2b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ee02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ee06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee0a:	d112      	bne.n	800ee32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d016      	beq.n	800ee42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee16:	3324      	adds	r3, #36	; 0x24
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f001 f869 	bl	800fef0 <xTaskRemoveFromEventList>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d00e      	beq.n	800ee42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00b      	beq.n	800ee42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2201      	movs	r2, #1
 800ee2e:	601a      	str	r2, [r3, #0]
 800ee30:	e007      	b.n	800ee42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ee32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee36:	3301      	adds	r3, #1
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	b25a      	sxtb	r2, r3
 800ee3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ee42:	2301      	movs	r3, #1
 800ee44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ee46:	e001      	b.n	800ee4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ee56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3740      	adds	r7, #64	; 0x40
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
	...

0800ee64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b08c      	sub	sp, #48	; 0x30
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	60f8      	str	r0, [r7, #12]
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ee70:	2300      	movs	r3, #0
 800ee72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ee78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d10a      	bne.n	800ee94 <xQueueReceive+0x30>
	__asm volatile
 800ee7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee82:	f383 8811 	msr	BASEPRI, r3
 800ee86:	f3bf 8f6f 	isb	sy
 800ee8a:	f3bf 8f4f 	dsb	sy
 800ee8e:	623b      	str	r3, [r7, #32]
}
 800ee90:	bf00      	nop
 800ee92:	e7fe      	b.n	800ee92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d103      	bne.n	800eea2 <xQueueReceive+0x3e>
 800ee9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d101      	bne.n	800eea6 <xQueueReceive+0x42>
 800eea2:	2301      	movs	r3, #1
 800eea4:	e000      	b.n	800eea8 <xQueueReceive+0x44>
 800eea6:	2300      	movs	r3, #0
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d10a      	bne.n	800eec2 <xQueueReceive+0x5e>
	__asm volatile
 800eeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb0:	f383 8811 	msr	BASEPRI, r3
 800eeb4:	f3bf 8f6f 	isb	sy
 800eeb8:	f3bf 8f4f 	dsb	sy
 800eebc:	61fb      	str	r3, [r7, #28]
}
 800eebe:	bf00      	nop
 800eec0:	e7fe      	b.n	800eec0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eec2:	f001 f9d7 	bl	8010274 <xTaskGetSchedulerState>
 800eec6:	4603      	mov	r3, r0
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d102      	bne.n	800eed2 <xQueueReceive+0x6e>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d101      	bne.n	800eed6 <xQueueReceive+0x72>
 800eed2:	2301      	movs	r3, #1
 800eed4:	e000      	b.n	800eed8 <xQueueReceive+0x74>
 800eed6:	2300      	movs	r3, #0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d10a      	bne.n	800eef2 <xQueueReceive+0x8e>
	__asm volatile
 800eedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee0:	f383 8811 	msr	BASEPRI, r3
 800eee4:	f3bf 8f6f 	isb	sy
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	61bb      	str	r3, [r7, #24]
}
 800eeee:	bf00      	nop
 800eef0:	e7fe      	b.n	800eef0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eef2:	f002 f817 	bl	8010f24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eefa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d01f      	beq.n	800ef42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef02:	68b9      	ldr	r1, [r7, #8]
 800ef04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef06:	f000 fa3e 	bl	800f386 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0c:	1e5a      	subs	r2, r3, #1
 800ef0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef14:	691b      	ldr	r3, [r3, #16]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00f      	beq.n	800ef3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1c:	3310      	adds	r3, #16
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f000 ffe6 	bl	800fef0 <xTaskRemoveFromEventList>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d007      	beq.n	800ef3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ef2a:	4b3d      	ldr	r3, [pc, #244]	; (800f020 <xQueueReceive+0x1bc>)
 800ef2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef30:	601a      	str	r2, [r3, #0]
 800ef32:	f3bf 8f4f 	dsb	sy
 800ef36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ef3a:	f002 f823 	bl	8010f84 <vPortExitCritical>
				return pdPASS;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e069      	b.n	800f016 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d103      	bne.n	800ef50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef48:	f002 f81c 	bl	8010f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	e062      	b.n	800f016 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d106      	bne.n	800ef64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef56:	f107 0310 	add.w	r3, r7, #16
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f001 f82c 	bl	800ffb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef60:	2301      	movs	r3, #1
 800ef62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef64:	f002 f80e 	bl	8010f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef68:	f000 fd98 	bl	800fa9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef6c:	f001 ffda 	bl	8010f24 <vPortEnterCritical>
 800ef70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef76:	b25b      	sxtb	r3, r3
 800ef78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef7c:	d103      	bne.n	800ef86 <xQueueReceive+0x122>
 800ef7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef80:	2200      	movs	r2, #0
 800ef82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef8c:	b25b      	sxtb	r3, r3
 800ef8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef92:	d103      	bne.n	800ef9c <xQueueReceive+0x138>
 800ef94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef96:	2200      	movs	r2, #0
 800ef98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef9c:	f001 fff2 	bl	8010f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efa0:	1d3a      	adds	r2, r7, #4
 800efa2:	f107 0310 	add.w	r3, r7, #16
 800efa6:	4611      	mov	r1, r2
 800efa8:	4618      	mov	r0, r3
 800efaa:	f001 f81b 	bl	800ffe4 <xTaskCheckForTimeOut>
 800efae:	4603      	mov	r3, r0
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d123      	bne.n	800effc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800efb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efb6:	f000 fa5e 	bl	800f476 <prvIsQueueEmpty>
 800efba:	4603      	mov	r3, r0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d017      	beq.n	800eff0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800efc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc2:	3324      	adds	r3, #36	; 0x24
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	4611      	mov	r1, r2
 800efc8:	4618      	mov	r0, r3
 800efca:	f000 ff41 	bl	800fe50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800efce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efd0:	f000 f9ff 	bl	800f3d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800efd4:	f000 fd70 	bl	800fab8 <xTaskResumeAll>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d189      	bne.n	800eef2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800efde:	4b10      	ldr	r3, [pc, #64]	; (800f020 <xQueueReceive+0x1bc>)
 800efe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efe4:	601a      	str	r2, [r3, #0]
 800efe6:	f3bf 8f4f 	dsb	sy
 800efea:	f3bf 8f6f 	isb	sy
 800efee:	e780      	b.n	800eef2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800eff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eff2:	f000 f9ee 	bl	800f3d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eff6:	f000 fd5f 	bl	800fab8 <xTaskResumeAll>
 800effa:	e77a      	b.n	800eef2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800effc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800effe:	f000 f9e8 	bl	800f3d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f002:	f000 fd59 	bl	800fab8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f008:	f000 fa35 	bl	800f476 <prvIsQueueEmpty>
 800f00c:	4603      	mov	r3, r0
 800f00e:	2b00      	cmp	r3, #0
 800f010:	f43f af6f 	beq.w	800eef2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f014:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f016:	4618      	mov	r0, r3
 800f018:	3730      	adds	r7, #48	; 0x30
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop
 800f020:	e000ed04 	.word	0xe000ed04

0800f024 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b08e      	sub	sp, #56	; 0x38
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f02e:	2300      	movs	r3, #0
 800f030:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f036:	2300      	movs	r3, #0
 800f038:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d10a      	bne.n	800f056 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f044:	f383 8811 	msr	BASEPRI, r3
 800f048:	f3bf 8f6f 	isb	sy
 800f04c:	f3bf 8f4f 	dsb	sy
 800f050:	623b      	str	r3, [r7, #32]
}
 800f052:	bf00      	nop
 800f054:	e7fe      	b.n	800f054 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d00a      	beq.n	800f074 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f062:	f383 8811 	msr	BASEPRI, r3
 800f066:	f3bf 8f6f 	isb	sy
 800f06a:	f3bf 8f4f 	dsb	sy
 800f06e:	61fb      	str	r3, [r7, #28]
}
 800f070:	bf00      	nop
 800f072:	e7fe      	b.n	800f072 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f074:	f001 f8fe 	bl	8010274 <xTaskGetSchedulerState>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d102      	bne.n	800f084 <xQueueSemaphoreTake+0x60>
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d101      	bne.n	800f088 <xQueueSemaphoreTake+0x64>
 800f084:	2301      	movs	r3, #1
 800f086:	e000      	b.n	800f08a <xQueueSemaphoreTake+0x66>
 800f088:	2300      	movs	r3, #0
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d10a      	bne.n	800f0a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f092:	f383 8811 	msr	BASEPRI, r3
 800f096:	f3bf 8f6f 	isb	sy
 800f09a:	f3bf 8f4f 	dsb	sy
 800f09e:	61bb      	str	r3, [r7, #24]
}
 800f0a0:	bf00      	nop
 800f0a2:	e7fe      	b.n	800f0a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f0a4:	f001 ff3e 	bl	8010f24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d024      	beq.n	800f0fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b6:	1e5a      	subs	r2, r3, #1
 800f0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d104      	bne.n	800f0ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f0c4:	f001 fa4c 	bl	8010560 <pvTaskIncrementMutexHeldCount>
 800f0c8:	4602      	mov	r2, r0
 800f0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d0:	691b      	ldr	r3, [r3, #16]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d00f      	beq.n	800f0f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d8:	3310      	adds	r3, #16
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f000 ff08 	bl	800fef0 <xTaskRemoveFromEventList>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d007      	beq.n	800f0f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f0e6:	4b54      	ldr	r3, [pc, #336]	; (800f238 <xQueueSemaphoreTake+0x214>)
 800f0e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0ec:	601a      	str	r2, [r3, #0]
 800f0ee:	f3bf 8f4f 	dsb	sy
 800f0f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f0f6:	f001 ff45 	bl	8010f84 <vPortExitCritical>
				return pdPASS;
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	e097      	b.n	800f22e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d111      	bne.n	800f128 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f106:	2b00      	cmp	r3, #0
 800f108:	d00a      	beq.n	800f120 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10e:	f383 8811 	msr	BASEPRI, r3
 800f112:	f3bf 8f6f 	isb	sy
 800f116:	f3bf 8f4f 	dsb	sy
 800f11a:	617b      	str	r3, [r7, #20]
}
 800f11c:	bf00      	nop
 800f11e:	e7fe      	b.n	800f11e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f120:	f001 ff30 	bl	8010f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f124:	2300      	movs	r3, #0
 800f126:	e082      	b.n	800f22e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d106      	bne.n	800f13c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f12e:	f107 030c 	add.w	r3, r7, #12
 800f132:	4618      	mov	r0, r3
 800f134:	f000 ff40 	bl	800ffb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f138:	2301      	movs	r3, #1
 800f13a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f13c:	f001 ff22 	bl	8010f84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f140:	f000 fcac 	bl	800fa9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f144:	f001 feee 	bl	8010f24 <vPortEnterCritical>
 800f148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f14e:	b25b      	sxtb	r3, r3
 800f150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f154:	d103      	bne.n	800f15e <xQueueSemaphoreTake+0x13a>
 800f156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f158:	2200      	movs	r2, #0
 800f15a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f164:	b25b      	sxtb	r3, r3
 800f166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f16a:	d103      	bne.n	800f174 <xQueueSemaphoreTake+0x150>
 800f16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16e:	2200      	movs	r2, #0
 800f170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f174:	f001 ff06 	bl	8010f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f178:	463a      	mov	r2, r7
 800f17a:	f107 030c 	add.w	r3, r7, #12
 800f17e:	4611      	mov	r1, r2
 800f180:	4618      	mov	r0, r3
 800f182:	f000 ff2f 	bl	800ffe4 <xTaskCheckForTimeOut>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d132      	bne.n	800f1f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f18c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f18e:	f000 f972 	bl	800f476 <prvIsQueueEmpty>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d026      	beq.n	800f1e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d109      	bne.n	800f1b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f1a0:	f001 fec0 	bl	8010f24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f001 f881 	bl	80102b0 <xTaskPriorityInherit>
 800f1ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f1b0:	f001 fee8 	bl	8010f84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b6:	3324      	adds	r3, #36	; 0x24
 800f1b8:	683a      	ldr	r2, [r7, #0]
 800f1ba:	4611      	mov	r1, r2
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f000 fe47 	bl	800fe50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f1c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1c4:	f000 f905 	bl	800f3d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f1c8:	f000 fc76 	bl	800fab8 <xTaskResumeAll>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	f47f af68 	bne.w	800f0a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f1d4:	4b18      	ldr	r3, [pc, #96]	; (800f238 <xQueueSemaphoreTake+0x214>)
 800f1d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1da:	601a      	str	r2, [r3, #0]
 800f1dc:	f3bf 8f4f 	dsb	sy
 800f1e0:	f3bf 8f6f 	isb	sy
 800f1e4:	e75e      	b.n	800f0a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f1e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1e8:	f000 f8f3 	bl	800f3d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1ec:	f000 fc64 	bl	800fab8 <xTaskResumeAll>
 800f1f0:	e758      	b.n	800f0a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f1f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1f4:	f000 f8ed 	bl	800f3d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f1f8:	f000 fc5e 	bl	800fab8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1fe:	f000 f93a 	bl	800f476 <prvIsQueueEmpty>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	f43f af4d 	beq.w	800f0a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d00d      	beq.n	800f22c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f210:	f001 fe88 	bl	8010f24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f214:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f216:	f000 f834 	bl	800f282 <prvGetDisinheritPriorityAfterTimeout>
 800f21a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f222:	4618      	mov	r0, r3
 800f224:	f001 f91a 	bl	801045c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f228:	f001 feac 	bl	8010f84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f22c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3738      	adds	r7, #56	; 0x38
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	e000ed04 	.word	0xe000ed04

0800f23c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d10a      	bne.n	800f264 <vQueueDelete+0x28>
	__asm volatile
 800f24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f252:	f383 8811 	msr	BASEPRI, r3
 800f256:	f3bf 8f6f 	isb	sy
 800f25a:	f3bf 8f4f 	dsb	sy
 800f25e:	60bb      	str	r3, [r7, #8]
}
 800f260:	bf00      	nop
 800f262:	e7fe      	b.n	800f262 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f264:	68f8      	ldr	r0, [r7, #12]
 800f266:	f000 f95f 	bl	800f528 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f270:	2b00      	cmp	r3, #0
 800f272:	d102      	bne.n	800f27a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f274:	68f8      	ldr	r0, [r7, #12]
 800f276:	f002 f843 	bl	8011300 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f27a:	bf00      	nop
 800f27c:	3710      	adds	r7, #16
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f282:	b480      	push	{r7}
 800f284:	b085      	sub	sp, #20
 800f286:	af00      	add	r7, sp, #0
 800f288:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d006      	beq.n	800f2a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f29c:	60fb      	str	r3, [r7, #12]
 800f29e:	e001      	b.n	800f2a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
	}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3714      	adds	r7, #20
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr

0800f2b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f2b2:	b580      	push	{r7, lr}
 800f2b4:	b086      	sub	sp, #24
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	60f8      	str	r0, [r7, #12]
 800f2ba:	60b9      	str	r1, [r7, #8]
 800f2bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d10d      	bne.n	800f2ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d14d      	bne.n	800f374 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	689b      	ldr	r3, [r3, #8]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f001 f84f 	bl	8010380 <xTaskPriorityDisinherit>
 800f2e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	609a      	str	r2, [r3, #8]
 800f2ea:	e043      	b.n	800f374 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d119      	bne.n	800f326 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	6858      	ldr	r0, [r3, #4]
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	68b9      	ldr	r1, [r7, #8]
 800f2fe:	f002 ff42 	bl	8012186 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	685a      	ldr	r2, [r3, #4]
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f30a:	441a      	add	r2, r3
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	685a      	ldr	r2, [r3, #4]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	689b      	ldr	r3, [r3, #8]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d32b      	bcc.n	800f374 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	605a      	str	r2, [r3, #4]
 800f324:	e026      	b.n	800f374 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	68d8      	ldr	r0, [r3, #12]
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f32e:	461a      	mov	r2, r3
 800f330:	68b9      	ldr	r1, [r7, #8]
 800f332:	f002 ff28 	bl	8012186 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	68da      	ldr	r2, [r3, #12]
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f33e:	425b      	negs	r3, r3
 800f340:	441a      	add	r2, r3
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	68da      	ldr	r2, [r3, #12]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	429a      	cmp	r2, r3
 800f350:	d207      	bcs.n	800f362 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	689a      	ldr	r2, [r3, #8]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f35a:	425b      	negs	r3, r3
 800f35c:	441a      	add	r2, r3
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2b02      	cmp	r3, #2
 800f366:	d105      	bne.n	800f374 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d002      	beq.n	800f374 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	3b01      	subs	r3, #1
 800f372:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	1c5a      	adds	r2, r3, #1
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f37c:	697b      	ldr	r3, [r7, #20]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3718      	adds	r7, #24
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}

0800f386 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f386:	b580      	push	{r7, lr}
 800f388:	b082      	sub	sp, #8
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	6078      	str	r0, [r7, #4]
 800f38e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f394:	2b00      	cmp	r3, #0
 800f396:	d018      	beq.n	800f3ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	68da      	ldr	r2, [r3, #12]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a0:	441a      	add	r2, r3
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	68da      	ldr	r2, [r3, #12]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	689b      	ldr	r3, [r3, #8]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d303      	bcc.n	800f3ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	68d9      	ldr	r1, [r3, #12]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	6838      	ldr	r0, [r7, #0]
 800f3c6:	f002 fede 	bl	8012186 <memcpy>
	}
}
 800f3ca:	bf00      	nop
 800f3cc:	3708      	adds	r7, #8
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}

0800f3d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f3d2:	b580      	push	{r7, lr}
 800f3d4:	b084      	sub	sp, #16
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f3da:	f001 fda3 	bl	8010f24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f3e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f3e6:	e011      	b.n	800f40c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d012      	beq.n	800f416 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	3324      	adds	r3, #36	; 0x24
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f000 fd7b 	bl	800fef0 <xTaskRemoveFromEventList>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d001      	beq.n	800f404 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f400:	f000 fe52 	bl	80100a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f404:	7bfb      	ldrb	r3, [r7, #15]
 800f406:	3b01      	subs	r3, #1
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f40c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f410:	2b00      	cmp	r3, #0
 800f412:	dce9      	bgt.n	800f3e8 <prvUnlockQueue+0x16>
 800f414:	e000      	b.n	800f418 <prvUnlockQueue+0x46>
					break;
 800f416:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	22ff      	movs	r2, #255	; 0xff
 800f41c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f420:	f001 fdb0 	bl	8010f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f424:	f001 fd7e 	bl	8010f24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f42e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f430:	e011      	b.n	800f456 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	691b      	ldr	r3, [r3, #16]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d012      	beq.n	800f460 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	3310      	adds	r3, #16
 800f43e:	4618      	mov	r0, r3
 800f440:	f000 fd56 	bl	800fef0 <xTaskRemoveFromEventList>
 800f444:	4603      	mov	r3, r0
 800f446:	2b00      	cmp	r3, #0
 800f448:	d001      	beq.n	800f44e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f44a:	f000 fe2d 	bl	80100a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f44e:	7bbb      	ldrb	r3, [r7, #14]
 800f450:	3b01      	subs	r3, #1
 800f452:	b2db      	uxtb	r3, r3
 800f454:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f456:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	dce9      	bgt.n	800f432 <prvUnlockQueue+0x60>
 800f45e:	e000      	b.n	800f462 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f460:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	22ff      	movs	r2, #255	; 0xff
 800f466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f46a:	f001 fd8b 	bl	8010f84 <vPortExitCritical>
}
 800f46e:	bf00      	nop
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}

0800f476 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f476:	b580      	push	{r7, lr}
 800f478:	b084      	sub	sp, #16
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f47e:	f001 fd51 	bl	8010f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f486:	2b00      	cmp	r3, #0
 800f488:	d102      	bne.n	800f490 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f48a:	2301      	movs	r3, #1
 800f48c:	60fb      	str	r3, [r7, #12]
 800f48e:	e001      	b.n	800f494 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f490:	2300      	movs	r3, #0
 800f492:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f494:	f001 fd76 	bl	8010f84 <vPortExitCritical>

	return xReturn;
 800f498:	68fb      	ldr	r3, [r7, #12]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3710      	adds	r7, #16
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}

0800f4a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f4a2:	b580      	push	{r7, lr}
 800f4a4:	b084      	sub	sp, #16
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4aa:	f001 fd3b 	bl	8010f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d102      	bne.n	800f4c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	60fb      	str	r3, [r7, #12]
 800f4be:	e001      	b.n	800f4c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f4c4:	f001 fd5e 	bl	8010f84 <vPortExitCritical>

	return xReturn;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
	...

0800f4d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b085      	sub	sp, #20
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f4de:	2300      	movs	r3, #0
 800f4e0:	60fb      	str	r3, [r7, #12]
 800f4e2:	e014      	b.n	800f50e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f4e4:	4a0f      	ldr	r2, [pc, #60]	; (800f524 <vQueueAddToRegistry+0x50>)
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d10b      	bne.n	800f508 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f4f0:	490c      	ldr	r1, [pc, #48]	; (800f524 <vQueueAddToRegistry+0x50>)
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	683a      	ldr	r2, [r7, #0]
 800f4f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f4fa:	4a0a      	ldr	r2, [pc, #40]	; (800f524 <vQueueAddToRegistry+0x50>)
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	00db      	lsls	r3, r3, #3
 800f500:	4413      	add	r3, r2
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f506:	e006      	b.n	800f516 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	3301      	adds	r3, #1
 800f50c:	60fb      	str	r3, [r7, #12]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2b07      	cmp	r3, #7
 800f512:	d9e7      	bls.n	800f4e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f514:	bf00      	nop
 800f516:	bf00      	nop
 800f518:	3714      	adds	r7, #20
 800f51a:	46bd      	mov	sp, r7
 800f51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f520:	4770      	bx	lr
 800f522:	bf00      	nop
 800f524:	2000aa58 	.word	0x2000aa58

0800f528 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f528:	b480      	push	{r7}
 800f52a:	b085      	sub	sp, #20
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f530:	2300      	movs	r3, #0
 800f532:	60fb      	str	r3, [r7, #12]
 800f534:	e016      	b.n	800f564 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f536:	4a10      	ldr	r2, [pc, #64]	; (800f578 <vQueueUnregisterQueue+0x50>)
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	00db      	lsls	r3, r3, #3
 800f53c:	4413      	add	r3, r2
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	429a      	cmp	r2, r3
 800f544:	d10b      	bne.n	800f55e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f546:	4a0c      	ldr	r2, [pc, #48]	; (800f578 <vQueueUnregisterQueue+0x50>)
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2100      	movs	r1, #0
 800f54c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f550:	4a09      	ldr	r2, [pc, #36]	; (800f578 <vQueueUnregisterQueue+0x50>)
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	00db      	lsls	r3, r3, #3
 800f556:	4413      	add	r3, r2
 800f558:	2200      	movs	r2, #0
 800f55a:	605a      	str	r2, [r3, #4]
				break;
 800f55c:	e006      	b.n	800f56c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	3301      	adds	r3, #1
 800f562:	60fb      	str	r3, [r7, #12]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2b07      	cmp	r3, #7
 800f568:	d9e5      	bls.n	800f536 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f56a:	bf00      	nop
 800f56c:	bf00      	nop
 800f56e:	3714      	adds	r7, #20
 800f570:	46bd      	mov	sp, r7
 800f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f576:	4770      	bx	lr
 800f578:	2000aa58 	.word	0x2000aa58

0800f57c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b086      	sub	sp, #24
 800f580:	af00      	add	r7, sp, #0
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f58c:	f001 fcca 	bl	8010f24 <vPortEnterCritical>
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f596:	b25b      	sxtb	r3, r3
 800f598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f59c:	d103      	bne.n	800f5a6 <vQueueWaitForMessageRestricted+0x2a>
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f5ac:	b25b      	sxtb	r3, r3
 800f5ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5b2:	d103      	bne.n	800f5bc <vQueueWaitForMessageRestricted+0x40>
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f5bc:	f001 fce2 	bl	8010f84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d106      	bne.n	800f5d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	3324      	adds	r3, #36	; 0x24
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	68b9      	ldr	r1, [r7, #8]
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f000 fc61 	bl	800fe98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f5d6:	6978      	ldr	r0, [r7, #20]
 800f5d8:	f7ff fefb 	bl	800f3d2 <prvUnlockQueue>
	}
 800f5dc:	bf00      	nop
 800f5de:	3718      	adds	r7, #24
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b08e      	sub	sp, #56	; 0x38
 800f5e8:	af04      	add	r7, sp, #16
 800f5ea:	60f8      	str	r0, [r7, #12]
 800f5ec:	60b9      	str	r1, [r7, #8]
 800f5ee:	607a      	str	r2, [r7, #4]
 800f5f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d10a      	bne.n	800f60e <xTaskCreateStatic+0x2a>
	__asm volatile
 800f5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5fc:	f383 8811 	msr	BASEPRI, r3
 800f600:	f3bf 8f6f 	isb	sy
 800f604:	f3bf 8f4f 	dsb	sy
 800f608:	623b      	str	r3, [r7, #32]
}
 800f60a:	bf00      	nop
 800f60c:	e7fe      	b.n	800f60c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f610:	2b00      	cmp	r3, #0
 800f612:	d10a      	bne.n	800f62a <xTaskCreateStatic+0x46>
	__asm volatile
 800f614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f618:	f383 8811 	msr	BASEPRI, r3
 800f61c:	f3bf 8f6f 	isb	sy
 800f620:	f3bf 8f4f 	dsb	sy
 800f624:	61fb      	str	r3, [r7, #28]
}
 800f626:	bf00      	nop
 800f628:	e7fe      	b.n	800f628 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f62a:	23bc      	movs	r3, #188	; 0xbc
 800f62c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	2bbc      	cmp	r3, #188	; 0xbc
 800f632:	d00a      	beq.n	800f64a <xTaskCreateStatic+0x66>
	__asm volatile
 800f634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f638:	f383 8811 	msr	BASEPRI, r3
 800f63c:	f3bf 8f6f 	isb	sy
 800f640:	f3bf 8f4f 	dsb	sy
 800f644:	61bb      	str	r3, [r7, #24]
}
 800f646:	bf00      	nop
 800f648:	e7fe      	b.n	800f648 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f64a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d01e      	beq.n	800f690 <xTaskCreateStatic+0xac>
 800f652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f654:	2b00      	cmp	r3, #0
 800f656:	d01b      	beq.n	800f690 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f660:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f664:	2202      	movs	r2, #2
 800f666:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f66a:	2300      	movs	r3, #0
 800f66c:	9303      	str	r3, [sp, #12]
 800f66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f670:	9302      	str	r3, [sp, #8]
 800f672:	f107 0314 	add.w	r3, r7, #20
 800f676:	9301      	str	r3, [sp, #4]
 800f678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67a:	9300      	str	r3, [sp, #0]
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	687a      	ldr	r2, [r7, #4]
 800f680:	68b9      	ldr	r1, [r7, #8]
 800f682:	68f8      	ldr	r0, [r7, #12]
 800f684:	f000 f850 	bl	800f728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f68a:	f000 f8f3 	bl	800f874 <prvAddNewTaskToReadyList>
 800f68e:	e001      	b.n	800f694 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f690:	2300      	movs	r3, #0
 800f692:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f694:	697b      	ldr	r3, [r7, #20]
	}
 800f696:	4618      	mov	r0, r3
 800f698:	3728      	adds	r7, #40	; 0x28
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}

0800f69e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f69e:	b580      	push	{r7, lr}
 800f6a0:	b08c      	sub	sp, #48	; 0x30
 800f6a2:	af04      	add	r7, sp, #16
 800f6a4:	60f8      	str	r0, [r7, #12]
 800f6a6:	60b9      	str	r1, [r7, #8]
 800f6a8:	603b      	str	r3, [r7, #0]
 800f6aa:	4613      	mov	r3, r2
 800f6ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f6ae:	88fb      	ldrh	r3, [r7, #6]
 800f6b0:	009b      	lsls	r3, r3, #2
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f001 fd58 	bl	8011168 <pvPortMalloc>
 800f6b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d00e      	beq.n	800f6de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f6c0:	20bc      	movs	r0, #188	; 0xbc
 800f6c2:	f001 fd51 	bl	8011168 <pvPortMalloc>
 800f6c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f6c8:	69fb      	ldr	r3, [r7, #28]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d003      	beq.n	800f6d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f6ce:	69fb      	ldr	r3, [r7, #28]
 800f6d0:	697a      	ldr	r2, [r7, #20]
 800f6d2:	631a      	str	r2, [r3, #48]	; 0x30
 800f6d4:	e005      	b.n	800f6e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f6d6:	6978      	ldr	r0, [r7, #20]
 800f6d8:	f001 fe12 	bl	8011300 <vPortFree>
 800f6dc:	e001      	b.n	800f6e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f6e2:	69fb      	ldr	r3, [r7, #28]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d017      	beq.n	800f718 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f6f0:	88fa      	ldrh	r2, [r7, #6]
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	9303      	str	r3, [sp, #12]
 800f6f6:	69fb      	ldr	r3, [r7, #28]
 800f6f8:	9302      	str	r3, [sp, #8]
 800f6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fc:	9301      	str	r3, [sp, #4]
 800f6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f700:	9300      	str	r3, [sp, #0]
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	68b9      	ldr	r1, [r7, #8]
 800f706:	68f8      	ldr	r0, [r7, #12]
 800f708:	f000 f80e 	bl	800f728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f70c:	69f8      	ldr	r0, [r7, #28]
 800f70e:	f000 f8b1 	bl	800f874 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f712:	2301      	movs	r3, #1
 800f714:	61bb      	str	r3, [r7, #24]
 800f716:	e002      	b.n	800f71e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f71c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f71e:	69bb      	ldr	r3, [r7, #24]
	}
 800f720:	4618      	mov	r0, r3
 800f722:	3720      	adds	r7, #32
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b088      	sub	sp, #32
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	60f8      	str	r0, [r7, #12]
 800f730:	60b9      	str	r1, [r7, #8]
 800f732:	607a      	str	r2, [r7, #4]
 800f734:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f738:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	461a      	mov	r2, r3
 800f740:	21a5      	movs	r1, #165	; 0xa5
 800f742:	f002 fd2e 	bl	80121a2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f750:	3b01      	subs	r3, #1
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	4413      	add	r3, r2
 800f756:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f758:	69bb      	ldr	r3, [r7, #24]
 800f75a:	f023 0307 	bic.w	r3, r3, #7
 800f75e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f760:	69bb      	ldr	r3, [r7, #24]
 800f762:	f003 0307 	and.w	r3, r3, #7
 800f766:	2b00      	cmp	r3, #0
 800f768:	d00a      	beq.n	800f780 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f76e:	f383 8811 	msr	BASEPRI, r3
 800f772:	f3bf 8f6f 	isb	sy
 800f776:	f3bf 8f4f 	dsb	sy
 800f77a:	617b      	str	r3, [r7, #20]
}
 800f77c:	bf00      	nop
 800f77e:	e7fe      	b.n	800f77e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d01f      	beq.n	800f7c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f786:	2300      	movs	r3, #0
 800f788:	61fb      	str	r3, [r7, #28]
 800f78a:	e012      	b.n	800f7b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f78c:	68ba      	ldr	r2, [r7, #8]
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	4413      	add	r3, r2
 800f792:	7819      	ldrb	r1, [r3, #0]
 800f794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f796:	69fb      	ldr	r3, [r7, #28]
 800f798:	4413      	add	r3, r2
 800f79a:	3334      	adds	r3, #52	; 0x34
 800f79c:	460a      	mov	r2, r1
 800f79e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f7a0:	68ba      	ldr	r2, [r7, #8]
 800f7a2:	69fb      	ldr	r3, [r7, #28]
 800f7a4:	4413      	add	r3, r2
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d006      	beq.n	800f7ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	61fb      	str	r3, [r7, #28]
 800f7b2:	69fb      	ldr	r3, [r7, #28]
 800f7b4:	2b0f      	cmp	r3, #15
 800f7b6:	d9e9      	bls.n	800f78c <prvInitialiseNewTask+0x64>
 800f7b8:	e000      	b.n	800f7bc <prvInitialiseNewTask+0x94>
			{
				break;
 800f7ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7be:	2200      	movs	r2, #0
 800f7c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f7c4:	e003      	b.n	800f7ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d0:	2b37      	cmp	r3, #55	; 0x37
 800f7d2:	d901      	bls.n	800f7d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f7d4:	2337      	movs	r3, #55	; 0x37
 800f7d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ec:	3304      	adds	r3, #4
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fe ff62 	bl	800e6b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f6:	3318      	adds	r3, #24
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f7fe ff5d 	bl	800e6b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f802:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f806:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f80c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f812:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f816:	2200      	movs	r2, #0
 800f818:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81e:	2200      	movs	r2, #0
 800f820:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f826:	3354      	adds	r3, #84	; 0x54
 800f828:	2260      	movs	r2, #96	; 0x60
 800f82a:	2100      	movs	r1, #0
 800f82c:	4618      	mov	r0, r3
 800f82e:	f002 fcb8 	bl	80121a2 <memset>
 800f832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f834:	4a0c      	ldr	r2, [pc, #48]	; (800f868 <prvInitialiseNewTask+0x140>)
 800f836:	659a      	str	r2, [r3, #88]	; 0x58
 800f838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83a:	4a0c      	ldr	r2, [pc, #48]	; (800f86c <prvInitialiseNewTask+0x144>)
 800f83c:	65da      	str	r2, [r3, #92]	; 0x5c
 800f83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f840:	4a0b      	ldr	r2, [pc, #44]	; (800f870 <prvInitialiseNewTask+0x148>)
 800f842:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f844:	683a      	ldr	r2, [r7, #0]
 800f846:	68f9      	ldr	r1, [r7, #12]
 800f848:	69b8      	ldr	r0, [r7, #24]
 800f84a:	f001 fa3f 	bl	8010ccc <pxPortInitialiseStack>
 800f84e:	4602      	mov	r2, r0
 800f850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f852:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f856:	2b00      	cmp	r3, #0
 800f858:	d002      	beq.n	800f860 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f85e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f860:	bf00      	nop
 800f862:	3720      	adds	r7, #32
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}
 800f868:	080176b0 	.word	0x080176b0
 800f86c:	080176d0 	.word	0x080176d0
 800f870:	08017690 	.word	0x08017690

0800f874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f87c:	f001 fb52 	bl	8010f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f880:	4b2d      	ldr	r3, [pc, #180]	; (800f938 <prvAddNewTaskToReadyList+0xc4>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	3301      	adds	r3, #1
 800f886:	4a2c      	ldr	r2, [pc, #176]	; (800f938 <prvAddNewTaskToReadyList+0xc4>)
 800f888:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f88a:	4b2c      	ldr	r3, [pc, #176]	; (800f93c <prvAddNewTaskToReadyList+0xc8>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d109      	bne.n	800f8a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f892:	4a2a      	ldr	r2, [pc, #168]	; (800f93c <prvAddNewTaskToReadyList+0xc8>)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f898:	4b27      	ldr	r3, [pc, #156]	; (800f938 <prvAddNewTaskToReadyList+0xc4>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	2b01      	cmp	r3, #1
 800f89e:	d110      	bne.n	800f8c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f8a0:	f000 fc26 	bl	80100f0 <prvInitialiseTaskLists>
 800f8a4:	e00d      	b.n	800f8c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f8a6:	4b26      	ldr	r3, [pc, #152]	; (800f940 <prvAddNewTaskToReadyList+0xcc>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d109      	bne.n	800f8c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f8ae:	4b23      	ldr	r3, [pc, #140]	; (800f93c <prvAddNewTaskToReadyList+0xc8>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	d802      	bhi.n	800f8c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f8bc:	4a1f      	ldr	r2, [pc, #124]	; (800f93c <prvAddNewTaskToReadyList+0xc8>)
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f8c2:	4b20      	ldr	r3, [pc, #128]	; (800f944 <prvAddNewTaskToReadyList+0xd0>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	4a1e      	ldr	r2, [pc, #120]	; (800f944 <prvAddNewTaskToReadyList+0xd0>)
 800f8ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f8cc:	4b1d      	ldr	r3, [pc, #116]	; (800f944 <prvAddNewTaskToReadyList+0xd0>)
 800f8ce:	681a      	ldr	r2, [r3, #0]
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8d8:	4b1b      	ldr	r3, [pc, #108]	; (800f948 <prvAddNewTaskToReadyList+0xd4>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d903      	bls.n	800f8e8 <prvAddNewTaskToReadyList+0x74>
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8e4:	4a18      	ldr	r2, [pc, #96]	; (800f948 <prvAddNewTaskToReadyList+0xd4>)
 800f8e6:	6013      	str	r3, [r2, #0]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	009b      	lsls	r3, r3, #2
 800f8f0:	4413      	add	r3, r2
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	4a15      	ldr	r2, [pc, #84]	; (800f94c <prvAddNewTaskToReadyList+0xd8>)
 800f8f6:	441a      	add	r2, r3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	3304      	adds	r3, #4
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	4610      	mov	r0, r2
 800f900:	f7fe fee7 	bl	800e6d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f904:	f001 fb3e 	bl	8010f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f908:	4b0d      	ldr	r3, [pc, #52]	; (800f940 <prvAddNewTaskToReadyList+0xcc>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d00e      	beq.n	800f92e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f910:	4b0a      	ldr	r3, [pc, #40]	; (800f93c <prvAddNewTaskToReadyList+0xc8>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d207      	bcs.n	800f92e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f91e:	4b0c      	ldr	r3, [pc, #48]	; (800f950 <prvAddNewTaskToReadyList+0xdc>)
 800f920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f924:	601a      	str	r2, [r3, #0]
 800f926:	f3bf 8f4f 	dsb	sy
 800f92a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f92e:	bf00      	nop
 800f930:	3708      	adds	r7, #8
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	20001144 	.word	0x20001144
 800f93c:	20000c70 	.word	0x20000c70
 800f940:	20001150 	.word	0x20001150
 800f944:	20001160 	.word	0x20001160
 800f948:	2000114c 	.word	0x2000114c
 800f94c:	20000c74 	.word	0x20000c74
 800f950:	e000ed04 	.word	0xe000ed04

0800f954 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f95c:	2300      	movs	r3, #0
 800f95e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d017      	beq.n	800f996 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f966:	4b13      	ldr	r3, [pc, #76]	; (800f9b4 <vTaskDelay+0x60>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00a      	beq.n	800f984 <vTaskDelay+0x30>
	__asm volatile
 800f96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f972:	f383 8811 	msr	BASEPRI, r3
 800f976:	f3bf 8f6f 	isb	sy
 800f97a:	f3bf 8f4f 	dsb	sy
 800f97e:	60bb      	str	r3, [r7, #8]
}
 800f980:	bf00      	nop
 800f982:	e7fe      	b.n	800f982 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f984:	f000 f88a 	bl	800fa9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f988:	2100      	movs	r1, #0
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f000 fdfc 	bl	8010588 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f990:	f000 f892 	bl	800fab8 <xTaskResumeAll>
 800f994:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d107      	bne.n	800f9ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f99c:	4b06      	ldr	r3, [pc, #24]	; (800f9b8 <vTaskDelay+0x64>)
 800f99e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9a2:	601a      	str	r2, [r3, #0]
 800f9a4:	f3bf 8f4f 	dsb	sy
 800f9a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9ac:	bf00      	nop
 800f9ae:	3710      	adds	r7, #16
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	2000116c 	.word	0x2000116c
 800f9b8:	e000ed04 	.word	0xe000ed04

0800f9bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b08a      	sub	sp, #40	; 0x28
 800f9c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f9ca:	463a      	mov	r2, r7
 800f9cc:	1d39      	adds	r1, r7, #4
 800f9ce:	f107 0308 	add.w	r3, r7, #8
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7fe fe1c 	bl	800e610 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f9d8:	6839      	ldr	r1, [r7, #0]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	68ba      	ldr	r2, [r7, #8]
 800f9de:	9202      	str	r2, [sp, #8]
 800f9e0:	9301      	str	r3, [sp, #4]
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	9300      	str	r3, [sp, #0]
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	460a      	mov	r2, r1
 800f9ea:	4924      	ldr	r1, [pc, #144]	; (800fa7c <vTaskStartScheduler+0xc0>)
 800f9ec:	4824      	ldr	r0, [pc, #144]	; (800fa80 <vTaskStartScheduler+0xc4>)
 800f9ee:	f7ff fdf9 	bl	800f5e4 <xTaskCreateStatic>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	4a23      	ldr	r2, [pc, #140]	; (800fa84 <vTaskStartScheduler+0xc8>)
 800f9f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f9f8:	4b22      	ldr	r3, [pc, #136]	; (800fa84 <vTaskStartScheduler+0xc8>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d002      	beq.n	800fa06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fa00:	2301      	movs	r3, #1
 800fa02:	617b      	str	r3, [r7, #20]
 800fa04:	e001      	b.n	800fa0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa06:	2300      	movs	r3, #0
 800fa08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d102      	bne.n	800fa16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fa10:	f000 fe0e 	bl	8010630 <xTimerCreateTimerTask>
 800fa14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	d11b      	bne.n	800fa54 <vTaskStartScheduler+0x98>
	__asm volatile
 800fa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa20:	f383 8811 	msr	BASEPRI, r3
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	613b      	str	r3, [r7, #16]
}
 800fa2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa30:	4b15      	ldr	r3, [pc, #84]	; (800fa88 <vTaskStartScheduler+0xcc>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	3354      	adds	r3, #84	; 0x54
 800fa36:	4a15      	ldr	r2, [pc, #84]	; (800fa8c <vTaskStartScheduler+0xd0>)
 800fa38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa3a:	4b15      	ldr	r3, [pc, #84]	; (800fa90 <vTaskStartScheduler+0xd4>)
 800fa3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa42:	4b14      	ldr	r3, [pc, #80]	; (800fa94 <vTaskStartScheduler+0xd8>)
 800fa44:	2201      	movs	r2, #1
 800fa46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa48:	4b13      	ldr	r3, [pc, #76]	; (800fa98 <vTaskStartScheduler+0xdc>)
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa4e:	f001 f9c7 	bl	8010de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fa52:	e00e      	b.n	800fa72 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa5a:	d10a      	bne.n	800fa72 <vTaskStartScheduler+0xb6>
	__asm volatile
 800fa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa60:	f383 8811 	msr	BASEPRI, r3
 800fa64:	f3bf 8f6f 	isb	sy
 800fa68:	f3bf 8f4f 	dsb	sy
 800fa6c:	60fb      	str	r3, [r7, #12]
}
 800fa6e:	bf00      	nop
 800fa70:	e7fe      	b.n	800fa70 <vTaskStartScheduler+0xb4>
}
 800fa72:	bf00      	nop
 800fa74:	3718      	adds	r7, #24
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	080173c4 	.word	0x080173c4
 800fa80:	080100c1 	.word	0x080100c1
 800fa84:	20001168 	.word	0x20001168
 800fa88:	20000c70 	.word	0x20000c70
 800fa8c:	2000019c 	.word	0x2000019c
 800fa90:	20001164 	.word	0x20001164
 800fa94:	20001150 	.word	0x20001150
 800fa98:	20001148 	.word	0x20001148

0800fa9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800faa0:	4b04      	ldr	r3, [pc, #16]	; (800fab4 <vTaskSuspendAll+0x18>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	3301      	adds	r3, #1
 800faa6:	4a03      	ldr	r2, [pc, #12]	; (800fab4 <vTaskSuspendAll+0x18>)
 800faa8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800faaa:	bf00      	nop
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr
 800fab4:	2000116c 	.word	0x2000116c

0800fab8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b084      	sub	sp, #16
 800fabc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fabe:	2300      	movs	r3, #0
 800fac0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fac2:	2300      	movs	r3, #0
 800fac4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fac6:	4b42      	ldr	r3, [pc, #264]	; (800fbd0 <xTaskResumeAll+0x118>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d10a      	bne.n	800fae4 <xTaskResumeAll+0x2c>
	__asm volatile
 800face:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad2:	f383 8811 	msr	BASEPRI, r3
 800fad6:	f3bf 8f6f 	isb	sy
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	603b      	str	r3, [r7, #0]
}
 800fae0:	bf00      	nop
 800fae2:	e7fe      	b.n	800fae2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fae4:	f001 fa1e 	bl	8010f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fae8:	4b39      	ldr	r3, [pc, #228]	; (800fbd0 <xTaskResumeAll+0x118>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	3b01      	subs	r3, #1
 800faee:	4a38      	ldr	r2, [pc, #224]	; (800fbd0 <xTaskResumeAll+0x118>)
 800faf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800faf2:	4b37      	ldr	r3, [pc, #220]	; (800fbd0 <xTaskResumeAll+0x118>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d162      	bne.n	800fbc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fafa:	4b36      	ldr	r3, [pc, #216]	; (800fbd4 <xTaskResumeAll+0x11c>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d05e      	beq.n	800fbc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb02:	e02f      	b.n	800fb64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb04:	4b34      	ldr	r3, [pc, #208]	; (800fbd8 <xTaskResumeAll+0x120>)
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	3318      	adds	r3, #24
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7fe fe3b 	bl	800e78c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	3304      	adds	r3, #4
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fe fe36 	bl	800e78c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb24:	4b2d      	ldr	r3, [pc, #180]	; (800fbdc <xTaskResumeAll+0x124>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	d903      	bls.n	800fb34 <xTaskResumeAll+0x7c>
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb30:	4a2a      	ldr	r2, [pc, #168]	; (800fbdc <xTaskResumeAll+0x124>)
 800fb32:	6013      	str	r3, [r2, #0]
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb38:	4613      	mov	r3, r2
 800fb3a:	009b      	lsls	r3, r3, #2
 800fb3c:	4413      	add	r3, r2
 800fb3e:	009b      	lsls	r3, r3, #2
 800fb40:	4a27      	ldr	r2, [pc, #156]	; (800fbe0 <xTaskResumeAll+0x128>)
 800fb42:	441a      	add	r2, r3
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	3304      	adds	r3, #4
 800fb48:	4619      	mov	r1, r3
 800fb4a:	4610      	mov	r0, r2
 800fb4c:	f7fe fdc1 	bl	800e6d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb54:	4b23      	ldr	r3, [pc, #140]	; (800fbe4 <xTaskResumeAll+0x12c>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d302      	bcc.n	800fb64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fb5e:	4b22      	ldr	r3, [pc, #136]	; (800fbe8 <xTaskResumeAll+0x130>)
 800fb60:	2201      	movs	r2, #1
 800fb62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb64:	4b1c      	ldr	r3, [pc, #112]	; (800fbd8 <xTaskResumeAll+0x120>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d1cb      	bne.n	800fb04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d001      	beq.n	800fb76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fb72:	f000 fb5f 	bl	8010234 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fb76:	4b1d      	ldr	r3, [pc, #116]	; (800fbec <xTaskResumeAll+0x134>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d010      	beq.n	800fba4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fb82:	f000 f847 	bl	800fc14 <xTaskIncrementTick>
 800fb86:	4603      	mov	r3, r0
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d002      	beq.n	800fb92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fb8c:	4b16      	ldr	r3, [pc, #88]	; (800fbe8 <xTaskResumeAll+0x130>)
 800fb8e:	2201      	movs	r2, #1
 800fb90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	3b01      	subs	r3, #1
 800fb96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d1f1      	bne.n	800fb82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fb9e:	4b13      	ldr	r3, [pc, #76]	; (800fbec <xTaskResumeAll+0x134>)
 800fba0:	2200      	movs	r2, #0
 800fba2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fba4:	4b10      	ldr	r3, [pc, #64]	; (800fbe8 <xTaskResumeAll+0x130>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d009      	beq.n	800fbc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fbac:	2301      	movs	r3, #1
 800fbae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fbb0:	4b0f      	ldr	r3, [pc, #60]	; (800fbf0 <xTaskResumeAll+0x138>)
 800fbb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbb6:	601a      	str	r2, [r3, #0]
 800fbb8:	f3bf 8f4f 	dsb	sy
 800fbbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fbc0:	f001 f9e0 	bl	8010f84 <vPortExitCritical>

	return xAlreadyYielded;
 800fbc4:	68bb      	ldr	r3, [r7, #8]
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3710      	adds	r7, #16
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
 800fbce:	bf00      	nop
 800fbd0:	2000116c 	.word	0x2000116c
 800fbd4:	20001144 	.word	0x20001144
 800fbd8:	20001104 	.word	0x20001104
 800fbdc:	2000114c 	.word	0x2000114c
 800fbe0:	20000c74 	.word	0x20000c74
 800fbe4:	20000c70 	.word	0x20000c70
 800fbe8:	20001158 	.word	0x20001158
 800fbec:	20001154 	.word	0x20001154
 800fbf0:	e000ed04 	.word	0xe000ed04

0800fbf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b083      	sub	sp, #12
 800fbf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fbfa:	4b05      	ldr	r3, [pc, #20]	; (800fc10 <xTaskGetTickCount+0x1c>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc00:	687b      	ldr	r3, [r7, #4]
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	370c      	adds	r7, #12
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr
 800fc0e:	bf00      	nop
 800fc10:	20001148 	.word	0x20001148

0800fc14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b086      	sub	sp, #24
 800fc18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc1e:	4b4f      	ldr	r3, [pc, #316]	; (800fd5c <xTaskIncrementTick+0x148>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	f040 808f 	bne.w	800fd46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc28:	4b4d      	ldr	r3, [pc, #308]	; (800fd60 <xTaskIncrementTick+0x14c>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fc30:	4a4b      	ldr	r2, [pc, #300]	; (800fd60 <xTaskIncrementTick+0x14c>)
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d120      	bne.n	800fc7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fc3c:	4b49      	ldr	r3, [pc, #292]	; (800fd64 <xTaskIncrementTick+0x150>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d00a      	beq.n	800fc5c <xTaskIncrementTick+0x48>
	__asm volatile
 800fc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4a:	f383 8811 	msr	BASEPRI, r3
 800fc4e:	f3bf 8f6f 	isb	sy
 800fc52:	f3bf 8f4f 	dsb	sy
 800fc56:	603b      	str	r3, [r7, #0]
}
 800fc58:	bf00      	nop
 800fc5a:	e7fe      	b.n	800fc5a <xTaskIncrementTick+0x46>
 800fc5c:	4b41      	ldr	r3, [pc, #260]	; (800fd64 <xTaskIncrementTick+0x150>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	60fb      	str	r3, [r7, #12]
 800fc62:	4b41      	ldr	r3, [pc, #260]	; (800fd68 <xTaskIncrementTick+0x154>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	4a3f      	ldr	r2, [pc, #252]	; (800fd64 <xTaskIncrementTick+0x150>)
 800fc68:	6013      	str	r3, [r2, #0]
 800fc6a:	4a3f      	ldr	r2, [pc, #252]	; (800fd68 <xTaskIncrementTick+0x154>)
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	6013      	str	r3, [r2, #0]
 800fc70:	4b3e      	ldr	r3, [pc, #248]	; (800fd6c <xTaskIncrementTick+0x158>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	3301      	adds	r3, #1
 800fc76:	4a3d      	ldr	r2, [pc, #244]	; (800fd6c <xTaskIncrementTick+0x158>)
 800fc78:	6013      	str	r3, [r2, #0]
 800fc7a:	f000 fadb 	bl	8010234 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fc7e:	4b3c      	ldr	r3, [pc, #240]	; (800fd70 <xTaskIncrementTick+0x15c>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	693a      	ldr	r2, [r7, #16]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d349      	bcc.n	800fd1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc88:	4b36      	ldr	r3, [pc, #216]	; (800fd64 <xTaskIncrementTick+0x150>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d104      	bne.n	800fc9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc92:	4b37      	ldr	r3, [pc, #220]	; (800fd70 <xTaskIncrementTick+0x15c>)
 800fc94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc98:	601a      	str	r2, [r3, #0]
					break;
 800fc9a:	e03f      	b.n	800fd1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc9c:	4b31      	ldr	r3, [pc, #196]	; (800fd64 <xTaskIncrementTick+0x150>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	68db      	ldr	r3, [r3, #12]
 800fca2:	68db      	ldr	r3, [r3, #12]
 800fca4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fcac:	693a      	ldr	r2, [r7, #16]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d203      	bcs.n	800fcbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fcb4:	4a2e      	ldr	r2, [pc, #184]	; (800fd70 <xTaskIncrementTick+0x15c>)
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fcba:	e02f      	b.n	800fd1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	3304      	adds	r3, #4
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7fe fd63 	bl	800e78c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d004      	beq.n	800fcd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	3318      	adds	r3, #24
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7fe fd5a 	bl	800e78c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcdc:	4b25      	ldr	r3, [pc, #148]	; (800fd74 <xTaskIncrementTick+0x160>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d903      	bls.n	800fcec <xTaskIncrementTick+0xd8>
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fce8:	4a22      	ldr	r2, [pc, #136]	; (800fd74 <xTaskIncrementTick+0x160>)
 800fcea:	6013      	str	r3, [r2, #0]
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcf0:	4613      	mov	r3, r2
 800fcf2:	009b      	lsls	r3, r3, #2
 800fcf4:	4413      	add	r3, r2
 800fcf6:	009b      	lsls	r3, r3, #2
 800fcf8:	4a1f      	ldr	r2, [pc, #124]	; (800fd78 <xTaskIncrementTick+0x164>)
 800fcfa:	441a      	add	r2, r3
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	3304      	adds	r3, #4
 800fd00:	4619      	mov	r1, r3
 800fd02:	4610      	mov	r0, r2
 800fd04:	f7fe fce5 	bl	800e6d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd0c:	4b1b      	ldr	r3, [pc, #108]	; (800fd7c <xTaskIncrementTick+0x168>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d3b8      	bcc.n	800fc88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fd16:	2301      	movs	r3, #1
 800fd18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd1a:	e7b5      	b.n	800fc88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd1c:	4b17      	ldr	r3, [pc, #92]	; (800fd7c <xTaskIncrementTick+0x168>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd22:	4915      	ldr	r1, [pc, #84]	; (800fd78 <xTaskIncrementTick+0x164>)
 800fd24:	4613      	mov	r3, r2
 800fd26:	009b      	lsls	r3, r3, #2
 800fd28:	4413      	add	r3, r2
 800fd2a:	009b      	lsls	r3, r3, #2
 800fd2c:	440b      	add	r3, r1
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	d901      	bls.n	800fd38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fd34:	2301      	movs	r3, #1
 800fd36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fd38:	4b11      	ldr	r3, [pc, #68]	; (800fd80 <xTaskIncrementTick+0x16c>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d007      	beq.n	800fd50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fd40:	2301      	movs	r3, #1
 800fd42:	617b      	str	r3, [r7, #20]
 800fd44:	e004      	b.n	800fd50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fd46:	4b0f      	ldr	r3, [pc, #60]	; (800fd84 <xTaskIncrementTick+0x170>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	4a0d      	ldr	r2, [pc, #52]	; (800fd84 <xTaskIncrementTick+0x170>)
 800fd4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fd50:	697b      	ldr	r3, [r7, #20]
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3718      	adds	r7, #24
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	2000116c 	.word	0x2000116c
 800fd60:	20001148 	.word	0x20001148
 800fd64:	200010fc 	.word	0x200010fc
 800fd68:	20001100 	.word	0x20001100
 800fd6c:	2000115c 	.word	0x2000115c
 800fd70:	20001164 	.word	0x20001164
 800fd74:	2000114c 	.word	0x2000114c
 800fd78:	20000c74 	.word	0x20000c74
 800fd7c:	20000c70 	.word	0x20000c70
 800fd80:	20001158 	.word	0x20001158
 800fd84:	20001154 	.word	0x20001154

0800fd88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b085      	sub	sp, #20
 800fd8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fd8e:	4b2a      	ldr	r3, [pc, #168]	; (800fe38 <vTaskSwitchContext+0xb0>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d003      	beq.n	800fd9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fd96:	4b29      	ldr	r3, [pc, #164]	; (800fe3c <vTaskSwitchContext+0xb4>)
 800fd98:	2201      	movs	r2, #1
 800fd9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fd9c:	e046      	b.n	800fe2c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800fd9e:	4b27      	ldr	r3, [pc, #156]	; (800fe3c <vTaskSwitchContext+0xb4>)
 800fda0:	2200      	movs	r2, #0
 800fda2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fda4:	4b26      	ldr	r3, [pc, #152]	; (800fe40 <vTaskSwitchContext+0xb8>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	60fb      	str	r3, [r7, #12]
 800fdaa:	e010      	b.n	800fdce <vTaskSwitchContext+0x46>
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d10a      	bne.n	800fdc8 <vTaskSwitchContext+0x40>
	__asm volatile
 800fdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb6:	f383 8811 	msr	BASEPRI, r3
 800fdba:	f3bf 8f6f 	isb	sy
 800fdbe:	f3bf 8f4f 	dsb	sy
 800fdc2:	607b      	str	r3, [r7, #4]
}
 800fdc4:	bf00      	nop
 800fdc6:	e7fe      	b.n	800fdc6 <vTaskSwitchContext+0x3e>
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	3b01      	subs	r3, #1
 800fdcc:	60fb      	str	r3, [r7, #12]
 800fdce:	491d      	ldr	r1, [pc, #116]	; (800fe44 <vTaskSwitchContext+0xbc>)
 800fdd0:	68fa      	ldr	r2, [r7, #12]
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	4413      	add	r3, r2
 800fdd8:	009b      	lsls	r3, r3, #2
 800fdda:	440b      	add	r3, r1
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d0e4      	beq.n	800fdac <vTaskSwitchContext+0x24>
 800fde2:	68fa      	ldr	r2, [r7, #12]
 800fde4:	4613      	mov	r3, r2
 800fde6:	009b      	lsls	r3, r3, #2
 800fde8:	4413      	add	r3, r2
 800fdea:	009b      	lsls	r3, r3, #2
 800fdec:	4a15      	ldr	r2, [pc, #84]	; (800fe44 <vTaskSwitchContext+0xbc>)
 800fdee:	4413      	add	r3, r2
 800fdf0:	60bb      	str	r3, [r7, #8]
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	685a      	ldr	r2, [r3, #4]
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	605a      	str	r2, [r3, #4]
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	685a      	ldr	r2, [r3, #4]
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	3308      	adds	r3, #8
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d104      	bne.n	800fe12 <vTaskSwitchContext+0x8a>
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	685a      	ldr	r2, [r3, #4]
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	605a      	str	r2, [r3, #4]
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	685b      	ldr	r3, [r3, #4]
 800fe16:	68db      	ldr	r3, [r3, #12]
 800fe18:	4a0b      	ldr	r2, [pc, #44]	; (800fe48 <vTaskSwitchContext+0xc0>)
 800fe1a:	6013      	str	r3, [r2, #0]
 800fe1c:	4a08      	ldr	r2, [pc, #32]	; (800fe40 <vTaskSwitchContext+0xb8>)
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fe22:	4b09      	ldr	r3, [pc, #36]	; (800fe48 <vTaskSwitchContext+0xc0>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	3354      	adds	r3, #84	; 0x54
 800fe28:	4a08      	ldr	r2, [pc, #32]	; (800fe4c <vTaskSwitchContext+0xc4>)
 800fe2a:	6013      	str	r3, [r2, #0]
}
 800fe2c:	bf00      	nop
 800fe2e:	3714      	adds	r7, #20
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr
 800fe38:	2000116c 	.word	0x2000116c
 800fe3c:	20001158 	.word	0x20001158
 800fe40:	2000114c 	.word	0x2000114c
 800fe44:	20000c74 	.word	0x20000c74
 800fe48:	20000c70 	.word	0x20000c70
 800fe4c:	2000019c 	.word	0x2000019c

0800fe50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b084      	sub	sp, #16
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d10a      	bne.n	800fe76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fe60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe64:	f383 8811 	msr	BASEPRI, r3
 800fe68:	f3bf 8f6f 	isb	sy
 800fe6c:	f3bf 8f4f 	dsb	sy
 800fe70:	60fb      	str	r3, [r7, #12]
}
 800fe72:	bf00      	nop
 800fe74:	e7fe      	b.n	800fe74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe76:	4b07      	ldr	r3, [pc, #28]	; (800fe94 <vTaskPlaceOnEventList+0x44>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	3318      	adds	r3, #24
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f7fe fc4b 	bl	800e71a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe84:	2101      	movs	r1, #1
 800fe86:	6838      	ldr	r0, [r7, #0]
 800fe88:	f000 fb7e 	bl	8010588 <prvAddCurrentTaskToDelayedList>
}
 800fe8c:	bf00      	nop
 800fe8e:	3710      	adds	r7, #16
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	20000c70 	.word	0x20000c70

0800fe98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b086      	sub	sp, #24
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d10a      	bne.n	800fec0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800feaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feae:	f383 8811 	msr	BASEPRI, r3
 800feb2:	f3bf 8f6f 	isb	sy
 800feb6:	f3bf 8f4f 	dsb	sy
 800feba:	617b      	str	r3, [r7, #20]
}
 800febc:	bf00      	nop
 800febe:	e7fe      	b.n	800febe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fec0:	4b0a      	ldr	r3, [pc, #40]	; (800feec <vTaskPlaceOnEventListRestricted+0x54>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	3318      	adds	r3, #24
 800fec6:	4619      	mov	r1, r3
 800fec8:	68f8      	ldr	r0, [r7, #12]
 800feca:	f7fe fc02 	bl	800e6d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d002      	beq.n	800feda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fed8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800feda:	6879      	ldr	r1, [r7, #4]
 800fedc:	68b8      	ldr	r0, [r7, #8]
 800fede:	f000 fb53 	bl	8010588 <prvAddCurrentTaskToDelayedList>
	}
 800fee2:	bf00      	nop
 800fee4:	3718      	adds	r7, #24
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	20000c70 	.word	0x20000c70

0800fef0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b086      	sub	sp, #24
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	68db      	ldr	r3, [r3, #12]
 800fefe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d10a      	bne.n	800ff1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ff06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0a:	f383 8811 	msr	BASEPRI, r3
 800ff0e:	f3bf 8f6f 	isb	sy
 800ff12:	f3bf 8f4f 	dsb	sy
 800ff16:	60fb      	str	r3, [r7, #12]
}
 800ff18:	bf00      	nop
 800ff1a:	e7fe      	b.n	800ff1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	3318      	adds	r3, #24
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7fe fc33 	bl	800e78c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff26:	4b1e      	ldr	r3, [pc, #120]	; (800ffa0 <xTaskRemoveFromEventList+0xb0>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d11d      	bne.n	800ff6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	3304      	adds	r3, #4
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7fe fc2a 	bl	800e78c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff3c:	4b19      	ldr	r3, [pc, #100]	; (800ffa4 <xTaskRemoveFromEventList+0xb4>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d903      	bls.n	800ff4c <xTaskRemoveFromEventList+0x5c>
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff48:	4a16      	ldr	r2, [pc, #88]	; (800ffa4 <xTaskRemoveFromEventList+0xb4>)
 800ff4a:	6013      	str	r3, [r2, #0]
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff50:	4613      	mov	r3, r2
 800ff52:	009b      	lsls	r3, r3, #2
 800ff54:	4413      	add	r3, r2
 800ff56:	009b      	lsls	r3, r3, #2
 800ff58:	4a13      	ldr	r2, [pc, #76]	; (800ffa8 <xTaskRemoveFromEventList+0xb8>)
 800ff5a:	441a      	add	r2, r3
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	3304      	adds	r3, #4
 800ff60:	4619      	mov	r1, r3
 800ff62:	4610      	mov	r0, r2
 800ff64:	f7fe fbb5 	bl	800e6d2 <vListInsertEnd>
 800ff68:	e005      	b.n	800ff76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	3318      	adds	r3, #24
 800ff6e:	4619      	mov	r1, r3
 800ff70:	480e      	ldr	r0, [pc, #56]	; (800ffac <xTaskRemoveFromEventList+0xbc>)
 800ff72:	f7fe fbae 	bl	800e6d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff7a:	4b0d      	ldr	r3, [pc, #52]	; (800ffb0 <xTaskRemoveFromEventList+0xc0>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d905      	bls.n	800ff90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ff84:	2301      	movs	r3, #1
 800ff86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ff88:	4b0a      	ldr	r3, [pc, #40]	; (800ffb4 <xTaskRemoveFromEventList+0xc4>)
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	601a      	str	r2, [r3, #0]
 800ff8e:	e001      	b.n	800ff94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ff90:	2300      	movs	r3, #0
 800ff92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ff94:	697b      	ldr	r3, [r7, #20]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3718      	adds	r7, #24
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	2000116c 	.word	0x2000116c
 800ffa4:	2000114c 	.word	0x2000114c
 800ffa8:	20000c74 	.word	0x20000c74
 800ffac:	20001104 	.word	0x20001104
 800ffb0:	20000c70 	.word	0x20000c70
 800ffb4:	20001158 	.word	0x20001158

0800ffb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ffb8:	b480      	push	{r7}
 800ffba:	b083      	sub	sp, #12
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ffc0:	4b06      	ldr	r3, [pc, #24]	; (800ffdc <vTaskInternalSetTimeOutState+0x24>)
 800ffc2:	681a      	ldr	r2, [r3, #0]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ffc8:	4b05      	ldr	r3, [pc, #20]	; (800ffe0 <vTaskInternalSetTimeOutState+0x28>)
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	605a      	str	r2, [r3, #4]
}
 800ffd0:	bf00      	nop
 800ffd2:	370c      	adds	r7, #12
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr
 800ffdc:	2000115c 	.word	0x2000115c
 800ffe0:	20001148 	.word	0x20001148

0800ffe4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b088      	sub	sp, #32
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d10a      	bne.n	801000a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff8:	f383 8811 	msr	BASEPRI, r3
 800fffc:	f3bf 8f6f 	isb	sy
 8010000:	f3bf 8f4f 	dsb	sy
 8010004:	613b      	str	r3, [r7, #16]
}
 8010006:	bf00      	nop
 8010008:	e7fe      	b.n	8010008 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d10a      	bne.n	8010026 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010014:	f383 8811 	msr	BASEPRI, r3
 8010018:	f3bf 8f6f 	isb	sy
 801001c:	f3bf 8f4f 	dsb	sy
 8010020:	60fb      	str	r3, [r7, #12]
}
 8010022:	bf00      	nop
 8010024:	e7fe      	b.n	8010024 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010026:	f000 ff7d 	bl	8010f24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801002a:	4b1d      	ldr	r3, [pc, #116]	; (80100a0 <xTaskCheckForTimeOut+0xbc>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	69ba      	ldr	r2, [r7, #24]
 8010036:	1ad3      	subs	r3, r2, r3
 8010038:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010042:	d102      	bne.n	801004a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010044:	2300      	movs	r3, #0
 8010046:	61fb      	str	r3, [r7, #28]
 8010048:	e023      	b.n	8010092 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681a      	ldr	r2, [r3, #0]
 801004e:	4b15      	ldr	r3, [pc, #84]	; (80100a4 <xTaskCheckForTimeOut+0xc0>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	429a      	cmp	r2, r3
 8010054:	d007      	beq.n	8010066 <xTaskCheckForTimeOut+0x82>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	69ba      	ldr	r2, [r7, #24]
 801005c:	429a      	cmp	r2, r3
 801005e:	d302      	bcc.n	8010066 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010060:	2301      	movs	r3, #1
 8010062:	61fb      	str	r3, [r7, #28]
 8010064:	e015      	b.n	8010092 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	697a      	ldr	r2, [r7, #20]
 801006c:	429a      	cmp	r2, r3
 801006e:	d20b      	bcs.n	8010088 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	697b      	ldr	r3, [r7, #20]
 8010076:	1ad2      	subs	r2, r2, r3
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f7ff ff9b 	bl	800ffb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010082:	2300      	movs	r3, #0
 8010084:	61fb      	str	r3, [r7, #28]
 8010086:	e004      	b.n	8010092 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	2200      	movs	r2, #0
 801008c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801008e:	2301      	movs	r3, #1
 8010090:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010092:	f000 ff77 	bl	8010f84 <vPortExitCritical>

	return xReturn;
 8010096:	69fb      	ldr	r3, [r7, #28]
}
 8010098:	4618      	mov	r0, r3
 801009a:	3720      	adds	r7, #32
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}
 80100a0:	20001148 	.word	0x20001148
 80100a4:	2000115c 	.word	0x2000115c

080100a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80100a8:	b480      	push	{r7}
 80100aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80100ac:	4b03      	ldr	r3, [pc, #12]	; (80100bc <vTaskMissedYield+0x14>)
 80100ae:	2201      	movs	r2, #1
 80100b0:	601a      	str	r2, [r3, #0]
}
 80100b2:	bf00      	nop
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr
 80100bc:	20001158 	.word	0x20001158

080100c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b082      	sub	sp, #8
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80100c8:	f000 f852 	bl	8010170 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80100cc:	4b06      	ldr	r3, [pc, #24]	; (80100e8 <prvIdleTask+0x28>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	2b01      	cmp	r3, #1
 80100d2:	d9f9      	bls.n	80100c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80100d4:	4b05      	ldr	r3, [pc, #20]	; (80100ec <prvIdleTask+0x2c>)
 80100d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100da:	601a      	str	r2, [r3, #0]
 80100dc:	f3bf 8f4f 	dsb	sy
 80100e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80100e4:	e7f0      	b.n	80100c8 <prvIdleTask+0x8>
 80100e6:	bf00      	nop
 80100e8:	20000c74 	.word	0x20000c74
 80100ec:	e000ed04 	.word	0xe000ed04

080100f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80100f6:	2300      	movs	r3, #0
 80100f8:	607b      	str	r3, [r7, #4]
 80100fa:	e00c      	b.n	8010116 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80100fc:	687a      	ldr	r2, [r7, #4]
 80100fe:	4613      	mov	r3, r2
 8010100:	009b      	lsls	r3, r3, #2
 8010102:	4413      	add	r3, r2
 8010104:	009b      	lsls	r3, r3, #2
 8010106:	4a12      	ldr	r2, [pc, #72]	; (8010150 <prvInitialiseTaskLists+0x60>)
 8010108:	4413      	add	r3, r2
 801010a:	4618      	mov	r0, r3
 801010c:	f7fe fab4 	bl	800e678 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	3301      	adds	r3, #1
 8010114:	607b      	str	r3, [r7, #4]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2b37      	cmp	r3, #55	; 0x37
 801011a:	d9ef      	bls.n	80100fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801011c:	480d      	ldr	r0, [pc, #52]	; (8010154 <prvInitialiseTaskLists+0x64>)
 801011e:	f7fe faab 	bl	800e678 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010122:	480d      	ldr	r0, [pc, #52]	; (8010158 <prvInitialiseTaskLists+0x68>)
 8010124:	f7fe faa8 	bl	800e678 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010128:	480c      	ldr	r0, [pc, #48]	; (801015c <prvInitialiseTaskLists+0x6c>)
 801012a:	f7fe faa5 	bl	800e678 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801012e:	480c      	ldr	r0, [pc, #48]	; (8010160 <prvInitialiseTaskLists+0x70>)
 8010130:	f7fe faa2 	bl	800e678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010134:	480b      	ldr	r0, [pc, #44]	; (8010164 <prvInitialiseTaskLists+0x74>)
 8010136:	f7fe fa9f 	bl	800e678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801013a:	4b0b      	ldr	r3, [pc, #44]	; (8010168 <prvInitialiseTaskLists+0x78>)
 801013c:	4a05      	ldr	r2, [pc, #20]	; (8010154 <prvInitialiseTaskLists+0x64>)
 801013e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010140:	4b0a      	ldr	r3, [pc, #40]	; (801016c <prvInitialiseTaskLists+0x7c>)
 8010142:	4a05      	ldr	r2, [pc, #20]	; (8010158 <prvInitialiseTaskLists+0x68>)
 8010144:	601a      	str	r2, [r3, #0]
}
 8010146:	bf00      	nop
 8010148:	3708      	adds	r7, #8
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}
 801014e:	bf00      	nop
 8010150:	20000c74 	.word	0x20000c74
 8010154:	200010d4 	.word	0x200010d4
 8010158:	200010e8 	.word	0x200010e8
 801015c:	20001104 	.word	0x20001104
 8010160:	20001118 	.word	0x20001118
 8010164:	20001130 	.word	0x20001130
 8010168:	200010fc 	.word	0x200010fc
 801016c:	20001100 	.word	0x20001100

08010170 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010176:	e019      	b.n	80101ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010178:	f000 fed4 	bl	8010f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801017c:	4b10      	ldr	r3, [pc, #64]	; (80101c0 <prvCheckTasksWaitingTermination+0x50>)
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	68db      	ldr	r3, [r3, #12]
 8010182:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	3304      	adds	r3, #4
 8010188:	4618      	mov	r0, r3
 801018a:	f7fe faff 	bl	800e78c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801018e:	4b0d      	ldr	r3, [pc, #52]	; (80101c4 <prvCheckTasksWaitingTermination+0x54>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	3b01      	subs	r3, #1
 8010194:	4a0b      	ldr	r2, [pc, #44]	; (80101c4 <prvCheckTasksWaitingTermination+0x54>)
 8010196:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010198:	4b0b      	ldr	r3, [pc, #44]	; (80101c8 <prvCheckTasksWaitingTermination+0x58>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	3b01      	subs	r3, #1
 801019e:	4a0a      	ldr	r2, [pc, #40]	; (80101c8 <prvCheckTasksWaitingTermination+0x58>)
 80101a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80101a2:	f000 feef 	bl	8010f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f000 f810 	bl	80101cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101ac:	4b06      	ldr	r3, [pc, #24]	; (80101c8 <prvCheckTasksWaitingTermination+0x58>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d1e1      	bne.n	8010178 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80101b4:	bf00      	nop
 80101b6:	bf00      	nop
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	20001118 	.word	0x20001118
 80101c4:	20001144 	.word	0x20001144
 80101c8:	2000112c 	.word	0x2000112c

080101cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b084      	sub	sp, #16
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	3354      	adds	r3, #84	; 0x54
 80101d8:	4618      	mov	r0, r3
 80101da:	f002 fecd 	bl	8012f78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d108      	bne.n	80101fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ec:	4618      	mov	r0, r3
 80101ee:	f001 f887 	bl	8011300 <vPortFree>
				vPortFree( pxTCB );
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f001 f884 	bl	8011300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80101f8:	e018      	b.n	801022c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010200:	2b01      	cmp	r3, #1
 8010202:	d103      	bne.n	801020c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f001 f87b 	bl	8011300 <vPortFree>
	}
 801020a:	e00f      	b.n	801022c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010212:	2b02      	cmp	r3, #2
 8010214:	d00a      	beq.n	801022c <prvDeleteTCB+0x60>
	__asm volatile
 8010216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801021a:	f383 8811 	msr	BASEPRI, r3
 801021e:	f3bf 8f6f 	isb	sy
 8010222:	f3bf 8f4f 	dsb	sy
 8010226:	60fb      	str	r3, [r7, #12]
}
 8010228:	bf00      	nop
 801022a:	e7fe      	b.n	801022a <prvDeleteTCB+0x5e>
	}
 801022c:	bf00      	nop
 801022e:	3710      	adds	r7, #16
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010234:	b480      	push	{r7}
 8010236:	b083      	sub	sp, #12
 8010238:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801023a:	4b0c      	ldr	r3, [pc, #48]	; (801026c <prvResetNextTaskUnblockTime+0x38>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d104      	bne.n	801024e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010244:	4b0a      	ldr	r3, [pc, #40]	; (8010270 <prvResetNextTaskUnblockTime+0x3c>)
 8010246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801024a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801024c:	e008      	b.n	8010260 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801024e:	4b07      	ldr	r3, [pc, #28]	; (801026c <prvResetNextTaskUnblockTime+0x38>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	68db      	ldr	r3, [r3, #12]
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	4a04      	ldr	r2, [pc, #16]	; (8010270 <prvResetNextTaskUnblockTime+0x3c>)
 801025e:	6013      	str	r3, [r2, #0]
}
 8010260:	bf00      	nop
 8010262:	370c      	adds	r7, #12
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr
 801026c:	200010fc 	.word	0x200010fc
 8010270:	20001164 	.word	0x20001164

08010274 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010274:	b480      	push	{r7}
 8010276:	b083      	sub	sp, #12
 8010278:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801027a:	4b0b      	ldr	r3, [pc, #44]	; (80102a8 <xTaskGetSchedulerState+0x34>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d102      	bne.n	8010288 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010282:	2301      	movs	r3, #1
 8010284:	607b      	str	r3, [r7, #4]
 8010286:	e008      	b.n	801029a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010288:	4b08      	ldr	r3, [pc, #32]	; (80102ac <xTaskGetSchedulerState+0x38>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d102      	bne.n	8010296 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010290:	2302      	movs	r3, #2
 8010292:	607b      	str	r3, [r7, #4]
 8010294:	e001      	b.n	801029a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010296:	2300      	movs	r3, #0
 8010298:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801029a:	687b      	ldr	r3, [r7, #4]
	}
 801029c:	4618      	mov	r0, r3
 801029e:	370c      	adds	r7, #12
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr
 80102a8:	20001150 	.word	0x20001150
 80102ac:	2000116c 	.word	0x2000116c

080102b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80102bc:	2300      	movs	r3, #0
 80102be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d051      	beq.n	801036a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102ca:	4b2a      	ldr	r3, [pc, #168]	; (8010374 <xTaskPriorityInherit+0xc4>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d241      	bcs.n	8010358 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	699b      	ldr	r3, [r3, #24]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	db06      	blt.n	80102ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102dc:	4b25      	ldr	r3, [pc, #148]	; (8010374 <xTaskPriorityInherit+0xc4>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	6959      	ldr	r1, [r3, #20]
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102f2:	4613      	mov	r3, r2
 80102f4:	009b      	lsls	r3, r3, #2
 80102f6:	4413      	add	r3, r2
 80102f8:	009b      	lsls	r3, r3, #2
 80102fa:	4a1f      	ldr	r2, [pc, #124]	; (8010378 <xTaskPriorityInherit+0xc8>)
 80102fc:	4413      	add	r3, r2
 80102fe:	4299      	cmp	r1, r3
 8010300:	d122      	bne.n	8010348 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	3304      	adds	r3, #4
 8010306:	4618      	mov	r0, r3
 8010308:	f7fe fa40 	bl	800e78c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801030c:	4b19      	ldr	r3, [pc, #100]	; (8010374 <xTaskPriorityInherit+0xc4>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801031a:	4b18      	ldr	r3, [pc, #96]	; (801037c <xTaskPriorityInherit+0xcc>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	429a      	cmp	r2, r3
 8010320:	d903      	bls.n	801032a <xTaskPriorityInherit+0x7a>
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010326:	4a15      	ldr	r2, [pc, #84]	; (801037c <xTaskPriorityInherit+0xcc>)
 8010328:	6013      	str	r3, [r2, #0]
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801032e:	4613      	mov	r3, r2
 8010330:	009b      	lsls	r3, r3, #2
 8010332:	4413      	add	r3, r2
 8010334:	009b      	lsls	r3, r3, #2
 8010336:	4a10      	ldr	r2, [pc, #64]	; (8010378 <xTaskPriorityInherit+0xc8>)
 8010338:	441a      	add	r2, r3
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	3304      	adds	r3, #4
 801033e:	4619      	mov	r1, r3
 8010340:	4610      	mov	r0, r2
 8010342:	f7fe f9c6 	bl	800e6d2 <vListInsertEnd>
 8010346:	e004      	b.n	8010352 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010348:	4b0a      	ldr	r3, [pc, #40]	; (8010374 <xTaskPriorityInherit+0xc4>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010352:	2301      	movs	r3, #1
 8010354:	60fb      	str	r3, [r7, #12]
 8010356:	e008      	b.n	801036a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801035c:	4b05      	ldr	r3, [pc, #20]	; (8010374 <xTaskPriorityInherit+0xc4>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010362:	429a      	cmp	r2, r3
 8010364:	d201      	bcs.n	801036a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010366:	2301      	movs	r3, #1
 8010368:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801036a:	68fb      	ldr	r3, [r7, #12]
	}
 801036c:	4618      	mov	r0, r3
 801036e:	3710      	adds	r7, #16
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}
 8010374:	20000c70 	.word	0x20000c70
 8010378:	20000c74 	.word	0x20000c74
 801037c:	2000114c 	.word	0x2000114c

08010380 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010380:	b580      	push	{r7, lr}
 8010382:	b086      	sub	sp, #24
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801038c:	2300      	movs	r3, #0
 801038e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d056      	beq.n	8010444 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010396:	4b2e      	ldr	r3, [pc, #184]	; (8010450 <xTaskPriorityDisinherit+0xd0>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	693a      	ldr	r2, [r7, #16]
 801039c:	429a      	cmp	r2, r3
 801039e:	d00a      	beq.n	80103b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80103a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a4:	f383 8811 	msr	BASEPRI, r3
 80103a8:	f3bf 8f6f 	isb	sy
 80103ac:	f3bf 8f4f 	dsb	sy
 80103b0:	60fb      	str	r3, [r7, #12]
}
 80103b2:	bf00      	nop
 80103b4:	e7fe      	b.n	80103b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d10a      	bne.n	80103d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80103be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c2:	f383 8811 	msr	BASEPRI, r3
 80103c6:	f3bf 8f6f 	isb	sy
 80103ca:	f3bf 8f4f 	dsb	sy
 80103ce:	60bb      	str	r3, [r7, #8]
}
 80103d0:	bf00      	nop
 80103d2:	e7fe      	b.n	80103d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103d8:	1e5a      	subs	r2, r3, #1
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103e2:	693b      	ldr	r3, [r7, #16]
 80103e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d02c      	beq.n	8010444 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d128      	bne.n	8010444 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	3304      	adds	r3, #4
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fe f9c8 	bl	800e78c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010408:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010414:	4b0f      	ldr	r3, [pc, #60]	; (8010454 <xTaskPriorityDisinherit+0xd4>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	429a      	cmp	r2, r3
 801041a:	d903      	bls.n	8010424 <xTaskPriorityDisinherit+0xa4>
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010420:	4a0c      	ldr	r2, [pc, #48]	; (8010454 <xTaskPriorityDisinherit+0xd4>)
 8010422:	6013      	str	r3, [r2, #0]
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010428:	4613      	mov	r3, r2
 801042a:	009b      	lsls	r3, r3, #2
 801042c:	4413      	add	r3, r2
 801042e:	009b      	lsls	r3, r3, #2
 8010430:	4a09      	ldr	r2, [pc, #36]	; (8010458 <xTaskPriorityDisinherit+0xd8>)
 8010432:	441a      	add	r2, r3
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	3304      	adds	r3, #4
 8010438:	4619      	mov	r1, r3
 801043a:	4610      	mov	r0, r2
 801043c:	f7fe f949 	bl	800e6d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010440:	2301      	movs	r3, #1
 8010442:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010444:	697b      	ldr	r3, [r7, #20]
	}
 8010446:	4618      	mov	r0, r3
 8010448:	3718      	adds	r7, #24
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	bf00      	nop
 8010450:	20000c70 	.word	0x20000c70
 8010454:	2000114c 	.word	0x2000114c
 8010458:	20000c74 	.word	0x20000c74

0801045c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801045c:	b580      	push	{r7, lr}
 801045e:	b088      	sub	sp, #32
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801046a:	2301      	movs	r3, #1
 801046c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d06a      	beq.n	801054a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010474:	69bb      	ldr	r3, [r7, #24]
 8010476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010478:	2b00      	cmp	r3, #0
 801047a:	d10a      	bne.n	8010492 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801047c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010480:	f383 8811 	msr	BASEPRI, r3
 8010484:	f3bf 8f6f 	isb	sy
 8010488:	f3bf 8f4f 	dsb	sy
 801048c:	60fb      	str	r3, [r7, #12]
}
 801048e:	bf00      	nop
 8010490:	e7fe      	b.n	8010490 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010492:	69bb      	ldr	r3, [r7, #24]
 8010494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010496:	683a      	ldr	r2, [r7, #0]
 8010498:	429a      	cmp	r2, r3
 801049a:	d902      	bls.n	80104a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	61fb      	str	r3, [r7, #28]
 80104a0:	e002      	b.n	80104a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80104a2:	69bb      	ldr	r3, [r7, #24]
 80104a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80104a8:	69bb      	ldr	r3, [r7, #24]
 80104aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ac:	69fa      	ldr	r2, [r7, #28]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d04b      	beq.n	801054a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80104b2:	69bb      	ldr	r3, [r7, #24]
 80104b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104b6:	697a      	ldr	r2, [r7, #20]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d146      	bne.n	801054a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80104bc:	4b25      	ldr	r3, [pc, #148]	; (8010554 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	69ba      	ldr	r2, [r7, #24]
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d10a      	bne.n	80104dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80104c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ca:	f383 8811 	msr	BASEPRI, r3
 80104ce:	f3bf 8f6f 	isb	sy
 80104d2:	f3bf 8f4f 	dsb	sy
 80104d6:	60bb      	str	r3, [r7, #8]
}
 80104d8:	bf00      	nop
 80104da:	e7fe      	b.n	80104da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80104dc:	69bb      	ldr	r3, [r7, #24]
 80104de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80104e2:	69bb      	ldr	r3, [r7, #24]
 80104e4:	69fa      	ldr	r2, [r7, #28]
 80104e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80104e8:	69bb      	ldr	r3, [r7, #24]
 80104ea:	699b      	ldr	r3, [r3, #24]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	db04      	blt.n	80104fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104f0:	69fb      	ldr	r3, [r7, #28]
 80104f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	6959      	ldr	r1, [r3, #20]
 80104fe:	693a      	ldr	r2, [r7, #16]
 8010500:	4613      	mov	r3, r2
 8010502:	009b      	lsls	r3, r3, #2
 8010504:	4413      	add	r3, r2
 8010506:	009b      	lsls	r3, r3, #2
 8010508:	4a13      	ldr	r2, [pc, #76]	; (8010558 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801050a:	4413      	add	r3, r2
 801050c:	4299      	cmp	r1, r3
 801050e:	d11c      	bne.n	801054a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010510:	69bb      	ldr	r3, [r7, #24]
 8010512:	3304      	adds	r3, #4
 8010514:	4618      	mov	r0, r3
 8010516:	f7fe f939 	bl	800e78c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801051a:	69bb      	ldr	r3, [r7, #24]
 801051c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801051e:	4b0f      	ldr	r3, [pc, #60]	; (801055c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	429a      	cmp	r2, r3
 8010524:	d903      	bls.n	801052e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8010526:	69bb      	ldr	r3, [r7, #24]
 8010528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801052a:	4a0c      	ldr	r2, [pc, #48]	; (801055c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801052c:	6013      	str	r3, [r2, #0]
 801052e:	69bb      	ldr	r3, [r7, #24]
 8010530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010532:	4613      	mov	r3, r2
 8010534:	009b      	lsls	r3, r3, #2
 8010536:	4413      	add	r3, r2
 8010538:	009b      	lsls	r3, r3, #2
 801053a:	4a07      	ldr	r2, [pc, #28]	; (8010558 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801053c:	441a      	add	r2, r3
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	3304      	adds	r3, #4
 8010542:	4619      	mov	r1, r3
 8010544:	4610      	mov	r0, r2
 8010546:	f7fe f8c4 	bl	800e6d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801054a:	bf00      	nop
 801054c:	3720      	adds	r7, #32
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	20000c70 	.word	0x20000c70
 8010558:	20000c74 	.word	0x20000c74
 801055c:	2000114c 	.word	0x2000114c

08010560 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010560:	b480      	push	{r7}
 8010562:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010564:	4b07      	ldr	r3, [pc, #28]	; (8010584 <pvTaskIncrementMutexHeldCount+0x24>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d004      	beq.n	8010576 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801056c:	4b05      	ldr	r3, [pc, #20]	; (8010584 <pvTaskIncrementMutexHeldCount+0x24>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010572:	3201      	adds	r2, #1
 8010574:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010576:	4b03      	ldr	r3, [pc, #12]	; (8010584 <pvTaskIncrementMutexHeldCount+0x24>)
 8010578:	681b      	ldr	r3, [r3, #0]
	}
 801057a:	4618      	mov	r0, r3
 801057c:	46bd      	mov	sp, r7
 801057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010582:	4770      	bx	lr
 8010584:	20000c70 	.word	0x20000c70

08010588 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b084      	sub	sp, #16
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010592:	4b21      	ldr	r3, [pc, #132]	; (8010618 <prvAddCurrentTaskToDelayedList+0x90>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010598:	4b20      	ldr	r3, [pc, #128]	; (801061c <prvAddCurrentTaskToDelayedList+0x94>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	3304      	adds	r3, #4
 801059e:	4618      	mov	r0, r3
 80105a0:	f7fe f8f4 	bl	800e78c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105aa:	d10a      	bne.n	80105c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d007      	beq.n	80105c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105b2:	4b1a      	ldr	r3, [pc, #104]	; (801061c <prvAddCurrentTaskToDelayedList+0x94>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	3304      	adds	r3, #4
 80105b8:	4619      	mov	r1, r3
 80105ba:	4819      	ldr	r0, [pc, #100]	; (8010620 <prvAddCurrentTaskToDelayedList+0x98>)
 80105bc:	f7fe f889 	bl	800e6d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80105c0:	e026      	b.n	8010610 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80105c2:	68fa      	ldr	r2, [r7, #12]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	4413      	add	r3, r2
 80105c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80105ca:	4b14      	ldr	r3, [pc, #80]	; (801061c <prvAddCurrentTaskToDelayedList+0x94>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	68ba      	ldr	r2, [r7, #8]
 80105d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80105d2:	68ba      	ldr	r2, [r7, #8]
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d209      	bcs.n	80105ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105da:	4b12      	ldr	r3, [pc, #72]	; (8010624 <prvAddCurrentTaskToDelayedList+0x9c>)
 80105dc:	681a      	ldr	r2, [r3, #0]
 80105de:	4b0f      	ldr	r3, [pc, #60]	; (801061c <prvAddCurrentTaskToDelayedList+0x94>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	3304      	adds	r3, #4
 80105e4:	4619      	mov	r1, r3
 80105e6:	4610      	mov	r0, r2
 80105e8:	f7fe f897 	bl	800e71a <vListInsert>
}
 80105ec:	e010      	b.n	8010610 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105ee:	4b0e      	ldr	r3, [pc, #56]	; (8010628 <prvAddCurrentTaskToDelayedList+0xa0>)
 80105f0:	681a      	ldr	r2, [r3, #0]
 80105f2:	4b0a      	ldr	r3, [pc, #40]	; (801061c <prvAddCurrentTaskToDelayedList+0x94>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	3304      	adds	r3, #4
 80105f8:	4619      	mov	r1, r3
 80105fa:	4610      	mov	r0, r2
 80105fc:	f7fe f88d 	bl	800e71a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010600:	4b0a      	ldr	r3, [pc, #40]	; (801062c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	68ba      	ldr	r2, [r7, #8]
 8010606:	429a      	cmp	r2, r3
 8010608:	d202      	bcs.n	8010610 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801060a:	4a08      	ldr	r2, [pc, #32]	; (801062c <prvAddCurrentTaskToDelayedList+0xa4>)
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	6013      	str	r3, [r2, #0]
}
 8010610:	bf00      	nop
 8010612:	3710      	adds	r7, #16
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	20001148 	.word	0x20001148
 801061c:	20000c70 	.word	0x20000c70
 8010620:	20001130 	.word	0x20001130
 8010624:	20001100 	.word	0x20001100
 8010628:	200010fc 	.word	0x200010fc
 801062c:	20001164 	.word	0x20001164

08010630 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b08a      	sub	sp, #40	; 0x28
 8010634:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010636:	2300      	movs	r3, #0
 8010638:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801063a:	f000 fb07 	bl	8010c4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801063e:	4b1c      	ldr	r3, [pc, #112]	; (80106b0 <xTimerCreateTimerTask+0x80>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d021      	beq.n	801068a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010646:	2300      	movs	r3, #0
 8010648:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801064a:	2300      	movs	r3, #0
 801064c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801064e:	1d3a      	adds	r2, r7, #4
 8010650:	f107 0108 	add.w	r1, r7, #8
 8010654:	f107 030c 	add.w	r3, r7, #12
 8010658:	4618      	mov	r0, r3
 801065a:	f7fd fff3 	bl	800e644 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801065e:	6879      	ldr	r1, [r7, #4]
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	68fa      	ldr	r2, [r7, #12]
 8010664:	9202      	str	r2, [sp, #8]
 8010666:	9301      	str	r3, [sp, #4]
 8010668:	2302      	movs	r3, #2
 801066a:	9300      	str	r3, [sp, #0]
 801066c:	2300      	movs	r3, #0
 801066e:	460a      	mov	r2, r1
 8010670:	4910      	ldr	r1, [pc, #64]	; (80106b4 <xTimerCreateTimerTask+0x84>)
 8010672:	4811      	ldr	r0, [pc, #68]	; (80106b8 <xTimerCreateTimerTask+0x88>)
 8010674:	f7fe ffb6 	bl	800f5e4 <xTaskCreateStatic>
 8010678:	4603      	mov	r3, r0
 801067a:	4a10      	ldr	r2, [pc, #64]	; (80106bc <xTimerCreateTimerTask+0x8c>)
 801067c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801067e:	4b0f      	ldr	r3, [pc, #60]	; (80106bc <xTimerCreateTimerTask+0x8c>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d001      	beq.n	801068a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010686:	2301      	movs	r3, #1
 8010688:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d10a      	bne.n	80106a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010694:	f383 8811 	msr	BASEPRI, r3
 8010698:	f3bf 8f6f 	isb	sy
 801069c:	f3bf 8f4f 	dsb	sy
 80106a0:	613b      	str	r3, [r7, #16]
}
 80106a2:	bf00      	nop
 80106a4:	e7fe      	b.n	80106a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80106a6:	697b      	ldr	r3, [r7, #20]
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3718      	adds	r7, #24
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	200011a0 	.word	0x200011a0
 80106b4:	080173cc 	.word	0x080173cc
 80106b8:	080107f5 	.word	0x080107f5
 80106bc:	200011a4 	.word	0x200011a4

080106c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b08a      	sub	sp, #40	; 0x28
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	60f8      	str	r0, [r7, #12]
 80106c8:	60b9      	str	r1, [r7, #8]
 80106ca:	607a      	str	r2, [r7, #4]
 80106cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80106ce:	2300      	movs	r3, #0
 80106d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d10a      	bne.n	80106ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80106d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106dc:	f383 8811 	msr	BASEPRI, r3
 80106e0:	f3bf 8f6f 	isb	sy
 80106e4:	f3bf 8f4f 	dsb	sy
 80106e8:	623b      	str	r3, [r7, #32]
}
 80106ea:	bf00      	nop
 80106ec:	e7fe      	b.n	80106ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80106ee:	4b1a      	ldr	r3, [pc, #104]	; (8010758 <xTimerGenericCommand+0x98>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d02a      	beq.n	801074c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	2b05      	cmp	r3, #5
 8010706:	dc18      	bgt.n	801073a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010708:	f7ff fdb4 	bl	8010274 <xTaskGetSchedulerState>
 801070c:	4603      	mov	r3, r0
 801070e:	2b02      	cmp	r3, #2
 8010710:	d109      	bne.n	8010726 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010712:	4b11      	ldr	r3, [pc, #68]	; (8010758 <xTimerGenericCommand+0x98>)
 8010714:	6818      	ldr	r0, [r3, #0]
 8010716:	f107 0110 	add.w	r1, r7, #16
 801071a:	2300      	movs	r3, #0
 801071c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801071e:	f7fe fa07 	bl	800eb30 <xQueueGenericSend>
 8010722:	6278      	str	r0, [r7, #36]	; 0x24
 8010724:	e012      	b.n	801074c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010726:	4b0c      	ldr	r3, [pc, #48]	; (8010758 <xTimerGenericCommand+0x98>)
 8010728:	6818      	ldr	r0, [r3, #0]
 801072a:	f107 0110 	add.w	r1, r7, #16
 801072e:	2300      	movs	r3, #0
 8010730:	2200      	movs	r2, #0
 8010732:	f7fe f9fd 	bl	800eb30 <xQueueGenericSend>
 8010736:	6278      	str	r0, [r7, #36]	; 0x24
 8010738:	e008      	b.n	801074c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801073a:	4b07      	ldr	r3, [pc, #28]	; (8010758 <xTimerGenericCommand+0x98>)
 801073c:	6818      	ldr	r0, [r3, #0]
 801073e:	f107 0110 	add.w	r1, r7, #16
 8010742:	2300      	movs	r3, #0
 8010744:	683a      	ldr	r2, [r7, #0]
 8010746:	f7fe faf1 	bl	800ed2c <xQueueGenericSendFromISR>
 801074a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801074e:	4618      	mov	r0, r3
 8010750:	3728      	adds	r7, #40	; 0x28
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}
 8010756:	bf00      	nop
 8010758:	200011a0 	.word	0x200011a0

0801075c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b088      	sub	sp, #32
 8010760:	af02      	add	r7, sp, #8
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010766:	4b22      	ldr	r3, [pc, #136]	; (80107f0 <prvProcessExpiredTimer+0x94>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	68db      	ldr	r3, [r3, #12]
 801076c:	68db      	ldr	r3, [r3, #12]
 801076e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	3304      	adds	r3, #4
 8010774:	4618      	mov	r0, r3
 8010776:	f7fe f809 	bl	800e78c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010780:	f003 0304 	and.w	r3, r3, #4
 8010784:	2b00      	cmp	r3, #0
 8010786:	d022      	beq.n	80107ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	699a      	ldr	r2, [r3, #24]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	18d1      	adds	r1, r2, r3
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	683a      	ldr	r2, [r7, #0]
 8010794:	6978      	ldr	r0, [r7, #20]
 8010796:	f000 f8d1 	bl	801093c <prvInsertTimerInActiveList>
 801079a:	4603      	mov	r3, r0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d01f      	beq.n	80107e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80107a0:	2300      	movs	r3, #0
 80107a2:	9300      	str	r3, [sp, #0]
 80107a4:	2300      	movs	r3, #0
 80107a6:	687a      	ldr	r2, [r7, #4]
 80107a8:	2100      	movs	r1, #0
 80107aa:	6978      	ldr	r0, [r7, #20]
 80107ac:	f7ff ff88 	bl	80106c0 <xTimerGenericCommand>
 80107b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80107b2:	693b      	ldr	r3, [r7, #16]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d113      	bne.n	80107e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80107b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107bc:	f383 8811 	msr	BASEPRI, r3
 80107c0:	f3bf 8f6f 	isb	sy
 80107c4:	f3bf 8f4f 	dsb	sy
 80107c8:	60fb      	str	r3, [r7, #12]
}
 80107ca:	bf00      	nop
 80107cc:	e7fe      	b.n	80107cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107d4:	f023 0301 	bic.w	r3, r3, #1
 80107d8:	b2da      	uxtb	r2, r3
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	6a1b      	ldr	r3, [r3, #32]
 80107e4:	6978      	ldr	r0, [r7, #20]
 80107e6:	4798      	blx	r3
}
 80107e8:	bf00      	nop
 80107ea:	3718      	adds	r7, #24
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}
 80107f0:	20001198 	.word	0x20001198

080107f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80107fc:	f107 0308 	add.w	r3, r7, #8
 8010800:	4618      	mov	r0, r3
 8010802:	f000 f857 	bl	80108b4 <prvGetNextExpireTime>
 8010806:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	4619      	mov	r1, r3
 801080c:	68f8      	ldr	r0, [r7, #12]
 801080e:	f000 f803 	bl	8010818 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010812:	f000 f8d5 	bl	80109c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010816:	e7f1      	b.n	80107fc <prvTimerTask+0x8>

08010818 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010822:	f7ff f93b 	bl	800fa9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010826:	f107 0308 	add.w	r3, r7, #8
 801082a:	4618      	mov	r0, r3
 801082c:	f000 f866 	bl	80108fc <prvSampleTimeNow>
 8010830:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d130      	bne.n	801089a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d10a      	bne.n	8010854 <prvProcessTimerOrBlockTask+0x3c>
 801083e:	687a      	ldr	r2, [r7, #4]
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	429a      	cmp	r2, r3
 8010844:	d806      	bhi.n	8010854 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010846:	f7ff f937 	bl	800fab8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801084a:	68f9      	ldr	r1, [r7, #12]
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f7ff ff85 	bl	801075c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010852:	e024      	b.n	801089e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d008      	beq.n	801086c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801085a:	4b13      	ldr	r3, [pc, #76]	; (80108a8 <prvProcessTimerOrBlockTask+0x90>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d101      	bne.n	8010868 <prvProcessTimerOrBlockTask+0x50>
 8010864:	2301      	movs	r3, #1
 8010866:	e000      	b.n	801086a <prvProcessTimerOrBlockTask+0x52>
 8010868:	2300      	movs	r3, #0
 801086a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801086c:	4b0f      	ldr	r3, [pc, #60]	; (80108ac <prvProcessTimerOrBlockTask+0x94>)
 801086e:	6818      	ldr	r0, [r3, #0]
 8010870:	687a      	ldr	r2, [r7, #4]
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	1ad3      	subs	r3, r2, r3
 8010876:	683a      	ldr	r2, [r7, #0]
 8010878:	4619      	mov	r1, r3
 801087a:	f7fe fe7f 	bl	800f57c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801087e:	f7ff f91b 	bl	800fab8 <xTaskResumeAll>
 8010882:	4603      	mov	r3, r0
 8010884:	2b00      	cmp	r3, #0
 8010886:	d10a      	bne.n	801089e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010888:	4b09      	ldr	r3, [pc, #36]	; (80108b0 <prvProcessTimerOrBlockTask+0x98>)
 801088a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801088e:	601a      	str	r2, [r3, #0]
 8010890:	f3bf 8f4f 	dsb	sy
 8010894:	f3bf 8f6f 	isb	sy
}
 8010898:	e001      	b.n	801089e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801089a:	f7ff f90d 	bl	800fab8 <xTaskResumeAll>
}
 801089e:	bf00      	nop
 80108a0:	3710      	adds	r7, #16
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}
 80108a6:	bf00      	nop
 80108a8:	2000119c 	.word	0x2000119c
 80108ac:	200011a0 	.word	0x200011a0
 80108b0:	e000ed04 	.word	0xe000ed04

080108b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80108b4:	b480      	push	{r7}
 80108b6:	b085      	sub	sp, #20
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80108bc:	4b0e      	ldr	r3, [pc, #56]	; (80108f8 <prvGetNextExpireTime+0x44>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d101      	bne.n	80108ca <prvGetNextExpireTime+0x16>
 80108c6:	2201      	movs	r2, #1
 80108c8:	e000      	b.n	80108cc <prvGetNextExpireTime+0x18>
 80108ca:	2200      	movs	r2, #0
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d105      	bne.n	80108e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80108d8:	4b07      	ldr	r3, [pc, #28]	; (80108f8 <prvGetNextExpireTime+0x44>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	68db      	ldr	r3, [r3, #12]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	60fb      	str	r3, [r7, #12]
 80108e2:	e001      	b.n	80108e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80108e4:	2300      	movs	r3, #0
 80108e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80108e8:	68fb      	ldr	r3, [r7, #12]
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3714      	adds	r7, #20
 80108ee:	46bd      	mov	sp, r7
 80108f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f4:	4770      	bx	lr
 80108f6:	bf00      	nop
 80108f8:	20001198 	.word	0x20001198

080108fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010904:	f7ff f976 	bl	800fbf4 <xTaskGetTickCount>
 8010908:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801090a:	4b0b      	ldr	r3, [pc, #44]	; (8010938 <prvSampleTimeNow+0x3c>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	68fa      	ldr	r2, [r7, #12]
 8010910:	429a      	cmp	r2, r3
 8010912:	d205      	bcs.n	8010920 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010914:	f000 f936 	bl	8010b84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2201      	movs	r2, #1
 801091c:	601a      	str	r2, [r3, #0]
 801091e:	e002      	b.n	8010926 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2200      	movs	r2, #0
 8010924:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010926:	4a04      	ldr	r2, [pc, #16]	; (8010938 <prvSampleTimeNow+0x3c>)
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801092c:	68fb      	ldr	r3, [r7, #12]
}
 801092e:	4618      	mov	r0, r3
 8010930:	3710      	adds	r7, #16
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	200011a8 	.word	0x200011a8

0801093c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b086      	sub	sp, #24
 8010940:	af00      	add	r7, sp, #0
 8010942:	60f8      	str	r0, [r7, #12]
 8010944:	60b9      	str	r1, [r7, #8]
 8010946:	607a      	str	r2, [r7, #4]
 8010948:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801094a:	2300      	movs	r3, #0
 801094c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	68ba      	ldr	r2, [r7, #8]
 8010952:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	68fa      	ldr	r2, [r7, #12]
 8010958:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801095a:	68ba      	ldr	r2, [r7, #8]
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	429a      	cmp	r2, r3
 8010960:	d812      	bhi.n	8010988 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	1ad2      	subs	r2, r2, r3
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	699b      	ldr	r3, [r3, #24]
 801096c:	429a      	cmp	r2, r3
 801096e:	d302      	bcc.n	8010976 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010970:	2301      	movs	r3, #1
 8010972:	617b      	str	r3, [r7, #20]
 8010974:	e01b      	b.n	80109ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010976:	4b10      	ldr	r3, [pc, #64]	; (80109b8 <prvInsertTimerInActiveList+0x7c>)
 8010978:	681a      	ldr	r2, [r3, #0]
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	3304      	adds	r3, #4
 801097e:	4619      	mov	r1, r3
 8010980:	4610      	mov	r0, r2
 8010982:	f7fd feca 	bl	800e71a <vListInsert>
 8010986:	e012      	b.n	80109ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010988:	687a      	ldr	r2, [r7, #4]
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	429a      	cmp	r2, r3
 801098e:	d206      	bcs.n	801099e <prvInsertTimerInActiveList+0x62>
 8010990:	68ba      	ldr	r2, [r7, #8]
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	429a      	cmp	r2, r3
 8010996:	d302      	bcc.n	801099e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010998:	2301      	movs	r3, #1
 801099a:	617b      	str	r3, [r7, #20]
 801099c:	e007      	b.n	80109ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801099e:	4b07      	ldr	r3, [pc, #28]	; (80109bc <prvInsertTimerInActiveList+0x80>)
 80109a0:	681a      	ldr	r2, [r3, #0]
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	3304      	adds	r3, #4
 80109a6:	4619      	mov	r1, r3
 80109a8:	4610      	mov	r0, r2
 80109aa:	f7fd feb6 	bl	800e71a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80109ae:	697b      	ldr	r3, [r7, #20]
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3718      	adds	r7, #24
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}
 80109b8:	2000119c 	.word	0x2000119c
 80109bc:	20001198 	.word	0x20001198

080109c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b08e      	sub	sp, #56	; 0x38
 80109c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80109c6:	e0ca      	b.n	8010b5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	da18      	bge.n	8010a00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80109ce:	1d3b      	adds	r3, r7, #4
 80109d0:	3304      	adds	r3, #4
 80109d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80109d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d10a      	bne.n	80109f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80109da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109de:	f383 8811 	msr	BASEPRI, r3
 80109e2:	f3bf 8f6f 	isb	sy
 80109e6:	f3bf 8f4f 	dsb	sy
 80109ea:	61fb      	str	r3, [r7, #28]
}
 80109ec:	bf00      	nop
 80109ee:	e7fe      	b.n	80109ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80109f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109f6:	6850      	ldr	r0, [r2, #4]
 80109f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109fa:	6892      	ldr	r2, [r2, #8]
 80109fc:	4611      	mov	r1, r2
 80109fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	f2c0 80aa 	blt.w	8010b5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0e:	695b      	ldr	r3, [r3, #20]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d004      	beq.n	8010a1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a16:	3304      	adds	r3, #4
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7fd feb7 	bl	800e78c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a1e:	463b      	mov	r3, r7
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7ff ff6b 	bl	80108fc <prvSampleTimeNow>
 8010a26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2b09      	cmp	r3, #9
 8010a2c:	f200 8097 	bhi.w	8010b5e <prvProcessReceivedCommands+0x19e>
 8010a30:	a201      	add	r2, pc, #4	; (adr r2, 8010a38 <prvProcessReceivedCommands+0x78>)
 8010a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a36:	bf00      	nop
 8010a38:	08010a61 	.word	0x08010a61
 8010a3c:	08010a61 	.word	0x08010a61
 8010a40:	08010a61 	.word	0x08010a61
 8010a44:	08010ad5 	.word	0x08010ad5
 8010a48:	08010ae9 	.word	0x08010ae9
 8010a4c:	08010b33 	.word	0x08010b33
 8010a50:	08010a61 	.word	0x08010a61
 8010a54:	08010a61 	.word	0x08010a61
 8010a58:	08010ad5 	.word	0x08010ad5
 8010a5c:	08010ae9 	.word	0x08010ae9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a66:	f043 0301 	orr.w	r3, r3, #1
 8010a6a:	b2da      	uxtb	r2, r3
 8010a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010a72:	68ba      	ldr	r2, [r7, #8]
 8010a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a76:	699b      	ldr	r3, [r3, #24]
 8010a78:	18d1      	adds	r1, r2, r3
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a80:	f7ff ff5c 	bl	801093c <prvInsertTimerInActiveList>
 8010a84:	4603      	mov	r3, r0
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d069      	beq.n	8010b5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a8c:	6a1b      	ldr	r3, [r3, #32]
 8010a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a98:	f003 0304 	and.w	r3, r3, #4
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d05e      	beq.n	8010b5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010aa0:	68ba      	ldr	r2, [r7, #8]
 8010aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa4:	699b      	ldr	r3, [r3, #24]
 8010aa6:	441a      	add	r2, r3
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	9300      	str	r3, [sp, #0]
 8010aac:	2300      	movs	r3, #0
 8010aae:	2100      	movs	r1, #0
 8010ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ab2:	f7ff fe05 	bl	80106c0 <xTimerGenericCommand>
 8010ab6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010ab8:	6a3b      	ldr	r3, [r7, #32]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d14f      	bne.n	8010b5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac2:	f383 8811 	msr	BASEPRI, r3
 8010ac6:	f3bf 8f6f 	isb	sy
 8010aca:	f3bf 8f4f 	dsb	sy
 8010ace:	61bb      	str	r3, [r7, #24]
}
 8010ad0:	bf00      	nop
 8010ad2:	e7fe      	b.n	8010ad2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ada:	f023 0301 	bic.w	r3, r3, #1
 8010ade:	b2da      	uxtb	r2, r3
 8010ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010ae6:	e03a      	b.n	8010b5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010aee:	f043 0301 	orr.w	r3, r3, #1
 8010af2:	b2da      	uxtb	r2, r3
 8010af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010afa:	68ba      	ldr	r2, [r7, #8]
 8010afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010afe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b02:	699b      	ldr	r3, [r3, #24]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d10a      	bne.n	8010b1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b0c:	f383 8811 	msr	BASEPRI, r3
 8010b10:	f3bf 8f6f 	isb	sy
 8010b14:	f3bf 8f4f 	dsb	sy
 8010b18:	617b      	str	r3, [r7, #20]
}
 8010b1a:	bf00      	nop
 8010b1c:	e7fe      	b.n	8010b1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b20:	699a      	ldr	r2, [r3, #24]
 8010b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b24:	18d1      	adds	r1, r2, r3
 8010b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b2c:	f7ff ff06 	bl	801093c <prvInsertTimerInActiveList>
					break;
 8010b30:	e015      	b.n	8010b5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b38:	f003 0302 	and.w	r3, r3, #2
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d103      	bne.n	8010b48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b42:	f000 fbdd 	bl	8011300 <vPortFree>
 8010b46:	e00a      	b.n	8010b5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b4e:	f023 0301 	bic.w	r3, r3, #1
 8010b52:	b2da      	uxtb	r2, r3
 8010b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010b5a:	e000      	b.n	8010b5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010b5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010b5e:	4b08      	ldr	r3, [pc, #32]	; (8010b80 <prvProcessReceivedCommands+0x1c0>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	1d39      	adds	r1, r7, #4
 8010b64:	2200      	movs	r2, #0
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7fe f97c 	bl	800ee64 <xQueueReceive>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	f47f af2a 	bne.w	80109c8 <prvProcessReceivedCommands+0x8>
	}
}
 8010b74:	bf00      	nop
 8010b76:	bf00      	nop
 8010b78:	3730      	adds	r7, #48	; 0x30
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	200011a0 	.word	0x200011a0

08010b84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b088      	sub	sp, #32
 8010b88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010b8a:	e048      	b.n	8010c1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010b8c:	4b2d      	ldr	r3, [pc, #180]	; (8010c44 <prvSwitchTimerLists+0xc0>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	68db      	ldr	r3, [r3, #12]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b96:	4b2b      	ldr	r3, [pc, #172]	; (8010c44 <prvSwitchTimerLists+0xc0>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	68db      	ldr	r3, [r3, #12]
 8010b9c:	68db      	ldr	r3, [r3, #12]
 8010b9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	3304      	adds	r3, #4
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7fd fdf1 	bl	800e78c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	6a1b      	ldr	r3, [r3, #32]
 8010bae:	68f8      	ldr	r0, [r7, #12]
 8010bb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bb8:	f003 0304 	and.w	r3, r3, #4
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d02e      	beq.n	8010c1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	699b      	ldr	r3, [r3, #24]
 8010bc4:	693a      	ldr	r2, [r7, #16]
 8010bc6:	4413      	add	r3, r2
 8010bc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010bca:	68ba      	ldr	r2, [r7, #8]
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d90e      	bls.n	8010bf0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	68ba      	ldr	r2, [r7, #8]
 8010bd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	68fa      	ldr	r2, [r7, #12]
 8010bdc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010bde:	4b19      	ldr	r3, [pc, #100]	; (8010c44 <prvSwitchTimerLists+0xc0>)
 8010be0:	681a      	ldr	r2, [r3, #0]
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	3304      	adds	r3, #4
 8010be6:	4619      	mov	r1, r3
 8010be8:	4610      	mov	r0, r2
 8010bea:	f7fd fd96 	bl	800e71a <vListInsert>
 8010bee:	e016      	b.n	8010c1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	9300      	str	r3, [sp, #0]
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	693a      	ldr	r2, [r7, #16]
 8010bf8:	2100      	movs	r1, #0
 8010bfa:	68f8      	ldr	r0, [r7, #12]
 8010bfc:	f7ff fd60 	bl	80106c0 <xTimerGenericCommand>
 8010c00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d10a      	bne.n	8010c1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c0c:	f383 8811 	msr	BASEPRI, r3
 8010c10:	f3bf 8f6f 	isb	sy
 8010c14:	f3bf 8f4f 	dsb	sy
 8010c18:	603b      	str	r3, [r7, #0]
}
 8010c1a:	bf00      	nop
 8010c1c:	e7fe      	b.n	8010c1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010c1e:	4b09      	ldr	r3, [pc, #36]	; (8010c44 <prvSwitchTimerLists+0xc0>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d1b1      	bne.n	8010b8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010c28:	4b06      	ldr	r3, [pc, #24]	; (8010c44 <prvSwitchTimerLists+0xc0>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010c2e:	4b06      	ldr	r3, [pc, #24]	; (8010c48 <prvSwitchTimerLists+0xc4>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	4a04      	ldr	r2, [pc, #16]	; (8010c44 <prvSwitchTimerLists+0xc0>)
 8010c34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010c36:	4a04      	ldr	r2, [pc, #16]	; (8010c48 <prvSwitchTimerLists+0xc4>)
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	6013      	str	r3, [r2, #0]
}
 8010c3c:	bf00      	nop
 8010c3e:	3718      	adds	r7, #24
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}
 8010c44:	20001198 	.word	0x20001198
 8010c48:	2000119c 	.word	0x2000119c

08010c4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010c52:	f000 f967 	bl	8010f24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010c56:	4b15      	ldr	r3, [pc, #84]	; (8010cac <prvCheckForValidListAndQueue+0x60>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d120      	bne.n	8010ca0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010c5e:	4814      	ldr	r0, [pc, #80]	; (8010cb0 <prvCheckForValidListAndQueue+0x64>)
 8010c60:	f7fd fd0a 	bl	800e678 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010c64:	4813      	ldr	r0, [pc, #76]	; (8010cb4 <prvCheckForValidListAndQueue+0x68>)
 8010c66:	f7fd fd07 	bl	800e678 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010c6a:	4b13      	ldr	r3, [pc, #76]	; (8010cb8 <prvCheckForValidListAndQueue+0x6c>)
 8010c6c:	4a10      	ldr	r2, [pc, #64]	; (8010cb0 <prvCheckForValidListAndQueue+0x64>)
 8010c6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010c70:	4b12      	ldr	r3, [pc, #72]	; (8010cbc <prvCheckForValidListAndQueue+0x70>)
 8010c72:	4a10      	ldr	r2, [pc, #64]	; (8010cb4 <prvCheckForValidListAndQueue+0x68>)
 8010c74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010c76:	2300      	movs	r3, #0
 8010c78:	9300      	str	r3, [sp, #0]
 8010c7a:	4b11      	ldr	r3, [pc, #68]	; (8010cc0 <prvCheckForValidListAndQueue+0x74>)
 8010c7c:	4a11      	ldr	r2, [pc, #68]	; (8010cc4 <prvCheckForValidListAndQueue+0x78>)
 8010c7e:	2110      	movs	r1, #16
 8010c80:	200a      	movs	r0, #10
 8010c82:	f7fd fe15 	bl	800e8b0 <xQueueGenericCreateStatic>
 8010c86:	4603      	mov	r3, r0
 8010c88:	4a08      	ldr	r2, [pc, #32]	; (8010cac <prvCheckForValidListAndQueue+0x60>)
 8010c8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010c8c:	4b07      	ldr	r3, [pc, #28]	; (8010cac <prvCheckForValidListAndQueue+0x60>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d005      	beq.n	8010ca0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010c94:	4b05      	ldr	r3, [pc, #20]	; (8010cac <prvCheckForValidListAndQueue+0x60>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	490b      	ldr	r1, [pc, #44]	; (8010cc8 <prvCheckForValidListAndQueue+0x7c>)
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7fe fc1a 	bl	800f4d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010ca0:	f000 f970 	bl	8010f84 <vPortExitCritical>
}
 8010ca4:	bf00      	nop
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}
 8010caa:	bf00      	nop
 8010cac:	200011a0 	.word	0x200011a0
 8010cb0:	20001170 	.word	0x20001170
 8010cb4:	20001184 	.word	0x20001184
 8010cb8:	20001198 	.word	0x20001198
 8010cbc:	2000119c 	.word	0x2000119c
 8010cc0:	2000124c 	.word	0x2000124c
 8010cc4:	200011ac 	.word	0x200011ac
 8010cc8:	080173d4 	.word	0x080173d4

08010ccc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b085      	sub	sp, #20
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	60f8      	str	r0, [r7, #12]
 8010cd4:	60b9      	str	r1, [r7, #8]
 8010cd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	3b04      	subs	r3, #4
 8010cdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	3b04      	subs	r3, #4
 8010cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	f023 0201 	bic.w	r2, r3, #1
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	3b04      	subs	r3, #4
 8010cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010cfc:	4a0c      	ldr	r2, [pc, #48]	; (8010d30 <pxPortInitialiseStack+0x64>)
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	3b14      	subs	r3, #20
 8010d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010d08:	687a      	ldr	r2, [r7, #4]
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	3b04      	subs	r3, #4
 8010d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	f06f 0202 	mvn.w	r2, #2
 8010d1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	3b20      	subs	r3, #32
 8010d20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010d22:	68fb      	ldr	r3, [r7, #12]
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3714      	adds	r7, #20
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr
 8010d30:	08010d35 	.word	0x08010d35

08010d34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010d34:	b480      	push	{r7}
 8010d36:	b085      	sub	sp, #20
 8010d38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010d3e:	4b12      	ldr	r3, [pc, #72]	; (8010d88 <prvTaskExitError+0x54>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d46:	d00a      	beq.n	8010d5e <prvTaskExitError+0x2a>
	__asm volatile
 8010d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d4c:	f383 8811 	msr	BASEPRI, r3
 8010d50:	f3bf 8f6f 	isb	sy
 8010d54:	f3bf 8f4f 	dsb	sy
 8010d58:	60fb      	str	r3, [r7, #12]
}
 8010d5a:	bf00      	nop
 8010d5c:	e7fe      	b.n	8010d5c <prvTaskExitError+0x28>
	__asm volatile
 8010d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d62:	f383 8811 	msr	BASEPRI, r3
 8010d66:	f3bf 8f6f 	isb	sy
 8010d6a:	f3bf 8f4f 	dsb	sy
 8010d6e:	60bb      	str	r3, [r7, #8]
}
 8010d70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010d72:	bf00      	nop
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d0fc      	beq.n	8010d74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010d7a:	bf00      	nop
 8010d7c:	bf00      	nop
 8010d7e:	3714      	adds	r7, #20
 8010d80:	46bd      	mov	sp, r7
 8010d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d86:	4770      	bx	lr
 8010d88:	20000134 	.word	0x20000134
 8010d8c:	00000000 	.word	0x00000000

08010d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010d90:	4b07      	ldr	r3, [pc, #28]	; (8010db0 <pxCurrentTCBConst2>)
 8010d92:	6819      	ldr	r1, [r3, #0]
 8010d94:	6808      	ldr	r0, [r1, #0]
 8010d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d9a:	f380 8809 	msr	PSP, r0
 8010d9e:	f3bf 8f6f 	isb	sy
 8010da2:	f04f 0000 	mov.w	r0, #0
 8010da6:	f380 8811 	msr	BASEPRI, r0
 8010daa:	4770      	bx	lr
 8010dac:	f3af 8000 	nop.w

08010db0 <pxCurrentTCBConst2>:
 8010db0:	20000c70 	.word	0x20000c70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010db4:	bf00      	nop
 8010db6:	bf00      	nop

08010db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010db8:	4808      	ldr	r0, [pc, #32]	; (8010ddc <prvPortStartFirstTask+0x24>)
 8010dba:	6800      	ldr	r0, [r0, #0]
 8010dbc:	6800      	ldr	r0, [r0, #0]
 8010dbe:	f380 8808 	msr	MSP, r0
 8010dc2:	f04f 0000 	mov.w	r0, #0
 8010dc6:	f380 8814 	msr	CONTROL, r0
 8010dca:	b662      	cpsie	i
 8010dcc:	b661      	cpsie	f
 8010dce:	f3bf 8f4f 	dsb	sy
 8010dd2:	f3bf 8f6f 	isb	sy
 8010dd6:	df00      	svc	0
 8010dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010dda:	bf00      	nop
 8010ddc:	e000ed08 	.word	0xe000ed08

08010de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b086      	sub	sp, #24
 8010de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010de6:	4b46      	ldr	r3, [pc, #280]	; (8010f00 <xPortStartScheduler+0x120>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	4a46      	ldr	r2, [pc, #280]	; (8010f04 <xPortStartScheduler+0x124>)
 8010dec:	4293      	cmp	r3, r2
 8010dee:	d10a      	bne.n	8010e06 <xPortStartScheduler+0x26>
	__asm volatile
 8010df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df4:	f383 8811 	msr	BASEPRI, r3
 8010df8:	f3bf 8f6f 	isb	sy
 8010dfc:	f3bf 8f4f 	dsb	sy
 8010e00:	613b      	str	r3, [r7, #16]
}
 8010e02:	bf00      	nop
 8010e04:	e7fe      	b.n	8010e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010e06:	4b3e      	ldr	r3, [pc, #248]	; (8010f00 <xPortStartScheduler+0x120>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	4a3f      	ldr	r2, [pc, #252]	; (8010f08 <xPortStartScheduler+0x128>)
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d10a      	bne.n	8010e26 <xPortStartScheduler+0x46>
	__asm volatile
 8010e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e14:	f383 8811 	msr	BASEPRI, r3
 8010e18:	f3bf 8f6f 	isb	sy
 8010e1c:	f3bf 8f4f 	dsb	sy
 8010e20:	60fb      	str	r3, [r7, #12]
}
 8010e22:	bf00      	nop
 8010e24:	e7fe      	b.n	8010e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010e26:	4b39      	ldr	r3, [pc, #228]	; (8010f0c <xPortStartScheduler+0x12c>)
 8010e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	b2db      	uxtb	r3, r3
 8010e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	22ff      	movs	r2, #255	; 0xff
 8010e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010e40:	78fb      	ldrb	r3, [r7, #3]
 8010e42:	b2db      	uxtb	r3, r3
 8010e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010e48:	b2da      	uxtb	r2, r3
 8010e4a:	4b31      	ldr	r3, [pc, #196]	; (8010f10 <xPortStartScheduler+0x130>)
 8010e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010e4e:	4b31      	ldr	r3, [pc, #196]	; (8010f14 <xPortStartScheduler+0x134>)
 8010e50:	2207      	movs	r2, #7
 8010e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010e54:	e009      	b.n	8010e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010e56:	4b2f      	ldr	r3, [pc, #188]	; (8010f14 <xPortStartScheduler+0x134>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	3b01      	subs	r3, #1
 8010e5c:	4a2d      	ldr	r2, [pc, #180]	; (8010f14 <xPortStartScheduler+0x134>)
 8010e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010e60:	78fb      	ldrb	r3, [r7, #3]
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	005b      	lsls	r3, r3, #1
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010e6a:	78fb      	ldrb	r3, [r7, #3]
 8010e6c:	b2db      	uxtb	r3, r3
 8010e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e72:	2b80      	cmp	r3, #128	; 0x80
 8010e74:	d0ef      	beq.n	8010e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010e76:	4b27      	ldr	r3, [pc, #156]	; (8010f14 <xPortStartScheduler+0x134>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	f1c3 0307 	rsb	r3, r3, #7
 8010e7e:	2b04      	cmp	r3, #4
 8010e80:	d00a      	beq.n	8010e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8010e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e86:	f383 8811 	msr	BASEPRI, r3
 8010e8a:	f3bf 8f6f 	isb	sy
 8010e8e:	f3bf 8f4f 	dsb	sy
 8010e92:	60bb      	str	r3, [r7, #8]
}
 8010e94:	bf00      	nop
 8010e96:	e7fe      	b.n	8010e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010e98:	4b1e      	ldr	r3, [pc, #120]	; (8010f14 <xPortStartScheduler+0x134>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	021b      	lsls	r3, r3, #8
 8010e9e:	4a1d      	ldr	r2, [pc, #116]	; (8010f14 <xPortStartScheduler+0x134>)
 8010ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010ea2:	4b1c      	ldr	r3, [pc, #112]	; (8010f14 <xPortStartScheduler+0x134>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010eaa:	4a1a      	ldr	r2, [pc, #104]	; (8010f14 <xPortStartScheduler+0x134>)
 8010eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	b2da      	uxtb	r2, r3
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010eb6:	4b18      	ldr	r3, [pc, #96]	; (8010f18 <xPortStartScheduler+0x138>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4a17      	ldr	r2, [pc, #92]	; (8010f18 <xPortStartScheduler+0x138>)
 8010ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010ec2:	4b15      	ldr	r3, [pc, #84]	; (8010f18 <xPortStartScheduler+0x138>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	4a14      	ldr	r2, [pc, #80]	; (8010f18 <xPortStartScheduler+0x138>)
 8010ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010ece:	f000 f8dd 	bl	801108c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010ed2:	4b12      	ldr	r3, [pc, #72]	; (8010f1c <xPortStartScheduler+0x13c>)
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010ed8:	f000 f8fc 	bl	80110d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010edc:	4b10      	ldr	r3, [pc, #64]	; (8010f20 <xPortStartScheduler+0x140>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4a0f      	ldr	r2, [pc, #60]	; (8010f20 <xPortStartScheduler+0x140>)
 8010ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010ee8:	f7ff ff66 	bl	8010db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010eec:	f7fe ff4c 	bl	800fd88 <vTaskSwitchContext>
	prvTaskExitError();
 8010ef0:	f7ff ff20 	bl	8010d34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010ef4:	2300      	movs	r3, #0
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	3718      	adds	r7, #24
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}
 8010efe:	bf00      	nop
 8010f00:	e000ed00 	.word	0xe000ed00
 8010f04:	410fc271 	.word	0x410fc271
 8010f08:	410fc270 	.word	0x410fc270
 8010f0c:	e000e400 	.word	0xe000e400
 8010f10:	2000129c 	.word	0x2000129c
 8010f14:	200012a0 	.word	0x200012a0
 8010f18:	e000ed20 	.word	0xe000ed20
 8010f1c:	20000134 	.word	0x20000134
 8010f20:	e000ef34 	.word	0xe000ef34

08010f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010f24:	b480      	push	{r7}
 8010f26:	b083      	sub	sp, #12
 8010f28:	af00      	add	r7, sp, #0
	__asm volatile
 8010f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f2e:	f383 8811 	msr	BASEPRI, r3
 8010f32:	f3bf 8f6f 	isb	sy
 8010f36:	f3bf 8f4f 	dsb	sy
 8010f3a:	607b      	str	r3, [r7, #4]
}
 8010f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010f3e:	4b0f      	ldr	r3, [pc, #60]	; (8010f7c <vPortEnterCritical+0x58>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	3301      	adds	r3, #1
 8010f44:	4a0d      	ldr	r2, [pc, #52]	; (8010f7c <vPortEnterCritical+0x58>)
 8010f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010f48:	4b0c      	ldr	r3, [pc, #48]	; (8010f7c <vPortEnterCritical+0x58>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	2b01      	cmp	r3, #1
 8010f4e:	d10f      	bne.n	8010f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010f50:	4b0b      	ldr	r3, [pc, #44]	; (8010f80 <vPortEnterCritical+0x5c>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	b2db      	uxtb	r3, r3
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d00a      	beq.n	8010f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8010f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f5e:	f383 8811 	msr	BASEPRI, r3
 8010f62:	f3bf 8f6f 	isb	sy
 8010f66:	f3bf 8f4f 	dsb	sy
 8010f6a:	603b      	str	r3, [r7, #0]
}
 8010f6c:	bf00      	nop
 8010f6e:	e7fe      	b.n	8010f6e <vPortEnterCritical+0x4a>
	}
}
 8010f70:	bf00      	nop
 8010f72:	370c      	adds	r7, #12
 8010f74:	46bd      	mov	sp, r7
 8010f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7a:	4770      	bx	lr
 8010f7c:	20000134 	.word	0x20000134
 8010f80:	e000ed04 	.word	0xe000ed04

08010f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010f8a:	4b12      	ldr	r3, [pc, #72]	; (8010fd4 <vPortExitCritical+0x50>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d10a      	bne.n	8010fa8 <vPortExitCritical+0x24>
	__asm volatile
 8010f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f96:	f383 8811 	msr	BASEPRI, r3
 8010f9a:	f3bf 8f6f 	isb	sy
 8010f9e:	f3bf 8f4f 	dsb	sy
 8010fa2:	607b      	str	r3, [r7, #4]
}
 8010fa4:	bf00      	nop
 8010fa6:	e7fe      	b.n	8010fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010fa8:	4b0a      	ldr	r3, [pc, #40]	; (8010fd4 <vPortExitCritical+0x50>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	3b01      	subs	r3, #1
 8010fae:	4a09      	ldr	r2, [pc, #36]	; (8010fd4 <vPortExitCritical+0x50>)
 8010fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010fb2:	4b08      	ldr	r3, [pc, #32]	; (8010fd4 <vPortExitCritical+0x50>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d105      	bne.n	8010fc6 <vPortExitCritical+0x42>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	f383 8811 	msr	BASEPRI, r3
}
 8010fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010fc6:	bf00      	nop
 8010fc8:	370c      	adds	r7, #12
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd0:	4770      	bx	lr
 8010fd2:	bf00      	nop
 8010fd4:	20000134 	.word	0x20000134
	...

08010fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010fe0:	f3ef 8009 	mrs	r0, PSP
 8010fe4:	f3bf 8f6f 	isb	sy
 8010fe8:	4b15      	ldr	r3, [pc, #84]	; (8011040 <pxCurrentTCBConst>)
 8010fea:	681a      	ldr	r2, [r3, #0]
 8010fec:	f01e 0f10 	tst.w	lr, #16
 8010ff0:	bf08      	it	eq
 8010ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ffa:	6010      	str	r0, [r2, #0]
 8010ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011004:	f380 8811 	msr	BASEPRI, r0
 8011008:	f3bf 8f4f 	dsb	sy
 801100c:	f3bf 8f6f 	isb	sy
 8011010:	f7fe feba 	bl	800fd88 <vTaskSwitchContext>
 8011014:	f04f 0000 	mov.w	r0, #0
 8011018:	f380 8811 	msr	BASEPRI, r0
 801101c:	bc09      	pop	{r0, r3}
 801101e:	6819      	ldr	r1, [r3, #0]
 8011020:	6808      	ldr	r0, [r1, #0]
 8011022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011026:	f01e 0f10 	tst.w	lr, #16
 801102a:	bf08      	it	eq
 801102c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011030:	f380 8809 	msr	PSP, r0
 8011034:	f3bf 8f6f 	isb	sy
 8011038:	4770      	bx	lr
 801103a:	bf00      	nop
 801103c:	f3af 8000 	nop.w

08011040 <pxCurrentTCBConst>:
 8011040:	20000c70 	.word	0x20000c70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011044:	bf00      	nop
 8011046:	bf00      	nop

08011048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
	__asm volatile
 801104e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011052:	f383 8811 	msr	BASEPRI, r3
 8011056:	f3bf 8f6f 	isb	sy
 801105a:	f3bf 8f4f 	dsb	sy
 801105e:	607b      	str	r3, [r7, #4]
}
 8011060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011062:	f7fe fdd7 	bl	800fc14 <xTaskIncrementTick>
 8011066:	4603      	mov	r3, r0
 8011068:	2b00      	cmp	r3, #0
 801106a:	d003      	beq.n	8011074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801106c:	4b06      	ldr	r3, [pc, #24]	; (8011088 <xPortSysTickHandler+0x40>)
 801106e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011072:	601a      	str	r2, [r3, #0]
 8011074:	2300      	movs	r3, #0
 8011076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	f383 8811 	msr	BASEPRI, r3
}
 801107e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011080:	bf00      	nop
 8011082:	3708      	adds	r7, #8
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	e000ed04 	.word	0xe000ed04

0801108c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801108c:	b480      	push	{r7}
 801108e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011090:	4b0b      	ldr	r3, [pc, #44]	; (80110c0 <vPortSetupTimerInterrupt+0x34>)
 8011092:	2200      	movs	r2, #0
 8011094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011096:	4b0b      	ldr	r3, [pc, #44]	; (80110c4 <vPortSetupTimerInterrupt+0x38>)
 8011098:	2200      	movs	r2, #0
 801109a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801109c:	4b0a      	ldr	r3, [pc, #40]	; (80110c8 <vPortSetupTimerInterrupt+0x3c>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	4a0a      	ldr	r2, [pc, #40]	; (80110cc <vPortSetupTimerInterrupt+0x40>)
 80110a2:	fba2 2303 	umull	r2, r3, r2, r3
 80110a6:	099b      	lsrs	r3, r3, #6
 80110a8:	4a09      	ldr	r2, [pc, #36]	; (80110d0 <vPortSetupTimerInterrupt+0x44>)
 80110aa:	3b01      	subs	r3, #1
 80110ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80110ae:	4b04      	ldr	r3, [pc, #16]	; (80110c0 <vPortSetupTimerInterrupt+0x34>)
 80110b0:	2207      	movs	r2, #7
 80110b2:	601a      	str	r2, [r3, #0]
}
 80110b4:	bf00      	nop
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr
 80110be:	bf00      	nop
 80110c0:	e000e010 	.word	0xe000e010
 80110c4:	e000e018 	.word	0xe000e018
 80110c8:	20000000 	.word	0x20000000
 80110cc:	10624dd3 	.word	0x10624dd3
 80110d0:	e000e014 	.word	0xe000e014

080110d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80110d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80110e4 <vPortEnableVFP+0x10>
 80110d8:	6801      	ldr	r1, [r0, #0]
 80110da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80110de:	6001      	str	r1, [r0, #0]
 80110e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80110e2:	bf00      	nop
 80110e4:	e000ed88 	.word	0xe000ed88

080110e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80110e8:	b480      	push	{r7}
 80110ea:	b085      	sub	sp, #20
 80110ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80110ee:	f3ef 8305 	mrs	r3, IPSR
 80110f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	2b0f      	cmp	r3, #15
 80110f8:	d914      	bls.n	8011124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80110fa:	4a17      	ldr	r2, [pc, #92]	; (8011158 <vPortValidateInterruptPriority+0x70>)
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	4413      	add	r3, r2
 8011100:	781b      	ldrb	r3, [r3, #0]
 8011102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011104:	4b15      	ldr	r3, [pc, #84]	; (801115c <vPortValidateInterruptPriority+0x74>)
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	7afa      	ldrb	r2, [r7, #11]
 801110a:	429a      	cmp	r2, r3
 801110c:	d20a      	bcs.n	8011124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801110e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011112:	f383 8811 	msr	BASEPRI, r3
 8011116:	f3bf 8f6f 	isb	sy
 801111a:	f3bf 8f4f 	dsb	sy
 801111e:	607b      	str	r3, [r7, #4]
}
 8011120:	bf00      	nop
 8011122:	e7fe      	b.n	8011122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011124:	4b0e      	ldr	r3, [pc, #56]	; (8011160 <vPortValidateInterruptPriority+0x78>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801112c:	4b0d      	ldr	r3, [pc, #52]	; (8011164 <vPortValidateInterruptPriority+0x7c>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	429a      	cmp	r2, r3
 8011132:	d90a      	bls.n	801114a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011138:	f383 8811 	msr	BASEPRI, r3
 801113c:	f3bf 8f6f 	isb	sy
 8011140:	f3bf 8f4f 	dsb	sy
 8011144:	603b      	str	r3, [r7, #0]
}
 8011146:	bf00      	nop
 8011148:	e7fe      	b.n	8011148 <vPortValidateInterruptPriority+0x60>
	}
 801114a:	bf00      	nop
 801114c:	3714      	adds	r7, #20
 801114e:	46bd      	mov	sp, r7
 8011150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011154:	4770      	bx	lr
 8011156:	bf00      	nop
 8011158:	e000e3f0 	.word	0xe000e3f0
 801115c:	2000129c 	.word	0x2000129c
 8011160:	e000ed0c 	.word	0xe000ed0c
 8011164:	200012a0 	.word	0x200012a0

08011168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b08a      	sub	sp, #40	; 0x28
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011170:	2300      	movs	r3, #0
 8011172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011174:	f7fe fc92 	bl	800fa9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011178:	4b5b      	ldr	r3, [pc, #364]	; (80112e8 <pvPortMalloc+0x180>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d101      	bne.n	8011184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011180:	f000 f920 	bl	80113c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011184:	4b59      	ldr	r3, [pc, #356]	; (80112ec <pvPortMalloc+0x184>)
 8011186:	681a      	ldr	r2, [r3, #0]
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	4013      	ands	r3, r2
 801118c:	2b00      	cmp	r3, #0
 801118e:	f040 8093 	bne.w	80112b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d01d      	beq.n	80111d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011198:	2208      	movs	r2, #8
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	4413      	add	r3, r2
 801119e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f003 0307 	and.w	r3, r3, #7
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d014      	beq.n	80111d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f023 0307 	bic.w	r3, r3, #7
 80111b0:	3308      	adds	r3, #8
 80111b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f003 0307 	and.w	r3, r3, #7
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d00a      	beq.n	80111d4 <pvPortMalloc+0x6c>
	__asm volatile
 80111be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c2:	f383 8811 	msr	BASEPRI, r3
 80111c6:	f3bf 8f6f 	isb	sy
 80111ca:	f3bf 8f4f 	dsb	sy
 80111ce:	617b      	str	r3, [r7, #20]
}
 80111d0:	bf00      	nop
 80111d2:	e7fe      	b.n	80111d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d06e      	beq.n	80112b8 <pvPortMalloc+0x150>
 80111da:	4b45      	ldr	r3, [pc, #276]	; (80112f0 <pvPortMalloc+0x188>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	687a      	ldr	r2, [r7, #4]
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d869      	bhi.n	80112b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80111e4:	4b43      	ldr	r3, [pc, #268]	; (80112f4 <pvPortMalloc+0x18c>)
 80111e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80111e8:	4b42      	ldr	r3, [pc, #264]	; (80112f4 <pvPortMalloc+0x18c>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80111ee:	e004      	b.n	80111fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80111f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80111f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80111fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	687a      	ldr	r2, [r7, #4]
 8011200:	429a      	cmp	r2, r3
 8011202:	d903      	bls.n	801120c <pvPortMalloc+0xa4>
 8011204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d1f1      	bne.n	80111f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801120c:	4b36      	ldr	r3, [pc, #216]	; (80112e8 <pvPortMalloc+0x180>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011212:	429a      	cmp	r2, r3
 8011214:	d050      	beq.n	80112b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011216:	6a3b      	ldr	r3, [r7, #32]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	2208      	movs	r2, #8
 801121c:	4413      	add	r3, r2
 801121e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	6a3b      	ldr	r3, [r7, #32]
 8011226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801122a:	685a      	ldr	r2, [r3, #4]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	1ad2      	subs	r2, r2, r3
 8011230:	2308      	movs	r3, #8
 8011232:	005b      	lsls	r3, r3, #1
 8011234:	429a      	cmp	r2, r3
 8011236:	d91f      	bls.n	8011278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	4413      	add	r3, r2
 801123e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011240:	69bb      	ldr	r3, [r7, #24]
 8011242:	f003 0307 	and.w	r3, r3, #7
 8011246:	2b00      	cmp	r3, #0
 8011248:	d00a      	beq.n	8011260 <pvPortMalloc+0xf8>
	__asm volatile
 801124a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801124e:	f383 8811 	msr	BASEPRI, r3
 8011252:	f3bf 8f6f 	isb	sy
 8011256:	f3bf 8f4f 	dsb	sy
 801125a:	613b      	str	r3, [r7, #16]
}
 801125c:	bf00      	nop
 801125e:	e7fe      	b.n	801125e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011262:	685a      	ldr	r2, [r3, #4]
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	1ad2      	subs	r2, r2, r3
 8011268:	69bb      	ldr	r3, [r7, #24]
 801126a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126e:	687a      	ldr	r2, [r7, #4]
 8011270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011272:	69b8      	ldr	r0, [r7, #24]
 8011274:	f000 f908 	bl	8011488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011278:	4b1d      	ldr	r3, [pc, #116]	; (80112f0 <pvPortMalloc+0x188>)
 801127a:	681a      	ldr	r2, [r3, #0]
 801127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127e:	685b      	ldr	r3, [r3, #4]
 8011280:	1ad3      	subs	r3, r2, r3
 8011282:	4a1b      	ldr	r2, [pc, #108]	; (80112f0 <pvPortMalloc+0x188>)
 8011284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011286:	4b1a      	ldr	r3, [pc, #104]	; (80112f0 <pvPortMalloc+0x188>)
 8011288:	681a      	ldr	r2, [r3, #0]
 801128a:	4b1b      	ldr	r3, [pc, #108]	; (80112f8 <pvPortMalloc+0x190>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	429a      	cmp	r2, r3
 8011290:	d203      	bcs.n	801129a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011292:	4b17      	ldr	r3, [pc, #92]	; (80112f0 <pvPortMalloc+0x188>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	4a18      	ldr	r2, [pc, #96]	; (80112f8 <pvPortMalloc+0x190>)
 8011298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129c:	685a      	ldr	r2, [r3, #4]
 801129e:	4b13      	ldr	r3, [pc, #76]	; (80112ec <pvPortMalloc+0x184>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	431a      	orrs	r2, r3
 80112a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80112a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112aa:	2200      	movs	r2, #0
 80112ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80112ae:	4b13      	ldr	r3, [pc, #76]	; (80112fc <pvPortMalloc+0x194>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	3301      	adds	r3, #1
 80112b4:	4a11      	ldr	r2, [pc, #68]	; (80112fc <pvPortMalloc+0x194>)
 80112b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80112b8:	f7fe fbfe 	bl	800fab8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	f003 0307 	and.w	r3, r3, #7
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d00a      	beq.n	80112dc <pvPortMalloc+0x174>
	__asm volatile
 80112c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ca:	f383 8811 	msr	BASEPRI, r3
 80112ce:	f3bf 8f6f 	isb	sy
 80112d2:	f3bf 8f4f 	dsb	sy
 80112d6:	60fb      	str	r3, [r7, #12]
}
 80112d8:	bf00      	nop
 80112da:	e7fe      	b.n	80112da <pvPortMalloc+0x172>
	return pvReturn;
 80112dc:	69fb      	ldr	r3, [r7, #28]
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3728      	adds	r7, #40	; 0x28
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
 80112e6:	bf00      	nop
 80112e8:	20009b64 	.word	0x20009b64
 80112ec:	20009b78 	.word	0x20009b78
 80112f0:	20009b68 	.word	0x20009b68
 80112f4:	20009b5c 	.word	0x20009b5c
 80112f8:	20009b6c 	.word	0x20009b6c
 80112fc:	20009b70 	.word	0x20009b70

08011300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b086      	sub	sp, #24
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d04d      	beq.n	80113ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011312:	2308      	movs	r3, #8
 8011314:	425b      	negs	r3, r3
 8011316:	697a      	ldr	r2, [r7, #20]
 8011318:	4413      	add	r3, r2
 801131a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801131c:	697b      	ldr	r3, [r7, #20]
 801131e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	685a      	ldr	r2, [r3, #4]
 8011324:	4b24      	ldr	r3, [pc, #144]	; (80113b8 <vPortFree+0xb8>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	4013      	ands	r3, r2
 801132a:	2b00      	cmp	r3, #0
 801132c:	d10a      	bne.n	8011344 <vPortFree+0x44>
	__asm volatile
 801132e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011332:	f383 8811 	msr	BASEPRI, r3
 8011336:	f3bf 8f6f 	isb	sy
 801133a:	f3bf 8f4f 	dsb	sy
 801133e:	60fb      	str	r3, [r7, #12]
}
 8011340:	bf00      	nop
 8011342:	e7fe      	b.n	8011342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d00a      	beq.n	8011362 <vPortFree+0x62>
	__asm volatile
 801134c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011350:	f383 8811 	msr	BASEPRI, r3
 8011354:	f3bf 8f6f 	isb	sy
 8011358:	f3bf 8f4f 	dsb	sy
 801135c:	60bb      	str	r3, [r7, #8]
}
 801135e:	bf00      	nop
 8011360:	e7fe      	b.n	8011360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	685a      	ldr	r2, [r3, #4]
 8011366:	4b14      	ldr	r3, [pc, #80]	; (80113b8 <vPortFree+0xb8>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	4013      	ands	r3, r2
 801136c:	2b00      	cmp	r3, #0
 801136e:	d01e      	beq.n	80113ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d11a      	bne.n	80113ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	685a      	ldr	r2, [r3, #4]
 801137c:	4b0e      	ldr	r3, [pc, #56]	; (80113b8 <vPortFree+0xb8>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	43db      	mvns	r3, r3
 8011382:	401a      	ands	r2, r3
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011388:	f7fe fb88 	bl	800fa9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801138c:	693b      	ldr	r3, [r7, #16]
 801138e:	685a      	ldr	r2, [r3, #4]
 8011390:	4b0a      	ldr	r3, [pc, #40]	; (80113bc <vPortFree+0xbc>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	4413      	add	r3, r2
 8011396:	4a09      	ldr	r2, [pc, #36]	; (80113bc <vPortFree+0xbc>)
 8011398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801139a:	6938      	ldr	r0, [r7, #16]
 801139c:	f000 f874 	bl	8011488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80113a0:	4b07      	ldr	r3, [pc, #28]	; (80113c0 <vPortFree+0xc0>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	3301      	adds	r3, #1
 80113a6:	4a06      	ldr	r2, [pc, #24]	; (80113c0 <vPortFree+0xc0>)
 80113a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80113aa:	f7fe fb85 	bl	800fab8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80113ae:	bf00      	nop
 80113b0:	3718      	adds	r7, #24
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	20009b78 	.word	0x20009b78
 80113bc:	20009b68 	.word	0x20009b68
 80113c0:	20009b74 	.word	0x20009b74

080113c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80113c4:	b480      	push	{r7}
 80113c6:	b085      	sub	sp, #20
 80113c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80113ca:	f648 03b8 	movw	r3, #35000	; 0x88b8
 80113ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80113d0:	4b27      	ldr	r3, [pc, #156]	; (8011470 <prvHeapInit+0xac>)
 80113d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	f003 0307 	and.w	r3, r3, #7
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d00c      	beq.n	80113f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	3307      	adds	r3, #7
 80113e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	f023 0307 	bic.w	r3, r3, #7
 80113ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80113ec:	68ba      	ldr	r2, [r7, #8]
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	1ad3      	subs	r3, r2, r3
 80113f2:	4a1f      	ldr	r2, [pc, #124]	; (8011470 <prvHeapInit+0xac>)
 80113f4:	4413      	add	r3, r2
 80113f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80113fc:	4a1d      	ldr	r2, [pc, #116]	; (8011474 <prvHeapInit+0xb0>)
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011402:	4b1c      	ldr	r3, [pc, #112]	; (8011474 <prvHeapInit+0xb0>)
 8011404:	2200      	movs	r2, #0
 8011406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	68ba      	ldr	r2, [r7, #8]
 801140c:	4413      	add	r3, r2
 801140e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011410:	2208      	movs	r2, #8
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	1a9b      	subs	r3, r3, r2
 8011416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	f023 0307 	bic.w	r3, r3, #7
 801141e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	4a15      	ldr	r2, [pc, #84]	; (8011478 <prvHeapInit+0xb4>)
 8011424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011426:	4b14      	ldr	r3, [pc, #80]	; (8011478 <prvHeapInit+0xb4>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	2200      	movs	r2, #0
 801142c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801142e:	4b12      	ldr	r3, [pc, #72]	; (8011478 <prvHeapInit+0xb4>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	2200      	movs	r2, #0
 8011434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	68fa      	ldr	r2, [r7, #12]
 801143e:	1ad2      	subs	r2, r2, r3
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011444:	4b0c      	ldr	r3, [pc, #48]	; (8011478 <prvHeapInit+0xb4>)
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	685b      	ldr	r3, [r3, #4]
 8011450:	4a0a      	ldr	r2, [pc, #40]	; (801147c <prvHeapInit+0xb8>)
 8011452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	4a09      	ldr	r2, [pc, #36]	; (8011480 <prvHeapInit+0xbc>)
 801145a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801145c:	4b09      	ldr	r3, [pc, #36]	; (8011484 <prvHeapInit+0xc0>)
 801145e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011462:	601a      	str	r2, [r3, #0]
}
 8011464:	bf00      	nop
 8011466:	3714      	adds	r7, #20
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr
 8011470:	200012a4 	.word	0x200012a4
 8011474:	20009b5c 	.word	0x20009b5c
 8011478:	20009b64 	.word	0x20009b64
 801147c:	20009b6c 	.word	0x20009b6c
 8011480:	20009b68 	.word	0x20009b68
 8011484:	20009b78 	.word	0x20009b78

08011488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011488:	b480      	push	{r7}
 801148a:	b085      	sub	sp, #20
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011490:	4b28      	ldr	r3, [pc, #160]	; (8011534 <prvInsertBlockIntoFreeList+0xac>)
 8011492:	60fb      	str	r3, [r7, #12]
 8011494:	e002      	b.n	801149c <prvInsertBlockIntoFreeList+0x14>
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	60fb      	str	r3, [r7, #12]
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	687a      	ldr	r2, [r7, #4]
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d8f7      	bhi.n	8011496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	68ba      	ldr	r2, [r7, #8]
 80114b0:	4413      	add	r3, r2
 80114b2:	687a      	ldr	r2, [r7, #4]
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d108      	bne.n	80114ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	685a      	ldr	r2, [r3, #4]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	685b      	ldr	r3, [r3, #4]
 80114c0:	441a      	add	r2, r3
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	68ba      	ldr	r2, [r7, #8]
 80114d4:	441a      	add	r2, r3
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	429a      	cmp	r2, r3
 80114dc:	d118      	bne.n	8011510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	681a      	ldr	r2, [r3, #0]
 80114e2:	4b15      	ldr	r3, [pc, #84]	; (8011538 <prvInsertBlockIntoFreeList+0xb0>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d00d      	beq.n	8011506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	685a      	ldr	r2, [r3, #4]
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	685b      	ldr	r3, [r3, #4]
 80114f4:	441a      	add	r2, r3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	681a      	ldr	r2, [r3, #0]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	601a      	str	r2, [r3, #0]
 8011504:	e008      	b.n	8011518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011506:	4b0c      	ldr	r3, [pc, #48]	; (8011538 <prvInsertBlockIntoFreeList+0xb0>)
 8011508:	681a      	ldr	r2, [r3, #0]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	601a      	str	r2, [r3, #0]
 801150e:	e003      	b.n	8011518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	681a      	ldr	r2, [r3, #0]
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011518:	68fa      	ldr	r2, [r7, #12]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	429a      	cmp	r2, r3
 801151e:	d002      	beq.n	8011526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011526:	bf00      	nop
 8011528:	3714      	adds	r7, #20
 801152a:	46bd      	mov	sp, r7
 801152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011530:	4770      	bx	lr
 8011532:	bf00      	nop
 8011534:	20009b5c 	.word	0x20009b5c
 8011538:	20009b64 	.word	0x20009b64

0801153c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011540:	2200      	movs	r2, #0
 8011542:	4912      	ldr	r1, [pc, #72]	; (801158c <MX_USB_DEVICE_Init+0x50>)
 8011544:	4812      	ldr	r0, [pc, #72]	; (8011590 <MX_USB_DEVICE_Init+0x54>)
 8011546:	f7f9 fb79 	bl	800ac3c <USBD_Init>
 801154a:	4603      	mov	r3, r0
 801154c:	2b00      	cmp	r3, #0
 801154e:	d001      	beq.n	8011554 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011550:	f7f1 f9a0 	bl	8002894 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011554:	490f      	ldr	r1, [pc, #60]	; (8011594 <MX_USB_DEVICE_Init+0x58>)
 8011556:	480e      	ldr	r0, [pc, #56]	; (8011590 <MX_USB_DEVICE_Init+0x54>)
 8011558:	f7f9 fba0 	bl	800ac9c <USBD_RegisterClass>
 801155c:	4603      	mov	r3, r0
 801155e:	2b00      	cmp	r3, #0
 8011560:	d001      	beq.n	8011566 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011562:	f7f1 f997 	bl	8002894 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011566:	490c      	ldr	r1, [pc, #48]	; (8011598 <MX_USB_DEVICE_Init+0x5c>)
 8011568:	4809      	ldr	r0, [pc, #36]	; (8011590 <MX_USB_DEVICE_Init+0x54>)
 801156a:	f7f9 faf1 	bl	800ab50 <USBD_CDC_RegisterInterface>
 801156e:	4603      	mov	r3, r0
 8011570:	2b00      	cmp	r3, #0
 8011572:	d001      	beq.n	8011578 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011574:	f7f1 f98e 	bl	8002894 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011578:	4805      	ldr	r0, [pc, #20]	; (8011590 <MX_USB_DEVICE_Init+0x54>)
 801157a:	f7f9 fbb6 	bl	800acea <USBD_Start>
 801157e:	4603      	mov	r3, r0
 8011580:	2b00      	cmp	r3, #0
 8011582:	d001      	beq.n	8011588 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011584:	f7f1 f986 	bl	8002894 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011588:	bf00      	nop
 801158a:	bd80      	pop	{r7, pc}
 801158c:	2000014c 	.word	0x2000014c
 8011590:	2000aa98 	.word	0x2000aa98
 8011594:	20000030 	.word	0x20000030
 8011598:	20000138 	.word	0x20000138

0801159c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80115a0:	2200      	movs	r2, #0
 80115a2:	4905      	ldr	r1, [pc, #20]	; (80115b8 <CDC_Init_FS+0x1c>)
 80115a4:	4805      	ldr	r0, [pc, #20]	; (80115bc <CDC_Init_FS+0x20>)
 80115a6:	f7f9 fae8 	bl	800ab7a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80115aa:	4905      	ldr	r1, [pc, #20]	; (80115c0 <CDC_Init_FS+0x24>)
 80115ac:	4803      	ldr	r0, [pc, #12]	; (80115bc <CDC_Init_FS+0x20>)
 80115ae:	f7f9 fb02 	bl	800abb6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80115b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	2000b568 	.word	0x2000b568
 80115bc:	2000aa98 	.word	0x2000aa98
 80115c0:	2000ad68 	.word	0x2000ad68

080115c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80115c4:	b480      	push	{r7}
 80115c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80115c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	46bd      	mov	sp, r7
 80115ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d2:	4770      	bx	lr

080115d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b083      	sub	sp, #12
 80115d8:	af00      	add	r7, sp, #0
 80115da:	4603      	mov	r3, r0
 80115dc:	6039      	str	r1, [r7, #0]
 80115de:	71fb      	strb	r3, [r7, #7]
 80115e0:	4613      	mov	r3, r2
 80115e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80115e4:	79fb      	ldrb	r3, [r7, #7]
 80115e6:	2b23      	cmp	r3, #35	; 0x23
 80115e8:	d84a      	bhi.n	8011680 <CDC_Control_FS+0xac>
 80115ea:	a201      	add	r2, pc, #4	; (adr r2, 80115f0 <CDC_Control_FS+0x1c>)
 80115ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115f0:	08011681 	.word	0x08011681
 80115f4:	08011681 	.word	0x08011681
 80115f8:	08011681 	.word	0x08011681
 80115fc:	08011681 	.word	0x08011681
 8011600:	08011681 	.word	0x08011681
 8011604:	08011681 	.word	0x08011681
 8011608:	08011681 	.word	0x08011681
 801160c:	08011681 	.word	0x08011681
 8011610:	08011681 	.word	0x08011681
 8011614:	08011681 	.word	0x08011681
 8011618:	08011681 	.word	0x08011681
 801161c:	08011681 	.word	0x08011681
 8011620:	08011681 	.word	0x08011681
 8011624:	08011681 	.word	0x08011681
 8011628:	08011681 	.word	0x08011681
 801162c:	08011681 	.word	0x08011681
 8011630:	08011681 	.word	0x08011681
 8011634:	08011681 	.word	0x08011681
 8011638:	08011681 	.word	0x08011681
 801163c:	08011681 	.word	0x08011681
 8011640:	08011681 	.word	0x08011681
 8011644:	08011681 	.word	0x08011681
 8011648:	08011681 	.word	0x08011681
 801164c:	08011681 	.word	0x08011681
 8011650:	08011681 	.word	0x08011681
 8011654:	08011681 	.word	0x08011681
 8011658:	08011681 	.word	0x08011681
 801165c:	08011681 	.word	0x08011681
 8011660:	08011681 	.word	0x08011681
 8011664:	08011681 	.word	0x08011681
 8011668:	08011681 	.word	0x08011681
 801166c:	08011681 	.word	0x08011681
 8011670:	08011681 	.word	0x08011681
 8011674:	08011681 	.word	0x08011681
 8011678:	08011681 	.word	0x08011681
 801167c:	08011681 	.word	0x08011681
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011680:	bf00      	nop
  }

  return (USBD_OK);
 8011682:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011684:	4618      	mov	r0, r3
 8011686:	370c      	adds	r7, #12
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr

08011690 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801169a:	6879      	ldr	r1, [r7, #4]
 801169c:	4805      	ldr	r0, [pc, #20]	; (80116b4 <CDC_Receive_FS+0x24>)
 801169e:	f7f9 fa8a 	bl	800abb6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80116a2:	4804      	ldr	r0, [pc, #16]	; (80116b4 <CDC_Receive_FS+0x24>)
 80116a4:	f7f9 faa0 	bl	800abe8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80116a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3708      	adds	r7, #8
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}
 80116b2:	bf00      	nop
 80116b4:	2000aa98 	.word	0x2000aa98

080116b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80116b8:	b480      	push	{r7}
 80116ba:	b087      	sub	sp, #28
 80116bc:	af00      	add	r7, sp, #0
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	60b9      	str	r1, [r7, #8]
 80116c2:	4613      	mov	r3, r2
 80116c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80116c6:	2300      	movs	r3, #0
 80116c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80116ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	371c      	adds	r7, #28
 80116d2:	46bd      	mov	sp, r7
 80116d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d8:	4770      	bx	lr
	...

080116dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116dc:	b480      	push	{r7}
 80116de:	b083      	sub	sp, #12
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	4603      	mov	r3, r0
 80116e4:	6039      	str	r1, [r7, #0]
 80116e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	2212      	movs	r2, #18
 80116ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80116ee:	4b03      	ldr	r3, [pc, #12]	; (80116fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	370c      	adds	r7, #12
 80116f4:	46bd      	mov	sp, r7
 80116f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fa:	4770      	bx	lr
 80116fc:	20000168 	.word	0x20000168

08011700 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011700:	b480      	push	{r7}
 8011702:	b083      	sub	sp, #12
 8011704:	af00      	add	r7, sp, #0
 8011706:	4603      	mov	r3, r0
 8011708:	6039      	str	r1, [r7, #0]
 801170a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	2204      	movs	r2, #4
 8011710:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011712:	4b03      	ldr	r3, [pc, #12]	; (8011720 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011714:	4618      	mov	r0, r3
 8011716:	370c      	adds	r7, #12
 8011718:	46bd      	mov	sp, r7
 801171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171e:	4770      	bx	lr
 8011720:	2000017c 	.word	0x2000017c

08011724 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b082      	sub	sp, #8
 8011728:	af00      	add	r7, sp, #0
 801172a:	4603      	mov	r3, r0
 801172c:	6039      	str	r1, [r7, #0]
 801172e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011730:	79fb      	ldrb	r3, [r7, #7]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d105      	bne.n	8011742 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011736:	683a      	ldr	r2, [r7, #0]
 8011738:	4907      	ldr	r1, [pc, #28]	; (8011758 <USBD_FS_ProductStrDescriptor+0x34>)
 801173a:	4808      	ldr	r0, [pc, #32]	; (801175c <USBD_FS_ProductStrDescriptor+0x38>)
 801173c:	f7fa fb07 	bl	800bd4e <USBD_GetString>
 8011740:	e004      	b.n	801174c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011742:	683a      	ldr	r2, [r7, #0]
 8011744:	4904      	ldr	r1, [pc, #16]	; (8011758 <USBD_FS_ProductStrDescriptor+0x34>)
 8011746:	4805      	ldr	r0, [pc, #20]	; (801175c <USBD_FS_ProductStrDescriptor+0x38>)
 8011748:	f7fa fb01 	bl	800bd4e <USBD_GetString>
  }
  return USBD_StrDesc;
 801174c:	4b02      	ldr	r3, [pc, #8]	; (8011758 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801174e:	4618      	mov	r0, r3
 8011750:	3708      	adds	r7, #8
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}
 8011756:	bf00      	nop
 8011758:	2000bd68 	.word	0x2000bd68
 801175c:	080173dc 	.word	0x080173dc

08011760 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b082      	sub	sp, #8
 8011764:	af00      	add	r7, sp, #0
 8011766:	4603      	mov	r3, r0
 8011768:	6039      	str	r1, [r7, #0]
 801176a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801176c:	683a      	ldr	r2, [r7, #0]
 801176e:	4904      	ldr	r1, [pc, #16]	; (8011780 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011770:	4804      	ldr	r0, [pc, #16]	; (8011784 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011772:	f7fa faec 	bl	800bd4e <USBD_GetString>
  return USBD_StrDesc;
 8011776:	4b02      	ldr	r3, [pc, #8]	; (8011780 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011778:	4618      	mov	r0, r3
 801177a:	3708      	adds	r7, #8
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}
 8011780:	2000bd68 	.word	0x2000bd68
 8011784:	080173f4 	.word	0x080173f4

08011788 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
 801178e:	4603      	mov	r3, r0
 8011790:	6039      	str	r1, [r7, #0]
 8011792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	221a      	movs	r2, #26
 8011798:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801179a:	f000 f843 	bl	8011824 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801179e:	4b02      	ldr	r3, [pc, #8]	; (80117a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3708      	adds	r7, #8
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}
 80117a8:	20000180 	.word	0x20000180

080117ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b082      	sub	sp, #8
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	4603      	mov	r3, r0
 80117b4:	6039      	str	r1, [r7, #0]
 80117b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80117b8:	79fb      	ldrb	r3, [r7, #7]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d105      	bne.n	80117ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80117be:	683a      	ldr	r2, [r7, #0]
 80117c0:	4907      	ldr	r1, [pc, #28]	; (80117e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80117c2:	4808      	ldr	r0, [pc, #32]	; (80117e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80117c4:	f7fa fac3 	bl	800bd4e <USBD_GetString>
 80117c8:	e004      	b.n	80117d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80117ca:	683a      	ldr	r2, [r7, #0]
 80117cc:	4904      	ldr	r1, [pc, #16]	; (80117e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80117ce:	4805      	ldr	r0, [pc, #20]	; (80117e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80117d0:	f7fa fabd 	bl	800bd4e <USBD_GetString>
  }
  return USBD_StrDesc;
 80117d4:	4b02      	ldr	r3, [pc, #8]	; (80117e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3708      	adds	r7, #8
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	bf00      	nop
 80117e0:	2000bd68 	.word	0x2000bd68
 80117e4:	08017408 	.word	0x08017408

080117e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	4603      	mov	r3, r0
 80117f0:	6039      	str	r1, [r7, #0]
 80117f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80117f4:	79fb      	ldrb	r3, [r7, #7]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d105      	bne.n	8011806 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80117fa:	683a      	ldr	r2, [r7, #0]
 80117fc:	4907      	ldr	r1, [pc, #28]	; (801181c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80117fe:	4808      	ldr	r0, [pc, #32]	; (8011820 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011800:	f7fa faa5 	bl	800bd4e <USBD_GetString>
 8011804:	e004      	b.n	8011810 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011806:	683a      	ldr	r2, [r7, #0]
 8011808:	4904      	ldr	r1, [pc, #16]	; (801181c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801180a:	4805      	ldr	r0, [pc, #20]	; (8011820 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801180c:	f7fa fa9f 	bl	800bd4e <USBD_GetString>
  }
  return USBD_StrDesc;
 8011810:	4b02      	ldr	r3, [pc, #8]	; (801181c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011812:	4618      	mov	r0, r3
 8011814:	3708      	adds	r7, #8
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	2000bd68 	.word	0x2000bd68
 8011820:	08017414 	.word	0x08017414

08011824 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b084      	sub	sp, #16
 8011828:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801182a:	4b0f      	ldr	r3, [pc, #60]	; (8011868 <Get_SerialNum+0x44>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011830:	4b0e      	ldr	r3, [pc, #56]	; (801186c <Get_SerialNum+0x48>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011836:	4b0e      	ldr	r3, [pc, #56]	; (8011870 <Get_SerialNum+0x4c>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801183c:	68fa      	ldr	r2, [r7, #12]
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	4413      	add	r3, r2
 8011842:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d009      	beq.n	801185e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801184a:	2208      	movs	r2, #8
 801184c:	4909      	ldr	r1, [pc, #36]	; (8011874 <Get_SerialNum+0x50>)
 801184e:	68f8      	ldr	r0, [r7, #12]
 8011850:	f000 f814 	bl	801187c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011854:	2204      	movs	r2, #4
 8011856:	4908      	ldr	r1, [pc, #32]	; (8011878 <Get_SerialNum+0x54>)
 8011858:	68b8      	ldr	r0, [r7, #8]
 801185a:	f000 f80f 	bl	801187c <IntToUnicode>
  }
}
 801185e:	bf00      	nop
 8011860:	3710      	adds	r7, #16
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
 8011866:	bf00      	nop
 8011868:	1fff7a10 	.word	0x1fff7a10
 801186c:	1fff7a14 	.word	0x1fff7a14
 8011870:	1fff7a18 	.word	0x1fff7a18
 8011874:	20000182 	.word	0x20000182
 8011878:	20000192 	.word	0x20000192

0801187c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801187c:	b480      	push	{r7}
 801187e:	b087      	sub	sp, #28
 8011880:	af00      	add	r7, sp, #0
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	60b9      	str	r1, [r7, #8]
 8011886:	4613      	mov	r3, r2
 8011888:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801188a:	2300      	movs	r3, #0
 801188c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801188e:	2300      	movs	r3, #0
 8011890:	75fb      	strb	r3, [r7, #23]
 8011892:	e027      	b.n	80118e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	0f1b      	lsrs	r3, r3, #28
 8011898:	2b09      	cmp	r3, #9
 801189a:	d80b      	bhi.n	80118b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	0f1b      	lsrs	r3, r3, #28
 80118a0:	b2da      	uxtb	r2, r3
 80118a2:	7dfb      	ldrb	r3, [r7, #23]
 80118a4:	005b      	lsls	r3, r3, #1
 80118a6:	4619      	mov	r1, r3
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	440b      	add	r3, r1
 80118ac:	3230      	adds	r2, #48	; 0x30
 80118ae:	b2d2      	uxtb	r2, r2
 80118b0:	701a      	strb	r2, [r3, #0]
 80118b2:	e00a      	b.n	80118ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	0f1b      	lsrs	r3, r3, #28
 80118b8:	b2da      	uxtb	r2, r3
 80118ba:	7dfb      	ldrb	r3, [r7, #23]
 80118bc:	005b      	lsls	r3, r3, #1
 80118be:	4619      	mov	r1, r3
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	440b      	add	r3, r1
 80118c4:	3237      	adds	r2, #55	; 0x37
 80118c6:	b2d2      	uxtb	r2, r2
 80118c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	011b      	lsls	r3, r3, #4
 80118ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80118d0:	7dfb      	ldrb	r3, [r7, #23]
 80118d2:	005b      	lsls	r3, r3, #1
 80118d4:	3301      	adds	r3, #1
 80118d6:	68ba      	ldr	r2, [r7, #8]
 80118d8:	4413      	add	r3, r2
 80118da:	2200      	movs	r2, #0
 80118dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80118de:	7dfb      	ldrb	r3, [r7, #23]
 80118e0:	3301      	adds	r3, #1
 80118e2:	75fb      	strb	r3, [r7, #23]
 80118e4:	7dfa      	ldrb	r2, [r7, #23]
 80118e6:	79fb      	ldrb	r3, [r7, #7]
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d3d3      	bcc.n	8011894 <IntToUnicode+0x18>
  }
}
 80118ec:	bf00      	nop
 80118ee:	bf00      	nop
 80118f0:	371c      	adds	r7, #28
 80118f2:	46bd      	mov	sp, r7
 80118f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f8:	4770      	bx	lr
	...

080118fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b08a      	sub	sp, #40	; 0x28
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011904:	f107 0314 	add.w	r3, r7, #20
 8011908:	2200      	movs	r2, #0
 801190a:	601a      	str	r2, [r3, #0]
 801190c:	605a      	str	r2, [r3, #4]
 801190e:	609a      	str	r2, [r3, #8]
 8011910:	60da      	str	r2, [r3, #12]
 8011912:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801191c:	d147      	bne.n	80119ae <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801191e:	2300      	movs	r3, #0
 8011920:	613b      	str	r3, [r7, #16]
 8011922:	4b25      	ldr	r3, [pc, #148]	; (80119b8 <HAL_PCD_MspInit+0xbc>)
 8011924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011926:	4a24      	ldr	r2, [pc, #144]	; (80119b8 <HAL_PCD_MspInit+0xbc>)
 8011928:	f043 0301 	orr.w	r3, r3, #1
 801192c:	6313      	str	r3, [r2, #48]	; 0x30
 801192e:	4b22      	ldr	r3, [pc, #136]	; (80119b8 <HAL_PCD_MspInit+0xbc>)
 8011930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011932:	f003 0301 	and.w	r3, r3, #1
 8011936:	613b      	str	r3, [r7, #16]
 8011938:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801193a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801193e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011940:	2300      	movs	r3, #0
 8011942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011944:	2300      	movs	r3, #0
 8011946:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011948:	f107 0314 	add.w	r3, r7, #20
 801194c:	4619      	mov	r1, r3
 801194e:	481b      	ldr	r0, [pc, #108]	; (80119bc <HAL_PCD_MspInit+0xc0>)
 8011950:	f7f1 ff52 	bl	80037f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011954:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801195a:	2302      	movs	r3, #2
 801195c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801195e:	2300      	movs	r3, #0
 8011960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011962:	2303      	movs	r3, #3
 8011964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011966:	230a      	movs	r3, #10
 8011968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801196a:	f107 0314 	add.w	r3, r7, #20
 801196e:	4619      	mov	r1, r3
 8011970:	4812      	ldr	r0, [pc, #72]	; (80119bc <HAL_PCD_MspInit+0xc0>)
 8011972:	f7f1 ff41 	bl	80037f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011976:	4b10      	ldr	r3, [pc, #64]	; (80119b8 <HAL_PCD_MspInit+0xbc>)
 8011978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801197a:	4a0f      	ldr	r2, [pc, #60]	; (80119b8 <HAL_PCD_MspInit+0xbc>)
 801197c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011980:	6353      	str	r3, [r2, #52]	; 0x34
 8011982:	2300      	movs	r3, #0
 8011984:	60fb      	str	r3, [r7, #12]
 8011986:	4b0c      	ldr	r3, [pc, #48]	; (80119b8 <HAL_PCD_MspInit+0xbc>)
 8011988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801198a:	4a0b      	ldr	r2, [pc, #44]	; (80119b8 <HAL_PCD_MspInit+0xbc>)
 801198c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011990:	6453      	str	r3, [r2, #68]	; 0x44
 8011992:	4b09      	ldr	r3, [pc, #36]	; (80119b8 <HAL_PCD_MspInit+0xbc>)
 8011994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801199a:	60fb      	str	r3, [r7, #12]
 801199c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801199e:	2200      	movs	r2, #0
 80119a0:	2105      	movs	r1, #5
 80119a2:	2043      	movs	r0, #67	; 0x43
 80119a4:	f7f1 fefe 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80119a8:	2043      	movs	r0, #67	; 0x43
 80119aa:	f7f1 ff17 	bl	80037dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80119ae:	bf00      	nop
 80119b0:	3728      	adds	r7, #40	; 0x28
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}
 80119b6:	bf00      	nop
 80119b8:	40023800 	.word	0x40023800
 80119bc:	40020000 	.word	0x40020000

080119c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b082      	sub	sp, #8
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80119d4:	4619      	mov	r1, r3
 80119d6:	4610      	mov	r0, r2
 80119d8:	f7f9 f9d2 	bl	800ad80 <USBD_LL_SetupStage>
}
 80119dc:	bf00      	nop
 80119de:	3708      	adds	r7, #8
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}

080119e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b082      	sub	sp, #8
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	460b      	mov	r3, r1
 80119ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80119f6:	78fa      	ldrb	r2, [r7, #3]
 80119f8:	6879      	ldr	r1, [r7, #4]
 80119fa:	4613      	mov	r3, r2
 80119fc:	00db      	lsls	r3, r3, #3
 80119fe:	1a9b      	subs	r3, r3, r2
 8011a00:	009b      	lsls	r3, r3, #2
 8011a02:	440b      	add	r3, r1
 8011a04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011a08:	681a      	ldr	r2, [r3, #0]
 8011a0a:	78fb      	ldrb	r3, [r7, #3]
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	f7f9 fa0c 	bl	800ae2a <USBD_LL_DataOutStage>
}
 8011a12:	bf00      	nop
 8011a14:	3708      	adds	r7, #8
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}

08011a1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a1a:	b580      	push	{r7, lr}
 8011a1c:	b082      	sub	sp, #8
 8011a1e:	af00      	add	r7, sp, #0
 8011a20:	6078      	str	r0, [r7, #4]
 8011a22:	460b      	mov	r3, r1
 8011a24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011a2c:	78fa      	ldrb	r2, [r7, #3]
 8011a2e:	6879      	ldr	r1, [r7, #4]
 8011a30:	4613      	mov	r3, r2
 8011a32:	00db      	lsls	r3, r3, #3
 8011a34:	1a9b      	subs	r3, r3, r2
 8011a36:	009b      	lsls	r3, r3, #2
 8011a38:	440b      	add	r3, r1
 8011a3a:	3348      	adds	r3, #72	; 0x48
 8011a3c:	681a      	ldr	r2, [r3, #0]
 8011a3e:	78fb      	ldrb	r3, [r7, #3]
 8011a40:	4619      	mov	r1, r3
 8011a42:	f7f9 fa55 	bl	800aef0 <USBD_LL_DataInStage>
}
 8011a46:	bf00      	nop
 8011a48:	3708      	adds	r7, #8
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}

08011a4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a4e:	b580      	push	{r7, lr}
 8011a50:	b082      	sub	sp, #8
 8011a52:	af00      	add	r7, sp, #0
 8011a54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7f9 fb69 	bl	800b134 <USBD_LL_SOF>
}
 8011a62:	bf00      	nop
 8011a64:	3708      	adds	r7, #8
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}

08011a6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a6a:	b580      	push	{r7, lr}
 8011a6c:	b084      	sub	sp, #16
 8011a6e:	af00      	add	r7, sp, #0
 8011a70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011a72:	2301      	movs	r3, #1
 8011a74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	68db      	ldr	r3, [r3, #12]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d102      	bne.n	8011a84 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	73fb      	strb	r3, [r7, #15]
 8011a82:	e008      	b.n	8011a96 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	68db      	ldr	r3, [r3, #12]
 8011a88:	2b02      	cmp	r3, #2
 8011a8a:	d102      	bne.n	8011a92 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	73fb      	strb	r3, [r7, #15]
 8011a90:	e001      	b.n	8011a96 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011a92:	f7f0 feff 	bl	8002894 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011a9c:	7bfa      	ldrb	r2, [r7, #15]
 8011a9e:	4611      	mov	r1, r2
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f7f9 fb09 	bl	800b0b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011aac:	4618      	mov	r0, r3
 8011aae:	f7f9 fab5 	bl	800b01c <USBD_LL_Reset>
}
 8011ab2:	bf00      	nop
 8011ab4:	3710      	adds	r7, #16
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
	...

08011abc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b082      	sub	sp, #8
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7f9 fb04 	bl	800b0d8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	687a      	ldr	r2, [r7, #4]
 8011adc:	6812      	ldr	r2, [r2, #0]
 8011ade:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011ae2:	f043 0301 	orr.w	r3, r3, #1
 8011ae6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6a1b      	ldr	r3, [r3, #32]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d005      	beq.n	8011afc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011af0:	4b04      	ldr	r3, [pc, #16]	; (8011b04 <HAL_PCD_SuspendCallback+0x48>)
 8011af2:	691b      	ldr	r3, [r3, #16]
 8011af4:	4a03      	ldr	r2, [pc, #12]	; (8011b04 <HAL_PCD_SuspendCallback+0x48>)
 8011af6:	f043 0306 	orr.w	r3, r3, #6
 8011afa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011afc:	bf00      	nop
 8011afe:	3708      	adds	r7, #8
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd80      	pop	{r7, pc}
 8011b04:	e000ed00 	.word	0xe000ed00

08011b08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7f9 faf4 	bl	800b104 <USBD_LL_Resume>
}
 8011b1c:	bf00      	nop
 8011b1e:	3708      	adds	r7, #8
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}

08011b24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	460b      	mov	r3, r1
 8011b2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011b36:	78fa      	ldrb	r2, [r7, #3]
 8011b38:	4611      	mov	r1, r2
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7f9 fb42 	bl	800b1c4 <USBD_LL_IsoOUTIncomplete>
}
 8011b40:	bf00      	nop
 8011b42:	3708      	adds	r7, #8
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b082      	sub	sp, #8
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
 8011b50:	460b      	mov	r3, r1
 8011b52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011b5a:	78fa      	ldrb	r2, [r7, #3]
 8011b5c:	4611      	mov	r1, r2
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7f9 fb0a 	bl	800b178 <USBD_LL_IsoINIncomplete>
}
 8011b64:	bf00      	nop
 8011b66:	3708      	adds	r7, #8
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f7f9 fb48 	bl	800b210 <USBD_LL_DevConnected>
}
 8011b80:	bf00      	nop
 8011b82:	3708      	adds	r7, #8
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}

08011b88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7f9 fb45 	bl	800b226 <USBD_LL_DevDisconnected>
}
 8011b9c:	bf00      	nop
 8011b9e:	3708      	adds	r7, #8
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	781b      	ldrb	r3, [r3, #0]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d13c      	bne.n	8011c2e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011bb4:	4a20      	ldr	r2, [pc, #128]	; (8011c38 <USBD_LL_Init+0x94>)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	4a1e      	ldr	r2, [pc, #120]	; (8011c38 <USBD_LL_Init+0x94>)
 8011bc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011bc4:	4b1c      	ldr	r3, [pc, #112]	; (8011c38 <USBD_LL_Init+0x94>)
 8011bc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011bca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011bcc:	4b1a      	ldr	r3, [pc, #104]	; (8011c38 <USBD_LL_Init+0x94>)
 8011bce:	2204      	movs	r2, #4
 8011bd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011bd2:	4b19      	ldr	r3, [pc, #100]	; (8011c38 <USBD_LL_Init+0x94>)
 8011bd4:	2202      	movs	r2, #2
 8011bd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011bd8:	4b17      	ldr	r3, [pc, #92]	; (8011c38 <USBD_LL_Init+0x94>)
 8011bda:	2200      	movs	r2, #0
 8011bdc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011bde:	4b16      	ldr	r3, [pc, #88]	; (8011c38 <USBD_LL_Init+0x94>)
 8011be0:	2202      	movs	r2, #2
 8011be2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011be4:	4b14      	ldr	r3, [pc, #80]	; (8011c38 <USBD_LL_Init+0x94>)
 8011be6:	2200      	movs	r2, #0
 8011be8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011bea:	4b13      	ldr	r3, [pc, #76]	; (8011c38 <USBD_LL_Init+0x94>)
 8011bec:	2200      	movs	r2, #0
 8011bee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011bf0:	4b11      	ldr	r3, [pc, #68]	; (8011c38 <USBD_LL_Init+0x94>)
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8011bf6:	4b10      	ldr	r3, [pc, #64]	; (8011c38 <USBD_LL_Init+0x94>)
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011bfc:	4b0e      	ldr	r3, [pc, #56]	; (8011c38 <USBD_LL_Init+0x94>)
 8011bfe:	2200      	movs	r2, #0
 8011c00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011c02:	480d      	ldr	r0, [pc, #52]	; (8011c38 <USBD_LL_Init+0x94>)
 8011c04:	f7f3 f834 	bl	8004c70 <HAL_PCD_Init>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d001      	beq.n	8011c12 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011c0e:	f7f0 fe41 	bl	8002894 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011c12:	2180      	movs	r1, #128	; 0x80
 8011c14:	4808      	ldr	r0, [pc, #32]	; (8011c38 <USBD_LL_Init+0x94>)
 8011c16:	f7f4 f992 	bl	8005f3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011c1a:	2240      	movs	r2, #64	; 0x40
 8011c1c:	2100      	movs	r1, #0
 8011c1e:	4806      	ldr	r0, [pc, #24]	; (8011c38 <USBD_LL_Init+0x94>)
 8011c20:	f7f4 f946 	bl	8005eb0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011c24:	2280      	movs	r2, #128	; 0x80
 8011c26:	2101      	movs	r1, #1
 8011c28:	4803      	ldr	r0, [pc, #12]	; (8011c38 <USBD_LL_Init+0x94>)
 8011c2a:	f7f4 f941 	bl	8005eb0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011c2e:	2300      	movs	r3, #0
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	3708      	adds	r7, #8
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}
 8011c38:	2000bf68 	.word	0x2000bf68

08011c3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b084      	sub	sp, #16
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c44:	2300      	movs	r3, #0
 8011c46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7f3 f929 	bl	8004eaa <HAL_PCD_Start>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c5c:	7bfb      	ldrb	r3, [r7, #15]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f000 f942 	bl	8011ee8 <USBD_Get_USB_Status>
 8011c64:	4603      	mov	r3, r0
 8011c66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c68:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3710      	adds	r7, #16
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}

08011c72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011c72:	b580      	push	{r7, lr}
 8011c74:	b084      	sub	sp, #16
 8011c76:	af00      	add	r7, sp, #0
 8011c78:	6078      	str	r0, [r7, #4]
 8011c7a:	4608      	mov	r0, r1
 8011c7c:	4611      	mov	r1, r2
 8011c7e:	461a      	mov	r2, r3
 8011c80:	4603      	mov	r3, r0
 8011c82:	70fb      	strb	r3, [r7, #3]
 8011c84:	460b      	mov	r3, r1
 8011c86:	70bb      	strb	r3, [r7, #2]
 8011c88:	4613      	mov	r3, r2
 8011c8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c90:	2300      	movs	r3, #0
 8011c92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011c9a:	78bb      	ldrb	r3, [r7, #2]
 8011c9c:	883a      	ldrh	r2, [r7, #0]
 8011c9e:	78f9      	ldrb	r1, [r7, #3]
 8011ca0:	f7f3 fd0d 	bl	80056be <HAL_PCD_EP_Open>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ca8:	7bfb      	ldrb	r3, [r7, #15]
 8011caa:	4618      	mov	r0, r3
 8011cac:	f000 f91c 	bl	8011ee8 <USBD_Get_USB_Status>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b084      	sub	sp, #16
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	6078      	str	r0, [r7, #4]
 8011cc6:	460b      	mov	r3, r1
 8011cc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011cd8:	78fa      	ldrb	r2, [r7, #3]
 8011cda:	4611      	mov	r1, r2
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7f3 fd56 	bl	800578e <HAL_PCD_EP_Close>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ce6:	7bfb      	ldrb	r3, [r7, #15]
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f000 f8fd 	bl	8011ee8 <USBD_Get_USB_Status>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3710      	adds	r7, #16
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}

08011cfc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b084      	sub	sp, #16
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	460b      	mov	r3, r1
 8011d06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d16:	78fa      	ldrb	r2, [r7, #3]
 8011d18:	4611      	mov	r1, r2
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f7f3 fe2e 	bl	800597c <HAL_PCD_EP_SetStall>
 8011d20:	4603      	mov	r3, r0
 8011d22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d24:	7bfb      	ldrb	r3, [r7, #15]
 8011d26:	4618      	mov	r0, r3
 8011d28:	f000 f8de 	bl	8011ee8 <USBD_Get_USB_Status>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d30:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3710      	adds	r7, #16
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}

08011d3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d3a:	b580      	push	{r7, lr}
 8011d3c:	b084      	sub	sp, #16
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	6078      	str	r0, [r7, #4]
 8011d42:	460b      	mov	r3, r1
 8011d44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d46:	2300      	movs	r3, #0
 8011d48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d54:	78fa      	ldrb	r2, [r7, #3]
 8011d56:	4611      	mov	r1, r2
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7f3 fe73 	bl	8005a44 <HAL_PCD_EP_ClrStall>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d62:	7bfb      	ldrb	r3, [r7, #15]
 8011d64:	4618      	mov	r0, r3
 8011d66:	f000 f8bf 	bl	8011ee8 <USBD_Get_USB_Status>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	3710      	adds	r7, #16
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}

08011d78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d78:	b480      	push	{r7}
 8011d7a:	b085      	sub	sp, #20
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	460b      	mov	r3, r1
 8011d82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	da0b      	bge.n	8011dac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011d94:	78fb      	ldrb	r3, [r7, #3]
 8011d96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d9a:	68f9      	ldr	r1, [r7, #12]
 8011d9c:	4613      	mov	r3, r2
 8011d9e:	00db      	lsls	r3, r3, #3
 8011da0:	1a9b      	subs	r3, r3, r2
 8011da2:	009b      	lsls	r3, r3, #2
 8011da4:	440b      	add	r3, r1
 8011da6:	333e      	adds	r3, #62	; 0x3e
 8011da8:	781b      	ldrb	r3, [r3, #0]
 8011daa:	e00b      	b.n	8011dc4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011dac:	78fb      	ldrb	r3, [r7, #3]
 8011dae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011db2:	68f9      	ldr	r1, [r7, #12]
 8011db4:	4613      	mov	r3, r2
 8011db6:	00db      	lsls	r3, r3, #3
 8011db8:	1a9b      	subs	r3, r3, r2
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	440b      	add	r3, r1
 8011dbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011dc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3714      	adds	r7, #20
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dce:	4770      	bx	lr

08011dd0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b084      	sub	sp, #16
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	460b      	mov	r3, r1
 8011dda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ddc:	2300      	movs	r3, #0
 8011dde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011de0:	2300      	movs	r3, #0
 8011de2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011dea:	78fa      	ldrb	r2, [r7, #3]
 8011dec:	4611      	mov	r1, r2
 8011dee:	4618      	mov	r0, r3
 8011df0:	f7f3 fc40 	bl	8005674 <HAL_PCD_SetAddress>
 8011df4:	4603      	mov	r3, r0
 8011df6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011df8:	7bfb      	ldrb	r3, [r7, #15]
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f000 f874 	bl	8011ee8 <USBD_Get_USB_Status>
 8011e00:	4603      	mov	r3, r0
 8011e02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e04:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	3710      	adds	r7, #16
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}

08011e0e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011e0e:	b580      	push	{r7, lr}
 8011e10:	b086      	sub	sp, #24
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	60f8      	str	r0, [r7, #12]
 8011e16:	607a      	str	r2, [r7, #4]
 8011e18:	603b      	str	r3, [r7, #0]
 8011e1a:	460b      	mov	r3, r1
 8011e1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e22:	2300      	movs	r3, #0
 8011e24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011e2c:	7af9      	ldrb	r1, [r7, #11]
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	687a      	ldr	r2, [r7, #4]
 8011e32:	f7f3 fd59 	bl	80058e8 <HAL_PCD_EP_Transmit>
 8011e36:	4603      	mov	r3, r0
 8011e38:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e3a:	7dfb      	ldrb	r3, [r7, #23]
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f000 f853 	bl	8011ee8 <USBD_Get_USB_Status>
 8011e42:	4603      	mov	r3, r0
 8011e44:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011e46:	7dbb      	ldrb	r3, [r7, #22]
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3718      	adds	r7, #24
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}

08011e50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b086      	sub	sp, #24
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	60f8      	str	r0, [r7, #12]
 8011e58:	607a      	str	r2, [r7, #4]
 8011e5a:	603b      	str	r3, [r7, #0]
 8011e5c:	460b      	mov	r3, r1
 8011e5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e60:	2300      	movs	r3, #0
 8011e62:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e64:	2300      	movs	r3, #0
 8011e66:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011e6e:	7af9      	ldrb	r1, [r7, #11]
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	687a      	ldr	r2, [r7, #4]
 8011e74:	f7f3 fcd5 	bl	8005822 <HAL_PCD_EP_Receive>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e7c:	7dfb      	ldrb	r3, [r7, #23]
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f000 f832 	bl	8011ee8 <USBD_Get_USB_Status>
 8011e84:	4603      	mov	r3, r0
 8011e86:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011e88:	7dbb      	ldrb	r3, [r7, #22]
}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	3718      	adds	r7, #24
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}

08011e92 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e92:	b580      	push	{r7, lr}
 8011e94:	b082      	sub	sp, #8
 8011e96:	af00      	add	r7, sp, #0
 8011e98:	6078      	str	r0, [r7, #4]
 8011e9a:	460b      	mov	r3, r1
 8011e9c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011ea4:	78fa      	ldrb	r2, [r7, #3]
 8011ea6:	4611      	mov	r1, r2
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f7f3 fd05 	bl	80058b8 <HAL_PCD_EP_GetRxCount>
 8011eae:	4603      	mov	r3, r0
}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3708      	adds	r7, #8
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}

08011eb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b083      	sub	sp, #12
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011ec0:	4b03      	ldr	r3, [pc, #12]	; (8011ed0 <USBD_static_malloc+0x18>)
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	370c      	adds	r7, #12
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ecc:	4770      	bx	lr
 8011ece:	bf00      	nop
 8011ed0:	20009b7c 	.word	0x20009b7c

08011ed4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]

}
 8011edc:	bf00      	nop
 8011ede:	370c      	adds	r7, #12
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee6:	4770      	bx	lr

08011ee8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011ee8:	b480      	push	{r7}
 8011eea:	b085      	sub	sp, #20
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	4603      	mov	r3, r0
 8011ef0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011ef6:	79fb      	ldrb	r3, [r7, #7]
 8011ef8:	2b03      	cmp	r3, #3
 8011efa:	d817      	bhi.n	8011f2c <USBD_Get_USB_Status+0x44>
 8011efc:	a201      	add	r2, pc, #4	; (adr r2, 8011f04 <USBD_Get_USB_Status+0x1c>)
 8011efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f02:	bf00      	nop
 8011f04:	08011f15 	.word	0x08011f15
 8011f08:	08011f1b 	.word	0x08011f1b
 8011f0c:	08011f21 	.word	0x08011f21
 8011f10:	08011f27 	.word	0x08011f27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011f14:	2300      	movs	r3, #0
 8011f16:	73fb      	strb	r3, [r7, #15]
    break;
 8011f18:	e00b      	b.n	8011f32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011f1a:	2303      	movs	r3, #3
 8011f1c:	73fb      	strb	r3, [r7, #15]
    break;
 8011f1e:	e008      	b.n	8011f32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011f20:	2301      	movs	r3, #1
 8011f22:	73fb      	strb	r3, [r7, #15]
    break;
 8011f24:	e005      	b.n	8011f32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011f26:	2303      	movs	r3, #3
 8011f28:	73fb      	strb	r3, [r7, #15]
    break;
 8011f2a:	e002      	b.n	8011f32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011f2c:	2303      	movs	r3, #3
 8011f2e:	73fb      	strb	r3, [r7, #15]
    break;
 8011f30:	bf00      	nop
  }
  return usb_status;
 8011f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	3714      	adds	r7, #20
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3e:	4770      	bx	lr

08011f40 <__errno>:
 8011f40:	4b01      	ldr	r3, [pc, #4]	; (8011f48 <__errno+0x8>)
 8011f42:	6818      	ldr	r0, [r3, #0]
 8011f44:	4770      	bx	lr
 8011f46:	bf00      	nop
 8011f48:	2000019c 	.word	0x2000019c

08011f4c <std>:
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	b510      	push	{r4, lr}
 8011f50:	4604      	mov	r4, r0
 8011f52:	e9c0 3300 	strd	r3, r3, [r0]
 8011f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f5a:	6083      	str	r3, [r0, #8]
 8011f5c:	8181      	strh	r1, [r0, #12]
 8011f5e:	6643      	str	r3, [r0, #100]	; 0x64
 8011f60:	81c2      	strh	r2, [r0, #14]
 8011f62:	6183      	str	r3, [r0, #24]
 8011f64:	4619      	mov	r1, r3
 8011f66:	2208      	movs	r2, #8
 8011f68:	305c      	adds	r0, #92	; 0x5c
 8011f6a:	f000 f91a 	bl	80121a2 <memset>
 8011f6e:	4b05      	ldr	r3, [pc, #20]	; (8011f84 <std+0x38>)
 8011f70:	6263      	str	r3, [r4, #36]	; 0x24
 8011f72:	4b05      	ldr	r3, [pc, #20]	; (8011f88 <std+0x3c>)
 8011f74:	62a3      	str	r3, [r4, #40]	; 0x28
 8011f76:	4b05      	ldr	r3, [pc, #20]	; (8011f8c <std+0x40>)
 8011f78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011f7a:	4b05      	ldr	r3, [pc, #20]	; (8011f90 <std+0x44>)
 8011f7c:	6224      	str	r4, [r4, #32]
 8011f7e:	6323      	str	r3, [r4, #48]	; 0x30
 8011f80:	bd10      	pop	{r4, pc}
 8011f82:	bf00      	nop
 8011f84:	080130f5 	.word	0x080130f5
 8011f88:	0801311b 	.word	0x0801311b
 8011f8c:	08013153 	.word	0x08013153
 8011f90:	08013177 	.word	0x08013177

08011f94 <_cleanup_r>:
 8011f94:	4901      	ldr	r1, [pc, #4]	; (8011f9c <_cleanup_r+0x8>)
 8011f96:	f000 b8af 	b.w	80120f8 <_fwalk_reent>
 8011f9a:	bf00      	nop
 8011f9c:	08014dc5 	.word	0x08014dc5

08011fa0 <__sfmoreglue>:
 8011fa0:	b570      	push	{r4, r5, r6, lr}
 8011fa2:	1e4a      	subs	r2, r1, #1
 8011fa4:	2568      	movs	r5, #104	; 0x68
 8011fa6:	4355      	muls	r5, r2
 8011fa8:	460e      	mov	r6, r1
 8011faa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011fae:	f000 f901 	bl	80121b4 <_malloc_r>
 8011fb2:	4604      	mov	r4, r0
 8011fb4:	b140      	cbz	r0, 8011fc8 <__sfmoreglue+0x28>
 8011fb6:	2100      	movs	r1, #0
 8011fb8:	e9c0 1600 	strd	r1, r6, [r0]
 8011fbc:	300c      	adds	r0, #12
 8011fbe:	60a0      	str	r0, [r4, #8]
 8011fc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011fc4:	f000 f8ed 	bl	80121a2 <memset>
 8011fc8:	4620      	mov	r0, r4
 8011fca:	bd70      	pop	{r4, r5, r6, pc}

08011fcc <__sfp_lock_acquire>:
 8011fcc:	4801      	ldr	r0, [pc, #4]	; (8011fd4 <__sfp_lock_acquire+0x8>)
 8011fce:	f000 b8d8 	b.w	8012182 <__retarget_lock_acquire_recursive>
 8011fd2:	bf00      	nop
 8011fd4:	2000c378 	.word	0x2000c378

08011fd8 <__sfp_lock_release>:
 8011fd8:	4801      	ldr	r0, [pc, #4]	; (8011fe0 <__sfp_lock_release+0x8>)
 8011fda:	f000 b8d3 	b.w	8012184 <__retarget_lock_release_recursive>
 8011fde:	bf00      	nop
 8011fe0:	2000c378 	.word	0x2000c378

08011fe4 <__sinit_lock_acquire>:
 8011fe4:	4801      	ldr	r0, [pc, #4]	; (8011fec <__sinit_lock_acquire+0x8>)
 8011fe6:	f000 b8cc 	b.w	8012182 <__retarget_lock_acquire_recursive>
 8011fea:	bf00      	nop
 8011fec:	2000c373 	.word	0x2000c373

08011ff0 <__sinit_lock_release>:
 8011ff0:	4801      	ldr	r0, [pc, #4]	; (8011ff8 <__sinit_lock_release+0x8>)
 8011ff2:	f000 b8c7 	b.w	8012184 <__retarget_lock_release_recursive>
 8011ff6:	bf00      	nop
 8011ff8:	2000c373 	.word	0x2000c373

08011ffc <__sinit>:
 8011ffc:	b510      	push	{r4, lr}
 8011ffe:	4604      	mov	r4, r0
 8012000:	f7ff fff0 	bl	8011fe4 <__sinit_lock_acquire>
 8012004:	69a3      	ldr	r3, [r4, #24]
 8012006:	b11b      	cbz	r3, 8012010 <__sinit+0x14>
 8012008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801200c:	f7ff bff0 	b.w	8011ff0 <__sinit_lock_release>
 8012010:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012014:	6523      	str	r3, [r4, #80]	; 0x50
 8012016:	4b13      	ldr	r3, [pc, #76]	; (8012064 <__sinit+0x68>)
 8012018:	4a13      	ldr	r2, [pc, #76]	; (8012068 <__sinit+0x6c>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	62a2      	str	r2, [r4, #40]	; 0x28
 801201e:	42a3      	cmp	r3, r4
 8012020:	bf04      	itt	eq
 8012022:	2301      	moveq	r3, #1
 8012024:	61a3      	streq	r3, [r4, #24]
 8012026:	4620      	mov	r0, r4
 8012028:	f000 f820 	bl	801206c <__sfp>
 801202c:	6060      	str	r0, [r4, #4]
 801202e:	4620      	mov	r0, r4
 8012030:	f000 f81c 	bl	801206c <__sfp>
 8012034:	60a0      	str	r0, [r4, #8]
 8012036:	4620      	mov	r0, r4
 8012038:	f000 f818 	bl	801206c <__sfp>
 801203c:	2200      	movs	r2, #0
 801203e:	60e0      	str	r0, [r4, #12]
 8012040:	2104      	movs	r1, #4
 8012042:	6860      	ldr	r0, [r4, #4]
 8012044:	f7ff ff82 	bl	8011f4c <std>
 8012048:	68a0      	ldr	r0, [r4, #8]
 801204a:	2201      	movs	r2, #1
 801204c:	2109      	movs	r1, #9
 801204e:	f7ff ff7d 	bl	8011f4c <std>
 8012052:	68e0      	ldr	r0, [r4, #12]
 8012054:	2202      	movs	r2, #2
 8012056:	2112      	movs	r1, #18
 8012058:	f7ff ff78 	bl	8011f4c <std>
 801205c:	2301      	movs	r3, #1
 801205e:	61a3      	str	r3, [r4, #24]
 8012060:	e7d2      	b.n	8012008 <__sinit+0xc>
 8012062:	bf00      	nop
 8012064:	080176f0 	.word	0x080176f0
 8012068:	08011f95 	.word	0x08011f95

0801206c <__sfp>:
 801206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801206e:	4607      	mov	r7, r0
 8012070:	f7ff ffac 	bl	8011fcc <__sfp_lock_acquire>
 8012074:	4b1e      	ldr	r3, [pc, #120]	; (80120f0 <__sfp+0x84>)
 8012076:	681e      	ldr	r6, [r3, #0]
 8012078:	69b3      	ldr	r3, [r6, #24]
 801207a:	b913      	cbnz	r3, 8012082 <__sfp+0x16>
 801207c:	4630      	mov	r0, r6
 801207e:	f7ff ffbd 	bl	8011ffc <__sinit>
 8012082:	3648      	adds	r6, #72	; 0x48
 8012084:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012088:	3b01      	subs	r3, #1
 801208a:	d503      	bpl.n	8012094 <__sfp+0x28>
 801208c:	6833      	ldr	r3, [r6, #0]
 801208e:	b30b      	cbz	r3, 80120d4 <__sfp+0x68>
 8012090:	6836      	ldr	r6, [r6, #0]
 8012092:	e7f7      	b.n	8012084 <__sfp+0x18>
 8012094:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012098:	b9d5      	cbnz	r5, 80120d0 <__sfp+0x64>
 801209a:	4b16      	ldr	r3, [pc, #88]	; (80120f4 <__sfp+0x88>)
 801209c:	60e3      	str	r3, [r4, #12]
 801209e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80120a2:	6665      	str	r5, [r4, #100]	; 0x64
 80120a4:	f000 f86c 	bl	8012180 <__retarget_lock_init_recursive>
 80120a8:	f7ff ff96 	bl	8011fd8 <__sfp_lock_release>
 80120ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80120b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80120b4:	6025      	str	r5, [r4, #0]
 80120b6:	61a5      	str	r5, [r4, #24]
 80120b8:	2208      	movs	r2, #8
 80120ba:	4629      	mov	r1, r5
 80120bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80120c0:	f000 f86f 	bl	80121a2 <memset>
 80120c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80120c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80120cc:	4620      	mov	r0, r4
 80120ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120d0:	3468      	adds	r4, #104	; 0x68
 80120d2:	e7d9      	b.n	8012088 <__sfp+0x1c>
 80120d4:	2104      	movs	r1, #4
 80120d6:	4638      	mov	r0, r7
 80120d8:	f7ff ff62 	bl	8011fa0 <__sfmoreglue>
 80120dc:	4604      	mov	r4, r0
 80120de:	6030      	str	r0, [r6, #0]
 80120e0:	2800      	cmp	r0, #0
 80120e2:	d1d5      	bne.n	8012090 <__sfp+0x24>
 80120e4:	f7ff ff78 	bl	8011fd8 <__sfp_lock_release>
 80120e8:	230c      	movs	r3, #12
 80120ea:	603b      	str	r3, [r7, #0]
 80120ec:	e7ee      	b.n	80120cc <__sfp+0x60>
 80120ee:	bf00      	nop
 80120f0:	080176f0 	.word	0x080176f0
 80120f4:	ffff0001 	.word	0xffff0001

080120f8 <_fwalk_reent>:
 80120f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120fc:	4606      	mov	r6, r0
 80120fe:	4688      	mov	r8, r1
 8012100:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012104:	2700      	movs	r7, #0
 8012106:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801210a:	f1b9 0901 	subs.w	r9, r9, #1
 801210e:	d505      	bpl.n	801211c <_fwalk_reent+0x24>
 8012110:	6824      	ldr	r4, [r4, #0]
 8012112:	2c00      	cmp	r4, #0
 8012114:	d1f7      	bne.n	8012106 <_fwalk_reent+0xe>
 8012116:	4638      	mov	r0, r7
 8012118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801211c:	89ab      	ldrh	r3, [r5, #12]
 801211e:	2b01      	cmp	r3, #1
 8012120:	d907      	bls.n	8012132 <_fwalk_reent+0x3a>
 8012122:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012126:	3301      	adds	r3, #1
 8012128:	d003      	beq.n	8012132 <_fwalk_reent+0x3a>
 801212a:	4629      	mov	r1, r5
 801212c:	4630      	mov	r0, r6
 801212e:	47c0      	blx	r8
 8012130:	4307      	orrs	r7, r0
 8012132:	3568      	adds	r5, #104	; 0x68
 8012134:	e7e9      	b.n	801210a <_fwalk_reent+0x12>
	...

08012138 <__libc_init_array>:
 8012138:	b570      	push	{r4, r5, r6, lr}
 801213a:	4d0d      	ldr	r5, [pc, #52]	; (8012170 <__libc_init_array+0x38>)
 801213c:	4c0d      	ldr	r4, [pc, #52]	; (8012174 <__libc_init_array+0x3c>)
 801213e:	1b64      	subs	r4, r4, r5
 8012140:	10a4      	asrs	r4, r4, #2
 8012142:	2600      	movs	r6, #0
 8012144:	42a6      	cmp	r6, r4
 8012146:	d109      	bne.n	801215c <__libc_init_array+0x24>
 8012148:	4d0b      	ldr	r5, [pc, #44]	; (8012178 <__libc_init_array+0x40>)
 801214a:	4c0c      	ldr	r4, [pc, #48]	; (801217c <__libc_init_array+0x44>)
 801214c:	f005 f834 	bl	80171b8 <_init>
 8012150:	1b64      	subs	r4, r4, r5
 8012152:	10a4      	asrs	r4, r4, #2
 8012154:	2600      	movs	r6, #0
 8012156:	42a6      	cmp	r6, r4
 8012158:	d105      	bne.n	8012166 <__libc_init_array+0x2e>
 801215a:	bd70      	pop	{r4, r5, r6, pc}
 801215c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012160:	4798      	blx	r3
 8012162:	3601      	adds	r6, #1
 8012164:	e7ee      	b.n	8012144 <__libc_init_array+0xc>
 8012166:	f855 3b04 	ldr.w	r3, [r5], #4
 801216a:	4798      	blx	r3
 801216c:	3601      	adds	r6, #1
 801216e:	e7f2      	b.n	8012156 <__libc_init_array+0x1e>
 8012170:	08017a64 	.word	0x08017a64
 8012174:	08017a64 	.word	0x08017a64
 8012178:	08017a64 	.word	0x08017a64
 801217c:	08017a68 	.word	0x08017a68

08012180 <__retarget_lock_init_recursive>:
 8012180:	4770      	bx	lr

08012182 <__retarget_lock_acquire_recursive>:
 8012182:	4770      	bx	lr

08012184 <__retarget_lock_release_recursive>:
 8012184:	4770      	bx	lr

08012186 <memcpy>:
 8012186:	440a      	add	r2, r1
 8012188:	4291      	cmp	r1, r2
 801218a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801218e:	d100      	bne.n	8012192 <memcpy+0xc>
 8012190:	4770      	bx	lr
 8012192:	b510      	push	{r4, lr}
 8012194:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012198:	f803 4f01 	strb.w	r4, [r3, #1]!
 801219c:	4291      	cmp	r1, r2
 801219e:	d1f9      	bne.n	8012194 <memcpy+0xe>
 80121a0:	bd10      	pop	{r4, pc}

080121a2 <memset>:
 80121a2:	4402      	add	r2, r0
 80121a4:	4603      	mov	r3, r0
 80121a6:	4293      	cmp	r3, r2
 80121a8:	d100      	bne.n	80121ac <memset+0xa>
 80121aa:	4770      	bx	lr
 80121ac:	f803 1b01 	strb.w	r1, [r3], #1
 80121b0:	e7f9      	b.n	80121a6 <memset+0x4>
	...

080121b4 <_malloc_r>:
 80121b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121b6:	1ccd      	adds	r5, r1, #3
 80121b8:	f025 0503 	bic.w	r5, r5, #3
 80121bc:	3508      	adds	r5, #8
 80121be:	2d0c      	cmp	r5, #12
 80121c0:	bf38      	it	cc
 80121c2:	250c      	movcc	r5, #12
 80121c4:	2d00      	cmp	r5, #0
 80121c6:	4606      	mov	r6, r0
 80121c8:	db01      	blt.n	80121ce <_malloc_r+0x1a>
 80121ca:	42a9      	cmp	r1, r5
 80121cc:	d903      	bls.n	80121d6 <_malloc_r+0x22>
 80121ce:	230c      	movs	r3, #12
 80121d0:	6033      	str	r3, [r6, #0]
 80121d2:	2000      	movs	r0, #0
 80121d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121d6:	f003 f9d1 	bl	801557c <__malloc_lock>
 80121da:	4921      	ldr	r1, [pc, #132]	; (8012260 <_malloc_r+0xac>)
 80121dc:	680a      	ldr	r2, [r1, #0]
 80121de:	4614      	mov	r4, r2
 80121e0:	b99c      	cbnz	r4, 801220a <_malloc_r+0x56>
 80121e2:	4f20      	ldr	r7, [pc, #128]	; (8012264 <_malloc_r+0xb0>)
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	b923      	cbnz	r3, 80121f2 <_malloc_r+0x3e>
 80121e8:	4621      	mov	r1, r4
 80121ea:	4630      	mov	r0, r6
 80121ec:	f000 ff20 	bl	8013030 <_sbrk_r>
 80121f0:	6038      	str	r0, [r7, #0]
 80121f2:	4629      	mov	r1, r5
 80121f4:	4630      	mov	r0, r6
 80121f6:	f000 ff1b 	bl	8013030 <_sbrk_r>
 80121fa:	1c43      	adds	r3, r0, #1
 80121fc:	d123      	bne.n	8012246 <_malloc_r+0x92>
 80121fe:	230c      	movs	r3, #12
 8012200:	6033      	str	r3, [r6, #0]
 8012202:	4630      	mov	r0, r6
 8012204:	f003 f9c0 	bl	8015588 <__malloc_unlock>
 8012208:	e7e3      	b.n	80121d2 <_malloc_r+0x1e>
 801220a:	6823      	ldr	r3, [r4, #0]
 801220c:	1b5b      	subs	r3, r3, r5
 801220e:	d417      	bmi.n	8012240 <_malloc_r+0x8c>
 8012210:	2b0b      	cmp	r3, #11
 8012212:	d903      	bls.n	801221c <_malloc_r+0x68>
 8012214:	6023      	str	r3, [r4, #0]
 8012216:	441c      	add	r4, r3
 8012218:	6025      	str	r5, [r4, #0]
 801221a:	e004      	b.n	8012226 <_malloc_r+0x72>
 801221c:	6863      	ldr	r3, [r4, #4]
 801221e:	42a2      	cmp	r2, r4
 8012220:	bf0c      	ite	eq
 8012222:	600b      	streq	r3, [r1, #0]
 8012224:	6053      	strne	r3, [r2, #4]
 8012226:	4630      	mov	r0, r6
 8012228:	f003 f9ae 	bl	8015588 <__malloc_unlock>
 801222c:	f104 000b 	add.w	r0, r4, #11
 8012230:	1d23      	adds	r3, r4, #4
 8012232:	f020 0007 	bic.w	r0, r0, #7
 8012236:	1ac2      	subs	r2, r0, r3
 8012238:	d0cc      	beq.n	80121d4 <_malloc_r+0x20>
 801223a:	1a1b      	subs	r3, r3, r0
 801223c:	50a3      	str	r3, [r4, r2]
 801223e:	e7c9      	b.n	80121d4 <_malloc_r+0x20>
 8012240:	4622      	mov	r2, r4
 8012242:	6864      	ldr	r4, [r4, #4]
 8012244:	e7cc      	b.n	80121e0 <_malloc_r+0x2c>
 8012246:	1cc4      	adds	r4, r0, #3
 8012248:	f024 0403 	bic.w	r4, r4, #3
 801224c:	42a0      	cmp	r0, r4
 801224e:	d0e3      	beq.n	8012218 <_malloc_r+0x64>
 8012250:	1a21      	subs	r1, r4, r0
 8012252:	4630      	mov	r0, r6
 8012254:	f000 feec 	bl	8013030 <_sbrk_r>
 8012258:	3001      	adds	r0, #1
 801225a:	d1dd      	bne.n	8012218 <_malloc_r+0x64>
 801225c:	e7cf      	b.n	80121fe <_malloc_r+0x4a>
 801225e:	bf00      	nop
 8012260:	20009d9c 	.word	0x20009d9c
 8012264:	20009da0 	.word	0x20009da0

08012268 <__cvt>:
 8012268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801226c:	ec55 4b10 	vmov	r4, r5, d0
 8012270:	2d00      	cmp	r5, #0
 8012272:	460e      	mov	r6, r1
 8012274:	4619      	mov	r1, r3
 8012276:	462b      	mov	r3, r5
 8012278:	bfbb      	ittet	lt
 801227a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801227e:	461d      	movlt	r5, r3
 8012280:	2300      	movge	r3, #0
 8012282:	232d      	movlt	r3, #45	; 0x2d
 8012284:	700b      	strb	r3, [r1, #0]
 8012286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012288:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801228c:	4691      	mov	r9, r2
 801228e:	f023 0820 	bic.w	r8, r3, #32
 8012292:	bfbc      	itt	lt
 8012294:	4622      	movlt	r2, r4
 8012296:	4614      	movlt	r4, r2
 8012298:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801229c:	d005      	beq.n	80122aa <__cvt+0x42>
 801229e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80122a2:	d100      	bne.n	80122a6 <__cvt+0x3e>
 80122a4:	3601      	adds	r6, #1
 80122a6:	2102      	movs	r1, #2
 80122a8:	e000      	b.n	80122ac <__cvt+0x44>
 80122aa:	2103      	movs	r1, #3
 80122ac:	ab03      	add	r3, sp, #12
 80122ae:	9301      	str	r3, [sp, #4]
 80122b0:	ab02      	add	r3, sp, #8
 80122b2:	9300      	str	r3, [sp, #0]
 80122b4:	ec45 4b10 	vmov	d0, r4, r5
 80122b8:	4653      	mov	r3, sl
 80122ba:	4632      	mov	r2, r6
 80122bc:	f001 ff10 	bl	80140e0 <_dtoa_r>
 80122c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80122c4:	4607      	mov	r7, r0
 80122c6:	d102      	bne.n	80122ce <__cvt+0x66>
 80122c8:	f019 0f01 	tst.w	r9, #1
 80122cc:	d022      	beq.n	8012314 <__cvt+0xac>
 80122ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80122d2:	eb07 0906 	add.w	r9, r7, r6
 80122d6:	d110      	bne.n	80122fa <__cvt+0x92>
 80122d8:	783b      	ldrb	r3, [r7, #0]
 80122da:	2b30      	cmp	r3, #48	; 0x30
 80122dc:	d10a      	bne.n	80122f4 <__cvt+0x8c>
 80122de:	2200      	movs	r2, #0
 80122e0:	2300      	movs	r3, #0
 80122e2:	4620      	mov	r0, r4
 80122e4:	4629      	mov	r1, r5
 80122e6:	f7ee fbff 	bl	8000ae8 <__aeabi_dcmpeq>
 80122ea:	b918      	cbnz	r0, 80122f4 <__cvt+0x8c>
 80122ec:	f1c6 0601 	rsb	r6, r6, #1
 80122f0:	f8ca 6000 	str.w	r6, [sl]
 80122f4:	f8da 3000 	ldr.w	r3, [sl]
 80122f8:	4499      	add	r9, r3
 80122fa:	2200      	movs	r2, #0
 80122fc:	2300      	movs	r3, #0
 80122fe:	4620      	mov	r0, r4
 8012300:	4629      	mov	r1, r5
 8012302:	f7ee fbf1 	bl	8000ae8 <__aeabi_dcmpeq>
 8012306:	b108      	cbz	r0, 801230c <__cvt+0xa4>
 8012308:	f8cd 900c 	str.w	r9, [sp, #12]
 801230c:	2230      	movs	r2, #48	; 0x30
 801230e:	9b03      	ldr	r3, [sp, #12]
 8012310:	454b      	cmp	r3, r9
 8012312:	d307      	bcc.n	8012324 <__cvt+0xbc>
 8012314:	9b03      	ldr	r3, [sp, #12]
 8012316:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012318:	1bdb      	subs	r3, r3, r7
 801231a:	4638      	mov	r0, r7
 801231c:	6013      	str	r3, [r2, #0]
 801231e:	b004      	add	sp, #16
 8012320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012324:	1c59      	adds	r1, r3, #1
 8012326:	9103      	str	r1, [sp, #12]
 8012328:	701a      	strb	r2, [r3, #0]
 801232a:	e7f0      	b.n	801230e <__cvt+0xa6>

0801232c <__exponent>:
 801232c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801232e:	4603      	mov	r3, r0
 8012330:	2900      	cmp	r1, #0
 8012332:	bfb8      	it	lt
 8012334:	4249      	neglt	r1, r1
 8012336:	f803 2b02 	strb.w	r2, [r3], #2
 801233a:	bfb4      	ite	lt
 801233c:	222d      	movlt	r2, #45	; 0x2d
 801233e:	222b      	movge	r2, #43	; 0x2b
 8012340:	2909      	cmp	r1, #9
 8012342:	7042      	strb	r2, [r0, #1]
 8012344:	dd2a      	ble.n	801239c <__exponent+0x70>
 8012346:	f10d 0407 	add.w	r4, sp, #7
 801234a:	46a4      	mov	ip, r4
 801234c:	270a      	movs	r7, #10
 801234e:	46a6      	mov	lr, r4
 8012350:	460a      	mov	r2, r1
 8012352:	fb91 f6f7 	sdiv	r6, r1, r7
 8012356:	fb07 1516 	mls	r5, r7, r6, r1
 801235a:	3530      	adds	r5, #48	; 0x30
 801235c:	2a63      	cmp	r2, #99	; 0x63
 801235e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8012362:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012366:	4631      	mov	r1, r6
 8012368:	dcf1      	bgt.n	801234e <__exponent+0x22>
 801236a:	3130      	adds	r1, #48	; 0x30
 801236c:	f1ae 0502 	sub.w	r5, lr, #2
 8012370:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012374:	1c44      	adds	r4, r0, #1
 8012376:	4629      	mov	r1, r5
 8012378:	4561      	cmp	r1, ip
 801237a:	d30a      	bcc.n	8012392 <__exponent+0x66>
 801237c:	f10d 0209 	add.w	r2, sp, #9
 8012380:	eba2 020e 	sub.w	r2, r2, lr
 8012384:	4565      	cmp	r5, ip
 8012386:	bf88      	it	hi
 8012388:	2200      	movhi	r2, #0
 801238a:	4413      	add	r3, r2
 801238c:	1a18      	subs	r0, r3, r0
 801238e:	b003      	add	sp, #12
 8012390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012396:	f804 2f01 	strb.w	r2, [r4, #1]!
 801239a:	e7ed      	b.n	8012378 <__exponent+0x4c>
 801239c:	2330      	movs	r3, #48	; 0x30
 801239e:	3130      	adds	r1, #48	; 0x30
 80123a0:	7083      	strb	r3, [r0, #2]
 80123a2:	70c1      	strb	r1, [r0, #3]
 80123a4:	1d03      	adds	r3, r0, #4
 80123a6:	e7f1      	b.n	801238c <__exponent+0x60>

080123a8 <_printf_float>:
 80123a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ac:	ed2d 8b02 	vpush	{d8}
 80123b0:	b08d      	sub	sp, #52	; 0x34
 80123b2:	460c      	mov	r4, r1
 80123b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80123b8:	4616      	mov	r6, r2
 80123ba:	461f      	mov	r7, r3
 80123bc:	4605      	mov	r5, r0
 80123be:	f003 f8ad 	bl	801551c <_localeconv_r>
 80123c2:	f8d0 a000 	ldr.w	sl, [r0]
 80123c6:	4650      	mov	r0, sl
 80123c8:	f7ed ff12 	bl	80001f0 <strlen>
 80123cc:	2300      	movs	r3, #0
 80123ce:	930a      	str	r3, [sp, #40]	; 0x28
 80123d0:	6823      	ldr	r3, [r4, #0]
 80123d2:	9305      	str	r3, [sp, #20]
 80123d4:	f8d8 3000 	ldr.w	r3, [r8]
 80123d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80123dc:	3307      	adds	r3, #7
 80123de:	f023 0307 	bic.w	r3, r3, #7
 80123e2:	f103 0208 	add.w	r2, r3, #8
 80123e6:	f8c8 2000 	str.w	r2, [r8]
 80123ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80123f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80123f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80123fa:	9307      	str	r3, [sp, #28]
 80123fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8012400:	ee08 0a10 	vmov	s16, r0
 8012404:	4b9f      	ldr	r3, [pc, #636]	; (8012684 <_printf_float+0x2dc>)
 8012406:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801240a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801240e:	f7ee fb9d 	bl	8000b4c <__aeabi_dcmpun>
 8012412:	bb88      	cbnz	r0, 8012478 <_printf_float+0xd0>
 8012414:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012418:	4b9a      	ldr	r3, [pc, #616]	; (8012684 <_printf_float+0x2dc>)
 801241a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801241e:	f7ee fb77 	bl	8000b10 <__aeabi_dcmple>
 8012422:	bb48      	cbnz	r0, 8012478 <_printf_float+0xd0>
 8012424:	2200      	movs	r2, #0
 8012426:	2300      	movs	r3, #0
 8012428:	4640      	mov	r0, r8
 801242a:	4649      	mov	r1, r9
 801242c:	f7ee fb66 	bl	8000afc <__aeabi_dcmplt>
 8012430:	b110      	cbz	r0, 8012438 <_printf_float+0x90>
 8012432:	232d      	movs	r3, #45	; 0x2d
 8012434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012438:	4b93      	ldr	r3, [pc, #588]	; (8012688 <_printf_float+0x2e0>)
 801243a:	4894      	ldr	r0, [pc, #592]	; (801268c <_printf_float+0x2e4>)
 801243c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012440:	bf94      	ite	ls
 8012442:	4698      	movls	r8, r3
 8012444:	4680      	movhi	r8, r0
 8012446:	2303      	movs	r3, #3
 8012448:	6123      	str	r3, [r4, #16]
 801244a:	9b05      	ldr	r3, [sp, #20]
 801244c:	f023 0204 	bic.w	r2, r3, #4
 8012450:	6022      	str	r2, [r4, #0]
 8012452:	f04f 0900 	mov.w	r9, #0
 8012456:	9700      	str	r7, [sp, #0]
 8012458:	4633      	mov	r3, r6
 801245a:	aa0b      	add	r2, sp, #44	; 0x2c
 801245c:	4621      	mov	r1, r4
 801245e:	4628      	mov	r0, r5
 8012460:	f000 f9d8 	bl	8012814 <_printf_common>
 8012464:	3001      	adds	r0, #1
 8012466:	f040 8090 	bne.w	801258a <_printf_float+0x1e2>
 801246a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801246e:	b00d      	add	sp, #52	; 0x34
 8012470:	ecbd 8b02 	vpop	{d8}
 8012474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012478:	4642      	mov	r2, r8
 801247a:	464b      	mov	r3, r9
 801247c:	4640      	mov	r0, r8
 801247e:	4649      	mov	r1, r9
 8012480:	f7ee fb64 	bl	8000b4c <__aeabi_dcmpun>
 8012484:	b140      	cbz	r0, 8012498 <_printf_float+0xf0>
 8012486:	464b      	mov	r3, r9
 8012488:	2b00      	cmp	r3, #0
 801248a:	bfbc      	itt	lt
 801248c:	232d      	movlt	r3, #45	; 0x2d
 801248e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012492:	487f      	ldr	r0, [pc, #508]	; (8012690 <_printf_float+0x2e8>)
 8012494:	4b7f      	ldr	r3, [pc, #508]	; (8012694 <_printf_float+0x2ec>)
 8012496:	e7d1      	b.n	801243c <_printf_float+0x94>
 8012498:	6863      	ldr	r3, [r4, #4]
 801249a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801249e:	9206      	str	r2, [sp, #24]
 80124a0:	1c5a      	adds	r2, r3, #1
 80124a2:	d13f      	bne.n	8012524 <_printf_float+0x17c>
 80124a4:	2306      	movs	r3, #6
 80124a6:	6063      	str	r3, [r4, #4]
 80124a8:	9b05      	ldr	r3, [sp, #20]
 80124aa:	6861      	ldr	r1, [r4, #4]
 80124ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80124b0:	2300      	movs	r3, #0
 80124b2:	9303      	str	r3, [sp, #12]
 80124b4:	ab0a      	add	r3, sp, #40	; 0x28
 80124b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80124ba:	ab09      	add	r3, sp, #36	; 0x24
 80124bc:	ec49 8b10 	vmov	d0, r8, r9
 80124c0:	9300      	str	r3, [sp, #0]
 80124c2:	6022      	str	r2, [r4, #0]
 80124c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80124c8:	4628      	mov	r0, r5
 80124ca:	f7ff fecd 	bl	8012268 <__cvt>
 80124ce:	9b06      	ldr	r3, [sp, #24]
 80124d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124d2:	2b47      	cmp	r3, #71	; 0x47
 80124d4:	4680      	mov	r8, r0
 80124d6:	d108      	bne.n	80124ea <_printf_float+0x142>
 80124d8:	1cc8      	adds	r0, r1, #3
 80124da:	db02      	blt.n	80124e2 <_printf_float+0x13a>
 80124dc:	6863      	ldr	r3, [r4, #4]
 80124de:	4299      	cmp	r1, r3
 80124e0:	dd41      	ble.n	8012566 <_printf_float+0x1be>
 80124e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80124e6:	fa5f fb8b 	uxtb.w	fp, fp
 80124ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80124ee:	d820      	bhi.n	8012532 <_printf_float+0x18a>
 80124f0:	3901      	subs	r1, #1
 80124f2:	465a      	mov	r2, fp
 80124f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80124f8:	9109      	str	r1, [sp, #36]	; 0x24
 80124fa:	f7ff ff17 	bl	801232c <__exponent>
 80124fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012500:	1813      	adds	r3, r2, r0
 8012502:	2a01      	cmp	r2, #1
 8012504:	4681      	mov	r9, r0
 8012506:	6123      	str	r3, [r4, #16]
 8012508:	dc02      	bgt.n	8012510 <_printf_float+0x168>
 801250a:	6822      	ldr	r2, [r4, #0]
 801250c:	07d2      	lsls	r2, r2, #31
 801250e:	d501      	bpl.n	8012514 <_printf_float+0x16c>
 8012510:	3301      	adds	r3, #1
 8012512:	6123      	str	r3, [r4, #16]
 8012514:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012518:	2b00      	cmp	r3, #0
 801251a:	d09c      	beq.n	8012456 <_printf_float+0xae>
 801251c:	232d      	movs	r3, #45	; 0x2d
 801251e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012522:	e798      	b.n	8012456 <_printf_float+0xae>
 8012524:	9a06      	ldr	r2, [sp, #24]
 8012526:	2a47      	cmp	r2, #71	; 0x47
 8012528:	d1be      	bne.n	80124a8 <_printf_float+0x100>
 801252a:	2b00      	cmp	r3, #0
 801252c:	d1bc      	bne.n	80124a8 <_printf_float+0x100>
 801252e:	2301      	movs	r3, #1
 8012530:	e7b9      	b.n	80124a6 <_printf_float+0xfe>
 8012532:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012536:	d118      	bne.n	801256a <_printf_float+0x1c2>
 8012538:	2900      	cmp	r1, #0
 801253a:	6863      	ldr	r3, [r4, #4]
 801253c:	dd0b      	ble.n	8012556 <_printf_float+0x1ae>
 801253e:	6121      	str	r1, [r4, #16]
 8012540:	b913      	cbnz	r3, 8012548 <_printf_float+0x1a0>
 8012542:	6822      	ldr	r2, [r4, #0]
 8012544:	07d0      	lsls	r0, r2, #31
 8012546:	d502      	bpl.n	801254e <_printf_float+0x1a6>
 8012548:	3301      	adds	r3, #1
 801254a:	440b      	add	r3, r1
 801254c:	6123      	str	r3, [r4, #16]
 801254e:	65a1      	str	r1, [r4, #88]	; 0x58
 8012550:	f04f 0900 	mov.w	r9, #0
 8012554:	e7de      	b.n	8012514 <_printf_float+0x16c>
 8012556:	b913      	cbnz	r3, 801255e <_printf_float+0x1b6>
 8012558:	6822      	ldr	r2, [r4, #0]
 801255a:	07d2      	lsls	r2, r2, #31
 801255c:	d501      	bpl.n	8012562 <_printf_float+0x1ba>
 801255e:	3302      	adds	r3, #2
 8012560:	e7f4      	b.n	801254c <_printf_float+0x1a4>
 8012562:	2301      	movs	r3, #1
 8012564:	e7f2      	b.n	801254c <_printf_float+0x1a4>
 8012566:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801256a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801256c:	4299      	cmp	r1, r3
 801256e:	db05      	blt.n	801257c <_printf_float+0x1d4>
 8012570:	6823      	ldr	r3, [r4, #0]
 8012572:	6121      	str	r1, [r4, #16]
 8012574:	07d8      	lsls	r0, r3, #31
 8012576:	d5ea      	bpl.n	801254e <_printf_float+0x1a6>
 8012578:	1c4b      	adds	r3, r1, #1
 801257a:	e7e7      	b.n	801254c <_printf_float+0x1a4>
 801257c:	2900      	cmp	r1, #0
 801257e:	bfd4      	ite	le
 8012580:	f1c1 0202 	rsble	r2, r1, #2
 8012584:	2201      	movgt	r2, #1
 8012586:	4413      	add	r3, r2
 8012588:	e7e0      	b.n	801254c <_printf_float+0x1a4>
 801258a:	6823      	ldr	r3, [r4, #0]
 801258c:	055a      	lsls	r2, r3, #21
 801258e:	d407      	bmi.n	80125a0 <_printf_float+0x1f8>
 8012590:	6923      	ldr	r3, [r4, #16]
 8012592:	4642      	mov	r2, r8
 8012594:	4631      	mov	r1, r6
 8012596:	4628      	mov	r0, r5
 8012598:	47b8      	blx	r7
 801259a:	3001      	adds	r0, #1
 801259c:	d12c      	bne.n	80125f8 <_printf_float+0x250>
 801259e:	e764      	b.n	801246a <_printf_float+0xc2>
 80125a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80125a4:	f240 80e0 	bls.w	8012768 <_printf_float+0x3c0>
 80125a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80125ac:	2200      	movs	r2, #0
 80125ae:	2300      	movs	r3, #0
 80125b0:	f7ee fa9a 	bl	8000ae8 <__aeabi_dcmpeq>
 80125b4:	2800      	cmp	r0, #0
 80125b6:	d034      	beq.n	8012622 <_printf_float+0x27a>
 80125b8:	4a37      	ldr	r2, [pc, #220]	; (8012698 <_printf_float+0x2f0>)
 80125ba:	2301      	movs	r3, #1
 80125bc:	4631      	mov	r1, r6
 80125be:	4628      	mov	r0, r5
 80125c0:	47b8      	blx	r7
 80125c2:	3001      	adds	r0, #1
 80125c4:	f43f af51 	beq.w	801246a <_printf_float+0xc2>
 80125c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125cc:	429a      	cmp	r2, r3
 80125ce:	db02      	blt.n	80125d6 <_printf_float+0x22e>
 80125d0:	6823      	ldr	r3, [r4, #0]
 80125d2:	07d8      	lsls	r0, r3, #31
 80125d4:	d510      	bpl.n	80125f8 <_printf_float+0x250>
 80125d6:	ee18 3a10 	vmov	r3, s16
 80125da:	4652      	mov	r2, sl
 80125dc:	4631      	mov	r1, r6
 80125de:	4628      	mov	r0, r5
 80125e0:	47b8      	blx	r7
 80125e2:	3001      	adds	r0, #1
 80125e4:	f43f af41 	beq.w	801246a <_printf_float+0xc2>
 80125e8:	f04f 0800 	mov.w	r8, #0
 80125ec:	f104 091a 	add.w	r9, r4, #26
 80125f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125f2:	3b01      	subs	r3, #1
 80125f4:	4543      	cmp	r3, r8
 80125f6:	dc09      	bgt.n	801260c <_printf_float+0x264>
 80125f8:	6823      	ldr	r3, [r4, #0]
 80125fa:	079b      	lsls	r3, r3, #30
 80125fc:	f100 8105 	bmi.w	801280a <_printf_float+0x462>
 8012600:	68e0      	ldr	r0, [r4, #12]
 8012602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012604:	4298      	cmp	r0, r3
 8012606:	bfb8      	it	lt
 8012608:	4618      	movlt	r0, r3
 801260a:	e730      	b.n	801246e <_printf_float+0xc6>
 801260c:	2301      	movs	r3, #1
 801260e:	464a      	mov	r2, r9
 8012610:	4631      	mov	r1, r6
 8012612:	4628      	mov	r0, r5
 8012614:	47b8      	blx	r7
 8012616:	3001      	adds	r0, #1
 8012618:	f43f af27 	beq.w	801246a <_printf_float+0xc2>
 801261c:	f108 0801 	add.w	r8, r8, #1
 8012620:	e7e6      	b.n	80125f0 <_printf_float+0x248>
 8012622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012624:	2b00      	cmp	r3, #0
 8012626:	dc39      	bgt.n	801269c <_printf_float+0x2f4>
 8012628:	4a1b      	ldr	r2, [pc, #108]	; (8012698 <_printf_float+0x2f0>)
 801262a:	2301      	movs	r3, #1
 801262c:	4631      	mov	r1, r6
 801262e:	4628      	mov	r0, r5
 8012630:	47b8      	blx	r7
 8012632:	3001      	adds	r0, #1
 8012634:	f43f af19 	beq.w	801246a <_printf_float+0xc2>
 8012638:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801263c:	4313      	orrs	r3, r2
 801263e:	d102      	bne.n	8012646 <_printf_float+0x29e>
 8012640:	6823      	ldr	r3, [r4, #0]
 8012642:	07d9      	lsls	r1, r3, #31
 8012644:	d5d8      	bpl.n	80125f8 <_printf_float+0x250>
 8012646:	ee18 3a10 	vmov	r3, s16
 801264a:	4652      	mov	r2, sl
 801264c:	4631      	mov	r1, r6
 801264e:	4628      	mov	r0, r5
 8012650:	47b8      	blx	r7
 8012652:	3001      	adds	r0, #1
 8012654:	f43f af09 	beq.w	801246a <_printf_float+0xc2>
 8012658:	f04f 0900 	mov.w	r9, #0
 801265c:	f104 0a1a 	add.w	sl, r4, #26
 8012660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012662:	425b      	negs	r3, r3
 8012664:	454b      	cmp	r3, r9
 8012666:	dc01      	bgt.n	801266c <_printf_float+0x2c4>
 8012668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801266a:	e792      	b.n	8012592 <_printf_float+0x1ea>
 801266c:	2301      	movs	r3, #1
 801266e:	4652      	mov	r2, sl
 8012670:	4631      	mov	r1, r6
 8012672:	4628      	mov	r0, r5
 8012674:	47b8      	blx	r7
 8012676:	3001      	adds	r0, #1
 8012678:	f43f aef7 	beq.w	801246a <_printf_float+0xc2>
 801267c:	f109 0901 	add.w	r9, r9, #1
 8012680:	e7ee      	b.n	8012660 <_printf_float+0x2b8>
 8012682:	bf00      	nop
 8012684:	7fefffff 	.word	0x7fefffff
 8012688:	080176f4 	.word	0x080176f4
 801268c:	080176f8 	.word	0x080176f8
 8012690:	08017700 	.word	0x08017700
 8012694:	080176fc 	.word	0x080176fc
 8012698:	08017a09 	.word	0x08017a09
 801269c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801269e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80126a0:	429a      	cmp	r2, r3
 80126a2:	bfa8      	it	ge
 80126a4:	461a      	movge	r2, r3
 80126a6:	2a00      	cmp	r2, #0
 80126a8:	4691      	mov	r9, r2
 80126aa:	dc37      	bgt.n	801271c <_printf_float+0x374>
 80126ac:	f04f 0b00 	mov.w	fp, #0
 80126b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80126b4:	f104 021a 	add.w	r2, r4, #26
 80126b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80126ba:	9305      	str	r3, [sp, #20]
 80126bc:	eba3 0309 	sub.w	r3, r3, r9
 80126c0:	455b      	cmp	r3, fp
 80126c2:	dc33      	bgt.n	801272c <_printf_float+0x384>
 80126c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126c8:	429a      	cmp	r2, r3
 80126ca:	db3b      	blt.n	8012744 <_printf_float+0x39c>
 80126cc:	6823      	ldr	r3, [r4, #0]
 80126ce:	07da      	lsls	r2, r3, #31
 80126d0:	d438      	bmi.n	8012744 <_printf_float+0x39c>
 80126d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80126d4:	9b05      	ldr	r3, [sp, #20]
 80126d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80126d8:	1ad3      	subs	r3, r2, r3
 80126da:	eba2 0901 	sub.w	r9, r2, r1
 80126de:	4599      	cmp	r9, r3
 80126e0:	bfa8      	it	ge
 80126e2:	4699      	movge	r9, r3
 80126e4:	f1b9 0f00 	cmp.w	r9, #0
 80126e8:	dc35      	bgt.n	8012756 <_printf_float+0x3ae>
 80126ea:	f04f 0800 	mov.w	r8, #0
 80126ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80126f2:	f104 0a1a 	add.w	sl, r4, #26
 80126f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126fa:	1a9b      	subs	r3, r3, r2
 80126fc:	eba3 0309 	sub.w	r3, r3, r9
 8012700:	4543      	cmp	r3, r8
 8012702:	f77f af79 	ble.w	80125f8 <_printf_float+0x250>
 8012706:	2301      	movs	r3, #1
 8012708:	4652      	mov	r2, sl
 801270a:	4631      	mov	r1, r6
 801270c:	4628      	mov	r0, r5
 801270e:	47b8      	blx	r7
 8012710:	3001      	adds	r0, #1
 8012712:	f43f aeaa 	beq.w	801246a <_printf_float+0xc2>
 8012716:	f108 0801 	add.w	r8, r8, #1
 801271a:	e7ec      	b.n	80126f6 <_printf_float+0x34e>
 801271c:	4613      	mov	r3, r2
 801271e:	4631      	mov	r1, r6
 8012720:	4642      	mov	r2, r8
 8012722:	4628      	mov	r0, r5
 8012724:	47b8      	blx	r7
 8012726:	3001      	adds	r0, #1
 8012728:	d1c0      	bne.n	80126ac <_printf_float+0x304>
 801272a:	e69e      	b.n	801246a <_printf_float+0xc2>
 801272c:	2301      	movs	r3, #1
 801272e:	4631      	mov	r1, r6
 8012730:	4628      	mov	r0, r5
 8012732:	9205      	str	r2, [sp, #20]
 8012734:	47b8      	blx	r7
 8012736:	3001      	adds	r0, #1
 8012738:	f43f ae97 	beq.w	801246a <_printf_float+0xc2>
 801273c:	9a05      	ldr	r2, [sp, #20]
 801273e:	f10b 0b01 	add.w	fp, fp, #1
 8012742:	e7b9      	b.n	80126b8 <_printf_float+0x310>
 8012744:	ee18 3a10 	vmov	r3, s16
 8012748:	4652      	mov	r2, sl
 801274a:	4631      	mov	r1, r6
 801274c:	4628      	mov	r0, r5
 801274e:	47b8      	blx	r7
 8012750:	3001      	adds	r0, #1
 8012752:	d1be      	bne.n	80126d2 <_printf_float+0x32a>
 8012754:	e689      	b.n	801246a <_printf_float+0xc2>
 8012756:	9a05      	ldr	r2, [sp, #20]
 8012758:	464b      	mov	r3, r9
 801275a:	4442      	add	r2, r8
 801275c:	4631      	mov	r1, r6
 801275e:	4628      	mov	r0, r5
 8012760:	47b8      	blx	r7
 8012762:	3001      	adds	r0, #1
 8012764:	d1c1      	bne.n	80126ea <_printf_float+0x342>
 8012766:	e680      	b.n	801246a <_printf_float+0xc2>
 8012768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801276a:	2a01      	cmp	r2, #1
 801276c:	dc01      	bgt.n	8012772 <_printf_float+0x3ca>
 801276e:	07db      	lsls	r3, r3, #31
 8012770:	d538      	bpl.n	80127e4 <_printf_float+0x43c>
 8012772:	2301      	movs	r3, #1
 8012774:	4642      	mov	r2, r8
 8012776:	4631      	mov	r1, r6
 8012778:	4628      	mov	r0, r5
 801277a:	47b8      	blx	r7
 801277c:	3001      	adds	r0, #1
 801277e:	f43f ae74 	beq.w	801246a <_printf_float+0xc2>
 8012782:	ee18 3a10 	vmov	r3, s16
 8012786:	4652      	mov	r2, sl
 8012788:	4631      	mov	r1, r6
 801278a:	4628      	mov	r0, r5
 801278c:	47b8      	blx	r7
 801278e:	3001      	adds	r0, #1
 8012790:	f43f ae6b 	beq.w	801246a <_printf_float+0xc2>
 8012794:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012798:	2200      	movs	r2, #0
 801279a:	2300      	movs	r3, #0
 801279c:	f7ee f9a4 	bl	8000ae8 <__aeabi_dcmpeq>
 80127a0:	b9d8      	cbnz	r0, 80127da <_printf_float+0x432>
 80127a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127a4:	f108 0201 	add.w	r2, r8, #1
 80127a8:	3b01      	subs	r3, #1
 80127aa:	4631      	mov	r1, r6
 80127ac:	4628      	mov	r0, r5
 80127ae:	47b8      	blx	r7
 80127b0:	3001      	adds	r0, #1
 80127b2:	d10e      	bne.n	80127d2 <_printf_float+0x42a>
 80127b4:	e659      	b.n	801246a <_printf_float+0xc2>
 80127b6:	2301      	movs	r3, #1
 80127b8:	4652      	mov	r2, sl
 80127ba:	4631      	mov	r1, r6
 80127bc:	4628      	mov	r0, r5
 80127be:	47b8      	blx	r7
 80127c0:	3001      	adds	r0, #1
 80127c2:	f43f ae52 	beq.w	801246a <_printf_float+0xc2>
 80127c6:	f108 0801 	add.w	r8, r8, #1
 80127ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127cc:	3b01      	subs	r3, #1
 80127ce:	4543      	cmp	r3, r8
 80127d0:	dcf1      	bgt.n	80127b6 <_printf_float+0x40e>
 80127d2:	464b      	mov	r3, r9
 80127d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80127d8:	e6dc      	b.n	8012594 <_printf_float+0x1ec>
 80127da:	f04f 0800 	mov.w	r8, #0
 80127de:	f104 0a1a 	add.w	sl, r4, #26
 80127e2:	e7f2      	b.n	80127ca <_printf_float+0x422>
 80127e4:	2301      	movs	r3, #1
 80127e6:	4642      	mov	r2, r8
 80127e8:	e7df      	b.n	80127aa <_printf_float+0x402>
 80127ea:	2301      	movs	r3, #1
 80127ec:	464a      	mov	r2, r9
 80127ee:	4631      	mov	r1, r6
 80127f0:	4628      	mov	r0, r5
 80127f2:	47b8      	blx	r7
 80127f4:	3001      	adds	r0, #1
 80127f6:	f43f ae38 	beq.w	801246a <_printf_float+0xc2>
 80127fa:	f108 0801 	add.w	r8, r8, #1
 80127fe:	68e3      	ldr	r3, [r4, #12]
 8012800:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012802:	1a5b      	subs	r3, r3, r1
 8012804:	4543      	cmp	r3, r8
 8012806:	dcf0      	bgt.n	80127ea <_printf_float+0x442>
 8012808:	e6fa      	b.n	8012600 <_printf_float+0x258>
 801280a:	f04f 0800 	mov.w	r8, #0
 801280e:	f104 0919 	add.w	r9, r4, #25
 8012812:	e7f4      	b.n	80127fe <_printf_float+0x456>

08012814 <_printf_common>:
 8012814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012818:	4616      	mov	r6, r2
 801281a:	4699      	mov	r9, r3
 801281c:	688a      	ldr	r2, [r1, #8]
 801281e:	690b      	ldr	r3, [r1, #16]
 8012820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012824:	4293      	cmp	r3, r2
 8012826:	bfb8      	it	lt
 8012828:	4613      	movlt	r3, r2
 801282a:	6033      	str	r3, [r6, #0]
 801282c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012830:	4607      	mov	r7, r0
 8012832:	460c      	mov	r4, r1
 8012834:	b10a      	cbz	r2, 801283a <_printf_common+0x26>
 8012836:	3301      	adds	r3, #1
 8012838:	6033      	str	r3, [r6, #0]
 801283a:	6823      	ldr	r3, [r4, #0]
 801283c:	0699      	lsls	r1, r3, #26
 801283e:	bf42      	ittt	mi
 8012840:	6833      	ldrmi	r3, [r6, #0]
 8012842:	3302      	addmi	r3, #2
 8012844:	6033      	strmi	r3, [r6, #0]
 8012846:	6825      	ldr	r5, [r4, #0]
 8012848:	f015 0506 	ands.w	r5, r5, #6
 801284c:	d106      	bne.n	801285c <_printf_common+0x48>
 801284e:	f104 0a19 	add.w	sl, r4, #25
 8012852:	68e3      	ldr	r3, [r4, #12]
 8012854:	6832      	ldr	r2, [r6, #0]
 8012856:	1a9b      	subs	r3, r3, r2
 8012858:	42ab      	cmp	r3, r5
 801285a:	dc26      	bgt.n	80128aa <_printf_common+0x96>
 801285c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012860:	1e13      	subs	r3, r2, #0
 8012862:	6822      	ldr	r2, [r4, #0]
 8012864:	bf18      	it	ne
 8012866:	2301      	movne	r3, #1
 8012868:	0692      	lsls	r2, r2, #26
 801286a:	d42b      	bmi.n	80128c4 <_printf_common+0xb0>
 801286c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012870:	4649      	mov	r1, r9
 8012872:	4638      	mov	r0, r7
 8012874:	47c0      	blx	r8
 8012876:	3001      	adds	r0, #1
 8012878:	d01e      	beq.n	80128b8 <_printf_common+0xa4>
 801287a:	6823      	ldr	r3, [r4, #0]
 801287c:	68e5      	ldr	r5, [r4, #12]
 801287e:	6832      	ldr	r2, [r6, #0]
 8012880:	f003 0306 	and.w	r3, r3, #6
 8012884:	2b04      	cmp	r3, #4
 8012886:	bf08      	it	eq
 8012888:	1aad      	subeq	r5, r5, r2
 801288a:	68a3      	ldr	r3, [r4, #8]
 801288c:	6922      	ldr	r2, [r4, #16]
 801288e:	bf0c      	ite	eq
 8012890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012894:	2500      	movne	r5, #0
 8012896:	4293      	cmp	r3, r2
 8012898:	bfc4      	itt	gt
 801289a:	1a9b      	subgt	r3, r3, r2
 801289c:	18ed      	addgt	r5, r5, r3
 801289e:	2600      	movs	r6, #0
 80128a0:	341a      	adds	r4, #26
 80128a2:	42b5      	cmp	r5, r6
 80128a4:	d11a      	bne.n	80128dc <_printf_common+0xc8>
 80128a6:	2000      	movs	r0, #0
 80128a8:	e008      	b.n	80128bc <_printf_common+0xa8>
 80128aa:	2301      	movs	r3, #1
 80128ac:	4652      	mov	r2, sl
 80128ae:	4649      	mov	r1, r9
 80128b0:	4638      	mov	r0, r7
 80128b2:	47c0      	blx	r8
 80128b4:	3001      	adds	r0, #1
 80128b6:	d103      	bne.n	80128c0 <_printf_common+0xac>
 80128b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128c0:	3501      	adds	r5, #1
 80128c2:	e7c6      	b.n	8012852 <_printf_common+0x3e>
 80128c4:	18e1      	adds	r1, r4, r3
 80128c6:	1c5a      	adds	r2, r3, #1
 80128c8:	2030      	movs	r0, #48	; 0x30
 80128ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80128ce:	4422      	add	r2, r4
 80128d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80128d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80128d8:	3302      	adds	r3, #2
 80128da:	e7c7      	b.n	801286c <_printf_common+0x58>
 80128dc:	2301      	movs	r3, #1
 80128de:	4622      	mov	r2, r4
 80128e0:	4649      	mov	r1, r9
 80128e2:	4638      	mov	r0, r7
 80128e4:	47c0      	blx	r8
 80128e6:	3001      	adds	r0, #1
 80128e8:	d0e6      	beq.n	80128b8 <_printf_common+0xa4>
 80128ea:	3601      	adds	r6, #1
 80128ec:	e7d9      	b.n	80128a2 <_printf_common+0x8e>
	...

080128f0 <_printf_i>:
 80128f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80128f4:	460c      	mov	r4, r1
 80128f6:	4691      	mov	r9, r2
 80128f8:	7e27      	ldrb	r7, [r4, #24]
 80128fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80128fc:	2f78      	cmp	r7, #120	; 0x78
 80128fe:	4680      	mov	r8, r0
 8012900:	469a      	mov	sl, r3
 8012902:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012906:	d807      	bhi.n	8012918 <_printf_i+0x28>
 8012908:	2f62      	cmp	r7, #98	; 0x62
 801290a:	d80a      	bhi.n	8012922 <_printf_i+0x32>
 801290c:	2f00      	cmp	r7, #0
 801290e:	f000 80d8 	beq.w	8012ac2 <_printf_i+0x1d2>
 8012912:	2f58      	cmp	r7, #88	; 0x58
 8012914:	f000 80a3 	beq.w	8012a5e <_printf_i+0x16e>
 8012918:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801291c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012920:	e03a      	b.n	8012998 <_printf_i+0xa8>
 8012922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012926:	2b15      	cmp	r3, #21
 8012928:	d8f6      	bhi.n	8012918 <_printf_i+0x28>
 801292a:	a001      	add	r0, pc, #4	; (adr r0, 8012930 <_printf_i+0x40>)
 801292c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012930:	08012989 	.word	0x08012989
 8012934:	0801299d 	.word	0x0801299d
 8012938:	08012919 	.word	0x08012919
 801293c:	08012919 	.word	0x08012919
 8012940:	08012919 	.word	0x08012919
 8012944:	08012919 	.word	0x08012919
 8012948:	0801299d 	.word	0x0801299d
 801294c:	08012919 	.word	0x08012919
 8012950:	08012919 	.word	0x08012919
 8012954:	08012919 	.word	0x08012919
 8012958:	08012919 	.word	0x08012919
 801295c:	08012aa9 	.word	0x08012aa9
 8012960:	080129cd 	.word	0x080129cd
 8012964:	08012a8b 	.word	0x08012a8b
 8012968:	08012919 	.word	0x08012919
 801296c:	08012919 	.word	0x08012919
 8012970:	08012acb 	.word	0x08012acb
 8012974:	08012919 	.word	0x08012919
 8012978:	080129cd 	.word	0x080129cd
 801297c:	08012919 	.word	0x08012919
 8012980:	08012919 	.word	0x08012919
 8012984:	08012a93 	.word	0x08012a93
 8012988:	680b      	ldr	r3, [r1, #0]
 801298a:	1d1a      	adds	r2, r3, #4
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	600a      	str	r2, [r1, #0]
 8012990:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012998:	2301      	movs	r3, #1
 801299a:	e0a3      	b.n	8012ae4 <_printf_i+0x1f4>
 801299c:	6825      	ldr	r5, [r4, #0]
 801299e:	6808      	ldr	r0, [r1, #0]
 80129a0:	062e      	lsls	r6, r5, #24
 80129a2:	f100 0304 	add.w	r3, r0, #4
 80129a6:	d50a      	bpl.n	80129be <_printf_i+0xce>
 80129a8:	6805      	ldr	r5, [r0, #0]
 80129aa:	600b      	str	r3, [r1, #0]
 80129ac:	2d00      	cmp	r5, #0
 80129ae:	da03      	bge.n	80129b8 <_printf_i+0xc8>
 80129b0:	232d      	movs	r3, #45	; 0x2d
 80129b2:	426d      	negs	r5, r5
 80129b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129b8:	485e      	ldr	r0, [pc, #376]	; (8012b34 <_printf_i+0x244>)
 80129ba:	230a      	movs	r3, #10
 80129bc:	e019      	b.n	80129f2 <_printf_i+0x102>
 80129be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80129c2:	6805      	ldr	r5, [r0, #0]
 80129c4:	600b      	str	r3, [r1, #0]
 80129c6:	bf18      	it	ne
 80129c8:	b22d      	sxthne	r5, r5
 80129ca:	e7ef      	b.n	80129ac <_printf_i+0xbc>
 80129cc:	680b      	ldr	r3, [r1, #0]
 80129ce:	6825      	ldr	r5, [r4, #0]
 80129d0:	1d18      	adds	r0, r3, #4
 80129d2:	6008      	str	r0, [r1, #0]
 80129d4:	0628      	lsls	r0, r5, #24
 80129d6:	d501      	bpl.n	80129dc <_printf_i+0xec>
 80129d8:	681d      	ldr	r5, [r3, #0]
 80129da:	e002      	b.n	80129e2 <_printf_i+0xf2>
 80129dc:	0669      	lsls	r1, r5, #25
 80129de:	d5fb      	bpl.n	80129d8 <_printf_i+0xe8>
 80129e0:	881d      	ldrh	r5, [r3, #0]
 80129e2:	4854      	ldr	r0, [pc, #336]	; (8012b34 <_printf_i+0x244>)
 80129e4:	2f6f      	cmp	r7, #111	; 0x6f
 80129e6:	bf0c      	ite	eq
 80129e8:	2308      	moveq	r3, #8
 80129ea:	230a      	movne	r3, #10
 80129ec:	2100      	movs	r1, #0
 80129ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80129f2:	6866      	ldr	r6, [r4, #4]
 80129f4:	60a6      	str	r6, [r4, #8]
 80129f6:	2e00      	cmp	r6, #0
 80129f8:	bfa2      	ittt	ge
 80129fa:	6821      	ldrge	r1, [r4, #0]
 80129fc:	f021 0104 	bicge.w	r1, r1, #4
 8012a00:	6021      	strge	r1, [r4, #0]
 8012a02:	b90d      	cbnz	r5, 8012a08 <_printf_i+0x118>
 8012a04:	2e00      	cmp	r6, #0
 8012a06:	d04d      	beq.n	8012aa4 <_printf_i+0x1b4>
 8012a08:	4616      	mov	r6, r2
 8012a0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8012a0e:	fb03 5711 	mls	r7, r3, r1, r5
 8012a12:	5dc7      	ldrb	r7, [r0, r7]
 8012a14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012a18:	462f      	mov	r7, r5
 8012a1a:	42bb      	cmp	r3, r7
 8012a1c:	460d      	mov	r5, r1
 8012a1e:	d9f4      	bls.n	8012a0a <_printf_i+0x11a>
 8012a20:	2b08      	cmp	r3, #8
 8012a22:	d10b      	bne.n	8012a3c <_printf_i+0x14c>
 8012a24:	6823      	ldr	r3, [r4, #0]
 8012a26:	07df      	lsls	r7, r3, #31
 8012a28:	d508      	bpl.n	8012a3c <_printf_i+0x14c>
 8012a2a:	6923      	ldr	r3, [r4, #16]
 8012a2c:	6861      	ldr	r1, [r4, #4]
 8012a2e:	4299      	cmp	r1, r3
 8012a30:	bfde      	ittt	le
 8012a32:	2330      	movle	r3, #48	; 0x30
 8012a34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012a38:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8012a3c:	1b92      	subs	r2, r2, r6
 8012a3e:	6122      	str	r2, [r4, #16]
 8012a40:	f8cd a000 	str.w	sl, [sp]
 8012a44:	464b      	mov	r3, r9
 8012a46:	aa03      	add	r2, sp, #12
 8012a48:	4621      	mov	r1, r4
 8012a4a:	4640      	mov	r0, r8
 8012a4c:	f7ff fee2 	bl	8012814 <_printf_common>
 8012a50:	3001      	adds	r0, #1
 8012a52:	d14c      	bne.n	8012aee <_printf_i+0x1fe>
 8012a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a58:	b004      	add	sp, #16
 8012a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a5e:	4835      	ldr	r0, [pc, #212]	; (8012b34 <_printf_i+0x244>)
 8012a60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012a64:	6823      	ldr	r3, [r4, #0]
 8012a66:	680e      	ldr	r6, [r1, #0]
 8012a68:	061f      	lsls	r7, r3, #24
 8012a6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8012a6e:	600e      	str	r6, [r1, #0]
 8012a70:	d514      	bpl.n	8012a9c <_printf_i+0x1ac>
 8012a72:	07d9      	lsls	r1, r3, #31
 8012a74:	bf44      	itt	mi
 8012a76:	f043 0320 	orrmi.w	r3, r3, #32
 8012a7a:	6023      	strmi	r3, [r4, #0]
 8012a7c:	b91d      	cbnz	r5, 8012a86 <_printf_i+0x196>
 8012a7e:	6823      	ldr	r3, [r4, #0]
 8012a80:	f023 0320 	bic.w	r3, r3, #32
 8012a84:	6023      	str	r3, [r4, #0]
 8012a86:	2310      	movs	r3, #16
 8012a88:	e7b0      	b.n	80129ec <_printf_i+0xfc>
 8012a8a:	6823      	ldr	r3, [r4, #0]
 8012a8c:	f043 0320 	orr.w	r3, r3, #32
 8012a90:	6023      	str	r3, [r4, #0]
 8012a92:	2378      	movs	r3, #120	; 0x78
 8012a94:	4828      	ldr	r0, [pc, #160]	; (8012b38 <_printf_i+0x248>)
 8012a96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012a9a:	e7e3      	b.n	8012a64 <_printf_i+0x174>
 8012a9c:	065e      	lsls	r6, r3, #25
 8012a9e:	bf48      	it	mi
 8012aa0:	b2ad      	uxthmi	r5, r5
 8012aa2:	e7e6      	b.n	8012a72 <_printf_i+0x182>
 8012aa4:	4616      	mov	r6, r2
 8012aa6:	e7bb      	b.n	8012a20 <_printf_i+0x130>
 8012aa8:	680b      	ldr	r3, [r1, #0]
 8012aaa:	6826      	ldr	r6, [r4, #0]
 8012aac:	6960      	ldr	r0, [r4, #20]
 8012aae:	1d1d      	adds	r5, r3, #4
 8012ab0:	600d      	str	r5, [r1, #0]
 8012ab2:	0635      	lsls	r5, r6, #24
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	d501      	bpl.n	8012abc <_printf_i+0x1cc>
 8012ab8:	6018      	str	r0, [r3, #0]
 8012aba:	e002      	b.n	8012ac2 <_printf_i+0x1d2>
 8012abc:	0671      	lsls	r1, r6, #25
 8012abe:	d5fb      	bpl.n	8012ab8 <_printf_i+0x1c8>
 8012ac0:	8018      	strh	r0, [r3, #0]
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	6123      	str	r3, [r4, #16]
 8012ac6:	4616      	mov	r6, r2
 8012ac8:	e7ba      	b.n	8012a40 <_printf_i+0x150>
 8012aca:	680b      	ldr	r3, [r1, #0]
 8012acc:	1d1a      	adds	r2, r3, #4
 8012ace:	600a      	str	r2, [r1, #0]
 8012ad0:	681e      	ldr	r6, [r3, #0]
 8012ad2:	6862      	ldr	r2, [r4, #4]
 8012ad4:	2100      	movs	r1, #0
 8012ad6:	4630      	mov	r0, r6
 8012ad8:	f7ed fb92 	bl	8000200 <memchr>
 8012adc:	b108      	cbz	r0, 8012ae2 <_printf_i+0x1f2>
 8012ade:	1b80      	subs	r0, r0, r6
 8012ae0:	6060      	str	r0, [r4, #4]
 8012ae2:	6863      	ldr	r3, [r4, #4]
 8012ae4:	6123      	str	r3, [r4, #16]
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012aec:	e7a8      	b.n	8012a40 <_printf_i+0x150>
 8012aee:	6923      	ldr	r3, [r4, #16]
 8012af0:	4632      	mov	r2, r6
 8012af2:	4649      	mov	r1, r9
 8012af4:	4640      	mov	r0, r8
 8012af6:	47d0      	blx	sl
 8012af8:	3001      	adds	r0, #1
 8012afa:	d0ab      	beq.n	8012a54 <_printf_i+0x164>
 8012afc:	6823      	ldr	r3, [r4, #0]
 8012afe:	079b      	lsls	r3, r3, #30
 8012b00:	d413      	bmi.n	8012b2a <_printf_i+0x23a>
 8012b02:	68e0      	ldr	r0, [r4, #12]
 8012b04:	9b03      	ldr	r3, [sp, #12]
 8012b06:	4298      	cmp	r0, r3
 8012b08:	bfb8      	it	lt
 8012b0a:	4618      	movlt	r0, r3
 8012b0c:	e7a4      	b.n	8012a58 <_printf_i+0x168>
 8012b0e:	2301      	movs	r3, #1
 8012b10:	4632      	mov	r2, r6
 8012b12:	4649      	mov	r1, r9
 8012b14:	4640      	mov	r0, r8
 8012b16:	47d0      	blx	sl
 8012b18:	3001      	adds	r0, #1
 8012b1a:	d09b      	beq.n	8012a54 <_printf_i+0x164>
 8012b1c:	3501      	adds	r5, #1
 8012b1e:	68e3      	ldr	r3, [r4, #12]
 8012b20:	9903      	ldr	r1, [sp, #12]
 8012b22:	1a5b      	subs	r3, r3, r1
 8012b24:	42ab      	cmp	r3, r5
 8012b26:	dcf2      	bgt.n	8012b0e <_printf_i+0x21e>
 8012b28:	e7eb      	b.n	8012b02 <_printf_i+0x212>
 8012b2a:	2500      	movs	r5, #0
 8012b2c:	f104 0619 	add.w	r6, r4, #25
 8012b30:	e7f5      	b.n	8012b1e <_printf_i+0x22e>
 8012b32:	bf00      	nop
 8012b34:	08017704 	.word	0x08017704
 8012b38:	08017715 	.word	0x08017715

08012b3c <_scanf_float>:
 8012b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b40:	b087      	sub	sp, #28
 8012b42:	4617      	mov	r7, r2
 8012b44:	9303      	str	r3, [sp, #12]
 8012b46:	688b      	ldr	r3, [r1, #8]
 8012b48:	1e5a      	subs	r2, r3, #1
 8012b4a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012b4e:	bf83      	ittte	hi
 8012b50:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012b54:	195b      	addhi	r3, r3, r5
 8012b56:	9302      	strhi	r3, [sp, #8]
 8012b58:	2300      	movls	r3, #0
 8012b5a:	bf86      	itte	hi
 8012b5c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012b60:	608b      	strhi	r3, [r1, #8]
 8012b62:	9302      	strls	r3, [sp, #8]
 8012b64:	680b      	ldr	r3, [r1, #0]
 8012b66:	468b      	mov	fp, r1
 8012b68:	2500      	movs	r5, #0
 8012b6a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012b6e:	f84b 3b1c 	str.w	r3, [fp], #28
 8012b72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012b76:	4680      	mov	r8, r0
 8012b78:	460c      	mov	r4, r1
 8012b7a:	465e      	mov	r6, fp
 8012b7c:	46aa      	mov	sl, r5
 8012b7e:	46a9      	mov	r9, r5
 8012b80:	9501      	str	r5, [sp, #4]
 8012b82:	68a2      	ldr	r2, [r4, #8]
 8012b84:	b152      	cbz	r2, 8012b9c <_scanf_float+0x60>
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	2b4e      	cmp	r3, #78	; 0x4e
 8012b8c:	d864      	bhi.n	8012c58 <_scanf_float+0x11c>
 8012b8e:	2b40      	cmp	r3, #64	; 0x40
 8012b90:	d83c      	bhi.n	8012c0c <_scanf_float+0xd0>
 8012b92:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012b96:	b2c8      	uxtb	r0, r1
 8012b98:	280e      	cmp	r0, #14
 8012b9a:	d93a      	bls.n	8012c12 <_scanf_float+0xd6>
 8012b9c:	f1b9 0f00 	cmp.w	r9, #0
 8012ba0:	d003      	beq.n	8012baa <_scanf_float+0x6e>
 8012ba2:	6823      	ldr	r3, [r4, #0]
 8012ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012ba8:	6023      	str	r3, [r4, #0]
 8012baa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012bae:	f1ba 0f01 	cmp.w	sl, #1
 8012bb2:	f200 8113 	bhi.w	8012ddc <_scanf_float+0x2a0>
 8012bb6:	455e      	cmp	r6, fp
 8012bb8:	f200 8105 	bhi.w	8012dc6 <_scanf_float+0x28a>
 8012bbc:	2501      	movs	r5, #1
 8012bbe:	4628      	mov	r0, r5
 8012bc0:	b007      	add	sp, #28
 8012bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bc6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012bca:	2a0d      	cmp	r2, #13
 8012bcc:	d8e6      	bhi.n	8012b9c <_scanf_float+0x60>
 8012bce:	a101      	add	r1, pc, #4	; (adr r1, 8012bd4 <_scanf_float+0x98>)
 8012bd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012bd4:	08012d13 	.word	0x08012d13
 8012bd8:	08012b9d 	.word	0x08012b9d
 8012bdc:	08012b9d 	.word	0x08012b9d
 8012be0:	08012b9d 	.word	0x08012b9d
 8012be4:	08012d73 	.word	0x08012d73
 8012be8:	08012d4b 	.word	0x08012d4b
 8012bec:	08012b9d 	.word	0x08012b9d
 8012bf0:	08012b9d 	.word	0x08012b9d
 8012bf4:	08012d21 	.word	0x08012d21
 8012bf8:	08012b9d 	.word	0x08012b9d
 8012bfc:	08012b9d 	.word	0x08012b9d
 8012c00:	08012b9d 	.word	0x08012b9d
 8012c04:	08012b9d 	.word	0x08012b9d
 8012c08:	08012cd9 	.word	0x08012cd9
 8012c0c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012c10:	e7db      	b.n	8012bca <_scanf_float+0x8e>
 8012c12:	290e      	cmp	r1, #14
 8012c14:	d8c2      	bhi.n	8012b9c <_scanf_float+0x60>
 8012c16:	a001      	add	r0, pc, #4	; (adr r0, 8012c1c <_scanf_float+0xe0>)
 8012c18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012c1c:	08012ccb 	.word	0x08012ccb
 8012c20:	08012b9d 	.word	0x08012b9d
 8012c24:	08012ccb 	.word	0x08012ccb
 8012c28:	08012d5f 	.word	0x08012d5f
 8012c2c:	08012b9d 	.word	0x08012b9d
 8012c30:	08012c79 	.word	0x08012c79
 8012c34:	08012cb5 	.word	0x08012cb5
 8012c38:	08012cb5 	.word	0x08012cb5
 8012c3c:	08012cb5 	.word	0x08012cb5
 8012c40:	08012cb5 	.word	0x08012cb5
 8012c44:	08012cb5 	.word	0x08012cb5
 8012c48:	08012cb5 	.word	0x08012cb5
 8012c4c:	08012cb5 	.word	0x08012cb5
 8012c50:	08012cb5 	.word	0x08012cb5
 8012c54:	08012cb5 	.word	0x08012cb5
 8012c58:	2b6e      	cmp	r3, #110	; 0x6e
 8012c5a:	d809      	bhi.n	8012c70 <_scanf_float+0x134>
 8012c5c:	2b60      	cmp	r3, #96	; 0x60
 8012c5e:	d8b2      	bhi.n	8012bc6 <_scanf_float+0x8a>
 8012c60:	2b54      	cmp	r3, #84	; 0x54
 8012c62:	d077      	beq.n	8012d54 <_scanf_float+0x218>
 8012c64:	2b59      	cmp	r3, #89	; 0x59
 8012c66:	d199      	bne.n	8012b9c <_scanf_float+0x60>
 8012c68:	2d07      	cmp	r5, #7
 8012c6a:	d197      	bne.n	8012b9c <_scanf_float+0x60>
 8012c6c:	2508      	movs	r5, #8
 8012c6e:	e029      	b.n	8012cc4 <_scanf_float+0x188>
 8012c70:	2b74      	cmp	r3, #116	; 0x74
 8012c72:	d06f      	beq.n	8012d54 <_scanf_float+0x218>
 8012c74:	2b79      	cmp	r3, #121	; 0x79
 8012c76:	e7f6      	b.n	8012c66 <_scanf_float+0x12a>
 8012c78:	6821      	ldr	r1, [r4, #0]
 8012c7a:	05c8      	lsls	r0, r1, #23
 8012c7c:	d51a      	bpl.n	8012cb4 <_scanf_float+0x178>
 8012c7e:	9b02      	ldr	r3, [sp, #8]
 8012c80:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012c84:	6021      	str	r1, [r4, #0]
 8012c86:	f109 0901 	add.w	r9, r9, #1
 8012c8a:	b11b      	cbz	r3, 8012c94 <_scanf_float+0x158>
 8012c8c:	3b01      	subs	r3, #1
 8012c8e:	3201      	adds	r2, #1
 8012c90:	9302      	str	r3, [sp, #8]
 8012c92:	60a2      	str	r2, [r4, #8]
 8012c94:	68a3      	ldr	r3, [r4, #8]
 8012c96:	3b01      	subs	r3, #1
 8012c98:	60a3      	str	r3, [r4, #8]
 8012c9a:	6923      	ldr	r3, [r4, #16]
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	6123      	str	r3, [r4, #16]
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	3b01      	subs	r3, #1
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	607b      	str	r3, [r7, #4]
 8012ca8:	f340 8084 	ble.w	8012db4 <_scanf_float+0x278>
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	3301      	adds	r3, #1
 8012cb0:	603b      	str	r3, [r7, #0]
 8012cb2:	e766      	b.n	8012b82 <_scanf_float+0x46>
 8012cb4:	eb1a 0f05 	cmn.w	sl, r5
 8012cb8:	f47f af70 	bne.w	8012b9c <_scanf_float+0x60>
 8012cbc:	6822      	ldr	r2, [r4, #0]
 8012cbe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012cc2:	6022      	str	r2, [r4, #0]
 8012cc4:	f806 3b01 	strb.w	r3, [r6], #1
 8012cc8:	e7e4      	b.n	8012c94 <_scanf_float+0x158>
 8012cca:	6822      	ldr	r2, [r4, #0]
 8012ccc:	0610      	lsls	r0, r2, #24
 8012cce:	f57f af65 	bpl.w	8012b9c <_scanf_float+0x60>
 8012cd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012cd6:	e7f4      	b.n	8012cc2 <_scanf_float+0x186>
 8012cd8:	f1ba 0f00 	cmp.w	sl, #0
 8012cdc:	d10e      	bne.n	8012cfc <_scanf_float+0x1c0>
 8012cde:	f1b9 0f00 	cmp.w	r9, #0
 8012ce2:	d10e      	bne.n	8012d02 <_scanf_float+0x1c6>
 8012ce4:	6822      	ldr	r2, [r4, #0]
 8012ce6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012cea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012cee:	d108      	bne.n	8012d02 <_scanf_float+0x1c6>
 8012cf0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012cf4:	6022      	str	r2, [r4, #0]
 8012cf6:	f04f 0a01 	mov.w	sl, #1
 8012cfa:	e7e3      	b.n	8012cc4 <_scanf_float+0x188>
 8012cfc:	f1ba 0f02 	cmp.w	sl, #2
 8012d00:	d055      	beq.n	8012dae <_scanf_float+0x272>
 8012d02:	2d01      	cmp	r5, #1
 8012d04:	d002      	beq.n	8012d0c <_scanf_float+0x1d0>
 8012d06:	2d04      	cmp	r5, #4
 8012d08:	f47f af48 	bne.w	8012b9c <_scanf_float+0x60>
 8012d0c:	3501      	adds	r5, #1
 8012d0e:	b2ed      	uxtb	r5, r5
 8012d10:	e7d8      	b.n	8012cc4 <_scanf_float+0x188>
 8012d12:	f1ba 0f01 	cmp.w	sl, #1
 8012d16:	f47f af41 	bne.w	8012b9c <_scanf_float+0x60>
 8012d1a:	f04f 0a02 	mov.w	sl, #2
 8012d1e:	e7d1      	b.n	8012cc4 <_scanf_float+0x188>
 8012d20:	b97d      	cbnz	r5, 8012d42 <_scanf_float+0x206>
 8012d22:	f1b9 0f00 	cmp.w	r9, #0
 8012d26:	f47f af3c 	bne.w	8012ba2 <_scanf_float+0x66>
 8012d2a:	6822      	ldr	r2, [r4, #0]
 8012d2c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012d30:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012d34:	f47f af39 	bne.w	8012baa <_scanf_float+0x6e>
 8012d38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012d3c:	6022      	str	r2, [r4, #0]
 8012d3e:	2501      	movs	r5, #1
 8012d40:	e7c0      	b.n	8012cc4 <_scanf_float+0x188>
 8012d42:	2d03      	cmp	r5, #3
 8012d44:	d0e2      	beq.n	8012d0c <_scanf_float+0x1d0>
 8012d46:	2d05      	cmp	r5, #5
 8012d48:	e7de      	b.n	8012d08 <_scanf_float+0x1cc>
 8012d4a:	2d02      	cmp	r5, #2
 8012d4c:	f47f af26 	bne.w	8012b9c <_scanf_float+0x60>
 8012d50:	2503      	movs	r5, #3
 8012d52:	e7b7      	b.n	8012cc4 <_scanf_float+0x188>
 8012d54:	2d06      	cmp	r5, #6
 8012d56:	f47f af21 	bne.w	8012b9c <_scanf_float+0x60>
 8012d5a:	2507      	movs	r5, #7
 8012d5c:	e7b2      	b.n	8012cc4 <_scanf_float+0x188>
 8012d5e:	6822      	ldr	r2, [r4, #0]
 8012d60:	0591      	lsls	r1, r2, #22
 8012d62:	f57f af1b 	bpl.w	8012b9c <_scanf_float+0x60>
 8012d66:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012d6a:	6022      	str	r2, [r4, #0]
 8012d6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012d70:	e7a8      	b.n	8012cc4 <_scanf_float+0x188>
 8012d72:	6822      	ldr	r2, [r4, #0]
 8012d74:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012d78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012d7c:	d006      	beq.n	8012d8c <_scanf_float+0x250>
 8012d7e:	0550      	lsls	r0, r2, #21
 8012d80:	f57f af0c 	bpl.w	8012b9c <_scanf_float+0x60>
 8012d84:	f1b9 0f00 	cmp.w	r9, #0
 8012d88:	f43f af0f 	beq.w	8012baa <_scanf_float+0x6e>
 8012d8c:	0591      	lsls	r1, r2, #22
 8012d8e:	bf58      	it	pl
 8012d90:	9901      	ldrpl	r1, [sp, #4]
 8012d92:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012d96:	bf58      	it	pl
 8012d98:	eba9 0101 	subpl.w	r1, r9, r1
 8012d9c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012da0:	bf58      	it	pl
 8012da2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012da6:	6022      	str	r2, [r4, #0]
 8012da8:	f04f 0900 	mov.w	r9, #0
 8012dac:	e78a      	b.n	8012cc4 <_scanf_float+0x188>
 8012dae:	f04f 0a03 	mov.w	sl, #3
 8012db2:	e787      	b.n	8012cc4 <_scanf_float+0x188>
 8012db4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012db8:	4639      	mov	r1, r7
 8012dba:	4640      	mov	r0, r8
 8012dbc:	4798      	blx	r3
 8012dbe:	2800      	cmp	r0, #0
 8012dc0:	f43f aedf 	beq.w	8012b82 <_scanf_float+0x46>
 8012dc4:	e6ea      	b.n	8012b9c <_scanf_float+0x60>
 8012dc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012dca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012dce:	463a      	mov	r2, r7
 8012dd0:	4640      	mov	r0, r8
 8012dd2:	4798      	blx	r3
 8012dd4:	6923      	ldr	r3, [r4, #16]
 8012dd6:	3b01      	subs	r3, #1
 8012dd8:	6123      	str	r3, [r4, #16]
 8012dda:	e6ec      	b.n	8012bb6 <_scanf_float+0x7a>
 8012ddc:	1e6b      	subs	r3, r5, #1
 8012dde:	2b06      	cmp	r3, #6
 8012de0:	d825      	bhi.n	8012e2e <_scanf_float+0x2f2>
 8012de2:	2d02      	cmp	r5, #2
 8012de4:	d836      	bhi.n	8012e54 <_scanf_float+0x318>
 8012de6:	455e      	cmp	r6, fp
 8012de8:	f67f aee8 	bls.w	8012bbc <_scanf_float+0x80>
 8012dec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012df0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012df4:	463a      	mov	r2, r7
 8012df6:	4640      	mov	r0, r8
 8012df8:	4798      	blx	r3
 8012dfa:	6923      	ldr	r3, [r4, #16]
 8012dfc:	3b01      	subs	r3, #1
 8012dfe:	6123      	str	r3, [r4, #16]
 8012e00:	e7f1      	b.n	8012de6 <_scanf_float+0x2aa>
 8012e02:	9802      	ldr	r0, [sp, #8]
 8012e04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e08:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012e0c:	9002      	str	r0, [sp, #8]
 8012e0e:	463a      	mov	r2, r7
 8012e10:	4640      	mov	r0, r8
 8012e12:	4798      	blx	r3
 8012e14:	6923      	ldr	r3, [r4, #16]
 8012e16:	3b01      	subs	r3, #1
 8012e18:	6123      	str	r3, [r4, #16]
 8012e1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012e1e:	fa5f fa8a 	uxtb.w	sl, sl
 8012e22:	f1ba 0f02 	cmp.w	sl, #2
 8012e26:	d1ec      	bne.n	8012e02 <_scanf_float+0x2c6>
 8012e28:	3d03      	subs	r5, #3
 8012e2a:	b2ed      	uxtb	r5, r5
 8012e2c:	1b76      	subs	r6, r6, r5
 8012e2e:	6823      	ldr	r3, [r4, #0]
 8012e30:	05da      	lsls	r2, r3, #23
 8012e32:	d52f      	bpl.n	8012e94 <_scanf_float+0x358>
 8012e34:	055b      	lsls	r3, r3, #21
 8012e36:	d510      	bpl.n	8012e5a <_scanf_float+0x31e>
 8012e38:	455e      	cmp	r6, fp
 8012e3a:	f67f aebf 	bls.w	8012bbc <_scanf_float+0x80>
 8012e3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012e46:	463a      	mov	r2, r7
 8012e48:	4640      	mov	r0, r8
 8012e4a:	4798      	blx	r3
 8012e4c:	6923      	ldr	r3, [r4, #16]
 8012e4e:	3b01      	subs	r3, #1
 8012e50:	6123      	str	r3, [r4, #16]
 8012e52:	e7f1      	b.n	8012e38 <_scanf_float+0x2fc>
 8012e54:	46aa      	mov	sl, r5
 8012e56:	9602      	str	r6, [sp, #8]
 8012e58:	e7df      	b.n	8012e1a <_scanf_float+0x2de>
 8012e5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012e5e:	6923      	ldr	r3, [r4, #16]
 8012e60:	2965      	cmp	r1, #101	; 0x65
 8012e62:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012e66:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8012e6a:	6123      	str	r3, [r4, #16]
 8012e6c:	d00c      	beq.n	8012e88 <_scanf_float+0x34c>
 8012e6e:	2945      	cmp	r1, #69	; 0x45
 8012e70:	d00a      	beq.n	8012e88 <_scanf_float+0x34c>
 8012e72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e76:	463a      	mov	r2, r7
 8012e78:	4640      	mov	r0, r8
 8012e7a:	4798      	blx	r3
 8012e7c:	6923      	ldr	r3, [r4, #16]
 8012e7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012e82:	3b01      	subs	r3, #1
 8012e84:	1eb5      	subs	r5, r6, #2
 8012e86:	6123      	str	r3, [r4, #16]
 8012e88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e8c:	463a      	mov	r2, r7
 8012e8e:	4640      	mov	r0, r8
 8012e90:	4798      	blx	r3
 8012e92:	462e      	mov	r6, r5
 8012e94:	6825      	ldr	r5, [r4, #0]
 8012e96:	f015 0510 	ands.w	r5, r5, #16
 8012e9a:	d158      	bne.n	8012f4e <_scanf_float+0x412>
 8012e9c:	7035      	strb	r5, [r6, #0]
 8012e9e:	6823      	ldr	r3, [r4, #0]
 8012ea0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012ea8:	d11c      	bne.n	8012ee4 <_scanf_float+0x3a8>
 8012eaa:	9b01      	ldr	r3, [sp, #4]
 8012eac:	454b      	cmp	r3, r9
 8012eae:	eba3 0209 	sub.w	r2, r3, r9
 8012eb2:	d124      	bne.n	8012efe <_scanf_float+0x3c2>
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	4659      	mov	r1, fp
 8012eb8:	4640      	mov	r0, r8
 8012eba:	f000 ff9b 	bl	8013df4 <_strtod_r>
 8012ebe:	9b03      	ldr	r3, [sp, #12]
 8012ec0:	6821      	ldr	r1, [r4, #0]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	f011 0f02 	tst.w	r1, #2
 8012ec8:	ec57 6b10 	vmov	r6, r7, d0
 8012ecc:	f103 0204 	add.w	r2, r3, #4
 8012ed0:	d020      	beq.n	8012f14 <_scanf_float+0x3d8>
 8012ed2:	9903      	ldr	r1, [sp, #12]
 8012ed4:	600a      	str	r2, [r1, #0]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	e9c3 6700 	strd	r6, r7, [r3]
 8012edc:	68e3      	ldr	r3, [r4, #12]
 8012ede:	3301      	adds	r3, #1
 8012ee0:	60e3      	str	r3, [r4, #12]
 8012ee2:	e66c      	b.n	8012bbe <_scanf_float+0x82>
 8012ee4:	9b04      	ldr	r3, [sp, #16]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d0e4      	beq.n	8012eb4 <_scanf_float+0x378>
 8012eea:	9905      	ldr	r1, [sp, #20]
 8012eec:	230a      	movs	r3, #10
 8012eee:	462a      	mov	r2, r5
 8012ef0:	3101      	adds	r1, #1
 8012ef2:	4640      	mov	r0, r8
 8012ef4:	f001 f808 	bl	8013f08 <_strtol_r>
 8012ef8:	9b04      	ldr	r3, [sp, #16]
 8012efa:	9e05      	ldr	r6, [sp, #20]
 8012efc:	1ac2      	subs	r2, r0, r3
 8012efe:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012f02:	429e      	cmp	r6, r3
 8012f04:	bf28      	it	cs
 8012f06:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012f0a:	4912      	ldr	r1, [pc, #72]	; (8012f54 <_scanf_float+0x418>)
 8012f0c:	4630      	mov	r0, r6
 8012f0e:	f000 f8a5 	bl	801305c <siprintf>
 8012f12:	e7cf      	b.n	8012eb4 <_scanf_float+0x378>
 8012f14:	f011 0f04 	tst.w	r1, #4
 8012f18:	9903      	ldr	r1, [sp, #12]
 8012f1a:	600a      	str	r2, [r1, #0]
 8012f1c:	d1db      	bne.n	8012ed6 <_scanf_float+0x39a>
 8012f1e:	f8d3 8000 	ldr.w	r8, [r3]
 8012f22:	ee10 2a10 	vmov	r2, s0
 8012f26:	ee10 0a10 	vmov	r0, s0
 8012f2a:	463b      	mov	r3, r7
 8012f2c:	4639      	mov	r1, r7
 8012f2e:	f7ed fe0d 	bl	8000b4c <__aeabi_dcmpun>
 8012f32:	b128      	cbz	r0, 8012f40 <_scanf_float+0x404>
 8012f34:	4808      	ldr	r0, [pc, #32]	; (8012f58 <_scanf_float+0x41c>)
 8012f36:	f000 f88b 	bl	8013050 <nanf>
 8012f3a:	ed88 0a00 	vstr	s0, [r8]
 8012f3e:	e7cd      	b.n	8012edc <_scanf_float+0x3a0>
 8012f40:	4630      	mov	r0, r6
 8012f42:	4639      	mov	r1, r7
 8012f44:	f7ed fe60 	bl	8000c08 <__aeabi_d2f>
 8012f48:	f8c8 0000 	str.w	r0, [r8]
 8012f4c:	e7c6      	b.n	8012edc <_scanf_float+0x3a0>
 8012f4e:	2500      	movs	r5, #0
 8012f50:	e635      	b.n	8012bbe <_scanf_float+0x82>
 8012f52:	bf00      	nop
 8012f54:	08017726 	.word	0x08017726
 8012f58:	08017a5b 	.word	0x08017a5b

08012f5c <cleanup_glue>:
 8012f5c:	b538      	push	{r3, r4, r5, lr}
 8012f5e:	460c      	mov	r4, r1
 8012f60:	6809      	ldr	r1, [r1, #0]
 8012f62:	4605      	mov	r5, r0
 8012f64:	b109      	cbz	r1, 8012f6a <cleanup_glue+0xe>
 8012f66:	f7ff fff9 	bl	8012f5c <cleanup_glue>
 8012f6a:	4621      	mov	r1, r4
 8012f6c:	4628      	mov	r0, r5
 8012f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f72:	f002 bfd9 	b.w	8015f28 <_free_r>
	...

08012f78 <_reclaim_reent>:
 8012f78:	4b2c      	ldr	r3, [pc, #176]	; (801302c <_reclaim_reent+0xb4>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	4283      	cmp	r3, r0
 8012f7e:	b570      	push	{r4, r5, r6, lr}
 8012f80:	4604      	mov	r4, r0
 8012f82:	d051      	beq.n	8013028 <_reclaim_reent+0xb0>
 8012f84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012f86:	b143      	cbz	r3, 8012f9a <_reclaim_reent+0x22>
 8012f88:	68db      	ldr	r3, [r3, #12]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d14a      	bne.n	8013024 <_reclaim_reent+0xac>
 8012f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f90:	6819      	ldr	r1, [r3, #0]
 8012f92:	b111      	cbz	r1, 8012f9a <_reclaim_reent+0x22>
 8012f94:	4620      	mov	r0, r4
 8012f96:	f002 ffc7 	bl	8015f28 <_free_r>
 8012f9a:	6961      	ldr	r1, [r4, #20]
 8012f9c:	b111      	cbz	r1, 8012fa4 <_reclaim_reent+0x2c>
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	f002 ffc2 	bl	8015f28 <_free_r>
 8012fa4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012fa6:	b111      	cbz	r1, 8012fae <_reclaim_reent+0x36>
 8012fa8:	4620      	mov	r0, r4
 8012faa:	f002 ffbd 	bl	8015f28 <_free_r>
 8012fae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012fb0:	b111      	cbz	r1, 8012fb8 <_reclaim_reent+0x40>
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	f002 ffb8 	bl	8015f28 <_free_r>
 8012fb8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012fba:	b111      	cbz	r1, 8012fc2 <_reclaim_reent+0x4a>
 8012fbc:	4620      	mov	r0, r4
 8012fbe:	f002 ffb3 	bl	8015f28 <_free_r>
 8012fc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012fc4:	b111      	cbz	r1, 8012fcc <_reclaim_reent+0x54>
 8012fc6:	4620      	mov	r0, r4
 8012fc8:	f002 ffae 	bl	8015f28 <_free_r>
 8012fcc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012fce:	b111      	cbz	r1, 8012fd6 <_reclaim_reent+0x5e>
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	f002 ffa9 	bl	8015f28 <_free_r>
 8012fd6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012fd8:	b111      	cbz	r1, 8012fe0 <_reclaim_reent+0x68>
 8012fda:	4620      	mov	r0, r4
 8012fdc:	f002 ffa4 	bl	8015f28 <_free_r>
 8012fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012fe2:	b111      	cbz	r1, 8012fea <_reclaim_reent+0x72>
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	f002 ff9f 	bl	8015f28 <_free_r>
 8012fea:	69a3      	ldr	r3, [r4, #24]
 8012fec:	b1e3      	cbz	r3, 8013028 <_reclaim_reent+0xb0>
 8012fee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	4798      	blx	r3
 8012ff4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012ff6:	b1b9      	cbz	r1, 8013028 <_reclaim_reent+0xb0>
 8012ff8:	4620      	mov	r0, r4
 8012ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ffe:	f7ff bfad 	b.w	8012f5c <cleanup_glue>
 8013002:	5949      	ldr	r1, [r1, r5]
 8013004:	b941      	cbnz	r1, 8013018 <_reclaim_reent+0xa0>
 8013006:	3504      	adds	r5, #4
 8013008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801300a:	2d80      	cmp	r5, #128	; 0x80
 801300c:	68d9      	ldr	r1, [r3, #12]
 801300e:	d1f8      	bne.n	8013002 <_reclaim_reent+0x8a>
 8013010:	4620      	mov	r0, r4
 8013012:	f002 ff89 	bl	8015f28 <_free_r>
 8013016:	e7ba      	b.n	8012f8e <_reclaim_reent+0x16>
 8013018:	680e      	ldr	r6, [r1, #0]
 801301a:	4620      	mov	r0, r4
 801301c:	f002 ff84 	bl	8015f28 <_free_r>
 8013020:	4631      	mov	r1, r6
 8013022:	e7ef      	b.n	8013004 <_reclaim_reent+0x8c>
 8013024:	2500      	movs	r5, #0
 8013026:	e7ef      	b.n	8013008 <_reclaim_reent+0x90>
 8013028:	bd70      	pop	{r4, r5, r6, pc}
 801302a:	bf00      	nop
 801302c:	2000019c 	.word	0x2000019c

08013030 <_sbrk_r>:
 8013030:	b538      	push	{r3, r4, r5, lr}
 8013032:	4d06      	ldr	r5, [pc, #24]	; (801304c <_sbrk_r+0x1c>)
 8013034:	2300      	movs	r3, #0
 8013036:	4604      	mov	r4, r0
 8013038:	4608      	mov	r0, r1
 801303a:	602b      	str	r3, [r5, #0]
 801303c:	f7ef ffb0 	bl	8002fa0 <_sbrk>
 8013040:	1c43      	adds	r3, r0, #1
 8013042:	d102      	bne.n	801304a <_sbrk_r+0x1a>
 8013044:	682b      	ldr	r3, [r5, #0]
 8013046:	b103      	cbz	r3, 801304a <_sbrk_r+0x1a>
 8013048:	6023      	str	r3, [r4, #0]
 801304a:	bd38      	pop	{r3, r4, r5, pc}
 801304c:	2000c37c 	.word	0x2000c37c

08013050 <nanf>:
 8013050:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013058 <nanf+0x8>
 8013054:	4770      	bx	lr
 8013056:	bf00      	nop
 8013058:	7fc00000 	.word	0x7fc00000

0801305c <siprintf>:
 801305c:	b40e      	push	{r1, r2, r3}
 801305e:	b500      	push	{lr}
 8013060:	b09c      	sub	sp, #112	; 0x70
 8013062:	ab1d      	add	r3, sp, #116	; 0x74
 8013064:	9002      	str	r0, [sp, #8]
 8013066:	9006      	str	r0, [sp, #24]
 8013068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801306c:	4809      	ldr	r0, [pc, #36]	; (8013094 <siprintf+0x38>)
 801306e:	9107      	str	r1, [sp, #28]
 8013070:	9104      	str	r1, [sp, #16]
 8013072:	4909      	ldr	r1, [pc, #36]	; (8013098 <siprintf+0x3c>)
 8013074:	f853 2b04 	ldr.w	r2, [r3], #4
 8013078:	9105      	str	r1, [sp, #20]
 801307a:	6800      	ldr	r0, [r0, #0]
 801307c:	9301      	str	r3, [sp, #4]
 801307e:	a902      	add	r1, sp, #8
 8013080:	f002 fffe 	bl	8016080 <_svfiprintf_r>
 8013084:	9b02      	ldr	r3, [sp, #8]
 8013086:	2200      	movs	r2, #0
 8013088:	701a      	strb	r2, [r3, #0]
 801308a:	b01c      	add	sp, #112	; 0x70
 801308c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013090:	b003      	add	sp, #12
 8013092:	4770      	bx	lr
 8013094:	2000019c 	.word	0x2000019c
 8013098:	ffff0208 	.word	0xffff0208

0801309c <siscanf>:
 801309c:	b40e      	push	{r1, r2, r3}
 801309e:	b510      	push	{r4, lr}
 80130a0:	b09f      	sub	sp, #124	; 0x7c
 80130a2:	ac21      	add	r4, sp, #132	; 0x84
 80130a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80130a8:	f854 2b04 	ldr.w	r2, [r4], #4
 80130ac:	9201      	str	r2, [sp, #4]
 80130ae:	f8ad 101c 	strh.w	r1, [sp, #28]
 80130b2:	9004      	str	r0, [sp, #16]
 80130b4:	9008      	str	r0, [sp, #32]
 80130b6:	f7ed f89b 	bl	80001f0 <strlen>
 80130ba:	4b0c      	ldr	r3, [pc, #48]	; (80130ec <siscanf+0x50>)
 80130bc:	9005      	str	r0, [sp, #20]
 80130be:	9009      	str	r0, [sp, #36]	; 0x24
 80130c0:	930d      	str	r3, [sp, #52]	; 0x34
 80130c2:	480b      	ldr	r0, [pc, #44]	; (80130f0 <siscanf+0x54>)
 80130c4:	9a01      	ldr	r2, [sp, #4]
 80130c6:	6800      	ldr	r0, [r0, #0]
 80130c8:	9403      	str	r4, [sp, #12]
 80130ca:	2300      	movs	r3, #0
 80130cc:	9311      	str	r3, [sp, #68]	; 0x44
 80130ce:	9316      	str	r3, [sp, #88]	; 0x58
 80130d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80130d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80130d8:	a904      	add	r1, sp, #16
 80130da:	4623      	mov	r3, r4
 80130dc:	f003 f92a 	bl	8016334 <__ssvfiscanf_r>
 80130e0:	b01f      	add	sp, #124	; 0x7c
 80130e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130e6:	b003      	add	sp, #12
 80130e8:	4770      	bx	lr
 80130ea:	bf00      	nop
 80130ec:	08013117 	.word	0x08013117
 80130f0:	2000019c 	.word	0x2000019c

080130f4 <__sread>:
 80130f4:	b510      	push	{r4, lr}
 80130f6:	460c      	mov	r4, r1
 80130f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130fc:	f003 fbde 	bl	80168bc <_read_r>
 8013100:	2800      	cmp	r0, #0
 8013102:	bfab      	itete	ge
 8013104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013106:	89a3      	ldrhlt	r3, [r4, #12]
 8013108:	181b      	addge	r3, r3, r0
 801310a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801310e:	bfac      	ite	ge
 8013110:	6563      	strge	r3, [r4, #84]	; 0x54
 8013112:	81a3      	strhlt	r3, [r4, #12]
 8013114:	bd10      	pop	{r4, pc}

08013116 <__seofread>:
 8013116:	2000      	movs	r0, #0
 8013118:	4770      	bx	lr

0801311a <__swrite>:
 801311a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801311e:	461f      	mov	r7, r3
 8013120:	898b      	ldrh	r3, [r1, #12]
 8013122:	05db      	lsls	r3, r3, #23
 8013124:	4605      	mov	r5, r0
 8013126:	460c      	mov	r4, r1
 8013128:	4616      	mov	r6, r2
 801312a:	d505      	bpl.n	8013138 <__swrite+0x1e>
 801312c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013130:	2302      	movs	r3, #2
 8013132:	2200      	movs	r2, #0
 8013134:	f002 f9f6 	bl	8015524 <_lseek_r>
 8013138:	89a3      	ldrh	r3, [r4, #12]
 801313a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801313e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013142:	81a3      	strh	r3, [r4, #12]
 8013144:	4632      	mov	r2, r6
 8013146:	463b      	mov	r3, r7
 8013148:	4628      	mov	r0, r5
 801314a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801314e:	f000 bf17 	b.w	8013f80 <_write_r>

08013152 <__sseek>:
 8013152:	b510      	push	{r4, lr}
 8013154:	460c      	mov	r4, r1
 8013156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801315a:	f002 f9e3 	bl	8015524 <_lseek_r>
 801315e:	1c43      	adds	r3, r0, #1
 8013160:	89a3      	ldrh	r3, [r4, #12]
 8013162:	bf15      	itete	ne
 8013164:	6560      	strne	r0, [r4, #84]	; 0x54
 8013166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801316a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801316e:	81a3      	strheq	r3, [r4, #12]
 8013170:	bf18      	it	ne
 8013172:	81a3      	strhne	r3, [r4, #12]
 8013174:	bd10      	pop	{r4, pc}

08013176 <__sclose>:
 8013176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801317a:	f000 bf13 	b.w	8013fa4 <_close_r>

0801317e <strncmp>:
 801317e:	b510      	push	{r4, lr}
 8013180:	b16a      	cbz	r2, 801319e <strncmp+0x20>
 8013182:	3901      	subs	r1, #1
 8013184:	1884      	adds	r4, r0, r2
 8013186:	f810 3b01 	ldrb.w	r3, [r0], #1
 801318a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801318e:	4293      	cmp	r3, r2
 8013190:	d103      	bne.n	801319a <strncmp+0x1c>
 8013192:	42a0      	cmp	r0, r4
 8013194:	d001      	beq.n	801319a <strncmp+0x1c>
 8013196:	2b00      	cmp	r3, #0
 8013198:	d1f5      	bne.n	8013186 <strncmp+0x8>
 801319a:	1a98      	subs	r0, r3, r2
 801319c:	bd10      	pop	{r4, pc}
 801319e:	4610      	mov	r0, r2
 80131a0:	e7fc      	b.n	801319c <strncmp+0x1e>

080131a2 <sulp>:
 80131a2:	b570      	push	{r4, r5, r6, lr}
 80131a4:	4604      	mov	r4, r0
 80131a6:	460d      	mov	r5, r1
 80131a8:	ec45 4b10 	vmov	d0, r4, r5
 80131ac:	4616      	mov	r6, r2
 80131ae:	f002 fd5d 	bl	8015c6c <__ulp>
 80131b2:	ec51 0b10 	vmov	r0, r1, d0
 80131b6:	b17e      	cbz	r6, 80131d8 <sulp+0x36>
 80131b8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80131bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	dd09      	ble.n	80131d8 <sulp+0x36>
 80131c4:	051b      	lsls	r3, r3, #20
 80131c6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80131ca:	2400      	movs	r4, #0
 80131cc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80131d0:	4622      	mov	r2, r4
 80131d2:	462b      	mov	r3, r5
 80131d4:	f7ed fa20 	bl	8000618 <__aeabi_dmul>
 80131d8:	bd70      	pop	{r4, r5, r6, pc}
 80131da:	0000      	movs	r0, r0
 80131dc:	0000      	movs	r0, r0
	...

080131e0 <_strtod_l>:
 80131e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131e4:	b0a3      	sub	sp, #140	; 0x8c
 80131e6:	461f      	mov	r7, r3
 80131e8:	2300      	movs	r3, #0
 80131ea:	931e      	str	r3, [sp, #120]	; 0x78
 80131ec:	4ba4      	ldr	r3, [pc, #656]	; (8013480 <_strtod_l+0x2a0>)
 80131ee:	9219      	str	r2, [sp, #100]	; 0x64
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	9307      	str	r3, [sp, #28]
 80131f4:	4604      	mov	r4, r0
 80131f6:	4618      	mov	r0, r3
 80131f8:	4688      	mov	r8, r1
 80131fa:	f7ec fff9 	bl	80001f0 <strlen>
 80131fe:	f04f 0a00 	mov.w	sl, #0
 8013202:	4605      	mov	r5, r0
 8013204:	f04f 0b00 	mov.w	fp, #0
 8013208:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801320c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801320e:	781a      	ldrb	r2, [r3, #0]
 8013210:	2a2b      	cmp	r2, #43	; 0x2b
 8013212:	d04c      	beq.n	80132ae <_strtod_l+0xce>
 8013214:	d839      	bhi.n	801328a <_strtod_l+0xaa>
 8013216:	2a0d      	cmp	r2, #13
 8013218:	d832      	bhi.n	8013280 <_strtod_l+0xa0>
 801321a:	2a08      	cmp	r2, #8
 801321c:	d832      	bhi.n	8013284 <_strtod_l+0xa4>
 801321e:	2a00      	cmp	r2, #0
 8013220:	d03c      	beq.n	801329c <_strtod_l+0xbc>
 8013222:	2300      	movs	r3, #0
 8013224:	930e      	str	r3, [sp, #56]	; 0x38
 8013226:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013228:	7833      	ldrb	r3, [r6, #0]
 801322a:	2b30      	cmp	r3, #48	; 0x30
 801322c:	f040 80b4 	bne.w	8013398 <_strtod_l+0x1b8>
 8013230:	7873      	ldrb	r3, [r6, #1]
 8013232:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013236:	2b58      	cmp	r3, #88	; 0x58
 8013238:	d16c      	bne.n	8013314 <_strtod_l+0x134>
 801323a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801323c:	9301      	str	r3, [sp, #4]
 801323e:	ab1e      	add	r3, sp, #120	; 0x78
 8013240:	9702      	str	r7, [sp, #8]
 8013242:	9300      	str	r3, [sp, #0]
 8013244:	4a8f      	ldr	r2, [pc, #572]	; (8013484 <_strtod_l+0x2a4>)
 8013246:	ab1f      	add	r3, sp, #124	; 0x7c
 8013248:	a91d      	add	r1, sp, #116	; 0x74
 801324a:	4620      	mov	r0, r4
 801324c:	f001 fe5e 	bl	8014f0c <__gethex>
 8013250:	f010 0707 	ands.w	r7, r0, #7
 8013254:	4605      	mov	r5, r0
 8013256:	d005      	beq.n	8013264 <_strtod_l+0x84>
 8013258:	2f06      	cmp	r7, #6
 801325a:	d12a      	bne.n	80132b2 <_strtod_l+0xd2>
 801325c:	3601      	adds	r6, #1
 801325e:	2300      	movs	r3, #0
 8013260:	961d      	str	r6, [sp, #116]	; 0x74
 8013262:	930e      	str	r3, [sp, #56]	; 0x38
 8013264:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013266:	2b00      	cmp	r3, #0
 8013268:	f040 8596 	bne.w	8013d98 <_strtod_l+0xbb8>
 801326c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801326e:	b1db      	cbz	r3, 80132a8 <_strtod_l+0xc8>
 8013270:	4652      	mov	r2, sl
 8013272:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013276:	ec43 2b10 	vmov	d0, r2, r3
 801327a:	b023      	add	sp, #140	; 0x8c
 801327c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013280:	2a20      	cmp	r2, #32
 8013282:	d1ce      	bne.n	8013222 <_strtod_l+0x42>
 8013284:	3301      	adds	r3, #1
 8013286:	931d      	str	r3, [sp, #116]	; 0x74
 8013288:	e7c0      	b.n	801320c <_strtod_l+0x2c>
 801328a:	2a2d      	cmp	r2, #45	; 0x2d
 801328c:	d1c9      	bne.n	8013222 <_strtod_l+0x42>
 801328e:	2201      	movs	r2, #1
 8013290:	920e      	str	r2, [sp, #56]	; 0x38
 8013292:	1c5a      	adds	r2, r3, #1
 8013294:	921d      	str	r2, [sp, #116]	; 0x74
 8013296:	785b      	ldrb	r3, [r3, #1]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d1c4      	bne.n	8013226 <_strtod_l+0x46>
 801329c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801329e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	f040 8576 	bne.w	8013d94 <_strtod_l+0xbb4>
 80132a8:	4652      	mov	r2, sl
 80132aa:	465b      	mov	r3, fp
 80132ac:	e7e3      	b.n	8013276 <_strtod_l+0x96>
 80132ae:	2200      	movs	r2, #0
 80132b0:	e7ee      	b.n	8013290 <_strtod_l+0xb0>
 80132b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80132b4:	b13a      	cbz	r2, 80132c6 <_strtod_l+0xe6>
 80132b6:	2135      	movs	r1, #53	; 0x35
 80132b8:	a820      	add	r0, sp, #128	; 0x80
 80132ba:	f002 fde2 	bl	8015e82 <__copybits>
 80132be:	991e      	ldr	r1, [sp, #120]	; 0x78
 80132c0:	4620      	mov	r0, r4
 80132c2:	f002 f9a7 	bl	8015614 <_Bfree>
 80132c6:	3f01      	subs	r7, #1
 80132c8:	2f05      	cmp	r7, #5
 80132ca:	d807      	bhi.n	80132dc <_strtod_l+0xfc>
 80132cc:	e8df f007 	tbb	[pc, r7]
 80132d0:	1d180b0e 	.word	0x1d180b0e
 80132d4:	030e      	.short	0x030e
 80132d6:	f04f 0b00 	mov.w	fp, #0
 80132da:	46da      	mov	sl, fp
 80132dc:	0728      	lsls	r0, r5, #28
 80132de:	d5c1      	bpl.n	8013264 <_strtod_l+0x84>
 80132e0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80132e4:	e7be      	b.n	8013264 <_strtod_l+0x84>
 80132e6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80132ea:	e7f7      	b.n	80132dc <_strtod_l+0xfc>
 80132ec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80132f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80132f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80132f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80132fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80132fe:	e7ed      	b.n	80132dc <_strtod_l+0xfc>
 8013300:	f8df b184 	ldr.w	fp, [pc, #388]	; 8013488 <_strtod_l+0x2a8>
 8013304:	f04f 0a00 	mov.w	sl, #0
 8013308:	e7e8      	b.n	80132dc <_strtod_l+0xfc>
 801330a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801330e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8013312:	e7e3      	b.n	80132dc <_strtod_l+0xfc>
 8013314:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013316:	1c5a      	adds	r2, r3, #1
 8013318:	921d      	str	r2, [sp, #116]	; 0x74
 801331a:	785b      	ldrb	r3, [r3, #1]
 801331c:	2b30      	cmp	r3, #48	; 0x30
 801331e:	d0f9      	beq.n	8013314 <_strtod_l+0x134>
 8013320:	2b00      	cmp	r3, #0
 8013322:	d09f      	beq.n	8013264 <_strtod_l+0x84>
 8013324:	2301      	movs	r3, #1
 8013326:	f04f 0900 	mov.w	r9, #0
 801332a:	9304      	str	r3, [sp, #16]
 801332c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801332e:	930a      	str	r3, [sp, #40]	; 0x28
 8013330:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013334:	464f      	mov	r7, r9
 8013336:	220a      	movs	r2, #10
 8013338:	981d      	ldr	r0, [sp, #116]	; 0x74
 801333a:	7806      	ldrb	r6, [r0, #0]
 801333c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013340:	b2d9      	uxtb	r1, r3
 8013342:	2909      	cmp	r1, #9
 8013344:	d92a      	bls.n	801339c <_strtod_l+0x1bc>
 8013346:	9907      	ldr	r1, [sp, #28]
 8013348:	462a      	mov	r2, r5
 801334a:	f7ff ff18 	bl	801317e <strncmp>
 801334e:	b398      	cbz	r0, 80133b8 <_strtod_l+0x1d8>
 8013350:	2000      	movs	r0, #0
 8013352:	4633      	mov	r3, r6
 8013354:	463d      	mov	r5, r7
 8013356:	9007      	str	r0, [sp, #28]
 8013358:	4602      	mov	r2, r0
 801335a:	2b65      	cmp	r3, #101	; 0x65
 801335c:	d001      	beq.n	8013362 <_strtod_l+0x182>
 801335e:	2b45      	cmp	r3, #69	; 0x45
 8013360:	d118      	bne.n	8013394 <_strtod_l+0x1b4>
 8013362:	b91d      	cbnz	r5, 801336c <_strtod_l+0x18c>
 8013364:	9b04      	ldr	r3, [sp, #16]
 8013366:	4303      	orrs	r3, r0
 8013368:	d098      	beq.n	801329c <_strtod_l+0xbc>
 801336a:	2500      	movs	r5, #0
 801336c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8013370:	f108 0301 	add.w	r3, r8, #1
 8013374:	931d      	str	r3, [sp, #116]	; 0x74
 8013376:	f898 3001 	ldrb.w	r3, [r8, #1]
 801337a:	2b2b      	cmp	r3, #43	; 0x2b
 801337c:	d075      	beq.n	801346a <_strtod_l+0x28a>
 801337e:	2b2d      	cmp	r3, #45	; 0x2d
 8013380:	d07b      	beq.n	801347a <_strtod_l+0x29a>
 8013382:	f04f 0c00 	mov.w	ip, #0
 8013386:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801338a:	2909      	cmp	r1, #9
 801338c:	f240 8082 	bls.w	8013494 <_strtod_l+0x2b4>
 8013390:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013394:	2600      	movs	r6, #0
 8013396:	e09d      	b.n	80134d4 <_strtod_l+0x2f4>
 8013398:	2300      	movs	r3, #0
 801339a:	e7c4      	b.n	8013326 <_strtod_l+0x146>
 801339c:	2f08      	cmp	r7, #8
 801339e:	bfd8      	it	le
 80133a0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80133a2:	f100 0001 	add.w	r0, r0, #1
 80133a6:	bfda      	itte	le
 80133a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80133ac:	9309      	strle	r3, [sp, #36]	; 0x24
 80133ae:	fb02 3909 	mlagt	r9, r2, r9, r3
 80133b2:	3701      	adds	r7, #1
 80133b4:	901d      	str	r0, [sp, #116]	; 0x74
 80133b6:	e7bf      	b.n	8013338 <_strtod_l+0x158>
 80133b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80133ba:	195a      	adds	r2, r3, r5
 80133bc:	921d      	str	r2, [sp, #116]	; 0x74
 80133be:	5d5b      	ldrb	r3, [r3, r5]
 80133c0:	2f00      	cmp	r7, #0
 80133c2:	d037      	beq.n	8013434 <_strtod_l+0x254>
 80133c4:	9007      	str	r0, [sp, #28]
 80133c6:	463d      	mov	r5, r7
 80133c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80133cc:	2a09      	cmp	r2, #9
 80133ce:	d912      	bls.n	80133f6 <_strtod_l+0x216>
 80133d0:	2201      	movs	r2, #1
 80133d2:	e7c2      	b.n	801335a <_strtod_l+0x17a>
 80133d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80133d6:	1c5a      	adds	r2, r3, #1
 80133d8:	921d      	str	r2, [sp, #116]	; 0x74
 80133da:	785b      	ldrb	r3, [r3, #1]
 80133dc:	3001      	adds	r0, #1
 80133de:	2b30      	cmp	r3, #48	; 0x30
 80133e0:	d0f8      	beq.n	80133d4 <_strtod_l+0x1f4>
 80133e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80133e6:	2a08      	cmp	r2, #8
 80133e8:	f200 84db 	bhi.w	8013da2 <_strtod_l+0xbc2>
 80133ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80133ee:	9007      	str	r0, [sp, #28]
 80133f0:	2000      	movs	r0, #0
 80133f2:	920a      	str	r2, [sp, #40]	; 0x28
 80133f4:	4605      	mov	r5, r0
 80133f6:	3b30      	subs	r3, #48	; 0x30
 80133f8:	f100 0201 	add.w	r2, r0, #1
 80133fc:	d014      	beq.n	8013428 <_strtod_l+0x248>
 80133fe:	9907      	ldr	r1, [sp, #28]
 8013400:	4411      	add	r1, r2
 8013402:	9107      	str	r1, [sp, #28]
 8013404:	462a      	mov	r2, r5
 8013406:	eb00 0e05 	add.w	lr, r0, r5
 801340a:	210a      	movs	r1, #10
 801340c:	4572      	cmp	r2, lr
 801340e:	d113      	bne.n	8013438 <_strtod_l+0x258>
 8013410:	182a      	adds	r2, r5, r0
 8013412:	2a08      	cmp	r2, #8
 8013414:	f105 0501 	add.w	r5, r5, #1
 8013418:	4405      	add	r5, r0
 801341a:	dc1c      	bgt.n	8013456 <_strtod_l+0x276>
 801341c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801341e:	220a      	movs	r2, #10
 8013420:	fb02 3301 	mla	r3, r2, r1, r3
 8013424:	9309      	str	r3, [sp, #36]	; 0x24
 8013426:	2200      	movs	r2, #0
 8013428:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801342a:	1c59      	adds	r1, r3, #1
 801342c:	911d      	str	r1, [sp, #116]	; 0x74
 801342e:	785b      	ldrb	r3, [r3, #1]
 8013430:	4610      	mov	r0, r2
 8013432:	e7c9      	b.n	80133c8 <_strtod_l+0x1e8>
 8013434:	4638      	mov	r0, r7
 8013436:	e7d2      	b.n	80133de <_strtod_l+0x1fe>
 8013438:	2a08      	cmp	r2, #8
 801343a:	dc04      	bgt.n	8013446 <_strtod_l+0x266>
 801343c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801343e:	434e      	muls	r6, r1
 8013440:	9609      	str	r6, [sp, #36]	; 0x24
 8013442:	3201      	adds	r2, #1
 8013444:	e7e2      	b.n	801340c <_strtod_l+0x22c>
 8013446:	f102 0c01 	add.w	ip, r2, #1
 801344a:	f1bc 0f10 	cmp.w	ip, #16
 801344e:	bfd8      	it	le
 8013450:	fb01 f909 	mulle.w	r9, r1, r9
 8013454:	e7f5      	b.n	8013442 <_strtod_l+0x262>
 8013456:	2d10      	cmp	r5, #16
 8013458:	bfdc      	itt	le
 801345a:	220a      	movle	r2, #10
 801345c:	fb02 3909 	mlale	r9, r2, r9, r3
 8013460:	e7e1      	b.n	8013426 <_strtod_l+0x246>
 8013462:	2300      	movs	r3, #0
 8013464:	9307      	str	r3, [sp, #28]
 8013466:	2201      	movs	r2, #1
 8013468:	e77c      	b.n	8013364 <_strtod_l+0x184>
 801346a:	f04f 0c00 	mov.w	ip, #0
 801346e:	f108 0302 	add.w	r3, r8, #2
 8013472:	931d      	str	r3, [sp, #116]	; 0x74
 8013474:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013478:	e785      	b.n	8013386 <_strtod_l+0x1a6>
 801347a:	f04f 0c01 	mov.w	ip, #1
 801347e:	e7f6      	b.n	801346e <_strtod_l+0x28e>
 8013480:	08017880 	.word	0x08017880
 8013484:	0801772c 	.word	0x0801772c
 8013488:	7ff00000 	.word	0x7ff00000
 801348c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801348e:	1c59      	adds	r1, r3, #1
 8013490:	911d      	str	r1, [sp, #116]	; 0x74
 8013492:	785b      	ldrb	r3, [r3, #1]
 8013494:	2b30      	cmp	r3, #48	; 0x30
 8013496:	d0f9      	beq.n	801348c <_strtod_l+0x2ac>
 8013498:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801349c:	2908      	cmp	r1, #8
 801349e:	f63f af79 	bhi.w	8013394 <_strtod_l+0x1b4>
 80134a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80134a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80134a8:	9308      	str	r3, [sp, #32]
 80134aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80134ac:	1c59      	adds	r1, r3, #1
 80134ae:	911d      	str	r1, [sp, #116]	; 0x74
 80134b0:	785b      	ldrb	r3, [r3, #1]
 80134b2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80134b6:	2e09      	cmp	r6, #9
 80134b8:	d937      	bls.n	801352a <_strtod_l+0x34a>
 80134ba:	9e08      	ldr	r6, [sp, #32]
 80134bc:	1b89      	subs	r1, r1, r6
 80134be:	2908      	cmp	r1, #8
 80134c0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80134c4:	dc02      	bgt.n	80134cc <_strtod_l+0x2ec>
 80134c6:	4576      	cmp	r6, lr
 80134c8:	bfa8      	it	ge
 80134ca:	4676      	movge	r6, lr
 80134cc:	f1bc 0f00 	cmp.w	ip, #0
 80134d0:	d000      	beq.n	80134d4 <_strtod_l+0x2f4>
 80134d2:	4276      	negs	r6, r6
 80134d4:	2d00      	cmp	r5, #0
 80134d6:	d14f      	bne.n	8013578 <_strtod_l+0x398>
 80134d8:	9904      	ldr	r1, [sp, #16]
 80134da:	4301      	orrs	r1, r0
 80134dc:	f47f aec2 	bne.w	8013264 <_strtod_l+0x84>
 80134e0:	2a00      	cmp	r2, #0
 80134e2:	f47f aedb 	bne.w	801329c <_strtod_l+0xbc>
 80134e6:	2b69      	cmp	r3, #105	; 0x69
 80134e8:	d027      	beq.n	801353a <_strtod_l+0x35a>
 80134ea:	dc24      	bgt.n	8013536 <_strtod_l+0x356>
 80134ec:	2b49      	cmp	r3, #73	; 0x49
 80134ee:	d024      	beq.n	801353a <_strtod_l+0x35a>
 80134f0:	2b4e      	cmp	r3, #78	; 0x4e
 80134f2:	f47f aed3 	bne.w	801329c <_strtod_l+0xbc>
 80134f6:	499e      	ldr	r1, [pc, #632]	; (8013770 <_strtod_l+0x590>)
 80134f8:	a81d      	add	r0, sp, #116	; 0x74
 80134fa:	f001 ff5f 	bl	80153bc <__match>
 80134fe:	2800      	cmp	r0, #0
 8013500:	f43f aecc 	beq.w	801329c <_strtod_l+0xbc>
 8013504:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	2b28      	cmp	r3, #40	; 0x28
 801350a:	d12d      	bne.n	8013568 <_strtod_l+0x388>
 801350c:	4999      	ldr	r1, [pc, #612]	; (8013774 <_strtod_l+0x594>)
 801350e:	aa20      	add	r2, sp, #128	; 0x80
 8013510:	a81d      	add	r0, sp, #116	; 0x74
 8013512:	f001 ff67 	bl	80153e4 <__hexnan>
 8013516:	2805      	cmp	r0, #5
 8013518:	d126      	bne.n	8013568 <_strtod_l+0x388>
 801351a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801351c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8013520:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013524:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013528:	e69c      	b.n	8013264 <_strtod_l+0x84>
 801352a:	210a      	movs	r1, #10
 801352c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013530:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013534:	e7b9      	b.n	80134aa <_strtod_l+0x2ca>
 8013536:	2b6e      	cmp	r3, #110	; 0x6e
 8013538:	e7db      	b.n	80134f2 <_strtod_l+0x312>
 801353a:	498f      	ldr	r1, [pc, #572]	; (8013778 <_strtod_l+0x598>)
 801353c:	a81d      	add	r0, sp, #116	; 0x74
 801353e:	f001 ff3d 	bl	80153bc <__match>
 8013542:	2800      	cmp	r0, #0
 8013544:	f43f aeaa 	beq.w	801329c <_strtod_l+0xbc>
 8013548:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801354a:	498c      	ldr	r1, [pc, #560]	; (801377c <_strtod_l+0x59c>)
 801354c:	3b01      	subs	r3, #1
 801354e:	a81d      	add	r0, sp, #116	; 0x74
 8013550:	931d      	str	r3, [sp, #116]	; 0x74
 8013552:	f001 ff33 	bl	80153bc <__match>
 8013556:	b910      	cbnz	r0, 801355e <_strtod_l+0x37e>
 8013558:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801355a:	3301      	adds	r3, #1
 801355c:	931d      	str	r3, [sp, #116]	; 0x74
 801355e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801378c <_strtod_l+0x5ac>
 8013562:	f04f 0a00 	mov.w	sl, #0
 8013566:	e67d      	b.n	8013264 <_strtod_l+0x84>
 8013568:	4885      	ldr	r0, [pc, #532]	; (8013780 <_strtod_l+0x5a0>)
 801356a:	f003 f9b9 	bl	80168e0 <nan>
 801356e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013572:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013576:	e675      	b.n	8013264 <_strtod_l+0x84>
 8013578:	9b07      	ldr	r3, [sp, #28]
 801357a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801357c:	1af3      	subs	r3, r6, r3
 801357e:	2f00      	cmp	r7, #0
 8013580:	bf08      	it	eq
 8013582:	462f      	moveq	r7, r5
 8013584:	2d10      	cmp	r5, #16
 8013586:	9308      	str	r3, [sp, #32]
 8013588:	46a8      	mov	r8, r5
 801358a:	bfa8      	it	ge
 801358c:	f04f 0810 	movge.w	r8, #16
 8013590:	f7ec ffc8 	bl	8000524 <__aeabi_ui2d>
 8013594:	2d09      	cmp	r5, #9
 8013596:	4682      	mov	sl, r0
 8013598:	468b      	mov	fp, r1
 801359a:	dd13      	ble.n	80135c4 <_strtod_l+0x3e4>
 801359c:	4b79      	ldr	r3, [pc, #484]	; (8013784 <_strtod_l+0x5a4>)
 801359e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80135a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80135a6:	f7ed f837 	bl	8000618 <__aeabi_dmul>
 80135aa:	4682      	mov	sl, r0
 80135ac:	4648      	mov	r0, r9
 80135ae:	468b      	mov	fp, r1
 80135b0:	f7ec ffb8 	bl	8000524 <__aeabi_ui2d>
 80135b4:	4602      	mov	r2, r0
 80135b6:	460b      	mov	r3, r1
 80135b8:	4650      	mov	r0, sl
 80135ba:	4659      	mov	r1, fp
 80135bc:	f7ec fe76 	bl	80002ac <__adddf3>
 80135c0:	4682      	mov	sl, r0
 80135c2:	468b      	mov	fp, r1
 80135c4:	2d0f      	cmp	r5, #15
 80135c6:	dc38      	bgt.n	801363a <_strtod_l+0x45a>
 80135c8:	9b08      	ldr	r3, [sp, #32]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	f43f ae4a 	beq.w	8013264 <_strtod_l+0x84>
 80135d0:	dd24      	ble.n	801361c <_strtod_l+0x43c>
 80135d2:	2b16      	cmp	r3, #22
 80135d4:	dc0b      	bgt.n	80135ee <_strtod_l+0x40e>
 80135d6:	4d6b      	ldr	r5, [pc, #428]	; (8013784 <_strtod_l+0x5a4>)
 80135d8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80135dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80135e0:	4652      	mov	r2, sl
 80135e2:	465b      	mov	r3, fp
 80135e4:	f7ed f818 	bl	8000618 <__aeabi_dmul>
 80135e8:	4682      	mov	sl, r0
 80135ea:	468b      	mov	fp, r1
 80135ec:	e63a      	b.n	8013264 <_strtod_l+0x84>
 80135ee:	9a08      	ldr	r2, [sp, #32]
 80135f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80135f4:	4293      	cmp	r3, r2
 80135f6:	db20      	blt.n	801363a <_strtod_l+0x45a>
 80135f8:	4c62      	ldr	r4, [pc, #392]	; (8013784 <_strtod_l+0x5a4>)
 80135fa:	f1c5 050f 	rsb	r5, r5, #15
 80135fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013602:	4652      	mov	r2, sl
 8013604:	465b      	mov	r3, fp
 8013606:	e9d1 0100 	ldrd	r0, r1, [r1]
 801360a:	f7ed f805 	bl	8000618 <__aeabi_dmul>
 801360e:	9b08      	ldr	r3, [sp, #32]
 8013610:	1b5d      	subs	r5, r3, r5
 8013612:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013616:	e9d4 2300 	ldrd	r2, r3, [r4]
 801361a:	e7e3      	b.n	80135e4 <_strtod_l+0x404>
 801361c:	9b08      	ldr	r3, [sp, #32]
 801361e:	3316      	adds	r3, #22
 8013620:	db0b      	blt.n	801363a <_strtod_l+0x45a>
 8013622:	9b07      	ldr	r3, [sp, #28]
 8013624:	4a57      	ldr	r2, [pc, #348]	; (8013784 <_strtod_l+0x5a4>)
 8013626:	1b9e      	subs	r6, r3, r6
 8013628:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801362c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013630:	4650      	mov	r0, sl
 8013632:	4659      	mov	r1, fp
 8013634:	f7ed f91a 	bl	800086c <__aeabi_ddiv>
 8013638:	e7d6      	b.n	80135e8 <_strtod_l+0x408>
 801363a:	9b08      	ldr	r3, [sp, #32]
 801363c:	eba5 0808 	sub.w	r8, r5, r8
 8013640:	4498      	add	r8, r3
 8013642:	f1b8 0f00 	cmp.w	r8, #0
 8013646:	dd71      	ble.n	801372c <_strtod_l+0x54c>
 8013648:	f018 030f 	ands.w	r3, r8, #15
 801364c:	d00a      	beq.n	8013664 <_strtod_l+0x484>
 801364e:	494d      	ldr	r1, [pc, #308]	; (8013784 <_strtod_l+0x5a4>)
 8013650:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013654:	4652      	mov	r2, sl
 8013656:	465b      	mov	r3, fp
 8013658:	e9d1 0100 	ldrd	r0, r1, [r1]
 801365c:	f7ec ffdc 	bl	8000618 <__aeabi_dmul>
 8013660:	4682      	mov	sl, r0
 8013662:	468b      	mov	fp, r1
 8013664:	f038 080f 	bics.w	r8, r8, #15
 8013668:	d04d      	beq.n	8013706 <_strtod_l+0x526>
 801366a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801366e:	dd22      	ble.n	80136b6 <_strtod_l+0x4d6>
 8013670:	2500      	movs	r5, #0
 8013672:	462e      	mov	r6, r5
 8013674:	9509      	str	r5, [sp, #36]	; 0x24
 8013676:	9507      	str	r5, [sp, #28]
 8013678:	2322      	movs	r3, #34	; 0x22
 801367a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801378c <_strtod_l+0x5ac>
 801367e:	6023      	str	r3, [r4, #0]
 8013680:	f04f 0a00 	mov.w	sl, #0
 8013684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013686:	2b00      	cmp	r3, #0
 8013688:	f43f adec 	beq.w	8013264 <_strtod_l+0x84>
 801368c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801368e:	4620      	mov	r0, r4
 8013690:	f001 ffc0 	bl	8015614 <_Bfree>
 8013694:	9907      	ldr	r1, [sp, #28]
 8013696:	4620      	mov	r0, r4
 8013698:	f001 ffbc 	bl	8015614 <_Bfree>
 801369c:	4631      	mov	r1, r6
 801369e:	4620      	mov	r0, r4
 80136a0:	f001 ffb8 	bl	8015614 <_Bfree>
 80136a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80136a6:	4620      	mov	r0, r4
 80136a8:	f001 ffb4 	bl	8015614 <_Bfree>
 80136ac:	4629      	mov	r1, r5
 80136ae:	4620      	mov	r0, r4
 80136b0:	f001 ffb0 	bl	8015614 <_Bfree>
 80136b4:	e5d6      	b.n	8013264 <_strtod_l+0x84>
 80136b6:	2300      	movs	r3, #0
 80136b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80136bc:	4650      	mov	r0, sl
 80136be:	4659      	mov	r1, fp
 80136c0:	4699      	mov	r9, r3
 80136c2:	f1b8 0f01 	cmp.w	r8, #1
 80136c6:	dc21      	bgt.n	801370c <_strtod_l+0x52c>
 80136c8:	b10b      	cbz	r3, 80136ce <_strtod_l+0x4ee>
 80136ca:	4682      	mov	sl, r0
 80136cc:	468b      	mov	fp, r1
 80136ce:	4b2e      	ldr	r3, [pc, #184]	; (8013788 <_strtod_l+0x5a8>)
 80136d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80136d4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80136d8:	4652      	mov	r2, sl
 80136da:	465b      	mov	r3, fp
 80136dc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80136e0:	f7ec ff9a 	bl	8000618 <__aeabi_dmul>
 80136e4:	4b29      	ldr	r3, [pc, #164]	; (801378c <_strtod_l+0x5ac>)
 80136e6:	460a      	mov	r2, r1
 80136e8:	400b      	ands	r3, r1
 80136ea:	4929      	ldr	r1, [pc, #164]	; (8013790 <_strtod_l+0x5b0>)
 80136ec:	428b      	cmp	r3, r1
 80136ee:	4682      	mov	sl, r0
 80136f0:	d8be      	bhi.n	8013670 <_strtod_l+0x490>
 80136f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80136f6:	428b      	cmp	r3, r1
 80136f8:	bf86      	itte	hi
 80136fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013794 <_strtod_l+0x5b4>
 80136fe:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8013702:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013706:	2300      	movs	r3, #0
 8013708:	9304      	str	r3, [sp, #16]
 801370a:	e081      	b.n	8013810 <_strtod_l+0x630>
 801370c:	f018 0f01 	tst.w	r8, #1
 8013710:	d007      	beq.n	8013722 <_strtod_l+0x542>
 8013712:	4b1d      	ldr	r3, [pc, #116]	; (8013788 <_strtod_l+0x5a8>)
 8013714:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801371c:	f7ec ff7c 	bl	8000618 <__aeabi_dmul>
 8013720:	2301      	movs	r3, #1
 8013722:	f109 0901 	add.w	r9, r9, #1
 8013726:	ea4f 0868 	mov.w	r8, r8, asr #1
 801372a:	e7ca      	b.n	80136c2 <_strtod_l+0x4e2>
 801372c:	d0eb      	beq.n	8013706 <_strtod_l+0x526>
 801372e:	f1c8 0800 	rsb	r8, r8, #0
 8013732:	f018 020f 	ands.w	r2, r8, #15
 8013736:	d00a      	beq.n	801374e <_strtod_l+0x56e>
 8013738:	4b12      	ldr	r3, [pc, #72]	; (8013784 <_strtod_l+0x5a4>)
 801373a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801373e:	4650      	mov	r0, sl
 8013740:	4659      	mov	r1, fp
 8013742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013746:	f7ed f891 	bl	800086c <__aeabi_ddiv>
 801374a:	4682      	mov	sl, r0
 801374c:	468b      	mov	fp, r1
 801374e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013752:	d0d8      	beq.n	8013706 <_strtod_l+0x526>
 8013754:	f1b8 0f1f 	cmp.w	r8, #31
 8013758:	dd1e      	ble.n	8013798 <_strtod_l+0x5b8>
 801375a:	2500      	movs	r5, #0
 801375c:	462e      	mov	r6, r5
 801375e:	9509      	str	r5, [sp, #36]	; 0x24
 8013760:	9507      	str	r5, [sp, #28]
 8013762:	2322      	movs	r3, #34	; 0x22
 8013764:	f04f 0a00 	mov.w	sl, #0
 8013768:	f04f 0b00 	mov.w	fp, #0
 801376c:	6023      	str	r3, [r4, #0]
 801376e:	e789      	b.n	8013684 <_strtod_l+0x4a4>
 8013770:	08017701 	.word	0x08017701
 8013774:	08017740 	.word	0x08017740
 8013778:	080176f9 	.word	0x080176f9
 801377c:	08017783 	.word	0x08017783
 8013780:	08017a5b 	.word	0x08017a5b
 8013784:	08017920 	.word	0x08017920
 8013788:	080178f8 	.word	0x080178f8
 801378c:	7ff00000 	.word	0x7ff00000
 8013790:	7ca00000 	.word	0x7ca00000
 8013794:	7fefffff 	.word	0x7fefffff
 8013798:	f018 0310 	ands.w	r3, r8, #16
 801379c:	bf18      	it	ne
 801379e:	236a      	movne	r3, #106	; 0x6a
 80137a0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8013b58 <_strtod_l+0x978>
 80137a4:	9304      	str	r3, [sp, #16]
 80137a6:	4650      	mov	r0, sl
 80137a8:	4659      	mov	r1, fp
 80137aa:	2300      	movs	r3, #0
 80137ac:	f018 0f01 	tst.w	r8, #1
 80137b0:	d004      	beq.n	80137bc <_strtod_l+0x5dc>
 80137b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80137b6:	f7ec ff2f 	bl	8000618 <__aeabi_dmul>
 80137ba:	2301      	movs	r3, #1
 80137bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80137c0:	f109 0908 	add.w	r9, r9, #8
 80137c4:	d1f2      	bne.n	80137ac <_strtod_l+0x5cc>
 80137c6:	b10b      	cbz	r3, 80137cc <_strtod_l+0x5ec>
 80137c8:	4682      	mov	sl, r0
 80137ca:	468b      	mov	fp, r1
 80137cc:	9b04      	ldr	r3, [sp, #16]
 80137ce:	b1bb      	cbz	r3, 8013800 <_strtod_l+0x620>
 80137d0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80137d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80137d8:	2b00      	cmp	r3, #0
 80137da:	4659      	mov	r1, fp
 80137dc:	dd10      	ble.n	8013800 <_strtod_l+0x620>
 80137de:	2b1f      	cmp	r3, #31
 80137e0:	f340 8128 	ble.w	8013a34 <_strtod_l+0x854>
 80137e4:	2b34      	cmp	r3, #52	; 0x34
 80137e6:	bfde      	ittt	le
 80137e8:	3b20      	suble	r3, #32
 80137ea:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80137ee:	fa02 f303 	lslle.w	r3, r2, r3
 80137f2:	f04f 0a00 	mov.w	sl, #0
 80137f6:	bfcc      	ite	gt
 80137f8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80137fc:	ea03 0b01 	andle.w	fp, r3, r1
 8013800:	2200      	movs	r2, #0
 8013802:	2300      	movs	r3, #0
 8013804:	4650      	mov	r0, sl
 8013806:	4659      	mov	r1, fp
 8013808:	f7ed f96e 	bl	8000ae8 <__aeabi_dcmpeq>
 801380c:	2800      	cmp	r0, #0
 801380e:	d1a4      	bne.n	801375a <_strtod_l+0x57a>
 8013810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013812:	9300      	str	r3, [sp, #0]
 8013814:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013816:	462b      	mov	r3, r5
 8013818:	463a      	mov	r2, r7
 801381a:	4620      	mov	r0, r4
 801381c:	f001 ff66 	bl	80156ec <__s2b>
 8013820:	9009      	str	r0, [sp, #36]	; 0x24
 8013822:	2800      	cmp	r0, #0
 8013824:	f43f af24 	beq.w	8013670 <_strtod_l+0x490>
 8013828:	9b07      	ldr	r3, [sp, #28]
 801382a:	1b9e      	subs	r6, r3, r6
 801382c:	9b08      	ldr	r3, [sp, #32]
 801382e:	2b00      	cmp	r3, #0
 8013830:	bfb4      	ite	lt
 8013832:	4633      	movlt	r3, r6
 8013834:	2300      	movge	r3, #0
 8013836:	9310      	str	r3, [sp, #64]	; 0x40
 8013838:	9b08      	ldr	r3, [sp, #32]
 801383a:	2500      	movs	r5, #0
 801383c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013840:	9318      	str	r3, [sp, #96]	; 0x60
 8013842:	462e      	mov	r6, r5
 8013844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013846:	4620      	mov	r0, r4
 8013848:	6859      	ldr	r1, [r3, #4]
 801384a:	f001 fea3 	bl	8015594 <_Balloc>
 801384e:	9007      	str	r0, [sp, #28]
 8013850:	2800      	cmp	r0, #0
 8013852:	f43f af11 	beq.w	8013678 <_strtod_l+0x498>
 8013856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013858:	691a      	ldr	r2, [r3, #16]
 801385a:	3202      	adds	r2, #2
 801385c:	f103 010c 	add.w	r1, r3, #12
 8013860:	0092      	lsls	r2, r2, #2
 8013862:	300c      	adds	r0, #12
 8013864:	f7fe fc8f 	bl	8012186 <memcpy>
 8013868:	ec4b ab10 	vmov	d0, sl, fp
 801386c:	aa20      	add	r2, sp, #128	; 0x80
 801386e:	a91f      	add	r1, sp, #124	; 0x7c
 8013870:	4620      	mov	r0, r4
 8013872:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8013876:	f002 fa75 	bl	8015d64 <__d2b>
 801387a:	901e      	str	r0, [sp, #120]	; 0x78
 801387c:	2800      	cmp	r0, #0
 801387e:	f43f aefb 	beq.w	8013678 <_strtod_l+0x498>
 8013882:	2101      	movs	r1, #1
 8013884:	4620      	mov	r0, r4
 8013886:	f001 ffcb 	bl	8015820 <__i2b>
 801388a:	4606      	mov	r6, r0
 801388c:	2800      	cmp	r0, #0
 801388e:	f43f aef3 	beq.w	8013678 <_strtod_l+0x498>
 8013892:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013894:	9904      	ldr	r1, [sp, #16]
 8013896:	2b00      	cmp	r3, #0
 8013898:	bfab      	itete	ge
 801389a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801389c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801389e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80138a0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80138a4:	bfac      	ite	ge
 80138a6:	eb03 0902 	addge.w	r9, r3, r2
 80138aa:	1ad7      	sublt	r7, r2, r3
 80138ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80138ae:	eba3 0801 	sub.w	r8, r3, r1
 80138b2:	4490      	add	r8, r2
 80138b4:	4ba3      	ldr	r3, [pc, #652]	; (8013b44 <_strtod_l+0x964>)
 80138b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80138ba:	4598      	cmp	r8, r3
 80138bc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80138c0:	f280 80cc 	bge.w	8013a5c <_strtod_l+0x87c>
 80138c4:	eba3 0308 	sub.w	r3, r3, r8
 80138c8:	2b1f      	cmp	r3, #31
 80138ca:	eba2 0203 	sub.w	r2, r2, r3
 80138ce:	f04f 0101 	mov.w	r1, #1
 80138d2:	f300 80b6 	bgt.w	8013a42 <_strtod_l+0x862>
 80138d6:	fa01 f303 	lsl.w	r3, r1, r3
 80138da:	9311      	str	r3, [sp, #68]	; 0x44
 80138dc:	2300      	movs	r3, #0
 80138de:	930c      	str	r3, [sp, #48]	; 0x30
 80138e0:	eb09 0802 	add.w	r8, r9, r2
 80138e4:	9b04      	ldr	r3, [sp, #16]
 80138e6:	45c1      	cmp	r9, r8
 80138e8:	4417      	add	r7, r2
 80138ea:	441f      	add	r7, r3
 80138ec:	464b      	mov	r3, r9
 80138ee:	bfa8      	it	ge
 80138f0:	4643      	movge	r3, r8
 80138f2:	42bb      	cmp	r3, r7
 80138f4:	bfa8      	it	ge
 80138f6:	463b      	movge	r3, r7
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	bfc2      	ittt	gt
 80138fc:	eba8 0803 	subgt.w	r8, r8, r3
 8013900:	1aff      	subgt	r7, r7, r3
 8013902:	eba9 0903 	subgt.w	r9, r9, r3
 8013906:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013908:	2b00      	cmp	r3, #0
 801390a:	dd17      	ble.n	801393c <_strtod_l+0x75c>
 801390c:	4631      	mov	r1, r6
 801390e:	461a      	mov	r2, r3
 8013910:	4620      	mov	r0, r4
 8013912:	f002 f841 	bl	8015998 <__pow5mult>
 8013916:	4606      	mov	r6, r0
 8013918:	2800      	cmp	r0, #0
 801391a:	f43f aead 	beq.w	8013678 <_strtod_l+0x498>
 801391e:	4601      	mov	r1, r0
 8013920:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013922:	4620      	mov	r0, r4
 8013924:	f001 ff92 	bl	801584c <__multiply>
 8013928:	900f      	str	r0, [sp, #60]	; 0x3c
 801392a:	2800      	cmp	r0, #0
 801392c:	f43f aea4 	beq.w	8013678 <_strtod_l+0x498>
 8013930:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013932:	4620      	mov	r0, r4
 8013934:	f001 fe6e 	bl	8015614 <_Bfree>
 8013938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801393a:	931e      	str	r3, [sp, #120]	; 0x78
 801393c:	f1b8 0f00 	cmp.w	r8, #0
 8013940:	f300 8091 	bgt.w	8013a66 <_strtod_l+0x886>
 8013944:	9b08      	ldr	r3, [sp, #32]
 8013946:	2b00      	cmp	r3, #0
 8013948:	dd08      	ble.n	801395c <_strtod_l+0x77c>
 801394a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801394c:	9907      	ldr	r1, [sp, #28]
 801394e:	4620      	mov	r0, r4
 8013950:	f002 f822 	bl	8015998 <__pow5mult>
 8013954:	9007      	str	r0, [sp, #28]
 8013956:	2800      	cmp	r0, #0
 8013958:	f43f ae8e 	beq.w	8013678 <_strtod_l+0x498>
 801395c:	2f00      	cmp	r7, #0
 801395e:	dd08      	ble.n	8013972 <_strtod_l+0x792>
 8013960:	9907      	ldr	r1, [sp, #28]
 8013962:	463a      	mov	r2, r7
 8013964:	4620      	mov	r0, r4
 8013966:	f002 f871 	bl	8015a4c <__lshift>
 801396a:	9007      	str	r0, [sp, #28]
 801396c:	2800      	cmp	r0, #0
 801396e:	f43f ae83 	beq.w	8013678 <_strtod_l+0x498>
 8013972:	f1b9 0f00 	cmp.w	r9, #0
 8013976:	dd08      	ble.n	801398a <_strtod_l+0x7aa>
 8013978:	4631      	mov	r1, r6
 801397a:	464a      	mov	r2, r9
 801397c:	4620      	mov	r0, r4
 801397e:	f002 f865 	bl	8015a4c <__lshift>
 8013982:	4606      	mov	r6, r0
 8013984:	2800      	cmp	r0, #0
 8013986:	f43f ae77 	beq.w	8013678 <_strtod_l+0x498>
 801398a:	9a07      	ldr	r2, [sp, #28]
 801398c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801398e:	4620      	mov	r0, r4
 8013990:	f002 f8e4 	bl	8015b5c <__mdiff>
 8013994:	4605      	mov	r5, r0
 8013996:	2800      	cmp	r0, #0
 8013998:	f43f ae6e 	beq.w	8013678 <_strtod_l+0x498>
 801399c:	68c3      	ldr	r3, [r0, #12]
 801399e:	930f      	str	r3, [sp, #60]	; 0x3c
 80139a0:	2300      	movs	r3, #0
 80139a2:	60c3      	str	r3, [r0, #12]
 80139a4:	4631      	mov	r1, r6
 80139a6:	f002 f8bd 	bl	8015b24 <__mcmp>
 80139aa:	2800      	cmp	r0, #0
 80139ac:	da65      	bge.n	8013a7a <_strtod_l+0x89a>
 80139ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80139b0:	ea53 030a 	orrs.w	r3, r3, sl
 80139b4:	f040 8087 	bne.w	8013ac6 <_strtod_l+0x8e6>
 80139b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80139bc:	2b00      	cmp	r3, #0
 80139be:	f040 8082 	bne.w	8013ac6 <_strtod_l+0x8e6>
 80139c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80139c6:	0d1b      	lsrs	r3, r3, #20
 80139c8:	051b      	lsls	r3, r3, #20
 80139ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80139ce:	d97a      	bls.n	8013ac6 <_strtod_l+0x8e6>
 80139d0:	696b      	ldr	r3, [r5, #20]
 80139d2:	b913      	cbnz	r3, 80139da <_strtod_l+0x7fa>
 80139d4:	692b      	ldr	r3, [r5, #16]
 80139d6:	2b01      	cmp	r3, #1
 80139d8:	dd75      	ble.n	8013ac6 <_strtod_l+0x8e6>
 80139da:	4629      	mov	r1, r5
 80139dc:	2201      	movs	r2, #1
 80139de:	4620      	mov	r0, r4
 80139e0:	f002 f834 	bl	8015a4c <__lshift>
 80139e4:	4631      	mov	r1, r6
 80139e6:	4605      	mov	r5, r0
 80139e8:	f002 f89c 	bl	8015b24 <__mcmp>
 80139ec:	2800      	cmp	r0, #0
 80139ee:	dd6a      	ble.n	8013ac6 <_strtod_l+0x8e6>
 80139f0:	9904      	ldr	r1, [sp, #16]
 80139f2:	4a55      	ldr	r2, [pc, #340]	; (8013b48 <_strtod_l+0x968>)
 80139f4:	465b      	mov	r3, fp
 80139f6:	2900      	cmp	r1, #0
 80139f8:	f000 8085 	beq.w	8013b06 <_strtod_l+0x926>
 80139fc:	ea02 010b 	and.w	r1, r2, fp
 8013a00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013a04:	dc7f      	bgt.n	8013b06 <_strtod_l+0x926>
 8013a06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013a0a:	f77f aeaa 	ble.w	8013762 <_strtod_l+0x582>
 8013a0e:	4a4f      	ldr	r2, [pc, #316]	; (8013b4c <_strtod_l+0x96c>)
 8013a10:	2300      	movs	r3, #0
 8013a12:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8013a16:	4650      	mov	r0, sl
 8013a18:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8013a1c:	4659      	mov	r1, fp
 8013a1e:	f7ec fdfb 	bl	8000618 <__aeabi_dmul>
 8013a22:	460b      	mov	r3, r1
 8013a24:	4303      	orrs	r3, r0
 8013a26:	bf08      	it	eq
 8013a28:	2322      	moveq	r3, #34	; 0x22
 8013a2a:	4682      	mov	sl, r0
 8013a2c:	468b      	mov	fp, r1
 8013a2e:	bf08      	it	eq
 8013a30:	6023      	streq	r3, [r4, #0]
 8013a32:	e62b      	b.n	801368c <_strtod_l+0x4ac>
 8013a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a38:	fa02 f303 	lsl.w	r3, r2, r3
 8013a3c:	ea03 0a0a 	and.w	sl, r3, sl
 8013a40:	e6de      	b.n	8013800 <_strtod_l+0x620>
 8013a42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013a46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013a4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013a4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013a52:	fa01 f308 	lsl.w	r3, r1, r8
 8013a56:	930c      	str	r3, [sp, #48]	; 0x30
 8013a58:	9111      	str	r1, [sp, #68]	; 0x44
 8013a5a:	e741      	b.n	80138e0 <_strtod_l+0x700>
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	930c      	str	r3, [sp, #48]	; 0x30
 8013a60:	2301      	movs	r3, #1
 8013a62:	9311      	str	r3, [sp, #68]	; 0x44
 8013a64:	e73c      	b.n	80138e0 <_strtod_l+0x700>
 8013a66:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013a68:	4642      	mov	r2, r8
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f001 ffee 	bl	8015a4c <__lshift>
 8013a70:	901e      	str	r0, [sp, #120]	; 0x78
 8013a72:	2800      	cmp	r0, #0
 8013a74:	f47f af66 	bne.w	8013944 <_strtod_l+0x764>
 8013a78:	e5fe      	b.n	8013678 <_strtod_l+0x498>
 8013a7a:	465f      	mov	r7, fp
 8013a7c:	d16e      	bne.n	8013b5c <_strtod_l+0x97c>
 8013a7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013a80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013a84:	b342      	cbz	r2, 8013ad8 <_strtod_l+0x8f8>
 8013a86:	4a32      	ldr	r2, [pc, #200]	; (8013b50 <_strtod_l+0x970>)
 8013a88:	4293      	cmp	r3, r2
 8013a8a:	d128      	bne.n	8013ade <_strtod_l+0x8fe>
 8013a8c:	9b04      	ldr	r3, [sp, #16]
 8013a8e:	4650      	mov	r0, sl
 8013a90:	b1eb      	cbz	r3, 8013ace <_strtod_l+0x8ee>
 8013a92:	4a2d      	ldr	r2, [pc, #180]	; (8013b48 <_strtod_l+0x968>)
 8013a94:	403a      	ands	r2, r7
 8013a96:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013a9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013a9e:	d819      	bhi.n	8013ad4 <_strtod_l+0x8f4>
 8013aa0:	0d12      	lsrs	r2, r2, #20
 8013aa2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8013aaa:	4298      	cmp	r0, r3
 8013aac:	d117      	bne.n	8013ade <_strtod_l+0x8fe>
 8013aae:	4b29      	ldr	r3, [pc, #164]	; (8013b54 <_strtod_l+0x974>)
 8013ab0:	429f      	cmp	r7, r3
 8013ab2:	d102      	bne.n	8013aba <_strtod_l+0x8da>
 8013ab4:	3001      	adds	r0, #1
 8013ab6:	f43f addf 	beq.w	8013678 <_strtod_l+0x498>
 8013aba:	4b23      	ldr	r3, [pc, #140]	; (8013b48 <_strtod_l+0x968>)
 8013abc:	403b      	ands	r3, r7
 8013abe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013ac2:	f04f 0a00 	mov.w	sl, #0
 8013ac6:	9b04      	ldr	r3, [sp, #16]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d1a0      	bne.n	8013a0e <_strtod_l+0x82e>
 8013acc:	e5de      	b.n	801368c <_strtod_l+0x4ac>
 8013ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ad2:	e7ea      	b.n	8013aaa <_strtod_l+0x8ca>
 8013ad4:	460b      	mov	r3, r1
 8013ad6:	e7e8      	b.n	8013aaa <_strtod_l+0x8ca>
 8013ad8:	ea53 030a 	orrs.w	r3, r3, sl
 8013adc:	d088      	beq.n	80139f0 <_strtod_l+0x810>
 8013ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ae0:	b1db      	cbz	r3, 8013b1a <_strtod_l+0x93a>
 8013ae2:	423b      	tst	r3, r7
 8013ae4:	d0ef      	beq.n	8013ac6 <_strtod_l+0x8e6>
 8013ae6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ae8:	9a04      	ldr	r2, [sp, #16]
 8013aea:	4650      	mov	r0, sl
 8013aec:	4659      	mov	r1, fp
 8013aee:	b1c3      	cbz	r3, 8013b22 <_strtod_l+0x942>
 8013af0:	f7ff fb57 	bl	80131a2 <sulp>
 8013af4:	4602      	mov	r2, r0
 8013af6:	460b      	mov	r3, r1
 8013af8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013afc:	f7ec fbd6 	bl	80002ac <__adddf3>
 8013b00:	4682      	mov	sl, r0
 8013b02:	468b      	mov	fp, r1
 8013b04:	e7df      	b.n	8013ac6 <_strtod_l+0x8e6>
 8013b06:	4013      	ands	r3, r2
 8013b08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013b0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013b10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013b14:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8013b18:	e7d5      	b.n	8013ac6 <_strtod_l+0x8e6>
 8013b1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b1c:	ea13 0f0a 	tst.w	r3, sl
 8013b20:	e7e0      	b.n	8013ae4 <_strtod_l+0x904>
 8013b22:	f7ff fb3e 	bl	80131a2 <sulp>
 8013b26:	4602      	mov	r2, r0
 8013b28:	460b      	mov	r3, r1
 8013b2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013b2e:	f7ec fbbb 	bl	80002a8 <__aeabi_dsub>
 8013b32:	2200      	movs	r2, #0
 8013b34:	2300      	movs	r3, #0
 8013b36:	4682      	mov	sl, r0
 8013b38:	468b      	mov	fp, r1
 8013b3a:	f7ec ffd5 	bl	8000ae8 <__aeabi_dcmpeq>
 8013b3e:	2800      	cmp	r0, #0
 8013b40:	d0c1      	beq.n	8013ac6 <_strtod_l+0x8e6>
 8013b42:	e60e      	b.n	8013762 <_strtod_l+0x582>
 8013b44:	fffffc02 	.word	0xfffffc02
 8013b48:	7ff00000 	.word	0x7ff00000
 8013b4c:	39500000 	.word	0x39500000
 8013b50:	000fffff 	.word	0x000fffff
 8013b54:	7fefffff 	.word	0x7fefffff
 8013b58:	08017758 	.word	0x08017758
 8013b5c:	4631      	mov	r1, r6
 8013b5e:	4628      	mov	r0, r5
 8013b60:	f002 f95c 	bl	8015e1c <__ratio>
 8013b64:	ec59 8b10 	vmov	r8, r9, d0
 8013b68:	ee10 0a10 	vmov	r0, s0
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013b72:	4649      	mov	r1, r9
 8013b74:	f7ec ffcc 	bl	8000b10 <__aeabi_dcmple>
 8013b78:	2800      	cmp	r0, #0
 8013b7a:	d07c      	beq.n	8013c76 <_strtod_l+0xa96>
 8013b7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d04c      	beq.n	8013c1c <_strtod_l+0xa3c>
 8013b82:	4b95      	ldr	r3, [pc, #596]	; (8013dd8 <_strtod_l+0xbf8>)
 8013b84:	2200      	movs	r2, #0
 8013b86:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013b8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013dd8 <_strtod_l+0xbf8>
 8013b8e:	f04f 0800 	mov.w	r8, #0
 8013b92:	4b92      	ldr	r3, [pc, #584]	; (8013ddc <_strtod_l+0xbfc>)
 8013b94:	403b      	ands	r3, r7
 8013b96:	9311      	str	r3, [sp, #68]	; 0x44
 8013b98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013b9a:	4b91      	ldr	r3, [pc, #580]	; (8013de0 <_strtod_l+0xc00>)
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	f040 80b2 	bne.w	8013d06 <_strtod_l+0xb26>
 8013ba2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013ba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013baa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8013bae:	ec4b ab10 	vmov	d0, sl, fp
 8013bb2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8013bb6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013bba:	f002 f857 	bl	8015c6c <__ulp>
 8013bbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013bc2:	ec53 2b10 	vmov	r2, r3, d0
 8013bc6:	f7ec fd27 	bl	8000618 <__aeabi_dmul>
 8013bca:	4652      	mov	r2, sl
 8013bcc:	465b      	mov	r3, fp
 8013bce:	f7ec fb6d 	bl	80002ac <__adddf3>
 8013bd2:	460b      	mov	r3, r1
 8013bd4:	4981      	ldr	r1, [pc, #516]	; (8013ddc <_strtod_l+0xbfc>)
 8013bd6:	4a83      	ldr	r2, [pc, #524]	; (8013de4 <_strtod_l+0xc04>)
 8013bd8:	4019      	ands	r1, r3
 8013bda:	4291      	cmp	r1, r2
 8013bdc:	4682      	mov	sl, r0
 8013bde:	d95e      	bls.n	8013c9e <_strtod_l+0xabe>
 8013be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013be2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013be6:	4293      	cmp	r3, r2
 8013be8:	d103      	bne.n	8013bf2 <_strtod_l+0xa12>
 8013bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bec:	3301      	adds	r3, #1
 8013bee:	f43f ad43 	beq.w	8013678 <_strtod_l+0x498>
 8013bf2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8013df0 <_strtod_l+0xc10>
 8013bf6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8013bfa:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	f001 fd09 	bl	8015614 <_Bfree>
 8013c02:	9907      	ldr	r1, [sp, #28]
 8013c04:	4620      	mov	r0, r4
 8013c06:	f001 fd05 	bl	8015614 <_Bfree>
 8013c0a:	4631      	mov	r1, r6
 8013c0c:	4620      	mov	r0, r4
 8013c0e:	f001 fd01 	bl	8015614 <_Bfree>
 8013c12:	4629      	mov	r1, r5
 8013c14:	4620      	mov	r0, r4
 8013c16:	f001 fcfd 	bl	8015614 <_Bfree>
 8013c1a:	e613      	b.n	8013844 <_strtod_l+0x664>
 8013c1c:	f1ba 0f00 	cmp.w	sl, #0
 8013c20:	d11b      	bne.n	8013c5a <_strtod_l+0xa7a>
 8013c22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013c26:	b9f3      	cbnz	r3, 8013c66 <_strtod_l+0xa86>
 8013c28:	4b6b      	ldr	r3, [pc, #428]	; (8013dd8 <_strtod_l+0xbf8>)
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	4640      	mov	r0, r8
 8013c2e:	4649      	mov	r1, r9
 8013c30:	f7ec ff64 	bl	8000afc <__aeabi_dcmplt>
 8013c34:	b9d0      	cbnz	r0, 8013c6c <_strtod_l+0xa8c>
 8013c36:	4640      	mov	r0, r8
 8013c38:	4649      	mov	r1, r9
 8013c3a:	4b6b      	ldr	r3, [pc, #428]	; (8013de8 <_strtod_l+0xc08>)
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	f7ec fceb 	bl	8000618 <__aeabi_dmul>
 8013c42:	4680      	mov	r8, r0
 8013c44:	4689      	mov	r9, r1
 8013c46:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013c4a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8013c4e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013c50:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8013c54:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013c58:	e79b      	b.n	8013b92 <_strtod_l+0x9b2>
 8013c5a:	f1ba 0f01 	cmp.w	sl, #1
 8013c5e:	d102      	bne.n	8013c66 <_strtod_l+0xa86>
 8013c60:	2f00      	cmp	r7, #0
 8013c62:	f43f ad7e 	beq.w	8013762 <_strtod_l+0x582>
 8013c66:	4b61      	ldr	r3, [pc, #388]	; (8013dec <_strtod_l+0xc0c>)
 8013c68:	2200      	movs	r2, #0
 8013c6a:	e78c      	b.n	8013b86 <_strtod_l+0x9a6>
 8013c6c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013de8 <_strtod_l+0xc08>
 8013c70:	f04f 0800 	mov.w	r8, #0
 8013c74:	e7e7      	b.n	8013c46 <_strtod_l+0xa66>
 8013c76:	4b5c      	ldr	r3, [pc, #368]	; (8013de8 <_strtod_l+0xc08>)
 8013c78:	4640      	mov	r0, r8
 8013c7a:	4649      	mov	r1, r9
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	f7ec fccb 	bl	8000618 <__aeabi_dmul>
 8013c82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c84:	4680      	mov	r8, r0
 8013c86:	4689      	mov	r9, r1
 8013c88:	b933      	cbnz	r3, 8013c98 <_strtod_l+0xab8>
 8013c8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c8e:	9012      	str	r0, [sp, #72]	; 0x48
 8013c90:	9313      	str	r3, [sp, #76]	; 0x4c
 8013c92:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013c96:	e7dd      	b.n	8013c54 <_strtod_l+0xa74>
 8013c98:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8013c9c:	e7f9      	b.n	8013c92 <_strtod_l+0xab2>
 8013c9e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013ca2:	9b04      	ldr	r3, [sp, #16]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d1a8      	bne.n	8013bfa <_strtod_l+0xa1a>
 8013ca8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013cac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013cae:	0d1b      	lsrs	r3, r3, #20
 8013cb0:	051b      	lsls	r3, r3, #20
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d1a1      	bne.n	8013bfa <_strtod_l+0xa1a>
 8013cb6:	4640      	mov	r0, r8
 8013cb8:	4649      	mov	r1, r9
 8013cba:	f7ed f80d 	bl	8000cd8 <__aeabi_d2lz>
 8013cbe:	f7ec fc7d 	bl	80005bc <__aeabi_l2d>
 8013cc2:	4602      	mov	r2, r0
 8013cc4:	460b      	mov	r3, r1
 8013cc6:	4640      	mov	r0, r8
 8013cc8:	4649      	mov	r1, r9
 8013cca:	f7ec faed 	bl	80002a8 <__aeabi_dsub>
 8013cce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013cd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013cd4:	ea43 030a 	orr.w	r3, r3, sl
 8013cd8:	4313      	orrs	r3, r2
 8013cda:	4680      	mov	r8, r0
 8013cdc:	4689      	mov	r9, r1
 8013cde:	d053      	beq.n	8013d88 <_strtod_l+0xba8>
 8013ce0:	a335      	add	r3, pc, #212	; (adr r3, 8013db8 <_strtod_l+0xbd8>)
 8013ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce6:	f7ec ff09 	bl	8000afc <__aeabi_dcmplt>
 8013cea:	2800      	cmp	r0, #0
 8013cec:	f47f acce 	bne.w	801368c <_strtod_l+0x4ac>
 8013cf0:	a333      	add	r3, pc, #204	; (adr r3, 8013dc0 <_strtod_l+0xbe0>)
 8013cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cf6:	4640      	mov	r0, r8
 8013cf8:	4649      	mov	r1, r9
 8013cfa:	f7ec ff1d 	bl	8000b38 <__aeabi_dcmpgt>
 8013cfe:	2800      	cmp	r0, #0
 8013d00:	f43f af7b 	beq.w	8013bfa <_strtod_l+0xa1a>
 8013d04:	e4c2      	b.n	801368c <_strtod_l+0x4ac>
 8013d06:	9b04      	ldr	r3, [sp, #16]
 8013d08:	b333      	cbz	r3, 8013d58 <_strtod_l+0xb78>
 8013d0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013d0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013d10:	d822      	bhi.n	8013d58 <_strtod_l+0xb78>
 8013d12:	a32d      	add	r3, pc, #180	; (adr r3, 8013dc8 <_strtod_l+0xbe8>)
 8013d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d18:	4640      	mov	r0, r8
 8013d1a:	4649      	mov	r1, r9
 8013d1c:	f7ec fef8 	bl	8000b10 <__aeabi_dcmple>
 8013d20:	b1a0      	cbz	r0, 8013d4c <_strtod_l+0xb6c>
 8013d22:	4649      	mov	r1, r9
 8013d24:	4640      	mov	r0, r8
 8013d26:	f7ec ff4f 	bl	8000bc8 <__aeabi_d2uiz>
 8013d2a:	2801      	cmp	r0, #1
 8013d2c:	bf38      	it	cc
 8013d2e:	2001      	movcc	r0, #1
 8013d30:	f7ec fbf8 	bl	8000524 <__aeabi_ui2d>
 8013d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d36:	4680      	mov	r8, r0
 8013d38:	4689      	mov	r9, r1
 8013d3a:	bb13      	cbnz	r3, 8013d82 <_strtod_l+0xba2>
 8013d3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013d40:	9014      	str	r0, [sp, #80]	; 0x50
 8013d42:	9315      	str	r3, [sp, #84]	; 0x54
 8013d44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013d48:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013d4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013d50:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013d54:	1a9b      	subs	r3, r3, r2
 8013d56:	930d      	str	r3, [sp, #52]	; 0x34
 8013d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013d5c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013d60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013d64:	f001 ff82 	bl	8015c6c <__ulp>
 8013d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013d6c:	ec53 2b10 	vmov	r2, r3, d0
 8013d70:	f7ec fc52 	bl	8000618 <__aeabi_dmul>
 8013d74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013d78:	f7ec fa98 	bl	80002ac <__adddf3>
 8013d7c:	4682      	mov	sl, r0
 8013d7e:	468b      	mov	fp, r1
 8013d80:	e78f      	b.n	8013ca2 <_strtod_l+0xac2>
 8013d82:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8013d86:	e7dd      	b.n	8013d44 <_strtod_l+0xb64>
 8013d88:	a311      	add	r3, pc, #68	; (adr r3, 8013dd0 <_strtod_l+0xbf0>)
 8013d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d8e:	f7ec feb5 	bl	8000afc <__aeabi_dcmplt>
 8013d92:	e7b4      	b.n	8013cfe <_strtod_l+0xb1e>
 8013d94:	2300      	movs	r3, #0
 8013d96:	930e      	str	r3, [sp, #56]	; 0x38
 8013d98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013d9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013d9c:	6013      	str	r3, [r2, #0]
 8013d9e:	f7ff ba65 	b.w	801326c <_strtod_l+0x8c>
 8013da2:	2b65      	cmp	r3, #101	; 0x65
 8013da4:	f43f ab5d 	beq.w	8013462 <_strtod_l+0x282>
 8013da8:	2b45      	cmp	r3, #69	; 0x45
 8013daa:	f43f ab5a 	beq.w	8013462 <_strtod_l+0x282>
 8013dae:	2201      	movs	r2, #1
 8013db0:	f7ff bb92 	b.w	80134d8 <_strtod_l+0x2f8>
 8013db4:	f3af 8000 	nop.w
 8013db8:	94a03595 	.word	0x94a03595
 8013dbc:	3fdfffff 	.word	0x3fdfffff
 8013dc0:	35afe535 	.word	0x35afe535
 8013dc4:	3fe00000 	.word	0x3fe00000
 8013dc8:	ffc00000 	.word	0xffc00000
 8013dcc:	41dfffff 	.word	0x41dfffff
 8013dd0:	94a03595 	.word	0x94a03595
 8013dd4:	3fcfffff 	.word	0x3fcfffff
 8013dd8:	3ff00000 	.word	0x3ff00000
 8013ddc:	7ff00000 	.word	0x7ff00000
 8013de0:	7fe00000 	.word	0x7fe00000
 8013de4:	7c9fffff 	.word	0x7c9fffff
 8013de8:	3fe00000 	.word	0x3fe00000
 8013dec:	bff00000 	.word	0xbff00000
 8013df0:	7fefffff 	.word	0x7fefffff

08013df4 <_strtod_r>:
 8013df4:	4b01      	ldr	r3, [pc, #4]	; (8013dfc <_strtod_r+0x8>)
 8013df6:	f7ff b9f3 	b.w	80131e0 <_strtod_l>
 8013dfa:	bf00      	nop
 8013dfc:	20000204 	.word	0x20000204

08013e00 <_strtol_l.isra.0>:
 8013e00:	2b01      	cmp	r3, #1
 8013e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e06:	d001      	beq.n	8013e0c <_strtol_l.isra.0+0xc>
 8013e08:	2b24      	cmp	r3, #36	; 0x24
 8013e0a:	d906      	bls.n	8013e1a <_strtol_l.isra.0+0x1a>
 8013e0c:	f7fe f898 	bl	8011f40 <__errno>
 8013e10:	2316      	movs	r3, #22
 8013e12:	6003      	str	r3, [r0, #0]
 8013e14:	2000      	movs	r0, #0
 8013e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e1a:	4f3a      	ldr	r7, [pc, #232]	; (8013f04 <_strtol_l.isra.0+0x104>)
 8013e1c:	468e      	mov	lr, r1
 8013e1e:	4676      	mov	r6, lr
 8013e20:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013e24:	5de5      	ldrb	r5, [r4, r7]
 8013e26:	f015 0508 	ands.w	r5, r5, #8
 8013e2a:	d1f8      	bne.n	8013e1e <_strtol_l.isra.0+0x1e>
 8013e2c:	2c2d      	cmp	r4, #45	; 0x2d
 8013e2e:	d134      	bne.n	8013e9a <_strtol_l.isra.0+0x9a>
 8013e30:	f89e 4000 	ldrb.w	r4, [lr]
 8013e34:	f04f 0801 	mov.w	r8, #1
 8013e38:	f106 0e02 	add.w	lr, r6, #2
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d05c      	beq.n	8013efa <_strtol_l.isra.0+0xfa>
 8013e40:	2b10      	cmp	r3, #16
 8013e42:	d10c      	bne.n	8013e5e <_strtol_l.isra.0+0x5e>
 8013e44:	2c30      	cmp	r4, #48	; 0x30
 8013e46:	d10a      	bne.n	8013e5e <_strtol_l.isra.0+0x5e>
 8013e48:	f89e 4000 	ldrb.w	r4, [lr]
 8013e4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013e50:	2c58      	cmp	r4, #88	; 0x58
 8013e52:	d14d      	bne.n	8013ef0 <_strtol_l.isra.0+0xf0>
 8013e54:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013e58:	2310      	movs	r3, #16
 8013e5a:	f10e 0e02 	add.w	lr, lr, #2
 8013e5e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8013e62:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8013e66:	2600      	movs	r6, #0
 8013e68:	fbbc f9f3 	udiv	r9, ip, r3
 8013e6c:	4635      	mov	r5, r6
 8013e6e:	fb03 ca19 	mls	sl, r3, r9, ip
 8013e72:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013e76:	2f09      	cmp	r7, #9
 8013e78:	d818      	bhi.n	8013eac <_strtol_l.isra.0+0xac>
 8013e7a:	463c      	mov	r4, r7
 8013e7c:	42a3      	cmp	r3, r4
 8013e7e:	dd24      	ble.n	8013eca <_strtol_l.isra.0+0xca>
 8013e80:	2e00      	cmp	r6, #0
 8013e82:	db1f      	blt.n	8013ec4 <_strtol_l.isra.0+0xc4>
 8013e84:	45a9      	cmp	r9, r5
 8013e86:	d31d      	bcc.n	8013ec4 <_strtol_l.isra.0+0xc4>
 8013e88:	d101      	bne.n	8013e8e <_strtol_l.isra.0+0x8e>
 8013e8a:	45a2      	cmp	sl, r4
 8013e8c:	db1a      	blt.n	8013ec4 <_strtol_l.isra.0+0xc4>
 8013e8e:	fb05 4503 	mla	r5, r5, r3, r4
 8013e92:	2601      	movs	r6, #1
 8013e94:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013e98:	e7eb      	b.n	8013e72 <_strtol_l.isra.0+0x72>
 8013e9a:	2c2b      	cmp	r4, #43	; 0x2b
 8013e9c:	bf08      	it	eq
 8013e9e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8013ea2:	46a8      	mov	r8, r5
 8013ea4:	bf08      	it	eq
 8013ea6:	f106 0e02 	addeq.w	lr, r6, #2
 8013eaa:	e7c7      	b.n	8013e3c <_strtol_l.isra.0+0x3c>
 8013eac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013eb0:	2f19      	cmp	r7, #25
 8013eb2:	d801      	bhi.n	8013eb8 <_strtol_l.isra.0+0xb8>
 8013eb4:	3c37      	subs	r4, #55	; 0x37
 8013eb6:	e7e1      	b.n	8013e7c <_strtol_l.isra.0+0x7c>
 8013eb8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013ebc:	2f19      	cmp	r7, #25
 8013ebe:	d804      	bhi.n	8013eca <_strtol_l.isra.0+0xca>
 8013ec0:	3c57      	subs	r4, #87	; 0x57
 8013ec2:	e7db      	b.n	8013e7c <_strtol_l.isra.0+0x7c>
 8013ec4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8013ec8:	e7e4      	b.n	8013e94 <_strtol_l.isra.0+0x94>
 8013eca:	2e00      	cmp	r6, #0
 8013ecc:	da05      	bge.n	8013eda <_strtol_l.isra.0+0xda>
 8013ece:	2322      	movs	r3, #34	; 0x22
 8013ed0:	6003      	str	r3, [r0, #0]
 8013ed2:	4665      	mov	r5, ip
 8013ed4:	b942      	cbnz	r2, 8013ee8 <_strtol_l.isra.0+0xe8>
 8013ed6:	4628      	mov	r0, r5
 8013ed8:	e79d      	b.n	8013e16 <_strtol_l.isra.0+0x16>
 8013eda:	f1b8 0f00 	cmp.w	r8, #0
 8013ede:	d000      	beq.n	8013ee2 <_strtol_l.isra.0+0xe2>
 8013ee0:	426d      	negs	r5, r5
 8013ee2:	2a00      	cmp	r2, #0
 8013ee4:	d0f7      	beq.n	8013ed6 <_strtol_l.isra.0+0xd6>
 8013ee6:	b10e      	cbz	r6, 8013eec <_strtol_l.isra.0+0xec>
 8013ee8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8013eec:	6011      	str	r1, [r2, #0]
 8013eee:	e7f2      	b.n	8013ed6 <_strtol_l.isra.0+0xd6>
 8013ef0:	2430      	movs	r4, #48	; 0x30
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d1b3      	bne.n	8013e5e <_strtol_l.isra.0+0x5e>
 8013ef6:	2308      	movs	r3, #8
 8013ef8:	e7b1      	b.n	8013e5e <_strtol_l.isra.0+0x5e>
 8013efa:	2c30      	cmp	r4, #48	; 0x30
 8013efc:	d0a4      	beq.n	8013e48 <_strtol_l.isra.0+0x48>
 8013efe:	230a      	movs	r3, #10
 8013f00:	e7ad      	b.n	8013e5e <_strtol_l.isra.0+0x5e>
 8013f02:	bf00      	nop
 8013f04:	0801758d 	.word	0x0801758d

08013f08 <_strtol_r>:
 8013f08:	f7ff bf7a 	b.w	8013e00 <_strtol_l.isra.0>

08013f0c <_vsniprintf_r>:
 8013f0c:	b530      	push	{r4, r5, lr}
 8013f0e:	1e14      	subs	r4, r2, #0
 8013f10:	4605      	mov	r5, r0
 8013f12:	b09b      	sub	sp, #108	; 0x6c
 8013f14:	4618      	mov	r0, r3
 8013f16:	da05      	bge.n	8013f24 <_vsniprintf_r+0x18>
 8013f18:	238b      	movs	r3, #139	; 0x8b
 8013f1a:	602b      	str	r3, [r5, #0]
 8013f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f20:	b01b      	add	sp, #108	; 0x6c
 8013f22:	bd30      	pop	{r4, r5, pc}
 8013f24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013f28:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013f2c:	bf14      	ite	ne
 8013f2e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8013f32:	4623      	moveq	r3, r4
 8013f34:	9302      	str	r3, [sp, #8]
 8013f36:	9305      	str	r3, [sp, #20]
 8013f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f3c:	9100      	str	r1, [sp, #0]
 8013f3e:	9104      	str	r1, [sp, #16]
 8013f40:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013f44:	4602      	mov	r2, r0
 8013f46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013f48:	4669      	mov	r1, sp
 8013f4a:	4628      	mov	r0, r5
 8013f4c:	f002 f898 	bl	8016080 <_svfiprintf_r>
 8013f50:	1c43      	adds	r3, r0, #1
 8013f52:	bfbc      	itt	lt
 8013f54:	238b      	movlt	r3, #139	; 0x8b
 8013f56:	602b      	strlt	r3, [r5, #0]
 8013f58:	2c00      	cmp	r4, #0
 8013f5a:	d0e1      	beq.n	8013f20 <_vsniprintf_r+0x14>
 8013f5c:	9b00      	ldr	r3, [sp, #0]
 8013f5e:	2200      	movs	r2, #0
 8013f60:	701a      	strb	r2, [r3, #0]
 8013f62:	e7dd      	b.n	8013f20 <_vsniprintf_r+0x14>

08013f64 <vsniprintf>:
 8013f64:	b507      	push	{r0, r1, r2, lr}
 8013f66:	9300      	str	r3, [sp, #0]
 8013f68:	4613      	mov	r3, r2
 8013f6a:	460a      	mov	r2, r1
 8013f6c:	4601      	mov	r1, r0
 8013f6e:	4803      	ldr	r0, [pc, #12]	; (8013f7c <vsniprintf+0x18>)
 8013f70:	6800      	ldr	r0, [r0, #0]
 8013f72:	f7ff ffcb 	bl	8013f0c <_vsniprintf_r>
 8013f76:	b003      	add	sp, #12
 8013f78:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f7c:	2000019c 	.word	0x2000019c

08013f80 <_write_r>:
 8013f80:	b538      	push	{r3, r4, r5, lr}
 8013f82:	4d07      	ldr	r5, [pc, #28]	; (8013fa0 <_write_r+0x20>)
 8013f84:	4604      	mov	r4, r0
 8013f86:	4608      	mov	r0, r1
 8013f88:	4611      	mov	r1, r2
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	602a      	str	r2, [r5, #0]
 8013f8e:	461a      	mov	r2, r3
 8013f90:	f7ee ffb5 	bl	8002efe <_write>
 8013f94:	1c43      	adds	r3, r0, #1
 8013f96:	d102      	bne.n	8013f9e <_write_r+0x1e>
 8013f98:	682b      	ldr	r3, [r5, #0]
 8013f9a:	b103      	cbz	r3, 8013f9e <_write_r+0x1e>
 8013f9c:	6023      	str	r3, [r4, #0]
 8013f9e:	bd38      	pop	{r3, r4, r5, pc}
 8013fa0:	2000c37c 	.word	0x2000c37c

08013fa4 <_close_r>:
 8013fa4:	b538      	push	{r3, r4, r5, lr}
 8013fa6:	4d06      	ldr	r5, [pc, #24]	; (8013fc0 <_close_r+0x1c>)
 8013fa8:	2300      	movs	r3, #0
 8013faa:	4604      	mov	r4, r0
 8013fac:	4608      	mov	r0, r1
 8013fae:	602b      	str	r3, [r5, #0]
 8013fb0:	f7ee ffc1 	bl	8002f36 <_close>
 8013fb4:	1c43      	adds	r3, r0, #1
 8013fb6:	d102      	bne.n	8013fbe <_close_r+0x1a>
 8013fb8:	682b      	ldr	r3, [r5, #0]
 8013fba:	b103      	cbz	r3, 8013fbe <_close_r+0x1a>
 8013fbc:	6023      	str	r3, [r4, #0]
 8013fbe:	bd38      	pop	{r3, r4, r5, pc}
 8013fc0:	2000c37c 	.word	0x2000c37c

08013fc4 <quorem>:
 8013fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fc8:	6903      	ldr	r3, [r0, #16]
 8013fca:	690c      	ldr	r4, [r1, #16]
 8013fcc:	42a3      	cmp	r3, r4
 8013fce:	4607      	mov	r7, r0
 8013fd0:	f2c0 8081 	blt.w	80140d6 <quorem+0x112>
 8013fd4:	3c01      	subs	r4, #1
 8013fd6:	f101 0814 	add.w	r8, r1, #20
 8013fda:	f100 0514 	add.w	r5, r0, #20
 8013fde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013fe2:	9301      	str	r3, [sp, #4]
 8013fe4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013fe8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013fec:	3301      	adds	r3, #1
 8013fee:	429a      	cmp	r2, r3
 8013ff0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013ff4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013ff8:	fbb2 f6f3 	udiv	r6, r2, r3
 8013ffc:	d331      	bcc.n	8014062 <quorem+0x9e>
 8013ffe:	f04f 0e00 	mov.w	lr, #0
 8014002:	4640      	mov	r0, r8
 8014004:	46ac      	mov	ip, r5
 8014006:	46f2      	mov	sl, lr
 8014008:	f850 2b04 	ldr.w	r2, [r0], #4
 801400c:	b293      	uxth	r3, r2
 801400e:	fb06 e303 	mla	r3, r6, r3, lr
 8014012:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014016:	b29b      	uxth	r3, r3
 8014018:	ebaa 0303 	sub.w	r3, sl, r3
 801401c:	0c12      	lsrs	r2, r2, #16
 801401e:	f8dc a000 	ldr.w	sl, [ip]
 8014022:	fb06 e202 	mla	r2, r6, r2, lr
 8014026:	fa13 f38a 	uxtah	r3, r3, sl
 801402a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801402e:	fa1f fa82 	uxth.w	sl, r2
 8014032:	f8dc 2000 	ldr.w	r2, [ip]
 8014036:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801403a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801403e:	b29b      	uxth	r3, r3
 8014040:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014044:	4581      	cmp	r9, r0
 8014046:	f84c 3b04 	str.w	r3, [ip], #4
 801404a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801404e:	d2db      	bcs.n	8014008 <quorem+0x44>
 8014050:	f855 300b 	ldr.w	r3, [r5, fp]
 8014054:	b92b      	cbnz	r3, 8014062 <quorem+0x9e>
 8014056:	9b01      	ldr	r3, [sp, #4]
 8014058:	3b04      	subs	r3, #4
 801405a:	429d      	cmp	r5, r3
 801405c:	461a      	mov	r2, r3
 801405e:	d32e      	bcc.n	80140be <quorem+0xfa>
 8014060:	613c      	str	r4, [r7, #16]
 8014062:	4638      	mov	r0, r7
 8014064:	f001 fd5e 	bl	8015b24 <__mcmp>
 8014068:	2800      	cmp	r0, #0
 801406a:	db24      	blt.n	80140b6 <quorem+0xf2>
 801406c:	3601      	adds	r6, #1
 801406e:	4628      	mov	r0, r5
 8014070:	f04f 0c00 	mov.w	ip, #0
 8014074:	f858 2b04 	ldr.w	r2, [r8], #4
 8014078:	f8d0 e000 	ldr.w	lr, [r0]
 801407c:	b293      	uxth	r3, r2
 801407e:	ebac 0303 	sub.w	r3, ip, r3
 8014082:	0c12      	lsrs	r2, r2, #16
 8014084:	fa13 f38e 	uxtah	r3, r3, lr
 8014088:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801408c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014090:	b29b      	uxth	r3, r3
 8014092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014096:	45c1      	cmp	r9, r8
 8014098:	f840 3b04 	str.w	r3, [r0], #4
 801409c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80140a0:	d2e8      	bcs.n	8014074 <quorem+0xb0>
 80140a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80140a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80140aa:	b922      	cbnz	r2, 80140b6 <quorem+0xf2>
 80140ac:	3b04      	subs	r3, #4
 80140ae:	429d      	cmp	r5, r3
 80140b0:	461a      	mov	r2, r3
 80140b2:	d30a      	bcc.n	80140ca <quorem+0x106>
 80140b4:	613c      	str	r4, [r7, #16]
 80140b6:	4630      	mov	r0, r6
 80140b8:	b003      	add	sp, #12
 80140ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140be:	6812      	ldr	r2, [r2, #0]
 80140c0:	3b04      	subs	r3, #4
 80140c2:	2a00      	cmp	r2, #0
 80140c4:	d1cc      	bne.n	8014060 <quorem+0x9c>
 80140c6:	3c01      	subs	r4, #1
 80140c8:	e7c7      	b.n	801405a <quorem+0x96>
 80140ca:	6812      	ldr	r2, [r2, #0]
 80140cc:	3b04      	subs	r3, #4
 80140ce:	2a00      	cmp	r2, #0
 80140d0:	d1f0      	bne.n	80140b4 <quorem+0xf0>
 80140d2:	3c01      	subs	r4, #1
 80140d4:	e7eb      	b.n	80140ae <quorem+0xea>
 80140d6:	2000      	movs	r0, #0
 80140d8:	e7ee      	b.n	80140b8 <quorem+0xf4>
 80140da:	0000      	movs	r0, r0
 80140dc:	0000      	movs	r0, r0
	...

080140e0 <_dtoa_r>:
 80140e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140e4:	ed2d 8b02 	vpush	{d8}
 80140e8:	ec57 6b10 	vmov	r6, r7, d0
 80140ec:	b095      	sub	sp, #84	; 0x54
 80140ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80140f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80140f4:	9105      	str	r1, [sp, #20]
 80140f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80140fa:	4604      	mov	r4, r0
 80140fc:	9209      	str	r2, [sp, #36]	; 0x24
 80140fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8014100:	b975      	cbnz	r5, 8014120 <_dtoa_r+0x40>
 8014102:	2010      	movs	r0, #16
 8014104:	f001 fa20 	bl	8015548 <malloc>
 8014108:	4602      	mov	r2, r0
 801410a:	6260      	str	r0, [r4, #36]	; 0x24
 801410c:	b920      	cbnz	r0, 8014118 <_dtoa_r+0x38>
 801410e:	4bb2      	ldr	r3, [pc, #712]	; (80143d8 <_dtoa_r+0x2f8>)
 8014110:	21ea      	movs	r1, #234	; 0xea
 8014112:	48b2      	ldr	r0, [pc, #712]	; (80143dc <_dtoa_r+0x2fc>)
 8014114:	f002 fcec 	bl	8016af0 <__assert_func>
 8014118:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801411c:	6005      	str	r5, [r0, #0]
 801411e:	60c5      	str	r5, [r0, #12]
 8014120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014122:	6819      	ldr	r1, [r3, #0]
 8014124:	b151      	cbz	r1, 801413c <_dtoa_r+0x5c>
 8014126:	685a      	ldr	r2, [r3, #4]
 8014128:	604a      	str	r2, [r1, #4]
 801412a:	2301      	movs	r3, #1
 801412c:	4093      	lsls	r3, r2
 801412e:	608b      	str	r3, [r1, #8]
 8014130:	4620      	mov	r0, r4
 8014132:	f001 fa6f 	bl	8015614 <_Bfree>
 8014136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014138:	2200      	movs	r2, #0
 801413a:	601a      	str	r2, [r3, #0]
 801413c:	1e3b      	subs	r3, r7, #0
 801413e:	bfb9      	ittee	lt
 8014140:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014144:	9303      	strlt	r3, [sp, #12]
 8014146:	2300      	movge	r3, #0
 8014148:	f8c8 3000 	strge.w	r3, [r8]
 801414c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8014150:	4ba3      	ldr	r3, [pc, #652]	; (80143e0 <_dtoa_r+0x300>)
 8014152:	bfbc      	itt	lt
 8014154:	2201      	movlt	r2, #1
 8014156:	f8c8 2000 	strlt.w	r2, [r8]
 801415a:	ea33 0309 	bics.w	r3, r3, r9
 801415e:	d11b      	bne.n	8014198 <_dtoa_r+0xb8>
 8014160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014162:	f242 730f 	movw	r3, #9999	; 0x270f
 8014166:	6013      	str	r3, [r2, #0]
 8014168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801416c:	4333      	orrs	r3, r6
 801416e:	f000 857a 	beq.w	8014c66 <_dtoa_r+0xb86>
 8014172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014174:	b963      	cbnz	r3, 8014190 <_dtoa_r+0xb0>
 8014176:	4b9b      	ldr	r3, [pc, #620]	; (80143e4 <_dtoa_r+0x304>)
 8014178:	e024      	b.n	80141c4 <_dtoa_r+0xe4>
 801417a:	4b9b      	ldr	r3, [pc, #620]	; (80143e8 <_dtoa_r+0x308>)
 801417c:	9300      	str	r3, [sp, #0]
 801417e:	3308      	adds	r3, #8
 8014180:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014182:	6013      	str	r3, [r2, #0]
 8014184:	9800      	ldr	r0, [sp, #0]
 8014186:	b015      	add	sp, #84	; 0x54
 8014188:	ecbd 8b02 	vpop	{d8}
 801418c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014190:	4b94      	ldr	r3, [pc, #592]	; (80143e4 <_dtoa_r+0x304>)
 8014192:	9300      	str	r3, [sp, #0]
 8014194:	3303      	adds	r3, #3
 8014196:	e7f3      	b.n	8014180 <_dtoa_r+0xa0>
 8014198:	ed9d 7b02 	vldr	d7, [sp, #8]
 801419c:	2200      	movs	r2, #0
 801419e:	ec51 0b17 	vmov	r0, r1, d7
 80141a2:	2300      	movs	r3, #0
 80141a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80141a8:	f7ec fc9e 	bl	8000ae8 <__aeabi_dcmpeq>
 80141ac:	4680      	mov	r8, r0
 80141ae:	b158      	cbz	r0, 80141c8 <_dtoa_r+0xe8>
 80141b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80141b2:	2301      	movs	r3, #1
 80141b4:	6013      	str	r3, [r2, #0]
 80141b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	f000 8551 	beq.w	8014c60 <_dtoa_r+0xb80>
 80141be:	488b      	ldr	r0, [pc, #556]	; (80143ec <_dtoa_r+0x30c>)
 80141c0:	6018      	str	r0, [r3, #0]
 80141c2:	1e43      	subs	r3, r0, #1
 80141c4:	9300      	str	r3, [sp, #0]
 80141c6:	e7dd      	b.n	8014184 <_dtoa_r+0xa4>
 80141c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80141cc:	aa12      	add	r2, sp, #72	; 0x48
 80141ce:	a913      	add	r1, sp, #76	; 0x4c
 80141d0:	4620      	mov	r0, r4
 80141d2:	f001 fdc7 	bl	8015d64 <__d2b>
 80141d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80141da:	4683      	mov	fp, r0
 80141dc:	2d00      	cmp	r5, #0
 80141de:	d07c      	beq.n	80142da <_dtoa_r+0x1fa>
 80141e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80141e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80141e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80141ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80141ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80141f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80141f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80141fa:	4b7d      	ldr	r3, [pc, #500]	; (80143f0 <_dtoa_r+0x310>)
 80141fc:	2200      	movs	r2, #0
 80141fe:	4630      	mov	r0, r6
 8014200:	4639      	mov	r1, r7
 8014202:	f7ec f851 	bl	80002a8 <__aeabi_dsub>
 8014206:	a36e      	add	r3, pc, #440	; (adr r3, 80143c0 <_dtoa_r+0x2e0>)
 8014208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801420c:	f7ec fa04 	bl	8000618 <__aeabi_dmul>
 8014210:	a36d      	add	r3, pc, #436	; (adr r3, 80143c8 <_dtoa_r+0x2e8>)
 8014212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014216:	f7ec f849 	bl	80002ac <__adddf3>
 801421a:	4606      	mov	r6, r0
 801421c:	4628      	mov	r0, r5
 801421e:	460f      	mov	r7, r1
 8014220:	f7ec f990 	bl	8000544 <__aeabi_i2d>
 8014224:	a36a      	add	r3, pc, #424	; (adr r3, 80143d0 <_dtoa_r+0x2f0>)
 8014226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801422a:	f7ec f9f5 	bl	8000618 <__aeabi_dmul>
 801422e:	4602      	mov	r2, r0
 8014230:	460b      	mov	r3, r1
 8014232:	4630      	mov	r0, r6
 8014234:	4639      	mov	r1, r7
 8014236:	f7ec f839 	bl	80002ac <__adddf3>
 801423a:	4606      	mov	r6, r0
 801423c:	460f      	mov	r7, r1
 801423e:	f7ec fc9b 	bl	8000b78 <__aeabi_d2iz>
 8014242:	2200      	movs	r2, #0
 8014244:	4682      	mov	sl, r0
 8014246:	2300      	movs	r3, #0
 8014248:	4630      	mov	r0, r6
 801424a:	4639      	mov	r1, r7
 801424c:	f7ec fc56 	bl	8000afc <__aeabi_dcmplt>
 8014250:	b148      	cbz	r0, 8014266 <_dtoa_r+0x186>
 8014252:	4650      	mov	r0, sl
 8014254:	f7ec f976 	bl	8000544 <__aeabi_i2d>
 8014258:	4632      	mov	r2, r6
 801425a:	463b      	mov	r3, r7
 801425c:	f7ec fc44 	bl	8000ae8 <__aeabi_dcmpeq>
 8014260:	b908      	cbnz	r0, 8014266 <_dtoa_r+0x186>
 8014262:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8014266:	f1ba 0f16 	cmp.w	sl, #22
 801426a:	d854      	bhi.n	8014316 <_dtoa_r+0x236>
 801426c:	4b61      	ldr	r3, [pc, #388]	; (80143f4 <_dtoa_r+0x314>)
 801426e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014276:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801427a:	f7ec fc3f 	bl	8000afc <__aeabi_dcmplt>
 801427e:	2800      	cmp	r0, #0
 8014280:	d04b      	beq.n	801431a <_dtoa_r+0x23a>
 8014282:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8014286:	2300      	movs	r3, #0
 8014288:	930e      	str	r3, [sp, #56]	; 0x38
 801428a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801428c:	1b5d      	subs	r5, r3, r5
 801428e:	1e6b      	subs	r3, r5, #1
 8014290:	9304      	str	r3, [sp, #16]
 8014292:	bf43      	ittte	mi
 8014294:	2300      	movmi	r3, #0
 8014296:	f1c5 0801 	rsbmi	r8, r5, #1
 801429a:	9304      	strmi	r3, [sp, #16]
 801429c:	f04f 0800 	movpl.w	r8, #0
 80142a0:	f1ba 0f00 	cmp.w	sl, #0
 80142a4:	db3b      	blt.n	801431e <_dtoa_r+0x23e>
 80142a6:	9b04      	ldr	r3, [sp, #16]
 80142a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80142ac:	4453      	add	r3, sl
 80142ae:	9304      	str	r3, [sp, #16]
 80142b0:	2300      	movs	r3, #0
 80142b2:	9306      	str	r3, [sp, #24]
 80142b4:	9b05      	ldr	r3, [sp, #20]
 80142b6:	2b09      	cmp	r3, #9
 80142b8:	d869      	bhi.n	801438e <_dtoa_r+0x2ae>
 80142ba:	2b05      	cmp	r3, #5
 80142bc:	bfc4      	itt	gt
 80142be:	3b04      	subgt	r3, #4
 80142c0:	9305      	strgt	r3, [sp, #20]
 80142c2:	9b05      	ldr	r3, [sp, #20]
 80142c4:	f1a3 0302 	sub.w	r3, r3, #2
 80142c8:	bfcc      	ite	gt
 80142ca:	2500      	movgt	r5, #0
 80142cc:	2501      	movle	r5, #1
 80142ce:	2b03      	cmp	r3, #3
 80142d0:	d869      	bhi.n	80143a6 <_dtoa_r+0x2c6>
 80142d2:	e8df f003 	tbb	[pc, r3]
 80142d6:	4e2c      	.short	0x4e2c
 80142d8:	5a4c      	.short	0x5a4c
 80142da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80142de:	441d      	add	r5, r3
 80142e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80142e4:	2b20      	cmp	r3, #32
 80142e6:	bfc1      	itttt	gt
 80142e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80142ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80142f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80142f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80142f8:	bfda      	itte	le
 80142fa:	f1c3 0320 	rsble	r3, r3, #32
 80142fe:	fa06 f003 	lslle.w	r0, r6, r3
 8014302:	4318      	orrgt	r0, r3
 8014304:	f7ec f90e 	bl	8000524 <__aeabi_ui2d>
 8014308:	2301      	movs	r3, #1
 801430a:	4606      	mov	r6, r0
 801430c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014310:	3d01      	subs	r5, #1
 8014312:	9310      	str	r3, [sp, #64]	; 0x40
 8014314:	e771      	b.n	80141fa <_dtoa_r+0x11a>
 8014316:	2301      	movs	r3, #1
 8014318:	e7b6      	b.n	8014288 <_dtoa_r+0x1a8>
 801431a:	900e      	str	r0, [sp, #56]	; 0x38
 801431c:	e7b5      	b.n	801428a <_dtoa_r+0x1aa>
 801431e:	f1ca 0300 	rsb	r3, sl, #0
 8014322:	9306      	str	r3, [sp, #24]
 8014324:	2300      	movs	r3, #0
 8014326:	eba8 080a 	sub.w	r8, r8, sl
 801432a:	930d      	str	r3, [sp, #52]	; 0x34
 801432c:	e7c2      	b.n	80142b4 <_dtoa_r+0x1d4>
 801432e:	2300      	movs	r3, #0
 8014330:	9308      	str	r3, [sp, #32]
 8014332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014334:	2b00      	cmp	r3, #0
 8014336:	dc39      	bgt.n	80143ac <_dtoa_r+0x2cc>
 8014338:	f04f 0901 	mov.w	r9, #1
 801433c:	f8cd 9004 	str.w	r9, [sp, #4]
 8014340:	464b      	mov	r3, r9
 8014342:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014346:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014348:	2200      	movs	r2, #0
 801434a:	6042      	str	r2, [r0, #4]
 801434c:	2204      	movs	r2, #4
 801434e:	f102 0614 	add.w	r6, r2, #20
 8014352:	429e      	cmp	r6, r3
 8014354:	6841      	ldr	r1, [r0, #4]
 8014356:	d92f      	bls.n	80143b8 <_dtoa_r+0x2d8>
 8014358:	4620      	mov	r0, r4
 801435a:	f001 f91b 	bl	8015594 <_Balloc>
 801435e:	9000      	str	r0, [sp, #0]
 8014360:	2800      	cmp	r0, #0
 8014362:	d14b      	bne.n	80143fc <_dtoa_r+0x31c>
 8014364:	4b24      	ldr	r3, [pc, #144]	; (80143f8 <_dtoa_r+0x318>)
 8014366:	4602      	mov	r2, r0
 8014368:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801436c:	e6d1      	b.n	8014112 <_dtoa_r+0x32>
 801436e:	2301      	movs	r3, #1
 8014370:	e7de      	b.n	8014330 <_dtoa_r+0x250>
 8014372:	2300      	movs	r3, #0
 8014374:	9308      	str	r3, [sp, #32]
 8014376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014378:	eb0a 0903 	add.w	r9, sl, r3
 801437c:	f109 0301 	add.w	r3, r9, #1
 8014380:	2b01      	cmp	r3, #1
 8014382:	9301      	str	r3, [sp, #4]
 8014384:	bfb8      	it	lt
 8014386:	2301      	movlt	r3, #1
 8014388:	e7dd      	b.n	8014346 <_dtoa_r+0x266>
 801438a:	2301      	movs	r3, #1
 801438c:	e7f2      	b.n	8014374 <_dtoa_r+0x294>
 801438e:	2501      	movs	r5, #1
 8014390:	2300      	movs	r3, #0
 8014392:	9305      	str	r3, [sp, #20]
 8014394:	9508      	str	r5, [sp, #32]
 8014396:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801439a:	2200      	movs	r2, #0
 801439c:	f8cd 9004 	str.w	r9, [sp, #4]
 80143a0:	2312      	movs	r3, #18
 80143a2:	9209      	str	r2, [sp, #36]	; 0x24
 80143a4:	e7cf      	b.n	8014346 <_dtoa_r+0x266>
 80143a6:	2301      	movs	r3, #1
 80143a8:	9308      	str	r3, [sp, #32]
 80143aa:	e7f4      	b.n	8014396 <_dtoa_r+0x2b6>
 80143ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80143b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80143b4:	464b      	mov	r3, r9
 80143b6:	e7c6      	b.n	8014346 <_dtoa_r+0x266>
 80143b8:	3101      	adds	r1, #1
 80143ba:	6041      	str	r1, [r0, #4]
 80143bc:	0052      	lsls	r2, r2, #1
 80143be:	e7c6      	b.n	801434e <_dtoa_r+0x26e>
 80143c0:	636f4361 	.word	0x636f4361
 80143c4:	3fd287a7 	.word	0x3fd287a7
 80143c8:	8b60c8b3 	.word	0x8b60c8b3
 80143cc:	3fc68a28 	.word	0x3fc68a28
 80143d0:	509f79fb 	.word	0x509f79fb
 80143d4:	3fd34413 	.word	0x3fd34413
 80143d8:	0801778d 	.word	0x0801778d
 80143dc:	080177a4 	.word	0x080177a4
 80143e0:	7ff00000 	.word	0x7ff00000
 80143e4:	08017789 	.word	0x08017789
 80143e8:	08017780 	.word	0x08017780
 80143ec:	08017a0a 	.word	0x08017a0a
 80143f0:	3ff80000 	.word	0x3ff80000
 80143f4:	08017920 	.word	0x08017920
 80143f8:	08017803 	.word	0x08017803
 80143fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143fe:	9a00      	ldr	r2, [sp, #0]
 8014400:	601a      	str	r2, [r3, #0]
 8014402:	9b01      	ldr	r3, [sp, #4]
 8014404:	2b0e      	cmp	r3, #14
 8014406:	f200 80ad 	bhi.w	8014564 <_dtoa_r+0x484>
 801440a:	2d00      	cmp	r5, #0
 801440c:	f000 80aa 	beq.w	8014564 <_dtoa_r+0x484>
 8014410:	f1ba 0f00 	cmp.w	sl, #0
 8014414:	dd36      	ble.n	8014484 <_dtoa_r+0x3a4>
 8014416:	4ac3      	ldr	r2, [pc, #780]	; (8014724 <_dtoa_r+0x644>)
 8014418:	f00a 030f 	and.w	r3, sl, #15
 801441c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014420:	ed93 7b00 	vldr	d7, [r3]
 8014424:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8014428:	ea4f 172a 	mov.w	r7, sl, asr #4
 801442c:	eeb0 8a47 	vmov.f32	s16, s14
 8014430:	eef0 8a67 	vmov.f32	s17, s15
 8014434:	d016      	beq.n	8014464 <_dtoa_r+0x384>
 8014436:	4bbc      	ldr	r3, [pc, #752]	; (8014728 <_dtoa_r+0x648>)
 8014438:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801443c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014440:	f7ec fa14 	bl	800086c <__aeabi_ddiv>
 8014444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014448:	f007 070f 	and.w	r7, r7, #15
 801444c:	2503      	movs	r5, #3
 801444e:	4eb6      	ldr	r6, [pc, #728]	; (8014728 <_dtoa_r+0x648>)
 8014450:	b957      	cbnz	r7, 8014468 <_dtoa_r+0x388>
 8014452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014456:	ec53 2b18 	vmov	r2, r3, d8
 801445a:	f7ec fa07 	bl	800086c <__aeabi_ddiv>
 801445e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014462:	e029      	b.n	80144b8 <_dtoa_r+0x3d8>
 8014464:	2502      	movs	r5, #2
 8014466:	e7f2      	b.n	801444e <_dtoa_r+0x36e>
 8014468:	07f9      	lsls	r1, r7, #31
 801446a:	d508      	bpl.n	801447e <_dtoa_r+0x39e>
 801446c:	ec51 0b18 	vmov	r0, r1, d8
 8014470:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014474:	f7ec f8d0 	bl	8000618 <__aeabi_dmul>
 8014478:	ec41 0b18 	vmov	d8, r0, r1
 801447c:	3501      	adds	r5, #1
 801447e:	107f      	asrs	r7, r7, #1
 8014480:	3608      	adds	r6, #8
 8014482:	e7e5      	b.n	8014450 <_dtoa_r+0x370>
 8014484:	f000 80a6 	beq.w	80145d4 <_dtoa_r+0x4f4>
 8014488:	f1ca 0600 	rsb	r6, sl, #0
 801448c:	4ba5      	ldr	r3, [pc, #660]	; (8014724 <_dtoa_r+0x644>)
 801448e:	4fa6      	ldr	r7, [pc, #664]	; (8014728 <_dtoa_r+0x648>)
 8014490:	f006 020f 	and.w	r2, r6, #15
 8014494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801449c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80144a0:	f7ec f8ba 	bl	8000618 <__aeabi_dmul>
 80144a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144a8:	1136      	asrs	r6, r6, #4
 80144aa:	2300      	movs	r3, #0
 80144ac:	2502      	movs	r5, #2
 80144ae:	2e00      	cmp	r6, #0
 80144b0:	f040 8085 	bne.w	80145be <_dtoa_r+0x4de>
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d1d2      	bne.n	801445e <_dtoa_r+0x37e>
 80144b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	f000 808c 	beq.w	80145d8 <_dtoa_r+0x4f8>
 80144c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80144c4:	4b99      	ldr	r3, [pc, #612]	; (801472c <_dtoa_r+0x64c>)
 80144c6:	2200      	movs	r2, #0
 80144c8:	4630      	mov	r0, r6
 80144ca:	4639      	mov	r1, r7
 80144cc:	f7ec fb16 	bl	8000afc <__aeabi_dcmplt>
 80144d0:	2800      	cmp	r0, #0
 80144d2:	f000 8081 	beq.w	80145d8 <_dtoa_r+0x4f8>
 80144d6:	9b01      	ldr	r3, [sp, #4]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d07d      	beq.n	80145d8 <_dtoa_r+0x4f8>
 80144dc:	f1b9 0f00 	cmp.w	r9, #0
 80144e0:	dd3c      	ble.n	801455c <_dtoa_r+0x47c>
 80144e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80144e6:	9307      	str	r3, [sp, #28]
 80144e8:	2200      	movs	r2, #0
 80144ea:	4b91      	ldr	r3, [pc, #580]	; (8014730 <_dtoa_r+0x650>)
 80144ec:	4630      	mov	r0, r6
 80144ee:	4639      	mov	r1, r7
 80144f0:	f7ec f892 	bl	8000618 <__aeabi_dmul>
 80144f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144f8:	3501      	adds	r5, #1
 80144fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80144fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014502:	4628      	mov	r0, r5
 8014504:	f7ec f81e 	bl	8000544 <__aeabi_i2d>
 8014508:	4632      	mov	r2, r6
 801450a:	463b      	mov	r3, r7
 801450c:	f7ec f884 	bl	8000618 <__aeabi_dmul>
 8014510:	4b88      	ldr	r3, [pc, #544]	; (8014734 <_dtoa_r+0x654>)
 8014512:	2200      	movs	r2, #0
 8014514:	f7eb feca 	bl	80002ac <__adddf3>
 8014518:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801451c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014520:	9303      	str	r3, [sp, #12]
 8014522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014524:	2b00      	cmp	r3, #0
 8014526:	d15c      	bne.n	80145e2 <_dtoa_r+0x502>
 8014528:	4b83      	ldr	r3, [pc, #524]	; (8014738 <_dtoa_r+0x658>)
 801452a:	2200      	movs	r2, #0
 801452c:	4630      	mov	r0, r6
 801452e:	4639      	mov	r1, r7
 8014530:	f7eb feba 	bl	80002a8 <__aeabi_dsub>
 8014534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014538:	4606      	mov	r6, r0
 801453a:	460f      	mov	r7, r1
 801453c:	f7ec fafc 	bl	8000b38 <__aeabi_dcmpgt>
 8014540:	2800      	cmp	r0, #0
 8014542:	f040 8296 	bne.w	8014a72 <_dtoa_r+0x992>
 8014546:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801454a:	4630      	mov	r0, r6
 801454c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014550:	4639      	mov	r1, r7
 8014552:	f7ec fad3 	bl	8000afc <__aeabi_dcmplt>
 8014556:	2800      	cmp	r0, #0
 8014558:	f040 8288 	bne.w	8014a6c <_dtoa_r+0x98c>
 801455c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014560:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014566:	2b00      	cmp	r3, #0
 8014568:	f2c0 8158 	blt.w	801481c <_dtoa_r+0x73c>
 801456c:	f1ba 0f0e 	cmp.w	sl, #14
 8014570:	f300 8154 	bgt.w	801481c <_dtoa_r+0x73c>
 8014574:	4b6b      	ldr	r3, [pc, #428]	; (8014724 <_dtoa_r+0x644>)
 8014576:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801457a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801457e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014580:	2b00      	cmp	r3, #0
 8014582:	f280 80e3 	bge.w	801474c <_dtoa_r+0x66c>
 8014586:	9b01      	ldr	r3, [sp, #4]
 8014588:	2b00      	cmp	r3, #0
 801458a:	f300 80df 	bgt.w	801474c <_dtoa_r+0x66c>
 801458e:	f040 826d 	bne.w	8014a6c <_dtoa_r+0x98c>
 8014592:	4b69      	ldr	r3, [pc, #420]	; (8014738 <_dtoa_r+0x658>)
 8014594:	2200      	movs	r2, #0
 8014596:	4640      	mov	r0, r8
 8014598:	4649      	mov	r1, r9
 801459a:	f7ec f83d 	bl	8000618 <__aeabi_dmul>
 801459e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80145a2:	f7ec fabf 	bl	8000b24 <__aeabi_dcmpge>
 80145a6:	9e01      	ldr	r6, [sp, #4]
 80145a8:	4637      	mov	r7, r6
 80145aa:	2800      	cmp	r0, #0
 80145ac:	f040 8243 	bne.w	8014a36 <_dtoa_r+0x956>
 80145b0:	9d00      	ldr	r5, [sp, #0]
 80145b2:	2331      	movs	r3, #49	; 0x31
 80145b4:	f805 3b01 	strb.w	r3, [r5], #1
 80145b8:	f10a 0a01 	add.w	sl, sl, #1
 80145bc:	e23f      	b.n	8014a3e <_dtoa_r+0x95e>
 80145be:	07f2      	lsls	r2, r6, #31
 80145c0:	d505      	bpl.n	80145ce <_dtoa_r+0x4ee>
 80145c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80145c6:	f7ec f827 	bl	8000618 <__aeabi_dmul>
 80145ca:	3501      	adds	r5, #1
 80145cc:	2301      	movs	r3, #1
 80145ce:	1076      	asrs	r6, r6, #1
 80145d0:	3708      	adds	r7, #8
 80145d2:	e76c      	b.n	80144ae <_dtoa_r+0x3ce>
 80145d4:	2502      	movs	r5, #2
 80145d6:	e76f      	b.n	80144b8 <_dtoa_r+0x3d8>
 80145d8:	9b01      	ldr	r3, [sp, #4]
 80145da:	f8cd a01c 	str.w	sl, [sp, #28]
 80145de:	930c      	str	r3, [sp, #48]	; 0x30
 80145e0:	e78d      	b.n	80144fe <_dtoa_r+0x41e>
 80145e2:	9900      	ldr	r1, [sp, #0]
 80145e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80145e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145e8:	4b4e      	ldr	r3, [pc, #312]	; (8014724 <_dtoa_r+0x644>)
 80145ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80145ee:	4401      	add	r1, r0
 80145f0:	9102      	str	r1, [sp, #8]
 80145f2:	9908      	ldr	r1, [sp, #32]
 80145f4:	eeb0 8a47 	vmov.f32	s16, s14
 80145f8:	eef0 8a67 	vmov.f32	s17, s15
 80145fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014600:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014604:	2900      	cmp	r1, #0
 8014606:	d045      	beq.n	8014694 <_dtoa_r+0x5b4>
 8014608:	494c      	ldr	r1, [pc, #304]	; (801473c <_dtoa_r+0x65c>)
 801460a:	2000      	movs	r0, #0
 801460c:	f7ec f92e 	bl	800086c <__aeabi_ddiv>
 8014610:	ec53 2b18 	vmov	r2, r3, d8
 8014614:	f7eb fe48 	bl	80002a8 <__aeabi_dsub>
 8014618:	9d00      	ldr	r5, [sp, #0]
 801461a:	ec41 0b18 	vmov	d8, r0, r1
 801461e:	4639      	mov	r1, r7
 8014620:	4630      	mov	r0, r6
 8014622:	f7ec faa9 	bl	8000b78 <__aeabi_d2iz>
 8014626:	900c      	str	r0, [sp, #48]	; 0x30
 8014628:	f7eb ff8c 	bl	8000544 <__aeabi_i2d>
 801462c:	4602      	mov	r2, r0
 801462e:	460b      	mov	r3, r1
 8014630:	4630      	mov	r0, r6
 8014632:	4639      	mov	r1, r7
 8014634:	f7eb fe38 	bl	80002a8 <__aeabi_dsub>
 8014638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801463a:	3330      	adds	r3, #48	; 0x30
 801463c:	f805 3b01 	strb.w	r3, [r5], #1
 8014640:	ec53 2b18 	vmov	r2, r3, d8
 8014644:	4606      	mov	r6, r0
 8014646:	460f      	mov	r7, r1
 8014648:	f7ec fa58 	bl	8000afc <__aeabi_dcmplt>
 801464c:	2800      	cmp	r0, #0
 801464e:	d165      	bne.n	801471c <_dtoa_r+0x63c>
 8014650:	4632      	mov	r2, r6
 8014652:	463b      	mov	r3, r7
 8014654:	4935      	ldr	r1, [pc, #212]	; (801472c <_dtoa_r+0x64c>)
 8014656:	2000      	movs	r0, #0
 8014658:	f7eb fe26 	bl	80002a8 <__aeabi_dsub>
 801465c:	ec53 2b18 	vmov	r2, r3, d8
 8014660:	f7ec fa4c 	bl	8000afc <__aeabi_dcmplt>
 8014664:	2800      	cmp	r0, #0
 8014666:	f040 80b9 	bne.w	80147dc <_dtoa_r+0x6fc>
 801466a:	9b02      	ldr	r3, [sp, #8]
 801466c:	429d      	cmp	r5, r3
 801466e:	f43f af75 	beq.w	801455c <_dtoa_r+0x47c>
 8014672:	4b2f      	ldr	r3, [pc, #188]	; (8014730 <_dtoa_r+0x650>)
 8014674:	ec51 0b18 	vmov	r0, r1, d8
 8014678:	2200      	movs	r2, #0
 801467a:	f7eb ffcd 	bl	8000618 <__aeabi_dmul>
 801467e:	4b2c      	ldr	r3, [pc, #176]	; (8014730 <_dtoa_r+0x650>)
 8014680:	ec41 0b18 	vmov	d8, r0, r1
 8014684:	2200      	movs	r2, #0
 8014686:	4630      	mov	r0, r6
 8014688:	4639      	mov	r1, r7
 801468a:	f7eb ffc5 	bl	8000618 <__aeabi_dmul>
 801468e:	4606      	mov	r6, r0
 8014690:	460f      	mov	r7, r1
 8014692:	e7c4      	b.n	801461e <_dtoa_r+0x53e>
 8014694:	ec51 0b17 	vmov	r0, r1, d7
 8014698:	f7eb ffbe 	bl	8000618 <__aeabi_dmul>
 801469c:	9b02      	ldr	r3, [sp, #8]
 801469e:	9d00      	ldr	r5, [sp, #0]
 80146a0:	930c      	str	r3, [sp, #48]	; 0x30
 80146a2:	ec41 0b18 	vmov	d8, r0, r1
 80146a6:	4639      	mov	r1, r7
 80146a8:	4630      	mov	r0, r6
 80146aa:	f7ec fa65 	bl	8000b78 <__aeabi_d2iz>
 80146ae:	9011      	str	r0, [sp, #68]	; 0x44
 80146b0:	f7eb ff48 	bl	8000544 <__aeabi_i2d>
 80146b4:	4602      	mov	r2, r0
 80146b6:	460b      	mov	r3, r1
 80146b8:	4630      	mov	r0, r6
 80146ba:	4639      	mov	r1, r7
 80146bc:	f7eb fdf4 	bl	80002a8 <__aeabi_dsub>
 80146c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80146c2:	3330      	adds	r3, #48	; 0x30
 80146c4:	f805 3b01 	strb.w	r3, [r5], #1
 80146c8:	9b02      	ldr	r3, [sp, #8]
 80146ca:	429d      	cmp	r5, r3
 80146cc:	4606      	mov	r6, r0
 80146ce:	460f      	mov	r7, r1
 80146d0:	f04f 0200 	mov.w	r2, #0
 80146d4:	d134      	bne.n	8014740 <_dtoa_r+0x660>
 80146d6:	4b19      	ldr	r3, [pc, #100]	; (801473c <_dtoa_r+0x65c>)
 80146d8:	ec51 0b18 	vmov	r0, r1, d8
 80146dc:	f7eb fde6 	bl	80002ac <__adddf3>
 80146e0:	4602      	mov	r2, r0
 80146e2:	460b      	mov	r3, r1
 80146e4:	4630      	mov	r0, r6
 80146e6:	4639      	mov	r1, r7
 80146e8:	f7ec fa26 	bl	8000b38 <__aeabi_dcmpgt>
 80146ec:	2800      	cmp	r0, #0
 80146ee:	d175      	bne.n	80147dc <_dtoa_r+0x6fc>
 80146f0:	ec53 2b18 	vmov	r2, r3, d8
 80146f4:	4911      	ldr	r1, [pc, #68]	; (801473c <_dtoa_r+0x65c>)
 80146f6:	2000      	movs	r0, #0
 80146f8:	f7eb fdd6 	bl	80002a8 <__aeabi_dsub>
 80146fc:	4602      	mov	r2, r0
 80146fe:	460b      	mov	r3, r1
 8014700:	4630      	mov	r0, r6
 8014702:	4639      	mov	r1, r7
 8014704:	f7ec f9fa 	bl	8000afc <__aeabi_dcmplt>
 8014708:	2800      	cmp	r0, #0
 801470a:	f43f af27 	beq.w	801455c <_dtoa_r+0x47c>
 801470e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014710:	1e6b      	subs	r3, r5, #1
 8014712:	930c      	str	r3, [sp, #48]	; 0x30
 8014714:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014718:	2b30      	cmp	r3, #48	; 0x30
 801471a:	d0f8      	beq.n	801470e <_dtoa_r+0x62e>
 801471c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014720:	e04a      	b.n	80147b8 <_dtoa_r+0x6d8>
 8014722:	bf00      	nop
 8014724:	08017920 	.word	0x08017920
 8014728:	080178f8 	.word	0x080178f8
 801472c:	3ff00000 	.word	0x3ff00000
 8014730:	40240000 	.word	0x40240000
 8014734:	401c0000 	.word	0x401c0000
 8014738:	40140000 	.word	0x40140000
 801473c:	3fe00000 	.word	0x3fe00000
 8014740:	4baf      	ldr	r3, [pc, #700]	; (8014a00 <_dtoa_r+0x920>)
 8014742:	f7eb ff69 	bl	8000618 <__aeabi_dmul>
 8014746:	4606      	mov	r6, r0
 8014748:	460f      	mov	r7, r1
 801474a:	e7ac      	b.n	80146a6 <_dtoa_r+0x5c6>
 801474c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014750:	9d00      	ldr	r5, [sp, #0]
 8014752:	4642      	mov	r2, r8
 8014754:	464b      	mov	r3, r9
 8014756:	4630      	mov	r0, r6
 8014758:	4639      	mov	r1, r7
 801475a:	f7ec f887 	bl	800086c <__aeabi_ddiv>
 801475e:	f7ec fa0b 	bl	8000b78 <__aeabi_d2iz>
 8014762:	9002      	str	r0, [sp, #8]
 8014764:	f7eb feee 	bl	8000544 <__aeabi_i2d>
 8014768:	4642      	mov	r2, r8
 801476a:	464b      	mov	r3, r9
 801476c:	f7eb ff54 	bl	8000618 <__aeabi_dmul>
 8014770:	4602      	mov	r2, r0
 8014772:	460b      	mov	r3, r1
 8014774:	4630      	mov	r0, r6
 8014776:	4639      	mov	r1, r7
 8014778:	f7eb fd96 	bl	80002a8 <__aeabi_dsub>
 801477c:	9e02      	ldr	r6, [sp, #8]
 801477e:	9f01      	ldr	r7, [sp, #4]
 8014780:	3630      	adds	r6, #48	; 0x30
 8014782:	f805 6b01 	strb.w	r6, [r5], #1
 8014786:	9e00      	ldr	r6, [sp, #0]
 8014788:	1bae      	subs	r6, r5, r6
 801478a:	42b7      	cmp	r7, r6
 801478c:	4602      	mov	r2, r0
 801478e:	460b      	mov	r3, r1
 8014790:	d137      	bne.n	8014802 <_dtoa_r+0x722>
 8014792:	f7eb fd8b 	bl	80002ac <__adddf3>
 8014796:	4642      	mov	r2, r8
 8014798:	464b      	mov	r3, r9
 801479a:	4606      	mov	r6, r0
 801479c:	460f      	mov	r7, r1
 801479e:	f7ec f9cb 	bl	8000b38 <__aeabi_dcmpgt>
 80147a2:	b9c8      	cbnz	r0, 80147d8 <_dtoa_r+0x6f8>
 80147a4:	4642      	mov	r2, r8
 80147a6:	464b      	mov	r3, r9
 80147a8:	4630      	mov	r0, r6
 80147aa:	4639      	mov	r1, r7
 80147ac:	f7ec f99c 	bl	8000ae8 <__aeabi_dcmpeq>
 80147b0:	b110      	cbz	r0, 80147b8 <_dtoa_r+0x6d8>
 80147b2:	9b02      	ldr	r3, [sp, #8]
 80147b4:	07d9      	lsls	r1, r3, #31
 80147b6:	d40f      	bmi.n	80147d8 <_dtoa_r+0x6f8>
 80147b8:	4620      	mov	r0, r4
 80147ba:	4659      	mov	r1, fp
 80147bc:	f000 ff2a 	bl	8015614 <_Bfree>
 80147c0:	2300      	movs	r3, #0
 80147c2:	702b      	strb	r3, [r5, #0]
 80147c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147c6:	f10a 0001 	add.w	r0, sl, #1
 80147ca:	6018      	str	r0, [r3, #0]
 80147cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	f43f acd8 	beq.w	8014184 <_dtoa_r+0xa4>
 80147d4:	601d      	str	r5, [r3, #0]
 80147d6:	e4d5      	b.n	8014184 <_dtoa_r+0xa4>
 80147d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80147dc:	462b      	mov	r3, r5
 80147de:	461d      	mov	r5, r3
 80147e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80147e4:	2a39      	cmp	r2, #57	; 0x39
 80147e6:	d108      	bne.n	80147fa <_dtoa_r+0x71a>
 80147e8:	9a00      	ldr	r2, [sp, #0]
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d1f7      	bne.n	80147de <_dtoa_r+0x6fe>
 80147ee:	9a07      	ldr	r2, [sp, #28]
 80147f0:	9900      	ldr	r1, [sp, #0]
 80147f2:	3201      	adds	r2, #1
 80147f4:	9207      	str	r2, [sp, #28]
 80147f6:	2230      	movs	r2, #48	; 0x30
 80147f8:	700a      	strb	r2, [r1, #0]
 80147fa:	781a      	ldrb	r2, [r3, #0]
 80147fc:	3201      	adds	r2, #1
 80147fe:	701a      	strb	r2, [r3, #0]
 8014800:	e78c      	b.n	801471c <_dtoa_r+0x63c>
 8014802:	4b7f      	ldr	r3, [pc, #508]	; (8014a00 <_dtoa_r+0x920>)
 8014804:	2200      	movs	r2, #0
 8014806:	f7eb ff07 	bl	8000618 <__aeabi_dmul>
 801480a:	2200      	movs	r2, #0
 801480c:	2300      	movs	r3, #0
 801480e:	4606      	mov	r6, r0
 8014810:	460f      	mov	r7, r1
 8014812:	f7ec f969 	bl	8000ae8 <__aeabi_dcmpeq>
 8014816:	2800      	cmp	r0, #0
 8014818:	d09b      	beq.n	8014752 <_dtoa_r+0x672>
 801481a:	e7cd      	b.n	80147b8 <_dtoa_r+0x6d8>
 801481c:	9a08      	ldr	r2, [sp, #32]
 801481e:	2a00      	cmp	r2, #0
 8014820:	f000 80c4 	beq.w	80149ac <_dtoa_r+0x8cc>
 8014824:	9a05      	ldr	r2, [sp, #20]
 8014826:	2a01      	cmp	r2, #1
 8014828:	f300 80a8 	bgt.w	801497c <_dtoa_r+0x89c>
 801482c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801482e:	2a00      	cmp	r2, #0
 8014830:	f000 80a0 	beq.w	8014974 <_dtoa_r+0x894>
 8014834:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014838:	9e06      	ldr	r6, [sp, #24]
 801483a:	4645      	mov	r5, r8
 801483c:	9a04      	ldr	r2, [sp, #16]
 801483e:	2101      	movs	r1, #1
 8014840:	441a      	add	r2, r3
 8014842:	4620      	mov	r0, r4
 8014844:	4498      	add	r8, r3
 8014846:	9204      	str	r2, [sp, #16]
 8014848:	f000 ffea 	bl	8015820 <__i2b>
 801484c:	4607      	mov	r7, r0
 801484e:	2d00      	cmp	r5, #0
 8014850:	dd0b      	ble.n	801486a <_dtoa_r+0x78a>
 8014852:	9b04      	ldr	r3, [sp, #16]
 8014854:	2b00      	cmp	r3, #0
 8014856:	dd08      	ble.n	801486a <_dtoa_r+0x78a>
 8014858:	42ab      	cmp	r3, r5
 801485a:	9a04      	ldr	r2, [sp, #16]
 801485c:	bfa8      	it	ge
 801485e:	462b      	movge	r3, r5
 8014860:	eba8 0803 	sub.w	r8, r8, r3
 8014864:	1aed      	subs	r5, r5, r3
 8014866:	1ad3      	subs	r3, r2, r3
 8014868:	9304      	str	r3, [sp, #16]
 801486a:	9b06      	ldr	r3, [sp, #24]
 801486c:	b1fb      	cbz	r3, 80148ae <_dtoa_r+0x7ce>
 801486e:	9b08      	ldr	r3, [sp, #32]
 8014870:	2b00      	cmp	r3, #0
 8014872:	f000 809f 	beq.w	80149b4 <_dtoa_r+0x8d4>
 8014876:	2e00      	cmp	r6, #0
 8014878:	dd11      	ble.n	801489e <_dtoa_r+0x7be>
 801487a:	4639      	mov	r1, r7
 801487c:	4632      	mov	r2, r6
 801487e:	4620      	mov	r0, r4
 8014880:	f001 f88a 	bl	8015998 <__pow5mult>
 8014884:	465a      	mov	r2, fp
 8014886:	4601      	mov	r1, r0
 8014888:	4607      	mov	r7, r0
 801488a:	4620      	mov	r0, r4
 801488c:	f000 ffde 	bl	801584c <__multiply>
 8014890:	4659      	mov	r1, fp
 8014892:	9007      	str	r0, [sp, #28]
 8014894:	4620      	mov	r0, r4
 8014896:	f000 febd 	bl	8015614 <_Bfree>
 801489a:	9b07      	ldr	r3, [sp, #28]
 801489c:	469b      	mov	fp, r3
 801489e:	9b06      	ldr	r3, [sp, #24]
 80148a0:	1b9a      	subs	r2, r3, r6
 80148a2:	d004      	beq.n	80148ae <_dtoa_r+0x7ce>
 80148a4:	4659      	mov	r1, fp
 80148a6:	4620      	mov	r0, r4
 80148a8:	f001 f876 	bl	8015998 <__pow5mult>
 80148ac:	4683      	mov	fp, r0
 80148ae:	2101      	movs	r1, #1
 80148b0:	4620      	mov	r0, r4
 80148b2:	f000 ffb5 	bl	8015820 <__i2b>
 80148b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	4606      	mov	r6, r0
 80148bc:	dd7c      	ble.n	80149b8 <_dtoa_r+0x8d8>
 80148be:	461a      	mov	r2, r3
 80148c0:	4601      	mov	r1, r0
 80148c2:	4620      	mov	r0, r4
 80148c4:	f001 f868 	bl	8015998 <__pow5mult>
 80148c8:	9b05      	ldr	r3, [sp, #20]
 80148ca:	2b01      	cmp	r3, #1
 80148cc:	4606      	mov	r6, r0
 80148ce:	dd76      	ble.n	80149be <_dtoa_r+0x8de>
 80148d0:	2300      	movs	r3, #0
 80148d2:	9306      	str	r3, [sp, #24]
 80148d4:	6933      	ldr	r3, [r6, #16]
 80148d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80148da:	6918      	ldr	r0, [r3, #16]
 80148dc:	f000 ff50 	bl	8015780 <__hi0bits>
 80148e0:	f1c0 0020 	rsb	r0, r0, #32
 80148e4:	9b04      	ldr	r3, [sp, #16]
 80148e6:	4418      	add	r0, r3
 80148e8:	f010 001f 	ands.w	r0, r0, #31
 80148ec:	f000 8086 	beq.w	80149fc <_dtoa_r+0x91c>
 80148f0:	f1c0 0320 	rsb	r3, r0, #32
 80148f4:	2b04      	cmp	r3, #4
 80148f6:	dd7f      	ble.n	80149f8 <_dtoa_r+0x918>
 80148f8:	f1c0 001c 	rsb	r0, r0, #28
 80148fc:	9b04      	ldr	r3, [sp, #16]
 80148fe:	4403      	add	r3, r0
 8014900:	4480      	add	r8, r0
 8014902:	4405      	add	r5, r0
 8014904:	9304      	str	r3, [sp, #16]
 8014906:	f1b8 0f00 	cmp.w	r8, #0
 801490a:	dd05      	ble.n	8014918 <_dtoa_r+0x838>
 801490c:	4659      	mov	r1, fp
 801490e:	4642      	mov	r2, r8
 8014910:	4620      	mov	r0, r4
 8014912:	f001 f89b 	bl	8015a4c <__lshift>
 8014916:	4683      	mov	fp, r0
 8014918:	9b04      	ldr	r3, [sp, #16]
 801491a:	2b00      	cmp	r3, #0
 801491c:	dd05      	ble.n	801492a <_dtoa_r+0x84a>
 801491e:	4631      	mov	r1, r6
 8014920:	461a      	mov	r2, r3
 8014922:	4620      	mov	r0, r4
 8014924:	f001 f892 	bl	8015a4c <__lshift>
 8014928:	4606      	mov	r6, r0
 801492a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801492c:	2b00      	cmp	r3, #0
 801492e:	d069      	beq.n	8014a04 <_dtoa_r+0x924>
 8014930:	4631      	mov	r1, r6
 8014932:	4658      	mov	r0, fp
 8014934:	f001 f8f6 	bl	8015b24 <__mcmp>
 8014938:	2800      	cmp	r0, #0
 801493a:	da63      	bge.n	8014a04 <_dtoa_r+0x924>
 801493c:	2300      	movs	r3, #0
 801493e:	4659      	mov	r1, fp
 8014940:	220a      	movs	r2, #10
 8014942:	4620      	mov	r0, r4
 8014944:	f000 fe88 	bl	8015658 <__multadd>
 8014948:	9b08      	ldr	r3, [sp, #32]
 801494a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801494e:	4683      	mov	fp, r0
 8014950:	2b00      	cmp	r3, #0
 8014952:	f000 818f 	beq.w	8014c74 <_dtoa_r+0xb94>
 8014956:	4639      	mov	r1, r7
 8014958:	2300      	movs	r3, #0
 801495a:	220a      	movs	r2, #10
 801495c:	4620      	mov	r0, r4
 801495e:	f000 fe7b 	bl	8015658 <__multadd>
 8014962:	f1b9 0f00 	cmp.w	r9, #0
 8014966:	4607      	mov	r7, r0
 8014968:	f300 808e 	bgt.w	8014a88 <_dtoa_r+0x9a8>
 801496c:	9b05      	ldr	r3, [sp, #20]
 801496e:	2b02      	cmp	r3, #2
 8014970:	dc50      	bgt.n	8014a14 <_dtoa_r+0x934>
 8014972:	e089      	b.n	8014a88 <_dtoa_r+0x9a8>
 8014974:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801497a:	e75d      	b.n	8014838 <_dtoa_r+0x758>
 801497c:	9b01      	ldr	r3, [sp, #4]
 801497e:	1e5e      	subs	r6, r3, #1
 8014980:	9b06      	ldr	r3, [sp, #24]
 8014982:	42b3      	cmp	r3, r6
 8014984:	bfbf      	itttt	lt
 8014986:	9b06      	ldrlt	r3, [sp, #24]
 8014988:	9606      	strlt	r6, [sp, #24]
 801498a:	1af2      	sublt	r2, r6, r3
 801498c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801498e:	bfb6      	itet	lt
 8014990:	189b      	addlt	r3, r3, r2
 8014992:	1b9e      	subge	r6, r3, r6
 8014994:	930d      	strlt	r3, [sp, #52]	; 0x34
 8014996:	9b01      	ldr	r3, [sp, #4]
 8014998:	bfb8      	it	lt
 801499a:	2600      	movlt	r6, #0
 801499c:	2b00      	cmp	r3, #0
 801499e:	bfb5      	itete	lt
 80149a0:	eba8 0503 	sublt.w	r5, r8, r3
 80149a4:	9b01      	ldrge	r3, [sp, #4]
 80149a6:	2300      	movlt	r3, #0
 80149a8:	4645      	movge	r5, r8
 80149aa:	e747      	b.n	801483c <_dtoa_r+0x75c>
 80149ac:	9e06      	ldr	r6, [sp, #24]
 80149ae:	9f08      	ldr	r7, [sp, #32]
 80149b0:	4645      	mov	r5, r8
 80149b2:	e74c      	b.n	801484e <_dtoa_r+0x76e>
 80149b4:	9a06      	ldr	r2, [sp, #24]
 80149b6:	e775      	b.n	80148a4 <_dtoa_r+0x7c4>
 80149b8:	9b05      	ldr	r3, [sp, #20]
 80149ba:	2b01      	cmp	r3, #1
 80149bc:	dc18      	bgt.n	80149f0 <_dtoa_r+0x910>
 80149be:	9b02      	ldr	r3, [sp, #8]
 80149c0:	b9b3      	cbnz	r3, 80149f0 <_dtoa_r+0x910>
 80149c2:	9b03      	ldr	r3, [sp, #12]
 80149c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80149c8:	b9a3      	cbnz	r3, 80149f4 <_dtoa_r+0x914>
 80149ca:	9b03      	ldr	r3, [sp, #12]
 80149cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80149d0:	0d1b      	lsrs	r3, r3, #20
 80149d2:	051b      	lsls	r3, r3, #20
 80149d4:	b12b      	cbz	r3, 80149e2 <_dtoa_r+0x902>
 80149d6:	9b04      	ldr	r3, [sp, #16]
 80149d8:	3301      	adds	r3, #1
 80149da:	9304      	str	r3, [sp, #16]
 80149dc:	f108 0801 	add.w	r8, r8, #1
 80149e0:	2301      	movs	r3, #1
 80149e2:	9306      	str	r3, [sp, #24]
 80149e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	f47f af74 	bne.w	80148d4 <_dtoa_r+0x7f4>
 80149ec:	2001      	movs	r0, #1
 80149ee:	e779      	b.n	80148e4 <_dtoa_r+0x804>
 80149f0:	2300      	movs	r3, #0
 80149f2:	e7f6      	b.n	80149e2 <_dtoa_r+0x902>
 80149f4:	9b02      	ldr	r3, [sp, #8]
 80149f6:	e7f4      	b.n	80149e2 <_dtoa_r+0x902>
 80149f8:	d085      	beq.n	8014906 <_dtoa_r+0x826>
 80149fa:	4618      	mov	r0, r3
 80149fc:	301c      	adds	r0, #28
 80149fe:	e77d      	b.n	80148fc <_dtoa_r+0x81c>
 8014a00:	40240000 	.word	0x40240000
 8014a04:	9b01      	ldr	r3, [sp, #4]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	dc38      	bgt.n	8014a7c <_dtoa_r+0x99c>
 8014a0a:	9b05      	ldr	r3, [sp, #20]
 8014a0c:	2b02      	cmp	r3, #2
 8014a0e:	dd35      	ble.n	8014a7c <_dtoa_r+0x99c>
 8014a10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014a14:	f1b9 0f00 	cmp.w	r9, #0
 8014a18:	d10d      	bne.n	8014a36 <_dtoa_r+0x956>
 8014a1a:	4631      	mov	r1, r6
 8014a1c:	464b      	mov	r3, r9
 8014a1e:	2205      	movs	r2, #5
 8014a20:	4620      	mov	r0, r4
 8014a22:	f000 fe19 	bl	8015658 <__multadd>
 8014a26:	4601      	mov	r1, r0
 8014a28:	4606      	mov	r6, r0
 8014a2a:	4658      	mov	r0, fp
 8014a2c:	f001 f87a 	bl	8015b24 <__mcmp>
 8014a30:	2800      	cmp	r0, #0
 8014a32:	f73f adbd 	bgt.w	80145b0 <_dtoa_r+0x4d0>
 8014a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a38:	9d00      	ldr	r5, [sp, #0]
 8014a3a:	ea6f 0a03 	mvn.w	sl, r3
 8014a3e:	f04f 0800 	mov.w	r8, #0
 8014a42:	4631      	mov	r1, r6
 8014a44:	4620      	mov	r0, r4
 8014a46:	f000 fde5 	bl	8015614 <_Bfree>
 8014a4a:	2f00      	cmp	r7, #0
 8014a4c:	f43f aeb4 	beq.w	80147b8 <_dtoa_r+0x6d8>
 8014a50:	f1b8 0f00 	cmp.w	r8, #0
 8014a54:	d005      	beq.n	8014a62 <_dtoa_r+0x982>
 8014a56:	45b8      	cmp	r8, r7
 8014a58:	d003      	beq.n	8014a62 <_dtoa_r+0x982>
 8014a5a:	4641      	mov	r1, r8
 8014a5c:	4620      	mov	r0, r4
 8014a5e:	f000 fdd9 	bl	8015614 <_Bfree>
 8014a62:	4639      	mov	r1, r7
 8014a64:	4620      	mov	r0, r4
 8014a66:	f000 fdd5 	bl	8015614 <_Bfree>
 8014a6a:	e6a5      	b.n	80147b8 <_dtoa_r+0x6d8>
 8014a6c:	2600      	movs	r6, #0
 8014a6e:	4637      	mov	r7, r6
 8014a70:	e7e1      	b.n	8014a36 <_dtoa_r+0x956>
 8014a72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014a74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014a78:	4637      	mov	r7, r6
 8014a7a:	e599      	b.n	80145b0 <_dtoa_r+0x4d0>
 8014a7c:	9b08      	ldr	r3, [sp, #32]
 8014a7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	f000 80fd 	beq.w	8014c82 <_dtoa_r+0xba2>
 8014a88:	2d00      	cmp	r5, #0
 8014a8a:	dd05      	ble.n	8014a98 <_dtoa_r+0x9b8>
 8014a8c:	4639      	mov	r1, r7
 8014a8e:	462a      	mov	r2, r5
 8014a90:	4620      	mov	r0, r4
 8014a92:	f000 ffdb 	bl	8015a4c <__lshift>
 8014a96:	4607      	mov	r7, r0
 8014a98:	9b06      	ldr	r3, [sp, #24]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d05c      	beq.n	8014b58 <_dtoa_r+0xa78>
 8014a9e:	6879      	ldr	r1, [r7, #4]
 8014aa0:	4620      	mov	r0, r4
 8014aa2:	f000 fd77 	bl	8015594 <_Balloc>
 8014aa6:	4605      	mov	r5, r0
 8014aa8:	b928      	cbnz	r0, 8014ab6 <_dtoa_r+0x9d6>
 8014aaa:	4b80      	ldr	r3, [pc, #512]	; (8014cac <_dtoa_r+0xbcc>)
 8014aac:	4602      	mov	r2, r0
 8014aae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014ab2:	f7ff bb2e 	b.w	8014112 <_dtoa_r+0x32>
 8014ab6:	693a      	ldr	r2, [r7, #16]
 8014ab8:	3202      	adds	r2, #2
 8014aba:	0092      	lsls	r2, r2, #2
 8014abc:	f107 010c 	add.w	r1, r7, #12
 8014ac0:	300c      	adds	r0, #12
 8014ac2:	f7fd fb60 	bl	8012186 <memcpy>
 8014ac6:	2201      	movs	r2, #1
 8014ac8:	4629      	mov	r1, r5
 8014aca:	4620      	mov	r0, r4
 8014acc:	f000 ffbe 	bl	8015a4c <__lshift>
 8014ad0:	9b00      	ldr	r3, [sp, #0]
 8014ad2:	3301      	adds	r3, #1
 8014ad4:	9301      	str	r3, [sp, #4]
 8014ad6:	9b00      	ldr	r3, [sp, #0]
 8014ad8:	444b      	add	r3, r9
 8014ada:	9307      	str	r3, [sp, #28]
 8014adc:	9b02      	ldr	r3, [sp, #8]
 8014ade:	f003 0301 	and.w	r3, r3, #1
 8014ae2:	46b8      	mov	r8, r7
 8014ae4:	9306      	str	r3, [sp, #24]
 8014ae6:	4607      	mov	r7, r0
 8014ae8:	9b01      	ldr	r3, [sp, #4]
 8014aea:	4631      	mov	r1, r6
 8014aec:	3b01      	subs	r3, #1
 8014aee:	4658      	mov	r0, fp
 8014af0:	9302      	str	r3, [sp, #8]
 8014af2:	f7ff fa67 	bl	8013fc4 <quorem>
 8014af6:	4603      	mov	r3, r0
 8014af8:	3330      	adds	r3, #48	; 0x30
 8014afa:	9004      	str	r0, [sp, #16]
 8014afc:	4641      	mov	r1, r8
 8014afe:	4658      	mov	r0, fp
 8014b00:	9308      	str	r3, [sp, #32]
 8014b02:	f001 f80f 	bl	8015b24 <__mcmp>
 8014b06:	463a      	mov	r2, r7
 8014b08:	4681      	mov	r9, r0
 8014b0a:	4631      	mov	r1, r6
 8014b0c:	4620      	mov	r0, r4
 8014b0e:	f001 f825 	bl	8015b5c <__mdiff>
 8014b12:	68c2      	ldr	r2, [r0, #12]
 8014b14:	9b08      	ldr	r3, [sp, #32]
 8014b16:	4605      	mov	r5, r0
 8014b18:	bb02      	cbnz	r2, 8014b5c <_dtoa_r+0xa7c>
 8014b1a:	4601      	mov	r1, r0
 8014b1c:	4658      	mov	r0, fp
 8014b1e:	f001 f801 	bl	8015b24 <__mcmp>
 8014b22:	9b08      	ldr	r3, [sp, #32]
 8014b24:	4602      	mov	r2, r0
 8014b26:	4629      	mov	r1, r5
 8014b28:	4620      	mov	r0, r4
 8014b2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8014b2e:	f000 fd71 	bl	8015614 <_Bfree>
 8014b32:	9b05      	ldr	r3, [sp, #20]
 8014b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b36:	9d01      	ldr	r5, [sp, #4]
 8014b38:	ea43 0102 	orr.w	r1, r3, r2
 8014b3c:	9b06      	ldr	r3, [sp, #24]
 8014b3e:	430b      	orrs	r3, r1
 8014b40:	9b08      	ldr	r3, [sp, #32]
 8014b42:	d10d      	bne.n	8014b60 <_dtoa_r+0xa80>
 8014b44:	2b39      	cmp	r3, #57	; 0x39
 8014b46:	d029      	beq.n	8014b9c <_dtoa_r+0xabc>
 8014b48:	f1b9 0f00 	cmp.w	r9, #0
 8014b4c:	dd01      	ble.n	8014b52 <_dtoa_r+0xa72>
 8014b4e:	9b04      	ldr	r3, [sp, #16]
 8014b50:	3331      	adds	r3, #49	; 0x31
 8014b52:	9a02      	ldr	r2, [sp, #8]
 8014b54:	7013      	strb	r3, [r2, #0]
 8014b56:	e774      	b.n	8014a42 <_dtoa_r+0x962>
 8014b58:	4638      	mov	r0, r7
 8014b5a:	e7b9      	b.n	8014ad0 <_dtoa_r+0x9f0>
 8014b5c:	2201      	movs	r2, #1
 8014b5e:	e7e2      	b.n	8014b26 <_dtoa_r+0xa46>
 8014b60:	f1b9 0f00 	cmp.w	r9, #0
 8014b64:	db06      	blt.n	8014b74 <_dtoa_r+0xa94>
 8014b66:	9905      	ldr	r1, [sp, #20]
 8014b68:	ea41 0909 	orr.w	r9, r1, r9
 8014b6c:	9906      	ldr	r1, [sp, #24]
 8014b6e:	ea59 0101 	orrs.w	r1, r9, r1
 8014b72:	d120      	bne.n	8014bb6 <_dtoa_r+0xad6>
 8014b74:	2a00      	cmp	r2, #0
 8014b76:	ddec      	ble.n	8014b52 <_dtoa_r+0xa72>
 8014b78:	4659      	mov	r1, fp
 8014b7a:	2201      	movs	r2, #1
 8014b7c:	4620      	mov	r0, r4
 8014b7e:	9301      	str	r3, [sp, #4]
 8014b80:	f000 ff64 	bl	8015a4c <__lshift>
 8014b84:	4631      	mov	r1, r6
 8014b86:	4683      	mov	fp, r0
 8014b88:	f000 ffcc 	bl	8015b24 <__mcmp>
 8014b8c:	2800      	cmp	r0, #0
 8014b8e:	9b01      	ldr	r3, [sp, #4]
 8014b90:	dc02      	bgt.n	8014b98 <_dtoa_r+0xab8>
 8014b92:	d1de      	bne.n	8014b52 <_dtoa_r+0xa72>
 8014b94:	07da      	lsls	r2, r3, #31
 8014b96:	d5dc      	bpl.n	8014b52 <_dtoa_r+0xa72>
 8014b98:	2b39      	cmp	r3, #57	; 0x39
 8014b9a:	d1d8      	bne.n	8014b4e <_dtoa_r+0xa6e>
 8014b9c:	9a02      	ldr	r2, [sp, #8]
 8014b9e:	2339      	movs	r3, #57	; 0x39
 8014ba0:	7013      	strb	r3, [r2, #0]
 8014ba2:	462b      	mov	r3, r5
 8014ba4:	461d      	mov	r5, r3
 8014ba6:	3b01      	subs	r3, #1
 8014ba8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014bac:	2a39      	cmp	r2, #57	; 0x39
 8014bae:	d050      	beq.n	8014c52 <_dtoa_r+0xb72>
 8014bb0:	3201      	adds	r2, #1
 8014bb2:	701a      	strb	r2, [r3, #0]
 8014bb4:	e745      	b.n	8014a42 <_dtoa_r+0x962>
 8014bb6:	2a00      	cmp	r2, #0
 8014bb8:	dd03      	ble.n	8014bc2 <_dtoa_r+0xae2>
 8014bba:	2b39      	cmp	r3, #57	; 0x39
 8014bbc:	d0ee      	beq.n	8014b9c <_dtoa_r+0xabc>
 8014bbe:	3301      	adds	r3, #1
 8014bc0:	e7c7      	b.n	8014b52 <_dtoa_r+0xa72>
 8014bc2:	9a01      	ldr	r2, [sp, #4]
 8014bc4:	9907      	ldr	r1, [sp, #28]
 8014bc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014bca:	428a      	cmp	r2, r1
 8014bcc:	d02a      	beq.n	8014c24 <_dtoa_r+0xb44>
 8014bce:	4659      	mov	r1, fp
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	220a      	movs	r2, #10
 8014bd4:	4620      	mov	r0, r4
 8014bd6:	f000 fd3f 	bl	8015658 <__multadd>
 8014bda:	45b8      	cmp	r8, r7
 8014bdc:	4683      	mov	fp, r0
 8014bde:	f04f 0300 	mov.w	r3, #0
 8014be2:	f04f 020a 	mov.w	r2, #10
 8014be6:	4641      	mov	r1, r8
 8014be8:	4620      	mov	r0, r4
 8014bea:	d107      	bne.n	8014bfc <_dtoa_r+0xb1c>
 8014bec:	f000 fd34 	bl	8015658 <__multadd>
 8014bf0:	4680      	mov	r8, r0
 8014bf2:	4607      	mov	r7, r0
 8014bf4:	9b01      	ldr	r3, [sp, #4]
 8014bf6:	3301      	adds	r3, #1
 8014bf8:	9301      	str	r3, [sp, #4]
 8014bfa:	e775      	b.n	8014ae8 <_dtoa_r+0xa08>
 8014bfc:	f000 fd2c 	bl	8015658 <__multadd>
 8014c00:	4639      	mov	r1, r7
 8014c02:	4680      	mov	r8, r0
 8014c04:	2300      	movs	r3, #0
 8014c06:	220a      	movs	r2, #10
 8014c08:	4620      	mov	r0, r4
 8014c0a:	f000 fd25 	bl	8015658 <__multadd>
 8014c0e:	4607      	mov	r7, r0
 8014c10:	e7f0      	b.n	8014bf4 <_dtoa_r+0xb14>
 8014c12:	f1b9 0f00 	cmp.w	r9, #0
 8014c16:	9a00      	ldr	r2, [sp, #0]
 8014c18:	bfcc      	ite	gt
 8014c1a:	464d      	movgt	r5, r9
 8014c1c:	2501      	movle	r5, #1
 8014c1e:	4415      	add	r5, r2
 8014c20:	f04f 0800 	mov.w	r8, #0
 8014c24:	4659      	mov	r1, fp
 8014c26:	2201      	movs	r2, #1
 8014c28:	4620      	mov	r0, r4
 8014c2a:	9301      	str	r3, [sp, #4]
 8014c2c:	f000 ff0e 	bl	8015a4c <__lshift>
 8014c30:	4631      	mov	r1, r6
 8014c32:	4683      	mov	fp, r0
 8014c34:	f000 ff76 	bl	8015b24 <__mcmp>
 8014c38:	2800      	cmp	r0, #0
 8014c3a:	dcb2      	bgt.n	8014ba2 <_dtoa_r+0xac2>
 8014c3c:	d102      	bne.n	8014c44 <_dtoa_r+0xb64>
 8014c3e:	9b01      	ldr	r3, [sp, #4]
 8014c40:	07db      	lsls	r3, r3, #31
 8014c42:	d4ae      	bmi.n	8014ba2 <_dtoa_r+0xac2>
 8014c44:	462b      	mov	r3, r5
 8014c46:	461d      	mov	r5, r3
 8014c48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014c4c:	2a30      	cmp	r2, #48	; 0x30
 8014c4e:	d0fa      	beq.n	8014c46 <_dtoa_r+0xb66>
 8014c50:	e6f7      	b.n	8014a42 <_dtoa_r+0x962>
 8014c52:	9a00      	ldr	r2, [sp, #0]
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d1a5      	bne.n	8014ba4 <_dtoa_r+0xac4>
 8014c58:	f10a 0a01 	add.w	sl, sl, #1
 8014c5c:	2331      	movs	r3, #49	; 0x31
 8014c5e:	e779      	b.n	8014b54 <_dtoa_r+0xa74>
 8014c60:	4b13      	ldr	r3, [pc, #76]	; (8014cb0 <_dtoa_r+0xbd0>)
 8014c62:	f7ff baaf 	b.w	80141c4 <_dtoa_r+0xe4>
 8014c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	f47f aa86 	bne.w	801417a <_dtoa_r+0x9a>
 8014c6e:	4b11      	ldr	r3, [pc, #68]	; (8014cb4 <_dtoa_r+0xbd4>)
 8014c70:	f7ff baa8 	b.w	80141c4 <_dtoa_r+0xe4>
 8014c74:	f1b9 0f00 	cmp.w	r9, #0
 8014c78:	dc03      	bgt.n	8014c82 <_dtoa_r+0xba2>
 8014c7a:	9b05      	ldr	r3, [sp, #20]
 8014c7c:	2b02      	cmp	r3, #2
 8014c7e:	f73f aec9 	bgt.w	8014a14 <_dtoa_r+0x934>
 8014c82:	9d00      	ldr	r5, [sp, #0]
 8014c84:	4631      	mov	r1, r6
 8014c86:	4658      	mov	r0, fp
 8014c88:	f7ff f99c 	bl	8013fc4 <quorem>
 8014c8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014c90:	f805 3b01 	strb.w	r3, [r5], #1
 8014c94:	9a00      	ldr	r2, [sp, #0]
 8014c96:	1aaa      	subs	r2, r5, r2
 8014c98:	4591      	cmp	r9, r2
 8014c9a:	ddba      	ble.n	8014c12 <_dtoa_r+0xb32>
 8014c9c:	4659      	mov	r1, fp
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	220a      	movs	r2, #10
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	f000 fcd8 	bl	8015658 <__multadd>
 8014ca8:	4683      	mov	fp, r0
 8014caa:	e7eb      	b.n	8014c84 <_dtoa_r+0xba4>
 8014cac:	08017803 	.word	0x08017803
 8014cb0:	08017a09 	.word	0x08017a09
 8014cb4:	08017780 	.word	0x08017780

08014cb8 <__sflush_r>:
 8014cb8:	898a      	ldrh	r2, [r1, #12]
 8014cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cbe:	4605      	mov	r5, r0
 8014cc0:	0710      	lsls	r0, r2, #28
 8014cc2:	460c      	mov	r4, r1
 8014cc4:	d458      	bmi.n	8014d78 <__sflush_r+0xc0>
 8014cc6:	684b      	ldr	r3, [r1, #4]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	dc05      	bgt.n	8014cd8 <__sflush_r+0x20>
 8014ccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	dc02      	bgt.n	8014cd8 <__sflush_r+0x20>
 8014cd2:	2000      	movs	r0, #0
 8014cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014cda:	2e00      	cmp	r6, #0
 8014cdc:	d0f9      	beq.n	8014cd2 <__sflush_r+0x1a>
 8014cde:	2300      	movs	r3, #0
 8014ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014ce4:	682f      	ldr	r7, [r5, #0]
 8014ce6:	602b      	str	r3, [r5, #0]
 8014ce8:	d032      	beq.n	8014d50 <__sflush_r+0x98>
 8014cea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014cec:	89a3      	ldrh	r3, [r4, #12]
 8014cee:	075a      	lsls	r2, r3, #29
 8014cf0:	d505      	bpl.n	8014cfe <__sflush_r+0x46>
 8014cf2:	6863      	ldr	r3, [r4, #4]
 8014cf4:	1ac0      	subs	r0, r0, r3
 8014cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014cf8:	b10b      	cbz	r3, 8014cfe <__sflush_r+0x46>
 8014cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014cfc:	1ac0      	subs	r0, r0, r3
 8014cfe:	2300      	movs	r3, #0
 8014d00:	4602      	mov	r2, r0
 8014d02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014d04:	6a21      	ldr	r1, [r4, #32]
 8014d06:	4628      	mov	r0, r5
 8014d08:	47b0      	blx	r6
 8014d0a:	1c43      	adds	r3, r0, #1
 8014d0c:	89a3      	ldrh	r3, [r4, #12]
 8014d0e:	d106      	bne.n	8014d1e <__sflush_r+0x66>
 8014d10:	6829      	ldr	r1, [r5, #0]
 8014d12:	291d      	cmp	r1, #29
 8014d14:	d82c      	bhi.n	8014d70 <__sflush_r+0xb8>
 8014d16:	4a2a      	ldr	r2, [pc, #168]	; (8014dc0 <__sflush_r+0x108>)
 8014d18:	40ca      	lsrs	r2, r1
 8014d1a:	07d6      	lsls	r6, r2, #31
 8014d1c:	d528      	bpl.n	8014d70 <__sflush_r+0xb8>
 8014d1e:	2200      	movs	r2, #0
 8014d20:	6062      	str	r2, [r4, #4]
 8014d22:	04d9      	lsls	r1, r3, #19
 8014d24:	6922      	ldr	r2, [r4, #16]
 8014d26:	6022      	str	r2, [r4, #0]
 8014d28:	d504      	bpl.n	8014d34 <__sflush_r+0x7c>
 8014d2a:	1c42      	adds	r2, r0, #1
 8014d2c:	d101      	bne.n	8014d32 <__sflush_r+0x7a>
 8014d2e:	682b      	ldr	r3, [r5, #0]
 8014d30:	b903      	cbnz	r3, 8014d34 <__sflush_r+0x7c>
 8014d32:	6560      	str	r0, [r4, #84]	; 0x54
 8014d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d36:	602f      	str	r7, [r5, #0]
 8014d38:	2900      	cmp	r1, #0
 8014d3a:	d0ca      	beq.n	8014cd2 <__sflush_r+0x1a>
 8014d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d40:	4299      	cmp	r1, r3
 8014d42:	d002      	beq.n	8014d4a <__sflush_r+0x92>
 8014d44:	4628      	mov	r0, r5
 8014d46:	f001 f8ef 	bl	8015f28 <_free_r>
 8014d4a:	2000      	movs	r0, #0
 8014d4c:	6360      	str	r0, [r4, #52]	; 0x34
 8014d4e:	e7c1      	b.n	8014cd4 <__sflush_r+0x1c>
 8014d50:	6a21      	ldr	r1, [r4, #32]
 8014d52:	2301      	movs	r3, #1
 8014d54:	4628      	mov	r0, r5
 8014d56:	47b0      	blx	r6
 8014d58:	1c41      	adds	r1, r0, #1
 8014d5a:	d1c7      	bne.n	8014cec <__sflush_r+0x34>
 8014d5c:	682b      	ldr	r3, [r5, #0]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d0c4      	beq.n	8014cec <__sflush_r+0x34>
 8014d62:	2b1d      	cmp	r3, #29
 8014d64:	d001      	beq.n	8014d6a <__sflush_r+0xb2>
 8014d66:	2b16      	cmp	r3, #22
 8014d68:	d101      	bne.n	8014d6e <__sflush_r+0xb6>
 8014d6a:	602f      	str	r7, [r5, #0]
 8014d6c:	e7b1      	b.n	8014cd2 <__sflush_r+0x1a>
 8014d6e:	89a3      	ldrh	r3, [r4, #12]
 8014d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d74:	81a3      	strh	r3, [r4, #12]
 8014d76:	e7ad      	b.n	8014cd4 <__sflush_r+0x1c>
 8014d78:	690f      	ldr	r7, [r1, #16]
 8014d7a:	2f00      	cmp	r7, #0
 8014d7c:	d0a9      	beq.n	8014cd2 <__sflush_r+0x1a>
 8014d7e:	0793      	lsls	r3, r2, #30
 8014d80:	680e      	ldr	r6, [r1, #0]
 8014d82:	bf08      	it	eq
 8014d84:	694b      	ldreq	r3, [r1, #20]
 8014d86:	600f      	str	r7, [r1, #0]
 8014d88:	bf18      	it	ne
 8014d8a:	2300      	movne	r3, #0
 8014d8c:	eba6 0807 	sub.w	r8, r6, r7
 8014d90:	608b      	str	r3, [r1, #8]
 8014d92:	f1b8 0f00 	cmp.w	r8, #0
 8014d96:	dd9c      	ble.n	8014cd2 <__sflush_r+0x1a>
 8014d98:	6a21      	ldr	r1, [r4, #32]
 8014d9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014d9c:	4643      	mov	r3, r8
 8014d9e:	463a      	mov	r2, r7
 8014da0:	4628      	mov	r0, r5
 8014da2:	47b0      	blx	r6
 8014da4:	2800      	cmp	r0, #0
 8014da6:	dc06      	bgt.n	8014db6 <__sflush_r+0xfe>
 8014da8:	89a3      	ldrh	r3, [r4, #12]
 8014daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014dae:	81a3      	strh	r3, [r4, #12]
 8014db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014db4:	e78e      	b.n	8014cd4 <__sflush_r+0x1c>
 8014db6:	4407      	add	r7, r0
 8014db8:	eba8 0800 	sub.w	r8, r8, r0
 8014dbc:	e7e9      	b.n	8014d92 <__sflush_r+0xda>
 8014dbe:	bf00      	nop
 8014dc0:	20400001 	.word	0x20400001

08014dc4 <_fflush_r>:
 8014dc4:	b538      	push	{r3, r4, r5, lr}
 8014dc6:	690b      	ldr	r3, [r1, #16]
 8014dc8:	4605      	mov	r5, r0
 8014dca:	460c      	mov	r4, r1
 8014dcc:	b913      	cbnz	r3, 8014dd4 <_fflush_r+0x10>
 8014dce:	2500      	movs	r5, #0
 8014dd0:	4628      	mov	r0, r5
 8014dd2:	bd38      	pop	{r3, r4, r5, pc}
 8014dd4:	b118      	cbz	r0, 8014dde <_fflush_r+0x1a>
 8014dd6:	6983      	ldr	r3, [r0, #24]
 8014dd8:	b90b      	cbnz	r3, 8014dde <_fflush_r+0x1a>
 8014dda:	f7fd f90f 	bl	8011ffc <__sinit>
 8014dde:	4b14      	ldr	r3, [pc, #80]	; (8014e30 <_fflush_r+0x6c>)
 8014de0:	429c      	cmp	r4, r3
 8014de2:	d11b      	bne.n	8014e1c <_fflush_r+0x58>
 8014de4:	686c      	ldr	r4, [r5, #4]
 8014de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d0ef      	beq.n	8014dce <_fflush_r+0xa>
 8014dee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014df0:	07d0      	lsls	r0, r2, #31
 8014df2:	d404      	bmi.n	8014dfe <_fflush_r+0x3a>
 8014df4:	0599      	lsls	r1, r3, #22
 8014df6:	d402      	bmi.n	8014dfe <_fflush_r+0x3a>
 8014df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014dfa:	f7fd f9c2 	bl	8012182 <__retarget_lock_acquire_recursive>
 8014dfe:	4628      	mov	r0, r5
 8014e00:	4621      	mov	r1, r4
 8014e02:	f7ff ff59 	bl	8014cb8 <__sflush_r>
 8014e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014e08:	07da      	lsls	r2, r3, #31
 8014e0a:	4605      	mov	r5, r0
 8014e0c:	d4e0      	bmi.n	8014dd0 <_fflush_r+0xc>
 8014e0e:	89a3      	ldrh	r3, [r4, #12]
 8014e10:	059b      	lsls	r3, r3, #22
 8014e12:	d4dd      	bmi.n	8014dd0 <_fflush_r+0xc>
 8014e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014e16:	f7fd f9b5 	bl	8012184 <__retarget_lock_release_recursive>
 8014e1a:	e7d9      	b.n	8014dd0 <_fflush_r+0xc>
 8014e1c:	4b05      	ldr	r3, [pc, #20]	; (8014e34 <_fflush_r+0x70>)
 8014e1e:	429c      	cmp	r4, r3
 8014e20:	d101      	bne.n	8014e26 <_fflush_r+0x62>
 8014e22:	68ac      	ldr	r4, [r5, #8]
 8014e24:	e7df      	b.n	8014de6 <_fflush_r+0x22>
 8014e26:	4b04      	ldr	r3, [pc, #16]	; (8014e38 <_fflush_r+0x74>)
 8014e28:	429c      	cmp	r4, r3
 8014e2a:	bf08      	it	eq
 8014e2c:	68ec      	ldreq	r4, [r5, #12]
 8014e2e:	e7da      	b.n	8014de6 <_fflush_r+0x22>
 8014e30:	080176b0 	.word	0x080176b0
 8014e34:	080176d0 	.word	0x080176d0
 8014e38:	08017690 	.word	0x08017690

08014e3c <rshift>:
 8014e3c:	6903      	ldr	r3, [r0, #16]
 8014e3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014e42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e46:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014e4a:	f100 0414 	add.w	r4, r0, #20
 8014e4e:	dd45      	ble.n	8014edc <rshift+0xa0>
 8014e50:	f011 011f 	ands.w	r1, r1, #31
 8014e54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014e58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014e5c:	d10c      	bne.n	8014e78 <rshift+0x3c>
 8014e5e:	f100 0710 	add.w	r7, r0, #16
 8014e62:	4629      	mov	r1, r5
 8014e64:	42b1      	cmp	r1, r6
 8014e66:	d334      	bcc.n	8014ed2 <rshift+0x96>
 8014e68:	1a9b      	subs	r3, r3, r2
 8014e6a:	009b      	lsls	r3, r3, #2
 8014e6c:	1eea      	subs	r2, r5, #3
 8014e6e:	4296      	cmp	r6, r2
 8014e70:	bf38      	it	cc
 8014e72:	2300      	movcc	r3, #0
 8014e74:	4423      	add	r3, r4
 8014e76:	e015      	b.n	8014ea4 <rshift+0x68>
 8014e78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014e7c:	f1c1 0820 	rsb	r8, r1, #32
 8014e80:	40cf      	lsrs	r7, r1
 8014e82:	f105 0e04 	add.w	lr, r5, #4
 8014e86:	46a1      	mov	r9, r4
 8014e88:	4576      	cmp	r6, lr
 8014e8a:	46f4      	mov	ip, lr
 8014e8c:	d815      	bhi.n	8014eba <rshift+0x7e>
 8014e8e:	1a9b      	subs	r3, r3, r2
 8014e90:	009a      	lsls	r2, r3, #2
 8014e92:	3a04      	subs	r2, #4
 8014e94:	3501      	adds	r5, #1
 8014e96:	42ae      	cmp	r6, r5
 8014e98:	bf38      	it	cc
 8014e9a:	2200      	movcc	r2, #0
 8014e9c:	18a3      	adds	r3, r4, r2
 8014e9e:	50a7      	str	r7, [r4, r2]
 8014ea0:	b107      	cbz	r7, 8014ea4 <rshift+0x68>
 8014ea2:	3304      	adds	r3, #4
 8014ea4:	1b1a      	subs	r2, r3, r4
 8014ea6:	42a3      	cmp	r3, r4
 8014ea8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014eac:	bf08      	it	eq
 8014eae:	2300      	moveq	r3, #0
 8014eb0:	6102      	str	r2, [r0, #16]
 8014eb2:	bf08      	it	eq
 8014eb4:	6143      	streq	r3, [r0, #20]
 8014eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014eba:	f8dc c000 	ldr.w	ip, [ip]
 8014ebe:	fa0c fc08 	lsl.w	ip, ip, r8
 8014ec2:	ea4c 0707 	orr.w	r7, ip, r7
 8014ec6:	f849 7b04 	str.w	r7, [r9], #4
 8014eca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014ece:	40cf      	lsrs	r7, r1
 8014ed0:	e7da      	b.n	8014e88 <rshift+0x4c>
 8014ed2:	f851 cb04 	ldr.w	ip, [r1], #4
 8014ed6:	f847 cf04 	str.w	ip, [r7, #4]!
 8014eda:	e7c3      	b.n	8014e64 <rshift+0x28>
 8014edc:	4623      	mov	r3, r4
 8014ede:	e7e1      	b.n	8014ea4 <rshift+0x68>

08014ee0 <__hexdig_fun>:
 8014ee0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014ee4:	2b09      	cmp	r3, #9
 8014ee6:	d802      	bhi.n	8014eee <__hexdig_fun+0xe>
 8014ee8:	3820      	subs	r0, #32
 8014eea:	b2c0      	uxtb	r0, r0
 8014eec:	4770      	bx	lr
 8014eee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014ef2:	2b05      	cmp	r3, #5
 8014ef4:	d801      	bhi.n	8014efa <__hexdig_fun+0x1a>
 8014ef6:	3847      	subs	r0, #71	; 0x47
 8014ef8:	e7f7      	b.n	8014eea <__hexdig_fun+0xa>
 8014efa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014efe:	2b05      	cmp	r3, #5
 8014f00:	d801      	bhi.n	8014f06 <__hexdig_fun+0x26>
 8014f02:	3827      	subs	r0, #39	; 0x27
 8014f04:	e7f1      	b.n	8014eea <__hexdig_fun+0xa>
 8014f06:	2000      	movs	r0, #0
 8014f08:	4770      	bx	lr
	...

08014f0c <__gethex>:
 8014f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f10:	ed2d 8b02 	vpush	{d8}
 8014f14:	b089      	sub	sp, #36	; 0x24
 8014f16:	ee08 0a10 	vmov	s16, r0
 8014f1a:	9304      	str	r3, [sp, #16]
 8014f1c:	4bbc      	ldr	r3, [pc, #752]	; (8015210 <__gethex+0x304>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	9301      	str	r3, [sp, #4]
 8014f22:	4618      	mov	r0, r3
 8014f24:	468b      	mov	fp, r1
 8014f26:	4690      	mov	r8, r2
 8014f28:	f7eb f962 	bl	80001f0 <strlen>
 8014f2c:	9b01      	ldr	r3, [sp, #4]
 8014f2e:	f8db 2000 	ldr.w	r2, [fp]
 8014f32:	4403      	add	r3, r0
 8014f34:	4682      	mov	sl, r0
 8014f36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014f3a:	9305      	str	r3, [sp, #20]
 8014f3c:	1c93      	adds	r3, r2, #2
 8014f3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014f42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014f46:	32fe      	adds	r2, #254	; 0xfe
 8014f48:	18d1      	adds	r1, r2, r3
 8014f4a:	461f      	mov	r7, r3
 8014f4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014f50:	9100      	str	r1, [sp, #0]
 8014f52:	2830      	cmp	r0, #48	; 0x30
 8014f54:	d0f8      	beq.n	8014f48 <__gethex+0x3c>
 8014f56:	f7ff ffc3 	bl	8014ee0 <__hexdig_fun>
 8014f5a:	4604      	mov	r4, r0
 8014f5c:	2800      	cmp	r0, #0
 8014f5e:	d13a      	bne.n	8014fd6 <__gethex+0xca>
 8014f60:	9901      	ldr	r1, [sp, #4]
 8014f62:	4652      	mov	r2, sl
 8014f64:	4638      	mov	r0, r7
 8014f66:	f7fe f90a 	bl	801317e <strncmp>
 8014f6a:	4605      	mov	r5, r0
 8014f6c:	2800      	cmp	r0, #0
 8014f6e:	d168      	bne.n	8015042 <__gethex+0x136>
 8014f70:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014f74:	eb07 060a 	add.w	r6, r7, sl
 8014f78:	f7ff ffb2 	bl	8014ee0 <__hexdig_fun>
 8014f7c:	2800      	cmp	r0, #0
 8014f7e:	d062      	beq.n	8015046 <__gethex+0x13a>
 8014f80:	4633      	mov	r3, r6
 8014f82:	7818      	ldrb	r0, [r3, #0]
 8014f84:	2830      	cmp	r0, #48	; 0x30
 8014f86:	461f      	mov	r7, r3
 8014f88:	f103 0301 	add.w	r3, r3, #1
 8014f8c:	d0f9      	beq.n	8014f82 <__gethex+0x76>
 8014f8e:	f7ff ffa7 	bl	8014ee0 <__hexdig_fun>
 8014f92:	2301      	movs	r3, #1
 8014f94:	fab0 f480 	clz	r4, r0
 8014f98:	0964      	lsrs	r4, r4, #5
 8014f9a:	4635      	mov	r5, r6
 8014f9c:	9300      	str	r3, [sp, #0]
 8014f9e:	463a      	mov	r2, r7
 8014fa0:	4616      	mov	r6, r2
 8014fa2:	3201      	adds	r2, #1
 8014fa4:	7830      	ldrb	r0, [r6, #0]
 8014fa6:	f7ff ff9b 	bl	8014ee0 <__hexdig_fun>
 8014faa:	2800      	cmp	r0, #0
 8014fac:	d1f8      	bne.n	8014fa0 <__gethex+0x94>
 8014fae:	9901      	ldr	r1, [sp, #4]
 8014fb0:	4652      	mov	r2, sl
 8014fb2:	4630      	mov	r0, r6
 8014fb4:	f7fe f8e3 	bl	801317e <strncmp>
 8014fb8:	b980      	cbnz	r0, 8014fdc <__gethex+0xd0>
 8014fba:	b94d      	cbnz	r5, 8014fd0 <__gethex+0xc4>
 8014fbc:	eb06 050a 	add.w	r5, r6, sl
 8014fc0:	462a      	mov	r2, r5
 8014fc2:	4616      	mov	r6, r2
 8014fc4:	3201      	adds	r2, #1
 8014fc6:	7830      	ldrb	r0, [r6, #0]
 8014fc8:	f7ff ff8a 	bl	8014ee0 <__hexdig_fun>
 8014fcc:	2800      	cmp	r0, #0
 8014fce:	d1f8      	bne.n	8014fc2 <__gethex+0xb6>
 8014fd0:	1bad      	subs	r5, r5, r6
 8014fd2:	00ad      	lsls	r5, r5, #2
 8014fd4:	e004      	b.n	8014fe0 <__gethex+0xd4>
 8014fd6:	2400      	movs	r4, #0
 8014fd8:	4625      	mov	r5, r4
 8014fda:	e7e0      	b.n	8014f9e <__gethex+0x92>
 8014fdc:	2d00      	cmp	r5, #0
 8014fde:	d1f7      	bne.n	8014fd0 <__gethex+0xc4>
 8014fe0:	7833      	ldrb	r3, [r6, #0]
 8014fe2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014fe6:	2b50      	cmp	r3, #80	; 0x50
 8014fe8:	d13b      	bne.n	8015062 <__gethex+0x156>
 8014fea:	7873      	ldrb	r3, [r6, #1]
 8014fec:	2b2b      	cmp	r3, #43	; 0x2b
 8014fee:	d02c      	beq.n	801504a <__gethex+0x13e>
 8014ff0:	2b2d      	cmp	r3, #45	; 0x2d
 8014ff2:	d02e      	beq.n	8015052 <__gethex+0x146>
 8014ff4:	1c71      	adds	r1, r6, #1
 8014ff6:	f04f 0900 	mov.w	r9, #0
 8014ffa:	7808      	ldrb	r0, [r1, #0]
 8014ffc:	f7ff ff70 	bl	8014ee0 <__hexdig_fun>
 8015000:	1e43      	subs	r3, r0, #1
 8015002:	b2db      	uxtb	r3, r3
 8015004:	2b18      	cmp	r3, #24
 8015006:	d82c      	bhi.n	8015062 <__gethex+0x156>
 8015008:	f1a0 0210 	sub.w	r2, r0, #16
 801500c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015010:	f7ff ff66 	bl	8014ee0 <__hexdig_fun>
 8015014:	1e43      	subs	r3, r0, #1
 8015016:	b2db      	uxtb	r3, r3
 8015018:	2b18      	cmp	r3, #24
 801501a:	d91d      	bls.n	8015058 <__gethex+0x14c>
 801501c:	f1b9 0f00 	cmp.w	r9, #0
 8015020:	d000      	beq.n	8015024 <__gethex+0x118>
 8015022:	4252      	negs	r2, r2
 8015024:	4415      	add	r5, r2
 8015026:	f8cb 1000 	str.w	r1, [fp]
 801502a:	b1e4      	cbz	r4, 8015066 <__gethex+0x15a>
 801502c:	9b00      	ldr	r3, [sp, #0]
 801502e:	2b00      	cmp	r3, #0
 8015030:	bf14      	ite	ne
 8015032:	2700      	movne	r7, #0
 8015034:	2706      	moveq	r7, #6
 8015036:	4638      	mov	r0, r7
 8015038:	b009      	add	sp, #36	; 0x24
 801503a:	ecbd 8b02 	vpop	{d8}
 801503e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015042:	463e      	mov	r6, r7
 8015044:	4625      	mov	r5, r4
 8015046:	2401      	movs	r4, #1
 8015048:	e7ca      	b.n	8014fe0 <__gethex+0xd4>
 801504a:	f04f 0900 	mov.w	r9, #0
 801504e:	1cb1      	adds	r1, r6, #2
 8015050:	e7d3      	b.n	8014ffa <__gethex+0xee>
 8015052:	f04f 0901 	mov.w	r9, #1
 8015056:	e7fa      	b.n	801504e <__gethex+0x142>
 8015058:	230a      	movs	r3, #10
 801505a:	fb03 0202 	mla	r2, r3, r2, r0
 801505e:	3a10      	subs	r2, #16
 8015060:	e7d4      	b.n	801500c <__gethex+0x100>
 8015062:	4631      	mov	r1, r6
 8015064:	e7df      	b.n	8015026 <__gethex+0x11a>
 8015066:	1bf3      	subs	r3, r6, r7
 8015068:	3b01      	subs	r3, #1
 801506a:	4621      	mov	r1, r4
 801506c:	2b07      	cmp	r3, #7
 801506e:	dc0b      	bgt.n	8015088 <__gethex+0x17c>
 8015070:	ee18 0a10 	vmov	r0, s16
 8015074:	f000 fa8e 	bl	8015594 <_Balloc>
 8015078:	4604      	mov	r4, r0
 801507a:	b940      	cbnz	r0, 801508e <__gethex+0x182>
 801507c:	4b65      	ldr	r3, [pc, #404]	; (8015214 <__gethex+0x308>)
 801507e:	4602      	mov	r2, r0
 8015080:	21de      	movs	r1, #222	; 0xde
 8015082:	4865      	ldr	r0, [pc, #404]	; (8015218 <__gethex+0x30c>)
 8015084:	f001 fd34 	bl	8016af0 <__assert_func>
 8015088:	3101      	adds	r1, #1
 801508a:	105b      	asrs	r3, r3, #1
 801508c:	e7ee      	b.n	801506c <__gethex+0x160>
 801508e:	f100 0914 	add.w	r9, r0, #20
 8015092:	f04f 0b00 	mov.w	fp, #0
 8015096:	f1ca 0301 	rsb	r3, sl, #1
 801509a:	f8cd 9008 	str.w	r9, [sp, #8]
 801509e:	f8cd b000 	str.w	fp, [sp]
 80150a2:	9306      	str	r3, [sp, #24]
 80150a4:	42b7      	cmp	r7, r6
 80150a6:	d340      	bcc.n	801512a <__gethex+0x21e>
 80150a8:	9802      	ldr	r0, [sp, #8]
 80150aa:	9b00      	ldr	r3, [sp, #0]
 80150ac:	f840 3b04 	str.w	r3, [r0], #4
 80150b0:	eba0 0009 	sub.w	r0, r0, r9
 80150b4:	1080      	asrs	r0, r0, #2
 80150b6:	0146      	lsls	r6, r0, #5
 80150b8:	6120      	str	r0, [r4, #16]
 80150ba:	4618      	mov	r0, r3
 80150bc:	f000 fb60 	bl	8015780 <__hi0bits>
 80150c0:	1a30      	subs	r0, r6, r0
 80150c2:	f8d8 6000 	ldr.w	r6, [r8]
 80150c6:	42b0      	cmp	r0, r6
 80150c8:	dd63      	ble.n	8015192 <__gethex+0x286>
 80150ca:	1b87      	subs	r7, r0, r6
 80150cc:	4639      	mov	r1, r7
 80150ce:	4620      	mov	r0, r4
 80150d0:	f000 fefa 	bl	8015ec8 <__any_on>
 80150d4:	4682      	mov	sl, r0
 80150d6:	b1a8      	cbz	r0, 8015104 <__gethex+0x1f8>
 80150d8:	1e7b      	subs	r3, r7, #1
 80150da:	1159      	asrs	r1, r3, #5
 80150dc:	f003 021f 	and.w	r2, r3, #31
 80150e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80150e4:	f04f 0a01 	mov.w	sl, #1
 80150e8:	fa0a f202 	lsl.w	r2, sl, r2
 80150ec:	420a      	tst	r2, r1
 80150ee:	d009      	beq.n	8015104 <__gethex+0x1f8>
 80150f0:	4553      	cmp	r3, sl
 80150f2:	dd05      	ble.n	8015100 <__gethex+0x1f4>
 80150f4:	1eb9      	subs	r1, r7, #2
 80150f6:	4620      	mov	r0, r4
 80150f8:	f000 fee6 	bl	8015ec8 <__any_on>
 80150fc:	2800      	cmp	r0, #0
 80150fe:	d145      	bne.n	801518c <__gethex+0x280>
 8015100:	f04f 0a02 	mov.w	sl, #2
 8015104:	4639      	mov	r1, r7
 8015106:	4620      	mov	r0, r4
 8015108:	f7ff fe98 	bl	8014e3c <rshift>
 801510c:	443d      	add	r5, r7
 801510e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015112:	42ab      	cmp	r3, r5
 8015114:	da4c      	bge.n	80151b0 <__gethex+0x2a4>
 8015116:	ee18 0a10 	vmov	r0, s16
 801511a:	4621      	mov	r1, r4
 801511c:	f000 fa7a 	bl	8015614 <_Bfree>
 8015120:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015122:	2300      	movs	r3, #0
 8015124:	6013      	str	r3, [r2, #0]
 8015126:	27a3      	movs	r7, #163	; 0xa3
 8015128:	e785      	b.n	8015036 <__gethex+0x12a>
 801512a:	1e73      	subs	r3, r6, #1
 801512c:	9a05      	ldr	r2, [sp, #20]
 801512e:	9303      	str	r3, [sp, #12]
 8015130:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015134:	4293      	cmp	r3, r2
 8015136:	d019      	beq.n	801516c <__gethex+0x260>
 8015138:	f1bb 0f20 	cmp.w	fp, #32
 801513c:	d107      	bne.n	801514e <__gethex+0x242>
 801513e:	9b02      	ldr	r3, [sp, #8]
 8015140:	9a00      	ldr	r2, [sp, #0]
 8015142:	f843 2b04 	str.w	r2, [r3], #4
 8015146:	9302      	str	r3, [sp, #8]
 8015148:	2300      	movs	r3, #0
 801514a:	9300      	str	r3, [sp, #0]
 801514c:	469b      	mov	fp, r3
 801514e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015152:	f7ff fec5 	bl	8014ee0 <__hexdig_fun>
 8015156:	9b00      	ldr	r3, [sp, #0]
 8015158:	f000 000f 	and.w	r0, r0, #15
 801515c:	fa00 f00b 	lsl.w	r0, r0, fp
 8015160:	4303      	orrs	r3, r0
 8015162:	9300      	str	r3, [sp, #0]
 8015164:	f10b 0b04 	add.w	fp, fp, #4
 8015168:	9b03      	ldr	r3, [sp, #12]
 801516a:	e00d      	b.n	8015188 <__gethex+0x27c>
 801516c:	9b03      	ldr	r3, [sp, #12]
 801516e:	9a06      	ldr	r2, [sp, #24]
 8015170:	4413      	add	r3, r2
 8015172:	42bb      	cmp	r3, r7
 8015174:	d3e0      	bcc.n	8015138 <__gethex+0x22c>
 8015176:	4618      	mov	r0, r3
 8015178:	9901      	ldr	r1, [sp, #4]
 801517a:	9307      	str	r3, [sp, #28]
 801517c:	4652      	mov	r2, sl
 801517e:	f7fd fffe 	bl	801317e <strncmp>
 8015182:	9b07      	ldr	r3, [sp, #28]
 8015184:	2800      	cmp	r0, #0
 8015186:	d1d7      	bne.n	8015138 <__gethex+0x22c>
 8015188:	461e      	mov	r6, r3
 801518a:	e78b      	b.n	80150a4 <__gethex+0x198>
 801518c:	f04f 0a03 	mov.w	sl, #3
 8015190:	e7b8      	b.n	8015104 <__gethex+0x1f8>
 8015192:	da0a      	bge.n	80151aa <__gethex+0x29e>
 8015194:	1a37      	subs	r7, r6, r0
 8015196:	4621      	mov	r1, r4
 8015198:	ee18 0a10 	vmov	r0, s16
 801519c:	463a      	mov	r2, r7
 801519e:	f000 fc55 	bl	8015a4c <__lshift>
 80151a2:	1bed      	subs	r5, r5, r7
 80151a4:	4604      	mov	r4, r0
 80151a6:	f100 0914 	add.w	r9, r0, #20
 80151aa:	f04f 0a00 	mov.w	sl, #0
 80151ae:	e7ae      	b.n	801510e <__gethex+0x202>
 80151b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80151b4:	42a8      	cmp	r0, r5
 80151b6:	dd72      	ble.n	801529e <__gethex+0x392>
 80151b8:	1b45      	subs	r5, r0, r5
 80151ba:	42ae      	cmp	r6, r5
 80151bc:	dc36      	bgt.n	801522c <__gethex+0x320>
 80151be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80151c2:	2b02      	cmp	r3, #2
 80151c4:	d02a      	beq.n	801521c <__gethex+0x310>
 80151c6:	2b03      	cmp	r3, #3
 80151c8:	d02c      	beq.n	8015224 <__gethex+0x318>
 80151ca:	2b01      	cmp	r3, #1
 80151cc:	d115      	bne.n	80151fa <__gethex+0x2ee>
 80151ce:	42ae      	cmp	r6, r5
 80151d0:	d113      	bne.n	80151fa <__gethex+0x2ee>
 80151d2:	2e01      	cmp	r6, #1
 80151d4:	d10b      	bne.n	80151ee <__gethex+0x2e2>
 80151d6:	9a04      	ldr	r2, [sp, #16]
 80151d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80151dc:	6013      	str	r3, [r2, #0]
 80151de:	2301      	movs	r3, #1
 80151e0:	6123      	str	r3, [r4, #16]
 80151e2:	f8c9 3000 	str.w	r3, [r9]
 80151e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80151e8:	2762      	movs	r7, #98	; 0x62
 80151ea:	601c      	str	r4, [r3, #0]
 80151ec:	e723      	b.n	8015036 <__gethex+0x12a>
 80151ee:	1e71      	subs	r1, r6, #1
 80151f0:	4620      	mov	r0, r4
 80151f2:	f000 fe69 	bl	8015ec8 <__any_on>
 80151f6:	2800      	cmp	r0, #0
 80151f8:	d1ed      	bne.n	80151d6 <__gethex+0x2ca>
 80151fa:	ee18 0a10 	vmov	r0, s16
 80151fe:	4621      	mov	r1, r4
 8015200:	f000 fa08 	bl	8015614 <_Bfree>
 8015204:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015206:	2300      	movs	r3, #0
 8015208:	6013      	str	r3, [r2, #0]
 801520a:	2750      	movs	r7, #80	; 0x50
 801520c:	e713      	b.n	8015036 <__gethex+0x12a>
 801520e:	bf00      	nop
 8015210:	08017880 	.word	0x08017880
 8015214:	08017803 	.word	0x08017803
 8015218:	08017814 	.word	0x08017814
 801521c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801521e:	2b00      	cmp	r3, #0
 8015220:	d1eb      	bne.n	80151fa <__gethex+0x2ee>
 8015222:	e7d8      	b.n	80151d6 <__gethex+0x2ca>
 8015224:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015226:	2b00      	cmp	r3, #0
 8015228:	d1d5      	bne.n	80151d6 <__gethex+0x2ca>
 801522a:	e7e6      	b.n	80151fa <__gethex+0x2ee>
 801522c:	1e6f      	subs	r7, r5, #1
 801522e:	f1ba 0f00 	cmp.w	sl, #0
 8015232:	d131      	bne.n	8015298 <__gethex+0x38c>
 8015234:	b127      	cbz	r7, 8015240 <__gethex+0x334>
 8015236:	4639      	mov	r1, r7
 8015238:	4620      	mov	r0, r4
 801523a:	f000 fe45 	bl	8015ec8 <__any_on>
 801523e:	4682      	mov	sl, r0
 8015240:	117b      	asrs	r3, r7, #5
 8015242:	2101      	movs	r1, #1
 8015244:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015248:	f007 071f 	and.w	r7, r7, #31
 801524c:	fa01 f707 	lsl.w	r7, r1, r7
 8015250:	421f      	tst	r7, r3
 8015252:	4629      	mov	r1, r5
 8015254:	4620      	mov	r0, r4
 8015256:	bf18      	it	ne
 8015258:	f04a 0a02 	orrne.w	sl, sl, #2
 801525c:	1b76      	subs	r6, r6, r5
 801525e:	f7ff fded 	bl	8014e3c <rshift>
 8015262:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015266:	2702      	movs	r7, #2
 8015268:	f1ba 0f00 	cmp.w	sl, #0
 801526c:	d048      	beq.n	8015300 <__gethex+0x3f4>
 801526e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015272:	2b02      	cmp	r3, #2
 8015274:	d015      	beq.n	80152a2 <__gethex+0x396>
 8015276:	2b03      	cmp	r3, #3
 8015278:	d017      	beq.n	80152aa <__gethex+0x39e>
 801527a:	2b01      	cmp	r3, #1
 801527c:	d109      	bne.n	8015292 <__gethex+0x386>
 801527e:	f01a 0f02 	tst.w	sl, #2
 8015282:	d006      	beq.n	8015292 <__gethex+0x386>
 8015284:	f8d9 0000 	ldr.w	r0, [r9]
 8015288:	ea4a 0a00 	orr.w	sl, sl, r0
 801528c:	f01a 0f01 	tst.w	sl, #1
 8015290:	d10e      	bne.n	80152b0 <__gethex+0x3a4>
 8015292:	f047 0710 	orr.w	r7, r7, #16
 8015296:	e033      	b.n	8015300 <__gethex+0x3f4>
 8015298:	f04f 0a01 	mov.w	sl, #1
 801529c:	e7d0      	b.n	8015240 <__gethex+0x334>
 801529e:	2701      	movs	r7, #1
 80152a0:	e7e2      	b.n	8015268 <__gethex+0x35c>
 80152a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152a4:	f1c3 0301 	rsb	r3, r3, #1
 80152a8:	9315      	str	r3, [sp, #84]	; 0x54
 80152aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d0f0      	beq.n	8015292 <__gethex+0x386>
 80152b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80152b4:	f104 0314 	add.w	r3, r4, #20
 80152b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80152bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80152c0:	f04f 0c00 	mov.w	ip, #0
 80152c4:	4618      	mov	r0, r3
 80152c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80152ca:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80152ce:	d01c      	beq.n	801530a <__gethex+0x3fe>
 80152d0:	3201      	adds	r2, #1
 80152d2:	6002      	str	r2, [r0, #0]
 80152d4:	2f02      	cmp	r7, #2
 80152d6:	f104 0314 	add.w	r3, r4, #20
 80152da:	d13f      	bne.n	801535c <__gethex+0x450>
 80152dc:	f8d8 2000 	ldr.w	r2, [r8]
 80152e0:	3a01      	subs	r2, #1
 80152e2:	42b2      	cmp	r2, r6
 80152e4:	d10a      	bne.n	80152fc <__gethex+0x3f0>
 80152e6:	1171      	asrs	r1, r6, #5
 80152e8:	2201      	movs	r2, #1
 80152ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80152ee:	f006 061f 	and.w	r6, r6, #31
 80152f2:	fa02 f606 	lsl.w	r6, r2, r6
 80152f6:	421e      	tst	r6, r3
 80152f8:	bf18      	it	ne
 80152fa:	4617      	movne	r7, r2
 80152fc:	f047 0720 	orr.w	r7, r7, #32
 8015300:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015302:	601c      	str	r4, [r3, #0]
 8015304:	9b04      	ldr	r3, [sp, #16]
 8015306:	601d      	str	r5, [r3, #0]
 8015308:	e695      	b.n	8015036 <__gethex+0x12a>
 801530a:	4299      	cmp	r1, r3
 801530c:	f843 cc04 	str.w	ip, [r3, #-4]
 8015310:	d8d8      	bhi.n	80152c4 <__gethex+0x3b8>
 8015312:	68a3      	ldr	r3, [r4, #8]
 8015314:	459b      	cmp	fp, r3
 8015316:	db19      	blt.n	801534c <__gethex+0x440>
 8015318:	6861      	ldr	r1, [r4, #4]
 801531a:	ee18 0a10 	vmov	r0, s16
 801531e:	3101      	adds	r1, #1
 8015320:	f000 f938 	bl	8015594 <_Balloc>
 8015324:	4681      	mov	r9, r0
 8015326:	b918      	cbnz	r0, 8015330 <__gethex+0x424>
 8015328:	4b1a      	ldr	r3, [pc, #104]	; (8015394 <__gethex+0x488>)
 801532a:	4602      	mov	r2, r0
 801532c:	2184      	movs	r1, #132	; 0x84
 801532e:	e6a8      	b.n	8015082 <__gethex+0x176>
 8015330:	6922      	ldr	r2, [r4, #16]
 8015332:	3202      	adds	r2, #2
 8015334:	f104 010c 	add.w	r1, r4, #12
 8015338:	0092      	lsls	r2, r2, #2
 801533a:	300c      	adds	r0, #12
 801533c:	f7fc ff23 	bl	8012186 <memcpy>
 8015340:	4621      	mov	r1, r4
 8015342:	ee18 0a10 	vmov	r0, s16
 8015346:	f000 f965 	bl	8015614 <_Bfree>
 801534a:	464c      	mov	r4, r9
 801534c:	6923      	ldr	r3, [r4, #16]
 801534e:	1c5a      	adds	r2, r3, #1
 8015350:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015354:	6122      	str	r2, [r4, #16]
 8015356:	2201      	movs	r2, #1
 8015358:	615a      	str	r2, [r3, #20]
 801535a:	e7bb      	b.n	80152d4 <__gethex+0x3c8>
 801535c:	6922      	ldr	r2, [r4, #16]
 801535e:	455a      	cmp	r2, fp
 8015360:	dd0b      	ble.n	801537a <__gethex+0x46e>
 8015362:	2101      	movs	r1, #1
 8015364:	4620      	mov	r0, r4
 8015366:	f7ff fd69 	bl	8014e3c <rshift>
 801536a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801536e:	3501      	adds	r5, #1
 8015370:	42ab      	cmp	r3, r5
 8015372:	f6ff aed0 	blt.w	8015116 <__gethex+0x20a>
 8015376:	2701      	movs	r7, #1
 8015378:	e7c0      	b.n	80152fc <__gethex+0x3f0>
 801537a:	f016 061f 	ands.w	r6, r6, #31
 801537e:	d0fa      	beq.n	8015376 <__gethex+0x46a>
 8015380:	449a      	add	sl, r3
 8015382:	f1c6 0620 	rsb	r6, r6, #32
 8015386:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801538a:	f000 f9f9 	bl	8015780 <__hi0bits>
 801538e:	42b0      	cmp	r0, r6
 8015390:	dbe7      	blt.n	8015362 <__gethex+0x456>
 8015392:	e7f0      	b.n	8015376 <__gethex+0x46a>
 8015394:	08017803 	.word	0x08017803

08015398 <L_shift>:
 8015398:	f1c2 0208 	rsb	r2, r2, #8
 801539c:	0092      	lsls	r2, r2, #2
 801539e:	b570      	push	{r4, r5, r6, lr}
 80153a0:	f1c2 0620 	rsb	r6, r2, #32
 80153a4:	6843      	ldr	r3, [r0, #4]
 80153a6:	6804      	ldr	r4, [r0, #0]
 80153a8:	fa03 f506 	lsl.w	r5, r3, r6
 80153ac:	432c      	orrs	r4, r5
 80153ae:	40d3      	lsrs	r3, r2
 80153b0:	6004      	str	r4, [r0, #0]
 80153b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80153b6:	4288      	cmp	r0, r1
 80153b8:	d3f4      	bcc.n	80153a4 <L_shift+0xc>
 80153ba:	bd70      	pop	{r4, r5, r6, pc}

080153bc <__match>:
 80153bc:	b530      	push	{r4, r5, lr}
 80153be:	6803      	ldr	r3, [r0, #0]
 80153c0:	3301      	adds	r3, #1
 80153c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80153c6:	b914      	cbnz	r4, 80153ce <__match+0x12>
 80153c8:	6003      	str	r3, [r0, #0]
 80153ca:	2001      	movs	r0, #1
 80153cc:	bd30      	pop	{r4, r5, pc}
 80153ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80153d6:	2d19      	cmp	r5, #25
 80153d8:	bf98      	it	ls
 80153da:	3220      	addls	r2, #32
 80153dc:	42a2      	cmp	r2, r4
 80153de:	d0f0      	beq.n	80153c2 <__match+0x6>
 80153e0:	2000      	movs	r0, #0
 80153e2:	e7f3      	b.n	80153cc <__match+0x10>

080153e4 <__hexnan>:
 80153e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153e8:	680b      	ldr	r3, [r1, #0]
 80153ea:	6801      	ldr	r1, [r0, #0]
 80153ec:	115e      	asrs	r6, r3, #5
 80153ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80153f2:	f013 031f 	ands.w	r3, r3, #31
 80153f6:	b087      	sub	sp, #28
 80153f8:	bf18      	it	ne
 80153fa:	3604      	addne	r6, #4
 80153fc:	2500      	movs	r5, #0
 80153fe:	1f37      	subs	r7, r6, #4
 8015400:	4682      	mov	sl, r0
 8015402:	4690      	mov	r8, r2
 8015404:	9301      	str	r3, [sp, #4]
 8015406:	f846 5c04 	str.w	r5, [r6, #-4]
 801540a:	46b9      	mov	r9, r7
 801540c:	463c      	mov	r4, r7
 801540e:	9502      	str	r5, [sp, #8]
 8015410:	46ab      	mov	fp, r5
 8015412:	784a      	ldrb	r2, [r1, #1]
 8015414:	1c4b      	adds	r3, r1, #1
 8015416:	9303      	str	r3, [sp, #12]
 8015418:	b342      	cbz	r2, 801546c <__hexnan+0x88>
 801541a:	4610      	mov	r0, r2
 801541c:	9105      	str	r1, [sp, #20]
 801541e:	9204      	str	r2, [sp, #16]
 8015420:	f7ff fd5e 	bl	8014ee0 <__hexdig_fun>
 8015424:	2800      	cmp	r0, #0
 8015426:	d14f      	bne.n	80154c8 <__hexnan+0xe4>
 8015428:	9a04      	ldr	r2, [sp, #16]
 801542a:	9905      	ldr	r1, [sp, #20]
 801542c:	2a20      	cmp	r2, #32
 801542e:	d818      	bhi.n	8015462 <__hexnan+0x7e>
 8015430:	9b02      	ldr	r3, [sp, #8]
 8015432:	459b      	cmp	fp, r3
 8015434:	dd13      	ble.n	801545e <__hexnan+0x7a>
 8015436:	454c      	cmp	r4, r9
 8015438:	d206      	bcs.n	8015448 <__hexnan+0x64>
 801543a:	2d07      	cmp	r5, #7
 801543c:	dc04      	bgt.n	8015448 <__hexnan+0x64>
 801543e:	462a      	mov	r2, r5
 8015440:	4649      	mov	r1, r9
 8015442:	4620      	mov	r0, r4
 8015444:	f7ff ffa8 	bl	8015398 <L_shift>
 8015448:	4544      	cmp	r4, r8
 801544a:	d950      	bls.n	80154ee <__hexnan+0x10a>
 801544c:	2300      	movs	r3, #0
 801544e:	f1a4 0904 	sub.w	r9, r4, #4
 8015452:	f844 3c04 	str.w	r3, [r4, #-4]
 8015456:	f8cd b008 	str.w	fp, [sp, #8]
 801545a:	464c      	mov	r4, r9
 801545c:	461d      	mov	r5, r3
 801545e:	9903      	ldr	r1, [sp, #12]
 8015460:	e7d7      	b.n	8015412 <__hexnan+0x2e>
 8015462:	2a29      	cmp	r2, #41	; 0x29
 8015464:	d156      	bne.n	8015514 <__hexnan+0x130>
 8015466:	3102      	adds	r1, #2
 8015468:	f8ca 1000 	str.w	r1, [sl]
 801546c:	f1bb 0f00 	cmp.w	fp, #0
 8015470:	d050      	beq.n	8015514 <__hexnan+0x130>
 8015472:	454c      	cmp	r4, r9
 8015474:	d206      	bcs.n	8015484 <__hexnan+0xa0>
 8015476:	2d07      	cmp	r5, #7
 8015478:	dc04      	bgt.n	8015484 <__hexnan+0xa0>
 801547a:	462a      	mov	r2, r5
 801547c:	4649      	mov	r1, r9
 801547e:	4620      	mov	r0, r4
 8015480:	f7ff ff8a 	bl	8015398 <L_shift>
 8015484:	4544      	cmp	r4, r8
 8015486:	d934      	bls.n	80154f2 <__hexnan+0x10e>
 8015488:	f1a8 0204 	sub.w	r2, r8, #4
 801548c:	4623      	mov	r3, r4
 801548e:	f853 1b04 	ldr.w	r1, [r3], #4
 8015492:	f842 1f04 	str.w	r1, [r2, #4]!
 8015496:	429f      	cmp	r7, r3
 8015498:	d2f9      	bcs.n	801548e <__hexnan+0xaa>
 801549a:	1b3b      	subs	r3, r7, r4
 801549c:	f023 0303 	bic.w	r3, r3, #3
 80154a0:	3304      	adds	r3, #4
 80154a2:	3401      	adds	r4, #1
 80154a4:	3e03      	subs	r6, #3
 80154a6:	42b4      	cmp	r4, r6
 80154a8:	bf88      	it	hi
 80154aa:	2304      	movhi	r3, #4
 80154ac:	4443      	add	r3, r8
 80154ae:	2200      	movs	r2, #0
 80154b0:	f843 2b04 	str.w	r2, [r3], #4
 80154b4:	429f      	cmp	r7, r3
 80154b6:	d2fb      	bcs.n	80154b0 <__hexnan+0xcc>
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	b91b      	cbnz	r3, 80154c4 <__hexnan+0xe0>
 80154bc:	4547      	cmp	r7, r8
 80154be:	d127      	bne.n	8015510 <__hexnan+0x12c>
 80154c0:	2301      	movs	r3, #1
 80154c2:	603b      	str	r3, [r7, #0]
 80154c4:	2005      	movs	r0, #5
 80154c6:	e026      	b.n	8015516 <__hexnan+0x132>
 80154c8:	3501      	adds	r5, #1
 80154ca:	2d08      	cmp	r5, #8
 80154cc:	f10b 0b01 	add.w	fp, fp, #1
 80154d0:	dd06      	ble.n	80154e0 <__hexnan+0xfc>
 80154d2:	4544      	cmp	r4, r8
 80154d4:	d9c3      	bls.n	801545e <__hexnan+0x7a>
 80154d6:	2300      	movs	r3, #0
 80154d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80154dc:	2501      	movs	r5, #1
 80154de:	3c04      	subs	r4, #4
 80154e0:	6822      	ldr	r2, [r4, #0]
 80154e2:	f000 000f 	and.w	r0, r0, #15
 80154e6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80154ea:	6022      	str	r2, [r4, #0]
 80154ec:	e7b7      	b.n	801545e <__hexnan+0x7a>
 80154ee:	2508      	movs	r5, #8
 80154f0:	e7b5      	b.n	801545e <__hexnan+0x7a>
 80154f2:	9b01      	ldr	r3, [sp, #4]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d0df      	beq.n	80154b8 <__hexnan+0xd4>
 80154f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80154fc:	f1c3 0320 	rsb	r3, r3, #32
 8015500:	fa22 f303 	lsr.w	r3, r2, r3
 8015504:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015508:	401a      	ands	r2, r3
 801550a:	f846 2c04 	str.w	r2, [r6, #-4]
 801550e:	e7d3      	b.n	80154b8 <__hexnan+0xd4>
 8015510:	3f04      	subs	r7, #4
 8015512:	e7d1      	b.n	80154b8 <__hexnan+0xd4>
 8015514:	2004      	movs	r0, #4
 8015516:	b007      	add	sp, #28
 8015518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801551c <_localeconv_r>:
 801551c:	4800      	ldr	r0, [pc, #0]	; (8015520 <_localeconv_r+0x4>)
 801551e:	4770      	bx	lr
 8015520:	200002f4 	.word	0x200002f4

08015524 <_lseek_r>:
 8015524:	b538      	push	{r3, r4, r5, lr}
 8015526:	4d07      	ldr	r5, [pc, #28]	; (8015544 <_lseek_r+0x20>)
 8015528:	4604      	mov	r4, r0
 801552a:	4608      	mov	r0, r1
 801552c:	4611      	mov	r1, r2
 801552e:	2200      	movs	r2, #0
 8015530:	602a      	str	r2, [r5, #0]
 8015532:	461a      	mov	r2, r3
 8015534:	f7ed fd26 	bl	8002f84 <_lseek>
 8015538:	1c43      	adds	r3, r0, #1
 801553a:	d102      	bne.n	8015542 <_lseek_r+0x1e>
 801553c:	682b      	ldr	r3, [r5, #0]
 801553e:	b103      	cbz	r3, 8015542 <_lseek_r+0x1e>
 8015540:	6023      	str	r3, [r4, #0]
 8015542:	bd38      	pop	{r3, r4, r5, pc}
 8015544:	2000c37c 	.word	0x2000c37c

08015548 <malloc>:
 8015548:	4b02      	ldr	r3, [pc, #8]	; (8015554 <malloc+0xc>)
 801554a:	4601      	mov	r1, r0
 801554c:	6818      	ldr	r0, [r3, #0]
 801554e:	f7fc be31 	b.w	80121b4 <_malloc_r>
 8015552:	bf00      	nop
 8015554:	2000019c 	.word	0x2000019c

08015558 <__ascii_mbtowc>:
 8015558:	b082      	sub	sp, #8
 801555a:	b901      	cbnz	r1, 801555e <__ascii_mbtowc+0x6>
 801555c:	a901      	add	r1, sp, #4
 801555e:	b142      	cbz	r2, 8015572 <__ascii_mbtowc+0x1a>
 8015560:	b14b      	cbz	r3, 8015576 <__ascii_mbtowc+0x1e>
 8015562:	7813      	ldrb	r3, [r2, #0]
 8015564:	600b      	str	r3, [r1, #0]
 8015566:	7812      	ldrb	r2, [r2, #0]
 8015568:	1e10      	subs	r0, r2, #0
 801556a:	bf18      	it	ne
 801556c:	2001      	movne	r0, #1
 801556e:	b002      	add	sp, #8
 8015570:	4770      	bx	lr
 8015572:	4610      	mov	r0, r2
 8015574:	e7fb      	b.n	801556e <__ascii_mbtowc+0x16>
 8015576:	f06f 0001 	mvn.w	r0, #1
 801557a:	e7f8      	b.n	801556e <__ascii_mbtowc+0x16>

0801557c <__malloc_lock>:
 801557c:	4801      	ldr	r0, [pc, #4]	; (8015584 <__malloc_lock+0x8>)
 801557e:	f7fc be00 	b.w	8012182 <__retarget_lock_acquire_recursive>
 8015582:	bf00      	nop
 8015584:	2000c374 	.word	0x2000c374

08015588 <__malloc_unlock>:
 8015588:	4801      	ldr	r0, [pc, #4]	; (8015590 <__malloc_unlock+0x8>)
 801558a:	f7fc bdfb 	b.w	8012184 <__retarget_lock_release_recursive>
 801558e:	bf00      	nop
 8015590:	2000c374 	.word	0x2000c374

08015594 <_Balloc>:
 8015594:	b570      	push	{r4, r5, r6, lr}
 8015596:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015598:	4604      	mov	r4, r0
 801559a:	460d      	mov	r5, r1
 801559c:	b976      	cbnz	r6, 80155bc <_Balloc+0x28>
 801559e:	2010      	movs	r0, #16
 80155a0:	f7ff ffd2 	bl	8015548 <malloc>
 80155a4:	4602      	mov	r2, r0
 80155a6:	6260      	str	r0, [r4, #36]	; 0x24
 80155a8:	b920      	cbnz	r0, 80155b4 <_Balloc+0x20>
 80155aa:	4b18      	ldr	r3, [pc, #96]	; (801560c <_Balloc+0x78>)
 80155ac:	4818      	ldr	r0, [pc, #96]	; (8015610 <_Balloc+0x7c>)
 80155ae:	2166      	movs	r1, #102	; 0x66
 80155b0:	f001 fa9e 	bl	8016af0 <__assert_func>
 80155b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80155b8:	6006      	str	r6, [r0, #0]
 80155ba:	60c6      	str	r6, [r0, #12]
 80155bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80155be:	68f3      	ldr	r3, [r6, #12]
 80155c0:	b183      	cbz	r3, 80155e4 <_Balloc+0x50>
 80155c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155c4:	68db      	ldr	r3, [r3, #12]
 80155c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80155ca:	b9b8      	cbnz	r0, 80155fc <_Balloc+0x68>
 80155cc:	2101      	movs	r1, #1
 80155ce:	fa01 f605 	lsl.w	r6, r1, r5
 80155d2:	1d72      	adds	r2, r6, #5
 80155d4:	0092      	lsls	r2, r2, #2
 80155d6:	4620      	mov	r0, r4
 80155d8:	f000 fc97 	bl	8015f0a <_calloc_r>
 80155dc:	b160      	cbz	r0, 80155f8 <_Balloc+0x64>
 80155de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80155e2:	e00e      	b.n	8015602 <_Balloc+0x6e>
 80155e4:	2221      	movs	r2, #33	; 0x21
 80155e6:	2104      	movs	r1, #4
 80155e8:	4620      	mov	r0, r4
 80155ea:	f000 fc8e 	bl	8015f0a <_calloc_r>
 80155ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155f0:	60f0      	str	r0, [r6, #12]
 80155f2:	68db      	ldr	r3, [r3, #12]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d1e4      	bne.n	80155c2 <_Balloc+0x2e>
 80155f8:	2000      	movs	r0, #0
 80155fa:	bd70      	pop	{r4, r5, r6, pc}
 80155fc:	6802      	ldr	r2, [r0, #0]
 80155fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015602:	2300      	movs	r3, #0
 8015604:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015608:	e7f7      	b.n	80155fa <_Balloc+0x66>
 801560a:	bf00      	nop
 801560c:	0801778d 	.word	0x0801778d
 8015610:	08017894 	.word	0x08017894

08015614 <_Bfree>:
 8015614:	b570      	push	{r4, r5, r6, lr}
 8015616:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015618:	4605      	mov	r5, r0
 801561a:	460c      	mov	r4, r1
 801561c:	b976      	cbnz	r6, 801563c <_Bfree+0x28>
 801561e:	2010      	movs	r0, #16
 8015620:	f7ff ff92 	bl	8015548 <malloc>
 8015624:	4602      	mov	r2, r0
 8015626:	6268      	str	r0, [r5, #36]	; 0x24
 8015628:	b920      	cbnz	r0, 8015634 <_Bfree+0x20>
 801562a:	4b09      	ldr	r3, [pc, #36]	; (8015650 <_Bfree+0x3c>)
 801562c:	4809      	ldr	r0, [pc, #36]	; (8015654 <_Bfree+0x40>)
 801562e:	218a      	movs	r1, #138	; 0x8a
 8015630:	f001 fa5e 	bl	8016af0 <__assert_func>
 8015634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015638:	6006      	str	r6, [r0, #0]
 801563a:	60c6      	str	r6, [r0, #12]
 801563c:	b13c      	cbz	r4, 801564e <_Bfree+0x3a>
 801563e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015640:	6862      	ldr	r2, [r4, #4]
 8015642:	68db      	ldr	r3, [r3, #12]
 8015644:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015648:	6021      	str	r1, [r4, #0]
 801564a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801564e:	bd70      	pop	{r4, r5, r6, pc}
 8015650:	0801778d 	.word	0x0801778d
 8015654:	08017894 	.word	0x08017894

08015658 <__multadd>:
 8015658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801565c:	690e      	ldr	r6, [r1, #16]
 801565e:	4607      	mov	r7, r0
 8015660:	4698      	mov	r8, r3
 8015662:	460c      	mov	r4, r1
 8015664:	f101 0014 	add.w	r0, r1, #20
 8015668:	2300      	movs	r3, #0
 801566a:	6805      	ldr	r5, [r0, #0]
 801566c:	b2a9      	uxth	r1, r5
 801566e:	fb02 8101 	mla	r1, r2, r1, r8
 8015672:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8015676:	0c2d      	lsrs	r5, r5, #16
 8015678:	fb02 c505 	mla	r5, r2, r5, ip
 801567c:	b289      	uxth	r1, r1
 801567e:	3301      	adds	r3, #1
 8015680:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8015684:	429e      	cmp	r6, r3
 8015686:	f840 1b04 	str.w	r1, [r0], #4
 801568a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801568e:	dcec      	bgt.n	801566a <__multadd+0x12>
 8015690:	f1b8 0f00 	cmp.w	r8, #0
 8015694:	d022      	beq.n	80156dc <__multadd+0x84>
 8015696:	68a3      	ldr	r3, [r4, #8]
 8015698:	42b3      	cmp	r3, r6
 801569a:	dc19      	bgt.n	80156d0 <__multadd+0x78>
 801569c:	6861      	ldr	r1, [r4, #4]
 801569e:	4638      	mov	r0, r7
 80156a0:	3101      	adds	r1, #1
 80156a2:	f7ff ff77 	bl	8015594 <_Balloc>
 80156a6:	4605      	mov	r5, r0
 80156a8:	b928      	cbnz	r0, 80156b6 <__multadd+0x5e>
 80156aa:	4602      	mov	r2, r0
 80156ac:	4b0d      	ldr	r3, [pc, #52]	; (80156e4 <__multadd+0x8c>)
 80156ae:	480e      	ldr	r0, [pc, #56]	; (80156e8 <__multadd+0x90>)
 80156b0:	21b5      	movs	r1, #181	; 0xb5
 80156b2:	f001 fa1d 	bl	8016af0 <__assert_func>
 80156b6:	6922      	ldr	r2, [r4, #16]
 80156b8:	3202      	adds	r2, #2
 80156ba:	f104 010c 	add.w	r1, r4, #12
 80156be:	0092      	lsls	r2, r2, #2
 80156c0:	300c      	adds	r0, #12
 80156c2:	f7fc fd60 	bl	8012186 <memcpy>
 80156c6:	4621      	mov	r1, r4
 80156c8:	4638      	mov	r0, r7
 80156ca:	f7ff ffa3 	bl	8015614 <_Bfree>
 80156ce:	462c      	mov	r4, r5
 80156d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80156d4:	3601      	adds	r6, #1
 80156d6:	f8c3 8014 	str.w	r8, [r3, #20]
 80156da:	6126      	str	r6, [r4, #16]
 80156dc:	4620      	mov	r0, r4
 80156de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156e2:	bf00      	nop
 80156e4:	08017803 	.word	0x08017803
 80156e8:	08017894 	.word	0x08017894

080156ec <__s2b>:
 80156ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156f0:	460c      	mov	r4, r1
 80156f2:	4615      	mov	r5, r2
 80156f4:	461f      	mov	r7, r3
 80156f6:	2209      	movs	r2, #9
 80156f8:	3308      	adds	r3, #8
 80156fa:	4606      	mov	r6, r0
 80156fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8015700:	2100      	movs	r1, #0
 8015702:	2201      	movs	r2, #1
 8015704:	429a      	cmp	r2, r3
 8015706:	db09      	blt.n	801571c <__s2b+0x30>
 8015708:	4630      	mov	r0, r6
 801570a:	f7ff ff43 	bl	8015594 <_Balloc>
 801570e:	b940      	cbnz	r0, 8015722 <__s2b+0x36>
 8015710:	4602      	mov	r2, r0
 8015712:	4b19      	ldr	r3, [pc, #100]	; (8015778 <__s2b+0x8c>)
 8015714:	4819      	ldr	r0, [pc, #100]	; (801577c <__s2b+0x90>)
 8015716:	21ce      	movs	r1, #206	; 0xce
 8015718:	f001 f9ea 	bl	8016af0 <__assert_func>
 801571c:	0052      	lsls	r2, r2, #1
 801571e:	3101      	adds	r1, #1
 8015720:	e7f0      	b.n	8015704 <__s2b+0x18>
 8015722:	9b08      	ldr	r3, [sp, #32]
 8015724:	6143      	str	r3, [r0, #20]
 8015726:	2d09      	cmp	r5, #9
 8015728:	f04f 0301 	mov.w	r3, #1
 801572c:	6103      	str	r3, [r0, #16]
 801572e:	dd16      	ble.n	801575e <__s2b+0x72>
 8015730:	f104 0909 	add.w	r9, r4, #9
 8015734:	46c8      	mov	r8, r9
 8015736:	442c      	add	r4, r5
 8015738:	f818 3b01 	ldrb.w	r3, [r8], #1
 801573c:	4601      	mov	r1, r0
 801573e:	3b30      	subs	r3, #48	; 0x30
 8015740:	220a      	movs	r2, #10
 8015742:	4630      	mov	r0, r6
 8015744:	f7ff ff88 	bl	8015658 <__multadd>
 8015748:	45a0      	cmp	r8, r4
 801574a:	d1f5      	bne.n	8015738 <__s2b+0x4c>
 801574c:	f1a5 0408 	sub.w	r4, r5, #8
 8015750:	444c      	add	r4, r9
 8015752:	1b2d      	subs	r5, r5, r4
 8015754:	1963      	adds	r3, r4, r5
 8015756:	42bb      	cmp	r3, r7
 8015758:	db04      	blt.n	8015764 <__s2b+0x78>
 801575a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801575e:	340a      	adds	r4, #10
 8015760:	2509      	movs	r5, #9
 8015762:	e7f6      	b.n	8015752 <__s2b+0x66>
 8015764:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015768:	4601      	mov	r1, r0
 801576a:	3b30      	subs	r3, #48	; 0x30
 801576c:	220a      	movs	r2, #10
 801576e:	4630      	mov	r0, r6
 8015770:	f7ff ff72 	bl	8015658 <__multadd>
 8015774:	e7ee      	b.n	8015754 <__s2b+0x68>
 8015776:	bf00      	nop
 8015778:	08017803 	.word	0x08017803
 801577c:	08017894 	.word	0x08017894

08015780 <__hi0bits>:
 8015780:	0c03      	lsrs	r3, r0, #16
 8015782:	041b      	lsls	r3, r3, #16
 8015784:	b9d3      	cbnz	r3, 80157bc <__hi0bits+0x3c>
 8015786:	0400      	lsls	r0, r0, #16
 8015788:	2310      	movs	r3, #16
 801578a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801578e:	bf04      	itt	eq
 8015790:	0200      	lsleq	r0, r0, #8
 8015792:	3308      	addeq	r3, #8
 8015794:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015798:	bf04      	itt	eq
 801579a:	0100      	lsleq	r0, r0, #4
 801579c:	3304      	addeq	r3, #4
 801579e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80157a2:	bf04      	itt	eq
 80157a4:	0080      	lsleq	r0, r0, #2
 80157a6:	3302      	addeq	r3, #2
 80157a8:	2800      	cmp	r0, #0
 80157aa:	db05      	blt.n	80157b8 <__hi0bits+0x38>
 80157ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80157b0:	f103 0301 	add.w	r3, r3, #1
 80157b4:	bf08      	it	eq
 80157b6:	2320      	moveq	r3, #32
 80157b8:	4618      	mov	r0, r3
 80157ba:	4770      	bx	lr
 80157bc:	2300      	movs	r3, #0
 80157be:	e7e4      	b.n	801578a <__hi0bits+0xa>

080157c0 <__lo0bits>:
 80157c0:	6803      	ldr	r3, [r0, #0]
 80157c2:	f013 0207 	ands.w	r2, r3, #7
 80157c6:	4601      	mov	r1, r0
 80157c8:	d00b      	beq.n	80157e2 <__lo0bits+0x22>
 80157ca:	07da      	lsls	r2, r3, #31
 80157cc:	d424      	bmi.n	8015818 <__lo0bits+0x58>
 80157ce:	0798      	lsls	r0, r3, #30
 80157d0:	bf49      	itett	mi
 80157d2:	085b      	lsrmi	r3, r3, #1
 80157d4:	089b      	lsrpl	r3, r3, #2
 80157d6:	2001      	movmi	r0, #1
 80157d8:	600b      	strmi	r3, [r1, #0]
 80157da:	bf5c      	itt	pl
 80157dc:	600b      	strpl	r3, [r1, #0]
 80157de:	2002      	movpl	r0, #2
 80157e0:	4770      	bx	lr
 80157e2:	b298      	uxth	r0, r3
 80157e4:	b9b0      	cbnz	r0, 8015814 <__lo0bits+0x54>
 80157e6:	0c1b      	lsrs	r3, r3, #16
 80157e8:	2010      	movs	r0, #16
 80157ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80157ee:	bf04      	itt	eq
 80157f0:	0a1b      	lsreq	r3, r3, #8
 80157f2:	3008      	addeq	r0, #8
 80157f4:	071a      	lsls	r2, r3, #28
 80157f6:	bf04      	itt	eq
 80157f8:	091b      	lsreq	r3, r3, #4
 80157fa:	3004      	addeq	r0, #4
 80157fc:	079a      	lsls	r2, r3, #30
 80157fe:	bf04      	itt	eq
 8015800:	089b      	lsreq	r3, r3, #2
 8015802:	3002      	addeq	r0, #2
 8015804:	07da      	lsls	r2, r3, #31
 8015806:	d403      	bmi.n	8015810 <__lo0bits+0x50>
 8015808:	085b      	lsrs	r3, r3, #1
 801580a:	f100 0001 	add.w	r0, r0, #1
 801580e:	d005      	beq.n	801581c <__lo0bits+0x5c>
 8015810:	600b      	str	r3, [r1, #0]
 8015812:	4770      	bx	lr
 8015814:	4610      	mov	r0, r2
 8015816:	e7e8      	b.n	80157ea <__lo0bits+0x2a>
 8015818:	2000      	movs	r0, #0
 801581a:	4770      	bx	lr
 801581c:	2020      	movs	r0, #32
 801581e:	4770      	bx	lr

08015820 <__i2b>:
 8015820:	b510      	push	{r4, lr}
 8015822:	460c      	mov	r4, r1
 8015824:	2101      	movs	r1, #1
 8015826:	f7ff feb5 	bl	8015594 <_Balloc>
 801582a:	4602      	mov	r2, r0
 801582c:	b928      	cbnz	r0, 801583a <__i2b+0x1a>
 801582e:	4b05      	ldr	r3, [pc, #20]	; (8015844 <__i2b+0x24>)
 8015830:	4805      	ldr	r0, [pc, #20]	; (8015848 <__i2b+0x28>)
 8015832:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015836:	f001 f95b 	bl	8016af0 <__assert_func>
 801583a:	2301      	movs	r3, #1
 801583c:	6144      	str	r4, [r0, #20]
 801583e:	6103      	str	r3, [r0, #16]
 8015840:	bd10      	pop	{r4, pc}
 8015842:	bf00      	nop
 8015844:	08017803 	.word	0x08017803
 8015848:	08017894 	.word	0x08017894

0801584c <__multiply>:
 801584c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015850:	4614      	mov	r4, r2
 8015852:	690a      	ldr	r2, [r1, #16]
 8015854:	6923      	ldr	r3, [r4, #16]
 8015856:	429a      	cmp	r2, r3
 8015858:	bfb8      	it	lt
 801585a:	460b      	movlt	r3, r1
 801585c:	460d      	mov	r5, r1
 801585e:	bfbc      	itt	lt
 8015860:	4625      	movlt	r5, r4
 8015862:	461c      	movlt	r4, r3
 8015864:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015868:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801586c:	68ab      	ldr	r3, [r5, #8]
 801586e:	6869      	ldr	r1, [r5, #4]
 8015870:	eb0a 0709 	add.w	r7, sl, r9
 8015874:	42bb      	cmp	r3, r7
 8015876:	b085      	sub	sp, #20
 8015878:	bfb8      	it	lt
 801587a:	3101      	addlt	r1, #1
 801587c:	f7ff fe8a 	bl	8015594 <_Balloc>
 8015880:	b930      	cbnz	r0, 8015890 <__multiply+0x44>
 8015882:	4602      	mov	r2, r0
 8015884:	4b42      	ldr	r3, [pc, #264]	; (8015990 <__multiply+0x144>)
 8015886:	4843      	ldr	r0, [pc, #268]	; (8015994 <__multiply+0x148>)
 8015888:	f240 115d 	movw	r1, #349	; 0x15d
 801588c:	f001 f930 	bl	8016af0 <__assert_func>
 8015890:	f100 0614 	add.w	r6, r0, #20
 8015894:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8015898:	4633      	mov	r3, r6
 801589a:	2200      	movs	r2, #0
 801589c:	4543      	cmp	r3, r8
 801589e:	d31e      	bcc.n	80158de <__multiply+0x92>
 80158a0:	f105 0c14 	add.w	ip, r5, #20
 80158a4:	f104 0314 	add.w	r3, r4, #20
 80158a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80158ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80158b0:	9202      	str	r2, [sp, #8]
 80158b2:	ebac 0205 	sub.w	r2, ip, r5
 80158b6:	3a15      	subs	r2, #21
 80158b8:	f022 0203 	bic.w	r2, r2, #3
 80158bc:	3204      	adds	r2, #4
 80158be:	f105 0115 	add.w	r1, r5, #21
 80158c2:	458c      	cmp	ip, r1
 80158c4:	bf38      	it	cc
 80158c6:	2204      	movcc	r2, #4
 80158c8:	9201      	str	r2, [sp, #4]
 80158ca:	9a02      	ldr	r2, [sp, #8]
 80158cc:	9303      	str	r3, [sp, #12]
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d808      	bhi.n	80158e4 <__multiply+0x98>
 80158d2:	2f00      	cmp	r7, #0
 80158d4:	dc55      	bgt.n	8015982 <__multiply+0x136>
 80158d6:	6107      	str	r7, [r0, #16]
 80158d8:	b005      	add	sp, #20
 80158da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158de:	f843 2b04 	str.w	r2, [r3], #4
 80158e2:	e7db      	b.n	801589c <__multiply+0x50>
 80158e4:	f8b3 a000 	ldrh.w	sl, [r3]
 80158e8:	f1ba 0f00 	cmp.w	sl, #0
 80158ec:	d020      	beq.n	8015930 <__multiply+0xe4>
 80158ee:	f105 0e14 	add.w	lr, r5, #20
 80158f2:	46b1      	mov	r9, r6
 80158f4:	2200      	movs	r2, #0
 80158f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80158fa:	f8d9 b000 	ldr.w	fp, [r9]
 80158fe:	b2a1      	uxth	r1, r4
 8015900:	fa1f fb8b 	uxth.w	fp, fp
 8015904:	fb0a b101 	mla	r1, sl, r1, fp
 8015908:	4411      	add	r1, r2
 801590a:	f8d9 2000 	ldr.w	r2, [r9]
 801590e:	0c24      	lsrs	r4, r4, #16
 8015910:	0c12      	lsrs	r2, r2, #16
 8015912:	fb0a 2404 	mla	r4, sl, r4, r2
 8015916:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801591a:	b289      	uxth	r1, r1
 801591c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015920:	45f4      	cmp	ip, lr
 8015922:	f849 1b04 	str.w	r1, [r9], #4
 8015926:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801592a:	d8e4      	bhi.n	80158f6 <__multiply+0xaa>
 801592c:	9901      	ldr	r1, [sp, #4]
 801592e:	5072      	str	r2, [r6, r1]
 8015930:	9a03      	ldr	r2, [sp, #12]
 8015932:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015936:	3304      	adds	r3, #4
 8015938:	f1b9 0f00 	cmp.w	r9, #0
 801593c:	d01f      	beq.n	801597e <__multiply+0x132>
 801593e:	6834      	ldr	r4, [r6, #0]
 8015940:	f105 0114 	add.w	r1, r5, #20
 8015944:	46b6      	mov	lr, r6
 8015946:	f04f 0a00 	mov.w	sl, #0
 801594a:	880a      	ldrh	r2, [r1, #0]
 801594c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015950:	fb09 b202 	mla	r2, r9, r2, fp
 8015954:	4492      	add	sl, r2
 8015956:	b2a4      	uxth	r4, r4
 8015958:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801595c:	f84e 4b04 	str.w	r4, [lr], #4
 8015960:	f851 4b04 	ldr.w	r4, [r1], #4
 8015964:	f8be 2000 	ldrh.w	r2, [lr]
 8015968:	0c24      	lsrs	r4, r4, #16
 801596a:	fb09 2404 	mla	r4, r9, r4, r2
 801596e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8015972:	458c      	cmp	ip, r1
 8015974:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015978:	d8e7      	bhi.n	801594a <__multiply+0xfe>
 801597a:	9a01      	ldr	r2, [sp, #4]
 801597c:	50b4      	str	r4, [r6, r2]
 801597e:	3604      	adds	r6, #4
 8015980:	e7a3      	b.n	80158ca <__multiply+0x7e>
 8015982:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015986:	2b00      	cmp	r3, #0
 8015988:	d1a5      	bne.n	80158d6 <__multiply+0x8a>
 801598a:	3f01      	subs	r7, #1
 801598c:	e7a1      	b.n	80158d2 <__multiply+0x86>
 801598e:	bf00      	nop
 8015990:	08017803 	.word	0x08017803
 8015994:	08017894 	.word	0x08017894

08015998 <__pow5mult>:
 8015998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801599c:	4615      	mov	r5, r2
 801599e:	f012 0203 	ands.w	r2, r2, #3
 80159a2:	4606      	mov	r6, r0
 80159a4:	460f      	mov	r7, r1
 80159a6:	d007      	beq.n	80159b8 <__pow5mult+0x20>
 80159a8:	4c25      	ldr	r4, [pc, #148]	; (8015a40 <__pow5mult+0xa8>)
 80159aa:	3a01      	subs	r2, #1
 80159ac:	2300      	movs	r3, #0
 80159ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80159b2:	f7ff fe51 	bl	8015658 <__multadd>
 80159b6:	4607      	mov	r7, r0
 80159b8:	10ad      	asrs	r5, r5, #2
 80159ba:	d03d      	beq.n	8015a38 <__pow5mult+0xa0>
 80159bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80159be:	b97c      	cbnz	r4, 80159e0 <__pow5mult+0x48>
 80159c0:	2010      	movs	r0, #16
 80159c2:	f7ff fdc1 	bl	8015548 <malloc>
 80159c6:	4602      	mov	r2, r0
 80159c8:	6270      	str	r0, [r6, #36]	; 0x24
 80159ca:	b928      	cbnz	r0, 80159d8 <__pow5mult+0x40>
 80159cc:	4b1d      	ldr	r3, [pc, #116]	; (8015a44 <__pow5mult+0xac>)
 80159ce:	481e      	ldr	r0, [pc, #120]	; (8015a48 <__pow5mult+0xb0>)
 80159d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80159d4:	f001 f88c 	bl	8016af0 <__assert_func>
 80159d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80159dc:	6004      	str	r4, [r0, #0]
 80159de:	60c4      	str	r4, [r0, #12]
 80159e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80159e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80159e8:	b94c      	cbnz	r4, 80159fe <__pow5mult+0x66>
 80159ea:	f240 2171 	movw	r1, #625	; 0x271
 80159ee:	4630      	mov	r0, r6
 80159f0:	f7ff ff16 	bl	8015820 <__i2b>
 80159f4:	2300      	movs	r3, #0
 80159f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80159fa:	4604      	mov	r4, r0
 80159fc:	6003      	str	r3, [r0, #0]
 80159fe:	f04f 0900 	mov.w	r9, #0
 8015a02:	07eb      	lsls	r3, r5, #31
 8015a04:	d50a      	bpl.n	8015a1c <__pow5mult+0x84>
 8015a06:	4639      	mov	r1, r7
 8015a08:	4622      	mov	r2, r4
 8015a0a:	4630      	mov	r0, r6
 8015a0c:	f7ff ff1e 	bl	801584c <__multiply>
 8015a10:	4639      	mov	r1, r7
 8015a12:	4680      	mov	r8, r0
 8015a14:	4630      	mov	r0, r6
 8015a16:	f7ff fdfd 	bl	8015614 <_Bfree>
 8015a1a:	4647      	mov	r7, r8
 8015a1c:	106d      	asrs	r5, r5, #1
 8015a1e:	d00b      	beq.n	8015a38 <__pow5mult+0xa0>
 8015a20:	6820      	ldr	r0, [r4, #0]
 8015a22:	b938      	cbnz	r0, 8015a34 <__pow5mult+0x9c>
 8015a24:	4622      	mov	r2, r4
 8015a26:	4621      	mov	r1, r4
 8015a28:	4630      	mov	r0, r6
 8015a2a:	f7ff ff0f 	bl	801584c <__multiply>
 8015a2e:	6020      	str	r0, [r4, #0]
 8015a30:	f8c0 9000 	str.w	r9, [r0]
 8015a34:	4604      	mov	r4, r0
 8015a36:	e7e4      	b.n	8015a02 <__pow5mult+0x6a>
 8015a38:	4638      	mov	r0, r7
 8015a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a3e:	bf00      	nop
 8015a40:	080179e8 	.word	0x080179e8
 8015a44:	0801778d 	.word	0x0801778d
 8015a48:	08017894 	.word	0x08017894

08015a4c <__lshift>:
 8015a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a50:	460c      	mov	r4, r1
 8015a52:	6849      	ldr	r1, [r1, #4]
 8015a54:	6923      	ldr	r3, [r4, #16]
 8015a56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015a5a:	68a3      	ldr	r3, [r4, #8]
 8015a5c:	4607      	mov	r7, r0
 8015a5e:	4691      	mov	r9, r2
 8015a60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015a64:	f108 0601 	add.w	r6, r8, #1
 8015a68:	42b3      	cmp	r3, r6
 8015a6a:	db0b      	blt.n	8015a84 <__lshift+0x38>
 8015a6c:	4638      	mov	r0, r7
 8015a6e:	f7ff fd91 	bl	8015594 <_Balloc>
 8015a72:	4605      	mov	r5, r0
 8015a74:	b948      	cbnz	r0, 8015a8a <__lshift+0x3e>
 8015a76:	4602      	mov	r2, r0
 8015a78:	4b28      	ldr	r3, [pc, #160]	; (8015b1c <__lshift+0xd0>)
 8015a7a:	4829      	ldr	r0, [pc, #164]	; (8015b20 <__lshift+0xd4>)
 8015a7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015a80:	f001 f836 	bl	8016af0 <__assert_func>
 8015a84:	3101      	adds	r1, #1
 8015a86:	005b      	lsls	r3, r3, #1
 8015a88:	e7ee      	b.n	8015a68 <__lshift+0x1c>
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	f100 0114 	add.w	r1, r0, #20
 8015a90:	f100 0210 	add.w	r2, r0, #16
 8015a94:	4618      	mov	r0, r3
 8015a96:	4553      	cmp	r3, sl
 8015a98:	db33      	blt.n	8015b02 <__lshift+0xb6>
 8015a9a:	6920      	ldr	r0, [r4, #16]
 8015a9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015aa0:	f104 0314 	add.w	r3, r4, #20
 8015aa4:	f019 091f 	ands.w	r9, r9, #31
 8015aa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015aac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015ab0:	d02b      	beq.n	8015b0a <__lshift+0xbe>
 8015ab2:	f1c9 0e20 	rsb	lr, r9, #32
 8015ab6:	468a      	mov	sl, r1
 8015ab8:	2200      	movs	r2, #0
 8015aba:	6818      	ldr	r0, [r3, #0]
 8015abc:	fa00 f009 	lsl.w	r0, r0, r9
 8015ac0:	4302      	orrs	r2, r0
 8015ac2:	f84a 2b04 	str.w	r2, [sl], #4
 8015ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015aca:	459c      	cmp	ip, r3
 8015acc:	fa22 f20e 	lsr.w	r2, r2, lr
 8015ad0:	d8f3      	bhi.n	8015aba <__lshift+0x6e>
 8015ad2:	ebac 0304 	sub.w	r3, ip, r4
 8015ad6:	3b15      	subs	r3, #21
 8015ad8:	f023 0303 	bic.w	r3, r3, #3
 8015adc:	3304      	adds	r3, #4
 8015ade:	f104 0015 	add.w	r0, r4, #21
 8015ae2:	4584      	cmp	ip, r0
 8015ae4:	bf38      	it	cc
 8015ae6:	2304      	movcc	r3, #4
 8015ae8:	50ca      	str	r2, [r1, r3]
 8015aea:	b10a      	cbz	r2, 8015af0 <__lshift+0xa4>
 8015aec:	f108 0602 	add.w	r6, r8, #2
 8015af0:	3e01      	subs	r6, #1
 8015af2:	4638      	mov	r0, r7
 8015af4:	612e      	str	r6, [r5, #16]
 8015af6:	4621      	mov	r1, r4
 8015af8:	f7ff fd8c 	bl	8015614 <_Bfree>
 8015afc:	4628      	mov	r0, r5
 8015afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b02:	f842 0f04 	str.w	r0, [r2, #4]!
 8015b06:	3301      	adds	r3, #1
 8015b08:	e7c5      	b.n	8015a96 <__lshift+0x4a>
 8015b0a:	3904      	subs	r1, #4
 8015b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b10:	f841 2f04 	str.w	r2, [r1, #4]!
 8015b14:	459c      	cmp	ip, r3
 8015b16:	d8f9      	bhi.n	8015b0c <__lshift+0xc0>
 8015b18:	e7ea      	b.n	8015af0 <__lshift+0xa4>
 8015b1a:	bf00      	nop
 8015b1c:	08017803 	.word	0x08017803
 8015b20:	08017894 	.word	0x08017894

08015b24 <__mcmp>:
 8015b24:	b530      	push	{r4, r5, lr}
 8015b26:	6902      	ldr	r2, [r0, #16]
 8015b28:	690c      	ldr	r4, [r1, #16]
 8015b2a:	1b12      	subs	r2, r2, r4
 8015b2c:	d10e      	bne.n	8015b4c <__mcmp+0x28>
 8015b2e:	f100 0314 	add.w	r3, r0, #20
 8015b32:	3114      	adds	r1, #20
 8015b34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015b38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015b3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015b40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015b44:	42a5      	cmp	r5, r4
 8015b46:	d003      	beq.n	8015b50 <__mcmp+0x2c>
 8015b48:	d305      	bcc.n	8015b56 <__mcmp+0x32>
 8015b4a:	2201      	movs	r2, #1
 8015b4c:	4610      	mov	r0, r2
 8015b4e:	bd30      	pop	{r4, r5, pc}
 8015b50:	4283      	cmp	r3, r0
 8015b52:	d3f3      	bcc.n	8015b3c <__mcmp+0x18>
 8015b54:	e7fa      	b.n	8015b4c <__mcmp+0x28>
 8015b56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b5a:	e7f7      	b.n	8015b4c <__mcmp+0x28>

08015b5c <__mdiff>:
 8015b5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b60:	460c      	mov	r4, r1
 8015b62:	4606      	mov	r6, r0
 8015b64:	4611      	mov	r1, r2
 8015b66:	4620      	mov	r0, r4
 8015b68:	4617      	mov	r7, r2
 8015b6a:	f7ff ffdb 	bl	8015b24 <__mcmp>
 8015b6e:	1e05      	subs	r5, r0, #0
 8015b70:	d110      	bne.n	8015b94 <__mdiff+0x38>
 8015b72:	4629      	mov	r1, r5
 8015b74:	4630      	mov	r0, r6
 8015b76:	f7ff fd0d 	bl	8015594 <_Balloc>
 8015b7a:	b930      	cbnz	r0, 8015b8a <__mdiff+0x2e>
 8015b7c:	4b39      	ldr	r3, [pc, #228]	; (8015c64 <__mdiff+0x108>)
 8015b7e:	4602      	mov	r2, r0
 8015b80:	f240 2132 	movw	r1, #562	; 0x232
 8015b84:	4838      	ldr	r0, [pc, #224]	; (8015c68 <__mdiff+0x10c>)
 8015b86:	f000 ffb3 	bl	8016af0 <__assert_func>
 8015b8a:	2301      	movs	r3, #1
 8015b8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b94:	bfa4      	itt	ge
 8015b96:	463b      	movge	r3, r7
 8015b98:	4627      	movge	r7, r4
 8015b9a:	4630      	mov	r0, r6
 8015b9c:	6879      	ldr	r1, [r7, #4]
 8015b9e:	bfa6      	itte	ge
 8015ba0:	461c      	movge	r4, r3
 8015ba2:	2500      	movge	r5, #0
 8015ba4:	2501      	movlt	r5, #1
 8015ba6:	f7ff fcf5 	bl	8015594 <_Balloc>
 8015baa:	b920      	cbnz	r0, 8015bb6 <__mdiff+0x5a>
 8015bac:	4b2d      	ldr	r3, [pc, #180]	; (8015c64 <__mdiff+0x108>)
 8015bae:	4602      	mov	r2, r0
 8015bb0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015bb4:	e7e6      	b.n	8015b84 <__mdiff+0x28>
 8015bb6:	693e      	ldr	r6, [r7, #16]
 8015bb8:	60c5      	str	r5, [r0, #12]
 8015bba:	6925      	ldr	r5, [r4, #16]
 8015bbc:	f107 0114 	add.w	r1, r7, #20
 8015bc0:	f104 0914 	add.w	r9, r4, #20
 8015bc4:	f100 0e14 	add.w	lr, r0, #20
 8015bc8:	f107 0210 	add.w	r2, r7, #16
 8015bcc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015bd0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015bd4:	46f2      	mov	sl, lr
 8015bd6:	2700      	movs	r7, #0
 8015bd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8015bdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015be0:	fa1f f883 	uxth.w	r8, r3
 8015be4:	fa17 f78b 	uxtah	r7, r7, fp
 8015be8:	0c1b      	lsrs	r3, r3, #16
 8015bea:	eba7 0808 	sub.w	r8, r7, r8
 8015bee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015bf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015bf6:	fa1f f888 	uxth.w	r8, r8
 8015bfa:	141f      	asrs	r7, r3, #16
 8015bfc:	454d      	cmp	r5, r9
 8015bfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015c02:	f84a 3b04 	str.w	r3, [sl], #4
 8015c06:	d8e7      	bhi.n	8015bd8 <__mdiff+0x7c>
 8015c08:	1b2b      	subs	r3, r5, r4
 8015c0a:	3b15      	subs	r3, #21
 8015c0c:	f023 0303 	bic.w	r3, r3, #3
 8015c10:	3304      	adds	r3, #4
 8015c12:	3415      	adds	r4, #21
 8015c14:	42a5      	cmp	r5, r4
 8015c16:	bf38      	it	cc
 8015c18:	2304      	movcc	r3, #4
 8015c1a:	4419      	add	r1, r3
 8015c1c:	4473      	add	r3, lr
 8015c1e:	469e      	mov	lr, r3
 8015c20:	460d      	mov	r5, r1
 8015c22:	4565      	cmp	r5, ip
 8015c24:	d30e      	bcc.n	8015c44 <__mdiff+0xe8>
 8015c26:	f10c 0203 	add.w	r2, ip, #3
 8015c2a:	1a52      	subs	r2, r2, r1
 8015c2c:	f022 0203 	bic.w	r2, r2, #3
 8015c30:	3903      	subs	r1, #3
 8015c32:	458c      	cmp	ip, r1
 8015c34:	bf38      	it	cc
 8015c36:	2200      	movcc	r2, #0
 8015c38:	441a      	add	r2, r3
 8015c3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015c3e:	b17b      	cbz	r3, 8015c60 <__mdiff+0x104>
 8015c40:	6106      	str	r6, [r0, #16]
 8015c42:	e7a5      	b.n	8015b90 <__mdiff+0x34>
 8015c44:	f855 8b04 	ldr.w	r8, [r5], #4
 8015c48:	fa17 f488 	uxtah	r4, r7, r8
 8015c4c:	1422      	asrs	r2, r4, #16
 8015c4e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015c52:	b2a4      	uxth	r4, r4
 8015c54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015c58:	f84e 4b04 	str.w	r4, [lr], #4
 8015c5c:	1417      	asrs	r7, r2, #16
 8015c5e:	e7e0      	b.n	8015c22 <__mdiff+0xc6>
 8015c60:	3e01      	subs	r6, #1
 8015c62:	e7ea      	b.n	8015c3a <__mdiff+0xde>
 8015c64:	08017803 	.word	0x08017803
 8015c68:	08017894 	.word	0x08017894

08015c6c <__ulp>:
 8015c6c:	b082      	sub	sp, #8
 8015c6e:	ed8d 0b00 	vstr	d0, [sp]
 8015c72:	9b01      	ldr	r3, [sp, #4]
 8015c74:	4912      	ldr	r1, [pc, #72]	; (8015cc0 <__ulp+0x54>)
 8015c76:	4019      	ands	r1, r3
 8015c78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015c7c:	2900      	cmp	r1, #0
 8015c7e:	dd05      	ble.n	8015c8c <__ulp+0x20>
 8015c80:	2200      	movs	r2, #0
 8015c82:	460b      	mov	r3, r1
 8015c84:	ec43 2b10 	vmov	d0, r2, r3
 8015c88:	b002      	add	sp, #8
 8015c8a:	4770      	bx	lr
 8015c8c:	4249      	negs	r1, r1
 8015c8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8015c92:	ea4f 5021 	mov.w	r0, r1, asr #20
 8015c96:	f04f 0200 	mov.w	r2, #0
 8015c9a:	f04f 0300 	mov.w	r3, #0
 8015c9e:	da04      	bge.n	8015caa <__ulp+0x3e>
 8015ca0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015ca4:	fa41 f300 	asr.w	r3, r1, r0
 8015ca8:	e7ec      	b.n	8015c84 <__ulp+0x18>
 8015caa:	f1a0 0114 	sub.w	r1, r0, #20
 8015cae:	291e      	cmp	r1, #30
 8015cb0:	bfda      	itte	le
 8015cb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8015cb6:	fa20 f101 	lsrle.w	r1, r0, r1
 8015cba:	2101      	movgt	r1, #1
 8015cbc:	460a      	mov	r2, r1
 8015cbe:	e7e1      	b.n	8015c84 <__ulp+0x18>
 8015cc0:	7ff00000 	.word	0x7ff00000

08015cc4 <__b2d>:
 8015cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cc6:	6905      	ldr	r5, [r0, #16]
 8015cc8:	f100 0714 	add.w	r7, r0, #20
 8015ccc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015cd0:	1f2e      	subs	r6, r5, #4
 8015cd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015cd6:	4620      	mov	r0, r4
 8015cd8:	f7ff fd52 	bl	8015780 <__hi0bits>
 8015cdc:	f1c0 0320 	rsb	r3, r0, #32
 8015ce0:	280a      	cmp	r0, #10
 8015ce2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015d60 <__b2d+0x9c>
 8015ce6:	600b      	str	r3, [r1, #0]
 8015ce8:	dc14      	bgt.n	8015d14 <__b2d+0x50>
 8015cea:	f1c0 0e0b 	rsb	lr, r0, #11
 8015cee:	fa24 f10e 	lsr.w	r1, r4, lr
 8015cf2:	42b7      	cmp	r7, r6
 8015cf4:	ea41 030c 	orr.w	r3, r1, ip
 8015cf8:	bf34      	ite	cc
 8015cfa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015cfe:	2100      	movcs	r1, #0
 8015d00:	3015      	adds	r0, #21
 8015d02:	fa04 f000 	lsl.w	r0, r4, r0
 8015d06:	fa21 f10e 	lsr.w	r1, r1, lr
 8015d0a:	ea40 0201 	orr.w	r2, r0, r1
 8015d0e:	ec43 2b10 	vmov	d0, r2, r3
 8015d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d14:	42b7      	cmp	r7, r6
 8015d16:	bf3a      	itte	cc
 8015d18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015d1c:	f1a5 0608 	subcc.w	r6, r5, #8
 8015d20:	2100      	movcs	r1, #0
 8015d22:	380b      	subs	r0, #11
 8015d24:	d017      	beq.n	8015d56 <__b2d+0x92>
 8015d26:	f1c0 0c20 	rsb	ip, r0, #32
 8015d2a:	fa04 f500 	lsl.w	r5, r4, r0
 8015d2e:	42be      	cmp	r6, r7
 8015d30:	fa21 f40c 	lsr.w	r4, r1, ip
 8015d34:	ea45 0504 	orr.w	r5, r5, r4
 8015d38:	bf8c      	ite	hi
 8015d3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015d3e:	2400      	movls	r4, #0
 8015d40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015d44:	fa01 f000 	lsl.w	r0, r1, r0
 8015d48:	fa24 f40c 	lsr.w	r4, r4, ip
 8015d4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015d50:	ea40 0204 	orr.w	r2, r0, r4
 8015d54:	e7db      	b.n	8015d0e <__b2d+0x4a>
 8015d56:	ea44 030c 	orr.w	r3, r4, ip
 8015d5a:	460a      	mov	r2, r1
 8015d5c:	e7d7      	b.n	8015d0e <__b2d+0x4a>
 8015d5e:	bf00      	nop
 8015d60:	3ff00000 	.word	0x3ff00000

08015d64 <__d2b>:
 8015d64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015d68:	4689      	mov	r9, r1
 8015d6a:	2101      	movs	r1, #1
 8015d6c:	ec57 6b10 	vmov	r6, r7, d0
 8015d70:	4690      	mov	r8, r2
 8015d72:	f7ff fc0f 	bl	8015594 <_Balloc>
 8015d76:	4604      	mov	r4, r0
 8015d78:	b930      	cbnz	r0, 8015d88 <__d2b+0x24>
 8015d7a:	4602      	mov	r2, r0
 8015d7c:	4b25      	ldr	r3, [pc, #148]	; (8015e14 <__d2b+0xb0>)
 8015d7e:	4826      	ldr	r0, [pc, #152]	; (8015e18 <__d2b+0xb4>)
 8015d80:	f240 310a 	movw	r1, #778	; 0x30a
 8015d84:	f000 feb4 	bl	8016af0 <__assert_func>
 8015d88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015d8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015d90:	bb35      	cbnz	r5, 8015de0 <__d2b+0x7c>
 8015d92:	2e00      	cmp	r6, #0
 8015d94:	9301      	str	r3, [sp, #4]
 8015d96:	d028      	beq.n	8015dea <__d2b+0x86>
 8015d98:	4668      	mov	r0, sp
 8015d9a:	9600      	str	r6, [sp, #0]
 8015d9c:	f7ff fd10 	bl	80157c0 <__lo0bits>
 8015da0:	9900      	ldr	r1, [sp, #0]
 8015da2:	b300      	cbz	r0, 8015de6 <__d2b+0x82>
 8015da4:	9a01      	ldr	r2, [sp, #4]
 8015da6:	f1c0 0320 	rsb	r3, r0, #32
 8015daa:	fa02 f303 	lsl.w	r3, r2, r3
 8015dae:	430b      	orrs	r3, r1
 8015db0:	40c2      	lsrs	r2, r0
 8015db2:	6163      	str	r3, [r4, #20]
 8015db4:	9201      	str	r2, [sp, #4]
 8015db6:	9b01      	ldr	r3, [sp, #4]
 8015db8:	61a3      	str	r3, [r4, #24]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	bf14      	ite	ne
 8015dbe:	2202      	movne	r2, #2
 8015dc0:	2201      	moveq	r2, #1
 8015dc2:	6122      	str	r2, [r4, #16]
 8015dc4:	b1d5      	cbz	r5, 8015dfc <__d2b+0x98>
 8015dc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015dca:	4405      	add	r5, r0
 8015dcc:	f8c9 5000 	str.w	r5, [r9]
 8015dd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015dd4:	f8c8 0000 	str.w	r0, [r8]
 8015dd8:	4620      	mov	r0, r4
 8015dda:	b003      	add	sp, #12
 8015ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015de0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015de4:	e7d5      	b.n	8015d92 <__d2b+0x2e>
 8015de6:	6161      	str	r1, [r4, #20]
 8015de8:	e7e5      	b.n	8015db6 <__d2b+0x52>
 8015dea:	a801      	add	r0, sp, #4
 8015dec:	f7ff fce8 	bl	80157c0 <__lo0bits>
 8015df0:	9b01      	ldr	r3, [sp, #4]
 8015df2:	6163      	str	r3, [r4, #20]
 8015df4:	2201      	movs	r2, #1
 8015df6:	6122      	str	r2, [r4, #16]
 8015df8:	3020      	adds	r0, #32
 8015dfa:	e7e3      	b.n	8015dc4 <__d2b+0x60>
 8015dfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015e00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015e04:	f8c9 0000 	str.w	r0, [r9]
 8015e08:	6918      	ldr	r0, [r3, #16]
 8015e0a:	f7ff fcb9 	bl	8015780 <__hi0bits>
 8015e0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015e12:	e7df      	b.n	8015dd4 <__d2b+0x70>
 8015e14:	08017803 	.word	0x08017803
 8015e18:	08017894 	.word	0x08017894

08015e1c <__ratio>:
 8015e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e20:	4688      	mov	r8, r1
 8015e22:	4669      	mov	r1, sp
 8015e24:	4681      	mov	r9, r0
 8015e26:	f7ff ff4d 	bl	8015cc4 <__b2d>
 8015e2a:	a901      	add	r1, sp, #4
 8015e2c:	4640      	mov	r0, r8
 8015e2e:	ec55 4b10 	vmov	r4, r5, d0
 8015e32:	f7ff ff47 	bl	8015cc4 <__b2d>
 8015e36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015e3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015e3e:	eba3 0c02 	sub.w	ip, r3, r2
 8015e42:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015e46:	1a9b      	subs	r3, r3, r2
 8015e48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015e4c:	ec51 0b10 	vmov	r0, r1, d0
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	bfd6      	itet	le
 8015e54:	460a      	movle	r2, r1
 8015e56:	462a      	movgt	r2, r5
 8015e58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015e5c:	468b      	mov	fp, r1
 8015e5e:	462f      	mov	r7, r5
 8015e60:	bfd4      	ite	le
 8015e62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015e66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015e6a:	4620      	mov	r0, r4
 8015e6c:	ee10 2a10 	vmov	r2, s0
 8015e70:	465b      	mov	r3, fp
 8015e72:	4639      	mov	r1, r7
 8015e74:	f7ea fcfa 	bl	800086c <__aeabi_ddiv>
 8015e78:	ec41 0b10 	vmov	d0, r0, r1
 8015e7c:	b003      	add	sp, #12
 8015e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015e82 <__copybits>:
 8015e82:	3901      	subs	r1, #1
 8015e84:	b570      	push	{r4, r5, r6, lr}
 8015e86:	1149      	asrs	r1, r1, #5
 8015e88:	6914      	ldr	r4, [r2, #16]
 8015e8a:	3101      	adds	r1, #1
 8015e8c:	f102 0314 	add.w	r3, r2, #20
 8015e90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015e94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015e98:	1f05      	subs	r5, r0, #4
 8015e9a:	42a3      	cmp	r3, r4
 8015e9c:	d30c      	bcc.n	8015eb8 <__copybits+0x36>
 8015e9e:	1aa3      	subs	r3, r4, r2
 8015ea0:	3b11      	subs	r3, #17
 8015ea2:	f023 0303 	bic.w	r3, r3, #3
 8015ea6:	3211      	adds	r2, #17
 8015ea8:	42a2      	cmp	r2, r4
 8015eaa:	bf88      	it	hi
 8015eac:	2300      	movhi	r3, #0
 8015eae:	4418      	add	r0, r3
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	4288      	cmp	r0, r1
 8015eb4:	d305      	bcc.n	8015ec2 <__copybits+0x40>
 8015eb6:	bd70      	pop	{r4, r5, r6, pc}
 8015eb8:	f853 6b04 	ldr.w	r6, [r3], #4
 8015ebc:	f845 6f04 	str.w	r6, [r5, #4]!
 8015ec0:	e7eb      	b.n	8015e9a <__copybits+0x18>
 8015ec2:	f840 3b04 	str.w	r3, [r0], #4
 8015ec6:	e7f4      	b.n	8015eb2 <__copybits+0x30>

08015ec8 <__any_on>:
 8015ec8:	f100 0214 	add.w	r2, r0, #20
 8015ecc:	6900      	ldr	r0, [r0, #16]
 8015ece:	114b      	asrs	r3, r1, #5
 8015ed0:	4298      	cmp	r0, r3
 8015ed2:	b510      	push	{r4, lr}
 8015ed4:	db11      	blt.n	8015efa <__any_on+0x32>
 8015ed6:	dd0a      	ble.n	8015eee <__any_on+0x26>
 8015ed8:	f011 011f 	ands.w	r1, r1, #31
 8015edc:	d007      	beq.n	8015eee <__any_on+0x26>
 8015ede:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015ee2:	fa24 f001 	lsr.w	r0, r4, r1
 8015ee6:	fa00 f101 	lsl.w	r1, r0, r1
 8015eea:	428c      	cmp	r4, r1
 8015eec:	d10b      	bne.n	8015f06 <__any_on+0x3e>
 8015eee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015ef2:	4293      	cmp	r3, r2
 8015ef4:	d803      	bhi.n	8015efe <__any_on+0x36>
 8015ef6:	2000      	movs	r0, #0
 8015ef8:	bd10      	pop	{r4, pc}
 8015efa:	4603      	mov	r3, r0
 8015efc:	e7f7      	b.n	8015eee <__any_on+0x26>
 8015efe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015f02:	2900      	cmp	r1, #0
 8015f04:	d0f5      	beq.n	8015ef2 <__any_on+0x2a>
 8015f06:	2001      	movs	r0, #1
 8015f08:	e7f6      	b.n	8015ef8 <__any_on+0x30>

08015f0a <_calloc_r>:
 8015f0a:	b513      	push	{r0, r1, r4, lr}
 8015f0c:	434a      	muls	r2, r1
 8015f0e:	4611      	mov	r1, r2
 8015f10:	9201      	str	r2, [sp, #4]
 8015f12:	f7fc f94f 	bl	80121b4 <_malloc_r>
 8015f16:	4604      	mov	r4, r0
 8015f18:	b118      	cbz	r0, 8015f22 <_calloc_r+0x18>
 8015f1a:	9a01      	ldr	r2, [sp, #4]
 8015f1c:	2100      	movs	r1, #0
 8015f1e:	f7fc f940 	bl	80121a2 <memset>
 8015f22:	4620      	mov	r0, r4
 8015f24:	b002      	add	sp, #8
 8015f26:	bd10      	pop	{r4, pc}

08015f28 <_free_r>:
 8015f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f2a:	2900      	cmp	r1, #0
 8015f2c:	d048      	beq.n	8015fc0 <_free_r+0x98>
 8015f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f32:	9001      	str	r0, [sp, #4]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	f1a1 0404 	sub.w	r4, r1, #4
 8015f3a:	bfb8      	it	lt
 8015f3c:	18e4      	addlt	r4, r4, r3
 8015f3e:	f7ff fb1d 	bl	801557c <__malloc_lock>
 8015f42:	4a20      	ldr	r2, [pc, #128]	; (8015fc4 <_free_r+0x9c>)
 8015f44:	9801      	ldr	r0, [sp, #4]
 8015f46:	6813      	ldr	r3, [r2, #0]
 8015f48:	4615      	mov	r5, r2
 8015f4a:	b933      	cbnz	r3, 8015f5a <_free_r+0x32>
 8015f4c:	6063      	str	r3, [r4, #4]
 8015f4e:	6014      	str	r4, [r2, #0]
 8015f50:	b003      	add	sp, #12
 8015f52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f56:	f7ff bb17 	b.w	8015588 <__malloc_unlock>
 8015f5a:	42a3      	cmp	r3, r4
 8015f5c:	d90b      	bls.n	8015f76 <_free_r+0x4e>
 8015f5e:	6821      	ldr	r1, [r4, #0]
 8015f60:	1862      	adds	r2, r4, r1
 8015f62:	4293      	cmp	r3, r2
 8015f64:	bf04      	itt	eq
 8015f66:	681a      	ldreq	r2, [r3, #0]
 8015f68:	685b      	ldreq	r3, [r3, #4]
 8015f6a:	6063      	str	r3, [r4, #4]
 8015f6c:	bf04      	itt	eq
 8015f6e:	1852      	addeq	r2, r2, r1
 8015f70:	6022      	streq	r2, [r4, #0]
 8015f72:	602c      	str	r4, [r5, #0]
 8015f74:	e7ec      	b.n	8015f50 <_free_r+0x28>
 8015f76:	461a      	mov	r2, r3
 8015f78:	685b      	ldr	r3, [r3, #4]
 8015f7a:	b10b      	cbz	r3, 8015f80 <_free_r+0x58>
 8015f7c:	42a3      	cmp	r3, r4
 8015f7e:	d9fa      	bls.n	8015f76 <_free_r+0x4e>
 8015f80:	6811      	ldr	r1, [r2, #0]
 8015f82:	1855      	adds	r5, r2, r1
 8015f84:	42a5      	cmp	r5, r4
 8015f86:	d10b      	bne.n	8015fa0 <_free_r+0x78>
 8015f88:	6824      	ldr	r4, [r4, #0]
 8015f8a:	4421      	add	r1, r4
 8015f8c:	1854      	adds	r4, r2, r1
 8015f8e:	42a3      	cmp	r3, r4
 8015f90:	6011      	str	r1, [r2, #0]
 8015f92:	d1dd      	bne.n	8015f50 <_free_r+0x28>
 8015f94:	681c      	ldr	r4, [r3, #0]
 8015f96:	685b      	ldr	r3, [r3, #4]
 8015f98:	6053      	str	r3, [r2, #4]
 8015f9a:	4421      	add	r1, r4
 8015f9c:	6011      	str	r1, [r2, #0]
 8015f9e:	e7d7      	b.n	8015f50 <_free_r+0x28>
 8015fa0:	d902      	bls.n	8015fa8 <_free_r+0x80>
 8015fa2:	230c      	movs	r3, #12
 8015fa4:	6003      	str	r3, [r0, #0]
 8015fa6:	e7d3      	b.n	8015f50 <_free_r+0x28>
 8015fa8:	6825      	ldr	r5, [r4, #0]
 8015faa:	1961      	adds	r1, r4, r5
 8015fac:	428b      	cmp	r3, r1
 8015fae:	bf04      	itt	eq
 8015fb0:	6819      	ldreq	r1, [r3, #0]
 8015fb2:	685b      	ldreq	r3, [r3, #4]
 8015fb4:	6063      	str	r3, [r4, #4]
 8015fb6:	bf04      	itt	eq
 8015fb8:	1949      	addeq	r1, r1, r5
 8015fba:	6021      	streq	r1, [r4, #0]
 8015fbc:	6054      	str	r4, [r2, #4]
 8015fbe:	e7c7      	b.n	8015f50 <_free_r+0x28>
 8015fc0:	b003      	add	sp, #12
 8015fc2:	bd30      	pop	{r4, r5, pc}
 8015fc4:	20009d9c 	.word	0x20009d9c

08015fc8 <__ssputs_r>:
 8015fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fcc:	688e      	ldr	r6, [r1, #8]
 8015fce:	429e      	cmp	r6, r3
 8015fd0:	4682      	mov	sl, r0
 8015fd2:	460c      	mov	r4, r1
 8015fd4:	4690      	mov	r8, r2
 8015fd6:	461f      	mov	r7, r3
 8015fd8:	d838      	bhi.n	801604c <__ssputs_r+0x84>
 8015fda:	898a      	ldrh	r2, [r1, #12]
 8015fdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015fe0:	d032      	beq.n	8016048 <__ssputs_r+0x80>
 8015fe2:	6825      	ldr	r5, [r4, #0]
 8015fe4:	6909      	ldr	r1, [r1, #16]
 8015fe6:	eba5 0901 	sub.w	r9, r5, r1
 8015fea:	6965      	ldr	r5, [r4, #20]
 8015fec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015ff0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015ff4:	3301      	adds	r3, #1
 8015ff6:	444b      	add	r3, r9
 8015ff8:	106d      	asrs	r5, r5, #1
 8015ffa:	429d      	cmp	r5, r3
 8015ffc:	bf38      	it	cc
 8015ffe:	461d      	movcc	r5, r3
 8016000:	0553      	lsls	r3, r2, #21
 8016002:	d531      	bpl.n	8016068 <__ssputs_r+0xa0>
 8016004:	4629      	mov	r1, r5
 8016006:	f7fc f8d5 	bl	80121b4 <_malloc_r>
 801600a:	4606      	mov	r6, r0
 801600c:	b950      	cbnz	r0, 8016024 <__ssputs_r+0x5c>
 801600e:	230c      	movs	r3, #12
 8016010:	f8ca 3000 	str.w	r3, [sl]
 8016014:	89a3      	ldrh	r3, [r4, #12]
 8016016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801601a:	81a3      	strh	r3, [r4, #12]
 801601c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016024:	6921      	ldr	r1, [r4, #16]
 8016026:	464a      	mov	r2, r9
 8016028:	f7fc f8ad 	bl	8012186 <memcpy>
 801602c:	89a3      	ldrh	r3, [r4, #12]
 801602e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016036:	81a3      	strh	r3, [r4, #12]
 8016038:	6126      	str	r6, [r4, #16]
 801603a:	6165      	str	r5, [r4, #20]
 801603c:	444e      	add	r6, r9
 801603e:	eba5 0509 	sub.w	r5, r5, r9
 8016042:	6026      	str	r6, [r4, #0]
 8016044:	60a5      	str	r5, [r4, #8]
 8016046:	463e      	mov	r6, r7
 8016048:	42be      	cmp	r6, r7
 801604a:	d900      	bls.n	801604e <__ssputs_r+0x86>
 801604c:	463e      	mov	r6, r7
 801604e:	4632      	mov	r2, r6
 8016050:	6820      	ldr	r0, [r4, #0]
 8016052:	4641      	mov	r1, r8
 8016054:	f000 fd7c 	bl	8016b50 <memmove>
 8016058:	68a3      	ldr	r3, [r4, #8]
 801605a:	6822      	ldr	r2, [r4, #0]
 801605c:	1b9b      	subs	r3, r3, r6
 801605e:	4432      	add	r2, r6
 8016060:	60a3      	str	r3, [r4, #8]
 8016062:	6022      	str	r2, [r4, #0]
 8016064:	2000      	movs	r0, #0
 8016066:	e7db      	b.n	8016020 <__ssputs_r+0x58>
 8016068:	462a      	mov	r2, r5
 801606a:	f000 fd8b 	bl	8016b84 <_realloc_r>
 801606e:	4606      	mov	r6, r0
 8016070:	2800      	cmp	r0, #0
 8016072:	d1e1      	bne.n	8016038 <__ssputs_r+0x70>
 8016074:	6921      	ldr	r1, [r4, #16]
 8016076:	4650      	mov	r0, sl
 8016078:	f7ff ff56 	bl	8015f28 <_free_r>
 801607c:	e7c7      	b.n	801600e <__ssputs_r+0x46>
	...

08016080 <_svfiprintf_r>:
 8016080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016084:	4698      	mov	r8, r3
 8016086:	898b      	ldrh	r3, [r1, #12]
 8016088:	061b      	lsls	r3, r3, #24
 801608a:	b09d      	sub	sp, #116	; 0x74
 801608c:	4607      	mov	r7, r0
 801608e:	460d      	mov	r5, r1
 8016090:	4614      	mov	r4, r2
 8016092:	d50e      	bpl.n	80160b2 <_svfiprintf_r+0x32>
 8016094:	690b      	ldr	r3, [r1, #16]
 8016096:	b963      	cbnz	r3, 80160b2 <_svfiprintf_r+0x32>
 8016098:	2140      	movs	r1, #64	; 0x40
 801609a:	f7fc f88b 	bl	80121b4 <_malloc_r>
 801609e:	6028      	str	r0, [r5, #0]
 80160a0:	6128      	str	r0, [r5, #16]
 80160a2:	b920      	cbnz	r0, 80160ae <_svfiprintf_r+0x2e>
 80160a4:	230c      	movs	r3, #12
 80160a6:	603b      	str	r3, [r7, #0]
 80160a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80160ac:	e0d1      	b.n	8016252 <_svfiprintf_r+0x1d2>
 80160ae:	2340      	movs	r3, #64	; 0x40
 80160b0:	616b      	str	r3, [r5, #20]
 80160b2:	2300      	movs	r3, #0
 80160b4:	9309      	str	r3, [sp, #36]	; 0x24
 80160b6:	2320      	movs	r3, #32
 80160b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80160bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80160c0:	2330      	movs	r3, #48	; 0x30
 80160c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801626c <_svfiprintf_r+0x1ec>
 80160c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80160ca:	f04f 0901 	mov.w	r9, #1
 80160ce:	4623      	mov	r3, r4
 80160d0:	469a      	mov	sl, r3
 80160d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160d6:	b10a      	cbz	r2, 80160dc <_svfiprintf_r+0x5c>
 80160d8:	2a25      	cmp	r2, #37	; 0x25
 80160da:	d1f9      	bne.n	80160d0 <_svfiprintf_r+0x50>
 80160dc:	ebba 0b04 	subs.w	fp, sl, r4
 80160e0:	d00b      	beq.n	80160fa <_svfiprintf_r+0x7a>
 80160e2:	465b      	mov	r3, fp
 80160e4:	4622      	mov	r2, r4
 80160e6:	4629      	mov	r1, r5
 80160e8:	4638      	mov	r0, r7
 80160ea:	f7ff ff6d 	bl	8015fc8 <__ssputs_r>
 80160ee:	3001      	adds	r0, #1
 80160f0:	f000 80aa 	beq.w	8016248 <_svfiprintf_r+0x1c8>
 80160f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80160f6:	445a      	add	r2, fp
 80160f8:	9209      	str	r2, [sp, #36]	; 0x24
 80160fa:	f89a 3000 	ldrb.w	r3, [sl]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	f000 80a2 	beq.w	8016248 <_svfiprintf_r+0x1c8>
 8016104:	2300      	movs	r3, #0
 8016106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801610a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801610e:	f10a 0a01 	add.w	sl, sl, #1
 8016112:	9304      	str	r3, [sp, #16]
 8016114:	9307      	str	r3, [sp, #28]
 8016116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801611a:	931a      	str	r3, [sp, #104]	; 0x68
 801611c:	4654      	mov	r4, sl
 801611e:	2205      	movs	r2, #5
 8016120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016124:	4851      	ldr	r0, [pc, #324]	; (801626c <_svfiprintf_r+0x1ec>)
 8016126:	f7ea f86b 	bl	8000200 <memchr>
 801612a:	9a04      	ldr	r2, [sp, #16]
 801612c:	b9d8      	cbnz	r0, 8016166 <_svfiprintf_r+0xe6>
 801612e:	06d0      	lsls	r0, r2, #27
 8016130:	bf44      	itt	mi
 8016132:	2320      	movmi	r3, #32
 8016134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016138:	0711      	lsls	r1, r2, #28
 801613a:	bf44      	itt	mi
 801613c:	232b      	movmi	r3, #43	; 0x2b
 801613e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016142:	f89a 3000 	ldrb.w	r3, [sl]
 8016146:	2b2a      	cmp	r3, #42	; 0x2a
 8016148:	d015      	beq.n	8016176 <_svfiprintf_r+0xf6>
 801614a:	9a07      	ldr	r2, [sp, #28]
 801614c:	4654      	mov	r4, sl
 801614e:	2000      	movs	r0, #0
 8016150:	f04f 0c0a 	mov.w	ip, #10
 8016154:	4621      	mov	r1, r4
 8016156:	f811 3b01 	ldrb.w	r3, [r1], #1
 801615a:	3b30      	subs	r3, #48	; 0x30
 801615c:	2b09      	cmp	r3, #9
 801615e:	d94e      	bls.n	80161fe <_svfiprintf_r+0x17e>
 8016160:	b1b0      	cbz	r0, 8016190 <_svfiprintf_r+0x110>
 8016162:	9207      	str	r2, [sp, #28]
 8016164:	e014      	b.n	8016190 <_svfiprintf_r+0x110>
 8016166:	eba0 0308 	sub.w	r3, r0, r8
 801616a:	fa09 f303 	lsl.w	r3, r9, r3
 801616e:	4313      	orrs	r3, r2
 8016170:	9304      	str	r3, [sp, #16]
 8016172:	46a2      	mov	sl, r4
 8016174:	e7d2      	b.n	801611c <_svfiprintf_r+0x9c>
 8016176:	9b03      	ldr	r3, [sp, #12]
 8016178:	1d19      	adds	r1, r3, #4
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	9103      	str	r1, [sp, #12]
 801617e:	2b00      	cmp	r3, #0
 8016180:	bfbb      	ittet	lt
 8016182:	425b      	neglt	r3, r3
 8016184:	f042 0202 	orrlt.w	r2, r2, #2
 8016188:	9307      	strge	r3, [sp, #28]
 801618a:	9307      	strlt	r3, [sp, #28]
 801618c:	bfb8      	it	lt
 801618e:	9204      	strlt	r2, [sp, #16]
 8016190:	7823      	ldrb	r3, [r4, #0]
 8016192:	2b2e      	cmp	r3, #46	; 0x2e
 8016194:	d10c      	bne.n	80161b0 <_svfiprintf_r+0x130>
 8016196:	7863      	ldrb	r3, [r4, #1]
 8016198:	2b2a      	cmp	r3, #42	; 0x2a
 801619a:	d135      	bne.n	8016208 <_svfiprintf_r+0x188>
 801619c:	9b03      	ldr	r3, [sp, #12]
 801619e:	1d1a      	adds	r2, r3, #4
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	9203      	str	r2, [sp, #12]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	bfb8      	it	lt
 80161a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80161ac:	3402      	adds	r4, #2
 80161ae:	9305      	str	r3, [sp, #20]
 80161b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801627c <_svfiprintf_r+0x1fc>
 80161b4:	7821      	ldrb	r1, [r4, #0]
 80161b6:	2203      	movs	r2, #3
 80161b8:	4650      	mov	r0, sl
 80161ba:	f7ea f821 	bl	8000200 <memchr>
 80161be:	b140      	cbz	r0, 80161d2 <_svfiprintf_r+0x152>
 80161c0:	2340      	movs	r3, #64	; 0x40
 80161c2:	eba0 000a 	sub.w	r0, r0, sl
 80161c6:	fa03 f000 	lsl.w	r0, r3, r0
 80161ca:	9b04      	ldr	r3, [sp, #16]
 80161cc:	4303      	orrs	r3, r0
 80161ce:	3401      	adds	r4, #1
 80161d0:	9304      	str	r3, [sp, #16]
 80161d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161d6:	4826      	ldr	r0, [pc, #152]	; (8016270 <_svfiprintf_r+0x1f0>)
 80161d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80161dc:	2206      	movs	r2, #6
 80161de:	f7ea f80f 	bl	8000200 <memchr>
 80161e2:	2800      	cmp	r0, #0
 80161e4:	d038      	beq.n	8016258 <_svfiprintf_r+0x1d8>
 80161e6:	4b23      	ldr	r3, [pc, #140]	; (8016274 <_svfiprintf_r+0x1f4>)
 80161e8:	bb1b      	cbnz	r3, 8016232 <_svfiprintf_r+0x1b2>
 80161ea:	9b03      	ldr	r3, [sp, #12]
 80161ec:	3307      	adds	r3, #7
 80161ee:	f023 0307 	bic.w	r3, r3, #7
 80161f2:	3308      	adds	r3, #8
 80161f4:	9303      	str	r3, [sp, #12]
 80161f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161f8:	4433      	add	r3, r6
 80161fa:	9309      	str	r3, [sp, #36]	; 0x24
 80161fc:	e767      	b.n	80160ce <_svfiprintf_r+0x4e>
 80161fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8016202:	460c      	mov	r4, r1
 8016204:	2001      	movs	r0, #1
 8016206:	e7a5      	b.n	8016154 <_svfiprintf_r+0xd4>
 8016208:	2300      	movs	r3, #0
 801620a:	3401      	adds	r4, #1
 801620c:	9305      	str	r3, [sp, #20]
 801620e:	4619      	mov	r1, r3
 8016210:	f04f 0c0a 	mov.w	ip, #10
 8016214:	4620      	mov	r0, r4
 8016216:	f810 2b01 	ldrb.w	r2, [r0], #1
 801621a:	3a30      	subs	r2, #48	; 0x30
 801621c:	2a09      	cmp	r2, #9
 801621e:	d903      	bls.n	8016228 <_svfiprintf_r+0x1a8>
 8016220:	2b00      	cmp	r3, #0
 8016222:	d0c5      	beq.n	80161b0 <_svfiprintf_r+0x130>
 8016224:	9105      	str	r1, [sp, #20]
 8016226:	e7c3      	b.n	80161b0 <_svfiprintf_r+0x130>
 8016228:	fb0c 2101 	mla	r1, ip, r1, r2
 801622c:	4604      	mov	r4, r0
 801622e:	2301      	movs	r3, #1
 8016230:	e7f0      	b.n	8016214 <_svfiprintf_r+0x194>
 8016232:	ab03      	add	r3, sp, #12
 8016234:	9300      	str	r3, [sp, #0]
 8016236:	462a      	mov	r2, r5
 8016238:	4b0f      	ldr	r3, [pc, #60]	; (8016278 <_svfiprintf_r+0x1f8>)
 801623a:	a904      	add	r1, sp, #16
 801623c:	4638      	mov	r0, r7
 801623e:	f7fc f8b3 	bl	80123a8 <_printf_float>
 8016242:	1c42      	adds	r2, r0, #1
 8016244:	4606      	mov	r6, r0
 8016246:	d1d6      	bne.n	80161f6 <_svfiprintf_r+0x176>
 8016248:	89ab      	ldrh	r3, [r5, #12]
 801624a:	065b      	lsls	r3, r3, #25
 801624c:	f53f af2c 	bmi.w	80160a8 <_svfiprintf_r+0x28>
 8016250:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016252:	b01d      	add	sp, #116	; 0x74
 8016254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016258:	ab03      	add	r3, sp, #12
 801625a:	9300      	str	r3, [sp, #0]
 801625c:	462a      	mov	r2, r5
 801625e:	4b06      	ldr	r3, [pc, #24]	; (8016278 <_svfiprintf_r+0x1f8>)
 8016260:	a904      	add	r1, sp, #16
 8016262:	4638      	mov	r0, r7
 8016264:	f7fc fb44 	bl	80128f0 <_printf_i>
 8016268:	e7eb      	b.n	8016242 <_svfiprintf_r+0x1c2>
 801626a:	bf00      	nop
 801626c:	080179f4 	.word	0x080179f4
 8016270:	080179fe 	.word	0x080179fe
 8016274:	080123a9 	.word	0x080123a9
 8016278:	08015fc9 	.word	0x08015fc9
 801627c:	080179fa 	.word	0x080179fa

08016280 <_sungetc_r>:
 8016280:	b538      	push	{r3, r4, r5, lr}
 8016282:	1c4b      	adds	r3, r1, #1
 8016284:	4614      	mov	r4, r2
 8016286:	d103      	bne.n	8016290 <_sungetc_r+0x10>
 8016288:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801628c:	4628      	mov	r0, r5
 801628e:	bd38      	pop	{r3, r4, r5, pc}
 8016290:	8993      	ldrh	r3, [r2, #12]
 8016292:	f023 0320 	bic.w	r3, r3, #32
 8016296:	8193      	strh	r3, [r2, #12]
 8016298:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801629a:	6852      	ldr	r2, [r2, #4]
 801629c:	b2cd      	uxtb	r5, r1
 801629e:	b18b      	cbz	r3, 80162c4 <_sungetc_r+0x44>
 80162a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80162a2:	4293      	cmp	r3, r2
 80162a4:	dd08      	ble.n	80162b8 <_sungetc_r+0x38>
 80162a6:	6823      	ldr	r3, [r4, #0]
 80162a8:	1e5a      	subs	r2, r3, #1
 80162aa:	6022      	str	r2, [r4, #0]
 80162ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 80162b0:	6863      	ldr	r3, [r4, #4]
 80162b2:	3301      	adds	r3, #1
 80162b4:	6063      	str	r3, [r4, #4]
 80162b6:	e7e9      	b.n	801628c <_sungetc_r+0xc>
 80162b8:	4621      	mov	r1, r4
 80162ba:	f000 fbd1 	bl	8016a60 <__submore>
 80162be:	2800      	cmp	r0, #0
 80162c0:	d0f1      	beq.n	80162a6 <_sungetc_r+0x26>
 80162c2:	e7e1      	b.n	8016288 <_sungetc_r+0x8>
 80162c4:	6921      	ldr	r1, [r4, #16]
 80162c6:	6823      	ldr	r3, [r4, #0]
 80162c8:	b151      	cbz	r1, 80162e0 <_sungetc_r+0x60>
 80162ca:	4299      	cmp	r1, r3
 80162cc:	d208      	bcs.n	80162e0 <_sungetc_r+0x60>
 80162ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80162d2:	42a9      	cmp	r1, r5
 80162d4:	d104      	bne.n	80162e0 <_sungetc_r+0x60>
 80162d6:	3b01      	subs	r3, #1
 80162d8:	3201      	adds	r2, #1
 80162da:	6023      	str	r3, [r4, #0]
 80162dc:	6062      	str	r2, [r4, #4]
 80162de:	e7d5      	b.n	801628c <_sungetc_r+0xc>
 80162e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80162e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80162e8:	6363      	str	r3, [r4, #52]	; 0x34
 80162ea:	2303      	movs	r3, #3
 80162ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80162ee:	4623      	mov	r3, r4
 80162f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80162f4:	6023      	str	r3, [r4, #0]
 80162f6:	2301      	movs	r3, #1
 80162f8:	e7dc      	b.n	80162b4 <_sungetc_r+0x34>

080162fa <__ssrefill_r>:
 80162fa:	b510      	push	{r4, lr}
 80162fc:	460c      	mov	r4, r1
 80162fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016300:	b169      	cbz	r1, 801631e <__ssrefill_r+0x24>
 8016302:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016306:	4299      	cmp	r1, r3
 8016308:	d001      	beq.n	801630e <__ssrefill_r+0x14>
 801630a:	f7ff fe0d 	bl	8015f28 <_free_r>
 801630e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016310:	6063      	str	r3, [r4, #4]
 8016312:	2000      	movs	r0, #0
 8016314:	6360      	str	r0, [r4, #52]	; 0x34
 8016316:	b113      	cbz	r3, 801631e <__ssrefill_r+0x24>
 8016318:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801631a:	6023      	str	r3, [r4, #0]
 801631c:	bd10      	pop	{r4, pc}
 801631e:	6923      	ldr	r3, [r4, #16]
 8016320:	6023      	str	r3, [r4, #0]
 8016322:	2300      	movs	r3, #0
 8016324:	6063      	str	r3, [r4, #4]
 8016326:	89a3      	ldrh	r3, [r4, #12]
 8016328:	f043 0320 	orr.w	r3, r3, #32
 801632c:	81a3      	strh	r3, [r4, #12]
 801632e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016332:	e7f3      	b.n	801631c <__ssrefill_r+0x22>

08016334 <__ssvfiscanf_r>:
 8016334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016338:	460c      	mov	r4, r1
 801633a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801633e:	2100      	movs	r1, #0
 8016340:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016344:	49b2      	ldr	r1, [pc, #712]	; (8016610 <__ssvfiscanf_r+0x2dc>)
 8016346:	91a0      	str	r1, [sp, #640]	; 0x280
 8016348:	f10d 0804 	add.w	r8, sp, #4
 801634c:	49b1      	ldr	r1, [pc, #708]	; (8016614 <__ssvfiscanf_r+0x2e0>)
 801634e:	4fb2      	ldr	r7, [pc, #712]	; (8016618 <__ssvfiscanf_r+0x2e4>)
 8016350:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801661c <__ssvfiscanf_r+0x2e8>
 8016354:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016358:	4606      	mov	r6, r0
 801635a:	91a1      	str	r1, [sp, #644]	; 0x284
 801635c:	9300      	str	r3, [sp, #0]
 801635e:	f892 a000 	ldrb.w	sl, [r2]
 8016362:	f1ba 0f00 	cmp.w	sl, #0
 8016366:	f000 8151 	beq.w	801660c <__ssvfiscanf_r+0x2d8>
 801636a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801636e:	f013 0308 	ands.w	r3, r3, #8
 8016372:	f102 0501 	add.w	r5, r2, #1
 8016376:	d019      	beq.n	80163ac <__ssvfiscanf_r+0x78>
 8016378:	6863      	ldr	r3, [r4, #4]
 801637a:	2b00      	cmp	r3, #0
 801637c:	dd0f      	ble.n	801639e <__ssvfiscanf_r+0x6a>
 801637e:	6823      	ldr	r3, [r4, #0]
 8016380:	781a      	ldrb	r2, [r3, #0]
 8016382:	5cba      	ldrb	r2, [r7, r2]
 8016384:	0712      	lsls	r2, r2, #28
 8016386:	d401      	bmi.n	801638c <__ssvfiscanf_r+0x58>
 8016388:	462a      	mov	r2, r5
 801638a:	e7e8      	b.n	801635e <__ssvfiscanf_r+0x2a>
 801638c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801638e:	3201      	adds	r2, #1
 8016390:	9245      	str	r2, [sp, #276]	; 0x114
 8016392:	6862      	ldr	r2, [r4, #4]
 8016394:	3301      	adds	r3, #1
 8016396:	3a01      	subs	r2, #1
 8016398:	6062      	str	r2, [r4, #4]
 801639a:	6023      	str	r3, [r4, #0]
 801639c:	e7ec      	b.n	8016378 <__ssvfiscanf_r+0x44>
 801639e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80163a0:	4621      	mov	r1, r4
 80163a2:	4630      	mov	r0, r6
 80163a4:	4798      	blx	r3
 80163a6:	2800      	cmp	r0, #0
 80163a8:	d0e9      	beq.n	801637e <__ssvfiscanf_r+0x4a>
 80163aa:	e7ed      	b.n	8016388 <__ssvfiscanf_r+0x54>
 80163ac:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80163b0:	f040 8083 	bne.w	80164ba <__ssvfiscanf_r+0x186>
 80163b4:	9341      	str	r3, [sp, #260]	; 0x104
 80163b6:	9343      	str	r3, [sp, #268]	; 0x10c
 80163b8:	7853      	ldrb	r3, [r2, #1]
 80163ba:	2b2a      	cmp	r3, #42	; 0x2a
 80163bc:	bf02      	ittt	eq
 80163be:	2310      	moveq	r3, #16
 80163c0:	1c95      	addeq	r5, r2, #2
 80163c2:	9341      	streq	r3, [sp, #260]	; 0x104
 80163c4:	220a      	movs	r2, #10
 80163c6:	46ab      	mov	fp, r5
 80163c8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80163cc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80163d0:	2b09      	cmp	r3, #9
 80163d2:	d91d      	bls.n	8016410 <__ssvfiscanf_r+0xdc>
 80163d4:	4891      	ldr	r0, [pc, #580]	; (801661c <__ssvfiscanf_r+0x2e8>)
 80163d6:	2203      	movs	r2, #3
 80163d8:	f7e9 ff12 	bl	8000200 <memchr>
 80163dc:	b140      	cbz	r0, 80163f0 <__ssvfiscanf_r+0xbc>
 80163de:	2301      	movs	r3, #1
 80163e0:	eba0 0009 	sub.w	r0, r0, r9
 80163e4:	fa03 f000 	lsl.w	r0, r3, r0
 80163e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80163ea:	4318      	orrs	r0, r3
 80163ec:	9041      	str	r0, [sp, #260]	; 0x104
 80163ee:	465d      	mov	r5, fp
 80163f0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80163f4:	2b78      	cmp	r3, #120	; 0x78
 80163f6:	d806      	bhi.n	8016406 <__ssvfiscanf_r+0xd2>
 80163f8:	2b57      	cmp	r3, #87	; 0x57
 80163fa:	d810      	bhi.n	801641e <__ssvfiscanf_r+0xea>
 80163fc:	2b25      	cmp	r3, #37	; 0x25
 80163fe:	d05c      	beq.n	80164ba <__ssvfiscanf_r+0x186>
 8016400:	d856      	bhi.n	80164b0 <__ssvfiscanf_r+0x17c>
 8016402:	2b00      	cmp	r3, #0
 8016404:	d074      	beq.n	80164f0 <__ssvfiscanf_r+0x1bc>
 8016406:	2303      	movs	r3, #3
 8016408:	9347      	str	r3, [sp, #284]	; 0x11c
 801640a:	230a      	movs	r3, #10
 801640c:	9342      	str	r3, [sp, #264]	; 0x108
 801640e:	e081      	b.n	8016514 <__ssvfiscanf_r+0x1e0>
 8016410:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016412:	fb02 1303 	mla	r3, r2, r3, r1
 8016416:	3b30      	subs	r3, #48	; 0x30
 8016418:	9343      	str	r3, [sp, #268]	; 0x10c
 801641a:	465d      	mov	r5, fp
 801641c:	e7d3      	b.n	80163c6 <__ssvfiscanf_r+0x92>
 801641e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8016422:	2a20      	cmp	r2, #32
 8016424:	d8ef      	bhi.n	8016406 <__ssvfiscanf_r+0xd2>
 8016426:	a101      	add	r1, pc, #4	; (adr r1, 801642c <__ssvfiscanf_r+0xf8>)
 8016428:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801642c:	080164ff 	.word	0x080164ff
 8016430:	08016407 	.word	0x08016407
 8016434:	08016407 	.word	0x08016407
 8016438:	0801655d 	.word	0x0801655d
 801643c:	08016407 	.word	0x08016407
 8016440:	08016407 	.word	0x08016407
 8016444:	08016407 	.word	0x08016407
 8016448:	08016407 	.word	0x08016407
 801644c:	08016407 	.word	0x08016407
 8016450:	08016407 	.word	0x08016407
 8016454:	08016407 	.word	0x08016407
 8016458:	08016573 	.word	0x08016573
 801645c:	08016549 	.word	0x08016549
 8016460:	080164b7 	.word	0x080164b7
 8016464:	080164b7 	.word	0x080164b7
 8016468:	080164b7 	.word	0x080164b7
 801646c:	08016407 	.word	0x08016407
 8016470:	0801654d 	.word	0x0801654d
 8016474:	08016407 	.word	0x08016407
 8016478:	08016407 	.word	0x08016407
 801647c:	08016407 	.word	0x08016407
 8016480:	08016407 	.word	0x08016407
 8016484:	08016583 	.word	0x08016583
 8016488:	08016555 	.word	0x08016555
 801648c:	080164f7 	.word	0x080164f7
 8016490:	08016407 	.word	0x08016407
 8016494:	08016407 	.word	0x08016407
 8016498:	0801657f 	.word	0x0801657f
 801649c:	08016407 	.word	0x08016407
 80164a0:	08016549 	.word	0x08016549
 80164a4:	08016407 	.word	0x08016407
 80164a8:	08016407 	.word	0x08016407
 80164ac:	080164ff 	.word	0x080164ff
 80164b0:	3b45      	subs	r3, #69	; 0x45
 80164b2:	2b02      	cmp	r3, #2
 80164b4:	d8a7      	bhi.n	8016406 <__ssvfiscanf_r+0xd2>
 80164b6:	2305      	movs	r3, #5
 80164b8:	e02b      	b.n	8016512 <__ssvfiscanf_r+0x1de>
 80164ba:	6863      	ldr	r3, [r4, #4]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	dd0d      	ble.n	80164dc <__ssvfiscanf_r+0x1a8>
 80164c0:	6823      	ldr	r3, [r4, #0]
 80164c2:	781a      	ldrb	r2, [r3, #0]
 80164c4:	4552      	cmp	r2, sl
 80164c6:	f040 80a1 	bne.w	801660c <__ssvfiscanf_r+0x2d8>
 80164ca:	3301      	adds	r3, #1
 80164cc:	6862      	ldr	r2, [r4, #4]
 80164ce:	6023      	str	r3, [r4, #0]
 80164d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80164d2:	3a01      	subs	r2, #1
 80164d4:	3301      	adds	r3, #1
 80164d6:	6062      	str	r2, [r4, #4]
 80164d8:	9345      	str	r3, [sp, #276]	; 0x114
 80164da:	e755      	b.n	8016388 <__ssvfiscanf_r+0x54>
 80164dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80164de:	4621      	mov	r1, r4
 80164e0:	4630      	mov	r0, r6
 80164e2:	4798      	blx	r3
 80164e4:	2800      	cmp	r0, #0
 80164e6:	d0eb      	beq.n	80164c0 <__ssvfiscanf_r+0x18c>
 80164e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80164ea:	2800      	cmp	r0, #0
 80164ec:	f040 8084 	bne.w	80165f8 <__ssvfiscanf_r+0x2c4>
 80164f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80164f4:	e086      	b.n	8016604 <__ssvfiscanf_r+0x2d0>
 80164f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80164f8:	f042 0220 	orr.w	r2, r2, #32
 80164fc:	9241      	str	r2, [sp, #260]	; 0x104
 80164fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016504:	9241      	str	r2, [sp, #260]	; 0x104
 8016506:	2210      	movs	r2, #16
 8016508:	2b6f      	cmp	r3, #111	; 0x6f
 801650a:	9242      	str	r2, [sp, #264]	; 0x108
 801650c:	bf34      	ite	cc
 801650e:	2303      	movcc	r3, #3
 8016510:	2304      	movcs	r3, #4
 8016512:	9347      	str	r3, [sp, #284]	; 0x11c
 8016514:	6863      	ldr	r3, [r4, #4]
 8016516:	2b00      	cmp	r3, #0
 8016518:	dd41      	ble.n	801659e <__ssvfiscanf_r+0x26a>
 801651a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801651c:	0659      	lsls	r1, r3, #25
 801651e:	d404      	bmi.n	801652a <__ssvfiscanf_r+0x1f6>
 8016520:	6823      	ldr	r3, [r4, #0]
 8016522:	781a      	ldrb	r2, [r3, #0]
 8016524:	5cba      	ldrb	r2, [r7, r2]
 8016526:	0712      	lsls	r2, r2, #28
 8016528:	d440      	bmi.n	80165ac <__ssvfiscanf_r+0x278>
 801652a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801652c:	2b02      	cmp	r3, #2
 801652e:	dc4f      	bgt.n	80165d0 <__ssvfiscanf_r+0x29c>
 8016530:	466b      	mov	r3, sp
 8016532:	4622      	mov	r2, r4
 8016534:	a941      	add	r1, sp, #260	; 0x104
 8016536:	4630      	mov	r0, r6
 8016538:	f000 f874 	bl	8016624 <_scanf_chars>
 801653c:	2801      	cmp	r0, #1
 801653e:	d065      	beq.n	801660c <__ssvfiscanf_r+0x2d8>
 8016540:	2802      	cmp	r0, #2
 8016542:	f47f af21 	bne.w	8016388 <__ssvfiscanf_r+0x54>
 8016546:	e7cf      	b.n	80164e8 <__ssvfiscanf_r+0x1b4>
 8016548:	220a      	movs	r2, #10
 801654a:	e7dd      	b.n	8016508 <__ssvfiscanf_r+0x1d4>
 801654c:	2300      	movs	r3, #0
 801654e:	9342      	str	r3, [sp, #264]	; 0x108
 8016550:	2303      	movs	r3, #3
 8016552:	e7de      	b.n	8016512 <__ssvfiscanf_r+0x1de>
 8016554:	2308      	movs	r3, #8
 8016556:	9342      	str	r3, [sp, #264]	; 0x108
 8016558:	2304      	movs	r3, #4
 801655a:	e7da      	b.n	8016512 <__ssvfiscanf_r+0x1de>
 801655c:	4629      	mov	r1, r5
 801655e:	4640      	mov	r0, r8
 8016560:	f000 f9c6 	bl	80168f0 <__sccl>
 8016564:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801656a:	9341      	str	r3, [sp, #260]	; 0x104
 801656c:	4605      	mov	r5, r0
 801656e:	2301      	movs	r3, #1
 8016570:	e7cf      	b.n	8016512 <__ssvfiscanf_r+0x1de>
 8016572:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016578:	9341      	str	r3, [sp, #260]	; 0x104
 801657a:	2300      	movs	r3, #0
 801657c:	e7c9      	b.n	8016512 <__ssvfiscanf_r+0x1de>
 801657e:	2302      	movs	r3, #2
 8016580:	e7c7      	b.n	8016512 <__ssvfiscanf_r+0x1de>
 8016582:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016584:	06c3      	lsls	r3, r0, #27
 8016586:	f53f aeff 	bmi.w	8016388 <__ssvfiscanf_r+0x54>
 801658a:	9b00      	ldr	r3, [sp, #0]
 801658c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801658e:	1d19      	adds	r1, r3, #4
 8016590:	9100      	str	r1, [sp, #0]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	07c0      	lsls	r0, r0, #31
 8016596:	bf4c      	ite	mi
 8016598:	801a      	strhmi	r2, [r3, #0]
 801659a:	601a      	strpl	r2, [r3, #0]
 801659c:	e6f4      	b.n	8016388 <__ssvfiscanf_r+0x54>
 801659e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80165a0:	4621      	mov	r1, r4
 80165a2:	4630      	mov	r0, r6
 80165a4:	4798      	blx	r3
 80165a6:	2800      	cmp	r0, #0
 80165a8:	d0b7      	beq.n	801651a <__ssvfiscanf_r+0x1e6>
 80165aa:	e79d      	b.n	80164e8 <__ssvfiscanf_r+0x1b4>
 80165ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80165ae:	3201      	adds	r2, #1
 80165b0:	9245      	str	r2, [sp, #276]	; 0x114
 80165b2:	6862      	ldr	r2, [r4, #4]
 80165b4:	3a01      	subs	r2, #1
 80165b6:	2a00      	cmp	r2, #0
 80165b8:	6062      	str	r2, [r4, #4]
 80165ba:	dd02      	ble.n	80165c2 <__ssvfiscanf_r+0x28e>
 80165bc:	3301      	adds	r3, #1
 80165be:	6023      	str	r3, [r4, #0]
 80165c0:	e7ae      	b.n	8016520 <__ssvfiscanf_r+0x1ec>
 80165c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80165c4:	4621      	mov	r1, r4
 80165c6:	4630      	mov	r0, r6
 80165c8:	4798      	blx	r3
 80165ca:	2800      	cmp	r0, #0
 80165cc:	d0a8      	beq.n	8016520 <__ssvfiscanf_r+0x1ec>
 80165ce:	e78b      	b.n	80164e8 <__ssvfiscanf_r+0x1b4>
 80165d0:	2b04      	cmp	r3, #4
 80165d2:	dc06      	bgt.n	80165e2 <__ssvfiscanf_r+0x2ae>
 80165d4:	466b      	mov	r3, sp
 80165d6:	4622      	mov	r2, r4
 80165d8:	a941      	add	r1, sp, #260	; 0x104
 80165da:	4630      	mov	r0, r6
 80165dc:	f000 f87a 	bl	80166d4 <_scanf_i>
 80165e0:	e7ac      	b.n	801653c <__ssvfiscanf_r+0x208>
 80165e2:	4b0f      	ldr	r3, [pc, #60]	; (8016620 <__ssvfiscanf_r+0x2ec>)
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	f43f aecf 	beq.w	8016388 <__ssvfiscanf_r+0x54>
 80165ea:	466b      	mov	r3, sp
 80165ec:	4622      	mov	r2, r4
 80165ee:	a941      	add	r1, sp, #260	; 0x104
 80165f0:	4630      	mov	r0, r6
 80165f2:	f7fc faa3 	bl	8012b3c <_scanf_float>
 80165f6:	e7a1      	b.n	801653c <__ssvfiscanf_r+0x208>
 80165f8:	89a3      	ldrh	r3, [r4, #12]
 80165fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80165fe:	bf18      	it	ne
 8016600:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8016604:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8016608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801660c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801660e:	e7f9      	b.n	8016604 <__ssvfiscanf_r+0x2d0>
 8016610:	08016281 	.word	0x08016281
 8016614:	080162fb 	.word	0x080162fb
 8016618:	0801758d 	.word	0x0801758d
 801661c:	080179fa 	.word	0x080179fa
 8016620:	08012b3d 	.word	0x08012b3d

08016624 <_scanf_chars>:
 8016624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016628:	4615      	mov	r5, r2
 801662a:	688a      	ldr	r2, [r1, #8]
 801662c:	4680      	mov	r8, r0
 801662e:	460c      	mov	r4, r1
 8016630:	b932      	cbnz	r2, 8016640 <_scanf_chars+0x1c>
 8016632:	698a      	ldr	r2, [r1, #24]
 8016634:	2a00      	cmp	r2, #0
 8016636:	bf0c      	ite	eq
 8016638:	2201      	moveq	r2, #1
 801663a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 801663e:	608a      	str	r2, [r1, #8]
 8016640:	6822      	ldr	r2, [r4, #0]
 8016642:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80166d0 <_scanf_chars+0xac>
 8016646:	06d1      	lsls	r1, r2, #27
 8016648:	bf5f      	itttt	pl
 801664a:	681a      	ldrpl	r2, [r3, #0]
 801664c:	1d11      	addpl	r1, r2, #4
 801664e:	6019      	strpl	r1, [r3, #0]
 8016650:	6816      	ldrpl	r6, [r2, #0]
 8016652:	2700      	movs	r7, #0
 8016654:	69a0      	ldr	r0, [r4, #24]
 8016656:	b188      	cbz	r0, 801667c <_scanf_chars+0x58>
 8016658:	2801      	cmp	r0, #1
 801665a:	d107      	bne.n	801666c <_scanf_chars+0x48>
 801665c:	682b      	ldr	r3, [r5, #0]
 801665e:	781a      	ldrb	r2, [r3, #0]
 8016660:	6963      	ldr	r3, [r4, #20]
 8016662:	5c9b      	ldrb	r3, [r3, r2]
 8016664:	b953      	cbnz	r3, 801667c <_scanf_chars+0x58>
 8016666:	bb27      	cbnz	r7, 80166b2 <_scanf_chars+0x8e>
 8016668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801666c:	2802      	cmp	r0, #2
 801666e:	d120      	bne.n	80166b2 <_scanf_chars+0x8e>
 8016670:	682b      	ldr	r3, [r5, #0]
 8016672:	781b      	ldrb	r3, [r3, #0]
 8016674:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016678:	071b      	lsls	r3, r3, #28
 801667a:	d41a      	bmi.n	80166b2 <_scanf_chars+0x8e>
 801667c:	6823      	ldr	r3, [r4, #0]
 801667e:	06da      	lsls	r2, r3, #27
 8016680:	bf5e      	ittt	pl
 8016682:	682b      	ldrpl	r3, [r5, #0]
 8016684:	781b      	ldrbpl	r3, [r3, #0]
 8016686:	f806 3b01 	strbpl.w	r3, [r6], #1
 801668a:	682a      	ldr	r2, [r5, #0]
 801668c:	686b      	ldr	r3, [r5, #4]
 801668e:	3201      	adds	r2, #1
 8016690:	602a      	str	r2, [r5, #0]
 8016692:	68a2      	ldr	r2, [r4, #8]
 8016694:	3b01      	subs	r3, #1
 8016696:	3a01      	subs	r2, #1
 8016698:	606b      	str	r3, [r5, #4]
 801669a:	3701      	adds	r7, #1
 801669c:	60a2      	str	r2, [r4, #8]
 801669e:	b142      	cbz	r2, 80166b2 <_scanf_chars+0x8e>
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	dcd7      	bgt.n	8016654 <_scanf_chars+0x30>
 80166a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80166a8:	4629      	mov	r1, r5
 80166aa:	4640      	mov	r0, r8
 80166ac:	4798      	blx	r3
 80166ae:	2800      	cmp	r0, #0
 80166b0:	d0d0      	beq.n	8016654 <_scanf_chars+0x30>
 80166b2:	6823      	ldr	r3, [r4, #0]
 80166b4:	f013 0310 	ands.w	r3, r3, #16
 80166b8:	d105      	bne.n	80166c6 <_scanf_chars+0xa2>
 80166ba:	68e2      	ldr	r2, [r4, #12]
 80166bc:	3201      	adds	r2, #1
 80166be:	60e2      	str	r2, [r4, #12]
 80166c0:	69a2      	ldr	r2, [r4, #24]
 80166c2:	b102      	cbz	r2, 80166c6 <_scanf_chars+0xa2>
 80166c4:	7033      	strb	r3, [r6, #0]
 80166c6:	6923      	ldr	r3, [r4, #16]
 80166c8:	441f      	add	r7, r3
 80166ca:	6127      	str	r7, [r4, #16]
 80166cc:	2000      	movs	r0, #0
 80166ce:	e7cb      	b.n	8016668 <_scanf_chars+0x44>
 80166d0:	0801758d 	.word	0x0801758d

080166d4 <_scanf_i>:
 80166d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166d8:	4698      	mov	r8, r3
 80166da:	4b74      	ldr	r3, [pc, #464]	; (80168ac <_scanf_i+0x1d8>)
 80166dc:	460c      	mov	r4, r1
 80166de:	4682      	mov	sl, r0
 80166e0:	4616      	mov	r6, r2
 80166e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80166e6:	b087      	sub	sp, #28
 80166e8:	ab03      	add	r3, sp, #12
 80166ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80166ee:	4b70      	ldr	r3, [pc, #448]	; (80168b0 <_scanf_i+0x1dc>)
 80166f0:	69a1      	ldr	r1, [r4, #24]
 80166f2:	4a70      	ldr	r2, [pc, #448]	; (80168b4 <_scanf_i+0x1e0>)
 80166f4:	2903      	cmp	r1, #3
 80166f6:	bf18      	it	ne
 80166f8:	461a      	movne	r2, r3
 80166fa:	68a3      	ldr	r3, [r4, #8]
 80166fc:	9201      	str	r2, [sp, #4]
 80166fe:	1e5a      	subs	r2, r3, #1
 8016700:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016704:	bf88      	it	hi
 8016706:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801670a:	4627      	mov	r7, r4
 801670c:	bf82      	ittt	hi
 801670e:	eb03 0905 	addhi.w	r9, r3, r5
 8016712:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016716:	60a3      	strhi	r3, [r4, #8]
 8016718:	f857 3b1c 	ldr.w	r3, [r7], #28
 801671c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016720:	bf98      	it	ls
 8016722:	f04f 0900 	movls.w	r9, #0
 8016726:	6023      	str	r3, [r4, #0]
 8016728:	463d      	mov	r5, r7
 801672a:	f04f 0b00 	mov.w	fp, #0
 801672e:	6831      	ldr	r1, [r6, #0]
 8016730:	ab03      	add	r3, sp, #12
 8016732:	7809      	ldrb	r1, [r1, #0]
 8016734:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016738:	2202      	movs	r2, #2
 801673a:	f7e9 fd61 	bl	8000200 <memchr>
 801673e:	b328      	cbz	r0, 801678c <_scanf_i+0xb8>
 8016740:	f1bb 0f01 	cmp.w	fp, #1
 8016744:	d159      	bne.n	80167fa <_scanf_i+0x126>
 8016746:	6862      	ldr	r2, [r4, #4]
 8016748:	b92a      	cbnz	r2, 8016756 <_scanf_i+0x82>
 801674a:	6822      	ldr	r2, [r4, #0]
 801674c:	2308      	movs	r3, #8
 801674e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016752:	6063      	str	r3, [r4, #4]
 8016754:	6022      	str	r2, [r4, #0]
 8016756:	6822      	ldr	r2, [r4, #0]
 8016758:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801675c:	6022      	str	r2, [r4, #0]
 801675e:	68a2      	ldr	r2, [r4, #8]
 8016760:	1e51      	subs	r1, r2, #1
 8016762:	60a1      	str	r1, [r4, #8]
 8016764:	b192      	cbz	r2, 801678c <_scanf_i+0xb8>
 8016766:	6832      	ldr	r2, [r6, #0]
 8016768:	1c51      	adds	r1, r2, #1
 801676a:	6031      	str	r1, [r6, #0]
 801676c:	7812      	ldrb	r2, [r2, #0]
 801676e:	f805 2b01 	strb.w	r2, [r5], #1
 8016772:	6872      	ldr	r2, [r6, #4]
 8016774:	3a01      	subs	r2, #1
 8016776:	2a00      	cmp	r2, #0
 8016778:	6072      	str	r2, [r6, #4]
 801677a:	dc07      	bgt.n	801678c <_scanf_i+0xb8>
 801677c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016780:	4631      	mov	r1, r6
 8016782:	4650      	mov	r0, sl
 8016784:	4790      	blx	r2
 8016786:	2800      	cmp	r0, #0
 8016788:	f040 8085 	bne.w	8016896 <_scanf_i+0x1c2>
 801678c:	f10b 0b01 	add.w	fp, fp, #1
 8016790:	f1bb 0f03 	cmp.w	fp, #3
 8016794:	d1cb      	bne.n	801672e <_scanf_i+0x5a>
 8016796:	6863      	ldr	r3, [r4, #4]
 8016798:	b90b      	cbnz	r3, 801679e <_scanf_i+0xca>
 801679a:	230a      	movs	r3, #10
 801679c:	6063      	str	r3, [r4, #4]
 801679e:	6863      	ldr	r3, [r4, #4]
 80167a0:	4945      	ldr	r1, [pc, #276]	; (80168b8 <_scanf_i+0x1e4>)
 80167a2:	6960      	ldr	r0, [r4, #20]
 80167a4:	1ac9      	subs	r1, r1, r3
 80167a6:	f000 f8a3 	bl	80168f0 <__sccl>
 80167aa:	f04f 0b00 	mov.w	fp, #0
 80167ae:	68a3      	ldr	r3, [r4, #8]
 80167b0:	6822      	ldr	r2, [r4, #0]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d03d      	beq.n	8016832 <_scanf_i+0x15e>
 80167b6:	6831      	ldr	r1, [r6, #0]
 80167b8:	6960      	ldr	r0, [r4, #20]
 80167ba:	f891 c000 	ldrb.w	ip, [r1]
 80167be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80167c2:	2800      	cmp	r0, #0
 80167c4:	d035      	beq.n	8016832 <_scanf_i+0x15e>
 80167c6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80167ca:	d124      	bne.n	8016816 <_scanf_i+0x142>
 80167cc:	0510      	lsls	r0, r2, #20
 80167ce:	d522      	bpl.n	8016816 <_scanf_i+0x142>
 80167d0:	f10b 0b01 	add.w	fp, fp, #1
 80167d4:	f1b9 0f00 	cmp.w	r9, #0
 80167d8:	d003      	beq.n	80167e2 <_scanf_i+0x10e>
 80167da:	3301      	adds	r3, #1
 80167dc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80167e0:	60a3      	str	r3, [r4, #8]
 80167e2:	6873      	ldr	r3, [r6, #4]
 80167e4:	3b01      	subs	r3, #1
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	6073      	str	r3, [r6, #4]
 80167ea:	dd1b      	ble.n	8016824 <_scanf_i+0x150>
 80167ec:	6833      	ldr	r3, [r6, #0]
 80167ee:	3301      	adds	r3, #1
 80167f0:	6033      	str	r3, [r6, #0]
 80167f2:	68a3      	ldr	r3, [r4, #8]
 80167f4:	3b01      	subs	r3, #1
 80167f6:	60a3      	str	r3, [r4, #8]
 80167f8:	e7d9      	b.n	80167ae <_scanf_i+0xda>
 80167fa:	f1bb 0f02 	cmp.w	fp, #2
 80167fe:	d1ae      	bne.n	801675e <_scanf_i+0x8a>
 8016800:	6822      	ldr	r2, [r4, #0]
 8016802:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016806:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801680a:	d1bf      	bne.n	801678c <_scanf_i+0xb8>
 801680c:	2310      	movs	r3, #16
 801680e:	6063      	str	r3, [r4, #4]
 8016810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016814:	e7a2      	b.n	801675c <_scanf_i+0x88>
 8016816:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801681a:	6022      	str	r2, [r4, #0]
 801681c:	780b      	ldrb	r3, [r1, #0]
 801681e:	f805 3b01 	strb.w	r3, [r5], #1
 8016822:	e7de      	b.n	80167e2 <_scanf_i+0x10e>
 8016824:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016828:	4631      	mov	r1, r6
 801682a:	4650      	mov	r0, sl
 801682c:	4798      	blx	r3
 801682e:	2800      	cmp	r0, #0
 8016830:	d0df      	beq.n	80167f2 <_scanf_i+0x11e>
 8016832:	6823      	ldr	r3, [r4, #0]
 8016834:	05d9      	lsls	r1, r3, #23
 8016836:	d50d      	bpl.n	8016854 <_scanf_i+0x180>
 8016838:	42bd      	cmp	r5, r7
 801683a:	d909      	bls.n	8016850 <_scanf_i+0x17c>
 801683c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016840:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016844:	4632      	mov	r2, r6
 8016846:	4650      	mov	r0, sl
 8016848:	4798      	blx	r3
 801684a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 801684e:	464d      	mov	r5, r9
 8016850:	42bd      	cmp	r5, r7
 8016852:	d028      	beq.n	80168a6 <_scanf_i+0x1d2>
 8016854:	6822      	ldr	r2, [r4, #0]
 8016856:	f012 0210 	ands.w	r2, r2, #16
 801685a:	d113      	bne.n	8016884 <_scanf_i+0x1b0>
 801685c:	702a      	strb	r2, [r5, #0]
 801685e:	6863      	ldr	r3, [r4, #4]
 8016860:	9e01      	ldr	r6, [sp, #4]
 8016862:	4639      	mov	r1, r7
 8016864:	4650      	mov	r0, sl
 8016866:	47b0      	blx	r6
 8016868:	f8d8 3000 	ldr.w	r3, [r8]
 801686c:	6821      	ldr	r1, [r4, #0]
 801686e:	1d1a      	adds	r2, r3, #4
 8016870:	f8c8 2000 	str.w	r2, [r8]
 8016874:	f011 0f20 	tst.w	r1, #32
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	d00f      	beq.n	801689c <_scanf_i+0x1c8>
 801687c:	6018      	str	r0, [r3, #0]
 801687e:	68e3      	ldr	r3, [r4, #12]
 8016880:	3301      	adds	r3, #1
 8016882:	60e3      	str	r3, [r4, #12]
 8016884:	1bed      	subs	r5, r5, r7
 8016886:	44ab      	add	fp, r5
 8016888:	6925      	ldr	r5, [r4, #16]
 801688a:	445d      	add	r5, fp
 801688c:	6125      	str	r5, [r4, #16]
 801688e:	2000      	movs	r0, #0
 8016890:	b007      	add	sp, #28
 8016892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016896:	f04f 0b00 	mov.w	fp, #0
 801689a:	e7ca      	b.n	8016832 <_scanf_i+0x15e>
 801689c:	07ca      	lsls	r2, r1, #31
 801689e:	bf4c      	ite	mi
 80168a0:	8018      	strhmi	r0, [r3, #0]
 80168a2:	6018      	strpl	r0, [r3, #0]
 80168a4:	e7eb      	b.n	801687e <_scanf_i+0x1aa>
 80168a6:	2001      	movs	r0, #1
 80168a8:	e7f2      	b.n	8016890 <_scanf_i+0x1bc>
 80168aa:	bf00      	nop
 80168ac:	08017424 	.word	0x08017424
 80168b0:	08016a5d 	.word	0x08016a5d
 80168b4:	08013f09 	.word	0x08013f09
 80168b8:	08017a1e 	.word	0x08017a1e

080168bc <_read_r>:
 80168bc:	b538      	push	{r3, r4, r5, lr}
 80168be:	4d07      	ldr	r5, [pc, #28]	; (80168dc <_read_r+0x20>)
 80168c0:	4604      	mov	r4, r0
 80168c2:	4608      	mov	r0, r1
 80168c4:	4611      	mov	r1, r2
 80168c6:	2200      	movs	r2, #0
 80168c8:	602a      	str	r2, [r5, #0]
 80168ca:	461a      	mov	r2, r3
 80168cc:	f7ec fafa 	bl	8002ec4 <_read>
 80168d0:	1c43      	adds	r3, r0, #1
 80168d2:	d102      	bne.n	80168da <_read_r+0x1e>
 80168d4:	682b      	ldr	r3, [r5, #0]
 80168d6:	b103      	cbz	r3, 80168da <_read_r+0x1e>
 80168d8:	6023      	str	r3, [r4, #0]
 80168da:	bd38      	pop	{r3, r4, r5, pc}
 80168dc:	2000c37c 	.word	0x2000c37c

080168e0 <nan>:
 80168e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80168e8 <nan+0x8>
 80168e4:	4770      	bx	lr
 80168e6:	bf00      	nop
 80168e8:	00000000 	.word	0x00000000
 80168ec:	7ff80000 	.word	0x7ff80000

080168f0 <__sccl>:
 80168f0:	b570      	push	{r4, r5, r6, lr}
 80168f2:	780b      	ldrb	r3, [r1, #0]
 80168f4:	4604      	mov	r4, r0
 80168f6:	2b5e      	cmp	r3, #94	; 0x5e
 80168f8:	bf0b      	itete	eq
 80168fa:	784b      	ldrbeq	r3, [r1, #1]
 80168fc:	1c48      	addne	r0, r1, #1
 80168fe:	1c88      	addeq	r0, r1, #2
 8016900:	2200      	movne	r2, #0
 8016902:	bf08      	it	eq
 8016904:	2201      	moveq	r2, #1
 8016906:	1e61      	subs	r1, r4, #1
 8016908:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801690c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016910:	42a9      	cmp	r1, r5
 8016912:	d1fb      	bne.n	801690c <__sccl+0x1c>
 8016914:	b90b      	cbnz	r3, 801691a <__sccl+0x2a>
 8016916:	3801      	subs	r0, #1
 8016918:	bd70      	pop	{r4, r5, r6, pc}
 801691a:	f082 0101 	eor.w	r1, r2, #1
 801691e:	54e1      	strb	r1, [r4, r3]
 8016920:	1c42      	adds	r2, r0, #1
 8016922:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8016926:	2d2d      	cmp	r5, #45	; 0x2d
 8016928:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 801692c:	4610      	mov	r0, r2
 801692e:	d006      	beq.n	801693e <__sccl+0x4e>
 8016930:	2d5d      	cmp	r5, #93	; 0x5d
 8016932:	d0f1      	beq.n	8016918 <__sccl+0x28>
 8016934:	b90d      	cbnz	r5, 801693a <__sccl+0x4a>
 8016936:	4630      	mov	r0, r6
 8016938:	e7ee      	b.n	8016918 <__sccl+0x28>
 801693a:	462b      	mov	r3, r5
 801693c:	e7ef      	b.n	801691e <__sccl+0x2e>
 801693e:	7816      	ldrb	r6, [r2, #0]
 8016940:	2e5d      	cmp	r6, #93	; 0x5d
 8016942:	d0fa      	beq.n	801693a <__sccl+0x4a>
 8016944:	42b3      	cmp	r3, r6
 8016946:	dcf8      	bgt.n	801693a <__sccl+0x4a>
 8016948:	4618      	mov	r0, r3
 801694a:	3001      	adds	r0, #1
 801694c:	4286      	cmp	r6, r0
 801694e:	5421      	strb	r1, [r4, r0]
 8016950:	dcfb      	bgt.n	801694a <__sccl+0x5a>
 8016952:	43d8      	mvns	r0, r3
 8016954:	4430      	add	r0, r6
 8016956:	1c5d      	adds	r5, r3, #1
 8016958:	42b3      	cmp	r3, r6
 801695a:	bfa8      	it	ge
 801695c:	2000      	movge	r0, #0
 801695e:	182b      	adds	r3, r5, r0
 8016960:	3202      	adds	r2, #2
 8016962:	e7de      	b.n	8016922 <__sccl+0x32>

08016964 <_strtoul_l.isra.0>:
 8016964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016968:	4e3b      	ldr	r6, [pc, #236]	; (8016a58 <_strtoul_l.isra.0+0xf4>)
 801696a:	4686      	mov	lr, r0
 801696c:	468c      	mov	ip, r1
 801696e:	4660      	mov	r0, ip
 8016970:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8016974:	5da5      	ldrb	r5, [r4, r6]
 8016976:	f015 0508 	ands.w	r5, r5, #8
 801697a:	d1f8      	bne.n	801696e <_strtoul_l.isra.0+0xa>
 801697c:	2c2d      	cmp	r4, #45	; 0x2d
 801697e:	d134      	bne.n	80169ea <_strtoul_l.isra.0+0x86>
 8016980:	f89c 4000 	ldrb.w	r4, [ip]
 8016984:	f04f 0801 	mov.w	r8, #1
 8016988:	f100 0c02 	add.w	ip, r0, #2
 801698c:	2b00      	cmp	r3, #0
 801698e:	d05e      	beq.n	8016a4e <_strtoul_l.isra.0+0xea>
 8016990:	2b10      	cmp	r3, #16
 8016992:	d10c      	bne.n	80169ae <_strtoul_l.isra.0+0x4a>
 8016994:	2c30      	cmp	r4, #48	; 0x30
 8016996:	d10a      	bne.n	80169ae <_strtoul_l.isra.0+0x4a>
 8016998:	f89c 0000 	ldrb.w	r0, [ip]
 801699c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80169a0:	2858      	cmp	r0, #88	; 0x58
 80169a2:	d14f      	bne.n	8016a44 <_strtoul_l.isra.0+0xe0>
 80169a4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80169a8:	2310      	movs	r3, #16
 80169aa:	f10c 0c02 	add.w	ip, ip, #2
 80169ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80169b2:	2500      	movs	r5, #0
 80169b4:	fbb7 f7f3 	udiv	r7, r7, r3
 80169b8:	fb03 f907 	mul.w	r9, r3, r7
 80169bc:	ea6f 0909 	mvn.w	r9, r9
 80169c0:	4628      	mov	r0, r5
 80169c2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80169c6:	2e09      	cmp	r6, #9
 80169c8:	d818      	bhi.n	80169fc <_strtoul_l.isra.0+0x98>
 80169ca:	4634      	mov	r4, r6
 80169cc:	42a3      	cmp	r3, r4
 80169ce:	dd24      	ble.n	8016a1a <_strtoul_l.isra.0+0xb6>
 80169d0:	2d00      	cmp	r5, #0
 80169d2:	db1f      	blt.n	8016a14 <_strtoul_l.isra.0+0xb0>
 80169d4:	4287      	cmp	r7, r0
 80169d6:	d31d      	bcc.n	8016a14 <_strtoul_l.isra.0+0xb0>
 80169d8:	d101      	bne.n	80169de <_strtoul_l.isra.0+0x7a>
 80169da:	45a1      	cmp	r9, r4
 80169dc:	db1a      	blt.n	8016a14 <_strtoul_l.isra.0+0xb0>
 80169de:	fb00 4003 	mla	r0, r0, r3, r4
 80169e2:	2501      	movs	r5, #1
 80169e4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80169e8:	e7eb      	b.n	80169c2 <_strtoul_l.isra.0+0x5e>
 80169ea:	2c2b      	cmp	r4, #43	; 0x2b
 80169ec:	bf08      	it	eq
 80169ee:	f89c 4000 	ldrbeq.w	r4, [ip]
 80169f2:	46a8      	mov	r8, r5
 80169f4:	bf08      	it	eq
 80169f6:	f100 0c02 	addeq.w	ip, r0, #2
 80169fa:	e7c7      	b.n	801698c <_strtoul_l.isra.0+0x28>
 80169fc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8016a00:	2e19      	cmp	r6, #25
 8016a02:	d801      	bhi.n	8016a08 <_strtoul_l.isra.0+0xa4>
 8016a04:	3c37      	subs	r4, #55	; 0x37
 8016a06:	e7e1      	b.n	80169cc <_strtoul_l.isra.0+0x68>
 8016a08:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8016a0c:	2e19      	cmp	r6, #25
 8016a0e:	d804      	bhi.n	8016a1a <_strtoul_l.isra.0+0xb6>
 8016a10:	3c57      	subs	r4, #87	; 0x57
 8016a12:	e7db      	b.n	80169cc <_strtoul_l.isra.0+0x68>
 8016a14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016a18:	e7e4      	b.n	80169e4 <_strtoul_l.isra.0+0x80>
 8016a1a:	2d00      	cmp	r5, #0
 8016a1c:	da07      	bge.n	8016a2e <_strtoul_l.isra.0+0xca>
 8016a1e:	2322      	movs	r3, #34	; 0x22
 8016a20:	f8ce 3000 	str.w	r3, [lr]
 8016a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a28:	b942      	cbnz	r2, 8016a3c <_strtoul_l.isra.0+0xd8>
 8016a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a2e:	f1b8 0f00 	cmp.w	r8, #0
 8016a32:	d000      	beq.n	8016a36 <_strtoul_l.isra.0+0xd2>
 8016a34:	4240      	negs	r0, r0
 8016a36:	2a00      	cmp	r2, #0
 8016a38:	d0f7      	beq.n	8016a2a <_strtoul_l.isra.0+0xc6>
 8016a3a:	b10d      	cbz	r5, 8016a40 <_strtoul_l.isra.0+0xdc>
 8016a3c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8016a40:	6011      	str	r1, [r2, #0]
 8016a42:	e7f2      	b.n	8016a2a <_strtoul_l.isra.0+0xc6>
 8016a44:	2430      	movs	r4, #48	; 0x30
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d1b1      	bne.n	80169ae <_strtoul_l.isra.0+0x4a>
 8016a4a:	2308      	movs	r3, #8
 8016a4c:	e7af      	b.n	80169ae <_strtoul_l.isra.0+0x4a>
 8016a4e:	2c30      	cmp	r4, #48	; 0x30
 8016a50:	d0a2      	beq.n	8016998 <_strtoul_l.isra.0+0x34>
 8016a52:	230a      	movs	r3, #10
 8016a54:	e7ab      	b.n	80169ae <_strtoul_l.isra.0+0x4a>
 8016a56:	bf00      	nop
 8016a58:	0801758d 	.word	0x0801758d

08016a5c <_strtoul_r>:
 8016a5c:	f7ff bf82 	b.w	8016964 <_strtoul_l.isra.0>

08016a60 <__submore>:
 8016a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a64:	460c      	mov	r4, r1
 8016a66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016a6c:	4299      	cmp	r1, r3
 8016a6e:	d11d      	bne.n	8016aac <__submore+0x4c>
 8016a70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016a74:	f7fb fb9e 	bl	80121b4 <_malloc_r>
 8016a78:	b918      	cbnz	r0, 8016a82 <__submore+0x22>
 8016a7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016a86:	63a3      	str	r3, [r4, #56]	; 0x38
 8016a88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016a8c:	6360      	str	r0, [r4, #52]	; 0x34
 8016a8e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016a92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016a96:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016a9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016a9e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016aa2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016aa6:	6020      	str	r0, [r4, #0]
 8016aa8:	2000      	movs	r0, #0
 8016aaa:	e7e8      	b.n	8016a7e <__submore+0x1e>
 8016aac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016aae:	0077      	lsls	r7, r6, #1
 8016ab0:	463a      	mov	r2, r7
 8016ab2:	f000 f867 	bl	8016b84 <_realloc_r>
 8016ab6:	4605      	mov	r5, r0
 8016ab8:	2800      	cmp	r0, #0
 8016aba:	d0de      	beq.n	8016a7a <__submore+0x1a>
 8016abc:	eb00 0806 	add.w	r8, r0, r6
 8016ac0:	4601      	mov	r1, r0
 8016ac2:	4632      	mov	r2, r6
 8016ac4:	4640      	mov	r0, r8
 8016ac6:	f7fb fb5e 	bl	8012186 <memcpy>
 8016aca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016ace:	f8c4 8000 	str.w	r8, [r4]
 8016ad2:	e7e9      	b.n	8016aa8 <__submore+0x48>

08016ad4 <__ascii_wctomb>:
 8016ad4:	b149      	cbz	r1, 8016aea <__ascii_wctomb+0x16>
 8016ad6:	2aff      	cmp	r2, #255	; 0xff
 8016ad8:	bf85      	ittet	hi
 8016ada:	238a      	movhi	r3, #138	; 0x8a
 8016adc:	6003      	strhi	r3, [r0, #0]
 8016ade:	700a      	strbls	r2, [r1, #0]
 8016ae0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8016ae4:	bf98      	it	ls
 8016ae6:	2001      	movls	r0, #1
 8016ae8:	4770      	bx	lr
 8016aea:	4608      	mov	r0, r1
 8016aec:	4770      	bx	lr
	...

08016af0 <__assert_func>:
 8016af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016af2:	4614      	mov	r4, r2
 8016af4:	461a      	mov	r2, r3
 8016af6:	4b09      	ldr	r3, [pc, #36]	; (8016b1c <__assert_func+0x2c>)
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	4605      	mov	r5, r0
 8016afc:	68d8      	ldr	r0, [r3, #12]
 8016afe:	b14c      	cbz	r4, 8016b14 <__assert_func+0x24>
 8016b00:	4b07      	ldr	r3, [pc, #28]	; (8016b20 <__assert_func+0x30>)
 8016b02:	9100      	str	r1, [sp, #0]
 8016b04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016b08:	4906      	ldr	r1, [pc, #24]	; (8016b24 <__assert_func+0x34>)
 8016b0a:	462b      	mov	r3, r5
 8016b0c:	f000 f80e 	bl	8016b2c <fiprintf>
 8016b10:	f000 fa78 	bl	8017004 <abort>
 8016b14:	4b04      	ldr	r3, [pc, #16]	; (8016b28 <__assert_func+0x38>)
 8016b16:	461c      	mov	r4, r3
 8016b18:	e7f3      	b.n	8016b02 <__assert_func+0x12>
 8016b1a:	bf00      	nop
 8016b1c:	2000019c 	.word	0x2000019c
 8016b20:	08017a20 	.word	0x08017a20
 8016b24:	08017a2d 	.word	0x08017a2d
 8016b28:	08017a5b 	.word	0x08017a5b

08016b2c <fiprintf>:
 8016b2c:	b40e      	push	{r1, r2, r3}
 8016b2e:	b503      	push	{r0, r1, lr}
 8016b30:	4601      	mov	r1, r0
 8016b32:	ab03      	add	r3, sp, #12
 8016b34:	4805      	ldr	r0, [pc, #20]	; (8016b4c <fiprintf+0x20>)
 8016b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b3a:	6800      	ldr	r0, [r0, #0]
 8016b3c:	9301      	str	r3, [sp, #4]
 8016b3e:	f000 f871 	bl	8016c24 <_vfiprintf_r>
 8016b42:	b002      	add	sp, #8
 8016b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b48:	b003      	add	sp, #12
 8016b4a:	4770      	bx	lr
 8016b4c:	2000019c 	.word	0x2000019c

08016b50 <memmove>:
 8016b50:	4288      	cmp	r0, r1
 8016b52:	b510      	push	{r4, lr}
 8016b54:	eb01 0402 	add.w	r4, r1, r2
 8016b58:	d902      	bls.n	8016b60 <memmove+0x10>
 8016b5a:	4284      	cmp	r4, r0
 8016b5c:	4623      	mov	r3, r4
 8016b5e:	d807      	bhi.n	8016b70 <memmove+0x20>
 8016b60:	1e43      	subs	r3, r0, #1
 8016b62:	42a1      	cmp	r1, r4
 8016b64:	d008      	beq.n	8016b78 <memmove+0x28>
 8016b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016b6e:	e7f8      	b.n	8016b62 <memmove+0x12>
 8016b70:	4402      	add	r2, r0
 8016b72:	4601      	mov	r1, r0
 8016b74:	428a      	cmp	r2, r1
 8016b76:	d100      	bne.n	8016b7a <memmove+0x2a>
 8016b78:	bd10      	pop	{r4, pc}
 8016b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016b82:	e7f7      	b.n	8016b74 <memmove+0x24>

08016b84 <_realloc_r>:
 8016b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b86:	4607      	mov	r7, r0
 8016b88:	4614      	mov	r4, r2
 8016b8a:	460e      	mov	r6, r1
 8016b8c:	b921      	cbnz	r1, 8016b98 <_realloc_r+0x14>
 8016b8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016b92:	4611      	mov	r1, r2
 8016b94:	f7fb bb0e 	b.w	80121b4 <_malloc_r>
 8016b98:	b922      	cbnz	r2, 8016ba4 <_realloc_r+0x20>
 8016b9a:	f7ff f9c5 	bl	8015f28 <_free_r>
 8016b9e:	4625      	mov	r5, r4
 8016ba0:	4628      	mov	r0, r5
 8016ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ba4:	f000 fa9a 	bl	80170dc <_malloc_usable_size_r>
 8016ba8:	42a0      	cmp	r0, r4
 8016baa:	d20f      	bcs.n	8016bcc <_realloc_r+0x48>
 8016bac:	4621      	mov	r1, r4
 8016bae:	4638      	mov	r0, r7
 8016bb0:	f7fb fb00 	bl	80121b4 <_malloc_r>
 8016bb4:	4605      	mov	r5, r0
 8016bb6:	2800      	cmp	r0, #0
 8016bb8:	d0f2      	beq.n	8016ba0 <_realloc_r+0x1c>
 8016bba:	4631      	mov	r1, r6
 8016bbc:	4622      	mov	r2, r4
 8016bbe:	f7fb fae2 	bl	8012186 <memcpy>
 8016bc2:	4631      	mov	r1, r6
 8016bc4:	4638      	mov	r0, r7
 8016bc6:	f7ff f9af 	bl	8015f28 <_free_r>
 8016bca:	e7e9      	b.n	8016ba0 <_realloc_r+0x1c>
 8016bcc:	4635      	mov	r5, r6
 8016bce:	e7e7      	b.n	8016ba0 <_realloc_r+0x1c>

08016bd0 <__sfputc_r>:
 8016bd0:	6893      	ldr	r3, [r2, #8]
 8016bd2:	3b01      	subs	r3, #1
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	b410      	push	{r4}
 8016bd8:	6093      	str	r3, [r2, #8]
 8016bda:	da08      	bge.n	8016bee <__sfputc_r+0x1e>
 8016bdc:	6994      	ldr	r4, [r2, #24]
 8016bde:	42a3      	cmp	r3, r4
 8016be0:	db01      	blt.n	8016be6 <__sfputc_r+0x16>
 8016be2:	290a      	cmp	r1, #10
 8016be4:	d103      	bne.n	8016bee <__sfputc_r+0x1e>
 8016be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bea:	f000 b94b 	b.w	8016e84 <__swbuf_r>
 8016bee:	6813      	ldr	r3, [r2, #0]
 8016bf0:	1c58      	adds	r0, r3, #1
 8016bf2:	6010      	str	r0, [r2, #0]
 8016bf4:	7019      	strb	r1, [r3, #0]
 8016bf6:	4608      	mov	r0, r1
 8016bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bfc:	4770      	bx	lr

08016bfe <__sfputs_r>:
 8016bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c00:	4606      	mov	r6, r0
 8016c02:	460f      	mov	r7, r1
 8016c04:	4614      	mov	r4, r2
 8016c06:	18d5      	adds	r5, r2, r3
 8016c08:	42ac      	cmp	r4, r5
 8016c0a:	d101      	bne.n	8016c10 <__sfputs_r+0x12>
 8016c0c:	2000      	movs	r0, #0
 8016c0e:	e007      	b.n	8016c20 <__sfputs_r+0x22>
 8016c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c14:	463a      	mov	r2, r7
 8016c16:	4630      	mov	r0, r6
 8016c18:	f7ff ffda 	bl	8016bd0 <__sfputc_r>
 8016c1c:	1c43      	adds	r3, r0, #1
 8016c1e:	d1f3      	bne.n	8016c08 <__sfputs_r+0xa>
 8016c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016c24 <_vfiprintf_r>:
 8016c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c28:	460d      	mov	r5, r1
 8016c2a:	b09d      	sub	sp, #116	; 0x74
 8016c2c:	4614      	mov	r4, r2
 8016c2e:	4698      	mov	r8, r3
 8016c30:	4606      	mov	r6, r0
 8016c32:	b118      	cbz	r0, 8016c3c <_vfiprintf_r+0x18>
 8016c34:	6983      	ldr	r3, [r0, #24]
 8016c36:	b90b      	cbnz	r3, 8016c3c <_vfiprintf_r+0x18>
 8016c38:	f7fb f9e0 	bl	8011ffc <__sinit>
 8016c3c:	4b89      	ldr	r3, [pc, #548]	; (8016e64 <_vfiprintf_r+0x240>)
 8016c3e:	429d      	cmp	r5, r3
 8016c40:	d11b      	bne.n	8016c7a <_vfiprintf_r+0x56>
 8016c42:	6875      	ldr	r5, [r6, #4]
 8016c44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c46:	07d9      	lsls	r1, r3, #31
 8016c48:	d405      	bmi.n	8016c56 <_vfiprintf_r+0x32>
 8016c4a:	89ab      	ldrh	r3, [r5, #12]
 8016c4c:	059a      	lsls	r2, r3, #22
 8016c4e:	d402      	bmi.n	8016c56 <_vfiprintf_r+0x32>
 8016c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016c52:	f7fb fa96 	bl	8012182 <__retarget_lock_acquire_recursive>
 8016c56:	89ab      	ldrh	r3, [r5, #12]
 8016c58:	071b      	lsls	r3, r3, #28
 8016c5a:	d501      	bpl.n	8016c60 <_vfiprintf_r+0x3c>
 8016c5c:	692b      	ldr	r3, [r5, #16]
 8016c5e:	b9eb      	cbnz	r3, 8016c9c <_vfiprintf_r+0x78>
 8016c60:	4629      	mov	r1, r5
 8016c62:	4630      	mov	r0, r6
 8016c64:	f000 f960 	bl	8016f28 <__swsetup_r>
 8016c68:	b1c0      	cbz	r0, 8016c9c <_vfiprintf_r+0x78>
 8016c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c6c:	07dc      	lsls	r4, r3, #31
 8016c6e:	d50e      	bpl.n	8016c8e <_vfiprintf_r+0x6a>
 8016c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c74:	b01d      	add	sp, #116	; 0x74
 8016c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c7a:	4b7b      	ldr	r3, [pc, #492]	; (8016e68 <_vfiprintf_r+0x244>)
 8016c7c:	429d      	cmp	r5, r3
 8016c7e:	d101      	bne.n	8016c84 <_vfiprintf_r+0x60>
 8016c80:	68b5      	ldr	r5, [r6, #8]
 8016c82:	e7df      	b.n	8016c44 <_vfiprintf_r+0x20>
 8016c84:	4b79      	ldr	r3, [pc, #484]	; (8016e6c <_vfiprintf_r+0x248>)
 8016c86:	429d      	cmp	r5, r3
 8016c88:	bf08      	it	eq
 8016c8a:	68f5      	ldreq	r5, [r6, #12]
 8016c8c:	e7da      	b.n	8016c44 <_vfiprintf_r+0x20>
 8016c8e:	89ab      	ldrh	r3, [r5, #12]
 8016c90:	0598      	lsls	r0, r3, #22
 8016c92:	d4ed      	bmi.n	8016c70 <_vfiprintf_r+0x4c>
 8016c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016c96:	f7fb fa75 	bl	8012184 <__retarget_lock_release_recursive>
 8016c9a:	e7e9      	b.n	8016c70 <_vfiprintf_r+0x4c>
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8016ca0:	2320      	movs	r3, #32
 8016ca2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016ca6:	f8cd 800c 	str.w	r8, [sp, #12]
 8016caa:	2330      	movs	r3, #48	; 0x30
 8016cac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016e70 <_vfiprintf_r+0x24c>
 8016cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016cb4:	f04f 0901 	mov.w	r9, #1
 8016cb8:	4623      	mov	r3, r4
 8016cba:	469a      	mov	sl, r3
 8016cbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016cc0:	b10a      	cbz	r2, 8016cc6 <_vfiprintf_r+0xa2>
 8016cc2:	2a25      	cmp	r2, #37	; 0x25
 8016cc4:	d1f9      	bne.n	8016cba <_vfiprintf_r+0x96>
 8016cc6:	ebba 0b04 	subs.w	fp, sl, r4
 8016cca:	d00b      	beq.n	8016ce4 <_vfiprintf_r+0xc0>
 8016ccc:	465b      	mov	r3, fp
 8016cce:	4622      	mov	r2, r4
 8016cd0:	4629      	mov	r1, r5
 8016cd2:	4630      	mov	r0, r6
 8016cd4:	f7ff ff93 	bl	8016bfe <__sfputs_r>
 8016cd8:	3001      	adds	r0, #1
 8016cda:	f000 80aa 	beq.w	8016e32 <_vfiprintf_r+0x20e>
 8016cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ce0:	445a      	add	r2, fp
 8016ce2:	9209      	str	r2, [sp, #36]	; 0x24
 8016ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	f000 80a2 	beq.w	8016e32 <_vfiprintf_r+0x20e>
 8016cee:	2300      	movs	r3, #0
 8016cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016cf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016cf8:	f10a 0a01 	add.w	sl, sl, #1
 8016cfc:	9304      	str	r3, [sp, #16]
 8016cfe:	9307      	str	r3, [sp, #28]
 8016d00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016d04:	931a      	str	r3, [sp, #104]	; 0x68
 8016d06:	4654      	mov	r4, sl
 8016d08:	2205      	movs	r2, #5
 8016d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d0e:	4858      	ldr	r0, [pc, #352]	; (8016e70 <_vfiprintf_r+0x24c>)
 8016d10:	f7e9 fa76 	bl	8000200 <memchr>
 8016d14:	9a04      	ldr	r2, [sp, #16]
 8016d16:	b9d8      	cbnz	r0, 8016d50 <_vfiprintf_r+0x12c>
 8016d18:	06d1      	lsls	r1, r2, #27
 8016d1a:	bf44      	itt	mi
 8016d1c:	2320      	movmi	r3, #32
 8016d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d22:	0713      	lsls	r3, r2, #28
 8016d24:	bf44      	itt	mi
 8016d26:	232b      	movmi	r3, #43	; 0x2b
 8016d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8016d30:	2b2a      	cmp	r3, #42	; 0x2a
 8016d32:	d015      	beq.n	8016d60 <_vfiprintf_r+0x13c>
 8016d34:	9a07      	ldr	r2, [sp, #28]
 8016d36:	4654      	mov	r4, sl
 8016d38:	2000      	movs	r0, #0
 8016d3a:	f04f 0c0a 	mov.w	ip, #10
 8016d3e:	4621      	mov	r1, r4
 8016d40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d44:	3b30      	subs	r3, #48	; 0x30
 8016d46:	2b09      	cmp	r3, #9
 8016d48:	d94e      	bls.n	8016de8 <_vfiprintf_r+0x1c4>
 8016d4a:	b1b0      	cbz	r0, 8016d7a <_vfiprintf_r+0x156>
 8016d4c:	9207      	str	r2, [sp, #28]
 8016d4e:	e014      	b.n	8016d7a <_vfiprintf_r+0x156>
 8016d50:	eba0 0308 	sub.w	r3, r0, r8
 8016d54:	fa09 f303 	lsl.w	r3, r9, r3
 8016d58:	4313      	orrs	r3, r2
 8016d5a:	9304      	str	r3, [sp, #16]
 8016d5c:	46a2      	mov	sl, r4
 8016d5e:	e7d2      	b.n	8016d06 <_vfiprintf_r+0xe2>
 8016d60:	9b03      	ldr	r3, [sp, #12]
 8016d62:	1d19      	adds	r1, r3, #4
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	9103      	str	r1, [sp, #12]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	bfbb      	ittet	lt
 8016d6c:	425b      	neglt	r3, r3
 8016d6e:	f042 0202 	orrlt.w	r2, r2, #2
 8016d72:	9307      	strge	r3, [sp, #28]
 8016d74:	9307      	strlt	r3, [sp, #28]
 8016d76:	bfb8      	it	lt
 8016d78:	9204      	strlt	r2, [sp, #16]
 8016d7a:	7823      	ldrb	r3, [r4, #0]
 8016d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8016d7e:	d10c      	bne.n	8016d9a <_vfiprintf_r+0x176>
 8016d80:	7863      	ldrb	r3, [r4, #1]
 8016d82:	2b2a      	cmp	r3, #42	; 0x2a
 8016d84:	d135      	bne.n	8016df2 <_vfiprintf_r+0x1ce>
 8016d86:	9b03      	ldr	r3, [sp, #12]
 8016d88:	1d1a      	adds	r2, r3, #4
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	9203      	str	r2, [sp, #12]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	bfb8      	it	lt
 8016d92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016d96:	3402      	adds	r4, #2
 8016d98:	9305      	str	r3, [sp, #20]
 8016d9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016e80 <_vfiprintf_r+0x25c>
 8016d9e:	7821      	ldrb	r1, [r4, #0]
 8016da0:	2203      	movs	r2, #3
 8016da2:	4650      	mov	r0, sl
 8016da4:	f7e9 fa2c 	bl	8000200 <memchr>
 8016da8:	b140      	cbz	r0, 8016dbc <_vfiprintf_r+0x198>
 8016daa:	2340      	movs	r3, #64	; 0x40
 8016dac:	eba0 000a 	sub.w	r0, r0, sl
 8016db0:	fa03 f000 	lsl.w	r0, r3, r0
 8016db4:	9b04      	ldr	r3, [sp, #16]
 8016db6:	4303      	orrs	r3, r0
 8016db8:	3401      	adds	r4, #1
 8016dba:	9304      	str	r3, [sp, #16]
 8016dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016dc0:	482c      	ldr	r0, [pc, #176]	; (8016e74 <_vfiprintf_r+0x250>)
 8016dc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016dc6:	2206      	movs	r2, #6
 8016dc8:	f7e9 fa1a 	bl	8000200 <memchr>
 8016dcc:	2800      	cmp	r0, #0
 8016dce:	d03f      	beq.n	8016e50 <_vfiprintf_r+0x22c>
 8016dd0:	4b29      	ldr	r3, [pc, #164]	; (8016e78 <_vfiprintf_r+0x254>)
 8016dd2:	bb1b      	cbnz	r3, 8016e1c <_vfiprintf_r+0x1f8>
 8016dd4:	9b03      	ldr	r3, [sp, #12]
 8016dd6:	3307      	adds	r3, #7
 8016dd8:	f023 0307 	bic.w	r3, r3, #7
 8016ddc:	3308      	adds	r3, #8
 8016dde:	9303      	str	r3, [sp, #12]
 8016de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016de2:	443b      	add	r3, r7
 8016de4:	9309      	str	r3, [sp, #36]	; 0x24
 8016de6:	e767      	b.n	8016cb8 <_vfiprintf_r+0x94>
 8016de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8016dec:	460c      	mov	r4, r1
 8016dee:	2001      	movs	r0, #1
 8016df0:	e7a5      	b.n	8016d3e <_vfiprintf_r+0x11a>
 8016df2:	2300      	movs	r3, #0
 8016df4:	3401      	adds	r4, #1
 8016df6:	9305      	str	r3, [sp, #20]
 8016df8:	4619      	mov	r1, r3
 8016dfa:	f04f 0c0a 	mov.w	ip, #10
 8016dfe:	4620      	mov	r0, r4
 8016e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e04:	3a30      	subs	r2, #48	; 0x30
 8016e06:	2a09      	cmp	r2, #9
 8016e08:	d903      	bls.n	8016e12 <_vfiprintf_r+0x1ee>
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d0c5      	beq.n	8016d9a <_vfiprintf_r+0x176>
 8016e0e:	9105      	str	r1, [sp, #20]
 8016e10:	e7c3      	b.n	8016d9a <_vfiprintf_r+0x176>
 8016e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8016e16:	4604      	mov	r4, r0
 8016e18:	2301      	movs	r3, #1
 8016e1a:	e7f0      	b.n	8016dfe <_vfiprintf_r+0x1da>
 8016e1c:	ab03      	add	r3, sp, #12
 8016e1e:	9300      	str	r3, [sp, #0]
 8016e20:	462a      	mov	r2, r5
 8016e22:	4b16      	ldr	r3, [pc, #88]	; (8016e7c <_vfiprintf_r+0x258>)
 8016e24:	a904      	add	r1, sp, #16
 8016e26:	4630      	mov	r0, r6
 8016e28:	f7fb fabe 	bl	80123a8 <_printf_float>
 8016e2c:	4607      	mov	r7, r0
 8016e2e:	1c78      	adds	r0, r7, #1
 8016e30:	d1d6      	bne.n	8016de0 <_vfiprintf_r+0x1bc>
 8016e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016e34:	07d9      	lsls	r1, r3, #31
 8016e36:	d405      	bmi.n	8016e44 <_vfiprintf_r+0x220>
 8016e38:	89ab      	ldrh	r3, [r5, #12]
 8016e3a:	059a      	lsls	r2, r3, #22
 8016e3c:	d402      	bmi.n	8016e44 <_vfiprintf_r+0x220>
 8016e3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016e40:	f7fb f9a0 	bl	8012184 <__retarget_lock_release_recursive>
 8016e44:	89ab      	ldrh	r3, [r5, #12]
 8016e46:	065b      	lsls	r3, r3, #25
 8016e48:	f53f af12 	bmi.w	8016c70 <_vfiprintf_r+0x4c>
 8016e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e4e:	e711      	b.n	8016c74 <_vfiprintf_r+0x50>
 8016e50:	ab03      	add	r3, sp, #12
 8016e52:	9300      	str	r3, [sp, #0]
 8016e54:	462a      	mov	r2, r5
 8016e56:	4b09      	ldr	r3, [pc, #36]	; (8016e7c <_vfiprintf_r+0x258>)
 8016e58:	a904      	add	r1, sp, #16
 8016e5a:	4630      	mov	r0, r6
 8016e5c:	f7fb fd48 	bl	80128f0 <_printf_i>
 8016e60:	e7e4      	b.n	8016e2c <_vfiprintf_r+0x208>
 8016e62:	bf00      	nop
 8016e64:	080176b0 	.word	0x080176b0
 8016e68:	080176d0 	.word	0x080176d0
 8016e6c:	08017690 	.word	0x08017690
 8016e70:	080179f4 	.word	0x080179f4
 8016e74:	080179fe 	.word	0x080179fe
 8016e78:	080123a9 	.word	0x080123a9
 8016e7c:	08016bff 	.word	0x08016bff
 8016e80:	080179fa 	.word	0x080179fa

08016e84 <__swbuf_r>:
 8016e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e86:	460e      	mov	r6, r1
 8016e88:	4614      	mov	r4, r2
 8016e8a:	4605      	mov	r5, r0
 8016e8c:	b118      	cbz	r0, 8016e96 <__swbuf_r+0x12>
 8016e8e:	6983      	ldr	r3, [r0, #24]
 8016e90:	b90b      	cbnz	r3, 8016e96 <__swbuf_r+0x12>
 8016e92:	f7fb f8b3 	bl	8011ffc <__sinit>
 8016e96:	4b21      	ldr	r3, [pc, #132]	; (8016f1c <__swbuf_r+0x98>)
 8016e98:	429c      	cmp	r4, r3
 8016e9a:	d12b      	bne.n	8016ef4 <__swbuf_r+0x70>
 8016e9c:	686c      	ldr	r4, [r5, #4]
 8016e9e:	69a3      	ldr	r3, [r4, #24]
 8016ea0:	60a3      	str	r3, [r4, #8]
 8016ea2:	89a3      	ldrh	r3, [r4, #12]
 8016ea4:	071a      	lsls	r2, r3, #28
 8016ea6:	d52f      	bpl.n	8016f08 <__swbuf_r+0x84>
 8016ea8:	6923      	ldr	r3, [r4, #16]
 8016eaa:	b36b      	cbz	r3, 8016f08 <__swbuf_r+0x84>
 8016eac:	6923      	ldr	r3, [r4, #16]
 8016eae:	6820      	ldr	r0, [r4, #0]
 8016eb0:	1ac0      	subs	r0, r0, r3
 8016eb2:	6963      	ldr	r3, [r4, #20]
 8016eb4:	b2f6      	uxtb	r6, r6
 8016eb6:	4283      	cmp	r3, r0
 8016eb8:	4637      	mov	r7, r6
 8016eba:	dc04      	bgt.n	8016ec6 <__swbuf_r+0x42>
 8016ebc:	4621      	mov	r1, r4
 8016ebe:	4628      	mov	r0, r5
 8016ec0:	f7fd ff80 	bl	8014dc4 <_fflush_r>
 8016ec4:	bb30      	cbnz	r0, 8016f14 <__swbuf_r+0x90>
 8016ec6:	68a3      	ldr	r3, [r4, #8]
 8016ec8:	3b01      	subs	r3, #1
 8016eca:	60a3      	str	r3, [r4, #8]
 8016ecc:	6823      	ldr	r3, [r4, #0]
 8016ece:	1c5a      	adds	r2, r3, #1
 8016ed0:	6022      	str	r2, [r4, #0]
 8016ed2:	701e      	strb	r6, [r3, #0]
 8016ed4:	6963      	ldr	r3, [r4, #20]
 8016ed6:	3001      	adds	r0, #1
 8016ed8:	4283      	cmp	r3, r0
 8016eda:	d004      	beq.n	8016ee6 <__swbuf_r+0x62>
 8016edc:	89a3      	ldrh	r3, [r4, #12]
 8016ede:	07db      	lsls	r3, r3, #31
 8016ee0:	d506      	bpl.n	8016ef0 <__swbuf_r+0x6c>
 8016ee2:	2e0a      	cmp	r6, #10
 8016ee4:	d104      	bne.n	8016ef0 <__swbuf_r+0x6c>
 8016ee6:	4621      	mov	r1, r4
 8016ee8:	4628      	mov	r0, r5
 8016eea:	f7fd ff6b 	bl	8014dc4 <_fflush_r>
 8016eee:	b988      	cbnz	r0, 8016f14 <__swbuf_r+0x90>
 8016ef0:	4638      	mov	r0, r7
 8016ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ef4:	4b0a      	ldr	r3, [pc, #40]	; (8016f20 <__swbuf_r+0x9c>)
 8016ef6:	429c      	cmp	r4, r3
 8016ef8:	d101      	bne.n	8016efe <__swbuf_r+0x7a>
 8016efa:	68ac      	ldr	r4, [r5, #8]
 8016efc:	e7cf      	b.n	8016e9e <__swbuf_r+0x1a>
 8016efe:	4b09      	ldr	r3, [pc, #36]	; (8016f24 <__swbuf_r+0xa0>)
 8016f00:	429c      	cmp	r4, r3
 8016f02:	bf08      	it	eq
 8016f04:	68ec      	ldreq	r4, [r5, #12]
 8016f06:	e7ca      	b.n	8016e9e <__swbuf_r+0x1a>
 8016f08:	4621      	mov	r1, r4
 8016f0a:	4628      	mov	r0, r5
 8016f0c:	f000 f80c 	bl	8016f28 <__swsetup_r>
 8016f10:	2800      	cmp	r0, #0
 8016f12:	d0cb      	beq.n	8016eac <__swbuf_r+0x28>
 8016f14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016f18:	e7ea      	b.n	8016ef0 <__swbuf_r+0x6c>
 8016f1a:	bf00      	nop
 8016f1c:	080176b0 	.word	0x080176b0
 8016f20:	080176d0 	.word	0x080176d0
 8016f24:	08017690 	.word	0x08017690

08016f28 <__swsetup_r>:
 8016f28:	4b32      	ldr	r3, [pc, #200]	; (8016ff4 <__swsetup_r+0xcc>)
 8016f2a:	b570      	push	{r4, r5, r6, lr}
 8016f2c:	681d      	ldr	r5, [r3, #0]
 8016f2e:	4606      	mov	r6, r0
 8016f30:	460c      	mov	r4, r1
 8016f32:	b125      	cbz	r5, 8016f3e <__swsetup_r+0x16>
 8016f34:	69ab      	ldr	r3, [r5, #24]
 8016f36:	b913      	cbnz	r3, 8016f3e <__swsetup_r+0x16>
 8016f38:	4628      	mov	r0, r5
 8016f3a:	f7fb f85f 	bl	8011ffc <__sinit>
 8016f3e:	4b2e      	ldr	r3, [pc, #184]	; (8016ff8 <__swsetup_r+0xd0>)
 8016f40:	429c      	cmp	r4, r3
 8016f42:	d10f      	bne.n	8016f64 <__swsetup_r+0x3c>
 8016f44:	686c      	ldr	r4, [r5, #4]
 8016f46:	89a3      	ldrh	r3, [r4, #12]
 8016f48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016f4c:	0719      	lsls	r1, r3, #28
 8016f4e:	d42c      	bmi.n	8016faa <__swsetup_r+0x82>
 8016f50:	06dd      	lsls	r5, r3, #27
 8016f52:	d411      	bmi.n	8016f78 <__swsetup_r+0x50>
 8016f54:	2309      	movs	r3, #9
 8016f56:	6033      	str	r3, [r6, #0]
 8016f58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016f5c:	81a3      	strh	r3, [r4, #12]
 8016f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f62:	e03e      	b.n	8016fe2 <__swsetup_r+0xba>
 8016f64:	4b25      	ldr	r3, [pc, #148]	; (8016ffc <__swsetup_r+0xd4>)
 8016f66:	429c      	cmp	r4, r3
 8016f68:	d101      	bne.n	8016f6e <__swsetup_r+0x46>
 8016f6a:	68ac      	ldr	r4, [r5, #8]
 8016f6c:	e7eb      	b.n	8016f46 <__swsetup_r+0x1e>
 8016f6e:	4b24      	ldr	r3, [pc, #144]	; (8017000 <__swsetup_r+0xd8>)
 8016f70:	429c      	cmp	r4, r3
 8016f72:	bf08      	it	eq
 8016f74:	68ec      	ldreq	r4, [r5, #12]
 8016f76:	e7e6      	b.n	8016f46 <__swsetup_r+0x1e>
 8016f78:	0758      	lsls	r0, r3, #29
 8016f7a:	d512      	bpl.n	8016fa2 <__swsetup_r+0x7a>
 8016f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f7e:	b141      	cbz	r1, 8016f92 <__swsetup_r+0x6a>
 8016f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f84:	4299      	cmp	r1, r3
 8016f86:	d002      	beq.n	8016f8e <__swsetup_r+0x66>
 8016f88:	4630      	mov	r0, r6
 8016f8a:	f7fe ffcd 	bl	8015f28 <_free_r>
 8016f8e:	2300      	movs	r3, #0
 8016f90:	6363      	str	r3, [r4, #52]	; 0x34
 8016f92:	89a3      	ldrh	r3, [r4, #12]
 8016f94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016f98:	81a3      	strh	r3, [r4, #12]
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	6063      	str	r3, [r4, #4]
 8016f9e:	6923      	ldr	r3, [r4, #16]
 8016fa0:	6023      	str	r3, [r4, #0]
 8016fa2:	89a3      	ldrh	r3, [r4, #12]
 8016fa4:	f043 0308 	orr.w	r3, r3, #8
 8016fa8:	81a3      	strh	r3, [r4, #12]
 8016faa:	6923      	ldr	r3, [r4, #16]
 8016fac:	b94b      	cbnz	r3, 8016fc2 <__swsetup_r+0x9a>
 8016fae:	89a3      	ldrh	r3, [r4, #12]
 8016fb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016fb8:	d003      	beq.n	8016fc2 <__swsetup_r+0x9a>
 8016fba:	4621      	mov	r1, r4
 8016fbc:	4630      	mov	r0, r6
 8016fbe:	f000 f84d 	bl	801705c <__smakebuf_r>
 8016fc2:	89a0      	ldrh	r0, [r4, #12]
 8016fc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016fc8:	f010 0301 	ands.w	r3, r0, #1
 8016fcc:	d00a      	beq.n	8016fe4 <__swsetup_r+0xbc>
 8016fce:	2300      	movs	r3, #0
 8016fd0:	60a3      	str	r3, [r4, #8]
 8016fd2:	6963      	ldr	r3, [r4, #20]
 8016fd4:	425b      	negs	r3, r3
 8016fd6:	61a3      	str	r3, [r4, #24]
 8016fd8:	6923      	ldr	r3, [r4, #16]
 8016fda:	b943      	cbnz	r3, 8016fee <__swsetup_r+0xc6>
 8016fdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016fe0:	d1ba      	bne.n	8016f58 <__swsetup_r+0x30>
 8016fe2:	bd70      	pop	{r4, r5, r6, pc}
 8016fe4:	0781      	lsls	r1, r0, #30
 8016fe6:	bf58      	it	pl
 8016fe8:	6963      	ldrpl	r3, [r4, #20]
 8016fea:	60a3      	str	r3, [r4, #8]
 8016fec:	e7f4      	b.n	8016fd8 <__swsetup_r+0xb0>
 8016fee:	2000      	movs	r0, #0
 8016ff0:	e7f7      	b.n	8016fe2 <__swsetup_r+0xba>
 8016ff2:	bf00      	nop
 8016ff4:	2000019c 	.word	0x2000019c
 8016ff8:	080176b0 	.word	0x080176b0
 8016ffc:	080176d0 	.word	0x080176d0
 8017000:	08017690 	.word	0x08017690

08017004 <abort>:
 8017004:	b508      	push	{r3, lr}
 8017006:	2006      	movs	r0, #6
 8017008:	f000 f898 	bl	801713c <raise>
 801700c:	2001      	movs	r0, #1
 801700e:	f7eb ff4f 	bl	8002eb0 <_exit>

08017012 <__swhatbuf_r>:
 8017012:	b570      	push	{r4, r5, r6, lr}
 8017014:	460e      	mov	r6, r1
 8017016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801701a:	2900      	cmp	r1, #0
 801701c:	b096      	sub	sp, #88	; 0x58
 801701e:	4614      	mov	r4, r2
 8017020:	461d      	mov	r5, r3
 8017022:	da07      	bge.n	8017034 <__swhatbuf_r+0x22>
 8017024:	2300      	movs	r3, #0
 8017026:	602b      	str	r3, [r5, #0]
 8017028:	89b3      	ldrh	r3, [r6, #12]
 801702a:	061a      	lsls	r2, r3, #24
 801702c:	d410      	bmi.n	8017050 <__swhatbuf_r+0x3e>
 801702e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017032:	e00e      	b.n	8017052 <__swhatbuf_r+0x40>
 8017034:	466a      	mov	r2, sp
 8017036:	f000 f89d 	bl	8017174 <_fstat_r>
 801703a:	2800      	cmp	r0, #0
 801703c:	dbf2      	blt.n	8017024 <__swhatbuf_r+0x12>
 801703e:	9a01      	ldr	r2, [sp, #4]
 8017040:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017044:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017048:	425a      	negs	r2, r3
 801704a:	415a      	adcs	r2, r3
 801704c:	602a      	str	r2, [r5, #0]
 801704e:	e7ee      	b.n	801702e <__swhatbuf_r+0x1c>
 8017050:	2340      	movs	r3, #64	; 0x40
 8017052:	2000      	movs	r0, #0
 8017054:	6023      	str	r3, [r4, #0]
 8017056:	b016      	add	sp, #88	; 0x58
 8017058:	bd70      	pop	{r4, r5, r6, pc}
	...

0801705c <__smakebuf_r>:
 801705c:	898b      	ldrh	r3, [r1, #12]
 801705e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017060:	079d      	lsls	r5, r3, #30
 8017062:	4606      	mov	r6, r0
 8017064:	460c      	mov	r4, r1
 8017066:	d507      	bpl.n	8017078 <__smakebuf_r+0x1c>
 8017068:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801706c:	6023      	str	r3, [r4, #0]
 801706e:	6123      	str	r3, [r4, #16]
 8017070:	2301      	movs	r3, #1
 8017072:	6163      	str	r3, [r4, #20]
 8017074:	b002      	add	sp, #8
 8017076:	bd70      	pop	{r4, r5, r6, pc}
 8017078:	ab01      	add	r3, sp, #4
 801707a:	466a      	mov	r2, sp
 801707c:	f7ff ffc9 	bl	8017012 <__swhatbuf_r>
 8017080:	9900      	ldr	r1, [sp, #0]
 8017082:	4605      	mov	r5, r0
 8017084:	4630      	mov	r0, r6
 8017086:	f7fb f895 	bl	80121b4 <_malloc_r>
 801708a:	b948      	cbnz	r0, 80170a0 <__smakebuf_r+0x44>
 801708c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017090:	059a      	lsls	r2, r3, #22
 8017092:	d4ef      	bmi.n	8017074 <__smakebuf_r+0x18>
 8017094:	f023 0303 	bic.w	r3, r3, #3
 8017098:	f043 0302 	orr.w	r3, r3, #2
 801709c:	81a3      	strh	r3, [r4, #12]
 801709e:	e7e3      	b.n	8017068 <__smakebuf_r+0xc>
 80170a0:	4b0d      	ldr	r3, [pc, #52]	; (80170d8 <__smakebuf_r+0x7c>)
 80170a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80170a4:	89a3      	ldrh	r3, [r4, #12]
 80170a6:	6020      	str	r0, [r4, #0]
 80170a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80170ac:	81a3      	strh	r3, [r4, #12]
 80170ae:	9b00      	ldr	r3, [sp, #0]
 80170b0:	6163      	str	r3, [r4, #20]
 80170b2:	9b01      	ldr	r3, [sp, #4]
 80170b4:	6120      	str	r0, [r4, #16]
 80170b6:	b15b      	cbz	r3, 80170d0 <__smakebuf_r+0x74>
 80170b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80170bc:	4630      	mov	r0, r6
 80170be:	f000 f86b 	bl	8017198 <_isatty_r>
 80170c2:	b128      	cbz	r0, 80170d0 <__smakebuf_r+0x74>
 80170c4:	89a3      	ldrh	r3, [r4, #12]
 80170c6:	f023 0303 	bic.w	r3, r3, #3
 80170ca:	f043 0301 	orr.w	r3, r3, #1
 80170ce:	81a3      	strh	r3, [r4, #12]
 80170d0:	89a0      	ldrh	r0, [r4, #12]
 80170d2:	4305      	orrs	r5, r0
 80170d4:	81a5      	strh	r5, [r4, #12]
 80170d6:	e7cd      	b.n	8017074 <__smakebuf_r+0x18>
 80170d8:	08011f95 	.word	0x08011f95

080170dc <_malloc_usable_size_r>:
 80170dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80170e0:	1f18      	subs	r0, r3, #4
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	bfbc      	itt	lt
 80170e6:	580b      	ldrlt	r3, [r1, r0]
 80170e8:	18c0      	addlt	r0, r0, r3
 80170ea:	4770      	bx	lr

080170ec <_raise_r>:
 80170ec:	291f      	cmp	r1, #31
 80170ee:	b538      	push	{r3, r4, r5, lr}
 80170f0:	4604      	mov	r4, r0
 80170f2:	460d      	mov	r5, r1
 80170f4:	d904      	bls.n	8017100 <_raise_r+0x14>
 80170f6:	2316      	movs	r3, #22
 80170f8:	6003      	str	r3, [r0, #0]
 80170fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170fe:	bd38      	pop	{r3, r4, r5, pc}
 8017100:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017102:	b112      	cbz	r2, 801710a <_raise_r+0x1e>
 8017104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017108:	b94b      	cbnz	r3, 801711e <_raise_r+0x32>
 801710a:	4620      	mov	r0, r4
 801710c:	f000 f830 	bl	8017170 <_getpid_r>
 8017110:	462a      	mov	r2, r5
 8017112:	4601      	mov	r1, r0
 8017114:	4620      	mov	r0, r4
 8017116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801711a:	f000 b817 	b.w	801714c <_kill_r>
 801711e:	2b01      	cmp	r3, #1
 8017120:	d00a      	beq.n	8017138 <_raise_r+0x4c>
 8017122:	1c59      	adds	r1, r3, #1
 8017124:	d103      	bne.n	801712e <_raise_r+0x42>
 8017126:	2316      	movs	r3, #22
 8017128:	6003      	str	r3, [r0, #0]
 801712a:	2001      	movs	r0, #1
 801712c:	e7e7      	b.n	80170fe <_raise_r+0x12>
 801712e:	2400      	movs	r4, #0
 8017130:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017134:	4628      	mov	r0, r5
 8017136:	4798      	blx	r3
 8017138:	2000      	movs	r0, #0
 801713a:	e7e0      	b.n	80170fe <_raise_r+0x12>

0801713c <raise>:
 801713c:	4b02      	ldr	r3, [pc, #8]	; (8017148 <raise+0xc>)
 801713e:	4601      	mov	r1, r0
 8017140:	6818      	ldr	r0, [r3, #0]
 8017142:	f7ff bfd3 	b.w	80170ec <_raise_r>
 8017146:	bf00      	nop
 8017148:	2000019c 	.word	0x2000019c

0801714c <_kill_r>:
 801714c:	b538      	push	{r3, r4, r5, lr}
 801714e:	4d07      	ldr	r5, [pc, #28]	; (801716c <_kill_r+0x20>)
 8017150:	2300      	movs	r3, #0
 8017152:	4604      	mov	r4, r0
 8017154:	4608      	mov	r0, r1
 8017156:	4611      	mov	r1, r2
 8017158:	602b      	str	r3, [r5, #0]
 801715a:	f7eb fe99 	bl	8002e90 <_kill>
 801715e:	1c43      	adds	r3, r0, #1
 8017160:	d102      	bne.n	8017168 <_kill_r+0x1c>
 8017162:	682b      	ldr	r3, [r5, #0]
 8017164:	b103      	cbz	r3, 8017168 <_kill_r+0x1c>
 8017166:	6023      	str	r3, [r4, #0]
 8017168:	bd38      	pop	{r3, r4, r5, pc}
 801716a:	bf00      	nop
 801716c:	2000c37c 	.word	0x2000c37c

08017170 <_getpid_r>:
 8017170:	f7eb be86 	b.w	8002e80 <_getpid>

08017174 <_fstat_r>:
 8017174:	b538      	push	{r3, r4, r5, lr}
 8017176:	4d07      	ldr	r5, [pc, #28]	; (8017194 <_fstat_r+0x20>)
 8017178:	2300      	movs	r3, #0
 801717a:	4604      	mov	r4, r0
 801717c:	4608      	mov	r0, r1
 801717e:	4611      	mov	r1, r2
 8017180:	602b      	str	r3, [r5, #0]
 8017182:	f7eb fee4 	bl	8002f4e <_fstat>
 8017186:	1c43      	adds	r3, r0, #1
 8017188:	d102      	bne.n	8017190 <_fstat_r+0x1c>
 801718a:	682b      	ldr	r3, [r5, #0]
 801718c:	b103      	cbz	r3, 8017190 <_fstat_r+0x1c>
 801718e:	6023      	str	r3, [r4, #0]
 8017190:	bd38      	pop	{r3, r4, r5, pc}
 8017192:	bf00      	nop
 8017194:	2000c37c 	.word	0x2000c37c

08017198 <_isatty_r>:
 8017198:	b538      	push	{r3, r4, r5, lr}
 801719a:	4d06      	ldr	r5, [pc, #24]	; (80171b4 <_isatty_r+0x1c>)
 801719c:	2300      	movs	r3, #0
 801719e:	4604      	mov	r4, r0
 80171a0:	4608      	mov	r0, r1
 80171a2:	602b      	str	r3, [r5, #0]
 80171a4:	f7eb fee3 	bl	8002f6e <_isatty>
 80171a8:	1c43      	adds	r3, r0, #1
 80171aa:	d102      	bne.n	80171b2 <_isatty_r+0x1a>
 80171ac:	682b      	ldr	r3, [r5, #0]
 80171ae:	b103      	cbz	r3, 80171b2 <_isatty_r+0x1a>
 80171b0:	6023      	str	r3, [r4, #0]
 80171b2:	bd38      	pop	{r3, r4, r5, pc}
 80171b4:	2000c37c 	.word	0x2000c37c

080171b8 <_init>:
 80171b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171ba:	bf00      	nop
 80171bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80171be:	bc08      	pop	{r3}
 80171c0:	469e      	mov	lr, r3
 80171c2:	4770      	bx	lr

080171c4 <_fini>:
 80171c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171c6:	bf00      	nop
 80171c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80171ca:	bc08      	pop	{r3}
 80171cc:	469e      	mov	lr, r3
 80171ce:	4770      	bx	lr
