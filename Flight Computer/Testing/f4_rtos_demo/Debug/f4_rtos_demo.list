
f4_rtos_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018050  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  08018200  08018200  00028200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018b14  08018b14  00030370  2**0
                  CONTENTS
  4 .ARM          00000008  08018b14  08018b14  00028b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018b1c  08018b1c  00030370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018b1c  08018b1c  00028b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018b20  08018b20  00028b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  08018b24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030370  2**0
                  CONTENTS
 10 .bss          0000c7c0  20000370  20000370  00030370  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000cb30  2000cb30  00030370  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY
 13 .debug_info   000531c9  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007c3d  00000000  00000000  00083569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003090  00000000  00000000  0008b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002de0  00000000  00000000  0008e238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f3d7  00000000  00000000  00091018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000372b2  00000000  00000000  000c03ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104988  00000000  00000000  000f76a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001fc029  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e6e8  00000000  00000000  001fc07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000370 	.word	0x20000370
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080181e8 	.word	0x080181e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000374 	.word	0x20000374
 80001ec:	080181e8 	.word	0x080181e8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <GPS_Poll>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Poll(double *latitude, double *longitude, float *time)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 1000;
 8001018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28

	while(loop_count < max_loop_count && !done){
 8001026:	e088      	b.n	800113a <GPS_Poll+0x12e>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	2201      	movs	r2, #1
 800102c:	4949      	ldr	r1, [pc, #292]	; (8001154 <GPS_Poll+0x148>)
 800102e:	484a      	ldr	r0, [pc, #296]	; (8001158 <GPS_Poll+0x14c>)
 8001030:	f007 fbd3 	bl	80087da <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart8, (uint8_t*)&rx_current, 1, 100);
		if(rx_current == '$'){
 8001034:	4b47      	ldr	r3, [pc, #284]	; (8001154 <GPS_Poll+0x148>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	2b24      	cmp	r3, #36	; 0x24
 800103a:	d114      	bne.n	8001066 <GPS_Poll+0x5a>
			rx_index = 0;
 800103c:	4b47      	ldr	r3, [pc, #284]	; (800115c <GPS_Poll+0x150>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8001042:	224b      	movs	r2, #75	; 0x4b
 8001044:	2100      	movs	r1, #0
 8001046:	4846      	ldr	r0, [pc, #280]	; (8001160 <GPS_Poll+0x154>)
 8001048:	f012 f8b3 	bl	80131b2 <memset>
			rx_buffer[rx_index++] = rx_current;
 800104c:	4b41      	ldr	r3, [pc, #260]	; (8001154 <GPS_Poll+0x148>)
 800104e:	8819      	ldrh	r1, [r3, #0]
 8001050:	4b42      	ldr	r3, [pc, #264]	; (800115c <GPS_Poll+0x150>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	b2d0      	uxtb	r0, r2
 8001058:	4a40      	ldr	r2, [pc, #256]	; (800115c <GPS_Poll+0x150>)
 800105a:	7010      	strb	r0, [r2, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	b2c9      	uxtb	r1, r1
 8001060:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <GPS_Poll+0x154>)
 8001062:	5499      	strb	r1, [r3, r2]
 8001064:	e03a      	b.n	80010dc <GPS_Poll+0xd0>
		} else if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <GPS_Poll+0x148>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	2b0a      	cmp	r3, #10
 800106c:	d010      	beq.n	8001090 <GPS_Poll+0x84>
 800106e:	4b3b      	ldr	r3, [pc, #236]	; (800115c <GPS_Poll+0x150>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b4a      	cmp	r3, #74	; 0x4a
 8001074:	d80c      	bhi.n	8001090 <GPS_Poll+0x84>
			rx_buffer[rx_index++] = rx_current;
 8001076:	4b37      	ldr	r3, [pc, #220]	; (8001154 <GPS_Poll+0x148>)
 8001078:	8819      	ldrh	r1, [r3, #0]
 800107a:	4b38      	ldr	r3, [pc, #224]	; (800115c <GPS_Poll+0x150>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	b2d0      	uxtb	r0, r2
 8001082:	4a36      	ldr	r2, [pc, #216]	; (800115c <GPS_Poll+0x150>)
 8001084:	7010      	strb	r0, [r2, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	b2c9      	uxtb	r1, r1
 800108a:	4b35      	ldr	r3, [pc, #212]	; (8001160 <GPS_Poll+0x154>)
 800108c:	5499      	strb	r1, [r3, r2]
 800108e:	e025      	b.n	80010dc <GPS_Poll+0xd0>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8001090:	4833      	ldr	r0, [pc, #204]	; (8001160 <GPS_Poll+0x154>)
 8001092:	f000 f869 	bl	8001168 <GPS_validate>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d017      	beq.n	80010cc <GPS_Poll+0xc0>
				if(GPS_parse((char*) rx_buffer)){
 800109c:	4830      	ldr	r0, [pc, #192]	; (8001160 <GPS_Poll+0x154>)
 800109e:	f000 f8c5 	bl	800122c <GPS_parse>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d011      	beq.n	80010cc <GPS_Poll+0xc0>
					//myprintf("%s\n",rx_buffer);
					*latitude = GPS.dec_latitude;
 80010a8:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <GPS_Poll+0x158>)
 80010aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80010ae:	68f9      	ldr	r1, [r7, #12]
 80010b0:	e9c1 2300 	strd	r2, r3, [r1]
					*longitude = GPS.dec_longitude;
 80010b4:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <GPS_Poll+0x158>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	68b9      	ldr	r1, [r7, #8]
 80010bc:	e9c1 2300 	strd	r2, r3, [r1]
					*time = GPS.utc_time;
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <GPS_Poll+0x158>)
 80010c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	601a      	str	r2, [r3, #0]
					//myprintf("LATITUDE: %f, LONGITUDE: %f\n", GPS.dec_latitude, GPS.dec_longitude);
					done = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <GPS_Poll+0x150>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80010d2:	224b      	movs	r2, #75	; 0x4b
 80010d4:	2100      	movs	r1, #0
 80010d6:	4822      	ldr	r0, [pc, #136]	; (8001160 <GPS_Poll+0x154>)
 80010d8:	f012 f86b 	bl	80131b2 <memset>
		// from f303 code
//		__HAL_UART_CLEAR_FLAG(GPS_USART, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <GPS_Poll+0x14c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	623b      	str	r3, [r7, #32]
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <GPS_Poll+0x14c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	623b      	str	r3, [r7, #32]
 80010f0:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <GPS_Poll+0x14c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <GPS_Poll+0x14c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <GPS_Poll+0x14c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <GPS_Poll+0x14c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <GPS_Poll+0x14c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <GPS_Poll+0x14c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8001134:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001136:	3301      	adds	r3, #1
 8001138:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 800113a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800113c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800113e:	429a      	cmp	r2, r3
 8001140:	d203      	bcs.n	800114a <GPS_Poll+0x13e>
 8001142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001144:	2b00      	cmp	r3, #0
 8001146:	f43f af6f 	beq.w	8001028 <GPS_Poll+0x1c>
	}

}
 800114a:	bf00      	nop
 800114c:	3730      	adds	r7, #48	; 0x30
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000038c 	.word	0x2000038c
 8001158:	2000a680 	.word	0x2000a680
 800115c:	2000038e 	.word	0x2000038e
 8001160:	20009ea0 	.word	0x20009ea0
 8001164:	20009e30 	.word	0x20009e30

08001168 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$'){
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b24      	cmp	r3, #36	; 0x24
 8001182:	d103      	bne.n	800118c <GPS_validate+0x24>
        i++;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
    } else {
        return 0;
    }

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800118a:	e00c      	b.n	80011a6 <GPS_validate+0x3e>
        return 0;
 800118c:	2300      	movs	r3, #0
 800118e:	e047      	b.n	8001220 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4053      	eors	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        i++;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d008      	beq.n	80011c4 <GPS_validate+0x5c>
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b2a      	cmp	r3, #42	; 0x2a
 80011bc:	d002      	beq.n	80011c4 <GPS_validate+0x5c>
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b4a      	cmp	r3, #74	; 0x4a
 80011c2:	dde5      	ble.n	8001190 <GPS_validate+0x28>
    }

    if(i >= 75){
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2b4a      	cmp	r3, #74	; 0x4a
 80011c8:	dd01      	ble.n	80011ce <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80011ca:	2300      	movs	r3, #0
 80011cc:	e028      	b.n	8001220 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	4413      	add	r3, r2
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b2a      	cmp	r3, #42	; 0x2a
 80011d8:	d119      	bne.n	800120e <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	3301      	adds	r3, #1
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3302      	adds	r3, #2
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	490a      	ldr	r1, [pc, #40]	; (8001228 <GPS_validate+0xc0>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f012 ff34 	bl	801406c <siprintf>
    return((checkcalcstr[0] == check[0])
 8001204:	7a3a      	ldrb	r2, [r7, #8]
 8001206:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001208:	429a      	cmp	r2, r3
 800120a:	d108      	bne.n	800121e <GPS_validate+0xb6>
 800120c:	e001      	b.n	8001212 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800120e:	2300      	movs	r3, #0
 8001210:	e006      	b.n	8001220 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001212:	7a7a      	ldrb	r2, [r7, #9]
 8001214:	7b7b      	ldrb	r3, [r7, #13]
 8001216:	429a      	cmp	r2, r3
 8001218:	d101      	bne.n	800121e <GPS_validate+0xb6>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <GPS_validate+0xb8>
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	08018200 	.word	0x08018200

0800122c <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af08      	add	r7, sp, #32
 8001232:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8001234:	2206      	movs	r2, #6
 8001236:	497d      	ldr	r1, [pc, #500]	; (800142c <GPS_parse+0x200>)
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f012 ffb0 	bl	801419e <strncmp>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d143      	bne.n	80012cc <GPS_parse+0xa0>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%lf,%c,%lf,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001244:	4b7a      	ldr	r3, [pc, #488]	; (8001430 <GPS_parse+0x204>)
 8001246:	9307      	str	r3, [sp, #28]
 8001248:	4b7a      	ldr	r3, [pc, #488]	; (8001434 <GPS_parse+0x208>)
 800124a:	9306      	str	r3, [sp, #24]
 800124c:	4b7a      	ldr	r3, [pc, #488]	; (8001438 <GPS_parse+0x20c>)
 800124e:	9305      	str	r3, [sp, #20]
 8001250:	4b7a      	ldr	r3, [pc, #488]	; (800143c <GPS_parse+0x210>)
 8001252:	9304      	str	r3, [sp, #16]
 8001254:	4b7a      	ldr	r3, [pc, #488]	; (8001440 <GPS_parse+0x214>)
 8001256:	9303      	str	r3, [sp, #12]
 8001258:	4b7a      	ldr	r3, [pc, #488]	; (8001444 <GPS_parse+0x218>)
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	4b7a      	ldr	r3, [pc, #488]	; (8001448 <GPS_parse+0x21c>)
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	4b7a      	ldr	r3, [pc, #488]	; (800144c <GPS_parse+0x220>)
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4b7a      	ldr	r3, [pc, #488]	; (8001450 <GPS_parse+0x224>)
 8001266:	4a7b      	ldr	r2, [pc, #492]	; (8001454 <GPS_parse+0x228>)
 8001268:	497b      	ldr	r1, [pc, #492]	; (8001458 <GPS_parse+0x22c>)
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f012 ff1e 	bl	80140ac <siscanf>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	f340 80d4 	ble.w	8001420 <GPS_parse+0x1f4>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001278:	4b78      	ldr	r3, [pc, #480]	; (800145c <GPS_parse+0x230>)
 800127a:	ed93 7b08 	vldr	d7, [r3, #32]
 800127e:	4b77      	ldr	r3, [pc, #476]	; (800145c <GPS_parse+0x230>)
 8001280:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001284:	4618      	mov	r0, r3
 8001286:	eeb0 0a47 	vmov.f32	s0, s14
 800128a:	eef0 0a67 	vmov.f32	s1, s15
 800128e:	f000 f909 	bl	80014a4 <GPS_nmea_to_dec>
 8001292:	eeb0 7a40 	vmov.f32	s14, s0
 8001296:	eef0 7a60 	vmov.f32	s15, s1
 800129a:	4b70      	ldr	r3, [pc, #448]	; (800145c <GPS_parse+0x230>)
 800129c:	ed83 7b02 	vstr	d7, [r3, #8]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80012a0:	4b6e      	ldr	r3, [pc, #440]	; (800145c <GPS_parse+0x230>)
 80012a2:	ed93 7b06 	vldr	d7, [r3, #24]
 80012a6:	4b6d      	ldr	r3, [pc, #436]	; (800145c <GPS_parse+0x230>)
 80012a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80012ac:	4618      	mov	r0, r3
 80012ae:	eeb0 0a47 	vmov.f32	s0, s14
 80012b2:	eef0 0a67 	vmov.f32	s1, s15
 80012b6:	f000 f8f5 	bl	80014a4 <GPS_nmea_to_dec>
 80012ba:	eeb0 7a40 	vmov.f32	s14, s0
 80012be:	eef0 7a60 	vmov.f32	s15, s1
 80012c2:	4b66      	ldr	r3, [pc, #408]	; (800145c <GPS_parse+0x230>)
 80012c4:	ed83 7b00 	vstr	d7, [r3]
    		return 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e0aa      	b.n	8001422 <GPS_parse+0x1f6>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 80012cc:	2206      	movs	r2, #6
 80012ce:	4964      	ldr	r1, [pc, #400]	; (8001460 <GPS_parse+0x234>)
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f012 ff64 	bl	801419e <strncmp>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d13f      	bne.n	800135c <GPS_parse+0x130>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%lf,%c,%lf,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 80012dc:	4b61      	ldr	r3, [pc, #388]	; (8001464 <GPS_parse+0x238>)
 80012de:	9305      	str	r3, [sp, #20]
 80012e0:	4b61      	ldr	r3, [pc, #388]	; (8001468 <GPS_parse+0x23c>)
 80012e2:	9304      	str	r3, [sp, #16]
 80012e4:	4b61      	ldr	r3, [pc, #388]	; (800146c <GPS_parse+0x240>)
 80012e6:	9303      	str	r3, [sp, #12]
 80012e8:	4b56      	ldr	r3, [pc, #344]	; (8001444 <GPS_parse+0x218>)
 80012ea:	9302      	str	r3, [sp, #8]
 80012ec:	4b56      	ldr	r3, [pc, #344]	; (8001448 <GPS_parse+0x21c>)
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	4b56      	ldr	r3, [pc, #344]	; (800144c <GPS_parse+0x220>)
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	4b56      	ldr	r3, [pc, #344]	; (8001450 <GPS_parse+0x224>)
 80012f6:	4a57      	ldr	r2, [pc, #348]	; (8001454 <GPS_parse+0x228>)
 80012f8:	495d      	ldr	r1, [pc, #372]	; (8001470 <GPS_parse+0x244>)
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f012 fed6 	bl	80140ac <siscanf>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	f340 808c 	ble.w	8001420 <GPS_parse+0x1f4>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001308:	4b54      	ldr	r3, [pc, #336]	; (800145c <GPS_parse+0x230>)
 800130a:	ed93 7b08 	vldr	d7, [r3, #32]
 800130e:	4b53      	ldr	r3, [pc, #332]	; (800145c <GPS_parse+0x230>)
 8001310:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001314:	4618      	mov	r0, r3
 8001316:	eeb0 0a47 	vmov.f32	s0, s14
 800131a:	eef0 0a67 	vmov.f32	s1, s15
 800131e:	f000 f8c1 	bl	80014a4 <GPS_nmea_to_dec>
 8001322:	eeb0 7a40 	vmov.f32	s14, s0
 8001326:	eef0 7a60 	vmov.f32	s15, s1
 800132a:	4b4c      	ldr	r3, [pc, #304]	; (800145c <GPS_parse+0x230>)
 800132c:	ed83 7b02 	vstr	d7, [r3, #8]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001330:	4b4a      	ldr	r3, [pc, #296]	; (800145c <GPS_parse+0x230>)
 8001332:	ed93 7b06 	vldr	d7, [r3, #24]
 8001336:	4b49      	ldr	r3, [pc, #292]	; (800145c <GPS_parse+0x230>)
 8001338:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800133c:	4618      	mov	r0, r3
 800133e:	eeb0 0a47 	vmov.f32	s0, s14
 8001342:	eef0 0a67 	vmov.f32	s1, s15
 8001346:	f000 f8ad 	bl	80014a4 <GPS_nmea_to_dec>
 800134a:	eeb0 7a40 	vmov.f32	s14, s0
 800134e:	eef0 7a60 	vmov.f32	s15, s1
 8001352:	4b42      	ldr	r3, [pc, #264]	; (800145c <GPS_parse+0x230>)
 8001354:	ed83 7b00 	vstr	d7, [r3]
    		return 1;
 8001358:	2301      	movs	r3, #1
 800135a:	e062      	b.n	8001422 <GPS_parse+0x1f6>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 800135c:	2206      	movs	r2, #6
 800135e:	4945      	ldr	r1, [pc, #276]	; (8001474 <GPS_parse+0x248>)
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f012 ff1c 	bl	801419e <strncmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d13a      	bne.n	80013e2 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNGLL,%lf,%c,%lf,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 800136c:	4b42      	ldr	r3, [pc, #264]	; (8001478 <GPS_parse+0x24c>)
 800136e:	9303      	str	r3, [sp, #12]
 8001370:	4b38      	ldr	r3, [pc, #224]	; (8001454 <GPS_parse+0x228>)
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	4b33      	ldr	r3, [pc, #204]	; (8001444 <GPS_parse+0x218>)
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	4b33      	ldr	r3, [pc, #204]	; (8001448 <GPS_parse+0x21c>)
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4b33      	ldr	r3, [pc, #204]	; (800144c <GPS_parse+0x220>)
 800137e:	4a34      	ldr	r2, [pc, #208]	; (8001450 <GPS_parse+0x224>)
 8001380:	493e      	ldr	r1, [pc, #248]	; (800147c <GPS_parse+0x250>)
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f012 fe92 	bl	80140ac <siscanf>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	dd48      	ble.n	8001420 <GPS_parse+0x1f4>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800138e:	4b33      	ldr	r3, [pc, #204]	; (800145c <GPS_parse+0x230>)
 8001390:	ed93 7b08 	vldr	d7, [r3, #32]
 8001394:	4b31      	ldr	r3, [pc, #196]	; (800145c <GPS_parse+0x230>)
 8001396:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800139a:	4618      	mov	r0, r3
 800139c:	eeb0 0a47 	vmov.f32	s0, s14
 80013a0:	eef0 0a67 	vmov.f32	s1, s15
 80013a4:	f000 f87e 	bl	80014a4 <GPS_nmea_to_dec>
 80013a8:	eeb0 7a40 	vmov.f32	s14, s0
 80013ac:	eef0 7a60 	vmov.f32	s15, s1
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <GPS_parse+0x230>)
 80013b2:	ed83 7b02 	vstr	d7, [r3, #8]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <GPS_parse+0x230>)
 80013b8:	ed93 7b06 	vldr	d7, [r3, #24]
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <GPS_parse+0x230>)
 80013be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80013c2:	4618      	mov	r0, r3
 80013c4:	eeb0 0a47 	vmov.f32	s0, s14
 80013c8:	eef0 0a67 	vmov.f32	s1, s15
 80013cc:	f000 f86a 	bl	80014a4 <GPS_nmea_to_dec>
 80013d0:	eeb0 7a40 	vmov.f32	s14, s0
 80013d4:	eef0 7a60 	vmov.f32	s15, s1
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <GPS_parse+0x230>)
 80013da:	ed83 7b00 	vstr	d7, [r3]
        	return 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	e01f      	b.n	8001422 <GPS_parse+0x1f6>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80013e2:	2206      	movs	r2, #6
 80013e4:	4926      	ldr	r1, [pc, #152]	; (8001480 <GPS_parse+0x254>)
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f012 fed9 	bl	801419e <strncmp>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d116      	bne.n	8001420 <GPS_parse+0x1f4>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80013f2:	4b24      	ldr	r3, [pc, #144]	; (8001484 <GPS_parse+0x258>)
 80013f4:	9305      	str	r3, [sp, #20]
 80013f6:	4b24      	ldr	r3, [pc, #144]	; (8001488 <GPS_parse+0x25c>)
 80013f8:	9304      	str	r3, [sp, #16]
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <GPS_parse+0x260>)
 80013fc:	9303      	str	r3, [sp, #12]
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <GPS_parse+0x240>)
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <GPS_parse+0x264>)
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <GPS_parse+0x268>)
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <GPS_parse+0x26c>)
 800140c:	4a23      	ldr	r2, [pc, #140]	; (800149c <GPS_parse+0x270>)
 800140e:	4924      	ldr	r1, [pc, #144]	; (80014a0 <GPS_parse+0x274>)
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f012 fe4b 	bl	80140ac <siscanf>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	dd01      	ble.n	8001420 <GPS_parse+0x1f4>
            return 0;
 800141c:	2300      	movs	r3, #0
 800141e:	e000      	b.n	8001422 <GPS_parse+0x1f6>
    }
    return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	08018208 	.word	0x08018208
 8001430:	20009e70 	.word	0x20009e70
 8001434:	20009e6c 	.word	0x20009e6c
 8001438:	20009e68 	.word	0x20009e68
 800143c:	20009e64 	.word	0x20009e64
 8001440:	20009e60 	.word	0x20009e60
 8001444:	20009e5d 	.word	0x20009e5d
 8001448:	20009e48 	.word	0x20009e48
 800144c:	20009e5c 	.word	0x20009e5c
 8001450:	20009e50 	.word	0x20009e50
 8001454:	20009e58 	.word	0x20009e58
 8001458:	08018210 	.word	0x08018210
 800145c:	20009e30 	.word	0x20009e30
 8001460:	08018238 	.word	0x08018238
 8001464:	20009e7c 	.word	0x20009e7c
 8001468:	20009e78 	.word	0x20009e78
 800146c:	20009e74 	.word	0x20009e74
 8001470:	08018240 	.word	0x08018240
 8001474:	08018264 	.word	0x08018264
 8001478:	20009e80 	.word	0x20009e80
 800147c:	0801826c 	.word	0x0801826c
 8001480:	08018288 	.word	0x08018288
 8001484:	20009e98 	.word	0x20009e98
 8001488:	20009e94 	.word	0x20009e94
 800148c:	20009e91 	.word	0x20009e91
 8001490:	20009e90 	.word	0x20009e90
 8001494:	20009e8c 	.word	0x20009e8c
 8001498:	20009e88 	.word	0x20009e88
 800149c:	20009e84 	.word	0x20009e84
 80014a0:	08018290 	.word	0x08018290

080014a4 <GPS_nmea_to_dec>:

double GPS_nmea_to_dec(double deg_coord, char nsew) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	; 0x30
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	ed87 0b02 	vstr	d0, [r7, #8]
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
    int degree = (int)(deg_coord/100);
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <GPS_nmea_to_dec+0xac>)
 80014b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014bc:	f7ff f9d6 	bl	800086c <__aeabi_ddiv>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb56 	bl	8000b78 <__aeabi_d2iz>
 80014cc:	4603      	mov	r3, r0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    double minutes = deg_coord - degree*100;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	2264      	movs	r2, #100	; 0x64
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f833 	bl	8000544 <__aeabi_i2d>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014e6:	f7fe fedf 	bl	80002a8 <__aeabi_dsub>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double dec_deg = minutes / 60;
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <GPS_nmea_to_dec+0xb0>)
 80014f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014fc:	f7ff f9b6 	bl	800086c <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double decimal = degree + dec_deg;
 8001508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800150a:	f7ff f81b 	bl	8000544 <__aeabi_i2d>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001516:	f7fe fec9 	bl	80002ac <__adddf3>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b53      	cmp	r3, #83	; 0x53
 8001526:	d002      	beq.n	800152e <GPS_nmea_to_dec+0x8a>
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b57      	cmp	r3, #87	; 0x57
 800152c:	d105      	bne.n	800153a <GPS_nmea_to_dec+0x96>
        decimal *= -1;
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
 8001532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001534:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    return decimal;
 800153a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800153e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001542:	eeb0 0a47 	vmov.f32	s0, s14
 8001546:	eef0 0a67 	vmov.f32	s1, s15
 800154a:	3730      	adds	r7, #48	; 0x30
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40590000 	.word	0x40590000
 8001554:	404e0000 	.word	0x404e0000

08001558 <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001560:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <lsm6dsl_init+0xc8>)
 8001562:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 8001564:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <lsm6dsl_init+0xcc>)
 8001566:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 8001568:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <lsm6dsl_init+0xd0>)
 800156a:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 800156c:	200a      	movs	r0, #10
 800156e:	f000 fa13 	bl	8001998 <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	492d      	ldr	r1, [pc, #180]	; (800162c <lsm6dsl_init+0xd4>)
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fd71 	bl	8002060 <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <lsm6dsl_init+0xd4>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b6a      	cmp	r3, #106	; 0x6a
 8001584:	d005      	beq.n	8001592 <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001586:	2201      	movs	r2, #1
 8001588:	2102      	movs	r1, #2
 800158a:	4829      	ldr	r0, [pc, #164]	; (8001630 <lsm6dsl_init+0xd8>)
 800158c:	f002 ff62 	bl	8004454 <HAL_GPIO_WritePin>
		__BKPT();
 8001590:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	2101      	movs	r1, #1
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fd72 	bl	8002082 <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	4924      	ldr	r1, [pc, #144]	; (8001634 <lsm6dsl_init+0xdc>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fd92 	bl	80020ce <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <lsm6dsl_init+0xdc>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f5      	bne.n	800159e <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2101      	movs	r1, #1
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fc63 	bl	8001e84 <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	2104      	movs	r1, #4
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fbeb 	bl	8001da0 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2104      	movs	r1, #4
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fc31 	bl	8001e38 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	2103      	movs	r1, #3
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fbb9 	bl	8001d54 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	2106      	movs	r1, #6
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fbff 	bl	8001dec <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	2111      	movs	r1, #17
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fd83 	bl	8002100 <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	21a8      	movs	r1, #168	; 0xa8
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fdb4 	bl	800216e <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	461c      	mov	r4, r3
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}
 800161e:	bf00      	nop
 8001620:	080018b1 	.word	0x080018b1
 8001624:	080018eb 	.word	0x080018eb
 8001628:	20009ef4 	.word	0x20009ef4
 800162c:	200003a0 	.word	0x200003a0
 8001630:	40020800 	.word	0x40020800
 8001634:	200003a1 	.word	0x200003a1

08001638 <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsl, float *acceleration_mg){
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	1d3c      	adds	r4, r7, #4
 8001640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001644:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsl_xl_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001646:	f107 0217 	add.w	r2, r7, #23
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fc3e 	bl	8001ed0 <lsm6dsl_xl_flag_data_ready_get>

	if (reg) {
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d02d      	beq.n	80016b6 <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800165a:	2206      	movs	r2, #6
 800165c:	2100      	movs	r1, #0
 800165e:	4818      	ldr	r0, [pc, #96]	; (80016c0 <get_acceleration+0x88>)
 8001660:	f011 fda7 	bl	80131b2 <memset>
	  lsm6dsl_acceleration_raw_get(&dev_ctx_lsm6dsl, data_raw_acceleration);
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4916      	ldr	r1, [pc, #88]	; (80016c0 <get_acceleration+0x88>)
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fcae 	bl	8001fca <lsm6dsl_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[0]);
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <get_acceleration+0x88>)
 8001670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fb3d 	bl	8001cf4 <lsm6dsl_from_fs8g_to_mg>
 800167a:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <get_acceleration+0x88>)
 8001686:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 800168e:	4610      	mov	r0, r2
 8001690:	f000 fb30 	bl	8001cf4 <lsm6dsl_from_fs8g_to_mg>
 8001694:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 8001698:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <get_acceleration+0x88>)
 800169e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 80016a8:	4610      	mov	r0, r2
 80016aa:	f000 fb23 	bl	8001cf4 <lsm6dsl_from_fs8g_to_mg>
 80016ae:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 80016b2:	edc4 7a00 	vstr	s15, [r4]
	}

}
 80016b6:	bf00      	nop
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd90      	pop	{r4, r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000390 	.word	0x20000390

080016c4 <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsl, float *angular_rate_mdps){
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	1d3c      	adds	r4, r7, #4
 80016cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016d0:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsl_gy_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 80016d2:	f107 0217 	add.w	r2, r7, #23
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 fc11 	bl	8001f02 <lsm6dsl_gy_flag_data_ready_get>

	if (reg) {
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d02d      	beq.n	8001742 <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80016e6:	2206      	movs	r2, #6
 80016e8:	2100      	movs	r1, #0
 80016ea:	4818      	ldr	r0, [pc, #96]	; (800174c <get_angvelocity+0x88>)
 80016ec:	f011 fd61 	bl	80131b2 <memset>
	  lsm6dsl_angular_rate_raw_get(&dev_ctx_lsm6dsl, data_raw_angular_rate);
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4916      	ldr	r1, [pc, #88]	; (800174c <get_angvelocity+0x88>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 fc1d 	bl	8001f34 <lsm6dsl_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <get_angvelocity+0x88>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	4618      	mov	r0, r3
 8001702:	f000 fb0f 	bl	8001d24 <lsm6dsl_from_fs2000dps_to_mdps>
 8001706:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <get_angvelocity+0x88>)
 8001712:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800171a:	4610      	mov	r0, r2
 800171c:	f000 fb02 	bl	8001d24 <lsm6dsl_from_fs2000dps_to_mdps>
 8001720:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 8001724:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <get_angvelocity+0x88>)
 800172a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001734:	4610      	mov	r0, r2
 8001736:	f000 faf5 	bl	8001d24 <lsm6dsl_from_fs2000dps_to_mdps>
 800173a:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 800173e:	edc4 7a00 	vstr	s15, [r4]
	}
}
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	bf00      	nop
 800174c:	20000398 	.word	0x20000398

08001750 <lps22hh_init>:

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 8001758:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <lps22hh_init+0x94>)
 800175a:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 800175c:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <lps22hh_init+0x98>)
 800175e:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <lps22hh_init+0x9c>)
 8001762:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001764:	200a      	movs	r0, #10
 8001766:	f000 f917 	bl	8001998 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <lps22hh_init+0xa0>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	491e      	ldr	r1, [pc, #120]	; (80017f0 <lps22hh_init+0xa0>)
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fa3c 	bl	8001bf4 <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <lps22hh_init+0xa0>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2bb3      	cmp	r3, #179	; 0xb3
 8001782:	d007      	beq.n	8001794 <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001784:	2201      	movs	r2, #1
 8001786:	2104      	movs	r1, #4
 8001788:	481a      	ldr	r0, [pc, #104]	; (80017f4 <lps22hh_init+0xa4>)
 800178a:	f002 fe63 	bl	8004454 <HAL_GPIO_WritePin>
		__BKPT();
 800178e:	be00      	bkpt	0x0000
		Error_Handler();
 8001790:	f001 fadc 	bl	8002d4c <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	2101      	movs	r1, #1
 800179a:	4618      	mov	r0, r3
 800179c:	f000 fa3b 	bl	8001c16 <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4914      	ldr	r1, [pc, #80]	; (80017f8 <lps22hh_init+0xa8>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 fa5b 	bl	8001c62 <lps22hh_reset_get>
	} while (rst_lps22hh);
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <lps22hh_init+0xa8>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f5      	bne.n	80017a0 <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	2101      	movs	r1, #1
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f95a 	bl	8001a74 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_75_Hz_LOW_NOISE);
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	2115      	movs	r1, #21
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f97a 	bl	8001ac0 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	461c      	mov	r4, r3
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	371c      	adds	r7, #28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd90      	pop	{r4, r7, pc}
 80017e4:	08001925 	.word	0x08001925
 80017e8:	0800195f 	.word	0x0800195f
 80017ec:	20009ef4 	.word	0x20009ef4
 80017f0:	200003a8 	.word	0x200003a8
 80017f4:	40020800 	.word	0x40020800
 80017f8:	200003a9 	.word	0x200003a9

080017fc <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
 8001802:	1d3c      	adds	r4, r7, #4
 8001804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001808:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 800180a:	f107 0214 	add.w	r2, r7, #20
 800180e:	1d38      	adds	r0, r7, #4
 8001810:	2301      	movs	r3, #1
 8001812:	2127      	movs	r1, #39	; 0x27
 8001814:	f000 f8cb 	bl	80019ae <lps22hh_read_reg>

	if (reg.status.p_da) {
 8001818:	7d3b      	ldrb	r3, [r7, #20]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d011      	beq.n	8001848 <get_pressure+0x4c>
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <get_pressure+0x54>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4908      	ldr	r1, [pc, #32]	; (8001850 <get_pressure+0x54>)
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f994 	bl	8001b5c <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <get_pressure+0x54>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f8e9 	bl	8001a10 <lps22hh_from_lsb_to_hpa>
 800183e:	eef0 7a40 	vmov.f32	s15, s0
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001848:	bf00      	nop
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	200003a4 	.word	0x200003a4

08001854 <get_temperature>:

void get_temperature(stmdev_ctx_t dev_ctx_lps22hh, float *temperature){
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	1d3c      	adds	r4, r7, #4
 800185c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001860:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8001862:	f107 0214 	add.w	r2, r7, #20
 8001866:	1d38      	adds	r0, r7, #4
 8001868:	2301      	movs	r3, #1
 800186a:	2127      	movs	r1, #39	; 0x27
 800186c:	f000 f89f 	bl	80019ae <lps22hh_read_reg>

	if (reg.status.t_da) {
 8001870:	7d3b      	ldrb	r3, [r7, #20]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d012      	beq.n	80018a2 <get_temperature+0x4e>
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <get_temperature+0x58>)
 800187e:	2200      	movs	r2, #0
 8001880:	801a      	strh	r2, [r3, #0]
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&dev_ctx_lps22hh, &data_raw_temperature);
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4909      	ldr	r1, [pc, #36]	; (80018ac <get_temperature+0x58>)
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f991 	bl	8001bae <lps22hh_temperature_raw_get>
	  *temperature = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <get_temperature+0x58>)
 800188e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f8d4 	bl	8001a40 <lps22hh_from_lsb_to_celsius>
 8001898:	eef0 7a40 	vmov.f32	s15, s0
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000039e 	.word	0x2000039e

080018b0 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af04      	add	r7, sp, #16
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	461a      	mov	r2, r3
 80018bc:	460b      	mov	r3, r1
 80018be:	72fb      	strb	r3, [r7, #11]
 80018c0:	4613      	mov	r3, r2
 80018c2:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 80018c4:	7afb      	ldrb	r3, [r7, #11]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	893b      	ldrh	r3, [r7, #8]
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2301      	movs	r3, #1
 80018d8:	21d5      	movs	r1, #213	; 0xd5
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f002 ff3c 	bl	8004758 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b088      	sub	sp, #32
 80018ee:	af04      	add	r7, sp, #16
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	461a      	mov	r2, r3
 80018f6:	460b      	mov	r3, r1
 80018f8:	72fb      	strb	r3, [r7, #11]
 80018fa:	4613      	mov	r3, r2
 80018fc:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 80018fe:	7afb      	ldrb	r3, [r7, #11]
 8001900:	b29a      	uxth	r2, r3
 8001902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	893b      	ldrh	r3, [r7, #8]
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2301      	movs	r3, #1
 8001912:	21d5      	movs	r1, #213	; 0xd5
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f003 f819 	bl	800494c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af04      	add	r7, sp, #16
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	461a      	mov	r2, r3
 8001930:	460b      	mov	r3, r1
 8001932:	72fb      	strb	r3, [r7, #11]
 8001934:	4613      	mov	r3, r2
 8001936:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 8001938:	7afb      	ldrb	r3, [r7, #11]
 800193a:	b29a      	uxth	r2, r3
 800193c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001940:	9302      	str	r3, [sp, #8]
 8001942:	893b      	ldrh	r3, [r7, #8]
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2301      	movs	r3, #1
 800194c:	21b9      	movs	r1, #185	; 0xb9
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f002 ff02 	bl	8004758 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b088      	sub	sp, #32
 8001962:	af04      	add	r7, sp, #16
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	461a      	mov	r2, r3
 800196a:	460b      	mov	r3, r1
 800196c:	72fb      	strb	r3, [r7, #11]
 800196e:	4613      	mov	r3, r2
 8001970:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 8001972:	7afb      	ldrb	r3, [r7, #11]
 8001974:	b29a      	uxth	r2, r3
 8001976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197a:	9302      	str	r3, [sp, #8]
 800197c:	893b      	ldrh	r3, [r7, #8]
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2301      	movs	r3, #1
 8001986:	21b9      	movs	r1, #185	; 0xb9
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f002 ffdf 	bl	800494c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f002 f833 	bl	8003a0c <HAL_Delay>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80019ae:	b590      	push	{r4, r7, lr}
 80019b0:	b087      	sub	sp, #28
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	461a      	mov	r2, r3
 80019ba:	460b      	mov	r3, r1
 80019bc:	72fb      	strb	r3, [r7, #11]
 80019be:	4613      	mov	r3, r2
 80019c0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	685c      	ldr	r4, [r3, #4]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6898      	ldr	r0, [r3, #8]
 80019ca:	893b      	ldrh	r3, [r7, #8]
 80019cc:	7af9      	ldrb	r1, [r7, #11]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	47a0      	blx	r4
 80019d2:	6178      	str	r0, [r7, #20]

  return ret;
 80019d4:	697b      	ldr	r3, [r7, #20]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	371c      	adds	r7, #28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd90      	pop	{r4, r7, pc}

080019de <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80019de:	b590      	push	{r4, r7, lr}
 80019e0:	b087      	sub	sp, #28
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	461a      	mov	r2, r3
 80019ea:	460b      	mov	r3, r1
 80019ec:	72fb      	strb	r3, [r7, #11]
 80019ee:	4613      	mov	r3, r2
 80019f0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681c      	ldr	r4, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6898      	ldr	r0, [r3, #8]
 80019fa:	893b      	ldrh	r3, [r7, #8]
 80019fc:	7af9      	ldrb	r1, [r7, #11]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	47a0      	blx	r4
 8001a02:	6178      	str	r0, [r7, #20]

  return ret;
 8001a04:	697b      	ldr	r3, [r7, #20]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd90      	pop	{r4, r7, pc}
	...

08001a10 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a22:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a3c <lps22hh_from_lsb_to_hpa+0x2c>
 8001a26:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a2a:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	49800000 	.word	0x49800000

08001a40 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8001a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a56:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a70 <lps22hh_from_lsb_to_celsius+0x30>
 8001a5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a5e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a62:	eeb0 0a67 	vmov.f32	s0, s15
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	42c80000 	.word	0x42c80000

08001a74 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001a80:	f107 0208 	add.w	r2, r7, #8
 8001a84:	2301      	movs	r3, #1
 8001a86:	2110      	movs	r1, #16
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff90 	bl	80019ae <lps22hh_read_reg>
 8001a8e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10f      	bne.n	8001ab6 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	7a3b      	ldrb	r3, [r7, #8]
 8001aa0:	f362 0341 	bfi	r3, r2, #1, #1
 8001aa4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001aa6:	f107 0208 	add.w	r2, r7, #8
 8001aaa:	2301      	movs	r3, #1
 8001aac:	2110      	movs	r1, #16
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ff95 	bl	80019de <lps22hh_write_reg>
 8001ab4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001acc:	f107 0210 	add.w	r2, r7, #16
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	2110      	movs	r1, #16
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff6a 	bl	80019ae <lps22hh_read_reg>
 8001ada:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d107      	bne.n	8001af2 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001ae2:	f107 020c 	add.w	r2, r7, #12
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	2111      	movs	r1, #17
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff5f 	bl	80019ae <lps22hh_read_reg>
 8001af0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10f      	bne.n	8001b18 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	7c3b      	ldrb	r3, [r7, #16]
 8001b02:	f362 1306 	bfi	r3, r2, #4, #3
 8001b06:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001b08:	f107 0210 	add.w	r2, r7, #16
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	2110      	movs	r1, #16
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff64 	bl	80019de <lps22hh_write_reg>
 8001b16:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d119      	bne.n	8001b52 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	7b3b      	ldrb	r3, [r7, #12]
 8001b2a:	f362 0341 	bfi	r3, r2, #1, #1
 8001b2e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	08db      	lsrs	r3, r3, #3
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	7b3b      	ldrb	r3, [r7, #12]
 8001b3c:	f362 0300 	bfi	r3, r2, #0, #1
 8001b40:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001b42:	f107 020c 	add.w	r2, r7, #12
 8001b46:	2301      	movs	r3, #1
 8001b48:	2111      	movs	r1, #17
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ff47 	bl	80019de <lps22hh_write_reg>
 8001b50:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001b52:	697b      	ldr	r3, [r7, #20]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8001b66:	f107 0208 	add.w	r2, r7, #8
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	2128      	movs	r1, #40	; 0x28
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ff1d 	bl	80019ae <lps22hh_read_reg>
 8001b74:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8001b76:	7abb      	ldrb	r3, [r7, #10]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	7a7a      	ldrb	r2, [r7, #9]
 8001b86:	441a      	add	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	7a3a      	ldrb	r2, [r7, #8]
 8001b94:	441a      	add	r2, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	021a      	lsls	r2, r3, #8
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	601a      	str	r2, [r3, #0]

  return ret;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8001bb8:	f107 0208 	add.w	r2, r7, #8
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	212b      	movs	r1, #43	; 0x2b
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fef4 	bl	80019ae <lps22hh_read_reg>
 8001bc6:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8001bc8:	7a7b      	ldrb	r3, [r7, #9]
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	7a3b      	ldrb	r3, [r7, #8]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	b21a      	sxth	r2, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	801a      	strh	r2, [r3, #0]

  return ret;
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8001bfe:	2301      	movs	r3, #1
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	210f      	movs	r1, #15
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff fed2 	bl	80019ae <lps22hh_read_reg>
 8001c0a:	60f8      	str	r0, [r7, #12]

  return ret;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001c22:	f107 0208 	add.w	r2, r7, #8
 8001c26:	2301      	movs	r3, #1
 8001c28:	2111      	movs	r1, #17
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff febf 	bl	80019ae <lps22hh_read_reg>
 8001c30:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10f      	bne.n	8001c58 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	7a3b      	ldrb	r3, [r7, #8]
 8001c42:	f362 0382 	bfi	r3, r2, #2, #1
 8001c46:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001c48:	f107 0208 	add.w	r2, r7, #8
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	2111      	movs	r1, #17
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fec4 	bl	80019de <lps22hh_write_reg>
 8001c56:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c58:	68fb      	ldr	r3, [r7, #12]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b084      	sub	sp, #16
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001c6c:	f107 0208 	add.w	r2, r7, #8
 8001c70:	2301      	movs	r3, #1
 8001c72:	2111      	movs	r1, #17
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fe9a 	bl	80019ae <lps22hh_read_reg>
 8001c7a:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8001c7c:	7a3b      	ldrb	r3, [r7, #8]
 8001c7e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	701a      	strb	r2, [r3, #0]

  return ret;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	72fb      	strb	r3, [r7, #11]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685c      	ldr	r4, [r3, #4]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6898      	ldr	r0, [r3, #8]
 8001cb0:	893b      	ldrh	r3, [r7, #8]
 8001cb2:	7af9      	ldrb	r1, [r7, #11]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	47a0      	blx	r4
 8001cb8:	6178      	str	r0, [r7, #20]

  return ret;
 8001cba:	697b      	ldr	r3, [r7, #20]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}

08001cc4 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	72fb      	strb	r3, [r7, #11]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681c      	ldr	r4, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6898      	ldr	r0, [r3, #8]
 8001ce0:	893b      	ldrh	r3, [r7, #8]
 8001ce2:	7af9      	ldrb	r1, [r7, #11]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	47a0      	blx	r4
 8001ce8:	6178      	str	r0, [r7, #20]

  return ret;
 8001cea:	697b      	ldr	r3, [r7, #20]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd90      	pop	{r4, r7, pc}

08001cf4 <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 8001cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001d20 <lsm6dsl_from_fs8g_to_mg+0x2c>
 8001d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001d12:	eeb0 0a67 	vmov.f32	s0, s15
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	3e79db23 	.word	0x3e79db23

08001d24 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8001d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001d50 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 8001d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001d42:	eeb0 0a67 	vmov.f32	s0, s15
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	428c0000 	.word	0x428c0000

08001d54 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001d60:	f107 0208 	add.w	r2, r7, #8
 8001d64:	2301      	movs	r3, #1
 8001d66:	2110      	movs	r1, #16
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff93 	bl	8001c94 <lsm6dsl_read_reg>
 8001d6e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10f      	bne.n	8001d96 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	7a3b      	ldrb	r3, [r7, #8]
 8001d80:	f362 0383 	bfi	r3, r2, #2, #2
 8001d84:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001d86:	f107 0208 	add.w	r2, r7, #8
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	2110      	movs	r1, #16
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ff98 	bl	8001cc4 <lsm6dsl_write_reg>
 8001d94:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001dac:	f107 0208 	add.w	r2, r7, #8
 8001db0:	2301      	movs	r3, #1
 8001db2:	2110      	movs	r1, #16
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff6d 	bl	8001c94 <lsm6dsl_read_reg>
 8001dba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10f      	bne.n	8001de2 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	7a3b      	ldrb	r3, [r7, #8]
 8001dcc:	f362 1307 	bfi	r3, r2, #4, #4
 8001dd0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001dd2:	f107 0208 	add.w	r2, r7, #8
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	2110      	movs	r1, #16
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ff72 	bl	8001cc4 <lsm6dsl_write_reg>
 8001de0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001df8:	f107 0208 	add.w	r2, r7, #8
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	2111      	movs	r1, #17
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff47 	bl	8001c94 <lsm6dsl_read_reg>
 8001e06:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10f      	bne.n	8001e2e <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	7a3b      	ldrb	r3, [r7, #8]
 8001e18:	f362 0343 	bfi	r3, r2, #1, #3
 8001e1c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001e1e:	f107 0208 	add.w	r2, r7, #8
 8001e22:	2301      	movs	r3, #1
 8001e24:	2111      	movs	r1, #17
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ff4c 	bl	8001cc4 <lsm6dsl_write_reg>
 8001e2c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001e44:	f107 0208 	add.w	r2, r7, #8
 8001e48:	2301      	movs	r3, #1
 8001e4a:	2111      	movs	r1, #17
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff21 	bl	8001c94 <lsm6dsl_read_reg>
 8001e52:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10f      	bne.n	8001e7a <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	7a3b      	ldrb	r3, [r7, #8]
 8001e64:	f362 1307 	bfi	r3, r2, #4, #4
 8001e68:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001e6a:	f107 0208 	add.w	r2, r7, #8
 8001e6e:	2301      	movs	r3, #1
 8001e70:	2111      	movs	r1, #17
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ff26 	bl	8001cc4 <lsm6dsl_write_reg>
 8001e78:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001e90:	f107 0208 	add.w	r2, r7, #8
 8001e94:	2301      	movs	r3, #1
 8001e96:	2112      	movs	r1, #18
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff fefb 	bl	8001c94 <lsm6dsl_read_reg>
 8001e9e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10f      	bne.n	8001ec6 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	7a3b      	ldrb	r3, [r7, #8]
 8001eb0:	f362 1386 	bfi	r3, r2, #6, #1
 8001eb4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001eb6:	f107 0208 	add.w	r2, r7, #8
 8001eba:	2301      	movs	r3, #1
 8001ebc:	2112      	movs	r1, #18
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ff00 	bl	8001cc4 <lsm6dsl_write_reg>
 8001ec4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <lsm6dsl_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001eda:	f107 0208 	add.w	r2, r7, #8
 8001ede:	2301      	movs	r3, #1
 8001ee0:	211e      	movs	r1, #30
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fed6 	bl	8001c94 <lsm6dsl_read_reg>
 8001ee8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8001eea:	7a3b      	ldrb	r3, [r7, #8]
 8001eec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	701a      	strb	r2, [r3, #0]

  return ret;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <lsm6dsl_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001f0c:	f107 0208 	add.w	r2, r7, #8
 8001f10:	2301      	movs	r3, #1
 8001f12:	211e      	movs	r1, #30
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff febd 	bl	8001c94 <lsm6dsl_read_reg>
 8001f1a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8001f1c:	7a3b      	ldrb	r3, [r7, #8]
 8001f1e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	701a      	strb	r2, [r3, #0]

  return ret;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8001f3e:	f107 020c 	add.w	r2, r7, #12
 8001f42:	2306      	movs	r3, #6
 8001f44:	2122      	movs	r1, #34	; 0x22
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff fea4 	bl	8001c94 <lsm6dsl_read_reg>
 8001f4c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001f4e:	7b7b      	ldrb	r3, [r7, #13]
 8001f50:	b21a      	sxth	r2, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	7b3b      	ldrb	r3, [r7, #12]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	b21a      	sxth	r2, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	3302      	adds	r3, #2
 8001f76:	b212      	sxth	r2, r2
 8001f78:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	7bbb      	ldrb	r3, [r7, #14]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	3302      	adds	r3, #2
 8001f94:	b212      	sxth	r2, r2
 8001f96:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001f98:	7c7a      	ldrb	r2, [r7, #17]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	b212      	sxth	r2, r2
 8001fa0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	7c3b      	ldrb	r3, [r7, #16]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	b212      	sxth	r2, r2
 8001fbe:	801a      	strh	r2, [r3, #0]

  return ret;
 8001fc0:	697b      	ldr	r3, [r7, #20]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001fd4:	f107 020c 	add.w	r2, r7, #12
 8001fd8:	2306      	movs	r3, #6
 8001fda:	2128      	movs	r1, #40	; 0x28
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff fe59 	bl	8001c94 <lsm6dsl_read_reg>
 8001fe2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001fe4:	7b7b      	ldrb	r3, [r7, #13]
 8001fe6:	b21a      	sxth	r2, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	7b3b      	ldrb	r3, [r7, #12]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	b21a      	sxth	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	3302      	adds	r3, #2
 800200c:	b212      	sxth	r2, r2
 800200e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	3302      	adds	r3, #2
 8002014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002018:	b29b      	uxth	r3, r3
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	b29a      	uxth	r2, r3
 800201e:	7bbb      	ldrb	r3, [r7, #14]
 8002020:	b29b      	uxth	r3, r3
 8002022:	4413      	add	r3, r2
 8002024:	b29a      	uxth	r2, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	3302      	adds	r3, #2
 800202a:	b212      	sxth	r2, r2
 800202c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800202e:	7c7a      	ldrb	r2, [r7, #17]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	3304      	adds	r3, #4
 8002034:	b212      	sxth	r2, r2
 8002036:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	3304      	adds	r3, #4
 800203c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002040:	b29b      	uxth	r3, r3
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b29a      	uxth	r2, r3
 8002046:	7c3b      	ldrb	r3, [r7, #16]
 8002048:	b29b      	uxth	r3, r3
 800204a:	4413      	add	r3, r2
 800204c:	b29a      	uxth	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	3304      	adds	r3, #4
 8002052:	b212      	sxth	r2, r2
 8002054:	801a      	strh	r2, [r3, #0]

  return ret;
 8002056:	697b      	ldr	r3, [r7, #20]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800206a:	2301      	movs	r3, #1
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	210f      	movs	r1, #15
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fe0f 	bl	8001c94 <lsm6dsl_read_reg>
 8002076:	60f8      	str	r0, [r7, #12]

  return ret;
 8002078:	68fb      	ldr	r3, [r7, #12]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800208e:	f107 0208 	add.w	r2, r7, #8
 8002092:	2301      	movs	r3, #1
 8002094:	2112      	movs	r1, #18
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fdfc 	bl	8001c94 <lsm6dsl_read_reg>
 800209c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10f      	bne.n	80020c4 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	7a3b      	ldrb	r3, [r7, #8]
 80020ae:	f362 0300 	bfi	r3, r2, #0, #1
 80020b2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80020b4:	f107 0208 	add.w	r2, r7, #8
 80020b8:	2301      	movs	r3, #1
 80020ba:	2112      	movs	r1, #18
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff fe01 	bl	8001cc4 <lsm6dsl_write_reg>
 80020c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80020c4:	68fb      	ldr	r3, [r7, #12]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80020d8:	f107 0208 	add.w	r2, r7, #8
 80020dc:	2301      	movs	r3, #1
 80020de:	2112      	movs	r1, #18
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff fdd7 	bl	8001c94 <lsm6dsl_read_reg>
 80020e6:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80020e8:	7a3b      	ldrb	r3, [r7, #8]
 80020ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	701a      	strb	r2, [r3, #0]

  return ret;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 800210c:	f107 0208 	add.w	r2, r7, #8
 8002110:	2301      	movs	r3, #1
 8002112:	2117      	movs	r1, #23
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff fdbd 	bl	8001c94 <lsm6dsl_read_reg>
 800211a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d120      	bne.n	8002164 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	b2da      	uxtb	r2, r3
 800212c:	7a3b      	ldrb	r3, [r7, #8]
 800212e:	f362 03c3 	bfi	r3, r2, #3, #1
 8002132:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	b2da      	uxtb	r2, r3
 800213c:	7a3b      	ldrb	r3, [r7, #8]
 800213e:	f362 1346 	bfi	r3, r2, #5, #2
 8002142:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8002144:	7a3b      	ldrb	r3, [r7, #8]
 8002146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 800214c:	7a3b      	ldrb	r3, [r7, #8]
 800214e:	f36f 0382 	bfc	r3, #2, #1
 8002152:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8002154:	f107 0208 	add.w	r2, r7, #8
 8002158:	2301      	movs	r3, #1
 800215a:	2117      	movs	r1, #23
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff fdb1 	bl	8001cc4 <lsm6dsl_write_reg>
 8002162:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002164:	68fb      	ldr	r3, [r7, #12]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800217a:	f107 0208 	add.w	r2, r7, #8
 800217e:	2301      	movs	r3, #1
 8002180:	2116      	movs	r1, #22
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fd86 	bl	8001c94 <lsm6dsl_read_reg>
 8002188:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d157      	bne.n	8002240 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	b2da      	uxtb	r2, r3
 800219a:	7a3b      	ldrb	r3, [r7, #8]
 800219c:	f362 1305 	bfi	r3, r2, #4, #2
 80021a0:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	09db      	lsrs	r3, r3, #7
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	7a3b      	ldrb	r3, [r7, #8]
 80021b0:	f362 1386 	bfi	r3, r2, #6, #1
 80021b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80021b6:	f107 0208 	add.w	r2, r7, #8
 80021ba:	2301      	movs	r3, #1
 80021bc:	2116      	movs	r1, #22
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff fd80 	bl	8001cc4 <lsm6dsl_write_reg>
 80021c4:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d139      	bne.n	8002240 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80021cc:	f107 020c 	add.w	r2, r7, #12
 80021d0:	2301      	movs	r3, #1
 80021d2:	2115      	movs	r1, #21
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff fd5d 	bl	8001c94 <lsm6dsl_read_reg>
 80021da:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d12e      	bne.n	8002240 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	7b3b      	ldrb	r3, [r7, #12]
 80021ec:	f362 0301 	bfi	r3, r2, #0, #2
 80021f0:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80021f2:	f107 020c 	add.w	r2, r7, #12
 80021f6:	2301      	movs	r3, #1
 80021f8:	2115      	movs	r1, #21
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fd62 	bl	8001cc4 <lsm6dsl_write_reg>
 8002200:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d11b      	bne.n	8002240 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8002208:	f107 0210 	add.w	r2, r7, #16
 800220c:	2301      	movs	r3, #1
 800220e:	2113      	movs	r1, #19
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff fd3f 	bl	8001c94 <lsm6dsl_read_reg>
 8002216:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d110      	bne.n	8002240 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	b2da      	uxtb	r2, r3
 8002228:	7c3b      	ldrb	r3, [r7, #16]
 800222a:	f362 0341 	bfi	r3, r2, #1, #1
 800222e:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8002230:	f107 0210 	add.w	r2, r7, #16
 8002234:	2301      	movs	r3, #1
 8002236:	2113      	movs	r1, #19
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fd43 	bl	8001cc4 <lsm6dsl_write_reg>
 800223e:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002240:	697b      	ldr	r3, [r7, #20]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002252:	f001 fb99 	bl	8003988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002256:	f000 f8e9 	bl	800242c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800225a:	f000 fb19 	bl	8002890 <MX_GPIO_Init>
  MX_ADC1_Init();
 800225e:	f000 f94f 	bl	8002500 <MX_ADC1_Init>
  MX_SPI4_Init();
 8002262:	f000 f9df 	bl	8002624 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002266:	f000 fa49 	bl	80026fc <MX_TIM2_Init>
  MX_SPI5_Init();
 800226a:	f000 fa11 	bl	8002690 <MX_SPI5_Init>
  MX_FATFS_Init();
 800226e:	f008 f907 	bl	800a480 <MX_FATFS_Init>
  MX_I2C3_Init();
 8002272:	f000 f997 	bl	80025a4 <MX_I2C3_Init>
  MX_USART6_UART_Init();
 8002276:	f000 fae1 	bl	800283c <MX_USART6_UART_Init>
  MX_UART8_Init();
 800227a:	f000 fab5 	bl	80027e8 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	2102      	movs	r1, #2
 8002282:	484f      	ldr	r0, [pc, #316]	; (80023c0 <main+0x174>)
 8002284:	f002 f8e6 	bl	8004454 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8002288:	2200      	movs	r2, #0
 800228a:	2104      	movs	r1, #4
 800228c:	484c      	ldr	r0, [pc, #304]	; (80023c0 <main+0x174>)
 800228e:	f002 f8e1 	bl	8004454 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8002292:	2200      	movs	r2, #0
 8002294:	2108      	movs	r1, #8
 8002296:	484a      	ldr	r0, [pc, #296]	; (80023c0 <main+0x174>)
 8002298:	f002 f8dc 	bl	8004454 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 800229c:	2200      	movs	r2, #0
 800229e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022a2:	4848      	ldr	r0, [pc, #288]	; (80023c4 <main+0x178>)
 80022a4:	f002 f8d6 	bl	8004454 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 80022a8:	2200      	movs	r2, #0
 80022aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022ae:	4845      	ldr	r0, [pc, #276]	; (80023c4 <main+0x178>)
 80022b0:	f002 f8d0 	bl	8004454 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 80022b4:	2200      	movs	r2, #0
 80022b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ba:	4842      	ldr	r0, [pc, #264]	; (80023c4 <main+0x178>)
 80022bc:	f002 f8ca 	bl	8004454 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2102      	movs	r1, #2
 80022c4:	483f      	ldr	r0, [pc, #252]	; (80023c4 <main+0x178>)
 80022c6:	f002 f8c5 	bl	8004454 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 80022ca:	2200      	movs	r2, #0
 80022cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022d0:	483d      	ldr	r0, [pc, #244]	; (80023c8 <main+0x17c>)
 80022d2:	f002 f8bf 	bl	8004454 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022dc:	483a      	ldr	r0, [pc, #232]	; (80023c8 <main+0x17c>)
 80022de:	f002 f8b9 	bl	8004454 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2104      	movs	r1, #4
 80022e6:	4839      	ldr	r0, [pc, #228]	; (80023cc <main+0x180>)
 80022e8:	f002 f8b4 	bl	8004454 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	4836      	ldr	r0, [pc, #216]	; (80023cc <main+0x180>)
 80022f2:	f002 f8af 	bl	8004454 <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022fc:	4833      	ldr	r0, [pc, #204]	; (80023cc <main+0x180>)
 80022fe:	f002 f8a9 	bl	8004454 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002308:	482d      	ldr	r0, [pc, #180]	; (80023c0 <main+0x174>)
 800230a:	f002 f8a3 	bl	8004454 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002314:	482e      	ldr	r0, [pc, #184]	; (80023d0 <main+0x184>)
 8002316:	f002 f89d 	bl	8004454 <HAL_GPIO_WritePin>

  dev_ctx_lsm = lsm6dsl_init();
 800231a:	4c2e      	ldr	r4, [pc, #184]	; (80023d4 <main+0x188>)
 800231c:	463b      	mov	r3, r7
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f91a 	bl	8001558 <lsm6dsl_init>
 8002324:	463b      	mov	r3, r7
 8002326:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800232a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dev_ctx_lps = lps22hh_init();
 800232e:	4c2a      	ldr	r4, [pc, #168]	; (80023d8 <main+0x18c>)
 8002330:	463b      	mov	r3, r7
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fa0c 	bl	8001750 <lps22hh_init>
 8002338:	463b      	mov	r3, r7
 800233a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800233e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002342:	f00c ffe9 	bl	800f318 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of mutex */
  mutexHandle = osSemaphoreNew(1, 1, &mutex_attributes);
 8002346:	4a25      	ldr	r2, [pc, #148]	; (80023dc <main+0x190>)
 8002348:	2101      	movs	r1, #1
 800234a:	2001      	movs	r0, #1
 800234c:	f00d f8db 	bl	800f506 <osSemaphoreNew>
 8002350:	4603      	mov	r3, r0
 8002352:	4a23      	ldr	r2, [pc, #140]	; (80023e0 <main+0x194>)
 8002354:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of printSensors */
  printSensorsHandle = osThreadNew(printSensorsFunc, NULL, &printSensors_attributes);
 8002356:	4a23      	ldr	r2, [pc, #140]	; (80023e4 <main+0x198>)
 8002358:	2100      	movs	r1, #0
 800235a:	4823      	ldr	r0, [pc, #140]	; (80023e8 <main+0x19c>)
 800235c:	f00d f826 	bl	800f3ac <osThreadNew>
 8002360:	4603      	mov	r3, r0
 8002362:	4a22      	ldr	r2, [pc, #136]	; (80023ec <main+0x1a0>)
 8002364:	6013      	str	r3, [r2, #0]

  /* creation of pollSensors */
  pollSensorsHandle = osThreadNew(pollSensorsFunc, NULL, &pollSensors_attributes);
 8002366:	4a22      	ldr	r2, [pc, #136]	; (80023f0 <main+0x1a4>)
 8002368:	2100      	movs	r1, #0
 800236a:	4822      	ldr	r0, [pc, #136]	; (80023f4 <main+0x1a8>)
 800236c:	f00d f81e 	bl	800f3ac <osThreadNew>
 8002370:	4603      	mov	r3, r0
 8002372:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <main+0x1ac>)
 8002374:	6013      	str	r3, [r2, #0]

  /* creation of saveData */
  saveDataHandle = osThreadNew(saveDataFunc, NULL, &saveData_attributes);
 8002376:	4a21      	ldr	r2, [pc, #132]	; (80023fc <main+0x1b0>)
 8002378:	2100      	movs	r1, #0
 800237a:	4821      	ldr	r0, [pc, #132]	; (8002400 <main+0x1b4>)
 800237c:	f00d f816 	bl	800f3ac <osThreadNew>
 8002380:	4603      	mov	r3, r0
 8002382:	4a20      	ldr	r2, [pc, #128]	; (8002404 <main+0x1b8>)
 8002384:	6013      	str	r3, [r2, #0]

  /* creation of ejection */
  ejectionHandle = osThreadNew(ejectionFunc, NULL, &ejection_attributes);
 8002386:	4a20      	ldr	r2, [pc, #128]	; (8002408 <main+0x1bc>)
 8002388:	2100      	movs	r1, #0
 800238a:	4820      	ldr	r0, [pc, #128]	; (800240c <main+0x1c0>)
 800238c:	f00d f80e 	bl	800f3ac <osThreadNew>
 8002390:	4603      	mov	r3, r0
 8002392:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <main+0x1c4>)
 8002394:	6013      	str	r3, [r2, #0]

  /* creation of transmitData */
  transmitDataHandle = osThreadNew(transmitDataFunc, NULL, &transmitData_attributes);
 8002396:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <main+0x1c8>)
 8002398:	2100      	movs	r1, #0
 800239a:	481f      	ldr	r0, [pc, #124]	; (8002418 <main+0x1cc>)
 800239c:	f00d f806 	bl	800f3ac <osThreadNew>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <main+0x1d0>)
 80023a4:	6013      	str	r3, [r2, #0]
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */

  HAL_Delay(1000);
 80023a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023aa:	f001 fb2f 	bl	8003a0c <HAL_Delay>

  sd_init_dynamic_filename("FC", "", &filename);
 80023ae:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <main+0x1d4>)
 80023b0:	491c      	ldr	r1, [pc, #112]	; (8002424 <main+0x1d8>)
 80023b2:	481d      	ldr	r0, [pc, #116]	; (8002428 <main+0x1dc>)
 80023b4:	f000 fcf4 	bl	8002da0 <sd_init_dynamic_filename>

  osKernelStart();
 80023b8:	f00c ffd2 	bl	800f360 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <main+0x170>
 80023be:	bf00      	nop
 80023c0:	40020800 	.word	0x40020800
 80023c4:	40021800 	.word	0x40021800
 80023c8:	40021400 	.word	0x40021400
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40020000 	.word	0x40020000
 80023d4:	2000a718 	.word	0x2000a718
 80023d8:	2000a724 	.word	0x2000a724
 80023dc:	0801859c 	.word	0x0801859c
 80023e0:	2000a628 	.word	0x2000a628
 80023e4:	080184e8 	.word	0x080184e8
 80023e8:	08002af5 	.word	0x08002af5
 80023ec:	20009fa4 	.word	0x20009fa4
 80023f0:	0801850c 	.word	0x0801850c
 80023f4:	08002c29 	.word	0x08002c29
 80023f8:	2000a1e0 	.word	0x2000a1e0
 80023fc:	08018530 	.word	0x08018530
 8002400:	08002c91 	.word	0x08002c91
 8002404:	20009ef0 	.word	0x20009ef0
 8002408:	08018554 	.word	0x08018554
 800240c:	08002d05 	.word	0x08002d05
 8002410:	20009fa8 	.word	0x20009fa8
 8002414:	08018578 	.word	0x08018578
 8002418:	08002d17 	.word	0x08002d17
 800241c:	2000a624 	.word	0x2000a624
 8002420:	2000a1e4 	.word	0x2000a1e4
 8002424:	080182fc 	.word	0x080182fc
 8002428:	08018300 	.word	0x08018300

0800242c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b094      	sub	sp, #80	; 0x50
 8002430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002432:	f107 0320 	add.w	r3, r7, #32
 8002436:	2230      	movs	r2, #48	; 0x30
 8002438:	2100      	movs	r1, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f010 feb9 	bl	80131b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <SystemClock_Config+0xcc>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	4a27      	ldr	r2, [pc, #156]	; (80024f8 <SystemClock_Config+0xcc>)
 800245a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245e:	6413      	str	r3, [r2, #64]	; 0x40
 8002460:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <SystemClock_Config+0xcc>)
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800246c:	2300      	movs	r3, #0
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	4b22      	ldr	r3, [pc, #136]	; (80024fc <SystemClock_Config+0xd0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002478:	4a20      	ldr	r2, [pc, #128]	; (80024fc <SystemClock_Config+0xd0>)
 800247a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <SystemClock_Config+0xd0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800248c:	2301      	movs	r3, #1
 800248e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002496:	2302      	movs	r3, #2
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800249a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800249e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024a0:	2308      	movs	r3, #8
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80024a4:	2348      	movs	r3, #72	; 0x48
 80024a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024a8:	2302      	movs	r3, #2
 80024aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80024ac:	2303      	movs	r3, #3
 80024ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b0:	f107 0320 	add.w	r3, r7, #32
 80024b4:	4618      	mov	r0, r3
 80024b6:	f004 f9c9 	bl	800684c <HAL_RCC_OscConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80024c0:	f000 fc44 	bl	8002d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024c4:	230f      	movs	r3, #15
 80024c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c8:	2302      	movs	r3, #2
 80024ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024da:	f107 030c 	add.w	r3, r7, #12
 80024de:	2102      	movs	r1, #2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f004 fc2b 	bl	8006d3c <HAL_RCC_ClockConfig>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80024ec:	f000 fc2e 	bl	8002d4c <Error_Handler>
  }
}
 80024f0:	bf00      	nop
 80024f2:	3750      	adds	r7, #80	; 0x50
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40007000 	.word	0x40007000

08002500 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002506:	463b      	mov	r3, r7
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <MX_ADC1_Init+0x98>)
 8002514:	4a21      	ldr	r2, [pc, #132]	; (800259c <MX_ADC1_Init+0x9c>)
 8002516:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002518:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <MX_ADC1_Init+0x98>)
 800251a:	2200      	movs	r2, #0
 800251c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800251e:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <MX_ADC1_Init+0x98>)
 8002520:	2200      	movs	r2, #0
 8002522:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002524:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <MX_ADC1_Init+0x98>)
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <MX_ADC1_Init+0x98>)
 800252c:	2200      	movs	r2, #0
 800252e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <MX_ADC1_Init+0x98>)
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <MX_ADC1_Init+0x98>)
 800253a:	2200      	movs	r2, #0
 800253c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800253e:	4b16      	ldr	r3, [pc, #88]	; (8002598 <MX_ADC1_Init+0x98>)
 8002540:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <MX_ADC1_Init+0xa0>)
 8002542:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <MX_ADC1_Init+0x98>)
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <MX_ADC1_Init+0x98>)
 800254c:	2201      	movs	r2, #1
 800254e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <MX_ADC1_Init+0x98>)
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <MX_ADC1_Init+0x98>)
 800255a:	2201      	movs	r2, #1
 800255c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800255e:	480e      	ldr	r0, [pc, #56]	; (8002598 <MX_ADC1_Init+0x98>)
 8002560:	f001 fa78 	bl	8003a54 <HAL_ADC_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800256a:	f000 fbef 	bl	8002d4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800256e:	2306      	movs	r3, #6
 8002570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002572:	2301      	movs	r3, #1
 8002574:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002576:	2307      	movs	r3, #7
 8002578:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800257a:	463b      	mov	r3, r7
 800257c:	4619      	mov	r1, r3
 800257e:	4806      	ldr	r0, [pc, #24]	; (8002598 <MX_ADC1_Init+0x98>)
 8002580:	f001 faac 	bl	8003adc <HAL_ADC_ConfigChannel>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800258a:	f000 fbdf 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	2000a5dc 	.word	0x2000a5dc
 800259c:	40012000 	.word	0x40012000
 80025a0:	0f000001 	.word	0x0f000001

080025a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <MX_I2C3_Init+0x74>)
 80025aa:	4a1c      	ldr	r2, [pc, #112]	; (800261c <MX_I2C3_Init+0x78>)
 80025ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <MX_I2C3_Init+0x74>)
 80025b0:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <MX_I2C3_Init+0x7c>)
 80025b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025b4:	4b18      	ldr	r3, [pc, #96]	; (8002618 <MX_I2C3_Init+0x74>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <MX_I2C3_Init+0x74>)
 80025bc:	2200      	movs	r2, #0
 80025be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <MX_I2C3_Init+0x74>)
 80025c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025c6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025c8:	4b13      	ldr	r3, [pc, #76]	; (8002618 <MX_I2C3_Init+0x74>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <MX_I2C3_Init+0x74>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025d4:	4b10      	ldr	r3, [pc, #64]	; (8002618 <MX_I2C3_Init+0x74>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <MX_I2C3_Init+0x74>)
 80025dc:	2200      	movs	r2, #0
 80025de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80025e0:	480d      	ldr	r0, [pc, #52]	; (8002618 <MX_I2C3_Init+0x74>)
 80025e2:	f001 ff75 	bl	80044d0 <HAL_I2C_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80025ec:	f000 fbae 	bl	8002d4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025f0:	2100      	movs	r1, #0
 80025f2:	4809      	ldr	r0, [pc, #36]	; (8002618 <MX_I2C3_Init+0x74>)
 80025f4:	f002 ff2b 	bl	800544e <HAL_I2CEx_ConfigAnalogFilter>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80025fe:	f000 fba5 	bl	8002d4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002602:	2100      	movs	r1, #0
 8002604:	4804      	ldr	r0, [pc, #16]	; (8002618 <MX_I2C3_Init+0x74>)
 8002606:	f002 ff5e 	bl	80054c6 <HAL_I2CEx_ConfigDigitalFilter>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002610:	f000 fb9c 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20009ef4 	.word	0x20009ef4
 800261c:	40005c00 	.word	0x40005c00
 8002620:	000186a0 	.word	0x000186a0

08002624 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002628:	4b17      	ldr	r3, [pc, #92]	; (8002688 <MX_SPI4_Init+0x64>)
 800262a:	4a18      	ldr	r2, [pc, #96]	; (800268c <MX_SPI4_Init+0x68>)
 800262c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800262e:	4b16      	ldr	r3, [pc, #88]	; (8002688 <MX_SPI4_Init+0x64>)
 8002630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002634:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <MX_SPI4_Init+0x64>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <MX_SPI4_Init+0x64>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_SPI4_Init+0x64>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <MX_SPI4_Init+0x64>)
 800264a:	2200      	movs	r2, #0
 800264c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_SPI4_Init+0x64>)
 8002650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002654:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <MX_SPI4_Init+0x64>)
 8002658:	2230      	movs	r2, #48	; 0x30
 800265a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <MX_SPI4_Init+0x64>)
 800265e:	2200      	movs	r2, #0
 8002660:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <MX_SPI4_Init+0x64>)
 8002664:	2200      	movs	r2, #0
 8002666:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <MX_SPI4_Init+0x64>)
 800266a:	2200      	movs	r2, #0
 800266c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_SPI4_Init+0x64>)
 8002670:	220a      	movs	r2, #10
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002674:	4804      	ldr	r0, [pc, #16]	; (8002688 <MX_SPI4_Init+0x64>)
 8002676:	f004 fd8d 	bl	8007194 <HAL_SPI_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002680:	f000 fb64 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20009dd4 	.word	0x20009dd4
 800268c:	40013400 	.word	0x40013400

08002690 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002694:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <MX_SPI5_Init+0x64>)
 8002696:	4a18      	ldr	r2, [pc, #96]	; (80026f8 <MX_SPI5_Init+0x68>)
 8002698:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800269a:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <MX_SPI5_Init+0x64>)
 800269c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026a0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80026a2:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <MX_SPI5_Init+0x64>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80026a8:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <MX_SPI5_Init+0x64>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026ae:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <MX_SPI5_Init+0x64>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026b4:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <MX_SPI5_Init+0x64>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <MX_SPI5_Init+0x64>)
 80026bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <MX_SPI5_Init+0x64>)
 80026c4:	2238      	movs	r2, #56	; 0x38
 80026c6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <MX_SPI5_Init+0x64>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <MX_SPI5_Init+0x64>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <MX_SPI5_Init+0x64>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_SPI5_Init+0x64>)
 80026dc:	220a      	movs	r2, #10
 80026de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80026e0:	4804      	ldr	r0, [pc, #16]	; (80026f4 <MX_SPI5_Init+0x64>)
 80026e2:	f004 fd57 	bl	8007194 <HAL_SPI_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80026ec:	f000 fb2e 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20009f4c 	.word	0x20009f4c
 80026f8:	40015000 	.word	0x40015000

080026fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08e      	sub	sp, #56	; 0x38
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002710:	f107 0320 	add.w	r3, r7, #32
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
 8002728:	615a      	str	r2, [r3, #20]
 800272a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800272c:	4b2d      	ldr	r3, [pc, #180]	; (80027e4 <MX_TIM2_Init+0xe8>)
 800272e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002732:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50;
 8002734:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <MX_TIM2_Init+0xe8>)
 8002736:	2232      	movs	r2, #50	; 0x32
 8002738:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273a:	4b2a      	ldr	r3, [pc, #168]	; (80027e4 <MX_TIM2_Init+0xe8>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002740:	4b28      	ldr	r3, [pc, #160]	; (80027e4 <MX_TIM2_Init+0xe8>)
 8002742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002746:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002748:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <MX_TIM2_Init+0xe8>)
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274e:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <MX_TIM2_Init+0xe8>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002754:	4823      	ldr	r0, [pc, #140]	; (80027e4 <MX_TIM2_Init+0xe8>)
 8002756:	f005 f813 	bl	8007780 <HAL_TIM_Base_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002760:	f000 faf4 	bl	8002d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800276a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800276e:	4619      	mov	r1, r3
 8002770:	481c      	ldr	r0, [pc, #112]	; (80027e4 <MX_TIM2_Init+0xe8>)
 8002772:	f005 fae9 	bl	8007d48 <HAL_TIM_ConfigClockSource>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800277c:	f000 fae6 	bl	8002d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002780:	4818      	ldr	r0, [pc, #96]	; (80027e4 <MX_TIM2_Init+0xe8>)
 8002782:	f005 f8bd 	bl	8007900 <HAL_TIM_PWM_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800278c:	f000 fade 	bl	8002d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002790:	2320      	movs	r3, #32
 8002792:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002798:	f107 0320 	add.w	r3, r7, #32
 800279c:	4619      	mov	r1, r3
 800279e:	4811      	ldr	r0, [pc, #68]	; (80027e4 <MX_TIM2_Init+0xe8>)
 80027a0:	f005 feac 	bl	80084fc <HAL_TIMEx_MasterConfigSynchronization>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80027aa:	f000 facf 	bl	8002d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ae:	2360      	movs	r3, #96	; 0x60
 80027b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80027b2:	2364      	movs	r3, #100	; 0x64
 80027b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	2208      	movs	r2, #8
 80027c2:	4619      	mov	r1, r3
 80027c4:	4807      	ldr	r0, [pc, #28]	; (80027e4 <MX_TIM2_Init+0xe8>)
 80027c6:	f005 f9fd 	bl	8007bc4 <HAL_TIM_PWM_ConfigChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80027d0:	f000 fabc 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80027d4:	4803      	ldr	r0, [pc, #12]	; (80027e4 <MX_TIM2_Init+0xe8>)
 80027d6:	f000 fe89 	bl	80034ec <HAL_TIM_MspPostInit>

}
 80027da:	bf00      	nop
 80027dc:	3738      	adds	r7, #56	; 0x38
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	2000a6d0 	.word	0x2000a6d0

080027e8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <MX_UART8_Init+0x4c>)
 80027ee:	4a12      	ldr	r2, [pc, #72]	; (8002838 <MX_UART8_Init+0x50>)
 80027f0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <MX_UART8_Init+0x4c>)
 80027f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027f8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <MX_UART8_Init+0x4c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <MX_UART8_Init+0x4c>)
 8002802:	2200      	movs	r2, #0
 8002804:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <MX_UART8_Init+0x4c>)
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <MX_UART8_Init+0x4c>)
 800280e:	220c      	movs	r2, #12
 8002810:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <MX_UART8_Init+0x4c>)
 8002814:	2200      	movs	r2, #0
 8002816:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <MX_UART8_Init+0x4c>)
 800281a:	2200      	movs	r2, #0
 800281c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800281e:	4805      	ldr	r0, [pc, #20]	; (8002834 <MX_UART8_Init+0x4c>)
 8002820:	f005 fefc 	bl	800861c <HAL_UART_Init>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800282a:	f000 fa8f 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	2000a63c 	.word	0x2000a63c
 8002838:	40007c00 	.word	0x40007c00

0800283c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <MX_USART6_UART_Init+0x4c>)
 8002842:	4a12      	ldr	r2, [pc, #72]	; (800288c <MX_USART6_UART_Init+0x50>)
 8002844:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <MX_USART6_UART_Init+0x4c>)
 8002848:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800284c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <MX_USART6_UART_Init+0x4c>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <MX_USART6_UART_Init+0x4c>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <MX_USART6_UART_Init+0x4c>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <MX_USART6_UART_Init+0x4c>)
 8002862:	220c      	movs	r2, #12
 8002864:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <MX_USART6_UART_Init+0x4c>)
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <MX_USART6_UART_Init+0x4c>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002872:	4805      	ldr	r0, [pc, #20]	; (8002888 <MX_USART6_UART_Init+0x4c>)
 8002874:	f005 fed2 	bl	800861c <HAL_UART_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800287e:	f000 fa65 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	2000a680 	.word	0x2000a680
 800288c:	40011400 	.word	0x40011400

08002890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08c      	sub	sp, #48	; 0x30
 8002894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	60da      	str	r2, [r3, #12]
 80028a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	4b8b      	ldr	r3, [pc, #556]	; (8002ad8 <MX_GPIO_Init+0x248>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a8a      	ldr	r2, [pc, #552]	; (8002ad8 <MX_GPIO_Init+0x248>)
 80028b0:	f043 0310 	orr.w	r3, r3, #16
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b88      	ldr	r3, [pc, #544]	; (8002ad8 <MX_GPIO_Init+0x248>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	61bb      	str	r3, [r7, #24]
 80028c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	4b84      	ldr	r3, [pc, #528]	; (8002ad8 <MX_GPIO_Init+0x248>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a83      	ldr	r2, [pc, #524]	; (8002ad8 <MX_GPIO_Init+0x248>)
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b81      	ldr	r3, [pc, #516]	; (8002ad8 <MX_GPIO_Init+0x248>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	4b7d      	ldr	r3, [pc, #500]	; (8002ad8 <MX_GPIO_Init+0x248>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a7c      	ldr	r2, [pc, #496]	; (8002ad8 <MX_GPIO_Init+0x248>)
 80028e8:	f043 0320 	orr.w	r3, r3, #32
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b7a      	ldr	r3, [pc, #488]	; (8002ad8 <MX_GPIO_Init+0x248>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b76      	ldr	r3, [pc, #472]	; (8002ad8 <MX_GPIO_Init+0x248>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a75      	ldr	r2, [pc, #468]	; (8002ad8 <MX_GPIO_Init+0x248>)
 8002904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b73      	ldr	r3, [pc, #460]	; (8002ad8 <MX_GPIO_Init+0x248>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	4b6f      	ldr	r3, [pc, #444]	; (8002ad8 <MX_GPIO_Init+0x248>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a6e      	ldr	r2, [pc, #440]	; (8002ad8 <MX_GPIO_Init+0x248>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b6c      	ldr	r3, [pc, #432]	; (8002ad8 <MX_GPIO_Init+0x248>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	4b68      	ldr	r3, [pc, #416]	; (8002ad8 <MX_GPIO_Init+0x248>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a67      	ldr	r2, [pc, #412]	; (8002ad8 <MX_GPIO_Init+0x248>)
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
 8002942:	4b65      	ldr	r3, [pc, #404]	; (8002ad8 <MX_GPIO_Init+0x248>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	607b      	str	r3, [r7, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	4b61      	ldr	r3, [pc, #388]	; (8002ad8 <MX_GPIO_Init+0x248>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a60      	ldr	r2, [pc, #384]	; (8002ad8 <MX_GPIO_Init+0x248>)
 8002958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b5e      	ldr	r3, [pc, #376]	; (8002ad8 <MX_GPIO_Init+0x248>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 800296a:	2200      	movs	r2, #0
 800296c:	f640 6184 	movw	r1, #3716	; 0xe84
 8002970:	485a      	ldr	r0, [pc, #360]	; (8002adc <MX_GPIO_Init+0x24c>)
 8002972:	f001 fd6f 	bl	8004454 <HAL_GPIO_WritePin>
                          |TH_CS_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 8002976:	2200      	movs	r2, #0
 8002978:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 800297c:	4858      	ldr	r0, [pc, #352]	; (8002ae0 <MX_GPIO_Init+0x250>)
 800297e:	f001 fd69 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|VR_CTRL_PWR_Pin, GPIO_PIN_RESET);
 8002982:	2200      	movs	r2, #0
 8002984:	f240 410e 	movw	r1, #1038	; 0x40e
 8002988:	4856      	ldr	r0, [pc, #344]	; (8002ae4 <MX_GPIO_Init+0x254>)
 800298a:	f001 fd63 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin, GPIO_PIN_RESET);
 800298e:	2200      	movs	r2, #0
 8002990:	f645 0102 	movw	r1, #22530	; 0x5802
 8002994:	4854      	ldr	r0, [pc, #336]	; (8002ae8 <MX_GPIO_Init+0x258>)
 8002996:	f001 fd5d 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, GPIO_PIN_RESET);
 800299a:	2200      	movs	r2, #0
 800299c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029a0:	4852      	ldr	r0, [pc, #328]	; (8002aec <MX_GPIO_Init+0x25c>)
 80029a2:	f001 fd57 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PM_12V_EN_Pin Vent_Valve_EN_Pin Payload_EN_Pin TH_CS_1_Pin
                           TH_CS_2_Pin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 80029a6:	f640 6384 	movw	r3, #3716	; 0xe84
 80029aa:	61fb      	str	r3, [r7, #28]
                          |TH_CS_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ac:	2301      	movs	r3, #1
 80029ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	4619      	mov	r1, r3
 80029be:	4847      	ldr	r0, [pc, #284]	; (8002adc <MX_GPIO_Init+0x24c>)
 80029c0:	f001 fb9c 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80029c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ca:	2301      	movs	r3, #1
 80029cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ce:	2301      	movs	r3, #1
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80029d6:	f107 031c 	add.w	r3, r7, #28
 80029da:	4619      	mov	r1, r3
 80029dc:	4840      	ldr	r0, [pc, #256]	; (8002ae0 <MX_GPIO_Init+0x250>)
 80029de:	f001 fb8d 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80029e2:	2301      	movs	r3, #1
 80029e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80029ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80029f0:	f107 031c 	add.w	r3, r7, #28
 80029f4:	4619      	mov	r1, r3
 80029f6:	483b      	ldr	r0, [pc, #236]	; (8002ae4 <MX_GPIO_Init+0x254>)
 80029f8:	f001 fb80 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin VR_CTRL_PWR_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|VR_CTRL_PWR_Pin;
 80029fc:	f240 430e 	movw	r3, #1038	; 0x40e
 8002a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a02:	2301      	movs	r3, #1
 8002a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0e:	f107 031c 	add.w	r3, r7, #28
 8002a12:	4619      	mov	r1, r3
 8002a14:	4833      	ldr	r0, [pc, #204]	; (8002ae4 <MX_GPIO_Init+0x254>)
 8002a16:	f001 fb71 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Vent_Valve_FB_Pin */
  GPIO_InitStruct.Pin = Vent_Valve_FB_Pin;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Vent_Valve_FB_GPIO_Port, &GPIO_InitStruct);
 8002a26:	f107 031c 	add.w	r3, r7, #28
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4830      	ldr	r0, [pc, #192]	; (8002af0 <MX_GPIO_Init+0x260>)
 8002a2e:	f001 fb65 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Prop_Cont_2_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 8002a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002a40:	f107 031c 	add.w	r3, r7, #28
 8002a44:	4619      	mov	r1, r3
 8002a46:	4826      	ldr	r0, [pc, #152]	; (8002ae0 <MX_GPIO_Init+0x250>)
 8002a48:	f001 fb58 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Gate_2_Pin Prop_Gate_1_Pin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 8002a4c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a52:	2301      	movs	r3, #1
 8002a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a5e:	f107 031c 	add.w	r3, r7, #28
 8002a62:	4619      	mov	r1, r3
 8002a64:	481e      	ldr	r0, [pc, #120]	; (8002ae0 <MX_GPIO_Init+0x250>)
 8002a66:	f001 fb49 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Cont_1_Pin Rcov_Cont_Main_Pin Rcov_Cont_Drogue_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|Rcov_Cont_Main_Pin|Rcov_Cont_Drogue_Pin;
 8002a6a:	f242 4301 	movw	r3, #9217	; 0x2401
 8002a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a70:	2300      	movs	r3, #0
 8002a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a78:	f107 031c 	add.w	r3, r7, #28
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	481a      	ldr	r0, [pc, #104]	; (8002ae8 <MX_GPIO_Init+0x258>)
 8002a80:	f001 fb3c 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Pyro_Arming_Pin Rcov_Gate_Main_Pin Rcov_Gate_Drogue_Pin Rcov_Arm_Pin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin;
 8002a84:	f645 0302 	movw	r3, #22530	; 0x5802
 8002a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a96:	f107 031c 	add.w	r3, r7, #28
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4812      	ldr	r0, [pc, #72]	; (8002ae8 <MX_GPIO_Init+0x258>)
 8002a9e:	f001 fb2d 	bl	80040fc <HAL_GPIO_Init>

  /*Configure GPIO pin : VR_CTRL_REC_Pin */
  GPIO_InitStruct.Pin = VR_CTRL_REC_Pin;
 8002aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(VR_CTRL_REC_GPIO_Port, &GPIO_InitStruct);
 8002ab4:	f107 031c 	add.w	r3, r7, #28
 8002ab8:	4619      	mov	r1, r3
 8002aba:	480c      	ldr	r0, [pc, #48]	; (8002aec <MX_GPIO_Init+0x25c>)
 8002abc:	f001 fb1e 	bl	80040fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2105      	movs	r1, #5
 8002ac4:	2006      	movs	r0, #6
 8002ac6:	f001 faef 	bl	80040a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002aca:	2006      	movs	r0, #6
 8002acc:	f001 fb08 	bl	80040e0 <HAL_NVIC_EnableIRQ>

}
 8002ad0:	bf00      	nop
 8002ad2:	3730      	adds	r7, #48	; 0x30
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40021400 	.word	0x40021400
 8002ae4:	40020800 	.word	0x40020800
 8002ae8:	40021800 	.word	0x40021800
 8002aec:	40020000 	.word	0x40020000
 8002af0:	40020400 	.word	0x40020400

08002af4 <printSensorsFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_printSensorsFunc */
void printSensorsFunc(void *argument)
{
 8002af4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002af8:	b086      	sub	sp, #24
 8002afa:	af04      	add	r7, sp, #16
 8002afc:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002afe:	f00f fd25 	bl	801254c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  for(;;)
  {
	//myprintf("ACCEL: %f, %f, %f\r\n", acceleration[0], acceleration[1], acceleration[2]);
	//myprintf("GPS: %lf, %lf, %f\r\n", latitude, longitude, time);
	xSemaphoreTake(mutexHandle,500);
 8002b02:	4b3d      	ldr	r3, [pc, #244]	; (8002bf8 <printSensorsFunc+0x104>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f00d fa8e 	bl	801002c <xQueueSemaphoreTake>
	//GPS_Poll(&latitude, &longitude, &time);
	myprintf("GPS: %lf, %lf, %f\r\n", latitude, longitude, time);
 8002b10:	4b3a      	ldr	r3, [pc, #232]	; (8002bfc <printSensorsFunc+0x108>)
 8002b12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002b16:	4b3a      	ldr	r3, [pc, #232]	; (8002c00 <printSensorsFunc+0x10c>)
 8002b18:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002b1c:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <printSensorsFunc+0x110>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fd21 	bl	8000568 <__aeabi_f2d>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b2e:	e9cd 4500 	strd	r4, r5, [sp]
 8002b32:	4642      	mov	r2, r8
 8002b34:	464b      	mov	r3, r9
 8002b36:	4834      	ldr	r0, [pc, #208]	; (8002c08 <printSensorsFunc+0x114>)
 8002b38:	f000 f90e 	bl	8002d58 <myprintf>
	myprintf("Pressure: %f, Temperature %f\r\n", pressure, temperature);
 8002b3c:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <printSensorsFunc+0x118>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fd fd11 	bl	8000568 <__aeabi_f2d>
 8002b46:	4604      	mov	r4, r0
 8002b48:	460d      	mov	r5, r1
 8002b4a:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <printSensorsFunc+0x11c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fd0a 	bl	8000568 <__aeabi_f2d>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	e9cd 2300 	strd	r2, r3, [sp]
 8002b5c:	4622      	mov	r2, r4
 8002b5e:	462b      	mov	r3, r5
 8002b60:	482c      	ldr	r0, [pc, #176]	; (8002c14 <printSensorsFunc+0x120>)
 8002b62:	f000 f8f9 	bl	8002d58 <myprintf>
	myprintf("Acceleration: %f,%f,%f\r\n", acceleration[0], acceleration[1], acceleration[2]);
 8002b66:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <printSensorsFunc+0x124>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fcfc 	bl	8000568 <__aeabi_f2d>
 8002b70:	4680      	mov	r8, r0
 8002b72:	4689      	mov	r9, r1
 8002b74:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <printSensorsFunc+0x124>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fcf5 	bl	8000568 <__aeabi_f2d>
 8002b7e:	4604      	mov	r4, r0
 8002b80:	460d      	mov	r5, r1
 8002b82:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <printSensorsFunc+0x124>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd fcee 	bl	8000568 <__aeabi_f2d>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b94:	e9cd 4500 	strd	r4, r5, [sp]
 8002b98:	4642      	mov	r2, r8
 8002b9a:	464b      	mov	r3, r9
 8002b9c:	481f      	ldr	r0, [pc, #124]	; (8002c1c <printSensorsFunc+0x128>)
 8002b9e:	f000 f8db 	bl	8002d58 <myprintf>
	myprintf("IN angular_rate: %f,%f,%f\r\n", angular_rate[0], angular_rate[1], angular_rate[2]);
 8002ba2:	4b1f      	ldr	r3, [pc, #124]	; (8002c20 <printSensorsFunc+0x12c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd fcde 	bl	8000568 <__aeabi_f2d>
 8002bac:	4680      	mov	r8, r0
 8002bae:	4689      	mov	r9, r1
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <printSensorsFunc+0x12c>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fcd7 	bl	8000568 <__aeabi_f2d>
 8002bba:	4604      	mov	r4, r0
 8002bbc:	460d      	mov	r5, r1
 8002bbe:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <printSensorsFunc+0x12c>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fcd0 	bl	8000568 <__aeabi_f2d>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bd0:	e9cd 4500 	strd	r4, r5, [sp]
 8002bd4:	4642      	mov	r2, r8
 8002bd6:	464b      	mov	r3, r9
 8002bd8:	4812      	ldr	r0, [pc, #72]	; (8002c24 <printSensorsFunc+0x130>)
 8002bda:	f000 f8bd 	bl	8002d58 <myprintf>
	xSemaphoreGive(mutexHandle);
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <printSensorsFunc+0x104>)
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	2300      	movs	r3, #0
 8002be4:	2200      	movs	r2, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	f00c ffa6 	bl	800fb38 <xQueueGenericSend>
    osDelay(1000);
 8002bec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bf0:	f00c fc6e 	bl	800f4d0 <osDelay>
	xSemaphoreTake(mutexHandle,500);
 8002bf4:	e785      	b.n	8002b02 <printSensorsFunc+0xe>
 8002bf6:	bf00      	nop
 8002bf8:	2000a628 	.word	0x2000a628
 8002bfc:	2000a6c8 	.word	0x2000a6c8
 8002c00:	2000a630 	.word	0x2000a630
 8002c04:	2000a638 	.word	0x2000a638
 8002c08:	08018304 	.word	0x08018304
 8002c0c:	200003c4 	.word	0x200003c4
 8002c10:	200003c8 	.word	0x200003c8
 8002c14:	08018318 	.word	0x08018318
 8002c18:	200003ac 	.word	0x200003ac
 8002c1c:	08018338 	.word	0x08018338
 8002c20:	200003b8 	.word	0x200003b8
 8002c24:	08018354 	.word	0x08018354

08002c28 <pollSensorsFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pollSensorsFunc */
void pollSensorsFunc(void *argument)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pollSensorsFunc */
  /* Infinite loop */
  for(;;)
  {
	get_pressure(dev_ctx_lps, &pressure);
 8002c30:	4a0e      	ldr	r2, [pc, #56]	; (8002c6c <pollSensorsFunc+0x44>)
 8002c32:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <pollSensorsFunc+0x48>)
 8002c34:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c36:	f7fe fde1 	bl	80017fc <get_pressure>
	get_temperature(dev_ctx_lps,  &temperature);
 8002c3a:	4a0c      	ldr	r2, [pc, #48]	; (8002c6c <pollSensorsFunc+0x44>)
 8002c3c:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <pollSensorsFunc+0x4c>)
 8002c3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c40:	f7fe fe08 	bl	8001854 <get_temperature>
	get_acceleration(dev_ctx_lsm, acceleration);
 8002c44:	4a0c      	ldr	r2, [pc, #48]	; (8002c78 <pollSensorsFunc+0x50>)
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <pollSensorsFunc+0x54>)
 8002c48:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c4a:	f7fe fcf5 	bl	8001638 <get_acceleration>
	get_angvelocity(dev_ctx_lsm, angular_rate);
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <pollSensorsFunc+0x50>)
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <pollSensorsFunc+0x58>)
 8002c52:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c54:	f7fe fd36 	bl	80016c4 <get_angvelocity>
	//xSemaphoreTake(mutexHandle,500);
	GPS_Poll(&latitude, &longitude, &time);
 8002c58:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <pollSensorsFunc+0x5c>)
 8002c5a:	490b      	ldr	r1, [pc, #44]	; (8002c88 <pollSensorsFunc+0x60>)
 8002c5c:	480b      	ldr	r0, [pc, #44]	; (8002c8c <pollSensorsFunc+0x64>)
 8002c5e:	f7fe f9d5 	bl	800100c <GPS_Poll>
	//xSemaphoreGive(mutexHandle);
    osDelay(1000);
 8002c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c66:	f00c fc33 	bl	800f4d0 <osDelay>
	get_pressure(dev_ctx_lps, &pressure);
 8002c6a:	e7e1      	b.n	8002c30 <pollSensorsFunc+0x8>
 8002c6c:	2000a724 	.word	0x2000a724
 8002c70:	200003c4 	.word	0x200003c4
 8002c74:	200003c8 	.word	0x200003c8
 8002c78:	2000a718 	.word	0x2000a718
 8002c7c:	200003ac 	.word	0x200003ac
 8002c80:	200003b8 	.word	0x200003b8
 8002c84:	2000a638 	.word	0x2000a638
 8002c88:	2000a630 	.word	0x2000a630
 8002c8c:	2000a6c8 	.word	0x2000a6c8

08002c90 <saveDataFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_saveDataFunc */
void saveDataFunc(void *argument)
{
 8002c90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af04      	add	r7, sp, #16
 8002c98:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {
	//write data
	sd_open_file(&filename);
 8002c9a:	4813      	ldr	r0, [pc, #76]	; (8002ce8 <saveDataFunc+0x58>)
 8002c9c:	f000 f8fe 	bl	8002e9c <sd_open_file>
	sprintf((char*)writeBuf, "GPS: %lf, %lf, %f\r\n", latitude, longitude, time);
 8002ca0:	4b12      	ldr	r3, [pc, #72]	; (8002cec <saveDataFunc+0x5c>)
 8002ca2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002ca6:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <saveDataFunc+0x60>)
 8002ca8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002cac:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <saveDataFunc+0x64>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fc59 	bl	8000568 <__aeabi_f2d>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002cbe:	e9cd 4500 	strd	r4, r5, [sp]
 8002cc2:	4642      	mov	r2, r8
 8002cc4:	464b      	mov	r3, r9
 8002cc6:	490c      	ldr	r1, [pc, #48]	; (8002cf8 <saveDataFunc+0x68>)
 8002cc8:	480c      	ldr	r0, [pc, #48]	; (8002cfc <saveDataFunc+0x6c>)
 8002cca:	f011 f9cf 	bl	801406c <siprintf>
	sd_write(&fil, writeBuf);
 8002cce:	490b      	ldr	r1, [pc, #44]	; (8002cfc <saveDataFunc+0x6c>)
 8002cd0:	480b      	ldr	r0, [pc, #44]	; (8002d00 <saveDataFunc+0x70>)
 8002cd2:	f000 f8fb 	bl	8002ecc <sd_write>
	f_close(&fil);
 8002cd6:	480a      	ldr	r0, [pc, #40]	; (8002d00 <saveDataFunc+0x70>)
 8002cd8:	f00b ff75 	bl	800ebc6 <f_close>
    osDelay(1000);
 8002cdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ce0:	f00c fbf6 	bl	800f4d0 <osDelay>
	sd_open_file(&filename);
 8002ce4:	e7d9      	b.n	8002c9a <saveDataFunc+0xa>
 8002ce6:	bf00      	nop
 8002ce8:	2000a1e4 	.word	0x2000a1e4
 8002cec:	2000a6c8 	.word	0x2000a6c8
 8002cf0:	2000a630 	.word	0x2000a630
 8002cf4:	2000a638 	.word	0x2000a638
 8002cf8:	08018304 	.word	0x08018304
 8002cfc:	2000a1f4 	.word	0x2000a1f4
 8002d00:	2000a734 	.word	0x2000a734

08002d04 <ejectionFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ejectionFunc */
void ejectionFunc(void *argument)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ejectionFunc */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8002d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d10:	f00c fbde 	bl	800f4d0 <osDelay>
 8002d14:	e7fa      	b.n	8002d0c <ejectionFunc+0x8>

08002d16 <transmitDataFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmitDataFunc */
void transmitDataFunc(void *argument)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmitDataFunc */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8002d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d22:	f00c fbd5 	bl	800f4d0 <osDelay>
 8002d26:	e7fa      	b.n	8002d1e <transmitDataFunc+0x8>

08002d28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d101      	bne.n	8002d3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d3a:	f000 fe47 	bl	80039cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40001000 	.word	0x40001000

08002d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d50:	b672      	cpsid	i
}
 8002d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d54:	e7fe      	b.n	8002d54 <Error_Handler+0x8>
	...

08002d58 <myprintf>:
extern FIL fil;
uint8_t msg_buffer[1000];


// private functions
void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8002d58:	b40f      	push	{r0, r1, r2, r3}
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d6e:	480a      	ldr	r0, [pc, #40]	; (8002d98 <myprintf+0x40>)
 8002d70:	f012 f912 	bl	8014f98 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&huart8, (uint8_t*)buffer, strlen(buffer), -1);
 8002d74:	4808      	ldr	r0, [pc, #32]	; (8002d98 <myprintf+0x40>)
 8002d76:	f7fd fa3b 	bl	80001f0 <strlen>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d82:	4905      	ldr	r1, [pc, #20]	; (8002d98 <myprintf+0x40>)
 8002d84:	4805      	ldr	r0, [pc, #20]	; (8002d9c <myprintf+0x44>)
 8002d86:	f005 fc96 	bl	80086b6 <HAL_UART_Transmit>

}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d94:	b004      	add	sp, #16
 8002d96:	4770      	bx	lr
 8002d98:	200003cc 	.word	0x200003cc
 8002d9c:	2000a63c 	.word	0x2000a63c

08002da0 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	; 0x28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8002dac:	2201      	movs	r2, #1
 8002dae:	4932      	ldr	r1, [pc, #200]	; (8002e78 <sd_init_dynamic_filename+0xd8>)
 8002db0:	4832      	ldr	r0, [pc, #200]	; (8002e7c <sd_init_dynamic_filename+0xdc>)
 8002db2:	f00b fb11 	bl	800e3d8 <f_mount>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8002dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8002dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dc8:	4619      	mov	r1, r3
 8002dca:	482d      	ldr	r0, [pc, #180]	; (8002e80 <sd_init_dynamic_filename+0xe0>)
 8002dcc:	f7ff ffc4 	bl	8002d58 <myprintf>
		return fres;
 8002dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dd4:	e04b      	b.n	8002e6e <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8002dda:	f107 0320 	add.w	r3, r7, #32
 8002dde:	461a      	mov	r2, r3
 8002de0:	68f9      	ldr	r1, [r7, #12]
 8002de2:	4825      	ldr	r0, [pc, #148]	; (8002e78 <sd_init_dynamic_filename+0xd8>)
 8002de4:	f000 f89c 	bl	8002f20 <scan_files>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	f107 0310 	add.w	r3, r7, #16
 8002df6:	4923      	ldr	r1, [pc, #140]	; (8002e84 <sd_init_dynamic_filename+0xe4>)
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f011 f937 	bl	801406c <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8002dfe:	f107 0310 	add.w	r3, r7, #16
 8002e02:	4619      	mov	r1, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f011 f9c2 	bl	801418e <strcpy>
 8002e0a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002e0c:	f107 0310 	add.w	r3, r7, #16
 8002e10:	221a      	movs	r2, #26
 8002e12:	4619      	mov	r1, r3
 8002e14:	481c      	ldr	r0, [pc, #112]	; (8002e88 <sd_init_dynamic_filename+0xe8>)
 8002e16:	f00b fb25 	bl	800e464 <f_open>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8002e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d11a      	bne.n	8002e5e <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8002e28:	4818      	ldr	r0, [pc, #96]	; (8002e8c <sd_init_dynamic_filename+0xec>)
 8002e2a:	f7ff ff95 	bl	8002d58 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8002e2e:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <sd_init_dynamic_filename+0xe8>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	4619      	mov	r1, r3
 8002e34:	4814      	ldr	r0, [pc, #80]	; (8002e88 <sd_init_dynamic_filename+0xe8>)
 8002e36:	f00b fef0 	bl	800ec1a <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8002e3a:	4915      	ldr	r1, [pc, #84]	; (8002e90 <sd_init_dynamic_filename+0xf0>)
 8002e3c:	4815      	ldr	r0, [pc, #84]	; (8002e94 <sd_init_dynamic_filename+0xf4>)
 8002e3e:	f011 f915 	bl	801406c <siprintf>
	sd_write(&fil, msg_buffer);
 8002e42:	4914      	ldr	r1, [pc, #80]	; (8002e94 <sd_init_dynamic_filename+0xf4>)
 8002e44:	4810      	ldr	r0, [pc, #64]	; (8002e88 <sd_init_dynamic_filename+0xe8>)
 8002e46:	f000 f841 	bl	8002ecc <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	480e      	ldr	r0, [pc, #56]	; (8002e88 <sd_init_dynamic_filename+0xe8>)
 8002e4e:	f000 f83d 	bl	8002ecc <sd_write>
	f_close(&fil);
 8002e52:	480d      	ldr	r0, [pc, #52]	; (8002e88 <sd_init_dynamic_filename+0xe8>)
 8002e54:	f00b feb7 	bl	800ebc6 <f_close>

	return fres;
 8002e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e5c:	e007      	b.n	8002e6e <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8002e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e62:	4619      	mov	r1, r3
 8002e64:	480c      	ldr	r0, [pc, #48]	; (8002e98 <sd_init_dynamic_filename+0xf8>)
 8002e66:	f7ff ff77 	bl	8002d58 <myprintf>
		return fres;
 8002e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3728      	adds	r7, #40	; 0x28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	08018370 	.word	0x08018370
 8002e7c:	20009fac 	.word	0x20009fac
 8002e80:	08018374 	.word	0x08018374
 8002e84:	080183f0 	.word	0x080183f0
 8002e88:	2000a734 	.word	0x2000a734
 8002e8c:	0801838c 	.word	0x0801838c
 8002e90:	080183d0 	.word	0x080183d0
 8002e94:	2000a964 	.word	0x2000a964
 8002e98:	080183bc 	.word	0x080183bc

08002e9c <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8002ea4:	2212      	movs	r2, #18
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4807      	ldr	r0, [pc, #28]	; (8002ec8 <sd_open_file+0x2c>)
 8002eaa:	f00b fadb 	bl	800e464 <f_open>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <sd_open_file+0x2c>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4803      	ldr	r0, [pc, #12]	; (8002ec8 <sd_open_file+0x2c>)
 8002eba:	f00b feae 	bl	800ec1a <f_lseek>

	return fres;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	2000a734 	.word	0x2000a734

08002ecc <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8002ed6:	6838      	ldr	r0, [r7, #0]
 8002ed8:	f7fd f98a 	bl	80001f0 <strlen>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f107 0308 	add.w	r3, r7, #8
 8002ee2:	6839      	ldr	r1, [r7, #0]
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f00b fc7b 	bl	800e7e0 <f_write>
 8002eea:	4603      	mov	r3, r0
 8002eec:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d107      	bne.n	8002f04 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4807      	ldr	r0, [pc, #28]	; (8002f18 <sd_write+0x4c>)
 8002efa:	f7ff ff2d 	bl	8002d58 <myprintf>
		return bytesWrote;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	b25b      	sxtb	r3, r3
 8002f02:	e004      	b.n	8002f0e <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8002f04:	4805      	ldr	r0, [pc, #20]	; (8002f1c <sd_write+0x50>)
 8002f06:	f7ff ff27 	bl	8002d58 <myprintf>
		return -1;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	080183fc 	.word	0x080183fc
 8002f1c:	08018420 	.word	0x08018420

08002f20 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	b099      	sub	sp, #100	; 0x64
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	466b      	mov	r3, sp
 8002f2e:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8002f30:	68b8      	ldr	r0, [r7, #8]
 8002f32:	f7fd f95d 	bl	80001f0 <strlen>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8002f3c:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8002f40:	4623      	mov	r3, r4
 8002f42:	3b01      	subs	r3, #1
 8002f44:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f46:	b2e0      	uxtb	r0, r4
 8002f48:	f04f 0100 	mov.w	r1, #0
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	00cb      	lsls	r3, r1, #3
 8002f56:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002f5a:	00c2      	lsls	r2, r0, #3
 8002f5c:	b2e0      	uxtb	r0, r4
 8002f5e:	f04f 0100 	mov.w	r1, #0
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	00cb      	lsls	r3, r1, #3
 8002f6c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002f70:	00c2      	lsls	r2, r0, #3
 8002f72:	4623      	mov	r3, r4
 8002f74:	3307      	adds	r3, #7
 8002f76:	08db      	lsrs	r3, r3, #3
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	ebad 0d03 	sub.w	sp, sp, r3
 8002f7e:	466b      	mov	r3, sp
 8002f80:	3300      	adds	r3, #0
 8002f82:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8002f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f86:	4619      	mov	r1, r3
 8002f88:	68b8      	ldr	r0, [r7, #8]
 8002f8a:	f000 f8ff 	bl	800318c <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8002f98:	f107 0318 	add.w	r3, r7, #24
 8002f9c:	68f9      	ldr	r1, [r7, #12]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f00c f844 	bl	800f02c <f_opendir>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8002faa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d16c      	bne.n	800308c <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002fb2:	f107 0318 	add.w	r3, r7, #24
 8002fb6:	4939      	ldr	r1, [pc, #228]	; (800309c <scan_files+0x17c>)
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f00c f8d0 	bl	800f15e <f_readdir>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8002fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d15a      	bne.n	8003082 <scan_files+0x162>
 8002fcc:	4b33      	ldr	r3, [pc, #204]	; (800309c <scan_files+0x17c>)
 8002fce:	7a5b      	ldrb	r3, [r3, #9]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d056      	beq.n	8003082 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8002fd4:	4b31      	ldr	r3, [pc, #196]	; (800309c <scan_files+0x17c>)
 8002fd6:	7a1b      	ldrb	r3, [r3, #8]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d14e      	bne.n	800307e <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8002fe0:	466b      	mov	r3, sp
 8002fe2:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8002fe4:	482e      	ldr	r0, [pc, #184]	; (80030a0 <scan_files+0x180>)
 8002fe6:	f7fd f903 	bl	80001f0 <strlen>
 8002fea:	4604      	mov	r4, r0
 8002fec:	4623      	mov	r3, r4
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	653b      	str	r3, [r7, #80]	; 0x50
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f04f 0100 	mov.w	r1, #0
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	00cb      	lsls	r3, r1, #3
 8003002:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003006:	00c2      	lsls	r2, r0, #3
 8003008:	4620      	mov	r0, r4
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	00cb      	lsls	r3, r1, #3
 8003018:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800301c:	00c2      	lsls	r2, r0, #3
 800301e:	1de3      	adds	r3, r4, #7
 8003020:	08db      	lsrs	r3, r3, #3
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	ebad 0d03 	sub.w	sp, sp, r3
 8003028:	466b      	mov	r3, sp
 800302a:	3300      	adds	r3, #0
 800302c:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 800302e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003030:	4619      	mov	r1, r3
 8003032:	481b      	ldr	r0, [pc, #108]	; (80030a0 <scan_files+0x180>)
 8003034:	f000 f8aa 	bl	800318c <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8003038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800303a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800303e:	4619      	mov	r1, r3
 8003040:	4817      	ldr	r0, [pc, #92]	; (80030a0 <scan_files+0x180>)
 8003042:	f011 f8ac 	bl	801419e <strncmp>
 8003046:	4603      	mov	r3, r0
 8003048:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 800304c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8003050:	2b00      	cmp	r3, #0
 8003052:	d112      	bne.n	800307a <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8003054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003056:	f107 0214 	add.w	r2, r7, #20
 800305a:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f820 	bl	80030a4 <extract_filename_suffix>
 8003064:	4603      	mov	r3, r0
 8003066:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	429a      	cmp	r2, r3
 8003072:	d202      	bcs.n	800307a <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	46b5      	mov	sp, r6
 800307c:	e799      	b.n	8002fb2 <scan_files+0x92>
            	continue; // don't enter directory
 800307e:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003080:	e797      	b.n	8002fb2 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8003082:	f107 0318 	add.w	r3, r7, #24
 8003086:	4618      	mov	r0, r3
 8003088:	f00c f843 	bl	800f112 <f_closedir>
    }

    return res;
 800308c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003090:	46ad      	mov	sp, r5
}
 8003092:	4618      	mov	r0, r3
 8003094:	3764      	adds	r7, #100	; 0x64
 8003096:	46bd      	mov	sp, r7
 8003098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800309a:	bf00      	nop
 800309c:	200004cc 	.word	0x200004cc
 80030a0:	200004d5 	.word	0x200004d5

080030a4 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 80030a4:	b5b0      	push	{r4, r5, r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	460b      	mov	r3, r1
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	72fb      	strb	r3, [r7, #11]
 80030b2:	466b      	mov	r3, sp
 80030b4:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7fd f89a 	bl	80001f0 <strlen>
 80030bc:	4603      	mov	r3, r0
 80030be:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 80030c0:	2308      	movs	r3, #8
 80030c2:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 80030c4:	7f7c      	ldrb	r4, [r7, #29]
 80030c6:	4623      	mov	r3, r4
 80030c8:	3b01      	subs	r3, #1
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	b2e0      	uxtb	r0, r4
 80030ce:	f04f 0100 	mov.w	r1, #0
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	00cb      	lsls	r3, r1, #3
 80030dc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80030e0:	00c2      	lsls	r2, r0, #3
 80030e2:	b2e0      	uxtb	r0, r4
 80030e4:	f04f 0100 	mov.w	r1, #0
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	00cb      	lsls	r3, r1, #3
 80030f2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80030f6:	00c2      	lsls	r2, r0, #3
 80030f8:	4623      	mov	r3, r4
 80030fa:	3307      	adds	r3, #7
 80030fc:	08db      	lsrs	r3, r3, #3
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	ebad 0d03 	sub.w	sp, sp, r3
 8003104:	466b      	mov	r3, sp
 8003106:	3300      	adds	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 800310a:	2300      	movs	r3, #0
 800310c:	77fb      	strb	r3, [r7, #31]
 800310e:	e014      	b.n	800313a <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8003110:	7afb      	ldrb	r3, [r7, #11]
 8003112:	1e5a      	subs	r2, r3, #1
 8003114:	7ffb      	ldrb	r3, [r7, #31]
 8003116:	441a      	add	r2, r3
 8003118:	7fbb      	ldrb	r3, [r7, #30]
 800311a:	3b01      	subs	r3, #1
 800311c:	429a      	cmp	r2, r3
 800311e:	da11      	bge.n	8003144 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8003120:	7afa      	ldrb	r2, [r7, #11]
 8003122:	7ffb      	ldrb	r3, [r7, #31]
 8003124:	4413      	add	r3, r2
 8003126:	461a      	mov	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	441a      	add	r2, r3
 800312c:	7ffb      	ldrb	r3, [r7, #31]
 800312e:	7811      	ldrb	r1, [r2, #0]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8003134:	7ffb      	ldrb	r3, [r7, #31]
 8003136:	3301      	adds	r3, #1
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	7ffa      	ldrb	r2, [r7, #31]
 800313c:	7f7b      	ldrb	r3, [r7, #29]
 800313e:	429a      	cmp	r2, r3
 8003140:	d3e6      	bcc.n	8003110 <extract_filename_suffix+0x6c>
 8003142:	e000      	b.n	8003146 <extract_filename_suffix+0xa2>
		}
		else break;
 8003144:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f107 0110 	add.w	r1, r7, #16
 800314c:	220a      	movs	r2, #10
 800314e:	4618      	mov	r0, r3
 8003150:	f011 feec 	bl	8014f2c <strtol>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	429a      	cmp	r2, r3
 8003162:	d00a      	beq.n	800317a <extract_filename_suffix+0xd6>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800316c:	d005      	beq.n	800317a <extract_filename_suffix+0xd6>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003176:	4293      	cmp	r3, r2
 8003178:	d101      	bne.n	800317e <extract_filename_suffix+0xda>
	{
		return 1;
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <extract_filename_suffix+0xdc>
	}

	return 0;
 800317e:	2300      	movs	r3, #0
 8003180:	46ad      	mov	sp, r5
}
 8003182:	4618      	mov	r0, r3
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800318c <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	e019      	b.n	80031d0 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	73bb      	strb	r3, [r7, #14]
 80031a6:	7bbb      	ldrb	r3, [r7, #14]
 80031a8:	3301      	adds	r3, #1
 80031aa:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <str2upper+0x5c>)
 80031ac:	4413      	add	r3, r2
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d102      	bne.n	80031be <str2upper+0x32>
 80031b8:	7bbb      	ldrb	r3, [r7, #14]
 80031ba:	3b20      	subs	r3, #32
 80031bc:	e000      	b.n	80031c0 <str2upper+0x34>
 80031be:	7bbb      	ldrb	r3, [r7, #14]
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	6839      	ldr	r1, [r7, #0]
 80031c4:	440a      	add	r2, r1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	3301      	adds	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
 80031d0:	7bfc      	ldrb	r4, [r7, #15]
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fd f80c 	bl	80001f0 <strlen>
 80031d8:	4603      	mov	r3, r0
 80031da:	429c      	cmp	r4, r3
 80031dc:	d3de      	bcc.n	800319c <str2upper+0x10>
	}
}
 80031de:	bf00      	nop
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd90      	pop	{r4, r7, pc}
 80031e8:	08018644 	.word	0x08018644

080031ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_MspInit+0x54>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	4a11      	ldr	r2, [pc, #68]	; (8003240 <HAL_MspInit+0x54>)
 80031fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003200:	6453      	str	r3, [r2, #68]	; 0x44
 8003202:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_MspInit+0x54>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_MspInit+0x54>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <HAL_MspInit+0x54>)
 8003218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_MspInit+0x54>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	210f      	movs	r1, #15
 800322e:	f06f 0001 	mvn.w	r0, #1
 8003232:	f000 ff39 	bl	80040a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800

08003244 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	; 0x28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	f107 0314 	add.w	r3, r7, #20
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <HAL_ADC_MspInit+0x7c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d127      	bne.n	80032b6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <HAL_ADC_MspInit+0x80>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <HAL_ADC_MspInit+0x80>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003274:	6453      	str	r3, [r2, #68]	; 0x44
 8003276:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <HAL_ADC_MspInit+0x80>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_ADC_MspInit+0x80>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <HAL_ADC_MspInit+0x80>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_ADC_MspInit+0x80>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800329e:	2340      	movs	r3, #64	; 0x40
 80032a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032a2:	2303      	movs	r3, #3
 80032a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032aa:	f107 0314 	add.w	r3, r7, #20
 80032ae:	4619      	mov	r1, r3
 80032b0:	4805      	ldr	r0, [pc, #20]	; (80032c8 <HAL_ADC_MspInit+0x84>)
 80032b2:	f000 ff23 	bl	80040fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032b6:	bf00      	nop
 80032b8:	3728      	adds	r7, #40	; 0x28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40012000 	.word	0x40012000
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020000 	.word	0x40020000

080032cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	; 0x28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a29      	ldr	r2, [pc, #164]	; (8003390 <HAL_I2C_MspInit+0xc4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d14b      	bne.n	8003386 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	4b28      	ldr	r3, [pc, #160]	; (8003394 <HAL_I2C_MspInit+0xc8>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4a27      	ldr	r2, [pc, #156]	; (8003394 <HAL_I2C_MspInit+0xc8>)
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_I2C_MspInit+0xc8>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	4b21      	ldr	r3, [pc, #132]	; (8003394 <HAL_I2C_MspInit+0xc8>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	4a20      	ldr	r2, [pc, #128]	; (8003394 <HAL_I2C_MspInit+0xc8>)
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	6313      	str	r3, [r2, #48]	; 0x30
 800331a:	4b1e      	ldr	r3, [pc, #120]	; (8003394 <HAL_I2C_MspInit+0xc8>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800332a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800332c:	2312      	movs	r3, #18
 800332e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003334:	2303      	movs	r3, #3
 8003336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003338:	2304      	movs	r3, #4
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	4619      	mov	r1, r3
 8003342:	4815      	ldr	r0, [pc, #84]	; (8003398 <HAL_I2C_MspInit+0xcc>)
 8003344:	f000 feda 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800334c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800334e:	2312      	movs	r3, #18
 8003350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003356:	2303      	movs	r3, #3
 8003358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800335a:	2304      	movs	r3, #4
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335e:	f107 0314 	add.w	r3, r7, #20
 8003362:	4619      	mov	r1, r3
 8003364:	480d      	ldr	r0, [pc, #52]	; (800339c <HAL_I2C_MspInit+0xd0>)
 8003366:	f000 fec9 	bl	80040fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_I2C_MspInit+0xc8>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	4a08      	ldr	r2, [pc, #32]	; (8003394 <HAL_I2C_MspInit+0xc8>)
 8003374:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003378:	6413      	str	r3, [r2, #64]	; 0x40
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_I2C_MspInit+0xc8>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003386:	bf00      	nop
 8003388:	3728      	adds	r7, #40	; 0x28
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40005c00 	.word	0x40005c00
 8003394:	40023800 	.word	0x40023800
 8003398:	40020800 	.word	0x40020800
 800339c:	40020000 	.word	0x40020000

080033a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08c      	sub	sp, #48	; 0x30
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	f107 031c 	add.w	r3, r7, #28
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a33      	ldr	r2, [pc, #204]	; (800348c <HAL_SPI_MspInit+0xec>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d12d      	bne.n	800341e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	4b32      	ldr	r3, [pc, #200]	; (8003490 <HAL_SPI_MspInit+0xf0>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	4a31      	ldr	r2, [pc, #196]	; (8003490 <HAL_SPI_MspInit+0xf0>)
 80033cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033d0:	6453      	str	r3, [r2, #68]	; 0x44
 80033d2:	4b2f      	ldr	r3, [pc, #188]	; (8003490 <HAL_SPI_MspInit+0xf0>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033da:	61bb      	str	r3, [r7, #24]
 80033dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <HAL_SPI_MspInit+0xf0>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <HAL_SPI_MspInit+0xf0>)
 80033e8:	f043 0310 	orr.w	r3, r3, #16
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b28      	ldr	r3, [pc, #160]	; (8003490 <HAL_SPI_MspInit+0xf0>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80033fa:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80033fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003400:	2302      	movs	r3, #2
 8003402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003408:	2303      	movs	r3, #3
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800340c:	2305      	movs	r3, #5
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003410:	f107 031c 	add.w	r3, r7, #28
 8003414:	4619      	mov	r1, r3
 8003416:	481f      	ldr	r0, [pc, #124]	; (8003494 <HAL_SPI_MspInit+0xf4>)
 8003418:	f000 fe70 	bl	80040fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800341c:	e031      	b.n	8003482 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI5)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <HAL_SPI_MspInit+0xf8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d12c      	bne.n	8003482 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	4b18      	ldr	r3, [pc, #96]	; (8003490 <HAL_SPI_MspInit+0xf0>)
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	4a17      	ldr	r2, [pc, #92]	; (8003490 <HAL_SPI_MspInit+0xf0>)
 8003432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003436:	6453      	str	r3, [r2, #68]	; 0x44
 8003438:	4b15      	ldr	r3, [pc, #84]	; (8003490 <HAL_SPI_MspInit+0xf0>)
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	4b11      	ldr	r3, [pc, #68]	; (8003490 <HAL_SPI_MspInit+0xf0>)
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	4a10      	ldr	r2, [pc, #64]	; (8003490 <HAL_SPI_MspInit+0xf0>)
 800344e:	f043 0320 	orr.w	r3, r3, #32
 8003452:	6313      	str	r3, [r2, #48]	; 0x30
 8003454:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <HAL_SPI_MspInit+0xf0>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003460:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800346a:	2301      	movs	r3, #1
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346e:	2303      	movs	r3, #3
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003472:	2305      	movs	r3, #5
 8003474:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003476:	f107 031c 	add.w	r3, r7, #28
 800347a:	4619      	mov	r1, r3
 800347c:	4807      	ldr	r0, [pc, #28]	; (800349c <HAL_SPI_MspInit+0xfc>)
 800347e:	f000 fe3d 	bl	80040fc <HAL_GPIO_Init>
}
 8003482:	bf00      	nop
 8003484:	3730      	adds	r7, #48	; 0x30
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40013400 	.word	0x40013400
 8003490:	40023800 	.word	0x40023800
 8003494:	40021000 	.word	0x40021000
 8003498:	40015000 	.word	0x40015000
 800349c:	40021400 	.word	0x40021400

080034a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d115      	bne.n	80034de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <HAL_TIM_Base_MspInit+0x48>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	4a0b      	ldr	r2, [pc, #44]	; (80034e8 <HAL_TIM_Base_MspInit+0x48>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6413      	str	r3, [r2, #64]	; 0x40
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_TIM_Base_MspInit+0x48>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80034ce:	2200      	movs	r2, #0
 80034d0:	2105      	movs	r1, #5
 80034d2:	201c      	movs	r0, #28
 80034d4:	f000 fde8 	bl	80040a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034d8:	201c      	movs	r0, #28
 80034da:	f000 fe01 	bl	80040e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800

080034ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f4:	f107 030c 	add.w	r3, r7, #12
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	60da      	str	r2, [r3, #12]
 8003502:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350c:	d11d      	bne.n	800354a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <HAL_TIM_MspPostInit+0x68>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a0f      	ldr	r2, [pc, #60]	; (8003554 <HAL_TIM_MspPostInit+0x68>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
 800351e:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <HAL_TIM_MspPostInit+0x68>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800352a:	2304      	movs	r3, #4
 800352c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800353a:	2301      	movs	r3, #1
 800353c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353e:	f107 030c 	add.w	r3, r7, #12
 8003542:	4619      	mov	r1, r3
 8003544:	4804      	ldr	r0, [pc, #16]	; (8003558 <HAL_TIM_MspPostInit+0x6c>)
 8003546:	f000 fdd9 	bl	80040fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800354a:	bf00      	nop
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800
 8003558:	40020000 	.word	0x40020000

0800355c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08c      	sub	sp, #48	; 0x30
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a32      	ldr	r2, [pc, #200]	; (8003644 <HAL_UART_MspInit+0xe8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d12c      	bne.n	80035d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	4b31      	ldr	r3, [pc, #196]	; (8003648 <HAL_UART_MspInit+0xec>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a30      	ldr	r2, [pc, #192]	; (8003648 <HAL_UART_MspInit+0xec>)
 8003588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b2e      	ldr	r3, [pc, #184]	; (8003648 <HAL_UART_MspInit+0xec>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003596:	61bb      	str	r3, [r7, #24]
 8003598:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	4b2a      	ldr	r3, [pc, #168]	; (8003648 <HAL_UART_MspInit+0xec>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	4a29      	ldr	r2, [pc, #164]	; (8003648 <HAL_UART_MspInit+0xec>)
 80035a4:	f043 0310 	orr.w	r3, r3, #16
 80035a8:	6313      	str	r3, [r2, #48]	; 0x30
 80035aa:	4b27      	ldr	r3, [pc, #156]	; (8003648 <HAL_UART_MspInit+0xec>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035b6:	2303      	movs	r3, #3
 80035b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ba:	2302      	movs	r3, #2
 80035bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c2:	2303      	movs	r3, #3
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80035c6:	2308      	movs	r3, #8
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035ca:	f107 031c 	add.w	r3, r7, #28
 80035ce:	4619      	mov	r1, r3
 80035d0:	481e      	ldr	r0, [pc, #120]	; (800364c <HAL_UART_MspInit+0xf0>)
 80035d2:	f000 fd93 	bl	80040fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80035d6:	e030      	b.n	800363a <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <HAL_UART_MspInit+0xf4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d12b      	bne.n	800363a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	4b18      	ldr	r3, [pc, #96]	; (8003648 <HAL_UART_MspInit+0xec>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	4a17      	ldr	r2, [pc, #92]	; (8003648 <HAL_UART_MspInit+0xec>)
 80035ec:	f043 0320 	orr.w	r3, r3, #32
 80035f0:	6453      	str	r3, [r2, #68]	; 0x44
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <HAL_UART_MspInit+0xec>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_UART_MspInit+0xec>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a10      	ldr	r2, [pc, #64]	; (8003648 <HAL_UART_MspInit+0xec>)
 8003608:	f043 0304 	orr.w	r3, r3, #4
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <HAL_UART_MspInit+0xec>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800361a:	23c0      	movs	r3, #192	; 0xc0
 800361c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361e:	2302      	movs	r3, #2
 8003620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003626:	2303      	movs	r3, #3
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800362a:	2308      	movs	r3, #8
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800362e:	f107 031c 	add.w	r3, r7, #28
 8003632:	4619      	mov	r1, r3
 8003634:	4807      	ldr	r0, [pc, #28]	; (8003654 <HAL_UART_MspInit+0xf8>)
 8003636:	f000 fd61 	bl	80040fc <HAL_GPIO_Init>
}
 800363a:	bf00      	nop
 800363c:	3730      	adds	r7, #48	; 0x30
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40007c00 	.word	0x40007c00
 8003648:	40023800 	.word	0x40023800
 800364c:	40021000 	.word	0x40021000
 8003650:	40011400 	.word	0x40011400
 8003654:	40020800 	.word	0x40020800

08003658 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08c      	sub	sp, #48	; 0x30
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003668:	2200      	movs	r2, #0
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	2036      	movs	r0, #54	; 0x36
 800366e:	f000 fd1b 	bl	80040a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003672:	2036      	movs	r0, #54	; 0x36
 8003674:	f000 fd34 	bl	80040e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <HAL_InitTick+0xa4>)
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <HAL_InitTick+0xa4>)
 8003682:	f043 0310 	orr.w	r3, r3, #16
 8003686:	6413      	str	r3, [r2, #64]	; 0x40
 8003688:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <HAL_InitTick+0xa4>)
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003694:	f107 0210 	add.w	r2, r7, #16
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f003 fd46 	bl	8007130 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80036a4:	f003 fd1c 	bl	80070e0 <HAL_RCC_GetPCLK1Freq>
 80036a8:	4603      	mov	r3, r0
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	4a13      	ldr	r2, [pc, #76]	; (8003700 <HAL_InitTick+0xa8>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	0c9b      	lsrs	r3, r3, #18
 80036b8:	3b01      	subs	r3, #1
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_InitTick+0xac>)
 80036be:	4a12      	ldr	r2, [pc, #72]	; (8003708 <HAL_InitTick+0xb0>)
 80036c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_InitTick+0xac>)
 80036c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80036ca:	4a0e      	ldr	r2, [pc, #56]	; (8003704 <HAL_InitTick+0xac>)
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <HAL_InitTick+0xac>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d6:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_InitTick+0xac>)
 80036d8:	2200      	movs	r2, #0
 80036da:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80036dc:	4809      	ldr	r0, [pc, #36]	; (8003704 <HAL_InitTick+0xac>)
 80036de:	f004 f84f 	bl	8007780 <HAL_TIM_Base_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80036e8:	4806      	ldr	r0, [pc, #24]	; (8003704 <HAL_InitTick+0xac>)
 80036ea:	f004 f899 	bl	8007820 <HAL_TIM_Base_Start_IT>
 80036ee:	4603      	mov	r3, r0
 80036f0:	e000      	b.n	80036f4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3730      	adds	r7, #48	; 0x30
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	431bde83 	.word	0x431bde83
 8003704:	2000ad4c 	.word	0x2000ad4c
 8003708:	40001000 	.word	0x40001000

0800370c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003710:	e7fe      	b.n	8003710 <NMI_Handler+0x4>

08003712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003712:	b480      	push	{r7}
 8003714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003716:	e7fe      	b.n	8003716 <HardFault_Handler+0x4>

08003718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800371c:	e7fe      	b.n	800371c <MemManage_Handler+0x4>

0800371e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800371e:	b480      	push	{r7}
 8003720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003722:	e7fe      	b.n	8003722 <BusFault_Handler+0x4>

08003724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003728:	e7fe      	b.n	8003728 <UsageFault_Handler+0x4>

0800372a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800372a:	b480      	push	{r7}
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800372e:	bf00      	nop
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800373c:	2001      	movs	r0, #1
 800373e:	f000 fea3 	bl	8004488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800374c:	4802      	ldr	r0, [pc, #8]	; (8003758 <TIM2_IRQHandler+0x10>)
 800374e:	f004 f930 	bl	80079b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	2000a6d0 	.word	0x2000a6d0

0800375c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003760:	4802      	ldr	r0, [pc, #8]	; (800376c <TIM6_DAC_IRQHandler+0x10>)
 8003762:	f004 f926 	bl	80079b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	2000ad4c 	.word	0x2000ad4c

08003770 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003774:	4802      	ldr	r0, [pc, #8]	; (8003780 <OTG_FS_IRQHandler+0x10>)
 8003776:	f002 f835 	bl	80057e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	2000c718 	.word	0x2000c718

08003784 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
	return 1;
 8003788:	2301      	movs	r3, #1
}
 800378a:	4618      	mov	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <_kill>:

int _kill(int pid, int sig)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800379e:	f00f fbd7 	bl	8012f50 <__errno>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2216      	movs	r2, #22
 80037a6:	601a      	str	r2, [r3, #0]
	return -1;
 80037a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <_exit>:

void _exit (int status)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ffe7 	bl	8003794 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037c6:	e7fe      	b.n	80037c6 <_exit+0x12>

080037c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	e00a      	b.n	80037f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037da:	f3af 8000 	nop.w
 80037de:	4601      	mov	r1, r0
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	60ba      	str	r2, [r7, #8]
 80037e6:	b2ca      	uxtb	r2, r1
 80037e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	3301      	adds	r3, #1
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	dbf0      	blt.n	80037da <_read+0x12>
	}

return len;
 80037f8:	687b      	ldr	r3, [r7, #4]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b086      	sub	sp, #24
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	e009      	b.n	8003828 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	60ba      	str	r2, [r7, #8]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	3301      	adds	r3, #1
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	dbf1      	blt.n	8003814 <_write+0x12>
	}
	return len;
 8003830:	687b      	ldr	r3, [r7, #4]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <_close>:

int _close(int file)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
	return -1;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003862:	605a      	str	r2, [r3, #4]
	return 0;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <_isatty>:

int _isatty(int file)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
	return 1;
 800387a:	2301      	movs	r3, #1
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
	return 0;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038ac:	4a14      	ldr	r2, [pc, #80]	; (8003900 <_sbrk+0x5c>)
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <_sbrk+0x60>)
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038b8:	4b13      	ldr	r3, [pc, #76]	; (8003908 <_sbrk+0x64>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d102      	bne.n	80038c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038c0:	4b11      	ldr	r3, [pc, #68]	; (8003908 <_sbrk+0x64>)
 80038c2:	4a12      	ldr	r2, [pc, #72]	; (800390c <_sbrk+0x68>)
 80038c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038c6:	4b10      	ldr	r3, [pc, #64]	; (8003908 <_sbrk+0x64>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4413      	add	r3, r2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d207      	bcs.n	80038e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038d4:	f00f fb3c 	bl	8012f50 <__errno>
 80038d8:	4603      	mov	r3, r0
 80038da:	220c      	movs	r2, #12
 80038dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038e2:	e009      	b.n	80038f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038e4:	4b08      	ldr	r3, [pc, #32]	; (8003908 <_sbrk+0x64>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ea:	4b07      	ldr	r3, [pc, #28]	; (8003908 <_sbrk+0x64>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	4a05      	ldr	r2, [pc, #20]	; (8003908 <_sbrk+0x64>)
 80038f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038f6:	68fb      	ldr	r3, [r7, #12]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20030000 	.word	0x20030000
 8003904:	00000400 	.word	0x00000400
 8003908:	200004e4 	.word	0x200004e4
 800390c:	2000cb30 	.word	0x2000cb30

08003910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <SystemInit+0x20>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391a:	4a05      	ldr	r2, [pc, #20]	; (8003930 <SystemInit+0x20>)
 800391c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800396c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003938:	480d      	ldr	r0, [pc, #52]	; (8003970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800393a:	490e      	ldr	r1, [pc, #56]	; (8003974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800393c:	4a0e      	ldr	r2, [pc, #56]	; (8003978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800393e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003940:	e002      	b.n	8003948 <LoopCopyDataInit>

08003942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003946:	3304      	adds	r3, #4

08003948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800394a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800394c:	d3f9      	bcc.n	8003942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800394e:	4a0b      	ldr	r2, [pc, #44]	; (800397c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003950:	4c0b      	ldr	r4, [pc, #44]	; (8003980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003954:	e001      	b.n	800395a <LoopFillZerobss>

08003956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003958:	3204      	adds	r2, #4

0800395a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800395a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800395c:	d3fb      	bcc.n	8003956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800395e:	f7ff ffd7 	bl	8003910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003962:	f00f fbf1 	bl	8013148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003966:	f7fe fc71 	bl	800224c <main>
  bx  lr    
 800396a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800396c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003974:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8003978:	08018b24 	.word	0x08018b24
  ldr r2, =_sbss
 800397c:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8003980:	2000cb30 	.word	0x2000cb30

08003984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003984:	e7fe      	b.n	8003984 <ADC_IRQHandler>
	...

08003988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <HAL_Init+0x40>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a0d      	ldr	r2, [pc, #52]	; (80039c8 <HAL_Init+0x40>)
 8003992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_Init+0x40>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <HAL_Init+0x40>)
 800399e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039a4:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <HAL_Init+0x40>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a07      	ldr	r2, [pc, #28]	; (80039c8 <HAL_Init+0x40>)
 80039aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b0:	2003      	movs	r0, #3
 80039b2:	f000 fb6e 	bl	8004092 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039b6:	200f      	movs	r0, #15
 80039b8:	f7ff fe4e 	bl	8003658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039bc:	f7ff fc16 	bl	80031ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40023c00 	.word	0x40023c00

080039cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_IncTick+0x20>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_IncTick+0x24>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4413      	add	r3, r2
 80039dc:	4a04      	ldr	r2, [pc, #16]	; (80039f0 <HAL_IncTick+0x24>)
 80039de:	6013      	str	r3, [r2, #0]
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000008 	.word	0x20000008
 80039f0:	2000ad94 	.word	0x2000ad94

080039f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return uwTick;
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <HAL_GetTick+0x14>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	2000ad94 	.word	0x2000ad94

08003a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a14:	f7ff ffee 	bl	80039f4 <HAL_GetTick>
 8003a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a24:	d005      	beq.n	8003a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_Delay+0x44>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a32:	bf00      	nop
 8003a34:	f7ff ffde 	bl	80039f4 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d8f7      	bhi.n	8003a34 <HAL_Delay+0x28>
  {
  }
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000008 	.word	0x20000008

08003a54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e033      	b.n	8003ad2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fbe6 	bl	8003244 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d118      	bne.n	8003ac4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a9a:	f023 0302 	bic.w	r3, r3, #2
 8003a9e:	f043 0202 	orr.w	r2, r3, #2
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f94a 	bl	8003d40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f023 0303 	bic.w	r3, r3, #3
 8003aba:	f043 0201 	orr.w	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ac2:	e001      	b.n	8003ac8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x1c>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e113      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x244>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b09      	cmp	r3, #9
 8003b06:	d925      	bls.n	8003b54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68d9      	ldr	r1, [r3, #12]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	4613      	mov	r3, r2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3b1e      	subs	r3, #30
 8003b1e:	2207      	movs	r2, #7
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43da      	mvns	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	400a      	ands	r2, r1
 8003b2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68d9      	ldr	r1, [r3, #12]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	4618      	mov	r0, r3
 8003b40:	4603      	mov	r3, r0
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4403      	add	r3, r0
 8003b46:	3b1e      	subs	r3, #30
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	60da      	str	r2, [r3, #12]
 8003b52:	e022      	b.n	8003b9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6919      	ldr	r1, [r3, #16]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	4613      	mov	r3, r2
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	4413      	add	r3, r2
 8003b68:	2207      	movs	r2, #7
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	400a      	ands	r2, r1
 8003b76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6919      	ldr	r1, [r3, #16]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	4618      	mov	r0, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4403      	add	r3, r0
 8003b90:	409a      	lsls	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b06      	cmp	r3, #6
 8003ba0:	d824      	bhi.n	8003bec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3b05      	subs	r3, #5
 8003bb4:	221f      	movs	r2, #31
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43da      	mvns	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	3b05      	subs	r3, #5
 8003bde:	fa00 f203 	lsl.w	r2, r0, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	635a      	str	r2, [r3, #52]	; 0x34
 8003bea:	e04c      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b0c      	cmp	r3, #12
 8003bf2:	d824      	bhi.n	8003c3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	3b23      	subs	r3, #35	; 0x23
 8003c06:	221f      	movs	r2, #31
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43da      	mvns	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	400a      	ands	r2, r1
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	4618      	mov	r0, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3b23      	subs	r3, #35	; 0x23
 8003c30:	fa00 f203 	lsl.w	r2, r0, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c3c:	e023      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3b41      	subs	r3, #65	; 0x41
 8003c50:	221f      	movs	r2, #31
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43da      	mvns	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	3b41      	subs	r3, #65	; 0x41
 8003c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c86:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <HAL_ADC_ConfigChannel+0x250>)
 8003c88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a28      	ldr	r2, [pc, #160]	; (8003d30 <HAL_ADC_ConfigChannel+0x254>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d10f      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x1d8>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b12      	cmp	r3, #18
 8003c9a:	d10b      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <HAL_ADC_ConfigChannel+0x254>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d12b      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x23a>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <HAL_ADC_ConfigChannel+0x258>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <HAL_ADC_ConfigChannel+0x1f4>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b11      	cmp	r3, #17
 8003cce:	d122      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <HAL_ADC_ConfigChannel+0x258>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d111      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003cf2:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <HAL_ADC_ConfigChannel+0x25c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a11      	ldr	r2, [pc, #68]	; (8003d3c <HAL_ADC_ConfigChannel+0x260>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	0c9a      	lsrs	r2, r3, #18
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d08:	e002      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f9      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40012300 	.word	0x40012300
 8003d30:	40012000 	.word	0x40012000
 8003d34:	10000012 	.word	0x10000012
 8003d38:	20000000 	.word	0x20000000
 8003d3c:	431bde83 	.word	0x431bde83

08003d40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d48:	4b79      	ldr	r3, [pc, #484]	; (8003f30 <ADC_Init+0x1f0>)
 8003d4a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	431a      	orrs	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	021a      	lsls	r2, r3, #8
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6859      	ldr	r1, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6899      	ldr	r1, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	4a58      	ldr	r2, [pc, #352]	; (8003f34 <ADC_Init+0x1f4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d022      	beq.n	8003e1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003de6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6899      	ldr	r1, [r3, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6899      	ldr	r1, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	e00f      	b.n	8003e3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0202 	bic.w	r2, r2, #2
 8003e4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6899      	ldr	r1, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	7e1b      	ldrb	r3, [r3, #24]
 8003e58:	005a      	lsls	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01b      	beq.n	8003ea4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e7a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6859      	ldr	r1, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	3b01      	subs	r3, #1
 8003e98:	035a      	lsls	r2, r3, #13
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	e007      	b.n	8003eb4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	051a      	lsls	r2, r3, #20
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6899      	ldr	r1, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ef6:	025a      	lsls	r2, r3, #9
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6899      	ldr	r1, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	029a      	lsls	r2, r3, #10
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	609a      	str	r2, [r3, #8]
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	40012300 	.word	0x40012300
 8003f34:	0f000001 	.word	0x0f000001

08003f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <__NVIC_SetPriorityGrouping+0x44>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f54:	4013      	ands	r3, r2
 8003f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f6a:	4a04      	ldr	r2, [pc, #16]	; (8003f7c <__NVIC_SetPriorityGrouping+0x44>)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	60d3      	str	r3, [r2, #12]
}
 8003f70:	bf00      	nop
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	e000ed00 	.word	0xe000ed00

08003f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <__NVIC_GetPriorityGrouping+0x18>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	0a1b      	lsrs	r3, r3, #8
 8003f8a:	f003 0307 	and.w	r3, r3, #7
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	e000ed00 	.word	0xe000ed00

08003f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	db0b      	blt.n	8003fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	f003 021f 	and.w	r2, r3, #31
 8003fb4:	4907      	ldr	r1, [pc, #28]	; (8003fd4 <__NVIC_EnableIRQ+0x38>)
 8003fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	e000e100 	.word	0xe000e100

08003fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	6039      	str	r1, [r7, #0]
 8003fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	db0a      	blt.n	8004002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	490c      	ldr	r1, [pc, #48]	; (8004024 <__NVIC_SetPriority+0x4c>)
 8003ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff6:	0112      	lsls	r2, r2, #4
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004000:	e00a      	b.n	8004018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	4908      	ldr	r1, [pc, #32]	; (8004028 <__NVIC_SetPriority+0x50>)
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	3b04      	subs	r3, #4
 8004010:	0112      	lsls	r2, r2, #4
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	440b      	add	r3, r1
 8004016:	761a      	strb	r2, [r3, #24]
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	e000e100 	.word	0xe000e100
 8004028:	e000ed00 	.word	0xe000ed00

0800402c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800402c:	b480      	push	{r7}
 800402e:	b089      	sub	sp, #36	; 0x24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f1c3 0307 	rsb	r3, r3, #7
 8004046:	2b04      	cmp	r3, #4
 8004048:	bf28      	it	cs
 800404a:	2304      	movcs	r3, #4
 800404c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	3304      	adds	r3, #4
 8004052:	2b06      	cmp	r3, #6
 8004054:	d902      	bls.n	800405c <NVIC_EncodePriority+0x30>
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3b03      	subs	r3, #3
 800405a:	e000      	b.n	800405e <NVIC_EncodePriority+0x32>
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43da      	mvns	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	401a      	ands	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004074:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	fa01 f303 	lsl.w	r3, r1, r3
 800407e:	43d9      	mvns	r1, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004084:	4313      	orrs	r3, r2
         );
}
 8004086:	4618      	mov	r0, r3
 8004088:	3724      	adds	r7, #36	; 0x24
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff ff4c 	bl	8003f38 <__NVIC_SetPriorityGrouping>
}
 80040a0:	bf00      	nop
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040ba:	f7ff ff61 	bl	8003f80 <__NVIC_GetPriorityGrouping>
 80040be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	6978      	ldr	r0, [r7, #20]
 80040c6:	f7ff ffb1 	bl	800402c <NVIC_EncodePriority>
 80040ca:	4602      	mov	r2, r0
 80040cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff ff80 	bl	8003fd8 <__NVIC_SetPriority>
}
 80040d8:	bf00      	nop
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff ff54 	bl	8003f9c <__NVIC_EnableIRQ>
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b089      	sub	sp, #36	; 0x24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800410e:	2300      	movs	r3, #0
 8004110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	e177      	b.n	8004408 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004118:	2201      	movs	r2, #1
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4013      	ands	r3, r2
 800412a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	429a      	cmp	r2, r3
 8004132:	f040 8166 	bne.w	8004402 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d005      	beq.n	800414e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800414a:	2b02      	cmp	r3, #2
 800414c:	d130      	bne.n	80041b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	2203      	movs	r2, #3
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	43db      	mvns	r3, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4013      	ands	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4313      	orrs	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004184:	2201      	movs	r2, #1
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4013      	ands	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	f003 0201 	and.w	r2, r3, #1
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d017      	beq.n	80041ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	2203      	movs	r2, #3
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d123      	bne.n	8004240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	08da      	lsrs	r2, r3, #3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3208      	adds	r2, #8
 8004200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	220f      	movs	r2, #15
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43db      	mvns	r3, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4013      	ands	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	08da      	lsrs	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3208      	adds	r2, #8
 800423a:	69b9      	ldr	r1, [r7, #24]
 800423c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	2203      	movs	r2, #3
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 0203 	and.w	r2, r3, #3
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 80c0 	beq.w	8004402 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	4b66      	ldr	r3, [pc, #408]	; (8004420 <HAL_GPIO_Init+0x324>)
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	4a65      	ldr	r2, [pc, #404]	; (8004420 <HAL_GPIO_Init+0x324>)
 800428c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004290:	6453      	str	r3, [r2, #68]	; 0x44
 8004292:	4b63      	ldr	r3, [pc, #396]	; (8004420 <HAL_GPIO_Init+0x324>)
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800429e:	4a61      	ldr	r2, [pc, #388]	; (8004424 <HAL_GPIO_Init+0x328>)
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	089b      	lsrs	r3, r3, #2
 80042a4:	3302      	adds	r3, #2
 80042a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	220f      	movs	r2, #15
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4013      	ands	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a58      	ldr	r2, [pc, #352]	; (8004428 <HAL_GPIO_Init+0x32c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d037      	beq.n	800433a <HAL_GPIO_Init+0x23e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a57      	ldr	r2, [pc, #348]	; (800442c <HAL_GPIO_Init+0x330>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d031      	beq.n	8004336 <HAL_GPIO_Init+0x23a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a56      	ldr	r2, [pc, #344]	; (8004430 <HAL_GPIO_Init+0x334>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d02b      	beq.n	8004332 <HAL_GPIO_Init+0x236>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a55      	ldr	r2, [pc, #340]	; (8004434 <HAL_GPIO_Init+0x338>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d025      	beq.n	800432e <HAL_GPIO_Init+0x232>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a54      	ldr	r2, [pc, #336]	; (8004438 <HAL_GPIO_Init+0x33c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d01f      	beq.n	800432a <HAL_GPIO_Init+0x22e>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a53      	ldr	r2, [pc, #332]	; (800443c <HAL_GPIO_Init+0x340>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d019      	beq.n	8004326 <HAL_GPIO_Init+0x22a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a52      	ldr	r2, [pc, #328]	; (8004440 <HAL_GPIO_Init+0x344>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d013      	beq.n	8004322 <HAL_GPIO_Init+0x226>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a51      	ldr	r2, [pc, #324]	; (8004444 <HAL_GPIO_Init+0x348>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00d      	beq.n	800431e <HAL_GPIO_Init+0x222>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a50      	ldr	r2, [pc, #320]	; (8004448 <HAL_GPIO_Init+0x34c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d007      	beq.n	800431a <HAL_GPIO_Init+0x21e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a4f      	ldr	r2, [pc, #316]	; (800444c <HAL_GPIO_Init+0x350>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d101      	bne.n	8004316 <HAL_GPIO_Init+0x21a>
 8004312:	2309      	movs	r3, #9
 8004314:	e012      	b.n	800433c <HAL_GPIO_Init+0x240>
 8004316:	230a      	movs	r3, #10
 8004318:	e010      	b.n	800433c <HAL_GPIO_Init+0x240>
 800431a:	2308      	movs	r3, #8
 800431c:	e00e      	b.n	800433c <HAL_GPIO_Init+0x240>
 800431e:	2307      	movs	r3, #7
 8004320:	e00c      	b.n	800433c <HAL_GPIO_Init+0x240>
 8004322:	2306      	movs	r3, #6
 8004324:	e00a      	b.n	800433c <HAL_GPIO_Init+0x240>
 8004326:	2305      	movs	r3, #5
 8004328:	e008      	b.n	800433c <HAL_GPIO_Init+0x240>
 800432a:	2304      	movs	r3, #4
 800432c:	e006      	b.n	800433c <HAL_GPIO_Init+0x240>
 800432e:	2303      	movs	r3, #3
 8004330:	e004      	b.n	800433c <HAL_GPIO_Init+0x240>
 8004332:	2302      	movs	r3, #2
 8004334:	e002      	b.n	800433c <HAL_GPIO_Init+0x240>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <HAL_GPIO_Init+0x240>
 800433a:	2300      	movs	r3, #0
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	f002 0203 	and.w	r2, r2, #3
 8004342:	0092      	lsls	r2, r2, #2
 8004344:	4093      	lsls	r3, r2
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4313      	orrs	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800434c:	4935      	ldr	r1, [pc, #212]	; (8004424 <HAL_GPIO_Init+0x328>)
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	089b      	lsrs	r3, r3, #2
 8004352:	3302      	adds	r3, #2
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800435a:	4b3d      	ldr	r3, [pc, #244]	; (8004450 <HAL_GPIO_Init+0x354>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	43db      	mvns	r3, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4013      	ands	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800437e:	4a34      	ldr	r2, [pc, #208]	; (8004450 <HAL_GPIO_Init+0x354>)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004384:	4b32      	ldr	r3, [pc, #200]	; (8004450 <HAL_GPIO_Init+0x354>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043a8:	4a29      	ldr	r2, [pc, #164]	; (8004450 <HAL_GPIO_Init+0x354>)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ae:	4b28      	ldr	r3, [pc, #160]	; (8004450 <HAL_GPIO_Init+0x354>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	43db      	mvns	r3, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4013      	ands	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043d2:	4a1f      	ldr	r2, [pc, #124]	; (8004450 <HAL_GPIO_Init+0x354>)
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043d8:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <HAL_GPIO_Init+0x354>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	43db      	mvns	r3, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043fc:	4a14      	ldr	r2, [pc, #80]	; (8004450 <HAL_GPIO_Init+0x354>)
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	3301      	adds	r3, #1
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	2b0f      	cmp	r3, #15
 800440c:	f67f ae84 	bls.w	8004118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004410:	bf00      	nop
 8004412:	bf00      	nop
 8004414:	3724      	adds	r7, #36	; 0x24
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800
 8004424:	40013800 	.word	0x40013800
 8004428:	40020000 	.word	0x40020000
 800442c:	40020400 	.word	0x40020400
 8004430:	40020800 	.word	0x40020800
 8004434:	40020c00 	.word	0x40020c00
 8004438:	40021000 	.word	0x40021000
 800443c:	40021400 	.word	0x40021400
 8004440:	40021800 	.word	0x40021800
 8004444:	40021c00 	.word	0x40021c00
 8004448:	40022000 	.word	0x40022000
 800444c:	40022400 	.word	0x40022400
 8004450:	40013c00 	.word	0x40013c00

08004454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	807b      	strh	r3, [r7, #2]
 8004460:	4613      	mov	r3, r2
 8004462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004464:	787b      	ldrb	r3, [r7, #1]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800446a:	887a      	ldrh	r2, [r7, #2]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004470:	e003      	b.n	800447a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004472:	887b      	ldrh	r3, [r7, #2]
 8004474:	041a      	lsls	r2, r3, #16
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	619a      	str	r2, [r3, #24]
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004492:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	4013      	ands	r3, r2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d006      	beq.n	80044ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800449e:	4a05      	ldr	r2, [pc, #20]	; (80044b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044a0:	88fb      	ldrh	r3, [r7, #6]
 80044a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f806 	bl	80044b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80044ac:	bf00      	nop
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40013c00 	.word	0x40013c00

080044b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e12b      	b.n	800473a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fe fee8 	bl	80032cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2224      	movs	r2, #36	; 0x24
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004532:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004534:	f002 fdd4 	bl	80070e0 <HAL_RCC_GetPCLK1Freq>
 8004538:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4a81      	ldr	r2, [pc, #516]	; (8004744 <HAL_I2C_Init+0x274>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d807      	bhi.n	8004554 <HAL_I2C_Init+0x84>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4a80      	ldr	r2, [pc, #512]	; (8004748 <HAL_I2C_Init+0x278>)
 8004548:	4293      	cmp	r3, r2
 800454a:	bf94      	ite	ls
 800454c:	2301      	movls	r3, #1
 800454e:	2300      	movhi	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	e006      	b.n	8004562 <HAL_I2C_Init+0x92>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a7d      	ldr	r2, [pc, #500]	; (800474c <HAL_I2C_Init+0x27c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	bf94      	ite	ls
 800455c:	2301      	movls	r3, #1
 800455e:	2300      	movhi	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e0e7      	b.n	800473a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a78      	ldr	r2, [pc, #480]	; (8004750 <HAL_I2C_Init+0x280>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	0c9b      	lsrs	r3, r3, #18
 8004574:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4a6a      	ldr	r2, [pc, #424]	; (8004744 <HAL_I2C_Init+0x274>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d802      	bhi.n	80045a4 <HAL_I2C_Init+0xd4>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	3301      	adds	r3, #1
 80045a2:	e009      	b.n	80045b8 <HAL_I2C_Init+0xe8>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045aa:	fb02 f303 	mul.w	r3, r2, r3
 80045ae:	4a69      	ldr	r2, [pc, #420]	; (8004754 <HAL_I2C_Init+0x284>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	099b      	lsrs	r3, r3, #6
 80045b6:	3301      	adds	r3, #1
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6812      	ldr	r2, [r2, #0]
 80045bc:	430b      	orrs	r3, r1
 80045be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	495c      	ldr	r1, [pc, #368]	; (8004744 <HAL_I2C_Init+0x274>)
 80045d4:	428b      	cmp	r3, r1
 80045d6:	d819      	bhi.n	800460c <HAL_I2C_Init+0x13c>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1e59      	subs	r1, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80045e6:	1c59      	adds	r1, r3, #1
 80045e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045ec:	400b      	ands	r3, r1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <HAL_I2C_Init+0x138>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1e59      	subs	r1, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004600:	3301      	adds	r3, #1
 8004602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004606:	e051      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 8004608:	2304      	movs	r3, #4
 800460a:	e04f      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d111      	bne.n	8004638 <HAL_I2C_Init+0x168>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1e58      	subs	r0, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	440b      	add	r3, r1
 8004622:	fbb0 f3f3 	udiv	r3, r0, r3
 8004626:	3301      	adds	r3, #1
 8004628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	e012      	b.n	800465e <HAL_I2C_Init+0x18e>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1e58      	subs	r0, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6859      	ldr	r1, [r3, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	0099      	lsls	r1, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	fbb0 f3f3 	udiv	r3, r0, r3
 800464e:	3301      	adds	r3, #1
 8004650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf0c      	ite	eq
 8004658:	2301      	moveq	r3, #1
 800465a:	2300      	movne	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_I2C_Init+0x196>
 8004662:	2301      	movs	r3, #1
 8004664:	e022      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10e      	bne.n	800468c <HAL_I2C_Init+0x1bc>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1e58      	subs	r0, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	460b      	mov	r3, r1
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	440b      	add	r3, r1
 800467c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004680:	3301      	adds	r3, #1
 8004682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800468a:	e00f      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	1e58      	subs	r0, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6859      	ldr	r1, [r3, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	0099      	lsls	r1, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a2:	3301      	adds	r3, #1
 80046a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	6809      	ldr	r1, [r1, #0]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69da      	ldr	r2, [r3, #28]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6911      	ldr	r1, [r2, #16]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68d2      	ldr	r2, [r2, #12]
 80046e6:	4311      	orrs	r1, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	430b      	orrs	r3, r1
 80046ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695a      	ldr	r2, [r3, #20]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	000186a0 	.word	0x000186a0
 8004748:	001e847f 	.word	0x001e847f
 800474c:	003d08ff 	.word	0x003d08ff
 8004750:	431bde83 	.word	0x431bde83
 8004754:	10624dd3 	.word	0x10624dd3

08004758 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	4608      	mov	r0, r1
 8004762:	4611      	mov	r1, r2
 8004764:	461a      	mov	r2, r3
 8004766:	4603      	mov	r3, r0
 8004768:	817b      	strh	r3, [r7, #10]
 800476a:	460b      	mov	r3, r1
 800476c:	813b      	strh	r3, [r7, #8]
 800476e:	4613      	mov	r3, r2
 8004770:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004772:	f7ff f93f 	bl	80039f4 <HAL_GetTick>
 8004776:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b20      	cmp	r3, #32
 8004782:	f040 80d9 	bne.w	8004938 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	2319      	movs	r3, #25
 800478c:	2201      	movs	r2, #1
 800478e:	496d      	ldr	r1, [pc, #436]	; (8004944 <HAL_I2C_Mem_Write+0x1ec>)
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 fc7f 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800479c:	2302      	movs	r3, #2
 800479e:	e0cc      	b.n	800493a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_I2C_Mem_Write+0x56>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e0c5      	b.n	800493a <HAL_I2C_Mem_Write+0x1e2>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d007      	beq.n	80047d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2221      	movs	r2, #33	; 0x21
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2240      	movs	r2, #64	; 0x40
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a3a      	ldr	r2, [r7, #32]
 80047fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004804:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4a4d      	ldr	r2, [pc, #308]	; (8004948 <HAL_I2C_Mem_Write+0x1f0>)
 8004814:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004816:	88f8      	ldrh	r0, [r7, #6]
 8004818:	893a      	ldrh	r2, [r7, #8]
 800481a:	8979      	ldrh	r1, [r7, #10]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	4603      	mov	r3, r0
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fab6 	bl	8004d98 <I2C_RequestMemoryWrite>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d052      	beq.n	80048d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e081      	b.n	800493a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 fd00 	bl	8005240 <I2C_WaitOnTXEFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00d      	beq.n	8004862 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	2b04      	cmp	r3, #4
 800484c:	d107      	bne.n	800485e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e06b      	b.n	800493a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	781a      	ldrb	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b04      	cmp	r3, #4
 800489e:	d11b      	bne.n	80048d8 <HAL_I2C_Mem_Write+0x180>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d017      	beq.n	80048d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	781a      	ldrb	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1aa      	bne.n	8004836 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fcec 	bl	80052c2 <I2C_WaitOnBTFFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d107      	bne.n	8004908 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004906:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e016      	b.n	800493a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800491a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	e000      	b.n	800493a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004938:	2302      	movs	r3, #2
  }
}
 800493a:	4618      	mov	r0, r3
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	00100002 	.word	0x00100002
 8004948:	ffff0000 	.word	0xffff0000

0800494c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08c      	sub	sp, #48	; 0x30
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	4608      	mov	r0, r1
 8004956:	4611      	mov	r1, r2
 8004958:	461a      	mov	r2, r3
 800495a:	4603      	mov	r3, r0
 800495c:	817b      	strh	r3, [r7, #10]
 800495e:	460b      	mov	r3, r1
 8004960:	813b      	strh	r3, [r7, #8]
 8004962:	4613      	mov	r3, r2
 8004964:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004966:	f7ff f845 	bl	80039f4 <HAL_GetTick>
 800496a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b20      	cmp	r3, #32
 8004976:	f040 8208 	bne.w	8004d8a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	2319      	movs	r3, #25
 8004980:	2201      	movs	r2, #1
 8004982:	497b      	ldr	r1, [pc, #492]	; (8004b70 <HAL_I2C_Mem_Read+0x224>)
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 fb85 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004990:	2302      	movs	r3, #2
 8004992:	e1fb      	b.n	8004d8c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_I2C_Mem_Read+0x56>
 800499e:	2302      	movs	r3, #2
 80049a0:	e1f4      	b.n	8004d8c <HAL_I2C_Mem_Read+0x440>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d007      	beq.n	80049c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2222      	movs	r2, #34	; 0x22
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2240      	movs	r2, #64	; 0x40
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80049f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4a5b      	ldr	r2, [pc, #364]	; (8004b74 <HAL_I2C_Mem_Read+0x228>)
 8004a08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a0a:	88f8      	ldrh	r0, [r7, #6]
 8004a0c:	893a      	ldrh	r2, [r7, #8]
 8004a0e:	8979      	ldrh	r1, [r7, #10]
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	9301      	str	r3, [sp, #4]
 8004a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	4603      	mov	r3, r0
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fa52 	bl	8004ec4 <I2C_RequestMemoryRead>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e1b0      	b.n	8004d8c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d113      	bne.n	8004a5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a32:	2300      	movs	r3, #0
 8004a34:	623b      	str	r3, [r7, #32]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	623b      	str	r3, [r7, #32]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	623b      	str	r3, [r7, #32]
 8004a46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	e184      	b.n	8004d64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d11b      	bne.n	8004a9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e164      	b.n	8004d64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d11b      	bne.n	8004ada <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ac0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	61bb      	str	r3, [r7, #24]
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	e144      	b.n	8004d64 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004af0:	e138      	b.n	8004d64 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	f200 80f1 	bhi.w	8004cde <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d123      	bne.n	8004b4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fc1b 	bl	8005344 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e139      	b.n	8004d8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b4a:	e10b      	b.n	8004d64 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d14e      	bne.n	8004bf2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	4906      	ldr	r1, [pc, #24]	; (8004b78 <HAL_I2C_Mem_Read+0x22c>)
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 fa98 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d008      	beq.n	8004b7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e10e      	b.n	8004d8c <HAL_I2C_Mem_Read+0x440>
 8004b6e:	bf00      	nop
 8004b70:	00100002 	.word	0x00100002
 8004b74:	ffff0000 	.word	0xffff0000
 8004b78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bf0:	e0b8      	b.n	8004d64 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	4966      	ldr	r1, [pc, #408]	; (8004d94 <HAL_I2C_Mem_Read+0x448>)
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fa49 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0bf      	b.n	8004d8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	2200      	movs	r2, #0
 8004c56:	494f      	ldr	r1, [pc, #316]	; (8004d94 <HAL_I2C_Mem_Read+0x448>)
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fa1b 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e091      	b.n	8004d8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cdc:	e042      	b.n	8004d64 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 fb2e 	bl	8005344 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e04c      	b.n	8004d8c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d118      	bne.n	8004d64 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f47f aec2 	bne.w	8004af2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	e000      	b.n	8004d8c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004d8a:	2302      	movs	r3, #2
  }
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3728      	adds	r7, #40	; 0x28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	00010004 	.word	0x00010004

08004d98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	4608      	mov	r0, r1
 8004da2:	4611      	mov	r1, r2
 8004da4:	461a      	mov	r2, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	817b      	strh	r3, [r7, #10]
 8004daa:	460b      	mov	r3, r1
 8004dac:	813b      	strh	r3, [r7, #8]
 8004dae:	4613      	mov	r3, r2
 8004db0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f960 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00d      	beq.n	8004df6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de8:	d103      	bne.n	8004df2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e05f      	b.n	8004eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004df6:	897b      	ldrh	r3, [r7, #10]
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	6a3a      	ldr	r2, [r7, #32]
 8004e0a:	492d      	ldr	r1, [pc, #180]	; (8004ec0 <I2C_RequestMemoryWrite+0x128>)
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f998 	bl	8005142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e04c      	b.n	8004eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e34:	6a39      	ldr	r1, [r7, #32]
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fa02 	bl	8005240 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00d      	beq.n	8004e5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d107      	bne.n	8004e5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e02b      	b.n	8004eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e5e:	88fb      	ldrh	r3, [r7, #6]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d105      	bne.n	8004e70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e64:	893b      	ldrh	r3, [r7, #8]
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	611a      	str	r2, [r3, #16]
 8004e6e:	e021      	b.n	8004eb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e70:	893b      	ldrh	r3, [r7, #8]
 8004e72:	0a1b      	lsrs	r3, r3, #8
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e80:	6a39      	ldr	r1, [r7, #32]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 f9dc 	bl	8005240 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00d      	beq.n	8004eaa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d107      	bne.n	8004ea6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e005      	b.n	8004eb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eaa:	893b      	ldrh	r3, [r7, #8]
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	00010002 	.word	0x00010002

08004ec4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	4608      	mov	r0, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	817b      	strh	r3, [r7, #10]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	813b      	strh	r3, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004eec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004efc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f8c2 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f24:	d103      	bne.n	8004f2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e0aa      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f32:	897b      	ldrh	r3, [r7, #10]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	6a3a      	ldr	r2, [r7, #32]
 8004f46:	4952      	ldr	r1, [pc, #328]	; (8005090 <I2C_RequestMemoryRead+0x1cc>)
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f8fa 	bl	8005142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e097      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f70:	6a39      	ldr	r1, [r7, #32]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f964 	bl	8005240 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00d      	beq.n	8004f9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d107      	bne.n	8004f96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e076      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f9a:	88fb      	ldrh	r3, [r7, #6]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d105      	bne.n	8004fac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa0:	893b      	ldrh	r3, [r7, #8]
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	611a      	str	r2, [r3, #16]
 8004faa:	e021      	b.n	8004ff0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fac:	893b      	ldrh	r3, [r7, #8]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fbc:	6a39      	ldr	r1, [r7, #32]
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 f93e 	bl	8005240 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00d      	beq.n	8004fe6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d107      	bne.n	8004fe2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e050      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fe6:	893b      	ldrh	r3, [r7, #8]
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff2:	6a39      	ldr	r1, [r7, #32]
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f923 	bl	8005240 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00d      	beq.n	800501c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	2b04      	cmp	r3, #4
 8005006:	d107      	bne.n	8005018 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005016:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e035      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800502a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	2200      	movs	r2, #0
 8005034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f82b 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00d      	beq.n	8005060 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005052:	d103      	bne.n	800505c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800505a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e013      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005060:	897b      	ldrh	r3, [r7, #10]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f043 0301 	orr.w	r3, r3, #1
 8005068:	b2da      	uxtb	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	6a3a      	ldr	r2, [r7, #32]
 8005074:	4906      	ldr	r1, [pc, #24]	; (8005090 <I2C_RequestMemoryRead+0x1cc>)
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f863 	bl	8005142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	00010002 	.word	0x00010002

08005094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	4613      	mov	r3, r2
 80050a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050a4:	e025      	b.n	80050f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ac:	d021      	beq.n	80050f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ae:	f7fe fca1 	bl	80039f4 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d302      	bcc.n	80050c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d116      	bne.n	80050f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	f043 0220 	orr.w	r2, r3, #32
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e023      	b.n	800513a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d10d      	bne.n	8005118 <I2C_WaitOnFlagUntilTimeout+0x84>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	43da      	mvns	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4013      	ands	r3, r2
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	bf0c      	ite	eq
 800510e:	2301      	moveq	r3, #1
 8005110:	2300      	movne	r3, #0
 8005112:	b2db      	uxtb	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	e00c      	b.n	8005132 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	43da      	mvns	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4013      	ands	r3, r2
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	bf0c      	ite	eq
 800512a:	2301      	moveq	r3, #1
 800512c:	2300      	movne	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	429a      	cmp	r2, r3
 8005136:	d0b6      	beq.n	80050a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	607a      	str	r2, [r7, #4]
 800514e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005150:	e051      	b.n	80051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005160:	d123      	bne.n	80051aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005170:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800517a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f043 0204 	orr.w	r2, r3, #4
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e046      	b.n	8005238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051b0:	d021      	beq.n	80051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b2:	f7fe fc1f 	bl	80039f4 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d302      	bcc.n	80051c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d116      	bne.n	80051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	f043 0220 	orr.w	r2, r3, #32
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e020      	b.n	8005238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d10c      	bne.n	800521a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	43da      	mvns	r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4013      	ands	r3, r2
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	bf14      	ite	ne
 8005212:	2301      	movne	r3, #1
 8005214:	2300      	moveq	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	e00b      	b.n	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	43da      	mvns	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4013      	ands	r3, r2
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	bf14      	ite	ne
 800522c:	2301      	movne	r3, #1
 800522e:	2300      	moveq	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d18d      	bne.n	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800524c:	e02d      	b.n	80052aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f8ce 	bl	80053f0 <I2C_IsAcknowledgeFailed>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e02d      	b.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005264:	d021      	beq.n	80052aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005266:	f7fe fbc5 	bl	80039f4 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	429a      	cmp	r2, r3
 8005274:	d302      	bcc.n	800527c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d116      	bne.n	80052aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f043 0220 	orr.w	r2, r3, #32
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e007      	b.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b4:	2b80      	cmp	r3, #128	; 0x80
 80052b6:	d1ca      	bne.n	800524e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052ce:	e02d      	b.n	800532c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f88d 	bl	80053f0 <I2C_IsAcknowledgeFailed>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e02d      	b.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052e6:	d021      	beq.n	800532c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e8:	f7fe fb84 	bl	80039f4 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d302      	bcc.n	80052fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d116      	bne.n	800532c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	f043 0220 	orr.w	r2, r3, #32
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e007      	b.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b04      	cmp	r3, #4
 8005338:	d1ca      	bne.n	80052d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005350:	e042      	b.n	80053d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b10      	cmp	r3, #16
 800535e:	d119      	bne.n	8005394 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0210 	mvn.w	r2, #16
 8005368:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e029      	b.n	80053e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005394:	f7fe fb2e 	bl	80039f4 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d302      	bcc.n	80053aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d116      	bne.n	80053d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	f043 0220 	orr.w	r2, r3, #32
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e007      	b.n	80053e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e2:	2b40      	cmp	r3, #64	; 0x40
 80053e4:	d1b5      	bne.n	8005352 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005406:	d11b      	bne.n	8005440 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005410:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	f043 0204 	orr.w	r2, r3, #4
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b20      	cmp	r3, #32
 8005462:	d129      	bne.n	80054b8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2224      	movs	r2, #36	; 0x24
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0201 	bic.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0210 	bic.w	r2, r2, #16
 800548a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e000      	b.n	80054ba <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
  }
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80054d0:	2300      	movs	r3, #0
 80054d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d12a      	bne.n	8005536 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2224      	movs	r2, #36	; 0x24
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0201 	bic.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005500:	89fb      	ldrh	r3, [r7, #14]
 8005502:	f023 030f 	bic.w	r3, r3, #15
 8005506:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	b29a      	uxth	r2, r3
 800550c:	89fb      	ldrh	r3, [r7, #14]
 800550e:	4313      	orrs	r3, r2
 8005510:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	89fa      	ldrh	r2, [r7, #14]
 8005518:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0201 	orr.w	r2, r2, #1
 8005528:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2220      	movs	r2, #32
 800552e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	e000      	b.n	8005538 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005536:	2302      	movs	r3, #2
  }
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005546:	b08f      	sub	sp, #60	; 0x3c
 8005548:	af0a      	add	r7, sp, #40	; 0x28
 800554a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e10f      	b.n	8005776 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f00d f9cb 	bl	801290c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2203      	movs	r2, #3
 800557a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005586:	2b00      	cmp	r3, #0
 8005588:	d102      	bne.n	8005590 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4618      	mov	r0, r3
 8005596:	f003 fd0e 	bl	8008fb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	687e      	ldr	r6, [r7, #4]
 80055a2:	466d      	mov	r5, sp
 80055a4:	f106 0410 	add.w	r4, r6, #16
 80055a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80055b8:	1d33      	adds	r3, r6, #4
 80055ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055bc:	6838      	ldr	r0, [r7, #0]
 80055be:	f003 fbe5 	bl	8008d8c <USB_CoreInit>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0d0      	b.n	8005776 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2100      	movs	r1, #0
 80055da:	4618      	mov	r0, r3
 80055dc:	f003 fcfc 	bl	8008fd8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055e0:	2300      	movs	r3, #0
 80055e2:	73fb      	strb	r3, [r7, #15]
 80055e4:	e04a      	b.n	800567c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80055e6:	7bfa      	ldrb	r2, [r7, #15]
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	4613      	mov	r3, r2
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	1a9b      	subs	r3, r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	440b      	add	r3, r1
 80055f4:	333d      	adds	r3, #61	; 0x3d
 80055f6:	2201      	movs	r2, #1
 80055f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80055fa:	7bfa      	ldrb	r2, [r7, #15]
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	4613      	mov	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	1a9b      	subs	r3, r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	333c      	adds	r3, #60	; 0x3c
 800560a:	7bfa      	ldrb	r2, [r7, #15]
 800560c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800560e:	7bfa      	ldrb	r2, [r7, #15]
 8005610:	7bfb      	ldrb	r3, [r7, #15]
 8005612:	b298      	uxth	r0, r3
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	4613      	mov	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	440b      	add	r3, r1
 8005620:	3342      	adds	r3, #66	; 0x42
 8005622:	4602      	mov	r2, r0
 8005624:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005626:	7bfa      	ldrb	r2, [r7, #15]
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	1a9b      	subs	r3, r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	440b      	add	r3, r1
 8005634:	333f      	adds	r3, #63	; 0x3f
 8005636:	2200      	movs	r2, #0
 8005638:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800563a:	7bfa      	ldrb	r2, [r7, #15]
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	4613      	mov	r3, r2
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	1a9b      	subs	r3, r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	440b      	add	r3, r1
 8005648:	3344      	adds	r3, #68	; 0x44
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800564e:	7bfa      	ldrb	r2, [r7, #15]
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	1a9b      	subs	r3, r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	3348      	adds	r3, #72	; 0x48
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005662:	7bfa      	ldrb	r2, [r7, #15]
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	3350      	adds	r3, #80	; 0x50
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	3301      	adds	r3, #1
 800567a:	73fb      	strb	r3, [r7, #15]
 800567c:	7bfa      	ldrb	r2, [r7, #15]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	429a      	cmp	r2, r3
 8005684:	d3af      	bcc.n	80055e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005686:	2300      	movs	r3, #0
 8005688:	73fb      	strb	r3, [r7, #15]
 800568a:	e044      	b.n	8005716 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800568c:	7bfa      	ldrb	r2, [r7, #15]
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800569e:	2200      	movs	r2, #0
 80056a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056a2:	7bfa      	ldrb	r2, [r7, #15]
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80056b4:	7bfa      	ldrb	r2, [r7, #15]
 80056b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056b8:	7bfa      	ldrb	r2, [r7, #15]
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80056ca:	2200      	movs	r2, #0
 80056cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80056ce:	7bfa      	ldrb	r2, [r7, #15]
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80056e4:	7bfa      	ldrb	r2, [r7, #15]
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80056fa:	7bfa      	ldrb	r2, [r7, #15]
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	1a9b      	subs	r3, r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	440b      	add	r3, r1
 8005708:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	3301      	adds	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
 8005716:	7bfa      	ldrb	r2, [r7, #15]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	429a      	cmp	r2, r3
 800571e:	d3b5      	bcc.n	800568c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	603b      	str	r3, [r7, #0]
 8005726:	687e      	ldr	r6, [r7, #4]
 8005728:	466d      	mov	r5, sp
 800572a:	f106 0410 	add.w	r4, r6, #16
 800572e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005736:	e894 0003 	ldmia.w	r4, {r0, r1}
 800573a:	e885 0003 	stmia.w	r5, {r0, r1}
 800573e:	1d33      	adds	r3, r6, #4
 8005740:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005742:	6838      	ldr	r0, [r7, #0]
 8005744:	f003 fc94 	bl	8009070 <USB_DevInit>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2202      	movs	r2, #2
 8005752:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e00d      	b.n	8005776 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f004 fd10 	bl	800a194 <USB_DevDisconnect>

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800577e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_PCD_Start+0x1c>
 8005796:	2302      	movs	r3, #2
 8005798:	e020      	b.n	80057dc <HAL_PCD_Start+0x5e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d109      	bne.n	80057be <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d005      	beq.n	80057be <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f003 fbe6 	bl	8008f94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f004 fcc0 	bl	800a152 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80057e4:	b590      	push	{r4, r7, lr}
 80057e6:	b08d      	sub	sp, #52	; 0x34
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f004 fd7e 	bl	800a2fc <USB_GetMode>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	f040 839d 	bne.w	8005f42 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4618      	mov	r0, r3
 800580e:	f004 fce2 	bl	800a1d6 <USB_ReadInterrupts>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 8393 	beq.w	8005f40 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f004 fcd9 	bl	800a1d6 <USB_ReadInterrupts>
 8005824:	4603      	mov	r3, r0
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b02      	cmp	r3, #2
 800582c:	d107      	bne.n	800583e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695a      	ldr	r2, [r3, #20]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f002 0202 	and.w	r2, r2, #2
 800583c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f004 fcc7 	bl	800a1d6 <USB_ReadInterrupts>
 8005848:	4603      	mov	r3, r0
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	2b10      	cmp	r3, #16
 8005850:	d161      	bne.n	8005916 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699a      	ldr	r2, [r3, #24]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0210 	bic.w	r2, r2, #16
 8005860:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	f003 020f 	and.w	r2, r3, #15
 800586e:	4613      	mov	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	1a9b      	subs	r3, r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	4413      	add	r3, r2
 800587e:	3304      	adds	r3, #4
 8005880:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	0c5b      	lsrs	r3, r3, #17
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	2b02      	cmp	r3, #2
 800588c:	d124      	bne.n	80058d8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005894:	4013      	ands	r3, r2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d035      	beq.n	8005906 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	091b      	lsrs	r3, r3, #4
 80058a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80058a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	6a38      	ldr	r0, [r7, #32]
 80058ae:	f004 fafe 	bl	8009eae <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	091b      	lsrs	r3, r3, #4
 80058ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058be:	441a      	add	r2, r3
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	699a      	ldr	r2, [r3, #24]
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	091b      	lsrs	r3, r3, #4
 80058cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058d0:	441a      	add	r2, r3
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	619a      	str	r2, [r3, #24]
 80058d6:	e016      	b.n	8005906 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	0c5b      	lsrs	r3, r3, #17
 80058dc:	f003 030f 	and.w	r3, r3, #15
 80058e0:	2b06      	cmp	r3, #6
 80058e2:	d110      	bne.n	8005906 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80058ea:	2208      	movs	r2, #8
 80058ec:	4619      	mov	r1, r3
 80058ee:	6a38      	ldr	r0, [r7, #32]
 80058f0:	f004 fadd 	bl	8009eae <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	699a      	ldr	r2, [r3, #24]
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	091b      	lsrs	r3, r3, #4
 80058fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005900:	441a      	add	r2, r3
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699a      	ldr	r2, [r3, #24]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0210 	orr.w	r2, r2, #16
 8005914:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f004 fc5b 	bl	800a1d6 <USB_ReadInterrupts>
 8005920:	4603      	mov	r3, r0
 8005922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005926:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800592a:	d16e      	bne.n	8005a0a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4618      	mov	r0, r3
 8005936:	f004 fc61 	bl	800a1fc <USB_ReadDevAllOutEpInterrupt>
 800593a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800593c:	e062      	b.n	8005a04 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	d057      	beq.n	80059f8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	4611      	mov	r1, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f004 fc86 	bl	800a264 <USB_ReadDevOutEPInterrupt>
 8005958:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00c      	beq.n	800597e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	461a      	mov	r2, r3
 8005972:	2301      	movs	r3, #1
 8005974:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fdb1 	bl	80064e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00c      	beq.n	80059a2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005994:	461a      	mov	r2, r3
 8005996:	2308      	movs	r3, #8
 8005998:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800599a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 feab 	bl	80066f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d008      	beq.n	80059be <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b8:	461a      	mov	r2, r3
 80059ba:	2310      	movs	r3, #16
 80059bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d008      	beq.n	80059da <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	461a      	mov	r2, r3
 80059d6:	2320      	movs	r3, #32
 80059d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d009      	beq.n	80059f8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f0:	461a      	mov	r2, r3
 80059f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	3301      	adds	r3, #1
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	085b      	lsrs	r3, r3, #1
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d199      	bne.n	800593e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f004 fbe1 	bl	800a1d6 <USB_ReadInterrupts>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a1e:	f040 80c0 	bne.w	8005ba2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f004 fc02 	bl	800a230 <USB_ReadDevAllInEpInterrupt>
 8005a2c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005a32:	e0b2      	b.n	8005b9a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 80a7 	beq.w	8005b8e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	4611      	mov	r1, r2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f004 fc28 	bl	800a2a0 <USB_ReadDevInEPInterrupt>
 8005a50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d057      	beq.n	8005b0c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	2201      	movs	r2, #1
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	43db      	mvns	r3, r3
 8005a76:	69f9      	ldr	r1, [r7, #28]
 8005a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	2301      	movs	r3, #1
 8005a90:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d132      	bne.n	8005b00 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	1a9b      	subs	r3, r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3348      	adds	r3, #72	; 0x48
 8005aaa:	6819      	ldr	r1, [r3, #0]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4403      	add	r3, r0
 8005aba:	3344      	adds	r3, #68	; 0x44
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4419      	add	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	1a9b      	subs	r3, r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4403      	add	r3, r0
 8005ace:	3348      	adds	r3, #72	; 0x48
 8005ad0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d113      	bne.n	8005b00 <HAL_PCD_IRQHandler+0x31c>
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005adc:	4613      	mov	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	1a9b      	subs	r3, r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	3350      	adds	r3, #80	; 0x50
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d108      	bne.n	8005b00 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005af8:	461a      	mov	r2, r3
 8005afa:	2101      	movs	r1, #1
 8005afc:	f004 fc30 	bl	800a360 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	4619      	mov	r1, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f00c ff8f 	bl	8012a2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d008      	beq.n	8005b28 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b22:	461a      	mov	r2, r3
 8005b24:	2308      	movs	r3, #8
 8005b26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3e:	461a      	mov	r2, r3
 8005b40:	2310      	movs	r3, #16
 8005b42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2340      	movs	r3, #64	; 0x40
 8005b5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d008      	beq.n	8005b7c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b76:	461a      	mov	r2, r3
 8005b78:	2302      	movs	r3, #2
 8005b7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fc1b 	bl	80063c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	3301      	adds	r3, #1
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	085b      	lsrs	r3, r3, #1
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f47f af49 	bne.w	8005a34 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f004 fb15 	bl	800a1d6 <USB_ReadInterrupts>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bb6:	d122      	bne.n	8005bfe <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bc6:	f023 0301 	bic.w	r3, r3, #1
 8005bca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d108      	bne.n	8005be8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005bde:	2100      	movs	r1, #0
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fe27 	bl	8006834 <HAL_PCDEx_LPM_Callback>
 8005be6:	e002      	b.n	8005bee <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f00c ff95 	bl	8012b18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695a      	ldr	r2, [r3, #20]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f004 fae7 	bl	800a1d6 <USB_ReadInterrupts>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c12:	d112      	bne.n	8005c3a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d102      	bne.n	8005c2a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f00c ff51 	bl	8012acc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695a      	ldr	r2, [r3, #20]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005c38:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f004 fac9 	bl	800a1d6 <USB_ReadInterrupts>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4e:	f040 80c7 	bne.w	8005de0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c60:	f023 0301 	bic.w	r3, r3, #1
 8005c64:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2110      	movs	r1, #16
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f003 fb63 	bl	8009338 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c72:	2300      	movs	r3, #0
 8005c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c76:	e056      	b.n	8005d26 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	461a      	mov	r2, r3
 8005c86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c8a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005caa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	461a      	mov	r2, r3
 8005cda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cde:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf0:	0151      	lsls	r1, r2, #5
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	440a      	add	r2, r1
 8005cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cfe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d1e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	3301      	adds	r3, #1
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d3a3      	bcc.n	8005c78 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d3e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005d42:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d016      	beq.n	8005d7a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d5c:	f043 030b 	orr.w	r3, r3, #11
 8005d60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d72:	f043 030b 	orr.w	r3, r3, #11
 8005d76:	6453      	str	r3, [r2, #68]	; 0x44
 8005d78:	e015      	b.n	8005da6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d8c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005d90:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da0:	f043 030b 	orr.w	r3, r3, #11
 8005da4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005db8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f004 fac8 	bl	800a360 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695a      	ldr	r2, [r3, #20]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f004 f9f6 	bl	800a1d6 <USB_ReadInterrupts>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df4:	d124      	bne.n	8005e40 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f004 fa8c 	bl	800a318 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f003 faf4 	bl	80093f2 <USB_GetDevSpeed>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681c      	ldr	r4, [r3, #0]
 8005e16:	f001 f957 	bl	80070c8 <HAL_RCC_GetHCLKFreq>
 8005e1a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	461a      	mov	r2, r3
 8005e24:	4620      	mov	r0, r4
 8005e26:	f003 f813 	bl	8008e50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f00c fe25 	bl	8012a7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	695a      	ldr	r2, [r3, #20]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005e3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f004 f9c6 	bl	800a1d6 <USB_ReadInterrupts>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d10a      	bne.n	8005e6a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f00c fe02 	bl	8012a5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f002 0208 	and.w	r2, r2, #8
 8005e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f004 f9b1 	bl	800a1d6 <USB_ReadInterrupts>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e7e:	d10f      	bne.n	8005ea0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f00c fe64 	bl	8012b58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695a      	ldr	r2, [r3, #20]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005e9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f004 f996 	bl	800a1d6 <USB_ReadInterrupts>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eb4:	d10f      	bne.n	8005ed6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f00c fe37 	bl	8012b34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f004 f97b 	bl	800a1d6 <USB_ReadInterrupts>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eea:	d10a      	bne.n	8005f02 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f00c fe45 	bl	8012b7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005f00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f004 f965 	bl	800a1d6 <USB_ReadInterrupts>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d115      	bne.n	8005f42 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f00c fe35 	bl	8012b98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6859      	ldr	r1, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	605a      	str	r2, [r3, #4]
 8005f3e:	e000      	b.n	8005f42 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005f40:	bf00      	nop
    }
  }
}
 8005f42:	3734      	adds	r7, #52	; 0x34
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd90      	pop	{r4, r7, pc}

08005f48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_PCD_SetAddress+0x1a>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e013      	b.n	8005f8a <HAL_PCD_SetAddress+0x42>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	78fa      	ldrb	r2, [r7, #3]
 8005f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	78fa      	ldrb	r2, [r7, #3]
 8005f78:	4611      	mov	r1, r2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f004 f8c3 	bl	800a106 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	4608      	mov	r0, r1
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	70fb      	strb	r3, [r7, #3]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	803b      	strh	r3, [r7, #0]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005fac:	2300      	movs	r3, #0
 8005fae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	da0f      	bge.n	8005fd8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	f003 020f 	and.w	r2, r3, #15
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	1a9b      	subs	r3, r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	3338      	adds	r3, #56	; 0x38
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	4413      	add	r3, r2
 8005fcc:	3304      	adds	r3, #4
 8005fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	705a      	strb	r2, [r3, #1]
 8005fd6:	e00f      	b.n	8005ff8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	f003 020f 	and.w	r2, r3, #15
 8005fde:	4613      	mov	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	4413      	add	r3, r2
 8005fee:	3304      	adds	r3, #4
 8005ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006004:	883a      	ldrh	r2, [r7, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	78ba      	ldrb	r2, [r7, #2]
 800600e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	785b      	ldrb	r3, [r3, #1]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d004      	beq.n	8006022 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006022:	78bb      	ldrb	r3, [r7, #2]
 8006024:	2b02      	cmp	r3, #2
 8006026:	d102      	bne.n	800602e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_PCD_EP_Open+0xaa>
 8006038:	2302      	movs	r3, #2
 800603a:	e00e      	b.n	800605a <HAL_PCD_EP_Open+0xc8>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68f9      	ldr	r1, [r7, #12]
 800604a:	4618      	mov	r0, r3
 800604c:	f003 f9f6 	bl	800943c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006058:	7afb      	ldrb	r3, [r7, #11]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	460b      	mov	r3, r1
 800606c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800606e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006072:	2b00      	cmp	r3, #0
 8006074:	da0f      	bge.n	8006096 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	f003 020f 	and.w	r2, r3, #15
 800607c:	4613      	mov	r3, r2
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	1a9b      	subs	r3, r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	3338      	adds	r3, #56	; 0x38
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	4413      	add	r3, r2
 800608a:	3304      	adds	r3, #4
 800608c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	705a      	strb	r2, [r3, #1]
 8006094:	e00f      	b.n	80060b6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	f003 020f 	and.w	r2, r3, #15
 800609c:	4613      	mov	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	4413      	add	r3, r2
 80060ac:	3304      	adds	r3, #4
 80060ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80060b6:	78fb      	ldrb	r3, [r7, #3]
 80060b8:	f003 030f 	and.w	r3, r3, #15
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_PCD_EP_Close+0x6e>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e00e      	b.n	80060ee <HAL_PCD_EP_Close+0x8c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68f9      	ldr	r1, [r7, #12]
 80060de:	4618      	mov	r0, r3
 80060e0:	f003 fa34 	bl	800954c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b086      	sub	sp, #24
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
 8006102:	460b      	mov	r3, r1
 8006104:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006106:	7afb      	ldrb	r3, [r7, #11]
 8006108:	f003 020f 	and.w	r2, r3, #15
 800610c:	4613      	mov	r3, r2
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	1a9b      	subs	r3, r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	3304      	adds	r3, #4
 800611e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2200      	movs	r2, #0
 8006130:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2200      	movs	r2, #0
 8006136:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006138:	7afb      	ldrb	r3, [r7, #11]
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	b2da      	uxtb	r2, r3
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d102      	bne.n	8006152 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006152:	7afb      	ldrb	r3, [r7, #11]
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	2b00      	cmp	r3, #0
 800615a:	d109      	bne.n	8006170 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	6979      	ldr	r1, [r7, #20]
 800616a:	f003 fd0f 	bl	8009b8c <USB_EP0StartXfer>
 800616e:	e008      	b.n	8006182 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6818      	ldr	r0, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	b2db      	uxtb	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	6979      	ldr	r1, [r7, #20]
 800617e:	f003 fac1 	bl	8009704 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	f003 020f 	and.w	r2, r3, #15
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80061ae:	681b      	ldr	r3, [r3, #0]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	607a      	str	r2, [r7, #4]
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	460b      	mov	r3, r1
 80061ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061cc:	7afb      	ldrb	r3, [r7, #11]
 80061ce:	f003 020f 	and.w	r2, r3, #15
 80061d2:	4613      	mov	r3, r2
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	1a9b      	subs	r3, r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	3338      	adds	r3, #56	; 0x38
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	3304      	adds	r3, #4
 80061e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2200      	movs	r2, #0
 80061f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2201      	movs	r2, #1
 80061fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061fc:	7afb      	ldrb	r3, [r7, #11]
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	b2da      	uxtb	r2, r3
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d102      	bne.n	8006216 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006216:	7afb      	ldrb	r3, [r7, #11]
 8006218:	f003 030f 	and.w	r3, r3, #15
 800621c:	2b00      	cmp	r3, #0
 800621e:	d109      	bne.n	8006234 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	6979      	ldr	r1, [r7, #20]
 800622e:	f003 fcad 	bl	8009b8c <USB_EP0StartXfer>
 8006232:	e008      	b.n	8006246 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6818      	ldr	r0, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	b2db      	uxtb	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	6979      	ldr	r1, [r7, #20]
 8006242:	f003 fa5f 	bl	8009704 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	f003 020f 	and.w	r2, r3, #15
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	429a      	cmp	r2, r3
 8006268:	d901      	bls.n	800626e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e050      	b.n	8006310 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800626e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006272:	2b00      	cmp	r3, #0
 8006274:	da0f      	bge.n	8006296 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006276:	78fb      	ldrb	r3, [r7, #3]
 8006278:	f003 020f 	and.w	r2, r3, #15
 800627c:	4613      	mov	r3, r2
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	1a9b      	subs	r3, r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	3338      	adds	r3, #56	; 0x38
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	4413      	add	r3, r2
 800628a:	3304      	adds	r3, #4
 800628c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2201      	movs	r2, #1
 8006292:	705a      	strb	r2, [r3, #1]
 8006294:	e00d      	b.n	80062b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006296:	78fa      	ldrb	r2, [r7, #3]
 8006298:	4613      	mov	r3, r2
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	4413      	add	r3, r2
 80062a8:	3304      	adds	r3, #4
 80062aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <HAL_PCD_EP_SetStall+0x82>
 80062ce:	2302      	movs	r3, #2
 80062d0:	e01e      	b.n	8006310 <HAL_PCD_EP_SetStall+0xc0>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f003 fe3c 	bl	8009f5e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	f003 030f 	and.w	r3, r3, #15
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	b2d9      	uxtb	r1, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006300:	461a      	mov	r2, r3
 8006302:	f004 f82d 	bl	800a360 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	f003 020f 	and.w	r2, r3, #15
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	429a      	cmp	r2, r3
 8006330:	d901      	bls.n	8006336 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e042      	b.n	80063bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006336:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800633a:	2b00      	cmp	r3, #0
 800633c:	da0f      	bge.n	800635e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	f003 020f 	and.w	r2, r3, #15
 8006344:	4613      	mov	r3, r2
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	1a9b      	subs	r3, r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	3338      	adds	r3, #56	; 0x38
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	4413      	add	r3, r2
 8006352:	3304      	adds	r3, #4
 8006354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2201      	movs	r2, #1
 800635a:	705a      	strb	r2, [r3, #1]
 800635c:	e00f      	b.n	800637e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	f003 020f 	and.w	r2, r3, #15
 8006364:	4613      	mov	r3, r2
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	1a9b      	subs	r3, r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	4413      	add	r3, r2
 8006374:	3304      	adds	r3, #4
 8006376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	b2da      	uxtb	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_PCD_EP_ClrStall+0x86>
 800639a:	2302      	movs	r3, #2
 800639c:	e00e      	b.n	80063bc <HAL_PCD_EP_ClrStall+0xa4>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68f9      	ldr	r1, [r7, #12]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f003 fe44 	bl	800a03a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08a      	sub	sp, #40	; 0x28
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	4613      	mov	r3, r2
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	1a9b      	subs	r3, r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	3338      	adds	r3, #56	; 0x38
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	4413      	add	r3, r2
 80063e8:	3304      	adds	r3, #4
 80063ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	699a      	ldr	r2, [r3, #24]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d901      	bls.n	80063fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e06c      	b.n	80064d6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	695a      	ldr	r2, [r3, #20]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	429a      	cmp	r2, r3
 8006410:	d902      	bls.n	8006418 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	3303      	adds	r3, #3
 800641c:	089b      	lsrs	r3, r3, #2
 800641e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006420:	e02b      	b.n	800647a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	695a      	ldr	r2, [r3, #20]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	429a      	cmp	r2, r3
 8006436:	d902      	bls.n	800643e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3303      	adds	r3, #3
 8006442:	089b      	lsrs	r3, r3, #2
 8006444:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	68d9      	ldr	r1, [r3, #12]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	b2da      	uxtb	r2, r3
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006456:	b2db      	uxtb	r3, r3
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	4603      	mov	r3, r0
 800645c:	6978      	ldr	r0, [r7, #20]
 800645e:	f003 fce8 	bl	8009e32 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	441a      	add	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	699a      	ldr	r2, [r3, #24]
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	441a      	add	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	b29b      	uxth	r3, r3
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	429a      	cmp	r2, r3
 800648e:	d809      	bhi.n	80064a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	699a      	ldr	r2, [r3, #24]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006498:	429a      	cmp	r2, r3
 800649a:	d203      	bcs.n	80064a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1be      	bne.n	8006422 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	695a      	ldr	r2, [r3, #20]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d811      	bhi.n	80064d4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	2201      	movs	r2, #1
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	43db      	mvns	r3, r3
 80064ca:	6939      	ldr	r1, [r7, #16]
 80064cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064d0:	4013      	ands	r3, r2
 80064d2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3720      	adds	r7, #32
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	333c      	adds	r3, #60	; 0x3c
 80064f8:	3304      	adds	r3, #4
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	2b01      	cmp	r3, #1
 8006514:	f040 80a0 	bne.w	8006658 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	2b00      	cmp	r3, #0
 8006520:	d015      	beq.n	800654e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4a72      	ldr	r2, [pc, #456]	; (80066f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8006526:	4293      	cmp	r3, r2
 8006528:	f240 80dd 	bls.w	80066e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 80d7 	beq.w	80066e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006544:	461a      	mov	r2, r3
 8006546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800654a:	6093      	str	r3, [r2, #8]
 800654c:	e0cb      	b.n	80066e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	d009      	beq.n	800656c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006564:	461a      	mov	r2, r3
 8006566:	2320      	movs	r3, #32
 8006568:	6093      	str	r3, [r2, #8]
 800656a:	e0bc      	b.n	80066e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006572:	2b00      	cmp	r3, #0
 8006574:	f040 80b7 	bne.w	80066e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4a5d      	ldr	r2, [pc, #372]	; (80066f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d90f      	bls.n	80065a0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	461a      	mov	r2, r3
 8006598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800659c:	6093      	str	r3, [r2, #8]
 800659e:	e0a2      	b.n	80066e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	4613      	mov	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	1a9b      	subs	r3, r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80065b2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	0159      	lsls	r1, r3, #5
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	440b      	add	r3, r1
 80065bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80065c6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	4613      	mov	r3, r2
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	1a9b      	subs	r3, r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4403      	add	r3, r0
 80065d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80065da:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80065ee:	6819      	ldr	r1, [r3, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	4613      	mov	r3, r2
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	1a9b      	subs	r3, r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4403      	add	r3, r0
 80065fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4419      	add	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	4613      	mov	r3, r2
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4403      	add	r3, r0
 8006614:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006618:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d114      	bne.n	800664a <PCD_EP_OutXfrComplete_int+0x16a>
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	4613      	mov	r3, r2
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	1a9b      	subs	r3, r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d108      	bne.n	800664a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006642:	461a      	mov	r2, r3
 8006644:	2101      	movs	r1, #1
 8006646:	f003 fe8b 	bl	800a360 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	b2db      	uxtb	r3, r3
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f00c f9cf 	bl	80129f4 <HAL_PCD_DataOutStageCallback>
 8006656:	e046      	b.n	80066e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4a26      	ldr	r2, [pc, #152]	; (80066f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d124      	bne.n	80066aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006676:	461a      	mov	r2, r3
 8006678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800667c:	6093      	str	r3, [r2, #8]
 800667e:	e032      	b.n	80066e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	d008      	beq.n	800669c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006696:	461a      	mov	r2, r3
 8006698:	2320      	movs	r3, #32
 800669a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f00c f9a6 	bl	80129f4 <HAL_PCD_DataOutStageCallback>
 80066a8:	e01d      	b.n	80066e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d114      	bne.n	80066da <PCD_EP_OutXfrComplete_int+0x1fa>
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	4613      	mov	r3, r2
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	1a9b      	subs	r3, r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d108      	bne.n	80066da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066d2:	461a      	mov	r2, r3
 80066d4:	2100      	movs	r1, #0
 80066d6:	f003 fe43 	bl	800a360 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f00c f987 	bl	80129f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	4f54300a 	.word	0x4f54300a
 80066f4:	4f54310a 	.word	0x4f54310a

080066f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	333c      	adds	r3, #60	; 0x3c
 8006710:	3304      	adds	r3, #4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4a15      	ldr	r2, [pc, #84]	; (8006780 <PCD_EP_OutSetupPacket_int+0x88>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d90e      	bls.n	800674c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006734:	2b00      	cmp	r3, #0
 8006736:	d009      	beq.n	800674c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006744:	461a      	mov	r2, r3
 8006746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800674a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f00c f93f 	bl	80129d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4a0a      	ldr	r2, [pc, #40]	; (8006780 <PCD_EP_OutSetupPacket_int+0x88>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d90c      	bls.n	8006774 <PCD_EP_OutSetupPacket_int+0x7c>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d108      	bne.n	8006774 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6818      	ldr	r0, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800676c:	461a      	mov	r2, r3
 800676e:	2101      	movs	r1, #1
 8006770:	f003 fdf6 	bl	800a360 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	4f54300a 	.word	0x4f54300a

08006784 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	70fb      	strb	r3, [r7, #3]
 8006790:	4613      	mov	r3, r2
 8006792:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d107      	bne.n	80067b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80067a2:	883b      	ldrh	r3, [r7, #0]
 80067a4:	0419      	lsls	r1, r3, #16
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	629a      	str	r2, [r3, #40]	; 0x28
 80067b0:	e028      	b.n	8006804 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b8:	0c1b      	lsrs	r3, r3, #16
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	4413      	add	r3, r2
 80067be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80067c0:	2300      	movs	r3, #0
 80067c2:	73fb      	strb	r3, [r7, #15]
 80067c4:	e00d      	b.n	80067e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
 80067cc:	3340      	adds	r3, #64	; 0x40
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	0c1b      	lsrs	r3, r3, #16
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	4413      	add	r3, r2
 80067da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	3301      	adds	r3, #1
 80067e0:	73fb      	strb	r3, [r7, #15]
 80067e2:	7bfa      	ldrb	r2, [r7, #15]
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	3b01      	subs	r3, #1
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d3ec      	bcc.n	80067c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80067ec:	883b      	ldrh	r3, [r7, #0]
 80067ee:	0418      	lsls	r0, r3, #16
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6819      	ldr	r1, [r3, #0]
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	4302      	orrs	r2, r0
 80067fc:	3340      	adds	r3, #64	; 0x40
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	460b      	mov	r3, r1
 800681c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	887a      	ldrh	r2, [r7, #2]
 8006824:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e264      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d075      	beq.n	8006956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800686a:	4ba3      	ldr	r3, [pc, #652]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 030c 	and.w	r3, r3, #12
 8006872:	2b04      	cmp	r3, #4
 8006874:	d00c      	beq.n	8006890 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006876:	4ba0      	ldr	r3, [pc, #640]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800687e:	2b08      	cmp	r3, #8
 8006880:	d112      	bne.n	80068a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006882:	4b9d      	ldr	r3, [pc, #628]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800688a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800688e:	d10b      	bne.n	80068a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006890:	4b99      	ldr	r3, [pc, #612]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d05b      	beq.n	8006954 <HAL_RCC_OscConfig+0x108>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d157      	bne.n	8006954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e23f      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b0:	d106      	bne.n	80068c0 <HAL_RCC_OscConfig+0x74>
 80068b2:	4b91      	ldr	r3, [pc, #580]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a90      	ldr	r2, [pc, #576]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 80068b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	e01d      	b.n	80068fc <HAL_RCC_OscConfig+0xb0>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068c8:	d10c      	bne.n	80068e4 <HAL_RCC_OscConfig+0x98>
 80068ca:	4b8b      	ldr	r3, [pc, #556]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a8a      	ldr	r2, [pc, #552]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 80068d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	4b88      	ldr	r3, [pc, #544]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a87      	ldr	r2, [pc, #540]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 80068dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	e00b      	b.n	80068fc <HAL_RCC_OscConfig+0xb0>
 80068e4:	4b84      	ldr	r3, [pc, #528]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a83      	ldr	r2, [pc, #524]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 80068ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	4b81      	ldr	r3, [pc, #516]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a80      	ldr	r2, [pc, #512]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 80068f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d013      	beq.n	800692c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006904:	f7fd f876 	bl	80039f4 <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800690c:	f7fd f872 	bl	80039f4 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b64      	cmp	r3, #100	; 0x64
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e204      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800691e:	4b76      	ldr	r3, [pc, #472]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0f0      	beq.n	800690c <HAL_RCC_OscConfig+0xc0>
 800692a:	e014      	b.n	8006956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800692c:	f7fd f862 	bl	80039f4 <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006934:	f7fd f85e 	bl	80039f4 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b64      	cmp	r3, #100	; 0x64
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e1f0      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006946:	4b6c      	ldr	r3, [pc, #432]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f0      	bne.n	8006934 <HAL_RCC_OscConfig+0xe8>
 8006952:	e000      	b.n	8006956 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d063      	beq.n	8006a2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006962:	4b65      	ldr	r3, [pc, #404]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f003 030c 	and.w	r3, r3, #12
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800696e:	4b62      	ldr	r3, [pc, #392]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006976:	2b08      	cmp	r3, #8
 8006978:	d11c      	bne.n	80069b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800697a:	4b5f      	ldr	r3, [pc, #380]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d116      	bne.n	80069b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006986:	4b5c      	ldr	r3, [pc, #368]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <HAL_RCC_OscConfig+0x152>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d001      	beq.n	800699e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e1c4      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800699e:	4b56      	ldr	r3, [pc, #344]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	4952      	ldr	r1, [pc, #328]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069b2:	e03a      	b.n	8006a2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d020      	beq.n	80069fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069bc:	4b4f      	ldr	r3, [pc, #316]	; (8006afc <HAL_RCC_OscConfig+0x2b0>)
 80069be:	2201      	movs	r2, #1
 80069c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c2:	f7fd f817 	bl	80039f4 <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069c8:	e008      	b.n	80069dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069ca:	f7fd f813 	bl	80039f4 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d901      	bls.n	80069dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e1a5      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069dc:	4b46      	ldr	r3, [pc, #280]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0f0      	beq.n	80069ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e8:	4b43      	ldr	r3, [pc, #268]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	4940      	ldr	r1, [pc, #256]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	600b      	str	r3, [r1, #0]
 80069fc:	e015      	b.n	8006a2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069fe:	4b3f      	ldr	r3, [pc, #252]	; (8006afc <HAL_RCC_OscConfig+0x2b0>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a04:	f7fc fff6 	bl	80039f4 <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a0c:	f7fc fff2 	bl	80039f4 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e184      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a1e:	4b36      	ldr	r3, [pc, #216]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1f0      	bne.n	8006a0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d030      	beq.n	8006a98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d016      	beq.n	8006a6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a3e:	4b30      	ldr	r3, [pc, #192]	; (8006b00 <HAL_RCC_OscConfig+0x2b4>)
 8006a40:	2201      	movs	r2, #1
 8006a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a44:	f7fc ffd6 	bl	80039f4 <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a4c:	f7fc ffd2 	bl	80039f4 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e164      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a5e:	4b26      	ldr	r3, [pc, #152]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 8006a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d0f0      	beq.n	8006a4c <HAL_RCC_OscConfig+0x200>
 8006a6a:	e015      	b.n	8006a98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a6c:	4b24      	ldr	r3, [pc, #144]	; (8006b00 <HAL_RCC_OscConfig+0x2b4>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a72:	f7fc ffbf 	bl	80039f4 <HAL_GetTick>
 8006a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a78:	e008      	b.n	8006a8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a7a:	f7fc ffbb 	bl	80039f4 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e14d      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a8c:	4b1a      	ldr	r3, [pc, #104]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 8006a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1f0      	bne.n	8006a7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0304 	and.w	r3, r3, #4
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 80a0 	beq.w	8006be6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aaa:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10f      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60bb      	str	r3, [r7, #8]
 8006aba:	4b0f      	ldr	r3, [pc, #60]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	4a0e      	ldr	r2, [pc, #56]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 8006ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <HAL_RCC_OscConfig+0x2ac>)
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ace:	60bb      	str	r3, [r7, #8]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <HAL_RCC_OscConfig+0x2b8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d121      	bne.n	8006b26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ae2:	4b08      	ldr	r3, [pc, #32]	; (8006b04 <HAL_RCC_OscConfig+0x2b8>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a07      	ldr	r2, [pc, #28]	; (8006b04 <HAL_RCC_OscConfig+0x2b8>)
 8006ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aee:	f7fc ff81 	bl	80039f4 <HAL_GetTick>
 8006af2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006af4:	e011      	b.n	8006b1a <HAL_RCC_OscConfig+0x2ce>
 8006af6:	bf00      	nop
 8006af8:	40023800 	.word	0x40023800
 8006afc:	42470000 	.word	0x42470000
 8006b00:	42470e80 	.word	0x42470e80
 8006b04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b08:	f7fc ff74 	bl	80039f4 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e106      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b1a:	4b85      	ldr	r3, [pc, #532]	; (8006d30 <HAL_RCC_OscConfig+0x4e4>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0f0      	beq.n	8006b08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d106      	bne.n	8006b3c <HAL_RCC_OscConfig+0x2f0>
 8006b2e:	4b81      	ldr	r3, [pc, #516]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b32:	4a80      	ldr	r2, [pc, #512]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006b34:	f043 0301 	orr.w	r3, r3, #1
 8006b38:	6713      	str	r3, [r2, #112]	; 0x70
 8006b3a:	e01c      	b.n	8006b76 <HAL_RCC_OscConfig+0x32a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	2b05      	cmp	r3, #5
 8006b42:	d10c      	bne.n	8006b5e <HAL_RCC_OscConfig+0x312>
 8006b44:	4b7b      	ldr	r3, [pc, #492]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b48:	4a7a      	ldr	r2, [pc, #488]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006b4a:	f043 0304 	orr.w	r3, r3, #4
 8006b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b50:	4b78      	ldr	r3, [pc, #480]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b54:	4a77      	ldr	r2, [pc, #476]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006b56:	f043 0301 	orr.w	r3, r3, #1
 8006b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b5c:	e00b      	b.n	8006b76 <HAL_RCC_OscConfig+0x32a>
 8006b5e:	4b75      	ldr	r3, [pc, #468]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b62:	4a74      	ldr	r2, [pc, #464]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006b64:	f023 0301 	bic.w	r3, r3, #1
 8006b68:	6713      	str	r3, [r2, #112]	; 0x70
 8006b6a:	4b72      	ldr	r3, [pc, #456]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6e:	4a71      	ldr	r2, [pc, #452]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006b70:	f023 0304 	bic.w	r3, r3, #4
 8006b74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d015      	beq.n	8006baa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7e:	f7fc ff39 	bl	80039f4 <HAL_GetTick>
 8006b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b84:	e00a      	b.n	8006b9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b86:	f7fc ff35 	bl	80039f4 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e0c5      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b9c:	4b65      	ldr	r3, [pc, #404]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0ee      	beq.n	8006b86 <HAL_RCC_OscConfig+0x33a>
 8006ba8:	e014      	b.n	8006bd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006baa:	f7fc ff23 	bl	80039f4 <HAL_GetTick>
 8006bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bb0:	e00a      	b.n	8006bc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bb2:	f7fc ff1f 	bl	80039f4 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e0af      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bc8:	4b5a      	ldr	r3, [pc, #360]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1ee      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d105      	bne.n	8006be6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bda:	4b56      	ldr	r3, [pc, #344]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	4a55      	ldr	r2, [pc, #340]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006be4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 809b 	beq.w	8006d26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bf0:	4b50      	ldr	r3, [pc, #320]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 030c 	and.w	r3, r3, #12
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d05c      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d141      	bne.n	8006c88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c04:	4b4c      	ldr	r3, [pc, #304]	; (8006d38 <HAL_RCC_OscConfig+0x4ec>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c0a:	f7fc fef3 	bl	80039f4 <HAL_GetTick>
 8006c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c10:	e008      	b.n	8006c24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c12:	f7fc feef 	bl	80039f4 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e081      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c24:	4b43      	ldr	r3, [pc, #268]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1f0      	bne.n	8006c12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	019b      	lsls	r3, r3, #6
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	041b      	lsls	r3, r3, #16
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c52:	061b      	lsls	r3, r3, #24
 8006c54:	4937      	ldr	r1, [pc, #220]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c5a:	4b37      	ldr	r3, [pc, #220]	; (8006d38 <HAL_RCC_OscConfig+0x4ec>)
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c60:	f7fc fec8 	bl	80039f4 <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c68:	f7fc fec4 	bl	80039f4 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e056      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c7a:	4b2e      	ldr	r3, [pc, #184]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0f0      	beq.n	8006c68 <HAL_RCC_OscConfig+0x41c>
 8006c86:	e04e      	b.n	8006d26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c88:	4b2b      	ldr	r3, [pc, #172]	; (8006d38 <HAL_RCC_OscConfig+0x4ec>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c8e:	f7fc feb1 	bl	80039f4 <HAL_GetTick>
 8006c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c94:	e008      	b.n	8006ca8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c96:	f7fc fead 	bl	80039f4 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e03f      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ca8:	4b22      	ldr	r3, [pc, #136]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1f0      	bne.n	8006c96 <HAL_RCC_OscConfig+0x44a>
 8006cb4:	e037      	b.n	8006d26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d101      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e032      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006cc2:	4b1c      	ldr	r3, [pc, #112]	; (8006d34 <HAL_RCC_OscConfig+0x4e8>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d028      	beq.n	8006d22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d121      	bne.n	8006d22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d11a      	bne.n	8006d22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cf8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d111      	bne.n	8006d22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d08:	085b      	lsrs	r3, r3, #1
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d107      	bne.n	8006d22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d001      	beq.n	8006d26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e000      	b.n	8006d28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40007000 	.word	0x40007000
 8006d34:	40023800 	.word	0x40023800
 8006d38:	42470060 	.word	0x42470060

08006d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e0cc      	b.n	8006eea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d50:	4b68      	ldr	r3, [pc, #416]	; (8006ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 030f 	and.w	r3, r3, #15
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d90c      	bls.n	8006d78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d5e:	4b65      	ldr	r3, [pc, #404]	; (8006ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d66:	4b63      	ldr	r3, [pc, #396]	; (8006ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 030f 	and.w	r3, r3, #15
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d001      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e0b8      	b.n	8006eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d020      	beq.n	8006dc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d005      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d90:	4b59      	ldr	r3, [pc, #356]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	4a58      	ldr	r2, [pc, #352]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0308 	and.w	r3, r3, #8
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d005      	beq.n	8006db4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006da8:	4b53      	ldr	r3, [pc, #332]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	4a52      	ldr	r2, [pc, #328]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006db2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006db4:	4b50      	ldr	r3, [pc, #320]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	494d      	ldr	r1, [pc, #308]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d044      	beq.n	8006e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d107      	bne.n	8006dea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dda:	4b47      	ldr	r3, [pc, #284]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d119      	bne.n	8006e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e07f      	b.n	8006eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d003      	beq.n	8006dfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d107      	bne.n	8006e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dfa:	4b3f      	ldr	r3, [pc, #252]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d109      	bne.n	8006e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e06f      	b.n	8006eea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e0a:	4b3b      	ldr	r3, [pc, #236]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e067      	b.n	8006eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e1a:	4b37      	ldr	r3, [pc, #220]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f023 0203 	bic.w	r2, r3, #3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	4934      	ldr	r1, [pc, #208]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e2c:	f7fc fde2 	bl	80039f4 <HAL_GetTick>
 8006e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e32:	e00a      	b.n	8006e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e34:	f7fc fdde 	bl	80039f4 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e04f      	b.n	8006eea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e4a:	4b2b      	ldr	r3, [pc, #172]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 020c 	and.w	r2, r3, #12
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d1eb      	bne.n	8006e34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e5c:	4b25      	ldr	r3, [pc, #148]	; (8006ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d20c      	bcs.n	8006e84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e6a:	4b22      	ldr	r3, [pc, #136]	; (8006ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e72:	4b20      	ldr	r3, [pc, #128]	; (8006ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d001      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e032      	b.n	8006eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d008      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e90:	4b19      	ldr	r3, [pc, #100]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	4916      	ldr	r1, [pc, #88]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d009      	beq.n	8006ec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006eae:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	490e      	ldr	r1, [pc, #56]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ec2:	f000 f821 	bl	8006f08 <HAL_RCC_GetSysClockFreq>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	4b0b      	ldr	r3, [pc, #44]	; (8006ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	091b      	lsrs	r3, r3, #4
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	490a      	ldr	r1, [pc, #40]	; (8006efc <HAL_RCC_ClockConfig+0x1c0>)
 8006ed4:	5ccb      	ldrb	r3, [r1, r3]
 8006ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eda:	4a09      	ldr	r2, [pc, #36]	; (8006f00 <HAL_RCC_ClockConfig+0x1c4>)
 8006edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ede:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <HAL_RCC_ClockConfig+0x1c8>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fc fbb8 	bl	8003658 <HAL_InitTick>

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	40023c00 	.word	0x40023c00
 8006ef8:	40023800 	.word	0x40023800
 8006efc:	080185ac 	.word	0x080185ac
 8006f00:	20000000 	.word	0x20000000
 8006f04:	20000004 	.word	0x20000004

08006f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	607b      	str	r3, [r7, #4]
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f20:	4b67      	ldr	r3, [pc, #412]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 030c 	and.w	r3, r3, #12
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d00d      	beq.n	8006f48 <HAL_RCC_GetSysClockFreq+0x40>
 8006f2c:	2b08      	cmp	r3, #8
 8006f2e:	f200 80bd 	bhi.w	80070ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <HAL_RCC_GetSysClockFreq+0x34>
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d003      	beq.n	8006f42 <HAL_RCC_GetSysClockFreq+0x3a>
 8006f3a:	e0b7      	b.n	80070ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f3c:	4b61      	ldr	r3, [pc, #388]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006f3e:	60bb      	str	r3, [r7, #8]
       break;
 8006f40:	e0b7      	b.n	80070b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f42:	4b60      	ldr	r3, [pc, #384]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006f44:	60bb      	str	r3, [r7, #8]
      break;
 8006f46:	e0b4      	b.n	80070b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f48:	4b5d      	ldr	r3, [pc, #372]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f52:	4b5b      	ldr	r3, [pc, #364]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d04d      	beq.n	8006ffa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f5e:	4b58      	ldr	r3, [pc, #352]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	099b      	lsrs	r3, r3, #6
 8006f64:	461a      	mov	r2, r3
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f6e:	f04f 0100 	mov.w	r1, #0
 8006f72:	ea02 0800 	and.w	r8, r2, r0
 8006f76:	ea03 0901 	and.w	r9, r3, r1
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	f04f 0200 	mov.w	r2, #0
 8006f82:	f04f 0300 	mov.w	r3, #0
 8006f86:	014b      	lsls	r3, r1, #5
 8006f88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f8c:	0142      	lsls	r2, r0, #5
 8006f8e:	4610      	mov	r0, r2
 8006f90:	4619      	mov	r1, r3
 8006f92:	ebb0 0008 	subs.w	r0, r0, r8
 8006f96:	eb61 0109 	sbc.w	r1, r1, r9
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	f04f 0300 	mov.w	r3, #0
 8006fa2:	018b      	lsls	r3, r1, #6
 8006fa4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006fa8:	0182      	lsls	r2, r0, #6
 8006faa:	1a12      	subs	r2, r2, r0
 8006fac:	eb63 0301 	sbc.w	r3, r3, r1
 8006fb0:	f04f 0000 	mov.w	r0, #0
 8006fb4:	f04f 0100 	mov.w	r1, #0
 8006fb8:	00d9      	lsls	r1, r3, #3
 8006fba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fbe:	00d0      	lsls	r0, r2, #3
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	eb12 0208 	adds.w	r2, r2, r8
 8006fc8:	eb43 0309 	adc.w	r3, r3, r9
 8006fcc:	f04f 0000 	mov.w	r0, #0
 8006fd0:	f04f 0100 	mov.w	r1, #0
 8006fd4:	0299      	lsls	r1, r3, #10
 8006fd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006fda:	0290      	lsls	r0, r2, #10
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f04f 0300 	mov.w	r3, #0
 8006fec:	f7f9 fe5c 	bl	8000ca8 <__aeabi_uldivmod>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	e04a      	b.n	8007090 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ffa:	4b31      	ldr	r3, [pc, #196]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	099b      	lsrs	r3, r3, #6
 8007000:	461a      	mov	r2, r3
 8007002:	f04f 0300 	mov.w	r3, #0
 8007006:	f240 10ff 	movw	r0, #511	; 0x1ff
 800700a:	f04f 0100 	mov.w	r1, #0
 800700e:	ea02 0400 	and.w	r4, r2, r0
 8007012:	ea03 0501 	and.w	r5, r3, r1
 8007016:	4620      	mov	r0, r4
 8007018:	4629      	mov	r1, r5
 800701a:	f04f 0200 	mov.w	r2, #0
 800701e:	f04f 0300 	mov.w	r3, #0
 8007022:	014b      	lsls	r3, r1, #5
 8007024:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007028:	0142      	lsls	r2, r0, #5
 800702a:	4610      	mov	r0, r2
 800702c:	4619      	mov	r1, r3
 800702e:	1b00      	subs	r0, r0, r4
 8007030:	eb61 0105 	sbc.w	r1, r1, r5
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	018b      	lsls	r3, r1, #6
 800703e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007042:	0182      	lsls	r2, r0, #6
 8007044:	1a12      	subs	r2, r2, r0
 8007046:	eb63 0301 	sbc.w	r3, r3, r1
 800704a:	f04f 0000 	mov.w	r0, #0
 800704e:	f04f 0100 	mov.w	r1, #0
 8007052:	00d9      	lsls	r1, r3, #3
 8007054:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007058:	00d0      	lsls	r0, r2, #3
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	1912      	adds	r2, r2, r4
 8007060:	eb45 0303 	adc.w	r3, r5, r3
 8007064:	f04f 0000 	mov.w	r0, #0
 8007068:	f04f 0100 	mov.w	r1, #0
 800706c:	0299      	lsls	r1, r3, #10
 800706e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007072:	0290      	lsls	r0, r2, #10
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4610      	mov	r0, r2
 800707a:	4619      	mov	r1, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	461a      	mov	r2, r3
 8007080:	f04f 0300 	mov.w	r3, #0
 8007084:	f7f9 fe10 	bl	8000ca8 <__aeabi_uldivmod>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	4613      	mov	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007090:	4b0b      	ldr	r3, [pc, #44]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	0c1b      	lsrs	r3, r3, #16
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	3301      	adds	r3, #1
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a8:	60bb      	str	r3, [r7, #8]
      break;
 80070aa:	e002      	b.n	80070b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80070ae:	60bb      	str	r3, [r7, #8]
      break;
 80070b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070b2:	68bb      	ldr	r3, [r7, #8]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80070be:	bf00      	nop
 80070c0:	40023800 	.word	0x40023800
 80070c4:	00f42400 	.word	0x00f42400

080070c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070cc:	4b03      	ldr	r3, [pc, #12]	; (80070dc <HAL_RCC_GetHCLKFreq+0x14>)
 80070ce:	681b      	ldr	r3, [r3, #0]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	20000000 	.word	0x20000000

080070e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070e4:	f7ff fff0 	bl	80070c8 <HAL_RCC_GetHCLKFreq>
 80070e8:	4602      	mov	r2, r0
 80070ea:	4b05      	ldr	r3, [pc, #20]	; (8007100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	0a9b      	lsrs	r3, r3, #10
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	4903      	ldr	r1, [pc, #12]	; (8007104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070f6:	5ccb      	ldrb	r3, [r1, r3]
 80070f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40023800 	.word	0x40023800
 8007104:	080185bc 	.word	0x080185bc

08007108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800710c:	f7ff ffdc 	bl	80070c8 <HAL_RCC_GetHCLKFreq>
 8007110:	4602      	mov	r2, r0
 8007112:	4b05      	ldr	r3, [pc, #20]	; (8007128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	0b5b      	lsrs	r3, r3, #13
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	4903      	ldr	r1, [pc, #12]	; (800712c <HAL_RCC_GetPCLK2Freq+0x24>)
 800711e:	5ccb      	ldrb	r3, [r1, r3]
 8007120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007124:	4618      	mov	r0, r3
 8007126:	bd80      	pop	{r7, pc}
 8007128:	40023800 	.word	0x40023800
 800712c:	080185bc 	.word	0x080185bc

08007130 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	220f      	movs	r2, #15
 800713e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007140:	4b12      	ldr	r3, [pc, #72]	; (800718c <HAL_RCC_GetClockConfig+0x5c>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 0203 	and.w	r2, r3, #3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800714c:	4b0f      	ldr	r3, [pc, #60]	; (800718c <HAL_RCC_GetClockConfig+0x5c>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007158:	4b0c      	ldr	r3, [pc, #48]	; (800718c <HAL_RCC_GetClockConfig+0x5c>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007164:	4b09      	ldr	r3, [pc, #36]	; (800718c <HAL_RCC_GetClockConfig+0x5c>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	08db      	lsrs	r3, r3, #3
 800716a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007172:	4b07      	ldr	r3, [pc, #28]	; (8007190 <HAL_RCC_GetClockConfig+0x60>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 020f 	and.w	r2, r3, #15
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	601a      	str	r2, [r3, #0]
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40023800 	.word	0x40023800
 8007190:	40023c00 	.word	0x40023c00

08007194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e07b      	b.n	800729e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d108      	bne.n	80071c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071b6:	d009      	beq.n	80071cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	61da      	str	r2, [r3, #28]
 80071be:	e005      	b.n	80071cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d106      	bne.n	80071ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7fc f8da 	bl	80033a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007202:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007214:	431a      	orrs	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	431a      	orrs	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800723c:	431a      	orrs	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007246:	431a      	orrs	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007250:	ea42 0103 	orr.w	r1, r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	0c1b      	lsrs	r3, r3, #16
 800726a:	f003 0104 	and.w	r1, r3, #4
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	f003 0210 	and.w	r2, r3, #16
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69da      	ldr	r2, [r3, #28]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800728c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b08c      	sub	sp, #48	; 0x30
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	607a      	str	r2, [r7, #4]
 80072b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072b4:	2301      	movs	r3, #1
 80072b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d101      	bne.n	80072cc <HAL_SPI_TransmitReceive+0x26>
 80072c8:	2302      	movs	r3, #2
 80072ca:	e18a      	b.n	80075e2 <HAL_SPI_TransmitReceive+0x33c>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072d4:	f7fc fb8e 	bl	80039f4 <HAL_GetTick>
 80072d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80072ea:	887b      	ldrh	r3, [r7, #2]
 80072ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d00f      	beq.n	8007316 <HAL_SPI_TransmitReceive+0x70>
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072fc:	d107      	bne.n	800730e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d103      	bne.n	800730e <HAL_SPI_TransmitReceive+0x68>
 8007306:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800730a:	2b04      	cmp	r3, #4
 800730c:	d003      	beq.n	8007316 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800730e:	2302      	movs	r3, #2
 8007310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007314:	e15b      	b.n	80075ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <HAL_SPI_TransmitReceive+0x82>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <HAL_SPI_TransmitReceive+0x82>
 8007322:	887b      	ldrh	r3, [r7, #2]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d103      	bne.n	8007330 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800732e:	e14e      	b.n	80075ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b04      	cmp	r3, #4
 800733a:	d003      	beq.n	8007344 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2205      	movs	r2, #5
 8007340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	887a      	ldrh	r2, [r7, #2]
 8007354:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	887a      	ldrh	r2, [r7, #2]
 800735a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	887a      	ldrh	r2, [r7, #2]
 8007366:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	887a      	ldrh	r2, [r7, #2]
 800736c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007384:	2b40      	cmp	r3, #64	; 0x40
 8007386:	d007      	beq.n	8007398 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007396:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073a0:	d178      	bne.n	8007494 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <HAL_SPI_TransmitReceive+0x10a>
 80073aa:	8b7b      	ldrh	r3, [r7, #26]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d166      	bne.n	800747e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b4:	881a      	ldrh	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c0:	1c9a      	adds	r2, r3, #2
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	3b01      	subs	r3, #1
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073d4:	e053      	b.n	800747e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d11b      	bne.n	800741c <HAL_SPI_TransmitReceive+0x176>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d016      	beq.n	800741c <HAL_SPI_TransmitReceive+0x176>
 80073ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d113      	bne.n	800741c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f8:	881a      	ldrh	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007404:	1c9a      	adds	r2, r3, #2
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800740e:	b29b      	uxth	r3, r3
 8007410:	3b01      	subs	r3, #1
 8007412:	b29a      	uxth	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b01      	cmp	r3, #1
 8007428:	d119      	bne.n	800745e <HAL_SPI_TransmitReceive+0x1b8>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800742e:	b29b      	uxth	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d014      	beq.n	800745e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743e:	b292      	uxth	r2, r2
 8007440:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007446:	1c9a      	adds	r2, r3, #2
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	b29a      	uxth	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800745a:	2301      	movs	r3, #1
 800745c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800745e:	f7fc fac9 	bl	80039f4 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800746a:	429a      	cmp	r2, r3
 800746c:	d807      	bhi.n	800747e <HAL_SPI_TransmitReceive+0x1d8>
 800746e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007474:	d003      	beq.n	800747e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800747c:	e0a7      	b.n	80075ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007482:	b29b      	uxth	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1a6      	bne.n	80073d6 <HAL_SPI_TransmitReceive+0x130>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1a1      	bne.n	80073d6 <HAL_SPI_TransmitReceive+0x130>
 8007492:	e07c      	b.n	800758e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <HAL_SPI_TransmitReceive+0x1fc>
 800749c:	8b7b      	ldrh	r3, [r7, #26]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d16b      	bne.n	800757a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	330c      	adds	r3, #12
 80074ac:	7812      	ldrb	r2, [r2, #0]
 80074ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074be:	b29b      	uxth	r3, r3
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074c8:	e057      	b.n	800757a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d11c      	bne.n	8007512 <HAL_SPI_TransmitReceive+0x26c>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074dc:	b29b      	uxth	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d017      	beq.n	8007512 <HAL_SPI_TransmitReceive+0x26c>
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d114      	bne.n	8007512 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	330c      	adds	r3, #12
 80074f2:	7812      	ldrb	r2, [r2, #0]
 80074f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b01      	subs	r3, #1
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b01      	cmp	r3, #1
 800751e:	d119      	bne.n	8007554 <HAL_SPI_TransmitReceive+0x2ae>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d014      	beq.n	8007554 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007546:	b29b      	uxth	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007550:	2301      	movs	r3, #1
 8007552:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007554:	f7fc fa4e 	bl	80039f4 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007560:	429a      	cmp	r2, r3
 8007562:	d803      	bhi.n	800756c <HAL_SPI_TransmitReceive+0x2c6>
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800756a:	d102      	bne.n	8007572 <HAL_SPI_TransmitReceive+0x2cc>
 800756c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756e:	2b00      	cmp	r3, #0
 8007570:	d103      	bne.n	800757a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007578:	e029      	b.n	80075ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757e:	b29b      	uxth	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1a2      	bne.n	80074ca <HAL_SPI_TransmitReceive+0x224>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d19d      	bne.n	80074ca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800758e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007590:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 f8b2 	bl	80076fc <SPI_EndRxTxTransaction>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d006      	beq.n	80075ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2220      	movs	r2, #32
 80075a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80075aa:	e010      	b.n	80075ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10b      	bne.n	80075cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075b4:	2300      	movs	r3, #0
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	617b      	str	r3, [r7, #20]
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	e000      	b.n	80075ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80075cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80075de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3730      	adds	r7, #48	; 0x30
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b088      	sub	sp, #32
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	603b      	str	r3, [r7, #0]
 80075f8:	4613      	mov	r3, r2
 80075fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075fc:	f7fc f9fa 	bl	80039f4 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	4413      	add	r3, r2
 800760a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800760c:	f7fc f9f2 	bl	80039f4 <HAL_GetTick>
 8007610:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007612:	4b39      	ldr	r3, [pc, #228]	; (80076f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	015b      	lsls	r3, r3, #5
 8007618:	0d1b      	lsrs	r3, r3, #20
 800761a:	69fa      	ldr	r2, [r7, #28]
 800761c:	fb02 f303 	mul.w	r3, r2, r3
 8007620:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007622:	e054      	b.n	80076ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800762a:	d050      	beq.n	80076ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800762c:	f7fc f9e2 	bl	80039f4 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	429a      	cmp	r2, r3
 800763a:	d902      	bls.n	8007642 <SPI_WaitFlagStateUntilTimeout+0x56>
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d13d      	bne.n	80076be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007650:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800765a:	d111      	bne.n	8007680 <SPI_WaitFlagStateUntilTimeout+0x94>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007664:	d004      	beq.n	8007670 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800766e:	d107      	bne.n	8007680 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800767e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007688:	d10f      	bne.n	80076aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e017      	b.n	80076ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4013      	ands	r3, r2
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	429a      	cmp	r2, r3
 80076dc:	bf0c      	ite	eq
 80076de:	2301      	moveq	r3, #1
 80076e0:	2300      	movne	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	79fb      	ldrb	r3, [r7, #7]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d19b      	bne.n	8007624 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3720      	adds	r7, #32
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20000000 	.word	0x20000000

080076fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b088      	sub	sp, #32
 8007700:	af02      	add	r7, sp, #8
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007708:	4b1b      	ldr	r3, [pc, #108]	; (8007778 <SPI_EndRxTxTransaction+0x7c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1b      	ldr	r2, [pc, #108]	; (800777c <SPI_EndRxTxTransaction+0x80>)
 800770e:	fba2 2303 	umull	r2, r3, r2, r3
 8007712:	0d5b      	lsrs	r3, r3, #21
 8007714:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007718:	fb02 f303 	mul.w	r3, r2, r3
 800771c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007726:	d112      	bne.n	800774e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2200      	movs	r2, #0
 8007730:	2180      	movs	r1, #128	; 0x80
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7ff ff5a 	bl	80075ec <SPI_WaitFlagStateUntilTimeout>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d016      	beq.n	800776c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007742:	f043 0220 	orr.w	r2, r3, #32
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e00f      	b.n	800776e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00a      	beq.n	800776a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	3b01      	subs	r3, #1
 8007758:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007764:	2b80      	cmp	r3, #128	; 0x80
 8007766:	d0f2      	beq.n	800774e <SPI_EndRxTxTransaction+0x52>
 8007768:	e000      	b.n	800776c <SPI_EndRxTxTransaction+0x70>
        break;
 800776a:	bf00      	nop
  }

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3718      	adds	r7, #24
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20000000 	.word	0x20000000
 800777c:	165e9f81 	.word	0x165e9f81

08007780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e041      	b.n	8007816 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d106      	bne.n	80077ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7fb fe7a 	bl	80034a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4619      	mov	r1, r3
 80077be:	4610      	mov	r0, r2
 80077c0:	f000 fbb2 	bl	8007f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b01      	cmp	r3, #1
 8007832:	d001      	beq.n	8007838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e04e      	b.n	80078d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f042 0201 	orr.w	r2, r2, #1
 800784e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a23      	ldr	r2, [pc, #140]	; (80078e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d022      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007862:	d01d      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a1f      	ldr	r2, [pc, #124]	; (80078e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d018      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a1e      	ldr	r2, [pc, #120]	; (80078ec <HAL_TIM_Base_Start_IT+0xcc>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d013      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1c      	ldr	r2, [pc, #112]	; (80078f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00e      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1b      	ldr	r2, [pc, #108]	; (80078f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d009      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a19      	ldr	r2, [pc, #100]	; (80078f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d004      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a18      	ldr	r2, [pc, #96]	; (80078fc <HAL_TIM_Base_Start_IT+0xdc>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d111      	bne.n	80078c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b06      	cmp	r3, #6
 80078b0:	d010      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0201 	orr.w	r2, r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c2:	e007      	b.n	80078d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40010000 	.word	0x40010000
 80078e8:	40000400 	.word	0x40000400
 80078ec:	40000800 	.word	0x40000800
 80078f0:	40000c00 	.word	0x40000c00
 80078f4:	40010400 	.word	0x40010400
 80078f8:	40014000 	.word	0x40014000
 80078fc:	40001800 	.word	0x40001800

08007900 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e041      	b.n	8007996 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f839 	bl	800799e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3304      	adds	r3, #4
 800793c:	4619      	mov	r1, r3
 800793e:	4610      	mov	r0, r2
 8007940:	f000 faf2 	bl	8007f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d122      	bne.n	8007a0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d11b      	bne.n	8007a0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f06f 0202 	mvn.w	r2, #2
 80079de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	f003 0303 	and.w	r3, r3, #3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fa78 	bl	8007eea <HAL_TIM_IC_CaptureCallback>
 80079fa:	e005      	b.n	8007a08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fa6a 	bl	8007ed6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fa7b 	bl	8007efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d122      	bne.n	8007a62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	f003 0304 	and.w	r3, r3, #4
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d11b      	bne.n	8007a62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f06f 0204 	mvn.w	r2, #4
 8007a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fa4e 	bl	8007eea <HAL_TIM_IC_CaptureCallback>
 8007a4e:	e005      	b.n	8007a5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fa40 	bl	8007ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fa51 	bl	8007efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	f003 0308 	and.w	r3, r3, #8
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d122      	bne.n	8007ab6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f003 0308 	and.w	r3, r3, #8
 8007a7a:	2b08      	cmp	r3, #8
 8007a7c:	d11b      	bne.n	8007ab6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f06f 0208 	mvn.w	r2, #8
 8007a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	f003 0303 	and.w	r3, r3, #3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fa24 	bl	8007eea <HAL_TIM_IC_CaptureCallback>
 8007aa2:	e005      	b.n	8007ab0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fa16 	bl	8007ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa27 	bl	8007efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	f003 0310 	and.w	r3, r3, #16
 8007ac0:	2b10      	cmp	r3, #16
 8007ac2:	d122      	bne.n	8007b0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f003 0310 	and.w	r3, r3, #16
 8007ace:	2b10      	cmp	r3, #16
 8007ad0:	d11b      	bne.n	8007b0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f06f 0210 	mvn.w	r2, #16
 8007ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2208      	movs	r2, #8
 8007ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d003      	beq.n	8007af8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f9fa 	bl	8007eea <HAL_TIM_IC_CaptureCallback>
 8007af6:	e005      	b.n	8007b04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f9ec 	bl	8007ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f9fd 	bl	8007efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d10e      	bne.n	8007b36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d107      	bne.n	8007b36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f06f 0201 	mvn.w	r2, #1
 8007b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7fb f8f9 	bl	8002d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b40:	2b80      	cmp	r3, #128	; 0x80
 8007b42:	d10e      	bne.n	8007b62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4e:	2b80      	cmp	r3, #128	; 0x80
 8007b50:	d107      	bne.n	8007b62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fd53 	bl	8008608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6c:	2b40      	cmp	r3, #64	; 0x40
 8007b6e:	d10e      	bne.n	8007b8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7a:	2b40      	cmp	r3, #64	; 0x40
 8007b7c:	d107      	bne.n	8007b8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f9c2 	bl	8007f12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	f003 0320 	and.w	r3, r3, #32
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	d10e      	bne.n	8007bba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	d107      	bne.n	8007bba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f06f 0220 	mvn.w	r2, #32
 8007bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fd1d 	bl	80085f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bba:	bf00      	nop
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
	...

08007bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d101      	bne.n	8007be2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bde:	2302      	movs	r3, #2
 8007be0:	e0ae      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b0c      	cmp	r3, #12
 8007bee:	f200 809f 	bhi.w	8007d30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007bf2:	a201      	add	r2, pc, #4	; (adr r2, 8007bf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf8:	08007c2d 	.word	0x08007c2d
 8007bfc:	08007d31 	.word	0x08007d31
 8007c00:	08007d31 	.word	0x08007d31
 8007c04:	08007d31 	.word	0x08007d31
 8007c08:	08007c6d 	.word	0x08007c6d
 8007c0c:	08007d31 	.word	0x08007d31
 8007c10:	08007d31 	.word	0x08007d31
 8007c14:	08007d31 	.word	0x08007d31
 8007c18:	08007caf 	.word	0x08007caf
 8007c1c:	08007d31 	.word	0x08007d31
 8007c20:	08007d31 	.word	0x08007d31
 8007c24:	08007d31 	.word	0x08007d31
 8007c28:	08007cef 	.word	0x08007cef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68b9      	ldr	r1, [r7, #8]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fa18 	bl	8008068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	699a      	ldr	r2, [r3, #24]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0208 	orr.w	r2, r2, #8
 8007c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699a      	ldr	r2, [r3, #24]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 0204 	bic.w	r2, r2, #4
 8007c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6999      	ldr	r1, [r3, #24]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	691a      	ldr	r2, [r3, #16]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	619a      	str	r2, [r3, #24]
      break;
 8007c6a:	e064      	b.n	8007d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68b9      	ldr	r1, [r7, #8]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fa68 	bl	8008148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	699a      	ldr	r2, [r3, #24]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699a      	ldr	r2, [r3, #24]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6999      	ldr	r1, [r3, #24]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	021a      	lsls	r2, r3, #8
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	619a      	str	r2, [r3, #24]
      break;
 8007cac:	e043      	b.n	8007d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68b9      	ldr	r1, [r7, #8]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 fabd 	bl	8008234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69da      	ldr	r2, [r3, #28]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0208 	orr.w	r2, r2, #8
 8007cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	69da      	ldr	r2, [r3, #28]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0204 	bic.w	r2, r2, #4
 8007cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69d9      	ldr	r1, [r3, #28]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	691a      	ldr	r2, [r3, #16]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	61da      	str	r2, [r3, #28]
      break;
 8007cec:	e023      	b.n	8007d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68b9      	ldr	r1, [r7, #8]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fb11 	bl	800831c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	69da      	ldr	r2, [r3, #28]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	69da      	ldr	r2, [r3, #28]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	69d9      	ldr	r1, [r3, #28]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	021a      	lsls	r2, r3, #8
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	61da      	str	r2, [r3, #28]
      break;
 8007d2e:	e002      	b.n	8007d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	75fb      	strb	r3, [r7, #23]
      break;
 8007d34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d101      	bne.n	8007d64 <HAL_TIM_ConfigClockSource+0x1c>
 8007d60:	2302      	movs	r3, #2
 8007d62:	e0b4      	b.n	8007ece <HAL_TIM_ConfigClockSource+0x186>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d9c:	d03e      	beq.n	8007e1c <HAL_TIM_ConfigClockSource+0xd4>
 8007d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007da2:	f200 8087 	bhi.w	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007daa:	f000 8086 	beq.w	8007eba <HAL_TIM_ConfigClockSource+0x172>
 8007dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db2:	d87f      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007db4:	2b70      	cmp	r3, #112	; 0x70
 8007db6:	d01a      	beq.n	8007dee <HAL_TIM_ConfigClockSource+0xa6>
 8007db8:	2b70      	cmp	r3, #112	; 0x70
 8007dba:	d87b      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dbc:	2b60      	cmp	r3, #96	; 0x60
 8007dbe:	d050      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x11a>
 8007dc0:	2b60      	cmp	r3, #96	; 0x60
 8007dc2:	d877      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc4:	2b50      	cmp	r3, #80	; 0x50
 8007dc6:	d03c      	beq.n	8007e42 <HAL_TIM_ConfigClockSource+0xfa>
 8007dc8:	2b50      	cmp	r3, #80	; 0x50
 8007dca:	d873      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dcc:	2b40      	cmp	r3, #64	; 0x40
 8007dce:	d058      	beq.n	8007e82 <HAL_TIM_ConfigClockSource+0x13a>
 8007dd0:	2b40      	cmp	r3, #64	; 0x40
 8007dd2:	d86f      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd4:	2b30      	cmp	r3, #48	; 0x30
 8007dd6:	d064      	beq.n	8007ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8007dd8:	2b30      	cmp	r3, #48	; 0x30
 8007dda:	d86b      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ddc:	2b20      	cmp	r3, #32
 8007dde:	d060      	beq.n	8007ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8007de0:	2b20      	cmp	r3, #32
 8007de2:	d867      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d05c      	beq.n	8007ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8007de8:	2b10      	cmp	r3, #16
 8007dea:	d05a      	beq.n	8007ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8007dec:	e062      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	6899      	ldr	r1, [r3, #8]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f000 fb5d 	bl	80084bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	609a      	str	r2, [r3, #8]
      break;
 8007e1a:	e04f      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6818      	ldr	r0, [r3, #0]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	6899      	ldr	r1, [r3, #8]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	f000 fb46 	bl	80084bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e3e:	609a      	str	r2, [r3, #8]
      break;
 8007e40:	e03c      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	6859      	ldr	r1, [r3, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f000 faba 	bl	80083c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2150      	movs	r1, #80	; 0x50
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 fb13 	bl	8008486 <TIM_ITRx_SetConfig>
      break;
 8007e60:	e02c      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	6859      	ldr	r1, [r3, #4]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f000 fad9 	bl	8008426 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2160      	movs	r1, #96	; 0x60
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 fb03 	bl	8008486 <TIM_ITRx_SetConfig>
      break;
 8007e80:	e01c      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6818      	ldr	r0, [r3, #0]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	6859      	ldr	r1, [r3, #4]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	f000 fa9a 	bl	80083c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2140      	movs	r1, #64	; 0x40
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 faf3 	bl	8008486 <TIM_ITRx_SetConfig>
      break;
 8007ea0:	e00c      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4610      	mov	r0, r2
 8007eae:	f000 faea 	bl	8008486 <TIM_ITRx_SetConfig>
      break;
 8007eb2:	e003      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb8:	e000      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007eba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ede:	bf00      	nop
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ef2:	bf00      	nop
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b083      	sub	sp, #12
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f06:	bf00      	nop
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b083      	sub	sp, #12
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f1a:	bf00      	nop
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
	...

08007f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a40      	ldr	r2, [pc, #256]	; (800803c <TIM_Base_SetConfig+0x114>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d013      	beq.n	8007f68 <TIM_Base_SetConfig+0x40>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f46:	d00f      	beq.n	8007f68 <TIM_Base_SetConfig+0x40>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a3d      	ldr	r2, [pc, #244]	; (8008040 <TIM_Base_SetConfig+0x118>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d00b      	beq.n	8007f68 <TIM_Base_SetConfig+0x40>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a3c      	ldr	r2, [pc, #240]	; (8008044 <TIM_Base_SetConfig+0x11c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d007      	beq.n	8007f68 <TIM_Base_SetConfig+0x40>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a3b      	ldr	r2, [pc, #236]	; (8008048 <TIM_Base_SetConfig+0x120>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d003      	beq.n	8007f68 <TIM_Base_SetConfig+0x40>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a3a      	ldr	r2, [pc, #232]	; (800804c <TIM_Base_SetConfig+0x124>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d108      	bne.n	8007f7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a2f      	ldr	r2, [pc, #188]	; (800803c <TIM_Base_SetConfig+0x114>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d02b      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f88:	d027      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a2c      	ldr	r2, [pc, #176]	; (8008040 <TIM_Base_SetConfig+0x118>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d023      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a2b      	ldr	r2, [pc, #172]	; (8008044 <TIM_Base_SetConfig+0x11c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d01f      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a2a      	ldr	r2, [pc, #168]	; (8008048 <TIM_Base_SetConfig+0x120>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d01b      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a29      	ldr	r2, [pc, #164]	; (800804c <TIM_Base_SetConfig+0x124>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d017      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a28      	ldr	r2, [pc, #160]	; (8008050 <TIM_Base_SetConfig+0x128>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d013      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a27      	ldr	r2, [pc, #156]	; (8008054 <TIM_Base_SetConfig+0x12c>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d00f      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a26      	ldr	r2, [pc, #152]	; (8008058 <TIM_Base_SetConfig+0x130>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d00b      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a25      	ldr	r2, [pc, #148]	; (800805c <TIM_Base_SetConfig+0x134>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d007      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a24      	ldr	r2, [pc, #144]	; (8008060 <TIM_Base_SetConfig+0x138>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d003      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a23      	ldr	r2, [pc, #140]	; (8008064 <TIM_Base_SetConfig+0x13c>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d108      	bne.n	8007fec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	689a      	ldr	r2, [r3, #8]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a0a      	ldr	r2, [pc, #40]	; (800803c <TIM_Base_SetConfig+0x114>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d003      	beq.n	8008020 <TIM_Base_SetConfig+0xf8>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a0c      	ldr	r2, [pc, #48]	; (800804c <TIM_Base_SetConfig+0x124>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d103      	bne.n	8008028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	691a      	ldr	r2, [r3, #16]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	615a      	str	r2, [r3, #20]
}
 800802e:	bf00      	nop
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	40010000 	.word	0x40010000
 8008040:	40000400 	.word	0x40000400
 8008044:	40000800 	.word	0x40000800
 8008048:	40000c00 	.word	0x40000c00
 800804c:	40010400 	.word	0x40010400
 8008050:	40014000 	.word	0x40014000
 8008054:	40014400 	.word	0x40014400
 8008058:	40014800 	.word	0x40014800
 800805c:	40001800 	.word	0x40001800
 8008060:	40001c00 	.word	0x40001c00
 8008064:	40002000 	.word	0x40002000

08008068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	f023 0201 	bic.w	r2, r3, #1
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f023 0303 	bic.w	r3, r3, #3
 800809e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f023 0302 	bic.w	r3, r3, #2
 80080b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a20      	ldr	r2, [pc, #128]	; (8008140 <TIM_OC1_SetConfig+0xd8>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d003      	beq.n	80080cc <TIM_OC1_SetConfig+0x64>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a1f      	ldr	r2, [pc, #124]	; (8008144 <TIM_OC1_SetConfig+0xdc>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d10c      	bne.n	80080e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f023 0308 	bic.w	r3, r3, #8
 80080d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4313      	orrs	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f023 0304 	bic.w	r3, r3, #4
 80080e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a15      	ldr	r2, [pc, #84]	; (8008140 <TIM_OC1_SetConfig+0xd8>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d003      	beq.n	80080f6 <TIM_OC1_SetConfig+0x8e>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a14      	ldr	r2, [pc, #80]	; (8008144 <TIM_OC1_SetConfig+0xdc>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d111      	bne.n	800811a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	4313      	orrs	r3, r2
 800810e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	4313      	orrs	r3, r2
 8008118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	621a      	str	r2, [r3, #32]
}
 8008134:	bf00      	nop
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	40010000 	.word	0x40010000
 8008144:	40010400 	.word	0x40010400

08008148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	f023 0210 	bic.w	r2, r3, #16
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800817e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	021b      	lsls	r3, r3, #8
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f023 0320 	bic.w	r3, r3, #32
 8008192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	011b      	lsls	r3, r3, #4
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	4313      	orrs	r3, r2
 800819e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a22      	ldr	r2, [pc, #136]	; (800822c <TIM_OC2_SetConfig+0xe4>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d003      	beq.n	80081b0 <TIM_OC2_SetConfig+0x68>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a21      	ldr	r2, [pc, #132]	; (8008230 <TIM_OC2_SetConfig+0xe8>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d10d      	bne.n	80081cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	011b      	lsls	r3, r3, #4
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a17      	ldr	r2, [pc, #92]	; (800822c <TIM_OC2_SetConfig+0xe4>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d003      	beq.n	80081dc <TIM_OC2_SetConfig+0x94>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a16      	ldr	r2, [pc, #88]	; (8008230 <TIM_OC2_SetConfig+0xe8>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d113      	bne.n	8008204 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	4313      	orrs	r3, r2
 8008202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	621a      	str	r2, [r3, #32]
}
 800821e:	bf00      	nop
 8008220:	371c      	adds	r7, #28
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	40010000 	.word	0x40010000
 8008230:	40010400 	.word	0x40010400

08008234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0303 	bic.w	r3, r3, #3
 800826a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800827c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	021b      	lsls	r3, r3, #8
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	4313      	orrs	r3, r2
 8008288:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a21      	ldr	r2, [pc, #132]	; (8008314 <TIM_OC3_SetConfig+0xe0>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d003      	beq.n	800829a <TIM_OC3_SetConfig+0x66>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a20      	ldr	r2, [pc, #128]	; (8008318 <TIM_OC3_SetConfig+0xe4>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d10d      	bne.n	80082b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	021b      	lsls	r3, r3, #8
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a16      	ldr	r2, [pc, #88]	; (8008314 <TIM_OC3_SetConfig+0xe0>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d003      	beq.n	80082c6 <TIM_OC3_SetConfig+0x92>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a15      	ldr	r2, [pc, #84]	; (8008318 <TIM_OC3_SetConfig+0xe4>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d113      	bne.n	80082ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	011b      	lsls	r3, r3, #4
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	4313      	orrs	r3, r2
 80082e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	011b      	lsls	r3, r3, #4
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	621a      	str	r2, [r3, #32]
}
 8008308:	bf00      	nop
 800830a:	371c      	adds	r7, #28
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	40010000 	.word	0x40010000
 8008318:	40010400 	.word	0x40010400

0800831c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800834a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	021b      	lsls	r3, r3, #8
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	4313      	orrs	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	031b      	lsls	r3, r3, #12
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	4313      	orrs	r3, r2
 8008372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a12      	ldr	r2, [pc, #72]	; (80083c0 <TIM_OC4_SetConfig+0xa4>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d003      	beq.n	8008384 <TIM_OC4_SetConfig+0x68>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a11      	ldr	r2, [pc, #68]	; (80083c4 <TIM_OC4_SetConfig+0xa8>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d109      	bne.n	8008398 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800838a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	019b      	lsls	r3, r3, #6
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	4313      	orrs	r3, r2
 8008396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	621a      	str	r2, [r3, #32]
}
 80083b2:	bf00      	nop
 80083b4:	371c      	adds	r7, #28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	40010000 	.word	0x40010000
 80083c4:	40010400 	.word	0x40010400

080083c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	f023 0201 	bic.w	r2, r3, #1
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	011b      	lsls	r3, r3, #4
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f023 030a 	bic.w	r3, r3, #10
 8008404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4313      	orrs	r3, r2
 800840c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	621a      	str	r2, [r3, #32]
}
 800841a:	bf00      	nop
 800841c:	371c      	adds	r7, #28
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008426:	b480      	push	{r7}
 8008428:	b087      	sub	sp, #28
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	f023 0210 	bic.w	r2, r3, #16
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	031b      	lsls	r3, r3, #12
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	4313      	orrs	r3, r2
 800845a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	4313      	orrs	r3, r2
 800846c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	621a      	str	r2, [r3, #32]
}
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008486:	b480      	push	{r7}
 8008488:	b085      	sub	sp, #20
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	f043 0307 	orr.w	r3, r3, #7
 80084a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	609a      	str	r2, [r3, #8]
}
 80084b0:	bf00      	nop
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
 80084c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	021a      	lsls	r2, r3, #8
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	431a      	orrs	r2, r3
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	609a      	str	r2, [r3, #8]
}
 80084f0:	bf00      	nop
 80084f2:	371c      	adds	r7, #28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008510:	2302      	movs	r3, #2
 8008512:	e05a      	b.n	80085ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2202      	movs	r2, #2
 8008520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800853a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	4313      	orrs	r3, r2
 8008544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a21      	ldr	r2, [pc, #132]	; (80085d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d022      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008560:	d01d      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a1d      	ldr	r2, [pc, #116]	; (80085dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d018      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1b      	ldr	r2, [pc, #108]	; (80085e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d013      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1a      	ldr	r2, [pc, #104]	; (80085e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d00e      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a18      	ldr	r2, [pc, #96]	; (80085e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d009      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a17      	ldr	r2, [pc, #92]	; (80085ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d004      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a15      	ldr	r2, [pc, #84]	; (80085f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d10c      	bne.n	80085b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	40010000 	.word	0x40010000
 80085dc:	40000400 	.word	0x40000400
 80085e0:	40000800 	.word	0x40000800
 80085e4:	40000c00 	.word	0x40000c00
 80085e8:	40010400 	.word	0x40010400
 80085ec:	40014000 	.word	0x40014000
 80085f0:	40001800 	.word	0x40001800

080085f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e03f      	b.n	80086ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d106      	bne.n	8008648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7fa ff8a 	bl	800355c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2224      	movs	r2, #36	; 0x24
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800865e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f9cb 	bl	80089fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	691a      	ldr	r2, [r3, #16]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	695a      	ldr	r2, [r3, #20]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2220      	movs	r2, #32
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2220      	movs	r2, #32
 80086a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b08a      	sub	sp, #40	; 0x28
 80086ba:	af02      	add	r7, sp, #8
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	603b      	str	r3, [r7, #0]
 80086c2:	4613      	mov	r3, r2
 80086c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b20      	cmp	r3, #32
 80086d4:	d17c      	bne.n	80087d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <HAL_UART_Transmit+0x2c>
 80086dc:	88fb      	ldrh	r3, [r7, #6]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e075      	b.n	80087d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d101      	bne.n	80086f4 <HAL_UART_Transmit+0x3e>
 80086f0:	2302      	movs	r3, #2
 80086f2:	e06e      	b.n	80087d2 <HAL_UART_Transmit+0x11c>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2221      	movs	r2, #33	; 0x21
 8008706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800870a:	f7fb f973 	bl	80039f4 <HAL_GetTick>
 800870e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	88fa      	ldrh	r2, [r7, #6]
 8008714:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	88fa      	ldrh	r2, [r7, #6]
 800871a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008724:	d108      	bne.n	8008738 <HAL_UART_Transmit+0x82>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d104      	bne.n	8008738 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800872e:	2300      	movs	r3, #0
 8008730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	61bb      	str	r3, [r7, #24]
 8008736:	e003      	b.n	8008740 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800873c:	2300      	movs	r3, #0
 800873e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008748:	e02a      	b.n	80087a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2200      	movs	r2, #0
 8008752:	2180      	movs	r1, #128	; 0x80
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 f8e2 	bl	800891e <UART_WaitOnFlagUntilTimeout>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d001      	beq.n	8008764 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e036      	b.n	80087d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10b      	bne.n	8008782 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	461a      	mov	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008778:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	3302      	adds	r3, #2
 800877e:	61bb      	str	r3, [r7, #24]
 8008780:	e007      	b.n	8008792 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	781a      	ldrb	r2, [r3, #0]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	3301      	adds	r3, #1
 8008790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008796:	b29b      	uxth	r3, r3
 8008798:	3b01      	subs	r3, #1
 800879a:	b29a      	uxth	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1cf      	bne.n	800874a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2200      	movs	r2, #0
 80087b2:	2140      	movs	r1, #64	; 0x40
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 f8b2 	bl	800891e <UART_WaitOnFlagUntilTimeout>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e006      	b.n	80087d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	e000      	b.n	80087d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80087d0:	2302      	movs	r3, #2
  }
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3720      	adds	r7, #32
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b08a      	sub	sp, #40	; 0x28
 80087de:	af02      	add	r7, sp, #8
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	603b      	str	r3, [r7, #0]
 80087e6:	4613      	mov	r3, r2
 80087e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b20      	cmp	r3, #32
 80087f8:	f040 808c 	bne.w	8008914 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <HAL_UART_Receive+0x2e>
 8008802:	88fb      	ldrh	r3, [r7, #6]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e084      	b.n	8008916 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008812:	2b01      	cmp	r3, #1
 8008814:	d101      	bne.n	800881a <HAL_UART_Receive+0x40>
 8008816:	2302      	movs	r3, #2
 8008818:	e07d      	b.n	8008916 <HAL_UART_Receive+0x13c>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2222      	movs	r2, #34	; 0x22
 800882c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008836:	f7fb f8dd 	bl	80039f4 <HAL_GetTick>
 800883a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	88fa      	ldrh	r2, [r7, #6]
 8008840:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	88fa      	ldrh	r2, [r7, #6]
 8008846:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008850:	d108      	bne.n	8008864 <HAL_UART_Receive+0x8a>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d104      	bne.n	8008864 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800885a:	2300      	movs	r3, #0
 800885c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	61bb      	str	r3, [r7, #24]
 8008862:	e003      	b.n	800886c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008868:	2300      	movs	r3, #0
 800886a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008874:	e043      	b.n	80088fe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2200      	movs	r2, #0
 800887e:	2120      	movs	r1, #32
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 f84c 	bl	800891e <UART_WaitOnFlagUntilTimeout>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e042      	b.n	8008916 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10c      	bne.n	80088b0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	b29b      	uxth	r3, r3
 800889e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	3302      	adds	r3, #2
 80088ac:	61bb      	str	r3, [r7, #24]
 80088ae:	e01f      	b.n	80088f0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b8:	d007      	beq.n	80088ca <HAL_UART_Receive+0xf0>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10a      	bne.n	80088d8 <HAL_UART_Receive+0xfe>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d106      	bne.n	80088d8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	701a      	strb	r2, [r3, #0]
 80088d6:	e008      	b.n	80088ea <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	3301      	adds	r3, #1
 80088ee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	3b01      	subs	r3, #1
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008902:	b29b      	uxth	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1b6      	bne.n	8008876 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2220      	movs	r2, #32
 800890c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	e000      	b.n	8008916 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008914:	2302      	movs	r3, #2
  }
}
 8008916:	4618      	mov	r0, r3
 8008918:	3720      	adds	r7, #32
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b090      	sub	sp, #64	; 0x40
 8008922:	af00      	add	r7, sp, #0
 8008924:	60f8      	str	r0, [r7, #12]
 8008926:	60b9      	str	r1, [r7, #8]
 8008928:	603b      	str	r3, [r7, #0]
 800892a:	4613      	mov	r3, r2
 800892c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800892e:	e050      	b.n	80089d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008936:	d04c      	beq.n	80089d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800893a:	2b00      	cmp	r3, #0
 800893c:	d007      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0x30>
 800893e:	f7fb f859 	bl	80039f4 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800894a:	429a      	cmp	r2, r3
 800894c:	d241      	bcs.n	80089d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	330c      	adds	r3, #12
 8008954:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	330c      	adds	r3, #12
 800896c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800896e:	637a      	str	r2, [r7, #52]	; 0x34
 8008970:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800897c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1e5      	bne.n	800894e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3314      	adds	r3, #20
 8008988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	e853 3f00 	ldrex	r3, [r3]
 8008990:	613b      	str	r3, [r7, #16]
   return(result);
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f023 0301 	bic.w	r3, r3, #1
 8008998:	63bb      	str	r3, [r7, #56]	; 0x38
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3314      	adds	r3, #20
 80089a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089a2:	623a      	str	r2, [r7, #32]
 80089a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	69f9      	ldr	r1, [r7, #28]
 80089a8:	6a3a      	ldr	r2, [r7, #32]
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e5      	bne.n	8008982 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2220      	movs	r2, #32
 80089c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e00f      	b.n	80089f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	4013      	ands	r3, r2
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	429a      	cmp	r2, r3
 80089e0:	bf0c      	ite	eq
 80089e2:	2301      	moveq	r3, #1
 80089e4:	2300      	movne	r3, #0
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	461a      	mov	r2, r3
 80089ea:	79fb      	ldrb	r3, [r7, #7]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d09f      	beq.n	8008930 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3740      	adds	r7, #64	; 0x40
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a00:	b09f      	sub	sp, #124	; 0x7c
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a12:	68d9      	ldr	r1, [r3, #12]
 8008a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	ea40 0301 	orr.w	r3, r0, r1
 8008a1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a20:	689a      	ldr	r2, [r3, #8]
 8008a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	431a      	orrs	r2, r3
 8008a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a40:	f021 010c 	bic.w	r1, r1, #12
 8008a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a4a:	430b      	orrs	r3, r1
 8008a4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a5a:	6999      	ldr	r1, [r3, #24]
 8008a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	ea40 0301 	orr.w	r3, r0, r1
 8008a64:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	4bc5      	ldr	r3, [pc, #788]	; (8008d80 <UART_SetConfig+0x384>)
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d004      	beq.n	8008a7a <UART_SetConfig+0x7e>
 8008a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	4bc3      	ldr	r3, [pc, #780]	; (8008d84 <UART_SetConfig+0x388>)
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d103      	bne.n	8008a82 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a7a:	f7fe fb45 	bl	8007108 <HAL_RCC_GetPCLK2Freq>
 8008a7e:	6778      	str	r0, [r7, #116]	; 0x74
 8008a80:	e002      	b.n	8008a88 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a82:	f7fe fb2d 	bl	80070e0 <HAL_RCC_GetPCLK1Freq>
 8008a86:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a90:	f040 80b6 	bne.w	8008c00 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a96:	461c      	mov	r4, r3
 8008a98:	f04f 0500 	mov.w	r5, #0
 8008a9c:	4622      	mov	r2, r4
 8008a9e:	462b      	mov	r3, r5
 8008aa0:	1891      	adds	r1, r2, r2
 8008aa2:	6439      	str	r1, [r7, #64]	; 0x40
 8008aa4:	415b      	adcs	r3, r3
 8008aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8008aa8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008aac:	1912      	adds	r2, r2, r4
 8008aae:	eb45 0303 	adc.w	r3, r5, r3
 8008ab2:	f04f 0000 	mov.w	r0, #0
 8008ab6:	f04f 0100 	mov.w	r1, #0
 8008aba:	00d9      	lsls	r1, r3, #3
 8008abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ac0:	00d0      	lsls	r0, r2, #3
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	1911      	adds	r1, r2, r4
 8008ac8:	6639      	str	r1, [r7, #96]	; 0x60
 8008aca:	416b      	adcs	r3, r5
 8008acc:	667b      	str	r3, [r7, #100]	; 0x64
 8008ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	f04f 0300 	mov.w	r3, #0
 8008ad8:	1891      	adds	r1, r2, r2
 8008ada:	63b9      	str	r1, [r7, #56]	; 0x38
 8008adc:	415b      	adcs	r3, r3
 8008ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ae4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008ae8:	f7f8 f8de 	bl	8000ca8 <__aeabi_uldivmod>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4ba5      	ldr	r3, [pc, #660]	; (8008d88 <UART_SetConfig+0x38c>)
 8008af2:	fba3 2302 	umull	r2, r3, r3, r2
 8008af6:	095b      	lsrs	r3, r3, #5
 8008af8:	011e      	lsls	r6, r3, #4
 8008afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008afc:	461c      	mov	r4, r3
 8008afe:	f04f 0500 	mov.w	r5, #0
 8008b02:	4622      	mov	r2, r4
 8008b04:	462b      	mov	r3, r5
 8008b06:	1891      	adds	r1, r2, r2
 8008b08:	6339      	str	r1, [r7, #48]	; 0x30
 8008b0a:	415b      	adcs	r3, r3
 8008b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008b12:	1912      	adds	r2, r2, r4
 8008b14:	eb45 0303 	adc.w	r3, r5, r3
 8008b18:	f04f 0000 	mov.w	r0, #0
 8008b1c:	f04f 0100 	mov.w	r1, #0
 8008b20:	00d9      	lsls	r1, r3, #3
 8008b22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b26:	00d0      	lsls	r0, r2, #3
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	1911      	adds	r1, r2, r4
 8008b2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b30:	416b      	adcs	r3, r5
 8008b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	f04f 0300 	mov.w	r3, #0
 8008b3e:	1891      	adds	r1, r2, r2
 8008b40:	62b9      	str	r1, [r7, #40]	; 0x28
 8008b42:	415b      	adcs	r3, r3
 8008b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008b4e:	f7f8 f8ab 	bl	8000ca8 <__aeabi_uldivmod>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	4b8c      	ldr	r3, [pc, #560]	; (8008d88 <UART_SetConfig+0x38c>)
 8008b58:	fba3 1302 	umull	r1, r3, r3, r2
 8008b5c:	095b      	lsrs	r3, r3, #5
 8008b5e:	2164      	movs	r1, #100	; 0x64
 8008b60:	fb01 f303 	mul.w	r3, r1, r3
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	3332      	adds	r3, #50	; 0x32
 8008b6a:	4a87      	ldr	r2, [pc, #540]	; (8008d88 <UART_SetConfig+0x38c>)
 8008b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b70:	095b      	lsrs	r3, r3, #5
 8008b72:	005b      	lsls	r3, r3, #1
 8008b74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b78:	441e      	add	r6, r3
 8008b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f04f 0100 	mov.w	r1, #0
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	1894      	adds	r4, r2, r2
 8008b88:	623c      	str	r4, [r7, #32]
 8008b8a:	415b      	adcs	r3, r3
 8008b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b92:	1812      	adds	r2, r2, r0
 8008b94:	eb41 0303 	adc.w	r3, r1, r3
 8008b98:	f04f 0400 	mov.w	r4, #0
 8008b9c:	f04f 0500 	mov.w	r5, #0
 8008ba0:	00dd      	lsls	r5, r3, #3
 8008ba2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ba6:	00d4      	lsls	r4, r2, #3
 8008ba8:	4622      	mov	r2, r4
 8008baa:	462b      	mov	r3, r5
 8008bac:	1814      	adds	r4, r2, r0
 8008bae:	653c      	str	r4, [r7, #80]	; 0x50
 8008bb0:	414b      	adcs	r3, r1
 8008bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8008bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	f04f 0300 	mov.w	r3, #0
 8008bbe:	1891      	adds	r1, r2, r2
 8008bc0:	61b9      	str	r1, [r7, #24]
 8008bc2:	415b      	adcs	r3, r3
 8008bc4:	61fb      	str	r3, [r7, #28]
 8008bc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008bca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008bce:	f7f8 f86b 	bl	8000ca8 <__aeabi_uldivmod>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4b6c      	ldr	r3, [pc, #432]	; (8008d88 <UART_SetConfig+0x38c>)
 8008bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8008bdc:	095b      	lsrs	r3, r3, #5
 8008bde:	2164      	movs	r1, #100	; 0x64
 8008be0:	fb01 f303 	mul.w	r3, r1, r3
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	3332      	adds	r3, #50	; 0x32
 8008bea:	4a67      	ldr	r2, [pc, #412]	; (8008d88 <UART_SetConfig+0x38c>)
 8008bec:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf0:	095b      	lsrs	r3, r3, #5
 8008bf2:	f003 0207 	and.w	r2, r3, #7
 8008bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4432      	add	r2, r6
 8008bfc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008bfe:	e0b9      	b.n	8008d74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c02:	461c      	mov	r4, r3
 8008c04:	f04f 0500 	mov.w	r5, #0
 8008c08:	4622      	mov	r2, r4
 8008c0a:	462b      	mov	r3, r5
 8008c0c:	1891      	adds	r1, r2, r2
 8008c0e:	6139      	str	r1, [r7, #16]
 8008c10:	415b      	adcs	r3, r3
 8008c12:	617b      	str	r3, [r7, #20]
 8008c14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c18:	1912      	adds	r2, r2, r4
 8008c1a:	eb45 0303 	adc.w	r3, r5, r3
 8008c1e:	f04f 0000 	mov.w	r0, #0
 8008c22:	f04f 0100 	mov.w	r1, #0
 8008c26:	00d9      	lsls	r1, r3, #3
 8008c28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c2c:	00d0      	lsls	r0, r2, #3
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	eb12 0804 	adds.w	r8, r2, r4
 8008c36:	eb43 0905 	adc.w	r9, r3, r5
 8008c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f04f 0100 	mov.w	r1, #0
 8008c44:	f04f 0200 	mov.w	r2, #0
 8008c48:	f04f 0300 	mov.w	r3, #0
 8008c4c:	008b      	lsls	r3, r1, #2
 8008c4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c52:	0082      	lsls	r2, r0, #2
 8008c54:	4640      	mov	r0, r8
 8008c56:	4649      	mov	r1, r9
 8008c58:	f7f8 f826 	bl	8000ca8 <__aeabi_uldivmod>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	4b49      	ldr	r3, [pc, #292]	; (8008d88 <UART_SetConfig+0x38c>)
 8008c62:	fba3 2302 	umull	r2, r3, r3, r2
 8008c66:	095b      	lsrs	r3, r3, #5
 8008c68:	011e      	lsls	r6, r3, #4
 8008c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f04f 0100 	mov.w	r1, #0
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	1894      	adds	r4, r2, r2
 8008c78:	60bc      	str	r4, [r7, #8]
 8008c7a:	415b      	adcs	r3, r3
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c82:	1812      	adds	r2, r2, r0
 8008c84:	eb41 0303 	adc.w	r3, r1, r3
 8008c88:	f04f 0400 	mov.w	r4, #0
 8008c8c:	f04f 0500 	mov.w	r5, #0
 8008c90:	00dd      	lsls	r5, r3, #3
 8008c92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c96:	00d4      	lsls	r4, r2, #3
 8008c98:	4622      	mov	r2, r4
 8008c9a:	462b      	mov	r3, r5
 8008c9c:	1814      	adds	r4, r2, r0
 8008c9e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008ca0:	414b      	adcs	r3, r1
 8008ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f04f 0100 	mov.w	r1, #0
 8008cae:	f04f 0200 	mov.w	r2, #0
 8008cb2:	f04f 0300 	mov.w	r3, #0
 8008cb6:	008b      	lsls	r3, r1, #2
 8008cb8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008cbc:	0082      	lsls	r2, r0, #2
 8008cbe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008cc2:	f7f7 fff1 	bl	8000ca8 <__aeabi_uldivmod>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	4b2f      	ldr	r3, [pc, #188]	; (8008d88 <UART_SetConfig+0x38c>)
 8008ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8008cd0:	095b      	lsrs	r3, r3, #5
 8008cd2:	2164      	movs	r1, #100	; 0x64
 8008cd4:	fb01 f303 	mul.w	r3, r1, r3
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	011b      	lsls	r3, r3, #4
 8008cdc:	3332      	adds	r3, #50	; 0x32
 8008cde:	4a2a      	ldr	r2, [pc, #168]	; (8008d88 <UART_SetConfig+0x38c>)
 8008ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce4:	095b      	lsrs	r3, r3, #5
 8008ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cea:	441e      	add	r6, r3
 8008cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f04f 0100 	mov.w	r1, #0
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	1894      	adds	r4, r2, r2
 8008cfa:	603c      	str	r4, [r7, #0]
 8008cfc:	415b      	adcs	r3, r3
 8008cfe:	607b      	str	r3, [r7, #4]
 8008d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d04:	1812      	adds	r2, r2, r0
 8008d06:	eb41 0303 	adc.w	r3, r1, r3
 8008d0a:	f04f 0400 	mov.w	r4, #0
 8008d0e:	f04f 0500 	mov.w	r5, #0
 8008d12:	00dd      	lsls	r5, r3, #3
 8008d14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d18:	00d4      	lsls	r4, r2, #3
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	eb12 0a00 	adds.w	sl, r2, r0
 8008d22:	eb43 0b01 	adc.w	fp, r3, r1
 8008d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f04f 0100 	mov.w	r1, #0
 8008d30:	f04f 0200 	mov.w	r2, #0
 8008d34:	f04f 0300 	mov.w	r3, #0
 8008d38:	008b      	lsls	r3, r1, #2
 8008d3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d3e:	0082      	lsls	r2, r0, #2
 8008d40:	4650      	mov	r0, sl
 8008d42:	4659      	mov	r1, fp
 8008d44:	f7f7 ffb0 	bl	8000ca8 <__aeabi_uldivmod>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4b0e      	ldr	r3, [pc, #56]	; (8008d88 <UART_SetConfig+0x38c>)
 8008d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8008d52:	095b      	lsrs	r3, r3, #5
 8008d54:	2164      	movs	r1, #100	; 0x64
 8008d56:	fb01 f303 	mul.w	r3, r1, r3
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	011b      	lsls	r3, r3, #4
 8008d5e:	3332      	adds	r3, #50	; 0x32
 8008d60:	4a09      	ldr	r2, [pc, #36]	; (8008d88 <UART_SetConfig+0x38c>)
 8008d62:	fba2 2303 	umull	r2, r3, r2, r3
 8008d66:	095b      	lsrs	r3, r3, #5
 8008d68:	f003 020f 	and.w	r2, r3, #15
 8008d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4432      	add	r2, r6
 8008d72:	609a      	str	r2, [r3, #8]
}
 8008d74:	bf00      	nop
 8008d76:	377c      	adds	r7, #124	; 0x7c
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7e:	bf00      	nop
 8008d80:	40011000 	.word	0x40011000
 8008d84:	40011400 	.word	0x40011400
 8008d88:	51eb851f 	.word	0x51eb851f

08008d8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b084      	sub	sp, #16
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	f107 001c 	add.w	r0, r7, #28
 8008d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d122      	bne.n	8008dea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d105      	bne.n	8008dde <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f001 fb1c 	bl	800a41c <USB_CoreReset>
 8008de4:	4603      	mov	r3, r0
 8008de6:	73fb      	strb	r3, [r7, #15]
 8008de8:	e01a      	b.n	8008e20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f001 fb10 	bl	800a41c <USB_CoreReset>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d106      	bne.n	8008e14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	639a      	str	r2, [r3, #56]	; 0x38
 8008e12:	e005      	b.n	8008e20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d10b      	bne.n	8008e3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f043 0206 	orr.w	r2, r3, #6
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f043 0220 	orr.w	r2, r3, #32
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e4a:	b004      	add	sp, #16
 8008e4c:	4770      	bx	lr
	...

08008e50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008e5e:	79fb      	ldrb	r3, [r7, #7]
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d165      	bne.n	8008f30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	4a41      	ldr	r2, [pc, #260]	; (8008f6c <USB_SetTurnaroundTime+0x11c>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d906      	bls.n	8008e7a <USB_SetTurnaroundTime+0x2a>
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	4a40      	ldr	r2, [pc, #256]	; (8008f70 <USB_SetTurnaroundTime+0x120>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d202      	bcs.n	8008e7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008e74:	230f      	movs	r3, #15
 8008e76:	617b      	str	r3, [r7, #20]
 8008e78:	e062      	b.n	8008f40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	4a3c      	ldr	r2, [pc, #240]	; (8008f70 <USB_SetTurnaroundTime+0x120>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d306      	bcc.n	8008e90 <USB_SetTurnaroundTime+0x40>
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	4a3b      	ldr	r2, [pc, #236]	; (8008f74 <USB_SetTurnaroundTime+0x124>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d202      	bcs.n	8008e90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008e8a:	230e      	movs	r3, #14
 8008e8c:	617b      	str	r3, [r7, #20]
 8008e8e:	e057      	b.n	8008f40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	4a38      	ldr	r2, [pc, #224]	; (8008f74 <USB_SetTurnaroundTime+0x124>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d306      	bcc.n	8008ea6 <USB_SetTurnaroundTime+0x56>
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	4a37      	ldr	r2, [pc, #220]	; (8008f78 <USB_SetTurnaroundTime+0x128>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d202      	bcs.n	8008ea6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008ea0:	230d      	movs	r3, #13
 8008ea2:	617b      	str	r3, [r7, #20]
 8008ea4:	e04c      	b.n	8008f40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	4a33      	ldr	r2, [pc, #204]	; (8008f78 <USB_SetTurnaroundTime+0x128>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d306      	bcc.n	8008ebc <USB_SetTurnaroundTime+0x6c>
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	4a32      	ldr	r2, [pc, #200]	; (8008f7c <USB_SetTurnaroundTime+0x12c>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d802      	bhi.n	8008ebc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008eb6:	230c      	movs	r3, #12
 8008eb8:	617b      	str	r3, [r7, #20]
 8008eba:	e041      	b.n	8008f40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	4a2f      	ldr	r2, [pc, #188]	; (8008f7c <USB_SetTurnaroundTime+0x12c>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d906      	bls.n	8008ed2 <USB_SetTurnaroundTime+0x82>
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	4a2e      	ldr	r2, [pc, #184]	; (8008f80 <USB_SetTurnaroundTime+0x130>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d802      	bhi.n	8008ed2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008ecc:	230b      	movs	r3, #11
 8008ece:	617b      	str	r3, [r7, #20]
 8008ed0:	e036      	b.n	8008f40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	4a2a      	ldr	r2, [pc, #168]	; (8008f80 <USB_SetTurnaroundTime+0x130>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d906      	bls.n	8008ee8 <USB_SetTurnaroundTime+0x98>
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	4a29      	ldr	r2, [pc, #164]	; (8008f84 <USB_SetTurnaroundTime+0x134>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d802      	bhi.n	8008ee8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008ee2:	230a      	movs	r3, #10
 8008ee4:	617b      	str	r3, [r7, #20]
 8008ee6:	e02b      	b.n	8008f40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	4a26      	ldr	r2, [pc, #152]	; (8008f84 <USB_SetTurnaroundTime+0x134>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d906      	bls.n	8008efe <USB_SetTurnaroundTime+0xae>
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	4a25      	ldr	r2, [pc, #148]	; (8008f88 <USB_SetTurnaroundTime+0x138>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d202      	bcs.n	8008efe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008ef8:	2309      	movs	r3, #9
 8008efa:	617b      	str	r3, [r7, #20]
 8008efc:	e020      	b.n	8008f40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	4a21      	ldr	r2, [pc, #132]	; (8008f88 <USB_SetTurnaroundTime+0x138>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d306      	bcc.n	8008f14 <USB_SetTurnaroundTime+0xc4>
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	4a20      	ldr	r2, [pc, #128]	; (8008f8c <USB_SetTurnaroundTime+0x13c>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d802      	bhi.n	8008f14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008f0e:	2308      	movs	r3, #8
 8008f10:	617b      	str	r3, [r7, #20]
 8008f12:	e015      	b.n	8008f40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	4a1d      	ldr	r2, [pc, #116]	; (8008f8c <USB_SetTurnaroundTime+0x13c>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d906      	bls.n	8008f2a <USB_SetTurnaroundTime+0xda>
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	4a1c      	ldr	r2, [pc, #112]	; (8008f90 <USB_SetTurnaroundTime+0x140>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d202      	bcs.n	8008f2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008f24:	2307      	movs	r3, #7
 8008f26:	617b      	str	r3, [r7, #20]
 8008f28:	e00a      	b.n	8008f40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008f2a:	2306      	movs	r3, #6
 8008f2c:	617b      	str	r3, [r7, #20]
 8008f2e:	e007      	b.n	8008f40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d102      	bne.n	8008f3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008f36:	2309      	movs	r3, #9
 8008f38:	617b      	str	r3, [r7, #20]
 8008f3a:	e001      	b.n	8008f40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008f3c:	2309      	movs	r3, #9
 8008f3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	029b      	lsls	r3, r3, #10
 8008f54:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	371c      	adds	r7, #28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	00d8acbf 	.word	0x00d8acbf
 8008f70:	00e4e1c0 	.word	0x00e4e1c0
 8008f74:	00f42400 	.word	0x00f42400
 8008f78:	01067380 	.word	0x01067380
 8008f7c:	011a499f 	.word	0x011a499f
 8008f80:	01312cff 	.word	0x01312cff
 8008f84:	014ca43f 	.word	0x014ca43f
 8008f88:	016e3600 	.word	0x016e3600
 8008f8c:	01a6ab1f 	.word	0x01a6ab1f
 8008f90:	01e84800 	.word	0x01e84800

08008f94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	f043 0201 	orr.w	r2, r3, #1
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f023 0201 	bic.w	r2, r3, #1
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d115      	bne.n	8009026 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009006:	2001      	movs	r0, #1
 8009008:	f7fa fd00 	bl	8003a0c <HAL_Delay>
      ms++;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	3301      	adds	r3, #1
 8009010:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 f972 	bl	800a2fc <USB_GetMode>
 8009018:	4603      	mov	r3, r0
 800901a:	2b01      	cmp	r3, #1
 800901c:	d01e      	beq.n	800905c <USB_SetCurrentMode+0x84>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2b31      	cmp	r3, #49	; 0x31
 8009022:	d9f0      	bls.n	8009006 <USB_SetCurrentMode+0x2e>
 8009024:	e01a      	b.n	800905c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009026:	78fb      	ldrb	r3, [r7, #3]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d115      	bne.n	8009058 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009038:	2001      	movs	r0, #1
 800903a:	f7fa fce7 	bl	8003a0c <HAL_Delay>
      ms++;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	3301      	adds	r3, #1
 8009042:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f001 f959 	bl	800a2fc <USB_GetMode>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d005      	beq.n	800905c <USB_SetCurrentMode+0x84>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2b31      	cmp	r3, #49	; 0x31
 8009054:	d9f0      	bls.n	8009038 <USB_SetCurrentMode+0x60>
 8009056:	e001      	b.n	800905c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e005      	b.n	8009068 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2b32      	cmp	r3, #50	; 0x32
 8009060:	d101      	bne.n	8009066 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e000      	b.n	8009068 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009070:	b084      	sub	sp, #16
 8009072:	b580      	push	{r7, lr}
 8009074:	b086      	sub	sp, #24
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800907e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800908a:	2300      	movs	r3, #0
 800908c:	613b      	str	r3, [r7, #16]
 800908e:	e009      	b.n	80090a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	3340      	adds	r3, #64	; 0x40
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4413      	add	r3, r2
 800909a:	2200      	movs	r2, #0
 800909c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	3301      	adds	r3, #1
 80090a2:	613b      	str	r3, [r7, #16]
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	2b0e      	cmp	r3, #14
 80090a8:	d9f2      	bls.n	8009090 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80090aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d11c      	bne.n	80090ea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090be:	f043 0302 	orr.w	r3, r3, #2
 80090c2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	639a      	str	r2, [r3, #56]	; 0x38
 80090e8:	e00b      	b.n	8009102 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009108:	461a      	mov	r2, r3
 800910a:	2300      	movs	r3, #0
 800910c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009114:	4619      	mov	r1, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911c:	461a      	mov	r2, r3
 800911e:	680b      	ldr	r3, [r1, #0]
 8009120:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009124:	2b01      	cmp	r3, #1
 8009126:	d10c      	bne.n	8009142 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912a:	2b00      	cmp	r3, #0
 800912c:	d104      	bne.n	8009138 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800912e:	2100      	movs	r1, #0
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f945 	bl	80093c0 <USB_SetDevSpeed>
 8009136:	e008      	b.n	800914a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009138:	2101      	movs	r1, #1
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f940 	bl	80093c0 <USB_SetDevSpeed>
 8009140:	e003      	b.n	800914a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009142:	2103      	movs	r1, #3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f93b 	bl	80093c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800914a:	2110      	movs	r1, #16
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f8f3 	bl	8009338 <USB_FlushTxFifo>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f90f 	bl	8009380 <USB_FlushRxFifo>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d001      	beq.n	800916c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009172:	461a      	mov	r2, r3
 8009174:	2300      	movs	r3, #0
 8009176:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917e:	461a      	mov	r2, r3
 8009180:	2300      	movs	r3, #0
 8009182:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800918a:	461a      	mov	r2, r3
 800918c:	2300      	movs	r3, #0
 800918e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009190:	2300      	movs	r3, #0
 8009192:	613b      	str	r3, [r7, #16]
 8009194:	e043      	b.n	800921e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	015a      	lsls	r2, r3, #5
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	4413      	add	r3, r2
 800919e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091ac:	d118      	bne.n	80091e0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10a      	bne.n	80091ca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c0:	461a      	mov	r2, r3
 80091c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	e013      	b.n	80091f2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d6:	461a      	mov	r2, r3
 80091d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80091dc:	6013      	str	r3, [r2, #0]
 80091de:	e008      	b.n	80091f2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ec:	461a      	mov	r2, r3
 80091ee:	2300      	movs	r3, #0
 80091f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fe:	461a      	mov	r2, r3
 8009200:	2300      	movs	r3, #0
 8009202:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	015a      	lsls	r2, r3, #5
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4413      	add	r3, r2
 800920c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009210:	461a      	mov	r2, r3
 8009212:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009216:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	3301      	adds	r3, #1
 800921c:	613b      	str	r3, [r7, #16]
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	429a      	cmp	r2, r3
 8009224:	d3b7      	bcc.n	8009196 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009226:	2300      	movs	r3, #0
 8009228:	613b      	str	r3, [r7, #16]
 800922a:	e043      	b.n	80092b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800923e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009242:	d118      	bne.n	8009276 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10a      	bne.n	8009260 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	015a      	lsls	r2, r3, #5
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	4413      	add	r3, r2
 8009252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009256:	461a      	mov	r2, r3
 8009258:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800925c:	6013      	str	r3, [r2, #0]
 800925e:	e013      	b.n	8009288 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926c:	461a      	mov	r2, r3
 800926e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009272:	6013      	str	r3, [r2, #0]
 8009274:	e008      	b.n	8009288 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009282:	461a      	mov	r2, r3
 8009284:	2300      	movs	r3, #0
 8009286:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009294:	461a      	mov	r2, r3
 8009296:	2300      	movs	r3, #0
 8009298:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	015a      	lsls	r2, r3, #5
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a6:	461a      	mov	r2, r3
 80092a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	3301      	adds	r3, #1
 80092b2:	613b      	str	r3, [r7, #16]
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d3b7      	bcc.n	800922c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80092dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d105      	bne.n	80092f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	f043 0210 	orr.w	r2, r3, #16
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	699a      	ldr	r2, [r3, #24]
 80092f4:	4b0f      	ldr	r3, [pc, #60]	; (8009334 <USB_DevInit+0x2c4>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80092fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d005      	beq.n	800930e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	f043 0208 	orr.w	r2, r3, #8
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800930e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009310:	2b01      	cmp	r3, #1
 8009312:	d107      	bne.n	8009324 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800931c:	f043 0304 	orr.w	r3, r3, #4
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009324:	7dfb      	ldrb	r3, [r7, #23]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009330:	b004      	add	sp, #16
 8009332:	4770      	bx	lr
 8009334:	803c3800 	.word	0x803c3800

08009338 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009342:	2300      	movs	r3, #0
 8009344:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	019b      	lsls	r3, r3, #6
 800934a:	f043 0220 	orr.w	r2, r3, #32
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	3301      	adds	r3, #1
 8009356:	60fb      	str	r3, [r7, #12]
 8009358:	4a08      	ldr	r2, [pc, #32]	; (800937c <USB_FlushTxFifo+0x44>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d901      	bls.n	8009362 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e006      	b.n	8009370 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	f003 0320 	and.w	r3, r3, #32
 800936a:	2b20      	cmp	r3, #32
 800936c:	d0f1      	beq.n	8009352 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	00030d40 	.word	0x00030d40

08009380 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009388:	2300      	movs	r3, #0
 800938a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2210      	movs	r2, #16
 8009390:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3301      	adds	r3, #1
 8009396:	60fb      	str	r3, [r7, #12]
 8009398:	4a08      	ldr	r2, [pc, #32]	; (80093bc <USB_FlushRxFifo+0x3c>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d901      	bls.n	80093a2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e006      	b.n	80093b0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	f003 0310 	and.w	r3, r3, #16
 80093aa:	2b10      	cmp	r3, #16
 80093ac:	d0f1      	beq.n	8009392 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	00030d40 	.word	0x00030d40

080093c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	78fb      	ldrb	r3, [r7, #3]
 80093da:	68f9      	ldr	r1, [r7, #12]
 80093dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093e0:	4313      	orrs	r3, r2
 80093e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b087      	sub	sp, #28
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f003 0306 	and.w	r3, r3, #6
 800940a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d102      	bne.n	8009418 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009412:	2300      	movs	r3, #0
 8009414:	75fb      	strb	r3, [r7, #23]
 8009416:	e00a      	b.n	800942e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b02      	cmp	r3, #2
 800941c:	d002      	beq.n	8009424 <USB_GetDevSpeed+0x32>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2b06      	cmp	r3, #6
 8009422:	d102      	bne.n	800942a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009424:	2302      	movs	r3, #2
 8009426:	75fb      	strb	r3, [r7, #23]
 8009428:	e001      	b.n	800942e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800942a:	230f      	movs	r3, #15
 800942c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800942e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009430:	4618      	mov	r0, r3
 8009432:	371c      	adds	r7, #28
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	785b      	ldrb	r3, [r3, #1]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d13a      	bne.n	80094ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800945e:	69da      	ldr	r2, [r3, #28]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	f003 030f 	and.w	r3, r3, #15
 8009468:	2101      	movs	r1, #1
 800946a:	fa01 f303 	lsl.w	r3, r1, r3
 800946e:	b29b      	uxth	r3, r3
 8009470:	68f9      	ldr	r1, [r7, #12]
 8009472:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009476:	4313      	orrs	r3, r2
 8009478:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d155      	bne.n	800953c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	78db      	ldrb	r3, [r3, #3]
 80094aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80094ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	059b      	lsls	r3, r3, #22
 80094b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80094b4:	4313      	orrs	r3, r2
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	0151      	lsls	r1, r2, #5
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	440a      	add	r2, r1
 80094be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ca:	6013      	str	r3, [r2, #0]
 80094cc:	e036      	b.n	800953c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d4:	69da      	ldr	r2, [r3, #28]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	f003 030f 	and.w	r3, r3, #15
 80094de:	2101      	movs	r1, #1
 80094e0:	fa01 f303 	lsl.w	r3, r1, r3
 80094e4:	041b      	lsls	r3, r3, #16
 80094e6:	68f9      	ldr	r1, [r7, #12]
 80094e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094ec:	4313      	orrs	r3, r2
 80094ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d11a      	bne.n	800953c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	015a      	lsls	r2, r3, #5
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	4413      	add	r3, r2
 800950e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	78db      	ldrb	r3, [r3, #3]
 8009520:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009522:	430b      	orrs	r3, r1
 8009524:	4313      	orrs	r3, r2
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	0151      	lsls	r1, r2, #5
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	440a      	add	r2, r1
 800952e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800953a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
	...

0800954c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	785b      	ldrb	r3, [r3, #1]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d161      	bne.n	800962c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800957a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800957e:	d11f      	bne.n	80095c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	015a      	lsls	r2, r3, #5
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	4413      	add	r3, r2
 8009588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	0151      	lsls	r1, r2, #5
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	440a      	add	r2, r1
 8009596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800959a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800959e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	0151      	lsls	r1, r2, #5
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	440a      	add	r2, r1
 80095b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	f003 030f 	and.w	r3, r3, #15
 80095d0:	2101      	movs	r1, #1
 80095d2:	fa01 f303 	lsl.w	r3, r1, r3
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	43db      	mvns	r3, r3
 80095da:	68f9      	ldr	r1, [r7, #12]
 80095dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095e0:	4013      	ands	r3, r2
 80095e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ea:	69da      	ldr	r2, [r3, #28]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	f003 030f 	and.w	r3, r3, #15
 80095f4:	2101      	movs	r1, #1
 80095f6:	fa01 f303 	lsl.w	r3, r1, r3
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	43db      	mvns	r3, r3
 80095fe:	68f9      	ldr	r1, [r7, #12]
 8009600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009604:	4013      	ands	r3, r2
 8009606:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	015a      	lsls	r2, r3, #5
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4413      	add	r3, r2
 8009610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	0159      	lsls	r1, r3, #5
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	440b      	add	r3, r1
 800961e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009622:	4619      	mov	r1, r3
 8009624:	4b35      	ldr	r3, [pc, #212]	; (80096fc <USB_DeactivateEndpoint+0x1b0>)
 8009626:	4013      	ands	r3, r2
 8009628:	600b      	str	r3, [r1, #0]
 800962a:	e060      	b.n	80096ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	015a      	lsls	r2, r3, #5
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4413      	add	r3, r2
 8009634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800963e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009642:	d11f      	bne.n	8009684 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	015a      	lsls	r2, r3, #5
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	4413      	add	r3, r2
 800964c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	0151      	lsls	r1, r2, #5
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	440a      	add	r2, r1
 800965a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800965e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009662:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	015a      	lsls	r2, r3, #5
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	4413      	add	r3, r2
 800966c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	0151      	lsls	r1, r2, #5
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	440a      	add	r2, r1
 800967a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800967e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009682:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800968a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	f003 030f 	and.w	r3, r3, #15
 8009694:	2101      	movs	r1, #1
 8009696:	fa01 f303 	lsl.w	r3, r1, r3
 800969a:	041b      	lsls	r3, r3, #16
 800969c:	43db      	mvns	r3, r3
 800969e:	68f9      	ldr	r1, [r7, #12]
 80096a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096a4:	4013      	ands	r3, r2
 80096a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ae:	69da      	ldr	r2, [r3, #28]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	f003 030f 	and.w	r3, r3, #15
 80096b8:	2101      	movs	r1, #1
 80096ba:	fa01 f303 	lsl.w	r3, r1, r3
 80096be:	041b      	lsls	r3, r3, #16
 80096c0:	43db      	mvns	r3, r3
 80096c2:	68f9      	ldr	r1, [r7, #12]
 80096c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096c8:	4013      	ands	r3, r2
 80096ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	015a      	lsls	r2, r3, #5
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4413      	add	r3, r2
 80096d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	0159      	lsls	r1, r3, #5
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	440b      	add	r3, r1
 80096e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e6:	4619      	mov	r1, r3
 80096e8:	4b05      	ldr	r3, [pc, #20]	; (8009700 <USB_DeactivateEndpoint+0x1b4>)
 80096ea:	4013      	ands	r3, r2
 80096ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3714      	adds	r7, #20
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr
 80096fc:	ec337800 	.word	0xec337800
 8009700:	eff37800 	.word	0xeff37800

08009704 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b08a      	sub	sp, #40	; 0x28
 8009708:	af02      	add	r7, sp, #8
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	4613      	mov	r3, r2
 8009710:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	785b      	ldrb	r3, [r3, #1]
 8009720:	2b01      	cmp	r3, #1
 8009722:	f040 815c 	bne.w	80099de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d132      	bne.n	8009794 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	4413      	add	r3, r2
 8009736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	0151      	lsls	r1, r2, #5
 8009740:	69fa      	ldr	r2, [r7, #28]
 8009742:	440a      	add	r2, r1
 8009744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009748:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800974c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009750:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	0151      	lsls	r1, r2, #5
 8009764:	69fa      	ldr	r2, [r7, #28]
 8009766:	440a      	add	r2, r1
 8009768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800976c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009770:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	015a      	lsls	r2, r3, #5
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	4413      	add	r3, r2
 800977a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	69ba      	ldr	r2, [r7, #24]
 8009782:	0151      	lsls	r1, r2, #5
 8009784:	69fa      	ldr	r2, [r7, #28]
 8009786:	440a      	add	r2, r1
 8009788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800978c:	0cdb      	lsrs	r3, r3, #19
 800978e:	04db      	lsls	r3, r3, #19
 8009790:	6113      	str	r3, [r2, #16]
 8009792:	e074      	b.n	800987e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	69ba      	ldr	r2, [r7, #24]
 80097a4:	0151      	lsls	r1, r2, #5
 80097a6:	69fa      	ldr	r2, [r7, #28]
 80097a8:	440a      	add	r2, r1
 80097aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ae:	0cdb      	lsrs	r3, r3, #19
 80097b0:	04db      	lsls	r3, r3, #19
 80097b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	0151      	lsls	r1, r2, #5
 80097c6:	69fa      	ldr	r2, [r7, #28]
 80097c8:	440a      	add	r2, r1
 80097ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	6959      	ldr	r1, [r3, #20]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	440b      	add	r3, r1
 80097f0:	1e59      	subs	r1, r3, #1
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80097fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80097fc:	4b9d      	ldr	r3, [pc, #628]	; (8009a74 <USB_EPStartXfer+0x370>)
 80097fe:	400b      	ands	r3, r1
 8009800:	69b9      	ldr	r1, [r7, #24]
 8009802:	0148      	lsls	r0, r1, #5
 8009804:	69f9      	ldr	r1, [r7, #28]
 8009806:	4401      	add	r1, r0
 8009808:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800980c:	4313      	orrs	r3, r2
 800980e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981c:	691a      	ldr	r2, [r3, #16]
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009826:	69b9      	ldr	r1, [r7, #24]
 8009828:	0148      	lsls	r0, r1, #5
 800982a:	69f9      	ldr	r1, [r7, #28]
 800982c:	4401      	add	r1, r0
 800982e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009832:	4313      	orrs	r3, r2
 8009834:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	78db      	ldrb	r3, [r3, #3]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d11f      	bne.n	800987e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	015a      	lsls	r2, r3, #5
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	4413      	add	r3, r2
 8009846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	69ba      	ldr	r2, [r7, #24]
 800984e:	0151      	lsls	r1, r2, #5
 8009850:	69fa      	ldr	r2, [r7, #28]
 8009852:	440a      	add	r2, r1
 8009854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009858:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800985c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	4413      	add	r3, r2
 8009866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	69ba      	ldr	r2, [r7, #24]
 800986e:	0151      	lsls	r1, r2, #5
 8009870:	69fa      	ldr	r2, [r7, #28]
 8009872:	440a      	add	r2, r1
 8009874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009878:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800987c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800987e:	79fb      	ldrb	r3, [r7, #7]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d14b      	bne.n	800991c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d009      	beq.n	80098a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009898:	461a      	mov	r2, r3
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	78db      	ldrb	r3, [r3, #3]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d128      	bne.n	80098fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d110      	bne.n	80098da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	69ba      	ldr	r2, [r7, #24]
 80098c8:	0151      	lsls	r1, r2, #5
 80098ca:	69fa      	ldr	r2, [r7, #28]
 80098cc:	440a      	add	r2, r1
 80098ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	e00f      	b.n	80098fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	015a      	lsls	r2, r3, #5
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	4413      	add	r3, r2
 80098e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	69ba      	ldr	r2, [r7, #24]
 80098ea:	0151      	lsls	r1, r2, #5
 80098ec:	69fa      	ldr	r2, [r7, #28]
 80098ee:	440a      	add	r2, r1
 80098f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	4413      	add	r3, r2
 8009902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	69ba      	ldr	r2, [r7, #24]
 800990a:	0151      	lsls	r1, r2, #5
 800990c:	69fa      	ldr	r2, [r7, #28]
 800990e:	440a      	add	r2, r1
 8009910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009914:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	e12f      	b.n	8009b7c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	4413      	add	r3, r2
 8009924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	69ba      	ldr	r2, [r7, #24]
 800992c:	0151      	lsls	r1, r2, #5
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	440a      	add	r2, r1
 8009932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009936:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800993a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	78db      	ldrb	r3, [r3, #3]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d015      	beq.n	8009970 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 8117 	beq.w	8009b7c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	f003 030f 	and.w	r3, r3, #15
 800995e:	2101      	movs	r1, #1
 8009960:	fa01 f303 	lsl.w	r3, r1, r3
 8009964:	69f9      	ldr	r1, [r7, #28]
 8009966:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800996a:	4313      	orrs	r3, r2
 800996c:	634b      	str	r3, [r1, #52]	; 0x34
 800996e:	e105      	b.n	8009b7c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800997c:	2b00      	cmp	r3, #0
 800997e:	d110      	bne.n	80099a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69ba      	ldr	r2, [r7, #24]
 8009990:	0151      	lsls	r1, r2, #5
 8009992:	69fa      	ldr	r2, [r7, #28]
 8009994:	440a      	add	r2, r1
 8009996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800999a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	e00f      	b.n	80099c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	015a      	lsls	r2, r3, #5
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	69ba      	ldr	r2, [r7, #24]
 80099b2:	0151      	lsls	r1, r2, #5
 80099b4:	69fa      	ldr	r2, [r7, #28]
 80099b6:	440a      	add	r2, r1
 80099b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	68d9      	ldr	r1, [r3, #12]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	781a      	ldrb	r2, [r3, #0]
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	b298      	uxth	r0, r3
 80099d0:	79fb      	ldrb	r3, [r7, #7]
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	4603      	mov	r3, r0
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 fa2b 	bl	8009e32 <USB_WritePacket>
 80099dc:	e0ce      	b.n	8009b7c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	0151      	lsls	r1, r2, #5
 80099f0:	69fa      	ldr	r2, [r7, #28]
 80099f2:	440a      	add	r2, r1
 80099f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099f8:	0cdb      	lsrs	r3, r3, #19
 80099fa:	04db      	lsls	r3, r3, #19
 80099fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	69ba      	ldr	r2, [r7, #24]
 8009a0e:	0151      	lsls	r1, r2, #5
 8009a10:	69fa      	ldr	r2, [r7, #28]
 8009a12:	440a      	add	r2, r1
 8009a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d126      	bne.n	8009a78 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	015a      	lsls	r2, r3, #5
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a36:	691a      	ldr	r2, [r3, #16]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a40:	69b9      	ldr	r1, [r7, #24]
 8009a42:	0148      	lsls	r0, r1, #5
 8009a44:	69f9      	ldr	r1, [r7, #28]
 8009a46:	4401      	add	r1, r0
 8009a48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	69ba      	ldr	r2, [r7, #24]
 8009a60:	0151      	lsls	r1, r2, #5
 8009a62:	69fa      	ldr	r2, [r7, #28]
 8009a64:	440a      	add	r2, r1
 8009a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a6e:	6113      	str	r3, [r2, #16]
 8009a70:	e036      	b.n	8009ae0 <USB_EPStartXfer+0x3dc>
 8009a72:	bf00      	nop
 8009a74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	695a      	ldr	r2, [r3, #20]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	4413      	add	r3, r2
 8009a82:	1e5a      	subs	r2, r3, #1
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a8c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9a:	691a      	ldr	r2, [r3, #16]
 8009a9c:	8afb      	ldrh	r3, [r7, #22]
 8009a9e:	04d9      	lsls	r1, r3, #19
 8009aa0:	4b39      	ldr	r3, [pc, #228]	; (8009b88 <USB_EPStartXfer+0x484>)
 8009aa2:	400b      	ands	r3, r1
 8009aa4:	69b9      	ldr	r1, [r7, #24]
 8009aa6:	0148      	lsls	r0, r1, #5
 8009aa8:	69f9      	ldr	r1, [r7, #28]
 8009aaa:	4401      	add	r1, r0
 8009aac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	015a      	lsls	r2, r3, #5
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	4413      	add	r3, r2
 8009abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac0:	691a      	ldr	r2, [r3, #16]
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	8af9      	ldrh	r1, [r7, #22]
 8009ac8:	fb01 f303 	mul.w	r3, r1, r3
 8009acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ad0:	69b9      	ldr	r1, [r7, #24]
 8009ad2:	0148      	lsls	r0, r1, #5
 8009ad4:	69f9      	ldr	r1, [r7, #28]
 8009ad6:	4401      	add	r1, r0
 8009ad8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009adc:	4313      	orrs	r3, r2
 8009ade:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ae0:	79fb      	ldrb	r3, [r7, #7]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d10d      	bne.n	8009b02 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d009      	beq.n	8009b02 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	68d9      	ldr	r1, [r3, #12]
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	015a      	lsls	r2, r3, #5
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	4413      	add	r3, r2
 8009afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afe:	460a      	mov	r2, r1
 8009b00:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	78db      	ldrb	r3, [r3, #3]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d128      	bne.n	8009b5c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d110      	bne.n	8009b3c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	015a      	lsls	r2, r3, #5
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	4413      	add	r3, r2
 8009b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	69ba      	ldr	r2, [r7, #24]
 8009b2a:	0151      	lsls	r1, r2, #5
 8009b2c:	69fa      	ldr	r2, [r7, #28]
 8009b2e:	440a      	add	r2, r1
 8009b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b38:	6013      	str	r3, [r2, #0]
 8009b3a:	e00f      	b.n	8009b5c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	015a      	lsls	r2, r3, #5
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	4413      	add	r3, r2
 8009b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	69ba      	ldr	r2, [r7, #24]
 8009b4c:	0151      	lsls	r1, r2, #5
 8009b4e:	69fa      	ldr	r2, [r7, #28]
 8009b50:	440a      	add	r2, r1
 8009b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	69ba      	ldr	r2, [r7, #24]
 8009b6c:	0151      	lsls	r1, r2, #5
 8009b6e:	69fa      	ldr	r2, [r7, #28]
 8009b70:	440a      	add	r2, r1
 8009b72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3720      	adds	r7, #32
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	1ff80000 	.word	0x1ff80000

08009b8c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b087      	sub	sp, #28
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	4613      	mov	r3, r2
 8009b98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	785b      	ldrb	r3, [r3, #1]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	f040 80cd 	bne.w	8009d48 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d132      	bne.n	8009c1c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	015a      	lsls	r2, r3, #5
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	0151      	lsls	r1, r2, #5
 8009bc8:	697a      	ldr	r2, [r7, #20]
 8009bca:	440a      	add	r2, r1
 8009bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009bd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009bd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	0151      	lsls	r1, r2, #5
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	440a      	add	r2, r1
 8009bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009bf8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	015a      	lsls	r2, r3, #5
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	4413      	add	r3, r2
 8009c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	0151      	lsls	r1, r2, #5
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	440a      	add	r2, r1
 8009c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c14:	0cdb      	lsrs	r3, r3, #19
 8009c16:	04db      	lsls	r3, r3, #19
 8009c18:	6113      	str	r3, [r2, #16]
 8009c1a:	e04e      	b.n	8009cba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	0151      	lsls	r1, r2, #5
 8009c2e:	697a      	ldr	r2, [r7, #20]
 8009c30:	440a      	add	r2, r1
 8009c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c36:	0cdb      	lsrs	r3, r3, #19
 8009c38:	04db      	lsls	r3, r3, #19
 8009c3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	015a      	lsls	r2, r3, #5
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	4413      	add	r3, r2
 8009c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	693a      	ldr	r2, [r7, #16]
 8009c4c:	0151      	lsls	r1, r2, #5
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	440a      	add	r2, r1
 8009c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c5e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	695a      	ldr	r2, [r3, #20]
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d903      	bls.n	8009c74 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	689a      	ldr	r2, [r3, #8]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	0151      	lsls	r1, r2, #5
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	440a      	add	r2, r1
 8009c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca0:	691a      	ldr	r2, [r3, #16]
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009caa:	6939      	ldr	r1, [r7, #16]
 8009cac:	0148      	lsls	r0, r1, #5
 8009cae:	6979      	ldr	r1, [r7, #20]
 8009cb0:	4401      	add	r1, r0
 8009cb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009cba:	79fb      	ldrb	r3, [r7, #7]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d11e      	bne.n	8009cfe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d009      	beq.n	8009cdc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	015a      	lsls	r2, r3, #5
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	015a      	lsls	r2, r3, #5
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	0151      	lsls	r1, r2, #5
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	440a      	add	r2, r1
 8009cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	e092      	b.n	8009e24 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	015a      	lsls	r2, r3, #5
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	4413      	add	r3, r2
 8009d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	693a      	ldr	r2, [r7, #16]
 8009d0e:	0151      	lsls	r1, r2, #5
 8009d10:	697a      	ldr	r2, [r7, #20]
 8009d12:	440a      	add	r2, r1
 8009d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d1c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d07e      	beq.n	8009e24 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	f003 030f 	and.w	r3, r3, #15
 8009d36:	2101      	movs	r1, #1
 8009d38:	fa01 f303 	lsl.w	r3, r1, r3
 8009d3c:	6979      	ldr	r1, [r7, #20]
 8009d3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d42:	4313      	orrs	r3, r2
 8009d44:	634b      	str	r3, [r1, #52]	; 0x34
 8009d46:	e06d      	b.n	8009e24 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	0151      	lsls	r1, r2, #5
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	440a      	add	r2, r1
 8009d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d62:	0cdb      	lsrs	r3, r3, #19
 8009d64:	04db      	lsls	r3, r3, #19
 8009d66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	693a      	ldr	r2, [r7, #16]
 8009d78:	0151      	lsls	r1, r2, #5
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	440a      	add	r2, r1
 8009d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d8a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	695b      	ldr	r3, [r3, #20]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d003      	beq.n	8009d9c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	689a      	ldr	r2, [r3, #8]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	693a      	ldr	r2, [r7, #16]
 8009dac:	0151      	lsls	r1, r2, #5
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	440a      	add	r2, r1
 8009db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009db6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009dba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc8:	691a      	ldr	r2, [r3, #16]
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dd2:	6939      	ldr	r1, [r7, #16]
 8009dd4:	0148      	lsls	r0, r1, #5
 8009dd6:	6979      	ldr	r1, [r7, #20]
 8009dd8:	4401      	add	r1, r0
 8009dda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009dde:	4313      	orrs	r3, r2
 8009de0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009de2:	79fb      	ldrb	r3, [r7, #7]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d10d      	bne.n	8009e04 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d009      	beq.n	8009e04 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	68d9      	ldr	r1, [r3, #12]
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	015a      	lsls	r2, r3, #5
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e00:	460a      	mov	r2, r1
 8009e02:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	015a      	lsls	r2, r3, #5
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	0151      	lsls	r1, r2, #5
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	440a      	add	r2, r1
 8009e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	371c      	adds	r7, #28
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b089      	sub	sp, #36	; 0x24
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	60f8      	str	r0, [r7, #12]
 8009e3a:	60b9      	str	r1, [r7, #8]
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	461a      	mov	r2, r3
 8009e40:	460b      	mov	r3, r1
 8009e42:	71fb      	strb	r3, [r7, #7]
 8009e44:	4613      	mov	r3, r2
 8009e46:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009e50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d123      	bne.n	8009ea0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009e58:	88bb      	ldrh	r3, [r7, #4]
 8009e5a:	3303      	adds	r3, #3
 8009e5c:	089b      	lsrs	r3, r3, #2
 8009e5e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009e60:	2300      	movs	r3, #0
 8009e62:	61bb      	str	r3, [r7, #24]
 8009e64:	e018      	b.n	8009e98 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009e66:	79fb      	ldrb	r3, [r7, #7]
 8009e68:	031a      	lsls	r2, r3, #12
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e72:	461a      	mov	r2, r3
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	3301      	adds	r3, #1
 8009e84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	3301      	adds	r3, #1
 8009e96:	61bb      	str	r3, [r7, #24]
 8009e98:	69ba      	ldr	r2, [r7, #24]
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d3e2      	bcc.n	8009e66 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3724      	adds	r7, #36	; 0x24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b08b      	sub	sp, #44	; 0x2c
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	60f8      	str	r0, [r7, #12]
 8009eb6:	60b9      	str	r1, [r7, #8]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009ec4:	88fb      	ldrh	r3, [r7, #6]
 8009ec6:	089b      	lsrs	r3, r3, #2
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009ecc:	88fb      	ldrh	r3, [r7, #6]
 8009ece:	f003 0303 	and.w	r3, r3, #3
 8009ed2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	623b      	str	r3, [r7, #32]
 8009ed8:	e014      	b.n	8009f04 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	3301      	adds	r3, #1
 8009eea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	3301      	adds	r3, #1
 8009ef0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	3301      	adds	r3, #1
 8009efc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009efe:	6a3b      	ldr	r3, [r7, #32]
 8009f00:	3301      	adds	r3, #1
 8009f02:	623b      	str	r3, [r7, #32]
 8009f04:	6a3a      	ldr	r2, [r7, #32]
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d3e6      	bcc.n	8009eda <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009f0c:	8bfb      	ldrh	r3, [r7, #30]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d01e      	beq.n	8009f50 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	f107 0310 	add.w	r3, r7, #16
 8009f22:	6812      	ldr	r2, [r2, #0]
 8009f24:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	00db      	lsls	r3, r3, #3
 8009f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f32:	b2da      	uxtb	r2, r3
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	701a      	strb	r2, [r3, #0]
      i++;
 8009f38:	6a3b      	ldr	r3, [r7, #32]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	623b      	str	r3, [r7, #32]
      pDest++;
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f40:	3301      	adds	r3, #1
 8009f42:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009f44:	8bfb      	ldrh	r3, [r7, #30]
 8009f46:	3b01      	subs	r3, #1
 8009f48:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009f4a:	8bfb      	ldrh	r3, [r7, #30]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1ea      	bne.n	8009f26 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	372c      	adds	r7, #44	; 0x2c
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b085      	sub	sp, #20
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	785b      	ldrb	r3, [r3, #1]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d12c      	bne.n	8009fd4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	db12      	blt.n	8009fb2 <USB_EPSetStall+0x54>
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00f      	beq.n	8009fb2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	0151      	lsls	r1, r2, #5
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	440a      	add	r2, r1
 8009fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009fb0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	015a      	lsls	r2, r3, #5
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	0151      	lsls	r1, r2, #5
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	440a      	add	r2, r1
 8009fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fd0:	6013      	str	r3, [r2, #0]
 8009fd2:	e02b      	b.n	800a02c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	015a      	lsls	r2, r3, #5
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	4413      	add	r3, r2
 8009fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	db12      	blt.n	800a00c <USB_EPSetStall+0xae>
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00f      	beq.n	800a00c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	0151      	lsls	r1, r2, #5
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	440a      	add	r2, r1
 800a002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a006:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a00a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	0151      	lsls	r1, r2, #5
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	440a      	add	r2, r1
 800a022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a026:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a02a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b085      	sub	sp, #20
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	785b      	ldrb	r3, [r3, #1]
 800a052:	2b01      	cmp	r3, #1
 800a054:	d128      	bne.n	800a0a8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	015a      	lsls	r2, r3, #5
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	4413      	add	r3, r2
 800a05e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	0151      	lsls	r1, r2, #5
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	440a      	add	r2, r1
 800a06c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a070:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a074:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	78db      	ldrb	r3, [r3, #3]
 800a07a:	2b03      	cmp	r3, #3
 800a07c:	d003      	beq.n	800a086 <USB_EPClearStall+0x4c>
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	78db      	ldrb	r3, [r3, #3]
 800a082:	2b02      	cmp	r3, #2
 800a084:	d138      	bne.n	800a0f8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	015a      	lsls	r2, r3, #5
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	0151      	lsls	r1, r2, #5
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	440a      	add	r2, r1
 800a09c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0a4:	6013      	str	r3, [r2, #0]
 800a0a6:	e027      	b.n	800a0f8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	015a      	lsls	r2, r3, #5
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	0151      	lsls	r1, r2, #5
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	440a      	add	r2, r1
 800a0be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	78db      	ldrb	r3, [r3, #3]
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d003      	beq.n	800a0d8 <USB_EPClearStall+0x9e>
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	78db      	ldrb	r3, [r3, #3]
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d10f      	bne.n	800a0f8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	015a      	lsls	r2, r3, #5
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	4413      	add	r3, r2
 800a0e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68ba      	ldr	r2, [r7, #8]
 800a0e8:	0151      	lsls	r1, r2, #5
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	440a      	add	r2, r1
 800a0ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0f6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a106:	b480      	push	{r7}
 800a108:	b085      	sub	sp, #20
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	460b      	mov	r3, r1
 800a110:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a124:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a128:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	78fb      	ldrb	r3, [r7, #3]
 800a134:	011b      	lsls	r3, r3, #4
 800a136:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a13a:	68f9      	ldr	r1, [r7, #12]
 800a13c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a140:	4313      	orrs	r3, r2
 800a142:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr

0800a152 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a152:	b480      	push	{r7}
 800a154:	b085      	sub	sp, #20
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a16c:	f023 0303 	bic.w	r3, r3, #3
 800a170:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a180:	f023 0302 	bic.w	r3, r3, #2
 800a184:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3714      	adds	r7, #20
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1ae:	f023 0303 	bic.w	r3, r3, #3
 800a1b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1c2:	f043 0302 	orr.w	r3, r3, #2
 800a1c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr

0800a1d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a1d6:	b480      	push	{r7}
 800a1d8:	b085      	sub	sp, #20
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3714      	adds	r7, #20
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a218:	69db      	ldr	r3, [r3, #28]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	4013      	ands	r3, r2
 800a21e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	0c1b      	lsrs	r3, r3, #16
}
 800a224:	4618      	mov	r0, r3
 800a226:	3714      	adds	r7, #20
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a24c:	69db      	ldr	r3, [r3, #28]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	4013      	ands	r3, r2
 800a252:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	b29b      	uxth	r3, r3
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	460b      	mov	r3, r1
 800a26e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a274:	78fb      	ldrb	r3, [r7, #3]
 800a276:	015a      	lsls	r2, r3, #5
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a28a:	695b      	ldr	r3, [r3, #20]
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	4013      	ands	r3, r2
 800a290:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a292:	68bb      	ldr	r3, [r7, #8]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3714      	adds	r7, #20
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b087      	sub	sp, #28
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a2c4:	78fb      	ldrb	r3, [r7, #3]
 800a2c6:	f003 030f 	and.w	r3, r3, #15
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a2d0:	01db      	lsls	r3, r3, #7
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a2da:	78fb      	ldrb	r3, [r7, #3]
 800a2dc:	015a      	lsls	r2, r3, #5
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a2ee:	68bb      	ldr	r3, [r7, #8]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	371c      	adds	r7, #28
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	695b      	ldr	r3, [r3, #20]
 800a308:	f003 0301 	and.w	r3, r3, #1
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a332:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a336:	f023 0307 	bic.w	r3, r3, #7
 800a33a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a34a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a34e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
	...

0800a360 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a360:	b480      	push	{r7}
 800a362:	b087      	sub	sp, #28
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	460b      	mov	r3, r1
 800a36a:	607a      	str	r2, [r7, #4]
 800a36c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	333c      	adds	r3, #60	; 0x3c
 800a376:	3304      	adds	r3, #4
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	4a26      	ldr	r2, [pc, #152]	; (800a418 <USB_EP0_OutStart+0xb8>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d90a      	bls.n	800a39a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a394:	d101      	bne.n	800a39a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	e037      	b.n	800a40a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	697a      	ldr	r2, [r7, #20]
 800a3b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3c8:	f043 0318 	orr.w	r3, r3, #24
 800a3cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a3e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a3e2:	7afb      	ldrb	r3, [r7, #11]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d10f      	bne.n	800a408 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a402:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a406:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	371c      	adds	r7, #28
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	4f54300a 	.word	0x4f54300a

0800a41c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3301      	adds	r3, #1
 800a42c:	60fb      	str	r3, [r7, #12]
 800a42e:	4a13      	ldr	r2, [pc, #76]	; (800a47c <USB_CoreReset+0x60>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d901      	bls.n	800a438 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a434:	2303      	movs	r3, #3
 800a436:	e01a      	b.n	800a46e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	daf3      	bge.n	800a428 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	f043 0201 	orr.w	r2, r3, #1
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	3301      	adds	r3, #1
 800a454:	60fb      	str	r3, [r7, #12]
 800a456:	4a09      	ldr	r2, [pc, #36]	; (800a47c <USB_CoreReset+0x60>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d901      	bls.n	800a460 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a45c:	2303      	movs	r3, #3
 800a45e:	e006      	b.n	800a46e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d0f1      	beq.n	800a450 <USB_CoreReset+0x34>

  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3714      	adds	r7, #20
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	00030d40 	.word	0x00030d40

0800a480 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a484:	4904      	ldr	r1, [pc, #16]	; (800a498 <MX_FATFS_Init+0x18>)
 800a486:	4805      	ldr	r0, [pc, #20]	; (800a49c <MX_FATFS_Init+0x1c>)
 800a488:	f004 fef2 	bl	800f270 <FATFS_LinkDriver>
 800a48c:	4603      	mov	r3, r0
 800a48e:	461a      	mov	r2, r3
 800a490:	4b03      	ldr	r3, [pc, #12]	; (800a4a0 <MX_FATFS_Init+0x20>)
 800a492:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a494:	bf00      	nop
 800a496:	bd80      	pop	{r7, pc}
 800a498:	2000ad98 	.word	0x2000ad98
 800a49c:	2000000c 	.word	0x2000000c
 800a4a0:	2000ad9c 	.word	0x2000ad9c

0800a4a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a4a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800a4be:	79fb      	ldrb	r3, [r7, #7]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 f9dd 	bl	800a880 <USER_SPI_initialize>
 800a4c6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800a4da:	79fb      	ldrb	r3, [r7, #7]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 fab9 	bl	800aa54 <USER_SPI_status>
 800a4e2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60b9      	str	r1, [r7, #8]
 800a4f4:	607a      	str	r2, [r7, #4]
 800a4f6:	603b      	str	r3, [r7, #0]
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800a4fc:	7bf8      	ldrb	r0, [r7, #15]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	68b9      	ldr	r1, [r7, #8]
 800a504:	f000 fabc 	bl	800aa80 <USER_SPI_read>
 800a508:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
 800a51c:	603b      	str	r3, [r7, #0]
 800a51e:	4603      	mov	r3, r0
 800a520:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800a522:	7bf8      	ldrb	r0, [r7, #15]
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	68b9      	ldr	r1, [r7, #8]
 800a52a:	f000 fb0f 	bl	800ab4c <USER_SPI_write>
 800a52e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	4603      	mov	r3, r0
 800a540:	603a      	str	r2, [r7, #0]
 800a542:	71fb      	strb	r3, [r7, #7]
 800a544:	460b      	mov	r3, r1
 800a546:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800a548:	79b9      	ldrb	r1, [r7, #6]
 800a54a:	79fb      	ldrb	r3, [r7, #7]
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	4618      	mov	r0, r3
 800a550:	f000 fb78 	bl	800ac44 <USER_SPI_ioctl>
 800a554:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a556:	4618      	mov	r0, r3
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
	...

0800a560 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800a568:	f7f9 fa44 	bl	80039f4 <HAL_GetTick>
 800a56c:	4603      	mov	r3, r0
 800a56e:	4a04      	ldr	r2, [pc, #16]	; (800a580 <SPI_Timer_On+0x20>)
 800a570:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800a572:	4a04      	ldr	r2, [pc, #16]	; (800a584 <SPI_Timer_On+0x24>)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6013      	str	r3, [r2, #0]
}
 800a578:	bf00      	nop
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	2000b200 	.word	0x2000b200
 800a584:	2000b204 	.word	0x2000b204

0800a588 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800a588:	b580      	push	{r7, lr}
 800a58a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a58c:	f7f9 fa32 	bl	80039f4 <HAL_GetTick>
 800a590:	4602      	mov	r2, r0
 800a592:	4b06      	ldr	r3, [pc, #24]	; (800a5ac <SPI_Timer_Status+0x24>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	1ad2      	subs	r2, r2, r3
 800a598:	4b05      	ldr	r3, [pc, #20]	; (800a5b0 <SPI_Timer_Status+0x28>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	bf34      	ite	cc
 800a5a0:	2301      	movcc	r3, #1
 800a5a2:	2300      	movcs	r3, #0
 800a5a4:	b2db      	uxtb	r3, r3
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	2000b200 	.word	0x2000b200
 800a5b0:	2000b204 	.word	0x2000b204

0800a5b4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b086      	sub	sp, #24
 800a5b8:	af02      	add	r7, sp, #8
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a5be:	f107 020f 	add.w	r2, r7, #15
 800a5c2:	1df9      	adds	r1, r7, #7
 800a5c4:	2332      	movs	r3, #50	; 0x32
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	4804      	ldr	r0, [pc, #16]	; (800a5dc <xchg_spi+0x28>)
 800a5cc:	f7fc fe6b 	bl	80072a6 <HAL_SPI_TransmitReceive>
    return rxDat;
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20009f4c 	.word	0x20009f4c

0800a5e0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800a5e0:	b590      	push	{r4, r7, lr}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	60fb      	str	r3, [r7, #12]
 800a5ee:	e00a      	b.n	800a606 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	18d4      	adds	r4, r2, r3
 800a5f6:	20ff      	movs	r0, #255	; 0xff
 800a5f8:	f7ff ffdc 	bl	800a5b4 <xchg_spi>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	3301      	adds	r3, #1
 800a604:	60fb      	str	r3, [r7, #12]
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d3f0      	bcc.n	800a5f0 <rcvr_spi_multi+0x10>
	}
}
 800a60e:	bf00      	nop
 800a610:	bf00      	nop
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	bd90      	pop	{r4, r7, pc}

0800a618 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800a622:	2300      	movs	r3, #0
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	e009      	b.n	800a63c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	4413      	add	r3, r2
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	4618      	mov	r0, r3
 800a632:	f7ff ffbf 	bl	800a5b4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3301      	adds	r3, #1
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	429a      	cmp	r2, r3
 800a642:	d3f1      	bcc.n	800a628 <xmit_spi_multi+0x10>
	}
}
 800a644:	bf00      	nop
 800a646:	bf00      	nop
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b086      	sub	sp, #24
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800a656:	f7f9 f9cd 	bl	80039f4 <HAL_GetTick>
 800a65a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800a660:	20ff      	movs	r0, #255	; 0xff
 800a662:	f7ff ffa7 	bl	800a5b4 <xchg_spi>
 800a666:	4603      	mov	r3, r0
 800a668:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
 800a66c:	2bff      	cmp	r3, #255	; 0xff
 800a66e:	d007      	beq.n	800a680 <wait_ready+0x32>
 800a670:	f7f9 f9c0 	bl	80039f4 <HAL_GetTick>
 800a674:	4602      	mov	r2, r0
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d8ef      	bhi.n	800a660 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800a680:	7bfb      	ldrb	r3, [r7, #15]
 800a682:	2bff      	cmp	r3, #255	; 0xff
 800a684:	bf0c      	ite	eq
 800a686:	2301      	moveq	r3, #1
 800a688:	2300      	movne	r3, #0
 800a68a:	b2db      	uxtb	r3, r3
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3718      	adds	r7, #24
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800a698:	2201      	movs	r2, #1
 800a69a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a69e:	4804      	ldr	r0, [pc, #16]	; (800a6b0 <despiselect+0x1c>)
 800a6a0:	f7f9 fed8 	bl	8004454 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800a6a4:	20ff      	movs	r0, #255	; 0xff
 800a6a6:	f7ff ff85 	bl	800a5b4 <xchg_spi>

}
 800a6aa:	bf00      	nop
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	40021400 	.word	0x40021400

0800a6b4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a6be:	480a      	ldr	r0, [pc, #40]	; (800a6e8 <spiselect+0x34>)
 800a6c0:	f7f9 fec8 	bl	8004454 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800a6c4:	20ff      	movs	r0, #255	; 0xff
 800a6c6:	f7ff ff75 	bl	800a5b4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800a6ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a6ce:	f7ff ffbe 	bl	800a64e <wait_ready>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d001      	beq.n	800a6dc <spiselect+0x28>
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e002      	b.n	800a6e2 <spiselect+0x2e>

	despiselect();
 800a6dc:	f7ff ffda 	bl	800a694 <despiselect>
	return 0;	/* Timeout */
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	40021400 	.word	0x40021400

0800a6ec <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800a6f6:	20c8      	movs	r0, #200	; 0xc8
 800a6f8:	f7ff ff32 	bl	800a560 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800a6fc:	20ff      	movs	r0, #255	; 0xff
 800a6fe:	f7ff ff59 	bl	800a5b4 <xchg_spi>
 800a702:	4603      	mov	r3, r0
 800a704:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800a706:	7bfb      	ldrb	r3, [r7, #15]
 800a708:	2bff      	cmp	r3, #255	; 0xff
 800a70a:	d104      	bne.n	800a716 <rcvr_datablock+0x2a>
 800a70c:	f7ff ff3c 	bl	800a588 <SPI_Timer_Status>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1f2      	bne.n	800a6fc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800a716:	7bfb      	ldrb	r3, [r7, #15]
 800a718:	2bfe      	cmp	r3, #254	; 0xfe
 800a71a:	d001      	beq.n	800a720 <rcvr_datablock+0x34>
 800a71c:	2300      	movs	r3, #0
 800a71e:	e00a      	b.n	800a736 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800a720:	6839      	ldr	r1, [r7, #0]
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7ff ff5c 	bl	800a5e0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800a728:	20ff      	movs	r0, #255	; 0xff
 800a72a:	f7ff ff43 	bl	800a5b4 <xchg_spi>
 800a72e:	20ff      	movs	r0, #255	; 0xff
 800a730:	f7ff ff40 	bl	800a5b4 <xchg_spi>

	return 1;						/* Function succeeded */
 800a734:	2301      	movs	r3, #1
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	460b      	mov	r3, r1
 800a748:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800a74a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a74e:	f7ff ff7e 	bl	800a64e <wait_ready>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d101      	bne.n	800a75c <xmit_datablock+0x1e>
 800a758:	2300      	movs	r3, #0
 800a75a:	e01e      	b.n	800a79a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800a75c:	78fb      	ldrb	r3, [r7, #3]
 800a75e:	4618      	mov	r0, r3
 800a760:	f7ff ff28 	bl	800a5b4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800a764:	78fb      	ldrb	r3, [r7, #3]
 800a766:	2bfd      	cmp	r3, #253	; 0xfd
 800a768:	d016      	beq.n	800a798 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800a76a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7ff ff52 	bl	800a618 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800a774:	20ff      	movs	r0, #255	; 0xff
 800a776:	f7ff ff1d 	bl	800a5b4 <xchg_spi>
 800a77a:	20ff      	movs	r0, #255	; 0xff
 800a77c:	f7ff ff1a 	bl	800a5b4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800a780:	20ff      	movs	r0, #255	; 0xff
 800a782:	f7ff ff17 	bl	800a5b4 <xchg_spi>
 800a786:	4603      	mov	r3, r0
 800a788:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
 800a78c:	f003 031f 	and.w	r3, r3, #31
 800a790:	2b05      	cmp	r3, #5
 800a792:	d001      	beq.n	800a798 <xmit_datablock+0x5a>
 800a794:	2300      	movs	r3, #0
 800a796:	e000      	b.n	800a79a <xmit_datablock+0x5c>
	}
	return 1;
 800a798:	2301      	movs	r3, #1
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b084      	sub	sp, #16
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	6039      	str	r1, [r7, #0]
 800a7ac:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800a7ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	da0e      	bge.n	800a7d4 <send_cmd+0x32>
		cmd &= 0x7F;
 800a7b6:	79fb      	ldrb	r3, [r7, #7]
 800a7b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7bc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800a7be:	2100      	movs	r1, #0
 800a7c0:	2037      	movs	r0, #55	; 0x37
 800a7c2:	f7ff ffee 	bl	800a7a2 <send_cmd>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800a7ca:	7bbb      	ldrb	r3, [r7, #14]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d901      	bls.n	800a7d4 <send_cmd+0x32>
 800a7d0:	7bbb      	ldrb	r3, [r7, #14]
 800a7d2:	e051      	b.n	800a878 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	2b0c      	cmp	r3, #12
 800a7d8:	d008      	beq.n	800a7ec <send_cmd+0x4a>
		despiselect();
 800a7da:	f7ff ff5b 	bl	800a694 <despiselect>
		if (!spiselect()) return 0xFF;
 800a7de:	f7ff ff69 	bl	800a6b4 <spiselect>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d101      	bne.n	800a7ec <send_cmd+0x4a>
 800a7e8:	23ff      	movs	r3, #255	; 0xff
 800a7ea:	e045      	b.n	800a878 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800a7ec:	79fb      	ldrb	r3, [r7, #7]
 800a7ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7ff fedd 	bl	800a5b4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	0e1b      	lsrs	r3, r3, #24
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	4618      	mov	r0, r3
 800a802:	f7ff fed7 	bl	800a5b4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	0c1b      	lsrs	r3, r3, #16
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7ff fed1 	bl	800a5b4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	0a1b      	lsrs	r3, r3, #8
 800a816:	b2db      	uxtb	r3, r3
 800a818:	4618      	mov	r0, r3
 800a81a:	f7ff fecb 	bl	800a5b4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	b2db      	uxtb	r3, r3
 800a822:	4618      	mov	r0, r3
 800a824:	f7ff fec6 	bl	800a5b4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800a828:	2301      	movs	r3, #1
 800a82a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d101      	bne.n	800a836 <send_cmd+0x94>
 800a832:	2395      	movs	r3, #149	; 0x95
 800a834:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800a836:	79fb      	ldrb	r3, [r7, #7]
 800a838:	2b08      	cmp	r3, #8
 800a83a:	d101      	bne.n	800a840 <send_cmd+0x9e>
 800a83c:	2387      	movs	r3, #135	; 0x87
 800a83e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800a840:	7bfb      	ldrb	r3, [r7, #15]
 800a842:	4618      	mov	r0, r3
 800a844:	f7ff feb6 	bl	800a5b4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800a848:	79fb      	ldrb	r3, [r7, #7]
 800a84a:	2b0c      	cmp	r3, #12
 800a84c:	d102      	bne.n	800a854 <send_cmd+0xb2>
 800a84e:	20ff      	movs	r0, #255	; 0xff
 800a850:	f7ff feb0 	bl	800a5b4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800a854:	230a      	movs	r3, #10
 800a856:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800a858:	20ff      	movs	r0, #255	; 0xff
 800a85a:	f7ff feab 	bl	800a5b4 <xchg_spi>
 800a85e:	4603      	mov	r3, r0
 800a860:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800a862:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a866:	2b00      	cmp	r3, #0
 800a868:	da05      	bge.n	800a876 <send_cmd+0xd4>
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	73fb      	strb	r3, [r7, #15]
 800a870:	7bfb      	ldrb	r3, [r7, #15]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1f0      	bne.n	800a858 <send_cmd+0xb6>

	return res;							/* Return received response */
 800a876:	7bbb      	ldrb	r3, [r7, #14]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a880:	b590      	push	{r4, r7, lr}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	4603      	mov	r3, r0
 800a888:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <USER_SPI_initialize+0x14>
 800a890:	2301      	movs	r3, #1
 800a892:	e0d4      	b.n	800aa3e <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800a894:	4b6c      	ldr	r3, [pc, #432]	; (800aa48 <USER_SPI_initialize+0x1c8>)
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	f003 0302 	and.w	r3, r3, #2
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d003      	beq.n	800a8aa <USER_SPI_initialize+0x2a>
 800a8a2:	4b69      	ldr	r3, [pc, #420]	; (800aa48 <USER_SPI_initialize+0x1c8>)
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	e0c9      	b.n	800aa3e <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800a8aa:	4b68      	ldr	r3, [pc, #416]	; (800aa4c <USER_SPI_initialize+0x1cc>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	4b66      	ldr	r3, [pc, #408]	; (800aa4c <USER_SPI_initialize+0x1cc>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800a8b8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800a8ba:	230a      	movs	r3, #10
 800a8bc:	73fb      	strb	r3, [r7, #15]
 800a8be:	e005      	b.n	800a8cc <USER_SPI_initialize+0x4c>
 800a8c0:	20ff      	movs	r0, #255	; 0xff
 800a8c2:	f7ff fe77 	bl	800a5b4 <xchg_spi>
 800a8c6:	7bfb      	ldrb	r3, [r7, #15]
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	73fb      	strb	r3, [r7, #15]
 800a8cc:	7bfb      	ldrb	r3, [r7, #15]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1f6      	bne.n	800a8c0 <USER_SPI_initialize+0x40>

	ty = 0;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	2000      	movs	r0, #0
 800a8da:	f7ff ff62 	bl	800a7a2 <send_cmd>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	f040 808b 	bne.w	800a9fc <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800a8e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a8ea:	f7ff fe39 	bl	800a560 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a8ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a8f2:	2008      	movs	r0, #8
 800a8f4:	f7ff ff55 	bl	800a7a2 <send_cmd>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d151      	bne.n	800a9a2 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800a8fe:	2300      	movs	r3, #0
 800a900:	73fb      	strb	r3, [r7, #15]
 800a902:	e00d      	b.n	800a920 <USER_SPI_initialize+0xa0>
 800a904:	7bfc      	ldrb	r4, [r7, #15]
 800a906:	20ff      	movs	r0, #255	; 0xff
 800a908:	f7ff fe54 	bl	800a5b4 <xchg_spi>
 800a90c:	4603      	mov	r3, r0
 800a90e:	461a      	mov	r2, r3
 800a910:	f107 0310 	add.w	r3, r7, #16
 800a914:	4423      	add	r3, r4
 800a916:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a91a:	7bfb      	ldrb	r3, [r7, #15]
 800a91c:	3301      	adds	r3, #1
 800a91e:	73fb      	strb	r3, [r7, #15]
 800a920:	7bfb      	ldrb	r3, [r7, #15]
 800a922:	2b03      	cmp	r3, #3
 800a924:	d9ee      	bls.n	800a904 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a926:	7abb      	ldrb	r3, [r7, #10]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d167      	bne.n	800a9fc <USER_SPI_initialize+0x17c>
 800a92c:	7afb      	ldrb	r3, [r7, #11]
 800a92e:	2baa      	cmp	r3, #170	; 0xaa
 800a930:	d164      	bne.n	800a9fc <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a932:	bf00      	nop
 800a934:	f7ff fe28 	bl	800a588 <SPI_Timer_Status>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d007      	beq.n	800a94e <USER_SPI_initialize+0xce>
 800a93e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a942:	20a9      	movs	r0, #169	; 0xa9
 800a944:	f7ff ff2d 	bl	800a7a2 <send_cmd>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1f2      	bne.n	800a934 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a94e:	f7ff fe1b 	bl	800a588 <SPI_Timer_Status>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d051      	beq.n	800a9fc <USER_SPI_initialize+0x17c>
 800a958:	2100      	movs	r1, #0
 800a95a:	203a      	movs	r0, #58	; 0x3a
 800a95c:	f7ff ff21 	bl	800a7a2 <send_cmd>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d14a      	bne.n	800a9fc <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a966:	2300      	movs	r3, #0
 800a968:	73fb      	strb	r3, [r7, #15]
 800a96a:	e00d      	b.n	800a988 <USER_SPI_initialize+0x108>
 800a96c:	7bfc      	ldrb	r4, [r7, #15]
 800a96e:	20ff      	movs	r0, #255	; 0xff
 800a970:	f7ff fe20 	bl	800a5b4 <xchg_spi>
 800a974:	4603      	mov	r3, r0
 800a976:	461a      	mov	r2, r3
 800a978:	f107 0310 	add.w	r3, r7, #16
 800a97c:	4423      	add	r3, r4
 800a97e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a982:	7bfb      	ldrb	r3, [r7, #15]
 800a984:	3301      	adds	r3, #1
 800a986:	73fb      	strb	r3, [r7, #15]
 800a988:	7bfb      	ldrb	r3, [r7, #15]
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d9ee      	bls.n	800a96c <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a98e:	7a3b      	ldrb	r3, [r7, #8]
 800a990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a994:	2b00      	cmp	r3, #0
 800a996:	d001      	beq.n	800a99c <USER_SPI_initialize+0x11c>
 800a998:	230c      	movs	r3, #12
 800a99a:	e000      	b.n	800a99e <USER_SPI_initialize+0x11e>
 800a99c:	2304      	movs	r3, #4
 800a99e:	737b      	strb	r3, [r7, #13]
 800a9a0:	e02c      	b.n	800a9fc <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	20a9      	movs	r0, #169	; 0xa9
 800a9a6:	f7ff fefc 	bl	800a7a2 <send_cmd>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d804      	bhi.n	800a9ba <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	737b      	strb	r3, [r7, #13]
 800a9b4:	23a9      	movs	r3, #169	; 0xa9
 800a9b6:	73bb      	strb	r3, [r7, #14]
 800a9b8:	e003      	b.n	800a9c2 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	737b      	strb	r3, [r7, #13]
 800a9be:	2301      	movs	r3, #1
 800a9c0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a9c2:	bf00      	nop
 800a9c4:	f7ff fde0 	bl	800a588 <SPI_Timer_Status>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d007      	beq.n	800a9de <USER_SPI_initialize+0x15e>
 800a9ce:	7bbb      	ldrb	r3, [r7, #14]
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7ff fee5 	bl	800a7a2 <send_cmd>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1f2      	bne.n	800a9c4 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a9de:	f7ff fdd3 	bl	800a588 <SPI_Timer_Status>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d007      	beq.n	800a9f8 <USER_SPI_initialize+0x178>
 800a9e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a9ec:	2010      	movs	r0, #16
 800a9ee:	f7ff fed8 	bl	800a7a2 <send_cmd>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <USER_SPI_initialize+0x17c>
				ty = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800a9fc:	4a14      	ldr	r2, [pc, #80]	; (800aa50 <USER_SPI_initialize+0x1d0>)
 800a9fe:	7b7b      	ldrb	r3, [r7, #13]
 800aa00:	7013      	strb	r3, [r2, #0]
	despiselect();
 800aa02:	f7ff fe47 	bl	800a694 <despiselect>

	if (ty) {			/* OK */
 800aa06:	7b7b      	ldrb	r3, [r7, #13]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d012      	beq.n	800aa32 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800aa0c:	4b0f      	ldr	r3, [pc, #60]	; (800aa4c <USER_SPI_initialize+0x1cc>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800aa16:	4b0d      	ldr	r3, [pc, #52]	; (800aa4c <USER_SPI_initialize+0x1cc>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f042 0218 	orr.w	r2, r2, #24
 800aa1e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800aa20:	4b09      	ldr	r3, [pc, #36]	; (800aa48 <USER_SPI_initialize+0x1c8>)
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	f023 0301 	bic.w	r3, r3, #1
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	4b06      	ldr	r3, [pc, #24]	; (800aa48 <USER_SPI_initialize+0x1c8>)
 800aa2e:	701a      	strb	r2, [r3, #0]
 800aa30:	e002      	b.n	800aa38 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800aa32:	4b05      	ldr	r3, [pc, #20]	; (800aa48 <USER_SPI_initialize+0x1c8>)
 800aa34:	2201      	movs	r2, #1
 800aa36:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800aa38:	4b03      	ldr	r3, [pc, #12]	; (800aa48 <USER_SPI_initialize+0x1c8>)
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	b2db      	uxtb	r3, r3
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd90      	pop	{r4, r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20000020 	.word	0x20000020
 800aa4c:	20009f4c 	.word	0x20009f4c
 800aa50:	200004e8 	.word	0x200004e8

0800aa54 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800aa5e:	79fb      	ldrb	r3, [r7, #7]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d001      	beq.n	800aa68 <USER_SPI_status+0x14>
 800aa64:	2301      	movs	r3, #1
 800aa66:	e002      	b.n	800aa6e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800aa68:	4b04      	ldr	r3, [pc, #16]	; (800aa7c <USER_SPI_status+0x28>)
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	b2db      	uxtb	r3, r3
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	370c      	adds	r7, #12
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	20000020 	.word	0x20000020

0800aa80 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60b9      	str	r1, [r7, #8]
 800aa88:	607a      	str	r2, [r7, #4]
 800aa8a:	603b      	str	r3, [r7, #0]
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800aa90:	7bfb      	ldrb	r3, [r7, #15]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d102      	bne.n	800aa9c <USER_SPI_read+0x1c>
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d101      	bne.n	800aaa0 <USER_SPI_read+0x20>
 800aa9c:	2304      	movs	r3, #4
 800aa9e:	e04d      	b.n	800ab3c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800aaa0:	4b28      	ldr	r3, [pc, #160]	; (800ab44 <USER_SPI_read+0xc4>)
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	f003 0301 	and.w	r3, r3, #1
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d001      	beq.n	800aab2 <USER_SPI_read+0x32>
 800aaae:	2303      	movs	r3, #3
 800aab0:	e044      	b.n	800ab3c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800aab2:	4b25      	ldr	r3, [pc, #148]	; (800ab48 <USER_SPI_read+0xc8>)
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	f003 0308 	and.w	r3, r3, #8
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d102      	bne.n	800aac4 <USER_SPI_read+0x44>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	025b      	lsls	r3, r3, #9
 800aac2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d111      	bne.n	800aaee <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800aaca:	6879      	ldr	r1, [r7, #4]
 800aacc:	2011      	movs	r0, #17
 800aace:	f7ff fe68 	bl	800a7a2 <send_cmd>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d129      	bne.n	800ab2c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800aad8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aadc:	68b8      	ldr	r0, [r7, #8]
 800aade:	f7ff fe05 	bl	800a6ec <rcvr_datablock>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d021      	beq.n	800ab2c <USER_SPI_read+0xac>
			count = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	603b      	str	r3, [r7, #0]
 800aaec:	e01e      	b.n	800ab2c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	2012      	movs	r0, #18
 800aaf2:	f7ff fe56 	bl	800a7a2 <send_cmd>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d117      	bne.n	800ab2c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800aafc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab00:	68b8      	ldr	r0, [r7, #8]
 800ab02:	f7ff fdf3 	bl	800a6ec <rcvr_datablock>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00a      	beq.n	800ab22 <USER_SPI_read+0xa2>
				buff += 512;
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ab12:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	3b01      	subs	r3, #1
 800ab18:	603b      	str	r3, [r7, #0]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1ed      	bne.n	800aafc <USER_SPI_read+0x7c>
 800ab20:	e000      	b.n	800ab24 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800ab22:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800ab24:	2100      	movs	r1, #0
 800ab26:	200c      	movs	r0, #12
 800ab28:	f7ff fe3b 	bl	800a7a2 <send_cmd>
		}
	}
	despiselect();
 800ab2c:	f7ff fdb2 	bl	800a694 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	bf14      	ite	ne
 800ab36:	2301      	movne	r3, #1
 800ab38:	2300      	moveq	r3, #0
 800ab3a:	b2db      	uxtb	r3, r3
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	20000020 	.word	0x20000020
 800ab48:	200004e8 	.word	0x200004e8

0800ab4c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60b9      	str	r1, [r7, #8]
 800ab54:	607a      	str	r2, [r7, #4]
 800ab56:	603b      	str	r3, [r7, #0]
 800ab58:	4603      	mov	r3, r0
 800ab5a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d102      	bne.n	800ab68 <USER_SPI_write+0x1c>
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <USER_SPI_write+0x20>
 800ab68:	2304      	movs	r3, #4
 800ab6a:	e063      	b.n	800ac34 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800ab6c:	4b33      	ldr	r3, [pc, #204]	; (800ac3c <USER_SPI_write+0xf0>)
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <USER_SPI_write+0x32>
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	e05a      	b.n	800ac34 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800ab7e:	4b2f      	ldr	r3, [pc, #188]	; (800ac3c <USER_SPI_write+0xf0>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	f003 0304 	and.w	r3, r3, #4
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <USER_SPI_write+0x44>
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	e051      	b.n	800ac34 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800ab90:	4b2b      	ldr	r3, [pc, #172]	; (800ac40 <USER_SPI_write+0xf4>)
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	f003 0308 	and.w	r3, r3, #8
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d102      	bne.n	800aba2 <USER_SPI_write+0x56>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	025b      	lsls	r3, r3, #9
 800aba0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d110      	bne.n	800abca <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800aba8:	6879      	ldr	r1, [r7, #4]
 800abaa:	2018      	movs	r0, #24
 800abac:	f7ff fdf9 	bl	800a7a2 <send_cmd>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d136      	bne.n	800ac24 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800abb6:	21fe      	movs	r1, #254	; 0xfe
 800abb8:	68b8      	ldr	r0, [r7, #8]
 800abba:	f7ff fdc0 	bl	800a73e <xmit_datablock>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d02f      	beq.n	800ac24 <USER_SPI_write+0xd8>
			count = 0;
 800abc4:	2300      	movs	r3, #0
 800abc6:	603b      	str	r3, [r7, #0]
 800abc8:	e02c      	b.n	800ac24 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800abca:	4b1d      	ldr	r3, [pc, #116]	; (800ac40 <USER_SPI_write+0xf4>)
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	f003 0306 	and.w	r3, r3, #6
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d003      	beq.n	800abde <USER_SPI_write+0x92>
 800abd6:	6839      	ldr	r1, [r7, #0]
 800abd8:	2097      	movs	r0, #151	; 0x97
 800abda:	f7ff fde2 	bl	800a7a2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800abde:	6879      	ldr	r1, [r7, #4]
 800abe0:	2019      	movs	r0, #25
 800abe2:	f7ff fdde 	bl	800a7a2 <send_cmd>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d11b      	bne.n	800ac24 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800abec:	21fc      	movs	r1, #252	; 0xfc
 800abee:	68b8      	ldr	r0, [r7, #8]
 800abf0:	f7ff fda5 	bl	800a73e <xmit_datablock>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00a      	beq.n	800ac10 <USER_SPI_write+0xc4>
				buff += 512;
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ac00:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	3b01      	subs	r3, #1
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1ee      	bne.n	800abec <USER_SPI_write+0xa0>
 800ac0e:	e000      	b.n	800ac12 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800ac10:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800ac12:	21fd      	movs	r1, #253	; 0xfd
 800ac14:	2000      	movs	r0, #0
 800ac16:	f7ff fd92 	bl	800a73e <xmit_datablock>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d101      	bne.n	800ac24 <USER_SPI_write+0xd8>
 800ac20:	2301      	movs	r3, #1
 800ac22:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800ac24:	f7ff fd36 	bl	800a694 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	bf14      	ite	ne
 800ac2e:	2301      	movne	r3, #1
 800ac30:	2300      	moveq	r3, #0
 800ac32:	b2db      	uxtb	r3, r3
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	20000020 	.word	0x20000020
 800ac40:	200004e8 	.word	0x200004e8

0800ac44 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b08c      	sub	sp, #48	; 0x30
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	603a      	str	r2, [r7, #0]
 800ac4e:	71fb      	strb	r3, [r7, #7]
 800ac50:	460b      	mov	r3, r1
 800ac52:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800ac54:	79fb      	ldrb	r3, [r7, #7]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d001      	beq.n	800ac5e <USER_SPI_ioctl+0x1a>
 800ac5a:	2304      	movs	r3, #4
 800ac5c:	e15a      	b.n	800af14 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ac5e:	4baf      	ldr	r3, [pc, #700]	; (800af1c <USER_SPI_ioctl+0x2d8>)
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	f003 0301 	and.w	r3, r3, #1
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d001      	beq.n	800ac70 <USER_SPI_ioctl+0x2c>
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	e151      	b.n	800af14 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800ac76:	79bb      	ldrb	r3, [r7, #6]
 800ac78:	2b04      	cmp	r3, #4
 800ac7a:	f200 8136 	bhi.w	800aeea <USER_SPI_ioctl+0x2a6>
 800ac7e:	a201      	add	r2, pc, #4	; (adr r2, 800ac84 <USER_SPI_ioctl+0x40>)
 800ac80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac84:	0800ac99 	.word	0x0800ac99
 800ac88:	0800acad 	.word	0x0800acad
 800ac8c:	0800aeeb 	.word	0x0800aeeb
 800ac90:	0800ad59 	.word	0x0800ad59
 800ac94:	0800ae4f 	.word	0x0800ae4f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800ac98:	f7ff fd0c 	bl	800a6b4 <spiselect>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f000 8127 	beq.w	800aef2 <USER_SPI_ioctl+0x2ae>
 800aca4:	2300      	movs	r3, #0
 800aca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800acaa:	e122      	b.n	800aef2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800acac:	2100      	movs	r1, #0
 800acae:	2009      	movs	r0, #9
 800acb0:	f7ff fd77 	bl	800a7a2 <send_cmd>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f040 811d 	bne.w	800aef6 <USER_SPI_ioctl+0x2b2>
 800acbc:	f107 030c 	add.w	r3, r7, #12
 800acc0:	2110      	movs	r1, #16
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7ff fd12 	bl	800a6ec <rcvr_datablock>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	f000 8113 	beq.w	800aef6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800acd0:	7b3b      	ldrb	r3, [r7, #12]
 800acd2:	099b      	lsrs	r3, r3, #6
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d111      	bne.n	800acfe <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800acda:	7d7b      	ldrb	r3, [r7, #21]
 800acdc:	461a      	mov	r2, r3
 800acde:	7d3b      	ldrb	r3, [r7, #20]
 800ace0:	021b      	lsls	r3, r3, #8
 800ace2:	4413      	add	r3, r2
 800ace4:	461a      	mov	r2, r3
 800ace6:	7cfb      	ldrb	r3, [r7, #19]
 800ace8:	041b      	lsls	r3, r3, #16
 800acea:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800acee:	4413      	add	r3, r2
 800acf0:	3301      	adds	r3, #1
 800acf2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	029a      	lsls	r2, r3, #10
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	601a      	str	r2, [r3, #0]
 800acfc:	e028      	b.n	800ad50 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800acfe:	7c7b      	ldrb	r3, [r7, #17]
 800ad00:	f003 030f 	and.w	r3, r3, #15
 800ad04:	b2da      	uxtb	r2, r3
 800ad06:	7dbb      	ldrb	r3, [r7, #22]
 800ad08:	09db      	lsrs	r3, r3, #7
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	4413      	add	r3, r2
 800ad0e:	b2da      	uxtb	r2, r3
 800ad10:	7d7b      	ldrb	r3, [r7, #21]
 800ad12:	005b      	lsls	r3, r3, #1
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	f003 0306 	and.w	r3, r3, #6
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	4413      	add	r3, r2
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	3302      	adds	r3, #2
 800ad22:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800ad26:	7d3b      	ldrb	r3, [r7, #20]
 800ad28:	099b      	lsrs	r3, r3, #6
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	7cfb      	ldrb	r3, [r7, #19]
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	441a      	add	r2, r3
 800ad34:	7cbb      	ldrb	r3, [r7, #18]
 800ad36:	029b      	lsls	r3, r3, #10
 800ad38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ad3c:	4413      	add	r3, r2
 800ad3e:	3301      	adds	r3, #1
 800ad40:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800ad42:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ad46:	3b09      	subs	r3, #9
 800ad48:	69fa      	ldr	r2, [r7, #28]
 800ad4a:	409a      	lsls	r2, r3
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800ad50:	2300      	movs	r3, #0
 800ad52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800ad56:	e0ce      	b.n	800aef6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800ad58:	4b71      	ldr	r3, [pc, #452]	; (800af20 <USER_SPI_ioctl+0x2dc>)
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	f003 0304 	and.w	r3, r3, #4
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d031      	beq.n	800adc8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800ad64:	2100      	movs	r1, #0
 800ad66:	208d      	movs	r0, #141	; 0x8d
 800ad68:	f7ff fd1b 	bl	800a7a2 <send_cmd>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f040 80c3 	bne.w	800aefa <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800ad74:	20ff      	movs	r0, #255	; 0xff
 800ad76:	f7ff fc1d 	bl	800a5b4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800ad7a:	f107 030c 	add.w	r3, r7, #12
 800ad7e:	2110      	movs	r1, #16
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7ff fcb3 	bl	800a6ec <rcvr_datablock>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 80b6 	beq.w	800aefa <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800ad8e:	2330      	movs	r3, #48	; 0x30
 800ad90:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ad94:	e007      	b.n	800ada6 <USER_SPI_ioctl+0x162>
 800ad96:	20ff      	movs	r0, #255	; 0xff
 800ad98:	f7ff fc0c 	bl	800a5b4 <xchg_spi>
 800ad9c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ada0:	3b01      	subs	r3, #1
 800ada2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ada6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1f3      	bne.n	800ad96 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800adae:	7dbb      	ldrb	r3, [r7, #22]
 800adb0:	091b      	lsrs	r3, r3, #4
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	461a      	mov	r2, r3
 800adb6:	2310      	movs	r3, #16
 800adb8:	fa03 f202 	lsl.w	r2, r3, r2
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800adc0:	2300      	movs	r3, #0
 800adc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800adc6:	e098      	b.n	800aefa <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800adc8:	2100      	movs	r1, #0
 800adca:	2009      	movs	r0, #9
 800adcc:	f7ff fce9 	bl	800a7a2 <send_cmd>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	f040 8091 	bne.w	800aefa <USER_SPI_ioctl+0x2b6>
 800add8:	f107 030c 	add.w	r3, r7, #12
 800addc:	2110      	movs	r1, #16
 800adde:	4618      	mov	r0, r3
 800ade0:	f7ff fc84 	bl	800a6ec <rcvr_datablock>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f000 8087 	beq.w	800aefa <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800adec:	4b4c      	ldr	r3, [pc, #304]	; (800af20 <USER_SPI_ioctl+0x2dc>)
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	f003 0302 	and.w	r3, r3, #2
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d012      	beq.n	800ae1e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800adf8:	7dbb      	ldrb	r3, [r7, #22]
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800ae00:	7dfa      	ldrb	r2, [r7, #23]
 800ae02:	09d2      	lsrs	r2, r2, #7
 800ae04:	b2d2      	uxtb	r2, r2
 800ae06:	4413      	add	r3, r2
 800ae08:	1c5a      	adds	r2, r3, #1
 800ae0a:	7e7b      	ldrb	r3, [r7, #25]
 800ae0c:	099b      	lsrs	r3, r3, #6
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	3b01      	subs	r3, #1
 800ae12:	fa02 f303 	lsl.w	r3, r2, r3
 800ae16:	461a      	mov	r2, r3
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	e013      	b.n	800ae46 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800ae1e:	7dbb      	ldrb	r3, [r7, #22]
 800ae20:	109b      	asrs	r3, r3, #2
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	f003 031f 	and.w	r3, r3, #31
 800ae28:	3301      	adds	r3, #1
 800ae2a:	7dfa      	ldrb	r2, [r7, #23]
 800ae2c:	00d2      	lsls	r2, r2, #3
 800ae2e:	f002 0218 	and.w	r2, r2, #24
 800ae32:	7df9      	ldrb	r1, [r7, #23]
 800ae34:	0949      	lsrs	r1, r1, #5
 800ae36:	b2c9      	uxtb	r1, r1
 800ae38:	440a      	add	r2, r1
 800ae3a:	3201      	adds	r2, #1
 800ae3c:	fb02 f303 	mul.w	r3, r2, r3
 800ae40:	461a      	mov	r2, r3
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800ae4c:	e055      	b.n	800aefa <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800ae4e:	4b34      	ldr	r3, [pc, #208]	; (800af20 <USER_SPI_ioctl+0x2dc>)
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	f003 0306 	and.w	r3, r3, #6
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d051      	beq.n	800aefe <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800ae5a:	f107 020c 	add.w	r2, r7, #12
 800ae5e:	79fb      	ldrb	r3, [r7, #7]
 800ae60:	210b      	movs	r1, #11
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7ff feee 	bl	800ac44 <USER_SPI_ioctl>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d149      	bne.n	800af02 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ae6e:	7b3b      	ldrb	r3, [r7, #12]
 800ae70:	099b      	lsrs	r3, r3, #6
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d104      	bne.n	800ae82 <USER_SPI_ioctl+0x23e>
 800ae78:	7dbb      	ldrb	r3, [r7, #22]
 800ae7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d041      	beq.n	800af06 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	623b      	str	r3, [r7, #32]
 800ae86:	6a3b      	ldr	r3, [r7, #32]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae8c:	6a3b      	ldr	r3, [r7, #32]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800ae92:	4b23      	ldr	r3, [pc, #140]	; (800af20 <USER_SPI_ioctl+0x2dc>)
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	f003 0308 	and.w	r3, r3, #8
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d105      	bne.n	800aeaa <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800ae9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea0:	025b      	lsls	r3, r3, #9
 800aea2:	62bb      	str	r3, [r7, #40]	; 0x28
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea6:	025b      	lsls	r3, r3, #9
 800aea8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800aeaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aeac:	2020      	movs	r0, #32
 800aeae:	f7ff fc78 	bl	800a7a2 <send_cmd>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d128      	bne.n	800af0a <USER_SPI_ioctl+0x2c6>
 800aeb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aeba:	2021      	movs	r0, #33	; 0x21
 800aebc:	f7ff fc71 	bl	800a7a2 <send_cmd>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d121      	bne.n	800af0a <USER_SPI_ioctl+0x2c6>
 800aec6:	2100      	movs	r1, #0
 800aec8:	2026      	movs	r0, #38	; 0x26
 800aeca:	f7ff fc6a 	bl	800a7a2 <send_cmd>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d11a      	bne.n	800af0a <USER_SPI_ioctl+0x2c6>
 800aed4:	f247 5030 	movw	r0, #30000	; 0x7530
 800aed8:	f7ff fbb9 	bl	800a64e <wait_ready>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d013      	beq.n	800af0a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800aee2:	2300      	movs	r3, #0
 800aee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800aee8:	e00f      	b.n	800af0a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800aeea:	2304      	movs	r3, #4
 800aeec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aef0:	e00c      	b.n	800af0c <USER_SPI_ioctl+0x2c8>
		break;
 800aef2:	bf00      	nop
 800aef4:	e00a      	b.n	800af0c <USER_SPI_ioctl+0x2c8>
		break;
 800aef6:	bf00      	nop
 800aef8:	e008      	b.n	800af0c <USER_SPI_ioctl+0x2c8>
		break;
 800aefa:	bf00      	nop
 800aefc:	e006      	b.n	800af0c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800aefe:	bf00      	nop
 800af00:	e004      	b.n	800af0c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800af02:	bf00      	nop
 800af04:	e002      	b.n	800af0c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800af06:	bf00      	nop
 800af08:	e000      	b.n	800af0c <USER_SPI_ioctl+0x2c8>
		break;
 800af0a:	bf00      	nop
	}

	despiselect();
 800af0c:	f7ff fbc2 	bl	800a694 <despiselect>

	return res;
 800af10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800af14:	4618      	mov	r0, r3
 800af16:	3730      	adds	r7, #48	; 0x30
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	20000020 	.word	0x20000020
 800af20:	200004e8 	.word	0x200004e8

0800af24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	460b      	mov	r3, r1
 800af2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800af34:	f007 ffc8 	bl	8012ec8 <USBD_static_malloc>
 800af38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d105      	bne.n	800af4c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800af48:	2302      	movs	r3, #2
 800af4a:	e066      	b.n	800b01a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	7c1b      	ldrb	r3, [r3, #16]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d119      	bne.n	800af90 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800af5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af60:	2202      	movs	r2, #2
 800af62:	2181      	movs	r1, #129	; 0x81
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f007 fe8c 	bl	8012c82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800af70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af74:	2202      	movs	r2, #2
 800af76:	2101      	movs	r1, #1
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f007 fe82 	bl	8012c82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2210      	movs	r2, #16
 800af8a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800af8e:	e016      	b.n	800afbe <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800af90:	2340      	movs	r3, #64	; 0x40
 800af92:	2202      	movs	r2, #2
 800af94:	2181      	movs	r1, #129	; 0x81
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f007 fe73 	bl	8012c82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800afa2:	2340      	movs	r3, #64	; 0x40
 800afa4:	2202      	movs	r2, #2
 800afa6:	2101      	movs	r1, #1
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f007 fe6a 	bl	8012c82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2201      	movs	r2, #1
 800afb2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2210      	movs	r2, #16
 800afba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800afbe:	2308      	movs	r3, #8
 800afc0:	2203      	movs	r2, #3
 800afc2:	2182      	movs	r1, #130	; 0x82
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f007 fe5c 	bl	8012c82 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2201      	movs	r2, #1
 800afce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2200      	movs	r2, #0
 800afe0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	7c1b      	ldrb	r3, [r3, #16]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d109      	bne.n	800b008 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800affa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800affe:	2101      	movs	r1, #1
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f007 ff2d 	bl	8012e60 <USBD_LL_PrepareReceive>
 800b006:	e007      	b.n	800b018 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b00e:	2340      	movs	r3, #64	; 0x40
 800b010:	2101      	movs	r1, #1
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f007 ff24 	bl	8012e60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b082      	sub	sp, #8
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	460b      	mov	r3, r1
 800b02c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b02e:	2181      	movs	r1, #129	; 0x81
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f007 fe4c 	bl	8012cce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b03c:	2101      	movs	r1, #1
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f007 fe45 	bl	8012cce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b04c:	2182      	movs	r1, #130	; 0x82
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f007 fe3d 	bl	8012cce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00e      	beq.n	800b08c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b07e:	4618      	mov	r0, r3
 800b080:	f007 ff30 	bl	8012ee4 <USBD_static_free>
    pdev->pClassData = NULL;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
	...

0800b098 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d101      	bne.n	800b0c0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	e0af      	b.n	800b220 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d03f      	beq.n	800b14c <USBD_CDC_Setup+0xb4>
 800b0cc:	2b20      	cmp	r3, #32
 800b0ce:	f040 809f 	bne.w	800b210 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	88db      	ldrh	r3, [r3, #6]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d02e      	beq.n	800b138 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	b25b      	sxtb	r3, r3
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	da16      	bge.n	800b112 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	683a      	ldr	r2, [r7, #0]
 800b0ee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b0f0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	88d2      	ldrh	r2, [r2, #6]
 800b0f6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	88db      	ldrh	r3, [r3, #6]
 800b0fc:	2b07      	cmp	r3, #7
 800b0fe:	bf28      	it	cs
 800b100:	2307      	movcs	r3, #7
 800b102:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	89fa      	ldrh	r2, [r7, #14]
 800b108:	4619      	mov	r1, r3
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f001 fae9 	bl	800c6e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b110:	e085      	b.n	800b21e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	785a      	ldrb	r2, [r3, #1]
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	88db      	ldrh	r3, [r3, #6]
 800b120:	b2da      	uxtb	r2, r3
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b128:	6939      	ldr	r1, [r7, #16]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	88db      	ldrh	r3, [r3, #6]
 800b12e:	461a      	mov	r2, r3
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f001 fb02 	bl	800c73a <USBD_CtlPrepareRx>
      break;
 800b136:	e072      	b.n	800b21e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	683a      	ldr	r2, [r7, #0]
 800b142:	7850      	ldrb	r0, [r2, #1]
 800b144:	2200      	movs	r2, #0
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	4798      	blx	r3
      break;
 800b14a:	e068      	b.n	800b21e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	785b      	ldrb	r3, [r3, #1]
 800b150:	2b0b      	cmp	r3, #11
 800b152:	d852      	bhi.n	800b1fa <USBD_CDC_Setup+0x162>
 800b154:	a201      	add	r2, pc, #4	; (adr r2, 800b15c <USBD_CDC_Setup+0xc4>)
 800b156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15a:	bf00      	nop
 800b15c:	0800b18d 	.word	0x0800b18d
 800b160:	0800b209 	.word	0x0800b209
 800b164:	0800b1fb 	.word	0x0800b1fb
 800b168:	0800b1fb 	.word	0x0800b1fb
 800b16c:	0800b1fb 	.word	0x0800b1fb
 800b170:	0800b1fb 	.word	0x0800b1fb
 800b174:	0800b1fb 	.word	0x0800b1fb
 800b178:	0800b1fb 	.word	0x0800b1fb
 800b17c:	0800b1fb 	.word	0x0800b1fb
 800b180:	0800b1fb 	.word	0x0800b1fb
 800b184:	0800b1b7 	.word	0x0800b1b7
 800b188:	0800b1e1 	.word	0x0800b1e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b192:	b2db      	uxtb	r3, r3
 800b194:	2b03      	cmp	r3, #3
 800b196:	d107      	bne.n	800b1a8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b198:	f107 030a 	add.w	r3, r7, #10
 800b19c:	2202      	movs	r2, #2
 800b19e:	4619      	mov	r1, r3
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f001 fa9e 	bl	800c6e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b1a6:	e032      	b.n	800b20e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f001 fa28 	bl	800c600 <USBD_CtlError>
            ret = USBD_FAIL;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	75fb      	strb	r3, [r7, #23]
          break;
 800b1b4:	e02b      	b.n	800b20e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d107      	bne.n	800b1d2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b1c2:	f107 030d 	add.w	r3, r7, #13
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f001 fa89 	bl	800c6e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b1d0:	e01d      	b.n	800b20e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f001 fa13 	bl	800c600 <USBD_CtlError>
            ret = USBD_FAIL;
 800b1da:	2303      	movs	r3, #3
 800b1dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b1de:	e016      	b.n	800b20e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	2b03      	cmp	r3, #3
 800b1ea:	d00f      	beq.n	800b20c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f001 fa06 	bl	800c600 <USBD_CtlError>
            ret = USBD_FAIL;
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b1f8:	e008      	b.n	800b20c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b1fa:	6839      	ldr	r1, [r7, #0]
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f001 f9ff 	bl	800c600 <USBD_CtlError>
          ret = USBD_FAIL;
 800b202:	2303      	movs	r3, #3
 800b204:	75fb      	strb	r3, [r7, #23]
          break;
 800b206:	e002      	b.n	800b20e <USBD_CDC_Setup+0x176>
          break;
 800b208:	bf00      	nop
 800b20a:	e008      	b.n	800b21e <USBD_CDC_Setup+0x186>
          break;
 800b20c:	bf00      	nop
      }
      break;
 800b20e:	e006      	b.n	800b21e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b210:	6839      	ldr	r1, [r7, #0]
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f001 f9f4 	bl	800c600 <USBD_CtlError>
      ret = USBD_FAIL;
 800b218:	2303      	movs	r3, #3
 800b21a:	75fb      	strb	r3, [r7, #23]
      break;
 800b21c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b21e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3718      	adds	r7, #24
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	460b      	mov	r3, r1
 800b232:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b23a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b242:	2b00      	cmp	r3, #0
 800b244:	d101      	bne.n	800b24a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b246:	2303      	movs	r3, #3
 800b248:	e04f      	b.n	800b2ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b250:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b252:	78fa      	ldrb	r2, [r7, #3]
 800b254:	6879      	ldr	r1, [r7, #4]
 800b256:	4613      	mov	r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	4413      	add	r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	440b      	add	r3, r1
 800b260:	3318      	adds	r3, #24
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d029      	beq.n	800b2bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b268:	78fa      	ldrb	r2, [r7, #3]
 800b26a:	6879      	ldr	r1, [r7, #4]
 800b26c:	4613      	mov	r3, r2
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	4413      	add	r3, r2
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	440b      	add	r3, r1
 800b276:	3318      	adds	r3, #24
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	78f9      	ldrb	r1, [r7, #3]
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	460b      	mov	r3, r1
 800b280:	00db      	lsls	r3, r3, #3
 800b282:	1a5b      	subs	r3, r3, r1
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	4403      	add	r3, r0
 800b288:	3344      	adds	r3, #68	; 0x44
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b290:	fb03 f301 	mul.w	r3, r3, r1
 800b294:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b296:	2b00      	cmp	r3, #0
 800b298:	d110      	bne.n	800b2bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b29a:	78fa      	ldrb	r2, [r7, #3]
 800b29c:	6879      	ldr	r1, [r7, #4]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	440b      	add	r3, r1
 800b2a8:	3318      	adds	r3, #24
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b2ae:	78f9      	ldrb	r1, [r7, #3]
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f007 fdb2 	bl	8012e1e <USBD_LL_Transmit>
 800b2ba:	e015      	b.n	800b2e8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00b      	beq.n	800b2e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2d6:	691b      	ldr	r3, [r3, #16]
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b2e4:	78fa      	ldrb	r2, [r7, #3]
 800b2e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b304:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b310:	2303      	movs	r3, #3
 800b312:	e015      	b.n	800b340 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b314:	78fb      	ldrb	r3, [r7, #3]
 800b316:	4619      	mov	r1, r3
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f007 fdc2 	bl	8012ea2 <USBD_LL_GetRxDataSize>
 800b31e:	4602      	mov	r2, r0
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b33a:	4611      	mov	r1, r2
 800b33c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b356:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d101      	bne.n	800b362 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b35e:	2303      	movs	r3, #3
 800b360:	e01b      	b.n	800b39a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d015      	beq.n	800b398 <USBD_CDC_EP0_RxReady+0x50>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b372:	2bff      	cmp	r3, #255	; 0xff
 800b374:	d010      	beq.n	800b398 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b384:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b38c:	b292      	uxth	r2, r2
 800b38e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	22ff      	movs	r2, #255	; 0xff
 800b394:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
	...

0800b3a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2243      	movs	r2, #67	; 0x43
 800b3b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b3b2:	4b03      	ldr	r3, [pc, #12]	; (800b3c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	200000ac 	.word	0x200000ac

0800b3c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2243      	movs	r2, #67	; 0x43
 800b3d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b3d2:	4b03      	ldr	r3, [pc, #12]	; (800b3e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	20000068 	.word	0x20000068

0800b3e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2243      	movs	r2, #67	; 0x43
 800b3f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b3f2:	4b03      	ldr	r3, [pc, #12]	; (800b400 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr
 800b400:	200000f0 	.word	0x200000f0

0800b404 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	220a      	movs	r2, #10
 800b410:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b412:	4b03      	ldr	r3, [pc, #12]	; (800b420 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b414:	4618      	mov	r0, r3
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	20000024 	.word	0x20000024

0800b424 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d101      	bne.n	800b438 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b434:	2303      	movs	r3, #3
 800b436:	e004      	b.n	800b442 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	370c      	adds	r7, #12
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr

0800b44e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b44e:	b480      	push	{r7}
 800b450:	b087      	sub	sp, #28
 800b452:	af00      	add	r7, sp, #0
 800b454:	60f8      	str	r0, [r7, #12]
 800b456:	60b9      	str	r1, [r7, #8]
 800b458:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b460:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d101      	bne.n	800b46c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b468:	2303      	movs	r3, #3
 800b46a:	e008      	b.n	800b47e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	371c      	adds	r7, #28
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b085      	sub	sp, #20
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b49a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d101      	bne.n	800b4a6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	e004      	b.n	800b4b0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	683a      	ldr	r2, [r7, #0]
 800b4aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	e016      	b.n	800b508 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	7c1b      	ldrb	r3, [r3, #16]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d109      	bne.n	800b4f6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4ec:	2101      	movs	r1, #1
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f007 fcb6 	bl	8012e60 <USBD_LL_PrepareReceive>
 800b4f4:	e007      	b.n	800b506 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4fc:	2340      	movs	r3, #64	; 0x40
 800b4fe:	2101      	movs	r1, #1
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f007 fcad 	bl	8012e60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	4613      	mov	r3, r2
 800b51c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d101      	bne.n	800b528 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b524:	2303      	movs	r3, #3
 800b526:	e01f      	b.n	800b568 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d003      	beq.n	800b54e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2201      	movs	r2, #1
 800b552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	79fa      	ldrb	r2, [r7, #7]
 800b55a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f007 fb29 	bl	8012bb4 <USBD_LL_Init>
 800b562:	4603      	mov	r3, r0
 800b564:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b566:	7dfb      	ldrb	r3, [r7, #23]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3718      	adds	r7, #24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b57a:	2300      	movs	r3, #0
 800b57c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d101      	bne.n	800b588 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b584:	2303      	movs	r3, #3
 800b586:	e016      	b.n	800b5b6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	683a      	ldr	r2, [r7, #0]
 800b58c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00b      	beq.n	800b5b4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a4:	f107 020e 	add.w	r2, r7, #14
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	4798      	blx	r3
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b082      	sub	sp, #8
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f007 fb40 	bl	8012c4c <USBD_LL_Start>
 800b5cc:	4603      	mov	r3, r0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3708      	adds	r7, #8
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b5d6:	b480      	push	{r7}
 800b5d8:	b083      	sub	sp, #12
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b5f8:	2303      	movs	r3, #3
 800b5fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b602:	2b00      	cmp	r3, #0
 800b604:	d009      	beq.n	800b61a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	78fa      	ldrb	r2, [r7, #3]
 800b610:	4611      	mov	r1, r2
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	4798      	blx	r3
 800b616:	4603      	mov	r3, r0
 800b618:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	460b      	mov	r3, r1
 800b62e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b636:	2b00      	cmp	r3, #0
 800b638:	d007      	beq.n	800b64a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	78fa      	ldrb	r2, [r7, #3]
 800b644:	4611      	mov	r1, r2
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	4798      	blx	r3
  }

  return USBD_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b664:	6839      	ldr	r1, [r7, #0]
 800b666:	4618      	mov	r0, r3
 800b668:	f000 ff90 	bl	800c58c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b67a:	461a      	mov	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b688:	f003 031f 	and.w	r3, r3, #31
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d01a      	beq.n	800b6c6 <USBD_LL_SetupStage+0x72>
 800b690:	2b02      	cmp	r3, #2
 800b692:	d822      	bhi.n	800b6da <USBD_LL_SetupStage+0x86>
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <USBD_LL_SetupStage+0x4a>
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d00a      	beq.n	800b6b2 <USBD_LL_SetupStage+0x5e>
 800b69c:	e01d      	b.n	800b6da <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fa62 	bl	800bb70 <USBD_StdDevReq>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b6b0:	e020      	b.n	800b6f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 fac6 	bl	800bc4c <USBD_StdItfReq>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b6c4:	e016      	b.n	800b6f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fb05 	bl	800bcde <USBD_StdEPReq>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b6d8:	e00c      	b.n	800b6f4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b6e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f007 fb0f 	bl	8012d0c <USBD_LL_StallEP>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b6f2:	bf00      	nop
  }

  return ret;
 800b6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b086      	sub	sp, #24
 800b702:	af00      	add	r7, sp, #0
 800b704:	60f8      	str	r0, [r7, #12]
 800b706:	460b      	mov	r3, r1
 800b708:	607a      	str	r2, [r7, #4]
 800b70a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b70c:	7afb      	ldrb	r3, [r7, #11]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d138      	bne.n	800b784 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b718:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b720:	2b03      	cmp	r3, #3
 800b722:	d14a      	bne.n	800b7ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	689a      	ldr	r2, [r3, #8]
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d913      	bls.n	800b758 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	689a      	ldr	r2, [r3, #8]
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	1ad2      	subs	r2, r2, r3
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	68da      	ldr	r2, [r3, #12]
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	4293      	cmp	r3, r2
 800b748:	bf28      	it	cs
 800b74a:	4613      	movcs	r3, r2
 800b74c:	461a      	mov	r2, r3
 800b74e:	6879      	ldr	r1, [r7, #4]
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f001 f80f 	bl	800c774 <USBD_CtlContinueRx>
 800b756:	e030      	b.n	800b7ba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b03      	cmp	r3, #3
 800b762:	d10b      	bne.n	800b77c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d005      	beq.n	800b77c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f001 f80a 	bl	800c796 <USBD_CtlSendStatus>
 800b782:	e01a      	b.n	800b7ba <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	2b03      	cmp	r3, #3
 800b78e:	d114      	bne.n	800b7ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b796:	699b      	ldr	r3, [r3, #24]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00e      	beq.n	800b7ba <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7a2:	699b      	ldr	r3, [r3, #24]
 800b7a4:	7afa      	ldrb	r2, [r7, #11]
 800b7a6:	4611      	mov	r1, r2
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	4798      	blx	r3
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b7b0:	7dfb      	ldrb	r3, [r7, #23]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d001      	beq.n	800b7ba <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b7b6:	7dfb      	ldrb	r3, [r7, #23]
 800b7b8:	e000      	b.n	800b7bc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3718      	adds	r7, #24
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	607a      	str	r2, [r7, #4]
 800b7d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b7d2:	7afb      	ldrb	r3, [r7, #11]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d16b      	bne.n	800b8b0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	3314      	adds	r3, #20
 800b7dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d156      	bne.n	800b896 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	689a      	ldr	r2, [r3, #8]
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d914      	bls.n	800b81e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	689a      	ldr	r2, [r3, #8]
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	1ad2      	subs	r2, r2, r3
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	461a      	mov	r2, r3
 800b808:	6879      	ldr	r1, [r7, #4]
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f000 ff84 	bl	800c718 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b810:	2300      	movs	r3, #0
 800b812:	2200      	movs	r2, #0
 800b814:	2100      	movs	r1, #0
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f007 fb22 	bl	8012e60 <USBD_LL_PrepareReceive>
 800b81c:	e03b      	b.n	800b896 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	68da      	ldr	r2, [r3, #12]
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	429a      	cmp	r2, r3
 800b828:	d11c      	bne.n	800b864 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b832:	429a      	cmp	r2, r3
 800b834:	d316      	bcc.n	800b864 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	685a      	ldr	r2, [r3, #4]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b840:	429a      	cmp	r2, r3
 800b842:	d20f      	bcs.n	800b864 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b844:	2200      	movs	r2, #0
 800b846:	2100      	movs	r1, #0
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f000 ff65 	bl	800c718 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b856:	2300      	movs	r3, #0
 800b858:	2200      	movs	r2, #0
 800b85a:	2100      	movs	r1, #0
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f007 faff 	bl	8012e60 <USBD_LL_PrepareReceive>
 800b862:	e018      	b.n	800b896 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	2b03      	cmp	r3, #3
 800b86e:	d10b      	bne.n	800b888 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d005      	beq.n	800b888 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b888:	2180      	movs	r1, #128	; 0x80
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f007 fa3e 	bl	8012d0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f000 ff93 	bl	800c7bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d122      	bne.n	800b8e6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f7ff fe98 	bl	800b5d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b8ae:	e01a      	b.n	800b8e6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	2b03      	cmp	r3, #3
 800b8ba:	d114      	bne.n	800b8e6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8c2:	695b      	ldr	r3, [r3, #20]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00e      	beq.n	800b8e6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ce:	695b      	ldr	r3, [r3, #20]
 800b8d0:	7afa      	ldrb	r2, [r7, #11]
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	4798      	blx	r3
 800b8d8:	4603      	mov	r3, r0
 800b8da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b8dc:	7dfb      	ldrb	r3, [r7, #23]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b8e2:	7dfb      	ldrb	r3, [r7, #23]
 800b8e4:	e000      	b.n	800b8e8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3718      	adds	r7, #24
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d101      	bne.n	800b924 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b920:	2303      	movs	r3, #3
 800b922:	e02f      	b.n	800b984 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00f      	beq.n	800b94e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d009      	beq.n	800b94e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	6852      	ldr	r2, [r2, #4]
 800b946:	b2d2      	uxtb	r2, r2
 800b948:	4611      	mov	r1, r2
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b94e:	2340      	movs	r3, #64	; 0x40
 800b950:	2200      	movs	r2, #0
 800b952:	2100      	movs	r1, #0
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f007 f994 	bl	8012c82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2201      	movs	r2, #1
 800b95e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2240      	movs	r2, #64	; 0x40
 800b966:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b96a:	2340      	movs	r3, #64	; 0x40
 800b96c:	2200      	movs	r2, #0
 800b96e:	2180      	movs	r1, #128	; 0x80
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f007 f986 	bl	8012c82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2201      	movs	r2, #1
 800b97a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2240      	movs	r2, #64	; 0x40
 800b980:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b982:	2300      	movs	r3, #0
}
 800b984:	4618      	mov	r0, r3
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	460b      	mov	r3, r1
 800b996:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	78fa      	ldrb	r2, [r7, #3]
 800b99c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2204      	movs	r2, #4
 800b9c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	370c      	adds	r7, #12
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	2b04      	cmp	r3, #4
 800b9ea:	d106      	bne.n	800b9fa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d101      	bne.n	800ba1e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	e012      	b.n	800ba44 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b03      	cmp	r3, #3
 800ba28:	d10b      	bne.n	800ba42 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba30:	69db      	ldr	r3, [r3, #28]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d005      	beq.n	800ba42 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba3c:	69db      	ldr	r3, [r3, #28]
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba42:	2300      	movs	r3, #0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	460b      	mov	r3, r1
 800ba56:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ba62:	2303      	movs	r3, #3
 800ba64:	e014      	b.n	800ba90 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b03      	cmp	r3, #3
 800ba70:	d10d      	bne.n	800ba8e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d007      	beq.n	800ba8e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba84:	6a1b      	ldr	r3, [r3, #32]
 800ba86:	78fa      	ldrb	r2, [r7, #3]
 800ba88:	4611      	mov	r1, r2
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba8e:	2300      	movs	r3, #0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	460b      	mov	r3, r1
 800baa2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800baae:	2303      	movs	r3, #3
 800bab0:	e014      	b.n	800badc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	2b03      	cmp	r3, #3
 800babc:	d10d      	bne.n	800bada <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d007      	beq.n	800bada <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad2:	78fa      	ldrb	r2, [r7, #3]
 800bad4:	4611      	mov	r1, r2
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	370c      	adds	r7, #12
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b082      	sub	sp, #8
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d009      	beq.n	800bb28 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	6852      	ldr	r2, [r2, #4]
 800bb20:	b2d2      	uxtb	r2, r2
 800bb22:	4611      	mov	r1, r2
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	4798      	blx	r3
  }

  return USBD_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb32:	b480      	push	{r7}
 800bb34:	b087      	sub	sp, #28
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	3301      	adds	r3, #1
 800bb48:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bb50:	8a3b      	ldrh	r3, [r7, #16]
 800bb52:	021b      	lsls	r3, r3, #8
 800bb54:	b21a      	sxth	r2, r3
 800bb56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	b21b      	sxth	r3, r3
 800bb5e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bb60:	89fb      	ldrh	r3, [r7, #14]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	371c      	adds	r7, #28
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
	...

0800bb70 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb86:	2b40      	cmp	r3, #64	; 0x40
 800bb88:	d005      	beq.n	800bb96 <USBD_StdDevReq+0x26>
 800bb8a:	2b40      	cmp	r3, #64	; 0x40
 800bb8c:	d853      	bhi.n	800bc36 <USBD_StdDevReq+0xc6>
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00b      	beq.n	800bbaa <USBD_StdDevReq+0x3a>
 800bb92:	2b20      	cmp	r3, #32
 800bb94:	d14f      	bne.n	800bc36 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	4798      	blx	r3
 800bba4:	4603      	mov	r3, r0
 800bba6:	73fb      	strb	r3, [r7, #15]
      break;
 800bba8:	e04a      	b.n	800bc40 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	785b      	ldrb	r3, [r3, #1]
 800bbae:	2b09      	cmp	r3, #9
 800bbb0:	d83b      	bhi.n	800bc2a <USBD_StdDevReq+0xba>
 800bbb2:	a201      	add	r2, pc, #4	; (adr r2, 800bbb8 <USBD_StdDevReq+0x48>)
 800bbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb8:	0800bc0d 	.word	0x0800bc0d
 800bbbc:	0800bc21 	.word	0x0800bc21
 800bbc0:	0800bc2b 	.word	0x0800bc2b
 800bbc4:	0800bc17 	.word	0x0800bc17
 800bbc8:	0800bc2b 	.word	0x0800bc2b
 800bbcc:	0800bbeb 	.word	0x0800bbeb
 800bbd0:	0800bbe1 	.word	0x0800bbe1
 800bbd4:	0800bc2b 	.word	0x0800bc2b
 800bbd8:	0800bc03 	.word	0x0800bc03
 800bbdc:	0800bbf5 	.word	0x0800bbf5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bbe0:	6839      	ldr	r1, [r7, #0]
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 f9de 	bl	800bfa4 <USBD_GetDescriptor>
          break;
 800bbe8:	e024      	b.n	800bc34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bbea:	6839      	ldr	r1, [r7, #0]
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 fb43 	bl	800c278 <USBD_SetAddress>
          break;
 800bbf2:	e01f      	b.n	800bc34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bbf4:	6839      	ldr	r1, [r7, #0]
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 fb82 	bl	800c300 <USBD_SetConfig>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	73fb      	strb	r3, [r7, #15]
          break;
 800bc00:	e018      	b.n	800bc34 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc02:	6839      	ldr	r1, [r7, #0]
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 fc21 	bl	800c44c <USBD_GetConfig>
          break;
 800bc0a:	e013      	b.n	800bc34 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc0c:	6839      	ldr	r1, [r7, #0]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 fc52 	bl	800c4b8 <USBD_GetStatus>
          break;
 800bc14:	e00e      	b.n	800bc34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fc81 	bl	800c520 <USBD_SetFeature>
          break;
 800bc1e:	e009      	b.n	800bc34 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc20:	6839      	ldr	r1, [r7, #0]
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 fc90 	bl	800c548 <USBD_ClrFeature>
          break;
 800bc28:	e004      	b.n	800bc34 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fce7 	bl	800c600 <USBD_CtlError>
          break;
 800bc32:	bf00      	nop
      }
      break;
 800bc34:	e004      	b.n	800bc40 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bc36:	6839      	ldr	r1, [r7, #0]
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 fce1 	bl	800c600 <USBD_CtlError>
      break;
 800bc3e:	bf00      	nop
  }

  return ret;
 800bc40:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop

0800bc4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc56:	2300      	movs	r3, #0
 800bc58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc62:	2b40      	cmp	r3, #64	; 0x40
 800bc64:	d005      	beq.n	800bc72 <USBD_StdItfReq+0x26>
 800bc66:	2b40      	cmp	r3, #64	; 0x40
 800bc68:	d82f      	bhi.n	800bcca <USBD_StdItfReq+0x7e>
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d001      	beq.n	800bc72 <USBD_StdItfReq+0x26>
 800bc6e:	2b20      	cmp	r3, #32
 800bc70:	d12b      	bne.n	800bcca <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d81d      	bhi.n	800bcbc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	889b      	ldrh	r3, [r3, #4]
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d813      	bhi.n	800bcb2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	6839      	ldr	r1, [r7, #0]
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	4798      	blx	r3
 800bc98:	4603      	mov	r3, r0
 800bc9a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	88db      	ldrh	r3, [r3, #6]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d110      	bne.n	800bcc6 <USBD_StdItfReq+0x7a>
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10d      	bne.n	800bcc6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 fd73 	bl	800c796 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bcb0:	e009      	b.n	800bcc6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fca3 	bl	800c600 <USBD_CtlError>
          break;
 800bcba:	e004      	b.n	800bcc6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bcbc:	6839      	ldr	r1, [r7, #0]
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 fc9e 	bl	800c600 <USBD_CtlError>
          break;
 800bcc4:	e000      	b.n	800bcc8 <USBD_StdItfReq+0x7c>
          break;
 800bcc6:	bf00      	nop
      }
      break;
 800bcc8:	e004      	b.n	800bcd4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 fc97 	bl	800c600 <USBD_CtlError>
      break;
 800bcd2:	bf00      	nop
  }

  return ret;
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b084      	sub	sp, #16
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
 800bce6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bce8:	2300      	movs	r3, #0
 800bcea:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	889b      	ldrh	r3, [r3, #4]
 800bcf0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bcfa:	2b40      	cmp	r3, #64	; 0x40
 800bcfc:	d007      	beq.n	800bd0e <USBD_StdEPReq+0x30>
 800bcfe:	2b40      	cmp	r3, #64	; 0x40
 800bd00:	f200 8145 	bhi.w	800bf8e <USBD_StdEPReq+0x2b0>
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00c      	beq.n	800bd22 <USBD_StdEPReq+0x44>
 800bd08:	2b20      	cmp	r3, #32
 800bd0a:	f040 8140 	bne.w	800bf8e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	6839      	ldr	r1, [r7, #0]
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	4798      	blx	r3
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	73fb      	strb	r3, [r7, #15]
      break;
 800bd20:	e13a      	b.n	800bf98 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	785b      	ldrb	r3, [r3, #1]
 800bd26:	2b03      	cmp	r3, #3
 800bd28:	d007      	beq.n	800bd3a <USBD_StdEPReq+0x5c>
 800bd2a:	2b03      	cmp	r3, #3
 800bd2c:	f300 8129 	bgt.w	800bf82 <USBD_StdEPReq+0x2a4>
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d07f      	beq.n	800be34 <USBD_StdEPReq+0x156>
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d03c      	beq.n	800bdb2 <USBD_StdEPReq+0xd4>
 800bd38:	e123      	b.n	800bf82 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	d002      	beq.n	800bd4c <USBD_StdEPReq+0x6e>
 800bd46:	2b03      	cmp	r3, #3
 800bd48:	d016      	beq.n	800bd78 <USBD_StdEPReq+0x9a>
 800bd4a:	e02c      	b.n	800bda6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd4c:	7bbb      	ldrb	r3, [r7, #14]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00d      	beq.n	800bd6e <USBD_StdEPReq+0x90>
 800bd52:	7bbb      	ldrb	r3, [r7, #14]
 800bd54:	2b80      	cmp	r3, #128	; 0x80
 800bd56:	d00a      	beq.n	800bd6e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd58:	7bbb      	ldrb	r3, [r7, #14]
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f006 ffd5 	bl	8012d0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd62:	2180      	movs	r1, #128	; 0x80
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f006 ffd1 	bl	8012d0c <USBD_LL_StallEP>
 800bd6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd6c:	e020      	b.n	800bdb0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bd6e:	6839      	ldr	r1, [r7, #0]
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fc45 	bl	800c600 <USBD_CtlError>
              break;
 800bd76:	e01b      	b.n	800bdb0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	885b      	ldrh	r3, [r3, #2]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10e      	bne.n	800bd9e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bd80:	7bbb      	ldrb	r3, [r7, #14]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00b      	beq.n	800bd9e <USBD_StdEPReq+0xc0>
 800bd86:	7bbb      	ldrb	r3, [r7, #14]
 800bd88:	2b80      	cmp	r3, #128	; 0x80
 800bd8a:	d008      	beq.n	800bd9e <USBD_StdEPReq+0xc0>
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	88db      	ldrh	r3, [r3, #6]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d104      	bne.n	800bd9e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd94:	7bbb      	ldrb	r3, [r7, #14]
 800bd96:	4619      	mov	r1, r3
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f006 ffb7 	bl	8012d0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fcf9 	bl	800c796 <USBD_CtlSendStatus>

              break;
 800bda4:	e004      	b.n	800bdb0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bda6:	6839      	ldr	r1, [r7, #0]
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 fc29 	bl	800c600 <USBD_CtlError>
              break;
 800bdae:	bf00      	nop
          }
          break;
 800bdb0:	e0ec      	b.n	800bf8c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	2b02      	cmp	r3, #2
 800bdbc:	d002      	beq.n	800bdc4 <USBD_StdEPReq+0xe6>
 800bdbe:	2b03      	cmp	r3, #3
 800bdc0:	d016      	beq.n	800bdf0 <USBD_StdEPReq+0x112>
 800bdc2:	e030      	b.n	800be26 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdc4:	7bbb      	ldrb	r3, [r7, #14]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00d      	beq.n	800bde6 <USBD_StdEPReq+0x108>
 800bdca:	7bbb      	ldrb	r3, [r7, #14]
 800bdcc:	2b80      	cmp	r3, #128	; 0x80
 800bdce:	d00a      	beq.n	800bde6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdd0:	7bbb      	ldrb	r3, [r7, #14]
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f006 ff99 	bl	8012d0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdda:	2180      	movs	r1, #128	; 0x80
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f006 ff95 	bl	8012d0c <USBD_LL_StallEP>
 800bde2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bde4:	e025      	b.n	800be32 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bde6:	6839      	ldr	r1, [r7, #0]
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 fc09 	bl	800c600 <USBD_CtlError>
              break;
 800bdee:	e020      	b.n	800be32 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	885b      	ldrh	r3, [r3, #2]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d11b      	bne.n	800be30 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bdf8:	7bbb      	ldrb	r3, [r7, #14]
 800bdfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d004      	beq.n	800be0c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800be02:	7bbb      	ldrb	r3, [r7, #14]
 800be04:	4619      	mov	r1, r3
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f006 ff9f 	bl	8012d4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 fcc2 	bl	800c796 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	4798      	blx	r3
 800be20:	4603      	mov	r3, r0
 800be22:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800be24:	e004      	b.n	800be30 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fbe9 	bl	800c600 <USBD_CtlError>
              break;
 800be2e:	e000      	b.n	800be32 <USBD_StdEPReq+0x154>
              break;
 800be30:	bf00      	nop
          }
          break;
 800be32:	e0ab      	b.n	800bf8c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d002      	beq.n	800be46 <USBD_StdEPReq+0x168>
 800be40:	2b03      	cmp	r3, #3
 800be42:	d032      	beq.n	800beaa <USBD_StdEPReq+0x1cc>
 800be44:	e097      	b.n	800bf76 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be46:	7bbb      	ldrb	r3, [r7, #14]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d007      	beq.n	800be5c <USBD_StdEPReq+0x17e>
 800be4c:	7bbb      	ldrb	r3, [r7, #14]
 800be4e:	2b80      	cmp	r3, #128	; 0x80
 800be50:	d004      	beq.n	800be5c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 fbd3 	bl	800c600 <USBD_CtlError>
                break;
 800be5a:	e091      	b.n	800bf80 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be60:	2b00      	cmp	r3, #0
 800be62:	da0b      	bge.n	800be7c <USBD_StdEPReq+0x19e>
 800be64:	7bbb      	ldrb	r3, [r7, #14]
 800be66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be6a:	4613      	mov	r3, r2
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4413      	add	r3, r2
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	3310      	adds	r3, #16
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	4413      	add	r3, r2
 800be78:	3304      	adds	r3, #4
 800be7a:	e00b      	b.n	800be94 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be7c:	7bbb      	ldrb	r3, [r7, #14]
 800be7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be82:	4613      	mov	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4413      	add	r3, r2
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	4413      	add	r3, r2
 800be92:	3304      	adds	r3, #4
 800be94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	2200      	movs	r2, #0
 800be9a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	2202      	movs	r2, #2
 800bea0:	4619      	mov	r1, r3
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 fc1d 	bl	800c6e2 <USBD_CtlSendData>
              break;
 800bea8:	e06a      	b.n	800bf80 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800beaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	da11      	bge.n	800bed6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800beb2:	7bbb      	ldrb	r3, [r7, #14]
 800beb4:	f003 020f 	and.w	r2, r3, #15
 800beb8:	6879      	ldr	r1, [r7, #4]
 800beba:	4613      	mov	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	440b      	add	r3, r1
 800bec4:	3324      	adds	r3, #36	; 0x24
 800bec6:	881b      	ldrh	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d117      	bne.n	800befc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800becc:	6839      	ldr	r1, [r7, #0]
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 fb96 	bl	800c600 <USBD_CtlError>
                  break;
 800bed4:	e054      	b.n	800bf80 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bed6:	7bbb      	ldrb	r3, [r7, #14]
 800bed8:	f003 020f 	and.w	r2, r3, #15
 800bedc:	6879      	ldr	r1, [r7, #4]
 800bede:	4613      	mov	r3, r2
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	4413      	add	r3, r2
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	440b      	add	r3, r1
 800bee8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800beec:	881b      	ldrh	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d104      	bne.n	800befc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bef2:	6839      	ldr	r1, [r7, #0]
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fb83 	bl	800c600 <USBD_CtlError>
                  break;
 800befa:	e041      	b.n	800bf80 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800befc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	da0b      	bge.n	800bf1c <USBD_StdEPReq+0x23e>
 800bf04:	7bbb      	ldrb	r3, [r7, #14]
 800bf06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	4413      	add	r3, r2
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	3310      	adds	r3, #16
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	4413      	add	r3, r2
 800bf18:	3304      	adds	r3, #4
 800bf1a:	e00b      	b.n	800bf34 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf1c:	7bbb      	ldrb	r3, [r7, #14]
 800bf1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf22:	4613      	mov	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	4413      	add	r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	4413      	add	r3, r2
 800bf32:	3304      	adds	r3, #4
 800bf34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bf36:	7bbb      	ldrb	r3, [r7, #14]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d002      	beq.n	800bf42 <USBD_StdEPReq+0x264>
 800bf3c:	7bbb      	ldrb	r3, [r7, #14]
 800bf3e:	2b80      	cmp	r3, #128	; 0x80
 800bf40:	d103      	bne.n	800bf4a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	2200      	movs	r2, #0
 800bf46:	601a      	str	r2, [r3, #0]
 800bf48:	e00e      	b.n	800bf68 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bf4a:	7bbb      	ldrb	r3, [r7, #14]
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f006 ff1a 	bl	8012d88 <USBD_LL_IsStallEP>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d003      	beq.n	800bf62 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	601a      	str	r2, [r3, #0]
 800bf60:	e002      	b.n	800bf68 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	2200      	movs	r2, #0
 800bf66:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fbb7 	bl	800c6e2 <USBD_CtlSendData>
              break;
 800bf74:	e004      	b.n	800bf80 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fb41 	bl	800c600 <USBD_CtlError>
              break;
 800bf7e:	bf00      	nop
          }
          break;
 800bf80:	e004      	b.n	800bf8c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 fb3b 	bl	800c600 <USBD_CtlError>
          break;
 800bf8a:	bf00      	nop
      }
      break;
 800bf8c:	e004      	b.n	800bf98 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bf8e:	6839      	ldr	r1, [r7, #0]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 fb35 	bl	800c600 <USBD_CtlError>
      break;
 800bf96:	bf00      	nop
  }

  return ret;
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
	...

0800bfa4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	885b      	ldrh	r3, [r3, #2]
 800bfbe:	0a1b      	lsrs	r3, r3, #8
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	2b06      	cmp	r3, #6
 800bfc6:	f200 8128 	bhi.w	800c21a <USBD_GetDescriptor+0x276>
 800bfca:	a201      	add	r2, pc, #4	; (adr r2, 800bfd0 <USBD_GetDescriptor+0x2c>)
 800bfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd0:	0800bfed 	.word	0x0800bfed
 800bfd4:	0800c005 	.word	0x0800c005
 800bfd8:	0800c045 	.word	0x0800c045
 800bfdc:	0800c21b 	.word	0x0800c21b
 800bfe0:	0800c21b 	.word	0x0800c21b
 800bfe4:	0800c1bb 	.word	0x0800c1bb
 800bfe8:	0800c1e7 	.word	0x0800c1e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	7c12      	ldrb	r2, [r2, #16]
 800bff8:	f107 0108 	add.w	r1, r7, #8
 800bffc:	4610      	mov	r0, r2
 800bffe:	4798      	blx	r3
 800c000:	60f8      	str	r0, [r7, #12]
      break;
 800c002:	e112      	b.n	800c22a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	7c1b      	ldrb	r3, [r3, #16]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d10d      	bne.n	800c028 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c014:	f107 0208 	add.w	r2, r7, #8
 800c018:	4610      	mov	r0, r2
 800c01a:	4798      	blx	r3
 800c01c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	3301      	adds	r3, #1
 800c022:	2202      	movs	r2, #2
 800c024:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c026:	e100      	b.n	800c22a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c030:	f107 0208 	add.w	r2, r7, #8
 800c034:	4610      	mov	r0, r2
 800c036:	4798      	blx	r3
 800c038:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	3301      	adds	r3, #1
 800c03e:	2202      	movs	r2, #2
 800c040:	701a      	strb	r2, [r3, #0]
      break;
 800c042:	e0f2      	b.n	800c22a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	885b      	ldrh	r3, [r3, #2]
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	2b05      	cmp	r3, #5
 800c04c:	f200 80ac 	bhi.w	800c1a8 <USBD_GetDescriptor+0x204>
 800c050:	a201      	add	r2, pc, #4	; (adr r2, 800c058 <USBD_GetDescriptor+0xb4>)
 800c052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c056:	bf00      	nop
 800c058:	0800c071 	.word	0x0800c071
 800c05c:	0800c0a5 	.word	0x0800c0a5
 800c060:	0800c0d9 	.word	0x0800c0d9
 800c064:	0800c10d 	.word	0x0800c10d
 800c068:	0800c141 	.word	0x0800c141
 800c06c:	0800c175 	.word	0x0800c175
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00b      	beq.n	800c094 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	7c12      	ldrb	r2, [r2, #16]
 800c088:	f107 0108 	add.w	r1, r7, #8
 800c08c:	4610      	mov	r0, r2
 800c08e:	4798      	blx	r3
 800c090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c092:	e091      	b.n	800c1b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c094:	6839      	ldr	r1, [r7, #0]
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 fab2 	bl	800c600 <USBD_CtlError>
            err++;
 800c09c:	7afb      	ldrb	r3, [r7, #11]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	72fb      	strb	r3, [r7, #11]
          break;
 800c0a2:	e089      	b.n	800c1b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00b      	beq.n	800c0c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	7c12      	ldrb	r2, [r2, #16]
 800c0bc:	f107 0108 	add.w	r1, r7, #8
 800c0c0:	4610      	mov	r0, r2
 800c0c2:	4798      	blx	r3
 800c0c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0c6:	e077      	b.n	800c1b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0c8:	6839      	ldr	r1, [r7, #0]
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 fa98 	bl	800c600 <USBD_CtlError>
            err++;
 800c0d0:	7afb      	ldrb	r3, [r7, #11]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	72fb      	strb	r3, [r7, #11]
          break;
 800c0d6:	e06f      	b.n	800c1b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00b      	beq.n	800c0fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	7c12      	ldrb	r2, [r2, #16]
 800c0f0:	f107 0108 	add.w	r1, r7, #8
 800c0f4:	4610      	mov	r0, r2
 800c0f6:	4798      	blx	r3
 800c0f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0fa:	e05d      	b.n	800c1b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fa7e 	bl	800c600 <USBD_CtlError>
            err++;
 800c104:	7afb      	ldrb	r3, [r7, #11]
 800c106:	3301      	adds	r3, #1
 800c108:	72fb      	strb	r3, [r7, #11]
          break;
 800c10a:	e055      	b.n	800c1b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d00b      	beq.n	800c130 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	7c12      	ldrb	r2, [r2, #16]
 800c124:	f107 0108 	add.w	r1, r7, #8
 800c128:	4610      	mov	r0, r2
 800c12a:	4798      	blx	r3
 800c12c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c12e:	e043      	b.n	800c1b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c130:	6839      	ldr	r1, [r7, #0]
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 fa64 	bl	800c600 <USBD_CtlError>
            err++;
 800c138:	7afb      	ldrb	r3, [r7, #11]
 800c13a:	3301      	adds	r3, #1
 800c13c:	72fb      	strb	r3, [r7, #11]
          break;
 800c13e:	e03b      	b.n	800c1b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c146:	695b      	ldr	r3, [r3, #20]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d00b      	beq.n	800c164 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c152:	695b      	ldr	r3, [r3, #20]
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	7c12      	ldrb	r2, [r2, #16]
 800c158:	f107 0108 	add.w	r1, r7, #8
 800c15c:	4610      	mov	r0, r2
 800c15e:	4798      	blx	r3
 800c160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c162:	e029      	b.n	800c1b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c164:	6839      	ldr	r1, [r7, #0]
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 fa4a 	bl	800c600 <USBD_CtlError>
            err++;
 800c16c:	7afb      	ldrb	r3, [r7, #11]
 800c16e:	3301      	adds	r3, #1
 800c170:	72fb      	strb	r3, [r7, #11]
          break;
 800c172:	e021      	b.n	800c1b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c17a:	699b      	ldr	r3, [r3, #24]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00b      	beq.n	800c198 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c186:	699b      	ldr	r3, [r3, #24]
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	7c12      	ldrb	r2, [r2, #16]
 800c18c:	f107 0108 	add.w	r1, r7, #8
 800c190:	4610      	mov	r0, r2
 800c192:	4798      	blx	r3
 800c194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c196:	e00f      	b.n	800c1b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c198:	6839      	ldr	r1, [r7, #0]
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fa30 	bl	800c600 <USBD_CtlError>
            err++;
 800c1a0:	7afb      	ldrb	r3, [r7, #11]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c1a6:	e007      	b.n	800c1b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 fa28 	bl	800c600 <USBD_CtlError>
          err++;
 800c1b0:	7afb      	ldrb	r3, [r7, #11]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c1b6:	bf00      	nop
      }
      break;
 800c1b8:	e037      	b.n	800c22a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	7c1b      	ldrb	r3, [r3, #16]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d109      	bne.n	800c1d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ca:	f107 0208 	add.w	r2, r7, #8
 800c1ce:	4610      	mov	r0, r2
 800c1d0:	4798      	blx	r3
 800c1d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1d4:	e029      	b.n	800c22a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 fa11 	bl	800c600 <USBD_CtlError>
        err++;
 800c1de:	7afb      	ldrb	r3, [r7, #11]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	72fb      	strb	r3, [r7, #11]
      break;
 800c1e4:	e021      	b.n	800c22a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	7c1b      	ldrb	r3, [r3, #16]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d10d      	bne.n	800c20a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f6:	f107 0208 	add.w	r2, r7, #8
 800c1fa:	4610      	mov	r0, r2
 800c1fc:	4798      	blx	r3
 800c1fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	3301      	adds	r3, #1
 800c204:	2207      	movs	r2, #7
 800c206:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c208:	e00f      	b.n	800c22a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c20a:	6839      	ldr	r1, [r7, #0]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 f9f7 	bl	800c600 <USBD_CtlError>
        err++;
 800c212:	7afb      	ldrb	r3, [r7, #11]
 800c214:	3301      	adds	r3, #1
 800c216:	72fb      	strb	r3, [r7, #11]
      break;
 800c218:	e007      	b.n	800c22a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c21a:	6839      	ldr	r1, [r7, #0]
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f9ef 	bl	800c600 <USBD_CtlError>
      err++;
 800c222:	7afb      	ldrb	r3, [r7, #11]
 800c224:	3301      	adds	r3, #1
 800c226:	72fb      	strb	r3, [r7, #11]
      break;
 800c228:	bf00      	nop
  }

  if (err != 0U)
 800c22a:	7afb      	ldrb	r3, [r7, #11]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d11e      	bne.n	800c26e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	88db      	ldrh	r3, [r3, #6]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d016      	beq.n	800c266 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c238:	893b      	ldrh	r3, [r7, #8]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00e      	beq.n	800c25c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	88da      	ldrh	r2, [r3, #6]
 800c242:	893b      	ldrh	r3, [r7, #8]
 800c244:	4293      	cmp	r3, r2
 800c246:	bf28      	it	cs
 800c248:	4613      	movcs	r3, r2
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c24e:	893b      	ldrh	r3, [r7, #8]
 800c250:	461a      	mov	r2, r3
 800c252:	68f9      	ldr	r1, [r7, #12]
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fa44 	bl	800c6e2 <USBD_CtlSendData>
 800c25a:	e009      	b.n	800c270 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c25c:	6839      	ldr	r1, [r7, #0]
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f9ce 	bl	800c600 <USBD_CtlError>
 800c264:	e004      	b.n	800c270 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fa95 	bl	800c796 <USBD_CtlSendStatus>
 800c26c:	e000      	b.n	800c270 <USBD_GetDescriptor+0x2cc>
    return;
 800c26e:	bf00      	nop
  }
}
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop

0800c278 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	889b      	ldrh	r3, [r3, #4]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d131      	bne.n	800c2ee <USBD_SetAddress+0x76>
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	88db      	ldrh	r3, [r3, #6]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d12d      	bne.n	800c2ee <USBD_SetAddress+0x76>
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	885b      	ldrh	r3, [r3, #2]
 800c296:	2b7f      	cmp	r3, #127	; 0x7f
 800c298:	d829      	bhi.n	800c2ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	885b      	ldrh	r3, [r3, #2]
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	2b03      	cmp	r3, #3
 800c2b0:	d104      	bne.n	800c2bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 f9a3 	bl	800c600 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ba:	e01d      	b.n	800c2f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	7bfa      	ldrb	r2, [r7, #15]
 800c2c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f006 fd89 	bl	8012de0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fa61 	bl	800c796 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d004      	beq.n	800c2e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2202      	movs	r2, #2
 800c2de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2e2:	e009      	b.n	800c2f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ec:	e004      	b.n	800c2f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c2ee:	6839      	ldr	r1, [r7, #0]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 f985 	bl	800c600 <USBD_CtlError>
  }
}
 800c2f6:	bf00      	nop
 800c2f8:	bf00      	nop
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c30a:	2300      	movs	r3, #0
 800c30c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	885b      	ldrh	r3, [r3, #2]
 800c312:	b2da      	uxtb	r2, r3
 800c314:	4b4c      	ldr	r3, [pc, #304]	; (800c448 <USBD_SetConfig+0x148>)
 800c316:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c318:	4b4b      	ldr	r3, [pc, #300]	; (800c448 <USBD_SetConfig+0x148>)
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d905      	bls.n	800c32c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f96c 	bl	800c600 <USBD_CtlError>
    return USBD_FAIL;
 800c328:	2303      	movs	r3, #3
 800c32a:	e088      	b.n	800c43e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b02      	cmp	r3, #2
 800c336:	d002      	beq.n	800c33e <USBD_SetConfig+0x3e>
 800c338:	2b03      	cmp	r3, #3
 800c33a:	d025      	beq.n	800c388 <USBD_SetConfig+0x88>
 800c33c:	e071      	b.n	800c422 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c33e:	4b42      	ldr	r3, [pc, #264]	; (800c448 <USBD_SetConfig+0x148>)
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d01c      	beq.n	800c380 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c346:	4b40      	ldr	r3, [pc, #256]	; (800c448 <USBD_SetConfig+0x148>)
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	461a      	mov	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c350:	4b3d      	ldr	r3, [pc, #244]	; (800c448 <USBD_SetConfig+0x148>)
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	4619      	mov	r1, r3
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7ff f948 	bl	800b5ec <USBD_SetClassConfig>
 800c35c:	4603      	mov	r3, r0
 800c35e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c360:	7bfb      	ldrb	r3, [r7, #15]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d004      	beq.n	800c370 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c366:	6839      	ldr	r1, [r7, #0]
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 f949 	bl	800c600 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c36e:	e065      	b.n	800c43c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 fa10 	bl	800c796 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2203      	movs	r2, #3
 800c37a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c37e:	e05d      	b.n	800c43c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fa08 	bl	800c796 <USBD_CtlSendStatus>
      break;
 800c386:	e059      	b.n	800c43c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c388:	4b2f      	ldr	r3, [pc, #188]	; (800c448 <USBD_SetConfig+0x148>)
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d112      	bne.n	800c3b6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2202      	movs	r2, #2
 800c394:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c398:	4b2b      	ldr	r3, [pc, #172]	; (800c448 <USBD_SetConfig+0x148>)
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	461a      	mov	r2, r3
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3a2:	4b29      	ldr	r3, [pc, #164]	; (800c448 <USBD_SetConfig+0x148>)
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f7ff f93b 	bl	800b624 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 f9f1 	bl	800c796 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c3b4:	e042      	b.n	800c43c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c3b6:	4b24      	ldr	r3, [pc, #144]	; (800c448 <USBD_SetConfig+0x148>)
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d02a      	beq.n	800c41a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f7ff f929 	bl	800b624 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c3d2:	4b1d      	ldr	r3, [pc, #116]	; (800c448 <USBD_SetConfig+0x148>)
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c3dc:	4b1a      	ldr	r3, [pc, #104]	; (800c448 <USBD_SetConfig+0x148>)
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7ff f902 	bl	800b5ec <USBD_SetClassConfig>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c3ec:	7bfb      	ldrb	r3, [r7, #15]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00f      	beq.n	800c412 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c3f2:	6839      	ldr	r1, [r7, #0]
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 f903 	bl	800c600 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	4619      	mov	r1, r3
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f7ff f90e 	bl	800b624 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2202      	movs	r2, #2
 800c40c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c410:	e014      	b.n	800c43c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 f9bf 	bl	800c796 <USBD_CtlSendStatus>
      break;
 800c418:	e010      	b.n	800c43c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 f9bb 	bl	800c796 <USBD_CtlSendStatus>
      break;
 800c420:	e00c      	b.n	800c43c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c422:	6839      	ldr	r1, [r7, #0]
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 f8eb 	bl	800c600 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c42a:	4b07      	ldr	r3, [pc, #28]	; (800c448 <USBD_SetConfig+0x148>)
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	4619      	mov	r1, r3
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f7ff f8f7 	bl	800b624 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c436:	2303      	movs	r3, #3
 800c438:	73fb      	strb	r3, [r7, #15]
      break;
 800c43a:	bf00      	nop
  }

  return ret;
 800c43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	200004e9 	.word	0x200004e9

0800c44c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	88db      	ldrh	r3, [r3, #6]
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d004      	beq.n	800c468 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c45e:	6839      	ldr	r1, [r7, #0]
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 f8cd 	bl	800c600 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c466:	e023      	b.n	800c4b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	2b02      	cmp	r3, #2
 800c472:	dc02      	bgt.n	800c47a <USBD_GetConfig+0x2e>
 800c474:	2b00      	cmp	r3, #0
 800c476:	dc03      	bgt.n	800c480 <USBD_GetConfig+0x34>
 800c478:	e015      	b.n	800c4a6 <USBD_GetConfig+0x5a>
 800c47a:	2b03      	cmp	r3, #3
 800c47c:	d00b      	beq.n	800c496 <USBD_GetConfig+0x4a>
 800c47e:	e012      	b.n	800c4a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	3308      	adds	r3, #8
 800c48a:	2201      	movs	r2, #1
 800c48c:	4619      	mov	r1, r3
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f927 	bl	800c6e2 <USBD_CtlSendData>
        break;
 800c494:	e00c      	b.n	800c4b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	3304      	adds	r3, #4
 800c49a:	2201      	movs	r2, #1
 800c49c:	4619      	mov	r1, r3
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 f91f 	bl	800c6e2 <USBD_CtlSendData>
        break;
 800c4a4:	e004      	b.n	800c4b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c4a6:	6839      	ldr	r1, [r7, #0]
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 f8a9 	bl	800c600 <USBD_CtlError>
        break;
 800c4ae:	bf00      	nop
}
 800c4b0:	bf00      	nop
 800c4b2:	3708      	adds	r7, #8
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	d81e      	bhi.n	800c50e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	88db      	ldrh	r3, [r3, #6]
 800c4d4:	2b02      	cmp	r3, #2
 800c4d6:	d004      	beq.n	800c4e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c4d8:	6839      	ldr	r1, [r7, #0]
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 f890 	bl	800c600 <USBD_CtlError>
        break;
 800c4e0:	e01a      	b.n	800c518 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d005      	beq.n	800c4fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	f043 0202 	orr.w	r2, r3, #2
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	330c      	adds	r3, #12
 800c502:	2202      	movs	r2, #2
 800c504:	4619      	mov	r1, r3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 f8eb 	bl	800c6e2 <USBD_CtlSendData>
      break;
 800c50c:	e004      	b.n	800c518 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c50e:	6839      	ldr	r1, [r7, #0]
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 f875 	bl	800c600 <USBD_CtlError>
      break;
 800c516:	bf00      	nop
  }
}
 800c518:	bf00      	nop
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	885b      	ldrh	r3, [r3, #2]
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d106      	bne.n	800c540 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2201      	movs	r2, #1
 800c536:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 f92b 	bl	800c796 <USBD_CtlSendStatus>
  }
}
 800c540:	bf00      	nop
 800c542:	3708      	adds	r7, #8
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	3b01      	subs	r3, #1
 800c55c:	2b02      	cmp	r3, #2
 800c55e:	d80b      	bhi.n	800c578 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	885b      	ldrh	r3, [r3, #2]
 800c564:	2b01      	cmp	r3, #1
 800c566:	d10c      	bne.n	800c582 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 f910 	bl	800c796 <USBD_CtlSendStatus>
      }
      break;
 800c576:	e004      	b.n	800c582 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 f840 	bl	800c600 <USBD_CtlError>
      break;
 800c580:	e000      	b.n	800c584 <USBD_ClrFeature+0x3c>
      break;
 800c582:	bf00      	nop
  }
}
 800c584:	bf00      	nop
 800c586:	3708      	adds	r7, #8
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	781a      	ldrb	r2, [r3, #0]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	781a      	ldrb	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	f7ff fabb 	bl	800bb32 <SWAPBYTE>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	461a      	mov	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f7ff faae 	bl	800bb32 <SWAPBYTE>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	461a      	mov	r2, r3
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f7ff faa1 	bl	800bb32 <SWAPBYTE>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	80da      	strh	r2, [r3, #6]
}
 800c5f8:	bf00      	nop
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c60a:	2180      	movs	r1, #128	; 0x80
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f006 fb7d 	bl	8012d0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c612:	2100      	movs	r1, #0
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f006 fb79 	bl	8012d0c <USBD_LL_StallEP>
}
 800c61a:	bf00      	nop
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b086      	sub	sp, #24
 800c626:	af00      	add	r7, sp, #0
 800c628:	60f8      	str	r0, [r7, #12]
 800c62a:	60b9      	str	r1, [r7, #8]
 800c62c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c62e:	2300      	movs	r3, #0
 800c630:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d036      	beq.n	800c6a6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c63c:	6938      	ldr	r0, [r7, #16]
 800c63e:	f000 f836 	bl	800c6ae <USBD_GetLen>
 800c642:	4603      	mov	r3, r0
 800c644:	3301      	adds	r3, #1
 800c646:	b29b      	uxth	r3, r3
 800c648:	005b      	lsls	r3, r3, #1
 800c64a:	b29a      	uxth	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c650:	7dfb      	ldrb	r3, [r7, #23]
 800c652:	68ba      	ldr	r2, [r7, #8]
 800c654:	4413      	add	r3, r2
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	7812      	ldrb	r2, [r2, #0]
 800c65a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c65c:	7dfb      	ldrb	r3, [r7, #23]
 800c65e:	3301      	adds	r3, #1
 800c660:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c662:	7dfb      	ldrb	r3, [r7, #23]
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	4413      	add	r3, r2
 800c668:	2203      	movs	r2, #3
 800c66a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c66c:	7dfb      	ldrb	r3, [r7, #23]
 800c66e:	3301      	adds	r3, #1
 800c670:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c672:	e013      	b.n	800c69c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c674:	7dfb      	ldrb	r3, [r7, #23]
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	4413      	add	r3, r2
 800c67a:	693a      	ldr	r2, [r7, #16]
 800c67c:	7812      	ldrb	r2, [r2, #0]
 800c67e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	3301      	adds	r3, #1
 800c684:	613b      	str	r3, [r7, #16]
    idx++;
 800c686:	7dfb      	ldrb	r3, [r7, #23]
 800c688:	3301      	adds	r3, #1
 800c68a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c68c:	7dfb      	ldrb	r3, [r7, #23]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	4413      	add	r3, r2
 800c692:	2200      	movs	r2, #0
 800c694:	701a      	strb	r2, [r3, #0]
    idx++;
 800c696:	7dfb      	ldrb	r3, [r7, #23]
 800c698:	3301      	adds	r3, #1
 800c69a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d1e7      	bne.n	800c674 <USBD_GetString+0x52>
 800c6a4:	e000      	b.n	800c6a8 <USBD_GetString+0x86>
    return;
 800c6a6:	bf00      	nop
  }
}
 800c6a8:	3718      	adds	r7, #24
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	b085      	sub	sp, #20
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c6be:	e005      	b.n	800c6cc <USBD_GetLen+0x1e>
  {
    len++;
 800c6c0:	7bfb      	ldrb	r3, [r7, #15]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1f5      	bne.n	800c6c0 <USBD_GetLen+0x12>
  }

  return len;
 800c6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3714      	adds	r7, #20
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr

0800c6e2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b084      	sub	sp, #16
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	60f8      	str	r0, [r7, #12]
 800c6ea:	60b9      	str	r1, [r7, #8]
 800c6ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2202      	movs	r2, #2
 800c6f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	68ba      	ldr	r2, [r7, #8]
 800c706:	2100      	movs	r1, #0
 800c708:	68f8      	ldr	r0, [r7, #12]
 800c70a:	f006 fb88 	bl	8012e1e <USBD_LL_Transmit>

  return USBD_OK;
 800c70e:	2300      	movs	r3, #0
}
 800c710:	4618      	mov	r0, r3
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	68ba      	ldr	r2, [r7, #8]
 800c728:	2100      	movs	r1, #0
 800c72a:	68f8      	ldr	r0, [r7, #12]
 800c72c:	f006 fb77 	bl	8012e1e <USBD_LL_Transmit>

  return USBD_OK;
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3710      	adds	r7, #16
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b084      	sub	sp, #16
 800c73e:	af00      	add	r7, sp, #0
 800c740:	60f8      	str	r0, [r7, #12]
 800c742:	60b9      	str	r1, [r7, #8]
 800c744:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2203      	movs	r2, #3
 800c74a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	2100      	movs	r1, #0
 800c764:	68f8      	ldr	r0, [r7, #12]
 800c766:	f006 fb7b 	bl	8012e60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	2100      	movs	r1, #0
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f006 fb6a 	bl	8012e60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b082      	sub	sp, #8
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2204      	movs	r2, #4
 800c7a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f006 fb36 	bl	8012e1e <USBD_LL_Transmit>

  return USBD_OK;
 800c7b2:	2300      	movs	r3, #0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2205      	movs	r2, #5
 800c7c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f006 fb44 	bl	8012e60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
	...

0800c7e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c7ee:	79fb      	ldrb	r3, [r7, #7]
 800c7f0:	4a08      	ldr	r2, [pc, #32]	; (800c814 <disk_status+0x30>)
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	4413      	add	r3, r2
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	79fa      	ldrb	r2, [r7, #7]
 800c7fc:	4905      	ldr	r1, [pc, #20]	; (800c814 <disk_status+0x30>)
 800c7fe:	440a      	add	r2, r1
 800c800:	7a12      	ldrb	r2, [r2, #8]
 800c802:	4610      	mov	r0, r2
 800c804:	4798      	blx	r3
 800c806:	4603      	mov	r3, r0
 800c808:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3710      	adds	r7, #16
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	20000514 	.word	0x20000514

0800c818 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	4603      	mov	r3, r0
 800c820:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c822:	2300      	movs	r3, #0
 800c824:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c826:	79fb      	ldrb	r3, [r7, #7]
 800c828:	4a0d      	ldr	r2, [pc, #52]	; (800c860 <disk_initialize+0x48>)
 800c82a:	5cd3      	ldrb	r3, [r2, r3]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d111      	bne.n	800c854 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c830:	79fb      	ldrb	r3, [r7, #7]
 800c832:	4a0b      	ldr	r2, [pc, #44]	; (800c860 <disk_initialize+0x48>)
 800c834:	2101      	movs	r1, #1
 800c836:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c838:	79fb      	ldrb	r3, [r7, #7]
 800c83a:	4a09      	ldr	r2, [pc, #36]	; (800c860 <disk_initialize+0x48>)
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	4413      	add	r3, r2
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	79fa      	ldrb	r2, [r7, #7]
 800c846:	4906      	ldr	r1, [pc, #24]	; (800c860 <disk_initialize+0x48>)
 800c848:	440a      	add	r2, r1
 800c84a:	7a12      	ldrb	r2, [r2, #8]
 800c84c:	4610      	mov	r0, r2
 800c84e:	4798      	blx	r3
 800c850:	4603      	mov	r3, r0
 800c852:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c854:	7bfb      	ldrb	r3, [r7, #15]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	20000514 	.word	0x20000514

0800c864 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c864:	b590      	push	{r4, r7, lr}
 800c866:	b087      	sub	sp, #28
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60b9      	str	r1, [r7, #8]
 800c86c:	607a      	str	r2, [r7, #4]
 800c86e:	603b      	str	r3, [r7, #0]
 800c870:	4603      	mov	r3, r0
 800c872:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c874:	7bfb      	ldrb	r3, [r7, #15]
 800c876:	4a0a      	ldr	r2, [pc, #40]	; (800c8a0 <disk_read+0x3c>)
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	4413      	add	r3, r2
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	689c      	ldr	r4, [r3, #8]
 800c880:	7bfb      	ldrb	r3, [r7, #15]
 800c882:	4a07      	ldr	r2, [pc, #28]	; (800c8a0 <disk_read+0x3c>)
 800c884:	4413      	add	r3, r2
 800c886:	7a18      	ldrb	r0, [r3, #8]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	68b9      	ldr	r1, [r7, #8]
 800c88e:	47a0      	blx	r4
 800c890:	4603      	mov	r3, r0
 800c892:	75fb      	strb	r3, [r7, #23]
  return res;
 800c894:	7dfb      	ldrb	r3, [r7, #23]
}
 800c896:	4618      	mov	r0, r3
 800c898:	371c      	adds	r7, #28
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd90      	pop	{r4, r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	20000514 	.word	0x20000514

0800c8a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c8a4:	b590      	push	{r4, r7, lr}
 800c8a6:	b087      	sub	sp, #28
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60b9      	str	r1, [r7, #8]
 800c8ac:	607a      	str	r2, [r7, #4]
 800c8ae:	603b      	str	r3, [r7, #0]
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c8b4:	7bfb      	ldrb	r3, [r7, #15]
 800c8b6:	4a0a      	ldr	r2, [pc, #40]	; (800c8e0 <disk_write+0x3c>)
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4413      	add	r3, r2
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	68dc      	ldr	r4, [r3, #12]
 800c8c0:	7bfb      	ldrb	r3, [r7, #15]
 800c8c2:	4a07      	ldr	r2, [pc, #28]	; (800c8e0 <disk_write+0x3c>)
 800c8c4:	4413      	add	r3, r2
 800c8c6:	7a18      	ldrb	r0, [r3, #8]
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	68b9      	ldr	r1, [r7, #8]
 800c8ce:	47a0      	blx	r4
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800c8d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	371c      	adds	r7, #28
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd90      	pop	{r4, r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	20000514 	.word	0x20000514

0800c8e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	603a      	str	r2, [r7, #0]
 800c8ee:	71fb      	strb	r3, [r7, #7]
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c8f4:	79fb      	ldrb	r3, [r7, #7]
 800c8f6:	4a09      	ldr	r2, [pc, #36]	; (800c91c <disk_ioctl+0x38>)
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	4413      	add	r3, r2
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	691b      	ldr	r3, [r3, #16]
 800c900:	79fa      	ldrb	r2, [r7, #7]
 800c902:	4906      	ldr	r1, [pc, #24]	; (800c91c <disk_ioctl+0x38>)
 800c904:	440a      	add	r2, r1
 800c906:	7a10      	ldrb	r0, [r2, #8]
 800c908:	79b9      	ldrb	r1, [r7, #6]
 800c90a:	683a      	ldr	r2, [r7, #0]
 800c90c:	4798      	blx	r3
 800c90e:	4603      	mov	r3, r0
 800c910:	73fb      	strb	r3, [r7, #15]
  return res;
 800c912:	7bfb      	ldrb	r3, [r7, #15]
}
 800c914:	4618      	mov	r0, r3
 800c916:	3710      	adds	r7, #16
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	20000514 	.word	0x20000514

0800c920 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c920:	b480      	push	{r7}
 800c922:	b085      	sub	sp, #20
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	3301      	adds	r3, #1
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c930:	89fb      	ldrh	r3, [r7, #14]
 800c932:	021b      	lsls	r3, r3, #8
 800c934:	b21a      	sxth	r2, r3
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	b21b      	sxth	r3, r3
 800c93c:	4313      	orrs	r3, r2
 800c93e:	b21b      	sxth	r3, r3
 800c940:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c942:	89fb      	ldrh	r3, [r7, #14]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3714      	adds	r7, #20
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c950:	b480      	push	{r7}
 800c952:	b085      	sub	sp, #20
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	3303      	adds	r3, #3
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	021b      	lsls	r3, r3, #8
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	3202      	adds	r2, #2
 800c968:	7812      	ldrb	r2, [r2, #0]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	021b      	lsls	r3, r3, #8
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	3201      	adds	r2, #1
 800c976:	7812      	ldrb	r2, [r2, #0]
 800c978:	4313      	orrs	r3, r2
 800c97a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	021b      	lsls	r3, r3, #8
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	7812      	ldrb	r2, [r2, #0]
 800c984:	4313      	orrs	r3, r2
 800c986:	60fb      	str	r3, [r7, #12]
	return rv;
 800c988:	68fb      	ldr	r3, [r7, #12]
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3714      	adds	r7, #20
 800c98e:	46bd      	mov	sp, r7
 800c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c994:	4770      	bx	lr

0800c996 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c996:	b480      	push	{r7}
 800c998:	b083      	sub	sp, #12
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
 800c99e:	460b      	mov	r3, r1
 800c9a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	1c5a      	adds	r2, r3, #1
 800c9a6:	607a      	str	r2, [r7, #4]
 800c9a8:	887a      	ldrh	r2, [r7, #2]
 800c9aa:	b2d2      	uxtb	r2, r2
 800c9ac:	701a      	strb	r2, [r3, #0]
 800c9ae:	887b      	ldrh	r3, [r7, #2]
 800c9b0:	0a1b      	lsrs	r3, r3, #8
 800c9b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	1c5a      	adds	r2, r3, #1
 800c9b8:	607a      	str	r2, [r7, #4]
 800c9ba:	887a      	ldrh	r2, [r7, #2]
 800c9bc:	b2d2      	uxtb	r2, r2
 800c9be:	701a      	strb	r2, [r3, #0]
}
 800c9c0:	bf00      	nop
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	1c5a      	adds	r2, r3, #1
 800c9da:	607a      	str	r2, [r7, #4]
 800c9dc:	683a      	ldr	r2, [r7, #0]
 800c9de:	b2d2      	uxtb	r2, r2
 800c9e0:	701a      	strb	r2, [r3, #0]
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	0a1b      	lsrs	r3, r3, #8
 800c9e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	1c5a      	adds	r2, r3, #1
 800c9ec:	607a      	str	r2, [r7, #4]
 800c9ee:	683a      	ldr	r2, [r7, #0]
 800c9f0:	b2d2      	uxtb	r2, r2
 800c9f2:	701a      	strb	r2, [r3, #0]
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	0a1b      	lsrs	r3, r3, #8
 800c9f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	1c5a      	adds	r2, r3, #1
 800c9fe:	607a      	str	r2, [r7, #4]
 800ca00:	683a      	ldr	r2, [r7, #0]
 800ca02:	b2d2      	uxtb	r2, r2
 800ca04:	701a      	strb	r2, [r3, #0]
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	0a1b      	lsrs	r3, r3, #8
 800ca0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	1c5a      	adds	r2, r3, #1
 800ca10:	607a      	str	r2, [r7, #4]
 800ca12:	683a      	ldr	r2, [r7, #0]
 800ca14:	b2d2      	uxtb	r2, r2
 800ca16:	701a      	strb	r2, [r3, #0]
}
 800ca18:	bf00      	nop
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ca24:	b480      	push	{r7}
 800ca26:	b087      	sub	sp, #28
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00d      	beq.n	800ca5a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ca3e:	693a      	ldr	r2, [r7, #16]
 800ca40:	1c53      	adds	r3, r2, #1
 800ca42:	613b      	str	r3, [r7, #16]
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	1c59      	adds	r1, r3, #1
 800ca48:	6179      	str	r1, [r7, #20]
 800ca4a:	7812      	ldrb	r2, [r2, #0]
 800ca4c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	3b01      	subs	r3, #1
 800ca52:	607b      	str	r3, [r7, #4]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d1f1      	bne.n	800ca3e <mem_cpy+0x1a>
	}
}
 800ca5a:	bf00      	nop
 800ca5c:	371c      	adds	r7, #28
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr

0800ca66 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ca66:	b480      	push	{r7}
 800ca68:	b087      	sub	sp, #28
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	60f8      	str	r0, [r7, #12]
 800ca6e:	60b9      	str	r1, [r7, #8]
 800ca70:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	1c5a      	adds	r2, r3, #1
 800ca7a:	617a      	str	r2, [r7, #20]
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	b2d2      	uxtb	r2, r2
 800ca80:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	3b01      	subs	r3, #1
 800ca86:	607b      	str	r3, [r7, #4]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1f3      	bne.n	800ca76 <mem_set+0x10>
}
 800ca8e:	bf00      	nop
 800ca90:	bf00      	nop
 800ca92:	371c      	adds	r7, #28
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ca9c:	b480      	push	{r7}
 800ca9e:	b089      	sub	sp, #36	; 0x24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	61fb      	str	r3, [r7, #28]
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cab0:	2300      	movs	r3, #0
 800cab2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	1c5a      	adds	r2, r3, #1
 800cab8:	61fa      	str	r2, [r7, #28]
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	4619      	mov	r1, r3
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	1c5a      	adds	r2, r3, #1
 800cac2:	61ba      	str	r2, [r7, #24]
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	1acb      	subs	r3, r1, r3
 800cac8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	3b01      	subs	r3, #1
 800cace:	607b      	str	r3, [r7, #4]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d002      	beq.n	800cadc <mem_cmp+0x40>
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d0eb      	beq.n	800cab4 <mem_cmp+0x18>

	return r;
 800cadc:	697b      	ldr	r3, [r7, #20]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3724      	adds	r7, #36	; 0x24
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr

0800caea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800caea:	b480      	push	{r7}
 800caec:	b083      	sub	sp, #12
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800caf4:	e002      	b.n	800cafc <chk_chr+0x12>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	3301      	adds	r3, #1
 800cafa:	607b      	str	r3, [r7, #4]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d005      	beq.n	800cb10 <chk_chr+0x26>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	461a      	mov	r2, r3
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d1f2      	bne.n	800caf6 <chk_chr+0xc>
	return *str;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	781b      	ldrb	r3, [r3, #0]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	60bb      	str	r3, [r7, #8]
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	60fb      	str	r3, [r7, #12]
 800cb32:	e029      	b.n	800cb88 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cb34:	4a27      	ldr	r2, [pc, #156]	; (800cbd4 <chk_lock+0xb4>)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	011b      	lsls	r3, r3, #4
 800cb3a:	4413      	add	r3, r2
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d01d      	beq.n	800cb7e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cb42:	4a24      	ldr	r2, [pc, #144]	; (800cbd4 <chk_lock+0xb4>)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	011b      	lsls	r3, r3, #4
 800cb48:	4413      	add	r3, r2
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d116      	bne.n	800cb82 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cb54:	4a1f      	ldr	r2, [pc, #124]	; (800cbd4 <chk_lock+0xb4>)
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	011b      	lsls	r3, r3, #4
 800cb5a:	4413      	add	r3, r2
 800cb5c:	3304      	adds	r3, #4
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d10c      	bne.n	800cb82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cb68:	4a1a      	ldr	r2, [pc, #104]	; (800cbd4 <chk_lock+0xb4>)
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	011b      	lsls	r3, r3, #4
 800cb6e:	4413      	add	r3, r2
 800cb70:	3308      	adds	r3, #8
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d102      	bne.n	800cb82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cb7c:	e007      	b.n	800cb8e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	3301      	adds	r3, #1
 800cb86:	60fb      	str	r3, [r7, #12]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d9d2      	bls.n	800cb34 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2b02      	cmp	r3, #2
 800cb92:	d109      	bne.n	800cba8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d102      	bne.n	800cba0 <chk_lock+0x80>
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d101      	bne.n	800cba4 <chk_lock+0x84>
 800cba0:	2300      	movs	r3, #0
 800cba2:	e010      	b.n	800cbc6 <chk_lock+0xa6>
 800cba4:	2312      	movs	r3, #18
 800cba6:	e00e      	b.n	800cbc6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d108      	bne.n	800cbc0 <chk_lock+0xa0>
 800cbae:	4a09      	ldr	r2, [pc, #36]	; (800cbd4 <chk_lock+0xb4>)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	011b      	lsls	r3, r3, #4
 800cbb4:	4413      	add	r3, r2
 800cbb6:	330c      	adds	r3, #12
 800cbb8:	881b      	ldrh	r3, [r3, #0]
 800cbba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbbe:	d101      	bne.n	800cbc4 <chk_lock+0xa4>
 800cbc0:	2310      	movs	r3, #16
 800cbc2:	e000      	b.n	800cbc6 <chk_lock+0xa6>
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3714      	adds	r7, #20
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	200004f4 	.word	0x200004f4

0800cbd8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b083      	sub	sp, #12
 800cbdc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	607b      	str	r3, [r7, #4]
 800cbe2:	e002      	b.n	800cbea <enq_lock+0x12>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	607b      	str	r3, [r7, #4]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d806      	bhi.n	800cbfe <enq_lock+0x26>
 800cbf0:	4a09      	ldr	r2, [pc, #36]	; (800cc18 <enq_lock+0x40>)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	011b      	lsls	r3, r3, #4
 800cbf6:	4413      	add	r3, r2
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1f2      	bne.n	800cbe4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	bf14      	ite	ne
 800cc04:	2301      	movne	r3, #1
 800cc06:	2300      	moveq	r3, #0
 800cc08:	b2db      	uxtb	r3, r3
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	370c      	adds	r7, #12
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr
 800cc16:	bf00      	nop
 800cc18:	200004f4 	.word	0x200004f4

0800cc1c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cc26:	2300      	movs	r3, #0
 800cc28:	60fb      	str	r3, [r7, #12]
 800cc2a:	e01f      	b.n	800cc6c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cc2c:	4a41      	ldr	r2, [pc, #260]	; (800cd34 <inc_lock+0x118>)
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	011b      	lsls	r3, r3, #4
 800cc32:	4413      	add	r3, r2
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d113      	bne.n	800cc66 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cc3e:	4a3d      	ldr	r2, [pc, #244]	; (800cd34 <inc_lock+0x118>)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	011b      	lsls	r3, r3, #4
 800cc44:	4413      	add	r3, r2
 800cc46:	3304      	adds	r3, #4
 800cc48:	681a      	ldr	r2, [r3, #0]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d109      	bne.n	800cc66 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cc52:	4a38      	ldr	r2, [pc, #224]	; (800cd34 <inc_lock+0x118>)
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	011b      	lsls	r3, r3, #4
 800cc58:	4413      	add	r3, r2
 800cc5a:	3308      	adds	r3, #8
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d006      	beq.n	800cc74 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	60fb      	str	r3, [r7, #12]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d9dc      	bls.n	800cc2c <inc_lock+0x10>
 800cc72:	e000      	b.n	800cc76 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cc74:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2b02      	cmp	r3, #2
 800cc7a:	d132      	bne.n	800cce2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	60fb      	str	r3, [r7, #12]
 800cc80:	e002      	b.n	800cc88 <inc_lock+0x6c>
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	3301      	adds	r3, #1
 800cc86:	60fb      	str	r3, [r7, #12]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d806      	bhi.n	800cc9c <inc_lock+0x80>
 800cc8e:	4a29      	ldr	r2, [pc, #164]	; (800cd34 <inc_lock+0x118>)
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	011b      	lsls	r3, r3, #4
 800cc94:	4413      	add	r3, r2
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d1f2      	bne.n	800cc82 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2b02      	cmp	r3, #2
 800cca0:	d101      	bne.n	800cca6 <inc_lock+0x8a>
 800cca2:	2300      	movs	r3, #0
 800cca4:	e040      	b.n	800cd28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	4922      	ldr	r1, [pc, #136]	; (800cd34 <inc_lock+0x118>)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	011b      	lsls	r3, r3, #4
 800ccb0:	440b      	add	r3, r1
 800ccb2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	689a      	ldr	r2, [r3, #8]
 800ccb8:	491e      	ldr	r1, [pc, #120]	; (800cd34 <inc_lock+0x118>)
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	011b      	lsls	r3, r3, #4
 800ccbe:	440b      	add	r3, r1
 800ccc0:	3304      	adds	r3, #4
 800ccc2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	695a      	ldr	r2, [r3, #20]
 800ccc8:	491a      	ldr	r1, [pc, #104]	; (800cd34 <inc_lock+0x118>)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	011b      	lsls	r3, r3, #4
 800ccce:	440b      	add	r3, r1
 800ccd0:	3308      	adds	r3, #8
 800ccd2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ccd4:	4a17      	ldr	r2, [pc, #92]	; (800cd34 <inc_lock+0x118>)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	011b      	lsls	r3, r3, #4
 800ccda:	4413      	add	r3, r2
 800ccdc:	330c      	adds	r3, #12
 800ccde:	2200      	movs	r2, #0
 800cce0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d009      	beq.n	800ccfc <inc_lock+0xe0>
 800cce8:	4a12      	ldr	r2, [pc, #72]	; (800cd34 <inc_lock+0x118>)
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	011b      	lsls	r3, r3, #4
 800ccee:	4413      	add	r3, r2
 800ccf0:	330c      	adds	r3, #12
 800ccf2:	881b      	ldrh	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d001      	beq.n	800ccfc <inc_lock+0xe0>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	e015      	b.n	800cd28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d108      	bne.n	800cd14 <inc_lock+0xf8>
 800cd02:	4a0c      	ldr	r2, [pc, #48]	; (800cd34 <inc_lock+0x118>)
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	011b      	lsls	r3, r3, #4
 800cd08:	4413      	add	r3, r2
 800cd0a:	330c      	adds	r3, #12
 800cd0c:	881b      	ldrh	r3, [r3, #0]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	b29a      	uxth	r2, r3
 800cd12:	e001      	b.n	800cd18 <inc_lock+0xfc>
 800cd14:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd18:	4906      	ldr	r1, [pc, #24]	; (800cd34 <inc_lock+0x118>)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	011b      	lsls	r3, r3, #4
 800cd1e:	440b      	add	r3, r1
 800cd20:	330c      	adds	r3, #12
 800cd22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	3301      	adds	r3, #1
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3714      	adds	r7, #20
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr
 800cd34:	200004f4 	.word	0x200004f4

0800cd38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	3b01      	subs	r3, #1
 800cd44:	607b      	str	r3, [r7, #4]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d825      	bhi.n	800cd98 <dec_lock+0x60>
		n = Files[i].ctr;
 800cd4c:	4a17      	ldr	r2, [pc, #92]	; (800cdac <dec_lock+0x74>)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	011b      	lsls	r3, r3, #4
 800cd52:	4413      	add	r3, r2
 800cd54:	330c      	adds	r3, #12
 800cd56:	881b      	ldrh	r3, [r3, #0]
 800cd58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cd5a:	89fb      	ldrh	r3, [r7, #14]
 800cd5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd60:	d101      	bne.n	800cd66 <dec_lock+0x2e>
 800cd62:	2300      	movs	r3, #0
 800cd64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cd66:	89fb      	ldrh	r3, [r7, #14]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d002      	beq.n	800cd72 <dec_lock+0x3a>
 800cd6c:	89fb      	ldrh	r3, [r7, #14]
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cd72:	4a0e      	ldr	r2, [pc, #56]	; (800cdac <dec_lock+0x74>)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	011b      	lsls	r3, r3, #4
 800cd78:	4413      	add	r3, r2
 800cd7a:	330c      	adds	r3, #12
 800cd7c:	89fa      	ldrh	r2, [r7, #14]
 800cd7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cd80:	89fb      	ldrh	r3, [r7, #14]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d105      	bne.n	800cd92 <dec_lock+0x5a>
 800cd86:	4a09      	ldr	r2, [pc, #36]	; (800cdac <dec_lock+0x74>)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	011b      	lsls	r3, r3, #4
 800cd8c:	4413      	add	r3, r2
 800cd8e:	2200      	movs	r2, #0
 800cd90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cd92:	2300      	movs	r3, #0
 800cd94:	737b      	strb	r3, [r7, #13]
 800cd96:	e001      	b.n	800cd9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cd98:	2302      	movs	r3, #2
 800cd9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cd9c:	7b7b      	ldrb	r3, [r7, #13]
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3714      	adds	r7, #20
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr
 800cdaa:	bf00      	nop
 800cdac:	200004f4 	.word	0x200004f4

0800cdb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b085      	sub	sp, #20
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cdb8:	2300      	movs	r3, #0
 800cdba:	60fb      	str	r3, [r7, #12]
 800cdbc:	e010      	b.n	800cde0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cdbe:	4a0d      	ldr	r2, [pc, #52]	; (800cdf4 <clear_lock+0x44>)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	011b      	lsls	r3, r3, #4
 800cdc4:	4413      	add	r3, r2
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d105      	bne.n	800cdda <clear_lock+0x2a>
 800cdce:	4a09      	ldr	r2, [pc, #36]	; (800cdf4 <clear_lock+0x44>)
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	011b      	lsls	r3, r3, #4
 800cdd4:	4413      	add	r3, r2
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	3301      	adds	r3, #1
 800cdde:	60fb      	str	r3, [r7, #12]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d9eb      	bls.n	800cdbe <clear_lock+0xe>
	}
}
 800cde6:	bf00      	nop
 800cde8:	bf00      	nop
 800cdea:	3714      	adds	r7, #20
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr
 800cdf4:	200004f4 	.word	0x200004f4

0800cdf8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b086      	sub	sp, #24
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ce00:	2300      	movs	r3, #0
 800ce02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	78db      	ldrb	r3, [r3, #3]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d034      	beq.n	800ce76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	7858      	ldrb	r0, [r3, #1]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	f7ff fd40 	bl	800c8a4 <disk_write>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d002      	beq.n	800ce30 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	73fb      	strb	r3, [r7, #15]
 800ce2e:	e022      	b.n	800ce76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a1b      	ldr	r3, [r3, #32]
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	1ad2      	subs	r2, r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	699b      	ldr	r3, [r3, #24]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d217      	bcs.n	800ce76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	789b      	ldrb	r3, [r3, #2]
 800ce4a:	613b      	str	r3, [r7, #16]
 800ce4c:	e010      	b.n	800ce70 <sync_window+0x78>
					wsect += fs->fsize;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	699b      	ldr	r3, [r3, #24]
 800ce52:	697a      	ldr	r2, [r7, #20]
 800ce54:	4413      	add	r3, r2
 800ce56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	7858      	ldrb	r0, [r3, #1]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce62:	2301      	movs	r3, #1
 800ce64:	697a      	ldr	r2, [r7, #20]
 800ce66:	f7ff fd1d 	bl	800c8a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	3b01      	subs	r3, #1
 800ce6e:	613b      	str	r3, [r7, #16]
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d8eb      	bhi.n	800ce4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ce76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3718      	adds	r7, #24
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce92:	683a      	ldr	r2, [r7, #0]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d01b      	beq.n	800ced0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f7ff ffad 	bl	800cdf8 <sync_window>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cea2:	7bfb      	ldrb	r3, [r7, #15]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d113      	bne.n	800ced0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	7858      	ldrb	r0, [r3, #1]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	683a      	ldr	r2, [r7, #0]
 800ceb6:	f7ff fcd5 	bl	800c864 <disk_read>
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d004      	beq.n	800ceca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cec4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cec6:	2301      	movs	r3, #1
 800cec8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	683a      	ldr	r2, [r7, #0]
 800cece:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ced0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3710      	adds	r7, #16
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
	...

0800cedc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f7ff ff87 	bl	800cdf8 <sync_window>
 800ceea:	4603      	mov	r3, r0
 800ceec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ceee:	7bfb      	ldrb	r3, [r7, #15]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d158      	bne.n	800cfa6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	2b03      	cmp	r3, #3
 800cefa:	d148      	bne.n	800cf8e <sync_fs+0xb2>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	791b      	ldrb	r3, [r3, #4]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d144      	bne.n	800cf8e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	3330      	adds	r3, #48	; 0x30
 800cf08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf0c:	2100      	movs	r1, #0
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7ff fda9 	bl	800ca66 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	3330      	adds	r3, #48	; 0x30
 800cf18:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cf1c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7ff fd38 	bl	800c996 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	3330      	adds	r3, #48	; 0x30
 800cf2a:	4921      	ldr	r1, [pc, #132]	; (800cfb0 <sync_fs+0xd4>)
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7ff fd4d 	bl	800c9cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	3330      	adds	r3, #48	; 0x30
 800cf36:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cf3a:	491e      	ldr	r1, [pc, #120]	; (800cfb4 <sync_fs+0xd8>)
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7ff fd45 	bl	800c9cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	3330      	adds	r3, #48	; 0x30
 800cf46:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	4619      	mov	r1, r3
 800cf50:	4610      	mov	r0, r2
 800cf52:	f7ff fd3b 	bl	800c9cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	3330      	adds	r3, #48	; 0x30
 800cf5a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	68db      	ldr	r3, [r3, #12]
 800cf62:	4619      	mov	r1, r3
 800cf64:	4610      	mov	r0, r2
 800cf66:	f7ff fd31 	bl	800c9cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	69db      	ldr	r3, [r3, #28]
 800cf6e:	1c5a      	adds	r2, r3, #1
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	7858      	ldrb	r0, [r3, #1]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf82:	2301      	movs	r3, #1
 800cf84:	f7ff fc8e 	bl	800c8a4 <disk_write>
			fs->fsi_flag = 0;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	785b      	ldrb	r3, [r3, #1]
 800cf92:	2200      	movs	r2, #0
 800cf94:	2100      	movs	r1, #0
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7ff fca4 	bl	800c8e4 <disk_ioctl>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d001      	beq.n	800cfa6 <sync_fs+0xca>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cfa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	41615252 	.word	0x41615252
 800cfb4:	61417272 	.word	0x61417272

0800cfb8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	3b02      	subs	r3, #2
 800cfc6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	695b      	ldr	r3, [r3, #20]
 800cfcc:	3b02      	subs	r3, #2
 800cfce:	683a      	ldr	r2, [r7, #0]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d301      	bcc.n	800cfd8 <clust2sect+0x20>
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	e008      	b.n	800cfea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	895b      	ldrh	r3, [r3, #10]
 800cfdc:	461a      	mov	r2, r3
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	fb03 f202 	mul.w	r2, r3, r2
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfe8:	4413      	add	r3, r2
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	370c      	adds	r7, #12
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr

0800cff6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cff6:	b580      	push	{r7, lr}
 800cff8:	b086      	sub	sp, #24
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6078      	str	r0, [r7, #4]
 800cffe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d904      	bls.n	800d016 <get_fat+0x20>
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	695b      	ldr	r3, [r3, #20]
 800d010:	683a      	ldr	r2, [r7, #0]
 800d012:	429a      	cmp	r2, r3
 800d014:	d302      	bcc.n	800d01c <get_fat+0x26>
		val = 1;	/* Internal error */
 800d016:	2301      	movs	r3, #1
 800d018:	617b      	str	r3, [r7, #20]
 800d01a:	e08f      	b.n	800d13c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d01c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d020:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	2b03      	cmp	r3, #3
 800d028:	d062      	beq.n	800d0f0 <get_fat+0xfa>
 800d02a:	2b03      	cmp	r3, #3
 800d02c:	dc7c      	bgt.n	800d128 <get_fat+0x132>
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d002      	beq.n	800d038 <get_fat+0x42>
 800d032:	2b02      	cmp	r3, #2
 800d034:	d042      	beq.n	800d0bc <get_fat+0xc6>
 800d036:	e077      	b.n	800d128 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	60fb      	str	r3, [r7, #12]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	085b      	lsrs	r3, r3, #1
 800d040:	68fa      	ldr	r2, [r7, #12]
 800d042:	4413      	add	r3, r2
 800d044:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	6a1a      	ldr	r2, [r3, #32]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	0a5b      	lsrs	r3, r3, #9
 800d04e:	4413      	add	r3, r2
 800d050:	4619      	mov	r1, r3
 800d052:	6938      	ldr	r0, [r7, #16]
 800d054:	f7ff ff14 	bl	800ce80 <move_window>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d167      	bne.n	800d12e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	1c5a      	adds	r2, r3, #1
 800d062:	60fa      	str	r2, [r7, #12]
 800d064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d068:	693a      	ldr	r2, [r7, #16]
 800d06a:	4413      	add	r3, r2
 800d06c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d070:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	6a1a      	ldr	r2, [r3, #32]
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	0a5b      	lsrs	r3, r3, #9
 800d07a:	4413      	add	r3, r2
 800d07c:	4619      	mov	r1, r3
 800d07e:	6938      	ldr	r0, [r7, #16]
 800d080:	f7ff fefe 	bl	800ce80 <move_window>
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d153      	bne.n	800d132 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d090:	693a      	ldr	r2, [r7, #16]
 800d092:	4413      	add	r3, r2
 800d094:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d098:	021b      	lsls	r3, r3, #8
 800d09a:	461a      	mov	r2, r3
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	f003 0301 	and.w	r3, r3, #1
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d002      	beq.n	800d0b2 <get_fat+0xbc>
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	091b      	lsrs	r3, r3, #4
 800d0b0:	e002      	b.n	800d0b8 <get_fat+0xc2>
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0b8:	617b      	str	r3, [r7, #20]
			break;
 800d0ba:	e03f      	b.n	800d13c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	6a1a      	ldr	r2, [r3, #32]
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	0a1b      	lsrs	r3, r3, #8
 800d0c4:	4413      	add	r3, r2
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	6938      	ldr	r0, [r7, #16]
 800d0ca:	f7ff fed9 	bl	800ce80 <move_window>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d130      	bne.n	800d136 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	005b      	lsls	r3, r3, #1
 800d0de:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d0e2:	4413      	add	r3, r2
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7ff fc1b 	bl	800c920 <ld_word>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	617b      	str	r3, [r7, #20]
			break;
 800d0ee:	e025      	b.n	800d13c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	6a1a      	ldr	r2, [r3, #32]
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	09db      	lsrs	r3, r3, #7
 800d0f8:	4413      	add	r3, r2
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	6938      	ldr	r0, [r7, #16]
 800d0fe:	f7ff febf 	bl	800ce80 <move_window>
 800d102:	4603      	mov	r3, r0
 800d104:	2b00      	cmp	r3, #0
 800d106:	d118      	bne.n	800d13a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	009b      	lsls	r3, r3, #2
 800d112:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d116:	4413      	add	r3, r2
 800d118:	4618      	mov	r0, r3
 800d11a:	f7ff fc19 	bl	800c950 <ld_dword>
 800d11e:	4603      	mov	r3, r0
 800d120:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d124:	617b      	str	r3, [r7, #20]
			break;
 800d126:	e009      	b.n	800d13c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d128:	2301      	movs	r3, #1
 800d12a:	617b      	str	r3, [r7, #20]
 800d12c:	e006      	b.n	800d13c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d12e:	bf00      	nop
 800d130:	e004      	b.n	800d13c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d132:	bf00      	nop
 800d134:	e002      	b.n	800d13c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d136:	bf00      	nop
 800d138:	e000      	b.n	800d13c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d13a:	bf00      	nop
		}
	}

	return val;
 800d13c:	697b      	ldr	r3, [r7, #20]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3718      	adds	r7, #24
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d146:	b590      	push	{r4, r7, lr}
 800d148:	b089      	sub	sp, #36	; 0x24
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	60f8      	str	r0, [r7, #12]
 800d14e:	60b9      	str	r1, [r7, #8]
 800d150:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d152:	2302      	movs	r3, #2
 800d154:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	2b01      	cmp	r3, #1
 800d15a:	f240 80d2 	bls.w	800d302 <put_fat+0x1bc>
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	695b      	ldr	r3, [r3, #20]
 800d162:	68ba      	ldr	r2, [r7, #8]
 800d164:	429a      	cmp	r2, r3
 800d166:	f080 80cc 	bcs.w	800d302 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	2b03      	cmp	r3, #3
 800d170:	f000 8096 	beq.w	800d2a0 <put_fat+0x15a>
 800d174:	2b03      	cmp	r3, #3
 800d176:	f300 80cd 	bgt.w	800d314 <put_fat+0x1ce>
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d002      	beq.n	800d184 <put_fat+0x3e>
 800d17e:	2b02      	cmp	r3, #2
 800d180:	d06e      	beq.n	800d260 <put_fat+0x11a>
 800d182:	e0c7      	b.n	800d314 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	61bb      	str	r3, [r7, #24]
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	085b      	lsrs	r3, r3, #1
 800d18c:	69ba      	ldr	r2, [r7, #24]
 800d18e:	4413      	add	r3, r2
 800d190:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	6a1a      	ldr	r2, [r3, #32]
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	0a5b      	lsrs	r3, r3, #9
 800d19a:	4413      	add	r3, r2
 800d19c:	4619      	mov	r1, r3
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	f7ff fe6e 	bl	800ce80 <move_window>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d1a8:	7ffb      	ldrb	r3, [r7, #31]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	f040 80ab 	bne.w	800d306 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	1c59      	adds	r1, r3, #1
 800d1ba:	61b9      	str	r1, [r7, #24]
 800d1bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1c0:	4413      	add	r3, r2
 800d1c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	f003 0301 	and.w	r3, r3, #1
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00d      	beq.n	800d1ea <put_fat+0xa4>
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	b25b      	sxtb	r3, r3
 800d1d4:	f003 030f 	and.w	r3, r3, #15
 800d1d8:	b25a      	sxtb	r2, r3
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	011b      	lsls	r3, r3, #4
 800d1e0:	b25b      	sxtb	r3, r3
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	b25b      	sxtb	r3, r3
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	e001      	b.n	800d1ee <put_fat+0xa8>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	697a      	ldr	r2, [r7, #20]
 800d1f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6a1a      	ldr	r2, [r3, #32]
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	0a5b      	lsrs	r3, r3, #9
 800d200:	4413      	add	r3, r2
 800d202:	4619      	mov	r1, r3
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	f7ff fe3b 	bl	800ce80 <move_window>
 800d20a:	4603      	mov	r3, r0
 800d20c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d20e:	7ffb      	ldrb	r3, [r7, #31]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d17a      	bne.n	800d30a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d220:	4413      	add	r3, r2
 800d222:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	f003 0301 	and.w	r3, r3, #1
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d003      	beq.n	800d236 <put_fat+0xf0>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	091b      	lsrs	r3, r3, #4
 800d232:	b2db      	uxtb	r3, r3
 800d234:	e00e      	b.n	800d254 <put_fat+0x10e>
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	b25b      	sxtb	r3, r3
 800d23c:	f023 030f 	bic.w	r3, r3, #15
 800d240:	b25a      	sxtb	r2, r3
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	0a1b      	lsrs	r3, r3, #8
 800d246:	b25b      	sxtb	r3, r3
 800d248:	f003 030f 	and.w	r3, r3, #15
 800d24c:	b25b      	sxtb	r3, r3
 800d24e:	4313      	orrs	r3, r2
 800d250:	b25b      	sxtb	r3, r3
 800d252:	b2db      	uxtb	r3, r3
 800d254:	697a      	ldr	r2, [r7, #20]
 800d256:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2201      	movs	r2, #1
 800d25c:	70da      	strb	r2, [r3, #3]
			break;
 800d25e:	e059      	b.n	800d314 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	6a1a      	ldr	r2, [r3, #32]
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	0a1b      	lsrs	r3, r3, #8
 800d268:	4413      	add	r3, r2
 800d26a:	4619      	mov	r1, r3
 800d26c:	68f8      	ldr	r0, [r7, #12]
 800d26e:	f7ff fe07 	bl	800ce80 <move_window>
 800d272:	4603      	mov	r3, r0
 800d274:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d276:	7ffb      	ldrb	r3, [r7, #31]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d148      	bne.n	800d30e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	005b      	lsls	r3, r3, #1
 800d286:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d28a:	4413      	add	r3, r2
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	b292      	uxth	r2, r2
 800d290:	4611      	mov	r1, r2
 800d292:	4618      	mov	r0, r3
 800d294:	f7ff fb7f 	bl	800c996 <st_word>
			fs->wflag = 1;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2201      	movs	r2, #1
 800d29c:	70da      	strb	r2, [r3, #3]
			break;
 800d29e:	e039      	b.n	800d314 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6a1a      	ldr	r2, [r3, #32]
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	09db      	lsrs	r3, r3, #7
 800d2a8:	4413      	add	r3, r2
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	68f8      	ldr	r0, [r7, #12]
 800d2ae:	f7ff fde7 	bl	800ce80 <move_window>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d2b6:	7ffb      	ldrb	r3, [r7, #31]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d12a      	bne.n	800d312 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d2d0:	4413      	add	r3, r2
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7ff fb3c 	bl	800c950 <ld_dword>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d2de:	4323      	orrs	r3, r4
 800d2e0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	009b      	lsls	r3, r3, #2
 800d2ec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d2f0:	4413      	add	r3, r2
 800d2f2:	6879      	ldr	r1, [r7, #4]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7ff fb69 	bl	800c9cc <st_dword>
			fs->wflag = 1;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	70da      	strb	r2, [r3, #3]
			break;
 800d300:	e008      	b.n	800d314 <put_fat+0x1ce>
		}
	}
 800d302:	bf00      	nop
 800d304:	e006      	b.n	800d314 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d306:	bf00      	nop
 800d308:	e004      	b.n	800d314 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d30a:	bf00      	nop
 800d30c:	e002      	b.n	800d314 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d30e:	bf00      	nop
 800d310:	e000      	b.n	800d314 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d312:	bf00      	nop
	return res;
 800d314:	7ffb      	ldrb	r3, [r7, #31]
}
 800d316:	4618      	mov	r0, r3
 800d318:	3724      	adds	r7, #36	; 0x24
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd90      	pop	{r4, r7, pc}

0800d31e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b088      	sub	sp, #32
 800d322:	af00      	add	r7, sp, #0
 800d324:	60f8      	str	r0, [r7, #12]
 800d326:	60b9      	str	r1, [r7, #8]
 800d328:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d32a:	2300      	movs	r3, #0
 800d32c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	2b01      	cmp	r3, #1
 800d338:	d904      	bls.n	800d344 <remove_chain+0x26>
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	695b      	ldr	r3, [r3, #20]
 800d33e:	68ba      	ldr	r2, [r7, #8]
 800d340:	429a      	cmp	r2, r3
 800d342:	d301      	bcc.n	800d348 <remove_chain+0x2a>
 800d344:	2302      	movs	r3, #2
 800d346:	e04b      	b.n	800d3e0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00c      	beq.n	800d368 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d34e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d352:	6879      	ldr	r1, [r7, #4]
 800d354:	69b8      	ldr	r0, [r7, #24]
 800d356:	f7ff fef6 	bl	800d146 <put_fat>
 800d35a:	4603      	mov	r3, r0
 800d35c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d35e:	7ffb      	ldrb	r3, [r7, #31]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d001      	beq.n	800d368 <remove_chain+0x4a>
 800d364:	7ffb      	ldrb	r3, [r7, #31]
 800d366:	e03b      	b.n	800d3e0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d368:	68b9      	ldr	r1, [r7, #8]
 800d36a:	68f8      	ldr	r0, [r7, #12]
 800d36c:	f7ff fe43 	bl	800cff6 <get_fat>
 800d370:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d031      	beq.n	800d3dc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d101      	bne.n	800d382 <remove_chain+0x64>
 800d37e:	2302      	movs	r3, #2
 800d380:	e02e      	b.n	800d3e0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d388:	d101      	bne.n	800d38e <remove_chain+0x70>
 800d38a:	2301      	movs	r3, #1
 800d38c:	e028      	b.n	800d3e0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d38e:	2200      	movs	r2, #0
 800d390:	68b9      	ldr	r1, [r7, #8]
 800d392:	69b8      	ldr	r0, [r7, #24]
 800d394:	f7ff fed7 	bl	800d146 <put_fat>
 800d398:	4603      	mov	r3, r0
 800d39a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d39c:	7ffb      	ldrb	r3, [r7, #31]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d001      	beq.n	800d3a6 <remove_chain+0x88>
 800d3a2:	7ffb      	ldrb	r3, [r7, #31]
 800d3a4:	e01c      	b.n	800d3e0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	691a      	ldr	r2, [r3, #16]
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	695b      	ldr	r3, [r3, #20]
 800d3ae:	3b02      	subs	r3, #2
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d20b      	bcs.n	800d3cc <remove_chain+0xae>
			fs->free_clst++;
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	691b      	ldr	r3, [r3, #16]
 800d3b8:	1c5a      	adds	r2, r3, #1
 800d3ba:	69bb      	ldr	r3, [r7, #24]
 800d3bc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	791b      	ldrb	r3, [r3, #4]
 800d3c2:	f043 0301 	orr.w	r3, r3, #1
 800d3c6:	b2da      	uxtb	r2, r3
 800d3c8:	69bb      	ldr	r3, [r7, #24]
 800d3ca:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	695b      	ldr	r3, [r3, #20]
 800d3d4:	68ba      	ldr	r2, [r7, #8]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d3c6      	bcc.n	800d368 <remove_chain+0x4a>
 800d3da:	e000      	b.n	800d3de <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d3dc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d3de:	2300      	movs	r3, #0
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3720      	adds	r7, #32
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b088      	sub	sp, #32
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d10d      	bne.n	800d41a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d404:	69bb      	ldr	r3, [r7, #24]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d004      	beq.n	800d414 <create_chain+0x2c>
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	695b      	ldr	r3, [r3, #20]
 800d40e:	69ba      	ldr	r2, [r7, #24]
 800d410:	429a      	cmp	r2, r3
 800d412:	d31b      	bcc.n	800d44c <create_chain+0x64>
 800d414:	2301      	movs	r3, #1
 800d416:	61bb      	str	r3, [r7, #24]
 800d418:	e018      	b.n	800d44c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d41a:	6839      	ldr	r1, [r7, #0]
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f7ff fdea 	bl	800cff6 <get_fat>
 800d422:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2b01      	cmp	r3, #1
 800d428:	d801      	bhi.n	800d42e <create_chain+0x46>
 800d42a:	2301      	movs	r3, #1
 800d42c:	e070      	b.n	800d510 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d434:	d101      	bne.n	800d43a <create_chain+0x52>
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	e06a      	b.n	800d510 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	695b      	ldr	r3, [r3, #20]
 800d43e:	68fa      	ldr	r2, [r7, #12]
 800d440:	429a      	cmp	r2, r3
 800d442:	d201      	bcs.n	800d448 <create_chain+0x60>
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	e063      	b.n	800d510 <create_chain+0x128>
		scl = clst;
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	3301      	adds	r3, #1
 800d454:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	695b      	ldr	r3, [r3, #20]
 800d45a:	69fa      	ldr	r2, [r7, #28]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d307      	bcc.n	800d470 <create_chain+0x88>
				ncl = 2;
 800d460:	2302      	movs	r3, #2
 800d462:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d464:	69fa      	ldr	r2, [r7, #28]
 800d466:	69bb      	ldr	r3, [r7, #24]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d901      	bls.n	800d470 <create_chain+0x88>
 800d46c:	2300      	movs	r3, #0
 800d46e:	e04f      	b.n	800d510 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d470:	69f9      	ldr	r1, [r7, #28]
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f7ff fdbf 	bl	800cff6 <get_fat>
 800d478:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00e      	beq.n	800d49e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2b01      	cmp	r3, #1
 800d484:	d003      	beq.n	800d48e <create_chain+0xa6>
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d48c:	d101      	bne.n	800d492 <create_chain+0xaa>
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	e03e      	b.n	800d510 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d492:	69fa      	ldr	r2, [r7, #28]
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	429a      	cmp	r2, r3
 800d498:	d1da      	bne.n	800d450 <create_chain+0x68>
 800d49a:	2300      	movs	r3, #0
 800d49c:	e038      	b.n	800d510 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d49e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d4a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4a4:	69f9      	ldr	r1, [r7, #28]
 800d4a6:	6938      	ldr	r0, [r7, #16]
 800d4a8:	f7ff fe4d 	bl	800d146 <put_fat>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d4b0:	7dfb      	ldrb	r3, [r7, #23]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d109      	bne.n	800d4ca <create_chain+0xe2>
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d006      	beq.n	800d4ca <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d4bc:	69fa      	ldr	r2, [r7, #28]
 800d4be:	6839      	ldr	r1, [r7, #0]
 800d4c0:	6938      	ldr	r0, [r7, #16]
 800d4c2:	f7ff fe40 	bl	800d146 <put_fat>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d4ca:	7dfb      	ldrb	r3, [r7, #23]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d116      	bne.n	800d4fe <create_chain+0x116>
		fs->last_clst = ncl;
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	69fa      	ldr	r2, [r7, #28]
 800d4d4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	691a      	ldr	r2, [r3, #16]
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	695b      	ldr	r3, [r3, #20]
 800d4de:	3b02      	subs	r3, #2
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d804      	bhi.n	800d4ee <create_chain+0x106>
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	691b      	ldr	r3, [r3, #16]
 800d4e8:	1e5a      	subs	r2, r3, #1
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	791b      	ldrb	r3, [r3, #4]
 800d4f2:	f043 0301 	orr.w	r3, r3, #1
 800d4f6:	b2da      	uxtb	r2, r3
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	711a      	strb	r2, [r3, #4]
 800d4fc:	e007      	b.n	800d50e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d4fe:	7dfb      	ldrb	r3, [r7, #23]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d102      	bne.n	800d50a <create_chain+0x122>
 800d504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d508:	e000      	b.n	800d50c <create_chain+0x124>
 800d50a:	2301      	movs	r3, #1
 800d50c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d50e:	69fb      	ldr	r3, [r7, #28]
}
 800d510:	4618      	mov	r0, r3
 800d512:	3720      	adds	r7, #32
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d518:	b480      	push	{r7}
 800d51a:	b087      	sub	sp, #28
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d52c:	3304      	adds	r3, #4
 800d52e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	0a5b      	lsrs	r3, r3, #9
 800d534:	68fa      	ldr	r2, [r7, #12]
 800d536:	8952      	ldrh	r2, [r2, #10]
 800d538:	fbb3 f3f2 	udiv	r3, r3, r2
 800d53c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	1d1a      	adds	r2, r3, #4
 800d542:	613a      	str	r2, [r7, #16]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d101      	bne.n	800d552 <clmt_clust+0x3a>
 800d54e:	2300      	movs	r3, #0
 800d550:	e010      	b.n	800d574 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d552:	697a      	ldr	r2, [r7, #20]
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	429a      	cmp	r2, r3
 800d558:	d307      	bcc.n	800d56a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d55a:	697a      	ldr	r2, [r7, #20]
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	1ad3      	subs	r3, r2, r3
 800d560:	617b      	str	r3, [r7, #20]
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	3304      	adds	r3, #4
 800d566:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d568:	e7e9      	b.n	800d53e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d56a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	4413      	add	r3, r2
}
 800d574:	4618      	mov	r0, r3
 800d576:	371c      	adds	r7, #28
 800d578:	46bd      	mov	sp, r7
 800d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57e:	4770      	bx	lr

0800d580 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b086      	sub	sp, #24
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d596:	d204      	bcs.n	800d5a2 <dir_sdi+0x22>
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	f003 031f 	and.w	r3, r3, #31
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d001      	beq.n	800d5a6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d5a2:	2302      	movs	r3, #2
 800d5a4:	e063      	b.n	800d66e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	683a      	ldr	r2, [r7, #0]
 800d5aa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	689b      	ldr	r3, [r3, #8]
 800d5b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d106      	bne.n	800d5c6 <dir_sdi+0x46>
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	d902      	bls.n	800d5c6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d10c      	bne.n	800d5e6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	095b      	lsrs	r3, r3, #5
 800d5d0:	693a      	ldr	r2, [r7, #16]
 800d5d2:	8912      	ldrh	r2, [r2, #8]
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d301      	bcc.n	800d5dc <dir_sdi+0x5c>
 800d5d8:	2302      	movs	r3, #2
 800d5da:	e048      	b.n	800d66e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	61da      	str	r2, [r3, #28]
 800d5e4:	e029      	b.n	800d63a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	895b      	ldrh	r3, [r3, #10]
 800d5ea:	025b      	lsls	r3, r3, #9
 800d5ec:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d5ee:	e019      	b.n	800d624 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6979      	ldr	r1, [r7, #20]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7ff fcfe 	bl	800cff6 <get_fat>
 800d5fa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d602:	d101      	bne.n	800d608 <dir_sdi+0x88>
 800d604:	2301      	movs	r3, #1
 800d606:	e032      	b.n	800d66e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d904      	bls.n	800d618 <dir_sdi+0x98>
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	695b      	ldr	r3, [r3, #20]
 800d612:	697a      	ldr	r2, [r7, #20]
 800d614:	429a      	cmp	r2, r3
 800d616:	d301      	bcc.n	800d61c <dir_sdi+0x9c>
 800d618:	2302      	movs	r3, #2
 800d61a:	e028      	b.n	800d66e <dir_sdi+0xee>
			ofs -= csz;
 800d61c:	683a      	ldr	r2, [r7, #0]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	1ad3      	subs	r3, r2, r3
 800d622:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d624:	683a      	ldr	r2, [r7, #0]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d2e1      	bcs.n	800d5f0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d62c:	6979      	ldr	r1, [r7, #20]
 800d62e:	6938      	ldr	r0, [r7, #16]
 800d630:	f7ff fcc2 	bl	800cfb8 <clust2sect>
 800d634:	4602      	mov	r2, r0
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	697a      	ldr	r2, [r7, #20]
 800d63e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	69db      	ldr	r3, [r3, #28]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d101      	bne.n	800d64c <dir_sdi+0xcc>
 800d648:	2302      	movs	r3, #2
 800d64a:	e010      	b.n	800d66e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	69da      	ldr	r2, [r3, #28]
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	0a5b      	lsrs	r3, r3, #9
 800d654:	441a      	add	r2, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d666:	441a      	add	r2, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3718      	adds	r7, #24
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b086      	sub	sp, #24
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
 800d67e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	695b      	ldr	r3, [r3, #20]
 800d68a:	3320      	adds	r3, #32
 800d68c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	69db      	ldr	r3, [r3, #28]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d003      	beq.n	800d69e <dir_next+0x28>
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d69c:	d301      	bcc.n	800d6a2 <dir_next+0x2c>
 800d69e:	2304      	movs	r3, #4
 800d6a0:	e0aa      	b.n	800d7f8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f040 8098 	bne.w	800d7de <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	69db      	ldr	r3, [r3, #28]
 800d6b2:	1c5a      	adds	r2, r3, #1
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	699b      	ldr	r3, [r3, #24]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d10b      	bne.n	800d6d8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	095b      	lsrs	r3, r3, #5
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	8912      	ldrh	r2, [r2, #8]
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	f0c0 8088 	bcc.w	800d7de <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	61da      	str	r2, [r3, #28]
 800d6d4:	2304      	movs	r3, #4
 800d6d6:	e08f      	b.n	800d7f8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	0a5b      	lsrs	r3, r3, #9
 800d6dc:	68fa      	ldr	r2, [r7, #12]
 800d6de:	8952      	ldrh	r2, [r2, #10]
 800d6e0:	3a01      	subs	r2, #1
 800d6e2:	4013      	ands	r3, r2
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d17a      	bne.n	800d7de <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	699b      	ldr	r3, [r3, #24]
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	f7ff fc80 	bl	800cff6 <get_fat>
 800d6f6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d801      	bhi.n	800d702 <dir_next+0x8c>
 800d6fe:	2302      	movs	r3, #2
 800d700:	e07a      	b.n	800d7f8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d708:	d101      	bne.n	800d70e <dir_next+0x98>
 800d70a:	2301      	movs	r3, #1
 800d70c:	e074      	b.n	800d7f8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	695b      	ldr	r3, [r3, #20]
 800d712:	697a      	ldr	r2, [r7, #20]
 800d714:	429a      	cmp	r2, r3
 800d716:	d358      	bcc.n	800d7ca <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d104      	bne.n	800d728 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	61da      	str	r2, [r3, #28]
 800d724:	2304      	movs	r3, #4
 800d726:	e067      	b.n	800d7f8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	699b      	ldr	r3, [r3, #24]
 800d72e:	4619      	mov	r1, r3
 800d730:	4610      	mov	r0, r2
 800d732:	f7ff fe59 	bl	800d3e8 <create_chain>
 800d736:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d101      	bne.n	800d742 <dir_next+0xcc>
 800d73e:	2307      	movs	r3, #7
 800d740:	e05a      	b.n	800d7f8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	2b01      	cmp	r3, #1
 800d746:	d101      	bne.n	800d74c <dir_next+0xd6>
 800d748:	2302      	movs	r3, #2
 800d74a:	e055      	b.n	800d7f8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d752:	d101      	bne.n	800d758 <dir_next+0xe2>
 800d754:	2301      	movs	r3, #1
 800d756:	e04f      	b.n	800d7f8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d758:	68f8      	ldr	r0, [r7, #12]
 800d75a:	f7ff fb4d 	bl	800cdf8 <sync_window>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d001      	beq.n	800d768 <dir_next+0xf2>
 800d764:	2301      	movs	r3, #1
 800d766:	e047      	b.n	800d7f8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	3330      	adds	r3, #48	; 0x30
 800d76c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d770:	2100      	movs	r1, #0
 800d772:	4618      	mov	r0, r3
 800d774:	f7ff f977 	bl	800ca66 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d778:	2300      	movs	r3, #0
 800d77a:	613b      	str	r3, [r7, #16]
 800d77c:	6979      	ldr	r1, [r7, #20]
 800d77e:	68f8      	ldr	r0, [r7, #12]
 800d780:	f7ff fc1a 	bl	800cfb8 <clust2sect>
 800d784:	4602      	mov	r2, r0
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	62da      	str	r2, [r3, #44]	; 0x2c
 800d78a:	e012      	b.n	800d7b2 <dir_next+0x13c>
						fs->wflag = 1;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2201      	movs	r2, #1
 800d790:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f7ff fb30 	bl	800cdf8 <sync_window>
 800d798:	4603      	mov	r3, r0
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d001      	beq.n	800d7a2 <dir_next+0x12c>
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e02a      	b.n	800d7f8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	613b      	str	r3, [r7, #16]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ac:	1c5a      	adds	r2, r3, #1
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	62da      	str	r2, [r3, #44]	; 0x2c
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	895b      	ldrh	r3, [r3, #10]
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d3e6      	bcc.n	800d78c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	1ad2      	subs	r2, r2, r3
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	697a      	ldr	r2, [r7, #20]
 800d7ce:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d7d0:	6979      	ldr	r1, [r7, #20]
 800d7d2:	68f8      	ldr	r0, [r7, #12]
 800d7d4:	f7ff fbf0 	bl	800cfb8 <clust2sect>
 800d7d8:	4602      	mov	r2, r0
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	68ba      	ldr	r2, [r7, #8]
 800d7e2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7f0:	441a      	add	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d7f6:	2300      	movs	r3, #0
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3718      	adds	r7, #24
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b086      	sub	sp, #24
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d810:	2100      	movs	r1, #0
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7ff feb4 	bl	800d580 <dir_sdi>
 800d818:	4603      	mov	r3, r0
 800d81a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d81c:	7dfb      	ldrb	r3, [r7, #23]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d12b      	bne.n	800d87a <dir_alloc+0x7a>
		n = 0;
 800d822:	2300      	movs	r3, #0
 800d824:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	69db      	ldr	r3, [r3, #28]
 800d82a:	4619      	mov	r1, r3
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f7ff fb27 	bl	800ce80 <move_window>
 800d832:	4603      	mov	r3, r0
 800d834:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d836:	7dfb      	ldrb	r3, [r7, #23]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d11d      	bne.n	800d878 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6a1b      	ldr	r3, [r3, #32]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	2be5      	cmp	r3, #229	; 0xe5
 800d844:	d004      	beq.n	800d850 <dir_alloc+0x50>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6a1b      	ldr	r3, [r3, #32]
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d107      	bne.n	800d860 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	3301      	adds	r3, #1
 800d854:	613b      	str	r3, [r7, #16]
 800d856:	693a      	ldr	r2, [r7, #16]
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d102      	bne.n	800d864 <dir_alloc+0x64>
 800d85e:	e00c      	b.n	800d87a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d860:	2300      	movs	r3, #0
 800d862:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d864:	2101      	movs	r1, #1
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f7ff ff05 	bl	800d676 <dir_next>
 800d86c:	4603      	mov	r3, r0
 800d86e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d870:	7dfb      	ldrb	r3, [r7, #23]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d0d7      	beq.n	800d826 <dir_alloc+0x26>
 800d876:	e000      	b.n	800d87a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d878:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d87a:	7dfb      	ldrb	r3, [r7, #23]
 800d87c:	2b04      	cmp	r3, #4
 800d87e:	d101      	bne.n	800d884 <dir_alloc+0x84>
 800d880:	2307      	movs	r3, #7
 800d882:	75fb      	strb	r3, [r7, #23]
	return res;
 800d884:	7dfb      	ldrb	r3, [r7, #23]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3718      	adds	r7, #24
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d88e:	b580      	push	{r7, lr}
 800d890:	b084      	sub	sp, #16
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
 800d896:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	331a      	adds	r3, #26
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7ff f83f 	bl	800c920 <ld_word>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	2b03      	cmp	r3, #3
 800d8ac:	d109      	bne.n	800d8c2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	3314      	adds	r3, #20
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7ff f834 	bl	800c920 <ld_word>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	041b      	lsls	r3, r3, #16
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3710      	adds	r7, #16
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	331a      	adds	r3, #26
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	b292      	uxth	r2, r2
 800d8e0:	4611      	mov	r1, r2
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7ff f857 	bl	800c996 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	2b03      	cmp	r3, #3
 800d8ee:	d109      	bne.n	800d904 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	f103 0214 	add.w	r2, r3, #20
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	0c1b      	lsrs	r3, r3, #16
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	4610      	mov	r0, r2
 800d900:	f7ff f849 	bl	800c996 <st_word>
	}
}
 800d904:	bf00      	nop
 800d906:	3710      	adds	r7, #16
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d916:	2304      	movs	r3, #4
 800d918:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800d920:	e03c      	b.n	800d99c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	69db      	ldr	r3, [r3, #28]
 800d926:	4619      	mov	r1, r3
 800d928:	6938      	ldr	r0, [r7, #16]
 800d92a:	f7ff faa9 	bl	800ce80 <move_window>
 800d92e:	4603      	mov	r3, r0
 800d930:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d932:	7dfb      	ldrb	r3, [r7, #23]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d136      	bne.n	800d9a6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6a1b      	ldr	r3, [r3, #32]
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800d940:	7bfb      	ldrb	r3, [r7, #15]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d102      	bne.n	800d94c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d946:	2304      	movs	r3, #4
 800d948:	75fb      	strb	r3, [r7, #23]
 800d94a:	e031      	b.n	800d9b0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6a1b      	ldr	r3, [r3, #32]
 800d950:	330b      	adds	r3, #11
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d958:	73bb      	strb	r3, [r7, #14]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	7bba      	ldrb	r2, [r7, #14]
 800d95e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800d960:	7bfb      	ldrb	r3, [r7, #15]
 800d962:	2be5      	cmp	r3, #229	; 0xe5
 800d964:	d011      	beq.n	800d98a <dir_read+0x7e>
 800d966:	7bfb      	ldrb	r3, [r7, #15]
 800d968:	2b2e      	cmp	r3, #46	; 0x2e
 800d96a:	d00e      	beq.n	800d98a <dir_read+0x7e>
 800d96c:	7bbb      	ldrb	r3, [r7, #14]
 800d96e:	2b0f      	cmp	r3, #15
 800d970:	d00b      	beq.n	800d98a <dir_read+0x7e>
 800d972:	7bbb      	ldrb	r3, [r7, #14]
 800d974:	f023 0320 	bic.w	r3, r3, #32
 800d978:	2b08      	cmp	r3, #8
 800d97a:	bf0c      	ite	eq
 800d97c:	2301      	moveq	r3, #1
 800d97e:	2300      	movne	r3, #0
 800d980:	b2db      	uxtb	r3, r3
 800d982:	461a      	mov	r2, r3
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	4293      	cmp	r3, r2
 800d988:	d00f      	beq.n	800d9aa <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d98a:	2100      	movs	r1, #0
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f7ff fe72 	bl	800d676 <dir_next>
 800d992:	4603      	mov	r3, r0
 800d994:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d996:	7dfb      	ldrb	r3, [r7, #23]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d108      	bne.n	800d9ae <dir_read+0xa2>
	while (dp->sect) {
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	69db      	ldr	r3, [r3, #28]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1be      	bne.n	800d922 <dir_read+0x16>
 800d9a4:	e004      	b.n	800d9b0 <dir_read+0xa4>
		if (res != FR_OK) break;
 800d9a6:	bf00      	nop
 800d9a8:	e002      	b.n	800d9b0 <dir_read+0xa4>
				break;
 800d9aa:	bf00      	nop
 800d9ac:	e000      	b.n	800d9b0 <dir_read+0xa4>
		if (res != FR_OK) break;
 800d9ae:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d9b0:	7dfb      	ldrb	r3, [r7, #23]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d002      	beq.n	800d9bc <dir_read+0xb0>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	61da      	str	r2, [r3, #28]
	return res;
 800d9bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3718      	adds	r7, #24
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}

0800d9c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b086      	sub	sp, #24
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d9d4:	2100      	movs	r1, #0
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f7ff fdd2 	bl	800d580 <dir_sdi>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d9e0:	7dfb      	ldrb	r3, [r7, #23]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d001      	beq.n	800d9ea <dir_find+0x24>
 800d9e6:	7dfb      	ldrb	r3, [r7, #23]
 800d9e8:	e03e      	b.n	800da68 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	69db      	ldr	r3, [r3, #28]
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	6938      	ldr	r0, [r7, #16]
 800d9f2:	f7ff fa45 	bl	800ce80 <move_window>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d9fa:	7dfb      	ldrb	r3, [r7, #23]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d12f      	bne.n	800da60 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6a1b      	ldr	r3, [r3, #32]
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800da08:	7bfb      	ldrb	r3, [r7, #15]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d102      	bne.n	800da14 <dir_find+0x4e>
 800da0e:	2304      	movs	r3, #4
 800da10:	75fb      	strb	r3, [r7, #23]
 800da12:	e028      	b.n	800da66 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6a1b      	ldr	r3, [r3, #32]
 800da18:	330b      	adds	r3, #11
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da20:	b2da      	uxtb	r2, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a1b      	ldr	r3, [r3, #32]
 800da2a:	330b      	adds	r3, #11
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	f003 0308 	and.w	r3, r3, #8
 800da32:	2b00      	cmp	r3, #0
 800da34:	d10a      	bne.n	800da4c <dir_find+0x86>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a18      	ldr	r0, [r3, #32]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	3324      	adds	r3, #36	; 0x24
 800da3e:	220b      	movs	r2, #11
 800da40:	4619      	mov	r1, r3
 800da42:	f7ff f82b 	bl	800ca9c <mem_cmp>
 800da46:	4603      	mov	r3, r0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d00b      	beq.n	800da64 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800da4c:	2100      	movs	r1, #0
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7ff fe11 	bl	800d676 <dir_next>
 800da54:	4603      	mov	r3, r0
 800da56:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800da58:	7dfb      	ldrb	r3, [r7, #23]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d0c5      	beq.n	800d9ea <dir_find+0x24>
 800da5e:	e002      	b.n	800da66 <dir_find+0xa0>
		if (res != FR_OK) break;
 800da60:	bf00      	nop
 800da62:	e000      	b.n	800da66 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800da64:	bf00      	nop

	return res;
 800da66:	7dfb      	ldrb	r3, [r7, #23]
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3718      	adds	r7, #24
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800da7e:	2101      	movs	r1, #1
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7ff febd 	bl	800d800 <dir_alloc>
 800da86:	4603      	mov	r3, r0
 800da88:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800da8a:	7bfb      	ldrb	r3, [r7, #15]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d11c      	bne.n	800daca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	69db      	ldr	r3, [r3, #28]
 800da94:	4619      	mov	r1, r3
 800da96:	68b8      	ldr	r0, [r7, #8]
 800da98:	f7ff f9f2 	bl	800ce80 <move_window>
 800da9c:	4603      	mov	r3, r0
 800da9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800daa0:	7bfb      	ldrb	r3, [r7, #15]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d111      	bne.n	800daca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a1b      	ldr	r3, [r3, #32]
 800daaa:	2220      	movs	r2, #32
 800daac:	2100      	movs	r1, #0
 800daae:	4618      	mov	r0, r3
 800dab0:	f7fe ffd9 	bl	800ca66 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6a18      	ldr	r0, [r3, #32]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	3324      	adds	r3, #36	; 0x24
 800dabc:	220b      	movs	r2, #11
 800dabe:	4619      	mov	r1, r3
 800dac0:	f7fe ffb0 	bl	800ca24 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	2201      	movs	r2, #1
 800dac8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800daca:	7bfb      	ldrb	r3, [r7, #15]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3710      	adds	r7, #16
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b086      	sub	sp, #24
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	2200      	movs	r2, #0
 800dae2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	69db      	ldr	r3, [r3, #28]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d04e      	beq.n	800db8a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800daec:	2300      	movs	r3, #0
 800daee:	613b      	str	r3, [r7, #16]
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800daf4:	e021      	b.n	800db3a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a1a      	ldr	r2, [r3, #32]
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	1c59      	adds	r1, r3, #1
 800dafe:	6179      	str	r1, [r7, #20]
 800db00:	4413      	add	r3, r2
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800db06:	7bfb      	ldrb	r3, [r7, #15]
 800db08:	2b20      	cmp	r3, #32
 800db0a:	d100      	bne.n	800db0e <get_fileinfo+0x3a>
 800db0c:	e015      	b.n	800db3a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800db0e:	7bfb      	ldrb	r3, [r7, #15]
 800db10:	2b05      	cmp	r3, #5
 800db12:	d101      	bne.n	800db18 <get_fileinfo+0x44>
 800db14:	23e5      	movs	r3, #229	; 0xe5
 800db16:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	2b09      	cmp	r3, #9
 800db1c:	d106      	bne.n	800db2c <get_fileinfo+0x58>
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	1c5a      	adds	r2, r3, #1
 800db22:	613a      	str	r2, [r7, #16]
 800db24:	683a      	ldr	r2, [r7, #0]
 800db26:	4413      	add	r3, r2
 800db28:	222e      	movs	r2, #46	; 0x2e
 800db2a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	1c5a      	adds	r2, r3, #1
 800db30:	613a      	str	r2, [r7, #16]
 800db32:	683a      	ldr	r2, [r7, #0]
 800db34:	4413      	add	r3, r2
 800db36:	7bfa      	ldrb	r2, [r7, #15]
 800db38:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	2b0a      	cmp	r3, #10
 800db3e:	d9da      	bls.n	800daf6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800db40:	683a      	ldr	r2, [r7, #0]
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	4413      	add	r3, r2
 800db46:	3309      	adds	r3, #9
 800db48:	2200      	movs	r2, #0
 800db4a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6a1b      	ldr	r3, [r3, #32]
 800db50:	7ada      	ldrb	r2, [r3, #11]
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6a1b      	ldr	r3, [r3, #32]
 800db5a:	331c      	adds	r3, #28
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fe fef7 	bl	800c950 <ld_dword>
 800db62:	4602      	mov	r2, r0
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6a1b      	ldr	r3, [r3, #32]
 800db6c:	3316      	adds	r3, #22
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fe feee 	bl	800c950 <ld_dword>
 800db74:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	b29a      	uxth	r2, r3
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	80da      	strh	r2, [r3, #6]
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	0c1b      	lsrs	r3, r3, #16
 800db82:	b29a      	uxth	r2, r3
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	809a      	strh	r2, [r3, #4]
 800db88:	e000      	b.n	800db8c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800db8a:	bf00      	nop
}
 800db8c:	3718      	adds	r7, #24
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
	...

0800db94 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b088      	sub	sp, #32
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	60fb      	str	r3, [r7, #12]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	3324      	adds	r3, #36	; 0x24
 800dba8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800dbaa:	220b      	movs	r2, #11
 800dbac:	2120      	movs	r1, #32
 800dbae:	68b8      	ldr	r0, [r7, #8]
 800dbb0:	f7fe ff59 	bl	800ca66 <mem_set>
	si = i = 0; ni = 8;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	613b      	str	r3, [r7, #16]
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	61fb      	str	r3, [r7, #28]
 800dbbc:	2308      	movs	r3, #8
 800dbbe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	1c5a      	adds	r2, r3, #1
 800dbc4:	61fa      	str	r2, [r7, #28]
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	4413      	add	r3, r2
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dbce:	7efb      	ldrb	r3, [r7, #27]
 800dbd0:	2b20      	cmp	r3, #32
 800dbd2:	d94e      	bls.n	800dc72 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800dbd4:	7efb      	ldrb	r3, [r7, #27]
 800dbd6:	2b2f      	cmp	r3, #47	; 0x2f
 800dbd8:	d006      	beq.n	800dbe8 <create_name+0x54>
 800dbda:	7efb      	ldrb	r3, [r7, #27]
 800dbdc:	2b5c      	cmp	r3, #92	; 0x5c
 800dbde:	d110      	bne.n	800dc02 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dbe0:	e002      	b.n	800dbe8 <create_name+0x54>
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	61fb      	str	r3, [r7, #28]
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	69fb      	ldr	r3, [r7, #28]
 800dbec:	4413      	add	r3, r2
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	2b2f      	cmp	r3, #47	; 0x2f
 800dbf2:	d0f6      	beq.n	800dbe2 <create_name+0x4e>
 800dbf4:	68fa      	ldr	r2, [r7, #12]
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	2b5c      	cmp	r3, #92	; 0x5c
 800dbfe:	d0f0      	beq.n	800dbe2 <create_name+0x4e>
			break;
 800dc00:	e038      	b.n	800dc74 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800dc02:	7efb      	ldrb	r3, [r7, #27]
 800dc04:	2b2e      	cmp	r3, #46	; 0x2e
 800dc06:	d003      	beq.n	800dc10 <create_name+0x7c>
 800dc08:	693a      	ldr	r2, [r7, #16]
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d30c      	bcc.n	800dc2a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	2b0b      	cmp	r3, #11
 800dc14:	d002      	beq.n	800dc1c <create_name+0x88>
 800dc16:	7efb      	ldrb	r3, [r7, #27]
 800dc18:	2b2e      	cmp	r3, #46	; 0x2e
 800dc1a:	d001      	beq.n	800dc20 <create_name+0x8c>
 800dc1c:	2306      	movs	r3, #6
 800dc1e:	e044      	b.n	800dcaa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800dc20:	2308      	movs	r3, #8
 800dc22:	613b      	str	r3, [r7, #16]
 800dc24:	230b      	movs	r3, #11
 800dc26:	617b      	str	r3, [r7, #20]
			continue;
 800dc28:	e022      	b.n	800dc70 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800dc2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	da04      	bge.n	800dc3c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800dc32:	7efb      	ldrb	r3, [r7, #27]
 800dc34:	3b80      	subs	r3, #128	; 0x80
 800dc36:	4a1f      	ldr	r2, [pc, #124]	; (800dcb4 <create_name+0x120>)
 800dc38:	5cd3      	ldrb	r3, [r2, r3]
 800dc3a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800dc3c:	7efb      	ldrb	r3, [r7, #27]
 800dc3e:	4619      	mov	r1, r3
 800dc40:	481d      	ldr	r0, [pc, #116]	; (800dcb8 <create_name+0x124>)
 800dc42:	f7fe ff52 	bl	800caea <chk_chr>
 800dc46:	4603      	mov	r3, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d001      	beq.n	800dc50 <create_name+0xbc>
 800dc4c:	2306      	movs	r3, #6
 800dc4e:	e02c      	b.n	800dcaa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800dc50:	7efb      	ldrb	r3, [r7, #27]
 800dc52:	2b60      	cmp	r3, #96	; 0x60
 800dc54:	d905      	bls.n	800dc62 <create_name+0xce>
 800dc56:	7efb      	ldrb	r3, [r7, #27]
 800dc58:	2b7a      	cmp	r3, #122	; 0x7a
 800dc5a:	d802      	bhi.n	800dc62 <create_name+0xce>
 800dc5c:	7efb      	ldrb	r3, [r7, #27]
 800dc5e:	3b20      	subs	r3, #32
 800dc60:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	1c5a      	adds	r2, r3, #1
 800dc66:	613a      	str	r2, [r7, #16]
 800dc68:	68ba      	ldr	r2, [r7, #8]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	7efa      	ldrb	r2, [r7, #27]
 800dc6e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800dc70:	e7a6      	b.n	800dbc0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dc72:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800dc74:	68fa      	ldr	r2, [r7, #12]
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	441a      	add	r2, r3
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d101      	bne.n	800dc88 <create_name+0xf4>
 800dc84:	2306      	movs	r3, #6
 800dc86:	e010      	b.n	800dcaa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	2be5      	cmp	r3, #229	; 0xe5
 800dc8e:	d102      	bne.n	800dc96 <create_name+0x102>
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	2205      	movs	r2, #5
 800dc94:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dc96:	7efb      	ldrb	r3, [r7, #27]
 800dc98:	2b20      	cmp	r3, #32
 800dc9a:	d801      	bhi.n	800dca0 <create_name+0x10c>
 800dc9c:	2204      	movs	r2, #4
 800dc9e:	e000      	b.n	800dca2 <create_name+0x10e>
 800dca0:	2200      	movs	r2, #0
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	330b      	adds	r3, #11
 800dca6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800dca8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3720      	adds	r7, #32
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	080185c4 	.word	0x080185c4
 800dcb8:	08018438 	.word	0x08018438

0800dcbc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b086      	sub	sp, #24
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dcd0:	e002      	b.n	800dcd8 <follow_path+0x1c>
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	603b      	str	r3, [r7, #0]
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	2b2f      	cmp	r3, #47	; 0x2f
 800dcde:	d0f8      	beq.n	800dcd2 <follow_path+0x16>
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	2b5c      	cmp	r3, #92	; 0x5c
 800dce6:	d0f4      	beq.n	800dcd2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	2200      	movs	r2, #0
 800dcec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	2b1f      	cmp	r3, #31
 800dcf4:	d80a      	bhi.n	800dd0c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2280      	movs	r2, #128	; 0x80
 800dcfa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dcfe:	2100      	movs	r1, #0
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f7ff fc3d 	bl	800d580 <dir_sdi>
 800dd06:	4603      	mov	r3, r0
 800dd08:	75fb      	strb	r3, [r7, #23]
 800dd0a:	e043      	b.n	800dd94 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dd0c:	463b      	mov	r3, r7
 800dd0e:	4619      	mov	r1, r3
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f7ff ff3f 	bl	800db94 <create_name>
 800dd16:	4603      	mov	r3, r0
 800dd18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dd1a:	7dfb      	ldrb	r3, [r7, #23]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d134      	bne.n	800dd8a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7ff fe50 	bl	800d9c6 <dir_find>
 800dd26:	4603      	mov	r3, r0
 800dd28:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dd30:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dd32:	7dfb      	ldrb	r3, [r7, #23]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00a      	beq.n	800dd4e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dd38:	7dfb      	ldrb	r3, [r7, #23]
 800dd3a:	2b04      	cmp	r3, #4
 800dd3c:	d127      	bne.n	800dd8e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dd3e:	7afb      	ldrb	r3, [r7, #11]
 800dd40:	f003 0304 	and.w	r3, r3, #4
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d122      	bne.n	800dd8e <follow_path+0xd2>
 800dd48:	2305      	movs	r3, #5
 800dd4a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dd4c:	e01f      	b.n	800dd8e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dd4e:	7afb      	ldrb	r3, [r7, #11]
 800dd50:	f003 0304 	and.w	r3, r3, #4
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d11c      	bne.n	800dd92 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	799b      	ldrb	r3, [r3, #6]
 800dd5c:	f003 0310 	and.w	r3, r3, #16
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d102      	bne.n	800dd6a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dd64:	2305      	movs	r3, #5
 800dd66:	75fb      	strb	r3, [r7, #23]
 800dd68:	e014      	b.n	800dd94 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	695b      	ldr	r3, [r3, #20]
 800dd74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd78:	4413      	add	r3, r2
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f7ff fd86 	bl	800d88e <ld_clust>
 800dd82:	4602      	mov	r2, r0
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dd88:	e7c0      	b.n	800dd0c <follow_path+0x50>
			if (res != FR_OK) break;
 800dd8a:	bf00      	nop
 800dd8c:	e002      	b.n	800dd94 <follow_path+0xd8>
				break;
 800dd8e:	bf00      	nop
 800dd90:	e000      	b.n	800dd94 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dd92:	bf00      	nop
			}
		}
	}

	return res;
 800dd94:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3718      	adds	r7, #24
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}

0800dd9e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dd9e:	b480      	push	{r7}
 800dda0:	b087      	sub	sp, #28
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dda6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ddaa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d031      	beq.n	800de18 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	617b      	str	r3, [r7, #20]
 800ddba:	e002      	b.n	800ddc2 <get_ldnumber+0x24>
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	617b      	str	r3, [r7, #20]
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	2b20      	cmp	r3, #32
 800ddc8:	d903      	bls.n	800ddd2 <get_ldnumber+0x34>
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	2b3a      	cmp	r3, #58	; 0x3a
 800ddd0:	d1f4      	bne.n	800ddbc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	2b3a      	cmp	r3, #58	; 0x3a
 800ddd8:	d11c      	bne.n	800de14 <get_ldnumber+0x76>
			tp = *path;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	1c5a      	adds	r2, r3, #1
 800dde4:	60fa      	str	r2, [r7, #12]
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	3b30      	subs	r3, #48	; 0x30
 800ddea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	2b09      	cmp	r3, #9
 800ddf0:	d80e      	bhi.n	800de10 <get_ldnumber+0x72>
 800ddf2:	68fa      	ldr	r2, [r7, #12]
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d10a      	bne.n	800de10 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d107      	bne.n	800de10 <get_ldnumber+0x72>
					vol = (int)i;
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	3301      	adds	r3, #1
 800de08:	617b      	str	r3, [r7, #20]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	697a      	ldr	r2, [r7, #20]
 800de0e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	e002      	b.n	800de1a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800de14:	2300      	movs	r3, #0
 800de16:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800de18:	693b      	ldr	r3, [r7, #16]
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	371c      	adds	r7, #28
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr
	...

0800de28 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	70da      	strb	r2, [r3, #3]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de3e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800de40:	6839      	ldr	r1, [r7, #0]
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f7ff f81c 	bl	800ce80 <move_window>
 800de48:	4603      	mov	r3, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d001      	beq.n	800de52 <check_fs+0x2a>
 800de4e:	2304      	movs	r3, #4
 800de50:	e038      	b.n	800dec4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	3330      	adds	r3, #48	; 0x30
 800de56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fe fd60 	bl	800c920 <ld_word>
 800de60:	4603      	mov	r3, r0
 800de62:	461a      	mov	r2, r3
 800de64:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800de68:	429a      	cmp	r2, r3
 800de6a:	d001      	beq.n	800de70 <check_fs+0x48>
 800de6c:	2303      	movs	r3, #3
 800de6e:	e029      	b.n	800dec4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de76:	2be9      	cmp	r3, #233	; 0xe9
 800de78:	d009      	beq.n	800de8e <check_fs+0x66>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de80:	2beb      	cmp	r3, #235	; 0xeb
 800de82:	d11e      	bne.n	800dec2 <check_fs+0x9a>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800de8a:	2b90      	cmp	r3, #144	; 0x90
 800de8c:	d119      	bne.n	800dec2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	3330      	adds	r3, #48	; 0x30
 800de92:	3336      	adds	r3, #54	; 0x36
 800de94:	4618      	mov	r0, r3
 800de96:	f7fe fd5b 	bl	800c950 <ld_dword>
 800de9a:	4603      	mov	r3, r0
 800de9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dea0:	4a0a      	ldr	r2, [pc, #40]	; (800decc <check_fs+0xa4>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d101      	bne.n	800deaa <check_fs+0x82>
 800dea6:	2300      	movs	r3, #0
 800dea8:	e00c      	b.n	800dec4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	3330      	adds	r3, #48	; 0x30
 800deae:	3352      	adds	r3, #82	; 0x52
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7fe fd4d 	bl	800c950 <ld_dword>
 800deb6:	4603      	mov	r3, r0
 800deb8:	4a05      	ldr	r2, [pc, #20]	; (800ded0 <check_fs+0xa8>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d101      	bne.n	800dec2 <check_fs+0x9a>
 800debe:	2300      	movs	r3, #0
 800dec0:	e000      	b.n	800dec4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dec2:	2302      	movs	r3, #2
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3708      	adds	r7, #8
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	00544146 	.word	0x00544146
 800ded0:	33544146 	.word	0x33544146

0800ded4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b096      	sub	sp, #88	; 0x58
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	4613      	mov	r3, r2
 800dee0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	2200      	movs	r2, #0
 800dee6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	f7ff ff58 	bl	800dd9e <get_ldnumber>
 800deee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800def0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800def2:	2b00      	cmp	r3, #0
 800def4:	da01      	bge.n	800defa <find_volume+0x26>
 800def6:	230b      	movs	r3, #11
 800def8:	e22e      	b.n	800e358 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800defa:	4aa8      	ldr	r2, [pc, #672]	; (800e19c <find_volume+0x2c8>)
 800defc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800defe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df02:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800df04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df06:	2b00      	cmp	r3, #0
 800df08:	d101      	bne.n	800df0e <find_volume+0x3a>
 800df0a:	230c      	movs	r3, #12
 800df0c:	e224      	b.n	800e358 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df12:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800df14:	79fb      	ldrb	r3, [r7, #7]
 800df16:	f023 0301 	bic.w	r3, r3, #1
 800df1a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800df1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d01a      	beq.n	800df5a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800df24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df26:	785b      	ldrb	r3, [r3, #1]
 800df28:	4618      	mov	r0, r3
 800df2a:	f7fe fc5b 	bl	800c7e4 <disk_status>
 800df2e:	4603      	mov	r3, r0
 800df30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800df34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df38:	f003 0301 	and.w	r3, r3, #1
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d10c      	bne.n	800df5a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800df40:	79fb      	ldrb	r3, [r7, #7]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d007      	beq.n	800df56 <find_volume+0x82>
 800df46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df4a:	f003 0304 	and.w	r3, r3, #4
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d001      	beq.n	800df56 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800df52:	230a      	movs	r3, #10
 800df54:	e200      	b.n	800e358 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800df56:	2300      	movs	r3, #0
 800df58:	e1fe      	b.n	800e358 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800df5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5c:	2200      	movs	r2, #0
 800df5e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800df60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df62:	b2da      	uxtb	r2, r3
 800df64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df66:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800df68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6a:	785b      	ldrb	r3, [r3, #1]
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7fe fc53 	bl	800c818 <disk_initialize>
 800df72:	4603      	mov	r3, r0
 800df74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800df78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df7c:	f003 0301 	and.w	r3, r3, #1
 800df80:	2b00      	cmp	r3, #0
 800df82:	d001      	beq.n	800df88 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800df84:	2303      	movs	r3, #3
 800df86:	e1e7      	b.n	800e358 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800df88:	79fb      	ldrb	r3, [r7, #7]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d007      	beq.n	800df9e <find_volume+0xca>
 800df8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df92:	f003 0304 	and.w	r3, r3, #4
 800df96:	2b00      	cmp	r3, #0
 800df98:	d001      	beq.n	800df9e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800df9a:	230a      	movs	r3, #10
 800df9c:	e1dc      	b.n	800e358 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dfa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dfa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dfa6:	f7ff ff3f 	bl	800de28 <check_fs>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dfb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dfb4:	2b02      	cmp	r3, #2
 800dfb6:	d14b      	bne.n	800e050 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dfb8:	2300      	movs	r3, #0
 800dfba:	643b      	str	r3, [r7, #64]	; 0x40
 800dfbc:	e01f      	b.n	800dffe <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dfc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfc6:	011b      	lsls	r3, r3, #4
 800dfc8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800dfcc:	4413      	add	r3, r2
 800dfce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd2:	3304      	adds	r3, #4
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d006      	beq.n	800dfe8 <find_volume+0x114>
 800dfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfdc:	3308      	adds	r3, #8
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7fe fcb6 	bl	800c950 <ld_dword>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	e000      	b.n	800dfea <find_volume+0x116>
 800dfe8:	2200      	movs	r2, #0
 800dfea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800dff2:	440b      	add	r3, r1
 800dff4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dffa:	3301      	adds	r3, #1
 800dffc:	643b      	str	r3, [r7, #64]	; 0x40
 800dffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e000:	2b03      	cmp	r3, #3
 800e002:	d9dc      	bls.n	800dfbe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e004:	2300      	movs	r3, #0
 800e006:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d002      	beq.n	800e014 <find_volume+0x140>
 800e00e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e010:	3b01      	subs	r3, #1
 800e012:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e016:	009b      	lsls	r3, r3, #2
 800e018:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e01c:	4413      	add	r3, r2
 800e01e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e022:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e026:	2b00      	cmp	r3, #0
 800e028:	d005      	beq.n	800e036 <find_volume+0x162>
 800e02a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e02c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e02e:	f7ff fefb 	bl	800de28 <check_fs>
 800e032:	4603      	mov	r3, r0
 800e034:	e000      	b.n	800e038 <find_volume+0x164>
 800e036:	2303      	movs	r3, #3
 800e038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e03c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e040:	2b01      	cmp	r3, #1
 800e042:	d905      	bls.n	800e050 <find_volume+0x17c>
 800e044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e046:	3301      	adds	r3, #1
 800e048:	643b      	str	r3, [r7, #64]	; 0x40
 800e04a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e04c:	2b03      	cmp	r3, #3
 800e04e:	d9e1      	bls.n	800e014 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e050:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e054:	2b04      	cmp	r3, #4
 800e056:	d101      	bne.n	800e05c <find_volume+0x188>
 800e058:	2301      	movs	r3, #1
 800e05a:	e17d      	b.n	800e358 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e05c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e060:	2b01      	cmp	r3, #1
 800e062:	d901      	bls.n	800e068 <find_volume+0x194>
 800e064:	230d      	movs	r3, #13
 800e066:	e177      	b.n	800e358 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e06a:	3330      	adds	r3, #48	; 0x30
 800e06c:	330b      	adds	r3, #11
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fe fc56 	bl	800c920 <ld_word>
 800e074:	4603      	mov	r3, r0
 800e076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e07a:	d001      	beq.n	800e080 <find_volume+0x1ac>
 800e07c:	230d      	movs	r3, #13
 800e07e:	e16b      	b.n	800e358 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e082:	3330      	adds	r3, #48	; 0x30
 800e084:	3316      	adds	r3, #22
 800e086:	4618      	mov	r0, r3
 800e088:	f7fe fc4a 	bl	800c920 <ld_word>
 800e08c:	4603      	mov	r3, r0
 800e08e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e092:	2b00      	cmp	r3, #0
 800e094:	d106      	bne.n	800e0a4 <find_volume+0x1d0>
 800e096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e098:	3330      	adds	r3, #48	; 0x30
 800e09a:	3324      	adds	r3, #36	; 0x24
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fe fc57 	bl	800c950 <ld_dword>
 800e0a2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e0a8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ac:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b6:	789b      	ldrb	r3, [r3, #2]
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d005      	beq.n	800e0c8 <find_volume+0x1f4>
 800e0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0be:	789b      	ldrb	r3, [r3, #2]
 800e0c0:	2b02      	cmp	r3, #2
 800e0c2:	d001      	beq.n	800e0c8 <find_volume+0x1f4>
 800e0c4:	230d      	movs	r3, #13
 800e0c6:	e147      	b.n	800e358 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ca:	789b      	ldrb	r3, [r3, #2]
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0d0:	fb02 f303 	mul.w	r3, r2, r3
 800e0d4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e4:	895b      	ldrh	r3, [r3, #10]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d008      	beq.n	800e0fc <find_volume+0x228>
 800e0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ec:	895b      	ldrh	r3, [r3, #10]
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f2:	895b      	ldrh	r3, [r3, #10]
 800e0f4:	3b01      	subs	r3, #1
 800e0f6:	4013      	ands	r3, r2
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d001      	beq.n	800e100 <find_volume+0x22c>
 800e0fc:	230d      	movs	r3, #13
 800e0fe:	e12b      	b.n	800e358 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e102:	3330      	adds	r3, #48	; 0x30
 800e104:	3311      	adds	r3, #17
 800e106:	4618      	mov	r0, r3
 800e108:	f7fe fc0a 	bl	800c920 <ld_word>
 800e10c:	4603      	mov	r3, r0
 800e10e:	461a      	mov	r2, r3
 800e110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e112:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e116:	891b      	ldrh	r3, [r3, #8]
 800e118:	f003 030f 	and.w	r3, r3, #15
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d001      	beq.n	800e126 <find_volume+0x252>
 800e122:	230d      	movs	r3, #13
 800e124:	e118      	b.n	800e358 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e128:	3330      	adds	r3, #48	; 0x30
 800e12a:	3313      	adds	r3, #19
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fe fbf7 	bl	800c920 <ld_word>
 800e132:	4603      	mov	r3, r0
 800e134:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d106      	bne.n	800e14a <find_volume+0x276>
 800e13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13e:	3330      	adds	r3, #48	; 0x30
 800e140:	3320      	adds	r3, #32
 800e142:	4618      	mov	r0, r3
 800e144:	f7fe fc04 	bl	800c950 <ld_dword>
 800e148:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14c:	3330      	adds	r3, #48	; 0x30
 800e14e:	330e      	adds	r3, #14
 800e150:	4618      	mov	r0, r3
 800e152:	f7fe fbe5 	bl	800c920 <ld_word>
 800e156:	4603      	mov	r3, r0
 800e158:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e15a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d101      	bne.n	800e164 <find_volume+0x290>
 800e160:	230d      	movs	r3, #13
 800e162:	e0f9      	b.n	800e358 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e164:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e168:	4413      	add	r3, r2
 800e16a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e16c:	8912      	ldrh	r2, [r2, #8]
 800e16e:	0912      	lsrs	r2, r2, #4
 800e170:	b292      	uxth	r2, r2
 800e172:	4413      	add	r3, r2
 800e174:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d201      	bcs.n	800e182 <find_volume+0x2ae>
 800e17e:	230d      	movs	r3, #13
 800e180:	e0ea      	b.n	800e358 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e182:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e186:	1ad3      	subs	r3, r2, r3
 800e188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e18a:	8952      	ldrh	r2, [r2, #10]
 800e18c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e190:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e194:	2b00      	cmp	r3, #0
 800e196:	d103      	bne.n	800e1a0 <find_volume+0x2cc>
 800e198:	230d      	movs	r3, #13
 800e19a:	e0dd      	b.n	800e358 <find_volume+0x484>
 800e19c:	200004ec 	.word	0x200004ec
		fmt = FS_FAT32;
 800e1a0:	2303      	movs	r3, #3
 800e1a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d802      	bhi.n	800e1b6 <find_volume+0x2e2>
 800e1b0:	2302      	movs	r3, #2
 800e1b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d802      	bhi.n	800e1c6 <find_volume+0x2f2>
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c8:	1c9a      	adds	r2, r3, #2
 800e1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1cc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e1d2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e1d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e1d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1d8:	441a      	add	r2, r3
 800e1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1dc:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e1de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e2:	441a      	add	r2, r3
 800e1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e1e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e1ec:	2b03      	cmp	r3, #3
 800e1ee:	d11e      	bne.n	800e22e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f2:	3330      	adds	r3, #48	; 0x30
 800e1f4:	332a      	adds	r3, #42	; 0x2a
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7fe fb92 	bl	800c920 <ld_word>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d001      	beq.n	800e206 <find_volume+0x332>
 800e202:	230d      	movs	r3, #13
 800e204:	e0a8      	b.n	800e358 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e208:	891b      	ldrh	r3, [r3, #8]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <find_volume+0x33e>
 800e20e:	230d      	movs	r3, #13
 800e210:	e0a2      	b.n	800e358 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e214:	3330      	adds	r3, #48	; 0x30
 800e216:	332c      	adds	r3, #44	; 0x2c
 800e218:	4618      	mov	r0, r3
 800e21a:	f7fe fb99 	bl	800c950 <ld_dword>
 800e21e:	4602      	mov	r2, r0
 800e220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e222:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e226:	695b      	ldr	r3, [r3, #20]
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	647b      	str	r3, [r7, #68]	; 0x44
 800e22c:	e01f      	b.n	800e26e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e230:	891b      	ldrh	r3, [r3, #8]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d101      	bne.n	800e23a <find_volume+0x366>
 800e236:	230d      	movs	r3, #13
 800e238:	e08e      	b.n	800e358 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23c:	6a1a      	ldr	r2, [r3, #32]
 800e23e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e240:	441a      	add	r2, r3
 800e242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e244:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e246:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e24a:	2b02      	cmp	r3, #2
 800e24c:	d103      	bne.n	800e256 <find_volume+0x382>
 800e24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e250:	695b      	ldr	r3, [r3, #20]
 800e252:	005b      	lsls	r3, r3, #1
 800e254:	e00a      	b.n	800e26c <find_volume+0x398>
 800e256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e258:	695a      	ldr	r2, [r3, #20]
 800e25a:	4613      	mov	r3, r2
 800e25c:	005b      	lsls	r3, r3, #1
 800e25e:	4413      	add	r3, r2
 800e260:	085a      	lsrs	r2, r3, #1
 800e262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e264:	695b      	ldr	r3, [r3, #20]
 800e266:	f003 0301 	and.w	r3, r3, #1
 800e26a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e26c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e270:	699a      	ldr	r2, [r3, #24]
 800e272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e274:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e278:	0a5b      	lsrs	r3, r3, #9
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d201      	bcs.n	800e282 <find_volume+0x3ae>
 800e27e:	230d      	movs	r3, #13
 800e280:	e06a      	b.n	800e358 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e288:	611a      	str	r2, [r3, #16]
 800e28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28c:	691a      	ldr	r2, [r3, #16]
 800e28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e290:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e294:	2280      	movs	r2, #128	; 0x80
 800e296:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e298:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e29c:	2b03      	cmp	r3, #3
 800e29e:	d149      	bne.n	800e334 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a2:	3330      	adds	r3, #48	; 0x30
 800e2a4:	3330      	adds	r3, #48	; 0x30
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7fe fb3a 	bl	800c920 <ld_word>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d140      	bne.n	800e334 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e2b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e2ba:	f7fe fde1 	bl	800ce80 <move_window>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d137      	bne.n	800e334 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800e2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2cc:	3330      	adds	r3, #48	; 0x30
 800e2ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7fe fb24 	bl	800c920 <ld_word>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	461a      	mov	r2, r3
 800e2dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d127      	bne.n	800e334 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e6:	3330      	adds	r3, #48	; 0x30
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7fe fb31 	bl	800c950 <ld_dword>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	4a1b      	ldr	r2, [pc, #108]	; (800e360 <find_volume+0x48c>)
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d11e      	bne.n	800e334 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f8:	3330      	adds	r3, #48	; 0x30
 800e2fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7fe fb26 	bl	800c950 <ld_dword>
 800e304:	4603      	mov	r3, r0
 800e306:	4a17      	ldr	r2, [pc, #92]	; (800e364 <find_volume+0x490>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d113      	bne.n	800e334 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30e:	3330      	adds	r3, #48	; 0x30
 800e310:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e314:	4618      	mov	r0, r3
 800e316:	f7fe fb1b 	bl	800c950 <ld_dword>
 800e31a:	4602      	mov	r2, r0
 800e31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e322:	3330      	adds	r3, #48	; 0x30
 800e324:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e328:	4618      	mov	r0, r3
 800e32a:	f7fe fb11 	bl	800c950 <ld_dword>
 800e32e:	4602      	mov	r2, r0
 800e330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e332:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e336:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e33a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e33c:	4b0a      	ldr	r3, [pc, #40]	; (800e368 <find_volume+0x494>)
 800e33e:	881b      	ldrh	r3, [r3, #0]
 800e340:	3301      	adds	r3, #1
 800e342:	b29a      	uxth	r2, r3
 800e344:	4b08      	ldr	r3, [pc, #32]	; (800e368 <find_volume+0x494>)
 800e346:	801a      	strh	r2, [r3, #0]
 800e348:	4b07      	ldr	r3, [pc, #28]	; (800e368 <find_volume+0x494>)
 800e34a:	881a      	ldrh	r2, [r3, #0]
 800e34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e350:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e352:	f7fe fd2d 	bl	800cdb0 <clear_lock>
#endif
	return FR_OK;
 800e356:	2300      	movs	r3, #0
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3758      	adds	r7, #88	; 0x58
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	41615252 	.word	0x41615252
 800e364:	61417272 	.word	0x61417272
 800e368:	200004f0 	.word	0x200004f0

0800e36c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e376:	2309      	movs	r3, #9
 800e378:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d01c      	beq.n	800e3ba <validate+0x4e>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d018      	beq.n	800e3ba <validate+0x4e>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d013      	beq.n	800e3ba <validate+0x4e>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	889a      	ldrh	r2, [r3, #4]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	88db      	ldrh	r3, [r3, #6]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d10c      	bne.n	800e3ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	785b      	ldrb	r3, [r3, #1]
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fe fa1c 	bl	800c7e4 <disk_status>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	f003 0301 	and.w	r3, r3, #1
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d101      	bne.n	800e3ba <validate+0x4e>
			res = FR_OK;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e3ba:	7bfb      	ldrb	r3, [r7, #15]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d102      	bne.n	800e3c6 <validate+0x5a>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	e000      	b.n	800e3c8 <validate+0x5c>
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	683a      	ldr	r2, [r7, #0]
 800e3ca:	6013      	str	r3, [r2, #0]
	return res;
 800e3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3710      	adds	r7, #16
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}
	...

0800e3d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b088      	sub	sp, #32
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e3ea:	f107 0310 	add.w	r3, r7, #16
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7ff fcd5 	bl	800dd9e <get_ldnumber>
 800e3f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	da01      	bge.n	800e400 <f_mount+0x28>
 800e3fc:	230b      	movs	r3, #11
 800e3fe:	e02b      	b.n	800e458 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e400:	4a17      	ldr	r2, [pc, #92]	; (800e460 <f_mount+0x88>)
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e408:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e40a:	69bb      	ldr	r3, [r7, #24]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d005      	beq.n	800e41c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e410:	69b8      	ldr	r0, [r7, #24]
 800e412:	f7fe fccd 	bl	800cdb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e416:	69bb      	ldr	r3, [r7, #24]
 800e418:	2200      	movs	r2, #0
 800e41a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d002      	beq.n	800e428 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2200      	movs	r2, #0
 800e426:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e428:	68fa      	ldr	r2, [r7, #12]
 800e42a:	490d      	ldr	r1, [pc, #52]	; (800e460 <f_mount+0x88>)
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d002      	beq.n	800e43e <f_mount+0x66>
 800e438:	79fb      	ldrb	r3, [r7, #7]
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	d001      	beq.n	800e442 <f_mount+0x6a>
 800e43e:	2300      	movs	r3, #0
 800e440:	e00a      	b.n	800e458 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e442:	f107 010c 	add.w	r1, r7, #12
 800e446:	f107 0308 	add.w	r3, r7, #8
 800e44a:	2200      	movs	r2, #0
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7ff fd41 	bl	800ded4 <find_volume>
 800e452:	4603      	mov	r3, r0
 800e454:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e456:	7dfb      	ldrb	r3, [r7, #23]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3720      	adds	r7, #32
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	200004ec 	.word	0x200004ec

0800e464 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b098      	sub	sp, #96	; 0x60
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	4613      	mov	r3, r2
 800e470:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d101      	bne.n	800e47c <f_open+0x18>
 800e478:	2309      	movs	r3, #9
 800e47a:	e1ad      	b.n	800e7d8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e47c:	79fb      	ldrb	r3, [r7, #7]
 800e47e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e482:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e484:	79fa      	ldrb	r2, [r7, #7]
 800e486:	f107 0110 	add.w	r1, r7, #16
 800e48a:	f107 0308 	add.w	r3, r7, #8
 800e48e:	4618      	mov	r0, r3
 800e490:	f7ff fd20 	bl	800ded4 <find_volume>
 800e494:	4603      	mov	r3, r0
 800e496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e49a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	f040 8191 	bne.w	800e7c6 <f_open+0x362>
		dj.obj.fs = fs;
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e4a8:	68ba      	ldr	r2, [r7, #8]
 800e4aa:	f107 0314 	add.w	r3, r7, #20
 800e4ae:	4611      	mov	r1, r2
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7ff fc03 	bl	800dcbc <follow_path>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e4bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d11a      	bne.n	800e4fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e4c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e4c8:	b25b      	sxtb	r3, r3
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	da03      	bge.n	800e4d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e4ce:	2306      	movs	r3, #6
 800e4d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e4d4:	e011      	b.n	800e4fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e4d6:	79fb      	ldrb	r3, [r7, #7]
 800e4d8:	f023 0301 	bic.w	r3, r3, #1
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	bf14      	ite	ne
 800e4e0:	2301      	movne	r3, #1
 800e4e2:	2300      	moveq	r3, #0
 800e4e4:	b2db      	uxtb	r3, r3
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	f107 0314 	add.w	r3, r7, #20
 800e4ec:	4611      	mov	r1, r2
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7fe fb16 	bl	800cb20 <chk_lock>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e4fa:	79fb      	ldrb	r3, [r7, #7]
 800e4fc:	f003 031c 	and.w	r3, r3, #28
 800e500:	2b00      	cmp	r3, #0
 800e502:	d07f      	beq.n	800e604 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e504:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d017      	beq.n	800e53c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e50c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e510:	2b04      	cmp	r3, #4
 800e512:	d10e      	bne.n	800e532 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e514:	f7fe fb60 	bl	800cbd8 <enq_lock>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d006      	beq.n	800e52c <f_open+0xc8>
 800e51e:	f107 0314 	add.w	r3, r7, #20
 800e522:	4618      	mov	r0, r3
 800e524:	f7ff faa4 	bl	800da70 <dir_register>
 800e528:	4603      	mov	r3, r0
 800e52a:	e000      	b.n	800e52e <f_open+0xca>
 800e52c:	2312      	movs	r3, #18
 800e52e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e532:	79fb      	ldrb	r3, [r7, #7]
 800e534:	f043 0308 	orr.w	r3, r3, #8
 800e538:	71fb      	strb	r3, [r7, #7]
 800e53a:	e010      	b.n	800e55e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e53c:	7ebb      	ldrb	r3, [r7, #26]
 800e53e:	f003 0311 	and.w	r3, r3, #17
 800e542:	2b00      	cmp	r3, #0
 800e544:	d003      	beq.n	800e54e <f_open+0xea>
					res = FR_DENIED;
 800e546:	2307      	movs	r3, #7
 800e548:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e54c:	e007      	b.n	800e55e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e54e:	79fb      	ldrb	r3, [r7, #7]
 800e550:	f003 0304 	and.w	r3, r3, #4
 800e554:	2b00      	cmp	r3, #0
 800e556:	d002      	beq.n	800e55e <f_open+0xfa>
 800e558:	2308      	movs	r3, #8
 800e55a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e55e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e562:	2b00      	cmp	r3, #0
 800e564:	d168      	bne.n	800e638 <f_open+0x1d4>
 800e566:	79fb      	ldrb	r3, [r7, #7]
 800e568:	f003 0308 	and.w	r3, r3, #8
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d063      	beq.n	800e638 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e570:	f7fb ff98 	bl	800a4a4 <get_fattime>
 800e574:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e578:	330e      	adds	r3, #14
 800e57a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7fe fa25 	bl	800c9cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e584:	3316      	adds	r3, #22
 800e586:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e588:	4618      	mov	r0, r3
 800e58a:	f7fe fa1f 	bl	800c9cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e590:	330b      	adds	r3, #11
 800e592:	2220      	movs	r2, #32
 800e594:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e59a:	4611      	mov	r1, r2
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7ff f976 	bl	800d88e <ld_clust>
 800e5a2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7ff f98e 	bl	800d8cc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5b2:	331c      	adds	r3, #28
 800e5b4:	2100      	movs	r1, #0
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fe fa08 	bl	800c9cc <st_dword>
					fs->wflag = 1;
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	2201      	movs	r2, #1
 800e5c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d037      	beq.n	800e638 <f_open+0x1d4>
						dw = fs->winsect;
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5cc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e5ce:	f107 0314 	add.w	r3, r7, #20
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fe fea1 	bl	800d31e <remove_chain>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e5e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d126      	bne.n	800e638 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7fe fc46 	bl	800ce80 <move_window>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e5fe:	3a01      	subs	r2, #1
 800e600:	60da      	str	r2, [r3, #12]
 800e602:	e019      	b.n	800e638 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e604:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d115      	bne.n	800e638 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e60c:	7ebb      	ldrb	r3, [r7, #26]
 800e60e:	f003 0310 	and.w	r3, r3, #16
 800e612:	2b00      	cmp	r3, #0
 800e614:	d003      	beq.n	800e61e <f_open+0x1ba>
					res = FR_NO_FILE;
 800e616:	2304      	movs	r3, #4
 800e618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e61c:	e00c      	b.n	800e638 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e61e:	79fb      	ldrb	r3, [r7, #7]
 800e620:	f003 0302 	and.w	r3, r3, #2
 800e624:	2b00      	cmp	r3, #0
 800e626:	d007      	beq.n	800e638 <f_open+0x1d4>
 800e628:	7ebb      	ldrb	r3, [r7, #26]
 800e62a:	f003 0301 	and.w	r3, r3, #1
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d002      	beq.n	800e638 <f_open+0x1d4>
						res = FR_DENIED;
 800e632:	2307      	movs	r3, #7
 800e634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e638:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d128      	bne.n	800e692 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e640:	79fb      	ldrb	r3, [r7, #7]
 800e642:	f003 0308 	and.w	r3, r3, #8
 800e646:	2b00      	cmp	r3, #0
 800e648:	d003      	beq.n	800e652 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e64a:	79fb      	ldrb	r3, [r7, #7]
 800e64c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e650:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e65a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e660:	79fb      	ldrb	r3, [r7, #7]
 800e662:	f023 0301 	bic.w	r3, r3, #1
 800e666:	2b00      	cmp	r3, #0
 800e668:	bf14      	ite	ne
 800e66a:	2301      	movne	r3, #1
 800e66c:	2300      	moveq	r3, #0
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	461a      	mov	r2, r3
 800e672:	f107 0314 	add.w	r3, r7, #20
 800e676:	4611      	mov	r1, r2
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fe facf 	bl	800cc1c <inc_lock>
 800e67e:	4602      	mov	r2, r0
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	691b      	ldr	r3, [r3, #16]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d102      	bne.n	800e692 <f_open+0x22e>
 800e68c:	2302      	movs	r3, #2
 800e68e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e696:	2b00      	cmp	r3, #0
 800e698:	f040 8095 	bne.w	800e7c6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6a0:	4611      	mov	r1, r2
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7ff f8f3 	bl	800d88e <ld_clust>
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b0:	331c      	adds	r3, #28
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fe f94c 	bl	800c950 <ld_dword>
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e6c4:	693a      	ldr	r2, [r7, #16]
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	88da      	ldrh	r2, [r3, #6]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	79fa      	ldrb	r2, [r7, #7]
 800e6d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	3330      	adds	r3, #48	; 0x30
 800e6ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e6f2:	2100      	movs	r1, #0
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7fe f9b6 	bl	800ca66 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e6fa:	79fb      	ldrb	r3, [r7, #7]
 800e6fc:	f003 0320 	and.w	r3, r3, #32
 800e700:	2b00      	cmp	r3, #0
 800e702:	d060      	beq.n	800e7c6 <f_open+0x362>
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d05c      	beq.n	800e7c6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	68da      	ldr	r2, [r3, #12]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	895b      	ldrh	r3, [r3, #10]
 800e718:	025b      	lsls	r3, r3, #9
 800e71a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	689b      	ldr	r3, [r3, #8]
 800e720:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	68db      	ldr	r3, [r3, #12]
 800e726:	657b      	str	r3, [r7, #84]	; 0x54
 800e728:	e016      	b.n	800e758 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e72e:	4618      	mov	r0, r3
 800e730:	f7fe fc61 	bl	800cff6 <get_fat>
 800e734:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d802      	bhi.n	800e742 <f_open+0x2de>
 800e73c:	2302      	movs	r3, #2
 800e73e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e748:	d102      	bne.n	800e750 <f_open+0x2ec>
 800e74a:	2301      	movs	r3, #1
 800e74c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e750:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e754:	1ad3      	subs	r3, r2, r3
 800e756:	657b      	str	r3, [r7, #84]	; 0x54
 800e758:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d103      	bne.n	800e768 <f_open+0x304>
 800e760:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e764:	429a      	cmp	r2, r3
 800e766:	d8e0      	bhi.n	800e72a <f_open+0x2c6>
				}
				fp->clust = clst;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e76c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e76e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e772:	2b00      	cmp	r3, #0
 800e774:	d127      	bne.n	800e7c6 <f_open+0x362>
 800e776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d022      	beq.n	800e7c6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e784:	4618      	mov	r0, r3
 800e786:	f7fe fc17 	bl	800cfb8 <clust2sect>
 800e78a:	6478      	str	r0, [r7, #68]	; 0x44
 800e78c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d103      	bne.n	800e79a <f_open+0x336>
						res = FR_INT_ERR;
 800e792:	2302      	movs	r3, #2
 800e794:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e798:	e015      	b.n	800e7c6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e79a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e79c:	0a5a      	lsrs	r2, r3, #9
 800e79e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7a0:	441a      	add	r2, r3
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	7858      	ldrb	r0, [r3, #1]
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	6a1a      	ldr	r2, [r3, #32]
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	f7fe f855 	bl	800c864 <disk_read>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d002      	beq.n	800e7c6 <f_open+0x362>
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e7c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d002      	beq.n	800e7d4 <f_open+0x370>
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e7d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3760      	adds	r7, #96	; 0x60
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b08c      	sub	sp, #48	; 0x30
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	60b9      	str	r1, [r7, #8]
 800e7ea:	607a      	str	r2, [r7, #4]
 800e7ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f107 0210 	add.w	r2, r7, #16
 800e7fe:	4611      	mov	r1, r2
 800e800:	4618      	mov	r0, r3
 800e802:	f7ff fdb3 	bl	800e36c <validate>
 800e806:	4603      	mov	r3, r0
 800e808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e80c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e810:	2b00      	cmp	r3, #0
 800e812:	d107      	bne.n	800e824 <f_write+0x44>
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	7d5b      	ldrb	r3, [r3, #21]
 800e818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e81c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e820:	2b00      	cmp	r3, #0
 800e822:	d002      	beq.n	800e82a <f_write+0x4a>
 800e824:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e828:	e14b      	b.n	800eac2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	7d1b      	ldrb	r3, [r3, #20]
 800e82e:	f003 0302 	and.w	r3, r3, #2
 800e832:	2b00      	cmp	r3, #0
 800e834:	d101      	bne.n	800e83a <f_write+0x5a>
 800e836:	2307      	movs	r3, #7
 800e838:	e143      	b.n	800eac2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	699a      	ldr	r2, [r3, #24]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	441a      	add	r2, r3
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	699b      	ldr	r3, [r3, #24]
 800e846:	429a      	cmp	r2, r3
 800e848:	f080 812d 	bcs.w	800eaa6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	699b      	ldr	r3, [r3, #24]
 800e850:	43db      	mvns	r3, r3
 800e852:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e854:	e127      	b.n	800eaa6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	699b      	ldr	r3, [r3, #24]
 800e85a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f040 80e3 	bne.w	800ea2a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	699b      	ldr	r3, [r3, #24]
 800e868:	0a5b      	lsrs	r3, r3, #9
 800e86a:	693a      	ldr	r2, [r7, #16]
 800e86c:	8952      	ldrh	r2, [r2, #10]
 800e86e:	3a01      	subs	r2, #1
 800e870:	4013      	ands	r3, r2
 800e872:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d143      	bne.n	800e902 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	699b      	ldr	r3, [r3, #24]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d10c      	bne.n	800e89c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d11a      	bne.n	800e8c4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2100      	movs	r1, #0
 800e892:	4618      	mov	r0, r3
 800e894:	f7fe fda8 	bl	800d3e8 <create_chain>
 800e898:	62b8      	str	r0, [r7, #40]	; 0x28
 800e89a:	e013      	b.n	800e8c4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d007      	beq.n	800e8b4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	699b      	ldr	r3, [r3, #24]
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f7fe fe34 	bl	800d518 <clmt_clust>
 800e8b0:	62b8      	str	r0, [r7, #40]	; 0x28
 800e8b2:	e007      	b.n	800e8c4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e8b4:	68fa      	ldr	r2, [r7, #12]
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	69db      	ldr	r3, [r3, #28]
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	4610      	mov	r0, r2
 800e8be:	f7fe fd93 	bl	800d3e8 <create_chain>
 800e8c2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	f000 80f2 	beq.w	800eab0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ce:	2b01      	cmp	r3, #1
 800e8d0:	d104      	bne.n	800e8dc <f_write+0xfc>
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2202      	movs	r2, #2
 800e8d6:	755a      	strb	r2, [r3, #21]
 800e8d8:	2302      	movs	r3, #2
 800e8da:	e0f2      	b.n	800eac2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8e2:	d104      	bne.n	800e8ee <f_write+0x10e>
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	755a      	strb	r2, [r3, #21]
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	e0e9      	b.n	800eac2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8f2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d102      	bne.n	800e902 <f_write+0x122>
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e900:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	7d1b      	ldrb	r3, [r3, #20]
 800e906:	b25b      	sxtb	r3, r3
 800e908:	2b00      	cmp	r3, #0
 800e90a:	da18      	bge.n	800e93e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	7858      	ldrb	r0, [r3, #1]
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	6a1a      	ldr	r2, [r3, #32]
 800e91a:	2301      	movs	r3, #1
 800e91c:	f7fd ffc2 	bl	800c8a4 <disk_write>
 800e920:	4603      	mov	r3, r0
 800e922:	2b00      	cmp	r3, #0
 800e924:	d004      	beq.n	800e930 <f_write+0x150>
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2201      	movs	r2, #1
 800e92a:	755a      	strb	r2, [r3, #21]
 800e92c:	2301      	movs	r3, #1
 800e92e:	e0c8      	b.n	800eac2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	7d1b      	ldrb	r3, [r3, #20]
 800e934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e938:	b2da      	uxtb	r2, r3
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e93e:	693a      	ldr	r2, [r7, #16]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	69db      	ldr	r3, [r3, #28]
 800e944:	4619      	mov	r1, r3
 800e946:	4610      	mov	r0, r2
 800e948:	f7fe fb36 	bl	800cfb8 <clust2sect>
 800e94c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d104      	bne.n	800e95e <f_write+0x17e>
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2202      	movs	r2, #2
 800e958:	755a      	strb	r2, [r3, #21]
 800e95a:	2302      	movs	r3, #2
 800e95c:	e0b1      	b.n	800eac2 <f_write+0x2e2>
			sect += csect;
 800e95e:	697a      	ldr	r2, [r7, #20]
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	4413      	add	r3, r2
 800e964:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	0a5b      	lsrs	r3, r3, #9
 800e96a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e96c:	6a3b      	ldr	r3, [r7, #32]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d03c      	beq.n	800e9ec <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e972:	69ba      	ldr	r2, [r7, #24]
 800e974:	6a3b      	ldr	r3, [r7, #32]
 800e976:	4413      	add	r3, r2
 800e978:	693a      	ldr	r2, [r7, #16]
 800e97a:	8952      	ldrh	r2, [r2, #10]
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d905      	bls.n	800e98c <f_write+0x1ac>
					cc = fs->csize - csect;
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	895b      	ldrh	r3, [r3, #10]
 800e984:	461a      	mov	r2, r3
 800e986:	69bb      	ldr	r3, [r7, #24]
 800e988:	1ad3      	subs	r3, r2, r3
 800e98a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	7858      	ldrb	r0, [r3, #1]
 800e990:	6a3b      	ldr	r3, [r7, #32]
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	69f9      	ldr	r1, [r7, #28]
 800e996:	f7fd ff85 	bl	800c8a4 <disk_write>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d004      	beq.n	800e9aa <f_write+0x1ca>
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	755a      	strb	r2, [r3, #21]
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	e08b      	b.n	800eac2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	6a1a      	ldr	r2, [r3, #32]
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	6a3a      	ldr	r2, [r7, #32]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d915      	bls.n	800e9e4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	6a1a      	ldr	r2, [r3, #32]
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	1ad3      	subs	r3, r2, r3
 800e9c6:	025b      	lsls	r3, r3, #9
 800e9c8:	69fa      	ldr	r2, [r7, #28]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	f7fe f827 	bl	800ca24 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	7d1b      	ldrb	r3, [r3, #20]
 800e9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9de:	b2da      	uxtb	r2, r3
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e9e4:	6a3b      	ldr	r3, [r7, #32]
 800e9e6:	025b      	lsls	r3, r3, #9
 800e9e8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e9ea:	e03f      	b.n	800ea6c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	6a1b      	ldr	r3, [r3, #32]
 800e9f0:	697a      	ldr	r2, [r7, #20]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d016      	beq.n	800ea24 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	699a      	ldr	r2, [r3, #24]
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d210      	bcs.n	800ea24 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	7858      	ldrb	r0, [r3, #1]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	697a      	ldr	r2, [r7, #20]
 800ea10:	f7fd ff28 	bl	800c864 <disk_read>
 800ea14:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d004      	beq.n	800ea24 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	755a      	strb	r2, [r3, #21]
 800ea20:	2301      	movs	r3, #1
 800ea22:	e04e      	b.n	800eac2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	697a      	ldr	r2, [r7, #20]
 800ea28:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	699b      	ldr	r3, [r3, #24]
 800ea2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea32:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ea36:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ea38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d901      	bls.n	800ea44 <f_write+0x264>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	699b      	ldr	r3, [r3, #24]
 800ea4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea52:	4413      	add	r3, r2
 800ea54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea56:	69f9      	ldr	r1, [r7, #28]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7fd ffe3 	bl	800ca24 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	7d1b      	ldrb	r3, [r3, #20]
 800ea62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ea66:	b2da      	uxtb	r2, r3
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ea6c:	69fa      	ldr	r2, [r7, #28]
 800ea6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea70:	4413      	add	r3, r2
 800ea72:	61fb      	str	r3, [r7, #28]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	699a      	ldr	r2, [r3, #24]
 800ea78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7a:	441a      	add	r2, r3
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	619a      	str	r2, [r3, #24]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	68da      	ldr	r2, [r3, #12]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	699b      	ldr	r3, [r3, #24]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	bf38      	it	cc
 800ea8c:	461a      	movcc	r2, r3
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	60da      	str	r2, [r3, #12]
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea98:	441a      	add	r2, r3
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	601a      	str	r2, [r3, #0]
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	f47f aed4 	bne.w	800e856 <f_write+0x76>
 800eaae:	e000      	b.n	800eab2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eab0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	7d1b      	ldrb	r3, [r3, #20]
 800eab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaba:	b2da      	uxtb	r2, r3
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3730      	adds	r7, #48	; 0x30
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b086      	sub	sp, #24
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f107 0208 	add.w	r2, r7, #8
 800ead8:	4611      	mov	r1, r2
 800eada:	4618      	mov	r0, r3
 800eadc:	f7ff fc46 	bl	800e36c <validate>
 800eae0:	4603      	mov	r3, r0
 800eae2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eae4:	7dfb      	ldrb	r3, [r7, #23]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d168      	bne.n	800ebbc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	7d1b      	ldrb	r3, [r3, #20]
 800eaee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d062      	beq.n	800ebbc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	7d1b      	ldrb	r3, [r3, #20]
 800eafa:	b25b      	sxtb	r3, r3
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	da15      	bge.n	800eb2c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	7858      	ldrb	r0, [r3, #1]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6a1a      	ldr	r2, [r3, #32]
 800eb0e:	2301      	movs	r3, #1
 800eb10:	f7fd fec8 	bl	800c8a4 <disk_write>
 800eb14:	4603      	mov	r3, r0
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d001      	beq.n	800eb1e <f_sync+0x54>
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	e04f      	b.n	800ebbe <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	7d1b      	ldrb	r3, [r3, #20]
 800eb22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb26:	b2da      	uxtb	r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eb2c:	f7fb fcba 	bl	800a4a4 <get_fattime>
 800eb30:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800eb32:	68ba      	ldr	r2, [r7, #8]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb38:	4619      	mov	r1, r3
 800eb3a:	4610      	mov	r0, r2
 800eb3c:	f7fe f9a0 	bl	800ce80 <move_window>
 800eb40:	4603      	mov	r3, r0
 800eb42:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800eb44:	7dfb      	ldrb	r3, [r7, #23]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d138      	bne.n	800ebbc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb4e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	330b      	adds	r3, #11
 800eb54:	781a      	ldrb	r2, [r3, #0]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	330b      	adds	r3, #11
 800eb5a:	f042 0220 	orr.w	r2, r2, #32
 800eb5e:	b2d2      	uxtb	r2, r2
 800eb60:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6818      	ldr	r0, [r3, #0]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	689b      	ldr	r3, [r3, #8]
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	68f9      	ldr	r1, [r7, #12]
 800eb6e:	f7fe fead 	bl	800d8cc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f103 021c 	add.w	r2, r3, #28
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	4610      	mov	r0, r2
 800eb80:	f7fd ff24 	bl	800c9cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	3316      	adds	r3, #22
 800eb88:	6939      	ldr	r1, [r7, #16]
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7fd ff1e 	bl	800c9cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	3312      	adds	r3, #18
 800eb94:	2100      	movs	r1, #0
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7fd fefd 	bl	800c996 <st_word>
					fs->wflag = 1;
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	2201      	movs	r2, #1
 800eba0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7fe f999 	bl	800cedc <sync_fs>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	7d1b      	ldrb	r3, [r3, #20]
 800ebb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebb6:	b2da      	uxtb	r2, r3
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ebbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3718      	adds	r7, #24
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}

0800ebc6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b084      	sub	sp, #16
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f7ff ff7b 	bl	800eaca <f_sync>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ebd8:	7bfb      	ldrb	r3, [r7, #15]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d118      	bne.n	800ec10 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f107 0208 	add.w	r2, r7, #8
 800ebe4:	4611      	mov	r1, r2
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7ff fbc0 	bl	800e36c <validate>
 800ebec:	4603      	mov	r3, r0
 800ebee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ebf0:	7bfb      	ldrb	r3, [r7, #15]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d10c      	bne.n	800ec10 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	691b      	ldr	r3, [r3, #16]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7fe f89c 	bl	800cd38 <dec_lock>
 800ec00:	4603      	mov	r3, r0
 800ec02:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ec04:	7bfb      	ldrb	r3, [r7, #15]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d102      	bne.n	800ec10 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ec10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3710      	adds	r7, #16
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b090      	sub	sp, #64	; 0x40
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
 800ec22:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f107 0208 	add.w	r2, r7, #8
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7ff fb9d 	bl	800e36c <validate>
 800ec32:	4603      	mov	r3, r0
 800ec34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ec38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d103      	bne.n	800ec48 <f_lseek+0x2e>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	7d5b      	ldrb	r3, [r3, #21]
 800ec44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ec48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d002      	beq.n	800ec56 <f_lseek+0x3c>
 800ec50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ec54:	e1e6      	b.n	800f024 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	f000 80d1 	beq.w	800ee02 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec66:	d15a      	bne.n	800ed1e <f_lseek+0x104>
			tbl = fp->cltbl;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec6c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ec6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec70:	1d1a      	adds	r2, r3, #4
 800ec72:	627a      	str	r2, [r7, #36]	; 0x24
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	617b      	str	r3, [r7, #20]
 800ec78:	2302      	movs	r3, #2
 800ec7a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ec82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d03a      	beq.n	800ecfe <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ec88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8a:	613b      	str	r3, [r7, #16]
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec92:	3302      	adds	r3, #2
 800ec94:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ec96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec98:	60fb      	str	r3, [r7, #12]
 800ec9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7fe f9a6 	bl	800cff6 <get_fat>
 800ecaa:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ecac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	d804      	bhi.n	800ecbc <f_lseek+0xa2>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2202      	movs	r2, #2
 800ecb6:	755a      	strb	r2, [r3, #21]
 800ecb8:	2302      	movs	r3, #2
 800ecba:	e1b3      	b.n	800f024 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecc2:	d104      	bne.n	800ecce <f_lseek+0xb4>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	755a      	strb	r2, [r3, #21]
 800ecca:	2301      	movs	r3, #1
 800eccc:	e1aa      	b.n	800f024 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d0de      	beq.n	800ec96 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ecd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d809      	bhi.n	800ecf4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ece0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece2:	1d1a      	adds	r2, r3, #4
 800ece4:	627a      	str	r2, [r7, #36]	; 0x24
 800ece6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ece8:	601a      	str	r2, [r3, #0]
 800ecea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecec:	1d1a      	adds	r2, r3, #4
 800ecee:	627a      	str	r2, [r7, #36]	; 0x24
 800ecf0:	693a      	ldr	r2, [r7, #16]
 800ecf2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	695b      	ldr	r3, [r3, #20]
 800ecf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d3c4      	bcc.n	800ec88 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed04:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ed06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d803      	bhi.n	800ed16 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ed0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed10:	2200      	movs	r2, #0
 800ed12:	601a      	str	r2, [r3, #0]
 800ed14:	e184      	b.n	800f020 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ed16:	2311      	movs	r3, #17
 800ed18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ed1c:	e180      	b.n	800f020 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	68db      	ldr	r3, [r3, #12]
 800ed22:	683a      	ldr	r2, [r7, #0]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d902      	bls.n	800ed2e <f_lseek+0x114>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	683a      	ldr	r2, [r7, #0]
 800ed32:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	f000 8172 	beq.w	800f020 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	3b01      	subs	r3, #1
 800ed40:	4619      	mov	r1, r3
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f7fe fbe8 	bl	800d518 <clmt_clust>
 800ed48:	4602      	mov	r2, r0
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ed4e:	68ba      	ldr	r2, [r7, #8]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	69db      	ldr	r3, [r3, #28]
 800ed54:	4619      	mov	r1, r3
 800ed56:	4610      	mov	r0, r2
 800ed58:	f7fe f92e 	bl	800cfb8 <clust2sect>
 800ed5c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ed5e:	69bb      	ldr	r3, [r7, #24]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d104      	bne.n	800ed6e <f_lseek+0x154>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2202      	movs	r2, #2
 800ed68:	755a      	strb	r2, [r3, #21]
 800ed6a:	2302      	movs	r3, #2
 800ed6c:	e15a      	b.n	800f024 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	3b01      	subs	r3, #1
 800ed72:	0a5b      	lsrs	r3, r3, #9
 800ed74:	68ba      	ldr	r2, [r7, #8]
 800ed76:	8952      	ldrh	r2, [r2, #10]
 800ed78:	3a01      	subs	r2, #1
 800ed7a:	4013      	ands	r3, r2
 800ed7c:	69ba      	ldr	r2, [r7, #24]
 800ed7e:	4413      	add	r3, r2
 800ed80:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	699b      	ldr	r3, [r3, #24]
 800ed86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	f000 8148 	beq.w	800f020 <f_lseek+0x406>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6a1b      	ldr	r3, [r3, #32]
 800ed94:	69ba      	ldr	r2, [r7, #24]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	f000 8142 	beq.w	800f020 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	7d1b      	ldrb	r3, [r3, #20]
 800eda0:	b25b      	sxtb	r3, r3
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	da18      	bge.n	800edd8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	7858      	ldrb	r0, [r3, #1]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6a1a      	ldr	r2, [r3, #32]
 800edb4:	2301      	movs	r3, #1
 800edb6:	f7fd fd75 	bl	800c8a4 <disk_write>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d004      	beq.n	800edca <f_lseek+0x1b0>
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	755a      	strb	r2, [r3, #21]
 800edc6:	2301      	movs	r3, #1
 800edc8:	e12c      	b.n	800f024 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	7d1b      	ldrb	r3, [r3, #20]
 800edce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edd2:	b2da      	uxtb	r2, r3
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	7858      	ldrb	r0, [r3, #1]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ede2:	2301      	movs	r3, #1
 800ede4:	69ba      	ldr	r2, [r7, #24]
 800ede6:	f7fd fd3d 	bl	800c864 <disk_read>
 800edea:	4603      	mov	r3, r0
 800edec:	2b00      	cmp	r3, #0
 800edee:	d004      	beq.n	800edfa <f_lseek+0x1e0>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2201      	movs	r2, #1
 800edf4:	755a      	strb	r2, [r3, #21]
 800edf6:	2301      	movs	r3, #1
 800edf8:	e114      	b.n	800f024 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	69ba      	ldr	r2, [r7, #24]
 800edfe:	621a      	str	r2, [r3, #32]
 800ee00:	e10e      	b.n	800f020 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	68db      	ldr	r3, [r3, #12]
 800ee06:	683a      	ldr	r2, [r7, #0]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d908      	bls.n	800ee1e <f_lseek+0x204>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	7d1b      	ldrb	r3, [r3, #20]
 800ee10:	f003 0302 	and.w	r3, r3, #2
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d102      	bne.n	800ee1e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	68db      	ldr	r3, [r3, #12]
 800ee1c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	699b      	ldr	r3, [r3, #24]
 800ee22:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ee24:	2300      	movs	r3, #0
 800ee26:	637b      	str	r3, [r7, #52]	; 0x34
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee2c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	f000 80a7 	beq.w	800ef84 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	895b      	ldrh	r3, [r3, #10]
 800ee3a:	025b      	lsls	r3, r3, #9
 800ee3c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ee3e:	6a3b      	ldr	r3, [r7, #32]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d01b      	beq.n	800ee7c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	1e5a      	subs	r2, r3, #1
 800ee48:	69fb      	ldr	r3, [r7, #28]
 800ee4a:	fbb2 f2f3 	udiv	r2, r2, r3
 800ee4e:	6a3b      	ldr	r3, [r7, #32]
 800ee50:	1e59      	subs	r1, r3, #1
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d30f      	bcc.n	800ee7c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ee5c:	6a3b      	ldr	r3, [r7, #32]
 800ee5e:	1e5a      	subs	r2, r3, #1
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	425b      	negs	r3, r3
 800ee64:	401a      	ands	r2, r3
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	699b      	ldr	r3, [r3, #24]
 800ee6e:	683a      	ldr	r2, [r7, #0]
 800ee70:	1ad3      	subs	r3, r2, r3
 800ee72:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	69db      	ldr	r3, [r3, #28]
 800ee78:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee7a:	e022      	b.n	800eec2 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	689b      	ldr	r3, [r3, #8]
 800ee80:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ee82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d119      	bne.n	800eebc <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2100      	movs	r1, #0
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7fe faab 	bl	800d3e8 <create_chain>
 800ee92:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ee94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	d104      	bne.n	800eea4 <f_lseek+0x28a>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2202      	movs	r2, #2
 800ee9e:	755a      	strb	r2, [r3, #21]
 800eea0:	2302      	movs	r3, #2
 800eea2:	e0bf      	b.n	800f024 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eeaa:	d104      	bne.n	800eeb6 <f_lseek+0x29c>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2201      	movs	r2, #1
 800eeb0:	755a      	strb	r2, [r3, #21]
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	e0b6      	b.n	800f024 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eeba:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eec0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800eec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d05d      	beq.n	800ef84 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800eec8:	e03a      	b.n	800ef40 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800eeca:	683a      	ldr	r2, [r7, #0]
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	1ad3      	subs	r3, r2, r3
 800eed0:	603b      	str	r3, [r7, #0]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	699a      	ldr	r2, [r3, #24]
 800eed6:	69fb      	ldr	r3, [r7, #28]
 800eed8:	441a      	add	r2, r3
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	7d1b      	ldrb	r3, [r3, #20]
 800eee2:	f003 0302 	and.w	r3, r3, #2
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d00b      	beq.n	800ef02 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fe fa7a 	bl	800d3e8 <create_chain>
 800eef4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800eef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d108      	bne.n	800ef0e <f_lseek+0x2f4>
							ofs = 0; break;
 800eefc:	2300      	movs	r3, #0
 800eefe:	603b      	str	r3, [r7, #0]
 800ef00:	e022      	b.n	800ef48 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fe f875 	bl	800cff6 <get_fat>
 800ef0c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef14:	d104      	bne.n	800ef20 <f_lseek+0x306>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2201      	movs	r2, #1
 800ef1a:	755a      	strb	r2, [r3, #21]
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	e081      	b.n	800f024 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ef20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d904      	bls.n	800ef30 <f_lseek+0x316>
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	695b      	ldr	r3, [r3, #20]
 800ef2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d304      	bcc.n	800ef3a <f_lseek+0x320>
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2202      	movs	r2, #2
 800ef34:	755a      	strb	r2, [r3, #21]
 800ef36:	2302      	movs	r3, #2
 800ef38:	e074      	b.n	800f024 <f_lseek+0x40a>
					fp->clust = clst;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef3e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ef40:	683a      	ldr	r2, [r7, #0]
 800ef42:	69fb      	ldr	r3, [r7, #28]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d8c0      	bhi.n	800eeca <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	699a      	ldr	r2, [r3, #24]
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	441a      	add	r2, r3
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d012      	beq.n	800ef84 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7fe f828 	bl	800cfb8 <clust2sect>
 800ef68:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ef6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d104      	bne.n	800ef7a <f_lseek+0x360>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2202      	movs	r2, #2
 800ef74:	755a      	strb	r2, [r3, #21]
 800ef76:	2302      	movs	r3, #2
 800ef78:	e054      	b.n	800f024 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	0a5b      	lsrs	r3, r3, #9
 800ef7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef80:	4413      	add	r3, r2
 800ef82:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	699a      	ldr	r2, [r3, #24]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	68db      	ldr	r3, [r3, #12]
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d90a      	bls.n	800efa6 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	699a      	ldr	r2, [r3, #24]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	7d1b      	ldrb	r3, [r3, #20]
 800ef9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efa0:	b2da      	uxtb	r2, r3
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	699b      	ldr	r3, [r3, #24]
 800efaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d036      	beq.n	800f020 <f_lseek+0x406>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6a1b      	ldr	r3, [r3, #32]
 800efb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efb8:	429a      	cmp	r2, r3
 800efba:	d031      	beq.n	800f020 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	7d1b      	ldrb	r3, [r3, #20]
 800efc0:	b25b      	sxtb	r3, r3
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	da18      	bge.n	800eff8 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	7858      	ldrb	r0, [r3, #1]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6a1a      	ldr	r2, [r3, #32]
 800efd4:	2301      	movs	r3, #1
 800efd6:	f7fd fc65 	bl	800c8a4 <disk_write>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d004      	beq.n	800efea <f_lseek+0x3d0>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2201      	movs	r2, #1
 800efe4:	755a      	strb	r2, [r3, #21]
 800efe6:	2301      	movs	r3, #1
 800efe8:	e01c      	b.n	800f024 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	7d1b      	ldrb	r3, [r3, #20]
 800efee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eff2:	b2da      	uxtb	r2, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	7858      	ldrb	r0, [r3, #1]
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f002:	2301      	movs	r3, #1
 800f004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f006:	f7fd fc2d 	bl	800c864 <disk_read>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d004      	beq.n	800f01a <f_lseek+0x400>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2201      	movs	r2, #1
 800f014:	755a      	strb	r2, [r3, #21]
 800f016:	2301      	movs	r3, #1
 800f018:	e004      	b.n	800f024 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f01e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f020:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f024:	4618      	mov	r0, r3
 800f026:	3740      	adds	r7, #64	; 0x40
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b086      	sub	sp, #24
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d101      	bne.n	800f040 <f_opendir+0x14>
 800f03c:	2309      	movs	r3, #9
 800f03e:	e064      	b.n	800f10a <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f044:	f107 010c 	add.w	r1, r7, #12
 800f048:	463b      	mov	r3, r7
 800f04a:	2200      	movs	r2, #0
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7fe ff41 	bl	800ded4 <find_volume>
 800f052:	4603      	mov	r3, r0
 800f054:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f056:	7dfb      	ldrb	r3, [r7, #23]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d14f      	bne.n	800f0fc <f_opendir+0xd0>
		obj->fs = fs;
 800f05c:	68fa      	ldr	r2, [r7, #12]
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	4619      	mov	r1, r3
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f7fe fe28 	bl	800dcbc <follow_path>
 800f06c:	4603      	mov	r3, r0
 800f06e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f070:	7dfb      	ldrb	r3, [r7, #23]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d13d      	bne.n	800f0f2 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f07c:	b25b      	sxtb	r3, r3
 800f07e:	2b00      	cmp	r3, #0
 800f080:	db12      	blt.n	800f0a8 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	799b      	ldrb	r3, [r3, #6]
 800f086:	f003 0310 	and.w	r3, r3, #16
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d00a      	beq.n	800f0a4 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f08e:	68fa      	ldr	r2, [r7, #12]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6a1b      	ldr	r3, [r3, #32]
 800f094:	4619      	mov	r1, r3
 800f096:	4610      	mov	r0, r2
 800f098:	f7fe fbf9 	bl	800d88e <ld_clust>
 800f09c:	4602      	mov	r2, r0
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	609a      	str	r2, [r3, #8]
 800f0a2:	e001      	b.n	800f0a8 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f0a4:	2305      	movs	r3, #5
 800f0a6:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f0a8:	7dfb      	ldrb	r3, [r7, #23]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d121      	bne.n	800f0f2 <f_opendir+0xc6>
				obj->id = fs->id;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	88da      	ldrh	r2, [r3, #6]
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f0b6:	2100      	movs	r1, #0
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f7fe fa61 	bl	800d580 <dir_sdi>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f0c2:	7dfb      	ldrb	r3, [r7, #23]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d114      	bne.n	800f0f2 <f_opendir+0xc6>
					if (obj->sclust) {
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	689b      	ldr	r3, [r3, #8]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d00d      	beq.n	800f0ec <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f0d0:	2100      	movs	r1, #0
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f7fd fda2 	bl	800cc1c <inc_lock>
 800f0d8:	4602      	mov	r2, r0
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	691b      	ldr	r3, [r3, #16]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d105      	bne.n	800f0f2 <f_opendir+0xc6>
 800f0e6:	2312      	movs	r3, #18
 800f0e8:	75fb      	strb	r3, [r7, #23]
 800f0ea:	e002      	b.n	800f0f2 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f0f2:	7dfb      	ldrb	r3, [r7, #23]
 800f0f4:	2b04      	cmp	r3, #4
 800f0f6:	d101      	bne.n	800f0fc <f_opendir+0xd0>
 800f0f8:	2305      	movs	r3, #5
 800f0fa:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f0fc:	7dfb      	ldrb	r3, [r7, #23]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d002      	beq.n	800f108 <f_opendir+0xdc>
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	2200      	movs	r2, #0
 800f106:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f108:	7dfb      	ldrb	r3, [r7, #23]
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3718      	adds	r7, #24
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}

0800f112 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f112:	b580      	push	{r7, lr}
 800f114:	b084      	sub	sp, #16
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f107 0208 	add.w	r2, r7, #8
 800f120:	4611      	mov	r1, r2
 800f122:	4618      	mov	r0, r3
 800f124:	f7ff f922 	bl	800e36c <validate>
 800f128:	4603      	mov	r3, r0
 800f12a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f12c:	7bfb      	ldrb	r3, [r7, #15]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d110      	bne.n	800f154 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	691b      	ldr	r3, [r3, #16]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d006      	beq.n	800f148 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	691b      	ldr	r3, [r3, #16]
 800f13e:	4618      	mov	r0, r3
 800f140:	f7fd fdfa 	bl	800cd38 <dec_lock>
 800f144:	4603      	mov	r3, r0
 800f146:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800f148:	7bfb      	ldrb	r3, [r7, #15]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d102      	bne.n	800f154 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2200      	movs	r2, #0
 800f152:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800f154:	7bfb      	ldrb	r3, [r7, #15]
}
 800f156:	4618      	mov	r0, r3
 800f158:	3710      	adds	r7, #16
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b084      	sub	sp, #16
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
 800f166:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f107 0208 	add.w	r2, r7, #8
 800f16e:	4611      	mov	r1, r2
 800f170:	4618      	mov	r0, r3
 800f172:	f7ff f8fb 	bl	800e36c <validate>
 800f176:	4603      	mov	r3, r0
 800f178:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f17a:	7bfb      	ldrb	r3, [r7, #15]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d126      	bne.n	800f1ce <f_readdir+0x70>
		if (!fno) {
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d106      	bne.n	800f194 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f186:	2100      	movs	r1, #0
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f7fe f9f9 	bl	800d580 <dir_sdi>
 800f18e:	4603      	mov	r3, r0
 800f190:	73fb      	strb	r3, [r7, #15]
 800f192:	e01c      	b.n	800f1ce <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800f194:	2100      	movs	r1, #0
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f7fe fbb8 	bl	800d90c <dir_read>
 800f19c:	4603      	mov	r3, r0
 800f19e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f1a0:	7bfb      	ldrb	r3, [r7, #15]
 800f1a2:	2b04      	cmp	r3, #4
 800f1a4:	d101      	bne.n	800f1aa <f_readdir+0x4c>
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800f1aa:	7bfb      	ldrb	r3, [r7, #15]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d10e      	bne.n	800f1ce <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f1b0:	6839      	ldr	r1, [r7, #0]
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f7fe fc8e 	bl	800dad4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7fe fa5b 	bl	800d676 <dir_next>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f1c4:	7bfb      	ldrb	r3, [r7, #15]
 800f1c6:	2b04      	cmp	r3, #4
 800f1c8:	d101      	bne.n	800f1ce <f_readdir+0x70>
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3710      	adds	r7, #16
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}

0800f1d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b087      	sub	sp, #28
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	4613      	mov	r3, r2
 800f1e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f1ee:	4b1f      	ldr	r3, [pc, #124]	; (800f26c <FATFS_LinkDriverEx+0x94>)
 800f1f0:	7a5b      	ldrb	r3, [r3, #9]
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d131      	bne.n	800f25c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f1f8:	4b1c      	ldr	r3, [pc, #112]	; (800f26c <FATFS_LinkDriverEx+0x94>)
 800f1fa:	7a5b      	ldrb	r3, [r3, #9]
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	461a      	mov	r2, r3
 800f200:	4b1a      	ldr	r3, [pc, #104]	; (800f26c <FATFS_LinkDriverEx+0x94>)
 800f202:	2100      	movs	r1, #0
 800f204:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f206:	4b19      	ldr	r3, [pc, #100]	; (800f26c <FATFS_LinkDriverEx+0x94>)
 800f208:	7a5b      	ldrb	r3, [r3, #9]
 800f20a:	b2db      	uxtb	r3, r3
 800f20c:	4a17      	ldr	r2, [pc, #92]	; (800f26c <FATFS_LinkDriverEx+0x94>)
 800f20e:	009b      	lsls	r3, r3, #2
 800f210:	4413      	add	r3, r2
 800f212:	68fa      	ldr	r2, [r7, #12]
 800f214:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f216:	4b15      	ldr	r3, [pc, #84]	; (800f26c <FATFS_LinkDriverEx+0x94>)
 800f218:	7a5b      	ldrb	r3, [r3, #9]
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	461a      	mov	r2, r3
 800f21e:	4b13      	ldr	r3, [pc, #76]	; (800f26c <FATFS_LinkDriverEx+0x94>)
 800f220:	4413      	add	r3, r2
 800f222:	79fa      	ldrb	r2, [r7, #7]
 800f224:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f226:	4b11      	ldr	r3, [pc, #68]	; (800f26c <FATFS_LinkDriverEx+0x94>)
 800f228:	7a5b      	ldrb	r3, [r3, #9]
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	1c5a      	adds	r2, r3, #1
 800f22e:	b2d1      	uxtb	r1, r2
 800f230:	4a0e      	ldr	r2, [pc, #56]	; (800f26c <FATFS_LinkDriverEx+0x94>)
 800f232:	7251      	strb	r1, [r2, #9]
 800f234:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f236:	7dbb      	ldrb	r3, [r7, #22]
 800f238:	3330      	adds	r3, #48	; 0x30
 800f23a:	b2da      	uxtb	r2, r3
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	3301      	adds	r3, #1
 800f244:	223a      	movs	r2, #58	; 0x3a
 800f246:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	3302      	adds	r3, #2
 800f24c:	222f      	movs	r2, #47	; 0x2f
 800f24e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	3303      	adds	r3, #3
 800f254:	2200      	movs	r2, #0
 800f256:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f258:	2300      	movs	r3, #0
 800f25a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f25c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f25e:	4618      	mov	r0, r3
 800f260:	371c      	adds	r7, #28
 800f262:	46bd      	mov	sp, r7
 800f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f268:	4770      	bx	lr
 800f26a:	bf00      	nop
 800f26c:	20000514 	.word	0x20000514

0800f270 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f27a:	2200      	movs	r2, #0
 800f27c:	6839      	ldr	r1, [r7, #0]
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f7ff ffaa 	bl	800f1d8 <FATFS_LinkDriverEx>
 800f284:	4603      	mov	r3, r0
}
 800f286:	4618      	mov	r0, r3
 800f288:	3708      	adds	r7, #8
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
	...

0800f290 <__NVIC_SetPriority>:
{
 800f290:	b480      	push	{r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
 800f296:	4603      	mov	r3, r0
 800f298:	6039      	str	r1, [r7, #0]
 800f29a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f29c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	db0a      	blt.n	800f2ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	b2da      	uxtb	r2, r3
 800f2a8:	490c      	ldr	r1, [pc, #48]	; (800f2dc <__NVIC_SetPriority+0x4c>)
 800f2aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2ae:	0112      	lsls	r2, r2, #4
 800f2b0:	b2d2      	uxtb	r2, r2
 800f2b2:	440b      	add	r3, r1
 800f2b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f2b8:	e00a      	b.n	800f2d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	b2da      	uxtb	r2, r3
 800f2be:	4908      	ldr	r1, [pc, #32]	; (800f2e0 <__NVIC_SetPriority+0x50>)
 800f2c0:	79fb      	ldrb	r3, [r7, #7]
 800f2c2:	f003 030f 	and.w	r3, r3, #15
 800f2c6:	3b04      	subs	r3, #4
 800f2c8:	0112      	lsls	r2, r2, #4
 800f2ca:	b2d2      	uxtb	r2, r2
 800f2cc:	440b      	add	r3, r1
 800f2ce:	761a      	strb	r2, [r3, #24]
}
 800f2d0:	bf00      	nop
 800f2d2:	370c      	adds	r7, #12
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr
 800f2dc:	e000e100 	.word	0xe000e100
 800f2e0:	e000ed00 	.word	0xe000ed00

0800f2e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f2e8:	4b05      	ldr	r3, [pc, #20]	; (800f300 <SysTick_Handler+0x1c>)
 800f2ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f2ec:	f001 ffc6 	bl	801127c <xTaskGetSchedulerState>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d001      	beq.n	800f2fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f2f6:	f002 feaf 	bl	8012058 <xPortSysTickHandler>
  }
}
 800f2fa:	bf00      	nop
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	e000e010 	.word	0xe000e010

0800f304 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f304:	b580      	push	{r7, lr}
 800f306:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f308:	2100      	movs	r1, #0
 800f30a:	f06f 0004 	mvn.w	r0, #4
 800f30e:	f7ff ffbf 	bl	800f290 <__NVIC_SetPriority>
#endif
}
 800f312:	bf00      	nop
 800f314:	bd80      	pop	{r7, pc}
	...

0800f318 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f318:	b480      	push	{r7}
 800f31a:	b083      	sub	sp, #12
 800f31c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f31e:	f3ef 8305 	mrs	r3, IPSR
 800f322:	603b      	str	r3, [r7, #0]
  return(result);
 800f324:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f326:	2b00      	cmp	r3, #0
 800f328:	d003      	beq.n	800f332 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f32a:	f06f 0305 	mvn.w	r3, #5
 800f32e:	607b      	str	r3, [r7, #4]
 800f330:	e00c      	b.n	800f34c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f332:	4b0a      	ldr	r3, [pc, #40]	; (800f35c <osKernelInitialize+0x44>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d105      	bne.n	800f346 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f33a:	4b08      	ldr	r3, [pc, #32]	; (800f35c <osKernelInitialize+0x44>)
 800f33c:	2201      	movs	r2, #1
 800f33e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f340:	2300      	movs	r3, #0
 800f342:	607b      	str	r3, [r7, #4]
 800f344:	e002      	b.n	800f34c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f34a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f34c:	687b      	ldr	r3, [r7, #4]
}
 800f34e:	4618      	mov	r0, r3
 800f350:	370c      	adds	r7, #12
 800f352:	46bd      	mov	sp, r7
 800f354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f358:	4770      	bx	lr
 800f35a:	bf00      	nop
 800f35c:	20000520 	.word	0x20000520

0800f360 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f366:	f3ef 8305 	mrs	r3, IPSR
 800f36a:	603b      	str	r3, [r7, #0]
  return(result);
 800f36c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d003      	beq.n	800f37a <osKernelStart+0x1a>
    stat = osErrorISR;
 800f372:	f06f 0305 	mvn.w	r3, #5
 800f376:	607b      	str	r3, [r7, #4]
 800f378:	e010      	b.n	800f39c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f37a:	4b0b      	ldr	r3, [pc, #44]	; (800f3a8 <osKernelStart+0x48>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	2b01      	cmp	r3, #1
 800f380:	d109      	bne.n	800f396 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f382:	f7ff ffbf 	bl	800f304 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f386:	4b08      	ldr	r3, [pc, #32]	; (800f3a8 <osKernelStart+0x48>)
 800f388:	2202      	movs	r2, #2
 800f38a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f38c:	f001 fb1a 	bl	80109c4 <vTaskStartScheduler>
      stat = osOK;
 800f390:	2300      	movs	r3, #0
 800f392:	607b      	str	r3, [r7, #4]
 800f394:	e002      	b.n	800f39c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f39a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f39c:	687b      	ldr	r3, [r7, #4]
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3708      	adds	r7, #8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}
 800f3a6:	bf00      	nop
 800f3a8:	20000520 	.word	0x20000520

0800f3ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b08e      	sub	sp, #56	; 0x38
 800f3b0:	af04      	add	r7, sp, #16
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3bc:	f3ef 8305 	mrs	r3, IPSR
 800f3c0:	617b      	str	r3, [r7, #20]
  return(result);
 800f3c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d17e      	bne.n	800f4c6 <osThreadNew+0x11a>
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d07b      	beq.n	800f4c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f3ce:	2380      	movs	r3, #128	; 0x80
 800f3d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f3d2:	2318      	movs	r3, #24
 800f3d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f3da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d045      	beq.n	800f472 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d002      	beq.n	800f3f4 <osThreadNew+0x48>
        name = attr->name;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	699b      	ldr	r3, [r3, #24]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d002      	beq.n	800f402 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	699b      	ldr	r3, [r3, #24]
 800f400:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d008      	beq.n	800f41a <osThreadNew+0x6e>
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	2b38      	cmp	r3, #56	; 0x38
 800f40c:	d805      	bhi.n	800f41a <osThreadNew+0x6e>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	f003 0301 	and.w	r3, r3, #1
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <osThreadNew+0x72>
        return (NULL);
 800f41a:	2300      	movs	r3, #0
 800f41c:	e054      	b.n	800f4c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	695b      	ldr	r3, [r3, #20]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d003      	beq.n	800f42e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	695b      	ldr	r3, [r3, #20]
 800f42a:	089b      	lsrs	r3, r3, #2
 800f42c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	689b      	ldr	r3, [r3, #8]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d00e      	beq.n	800f454 <osThreadNew+0xa8>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	68db      	ldr	r3, [r3, #12]
 800f43a:	2bbb      	cmp	r3, #187	; 0xbb
 800f43c:	d90a      	bls.n	800f454 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f442:	2b00      	cmp	r3, #0
 800f444:	d006      	beq.n	800f454 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	695b      	ldr	r3, [r3, #20]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d002      	beq.n	800f454 <osThreadNew+0xa8>
        mem = 1;
 800f44e:	2301      	movs	r3, #1
 800f450:	61bb      	str	r3, [r7, #24]
 800f452:	e010      	b.n	800f476 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	689b      	ldr	r3, [r3, #8]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d10c      	bne.n	800f476 <osThreadNew+0xca>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	68db      	ldr	r3, [r3, #12]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d108      	bne.n	800f476 <osThreadNew+0xca>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	691b      	ldr	r3, [r3, #16]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d104      	bne.n	800f476 <osThreadNew+0xca>
          mem = 0;
 800f46c:	2300      	movs	r3, #0
 800f46e:	61bb      	str	r3, [r7, #24]
 800f470:	e001      	b.n	800f476 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f472:	2300      	movs	r3, #0
 800f474:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	2b01      	cmp	r3, #1
 800f47a:	d110      	bne.n	800f49e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f480:	687a      	ldr	r2, [r7, #4]
 800f482:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f484:	9202      	str	r2, [sp, #8]
 800f486:	9301      	str	r3, [sp, #4]
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	9300      	str	r3, [sp, #0]
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	6a3a      	ldr	r2, [r7, #32]
 800f490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f492:	68f8      	ldr	r0, [r7, #12]
 800f494:	f001 f8aa 	bl	80105ec <xTaskCreateStatic>
 800f498:	4603      	mov	r3, r0
 800f49a:	613b      	str	r3, [r7, #16]
 800f49c:	e013      	b.n	800f4c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f49e:	69bb      	ldr	r3, [r7, #24]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d110      	bne.n	800f4c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f4a4:	6a3b      	ldr	r3, [r7, #32]
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	f107 0310 	add.w	r3, r7, #16
 800f4ac:	9301      	str	r3, [sp, #4]
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	9300      	str	r3, [sp, #0]
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4b6:	68f8      	ldr	r0, [r7, #12]
 800f4b8:	f001 f8f5 	bl	80106a6 <xTaskCreate>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	2b01      	cmp	r3, #1
 800f4c0:	d001      	beq.n	800f4c6 <osThreadNew+0x11a>
            hTask = NULL;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f4c6:	693b      	ldr	r3, [r7, #16]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3728      	adds	r7, #40	; 0x28
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4d8:	f3ef 8305 	mrs	r3, IPSR
 800f4dc:	60bb      	str	r3, [r7, #8]
  return(result);
 800f4de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d003      	beq.n	800f4ec <osDelay+0x1c>
    stat = osErrorISR;
 800f4e4:	f06f 0305 	mvn.w	r3, #5
 800f4e8:	60fb      	str	r3, [r7, #12]
 800f4ea:	e007      	b.n	800f4fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d002      	beq.n	800f4fc <osDelay+0x2c>
      vTaskDelay(ticks);
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f001 fa30 	bl	801095c <vTaskDelay>
    }
  }

  return (stat);
 800f4fc:	68fb      	ldr	r3, [r7, #12]
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3710      	adds	r7, #16
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}

0800f506 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f506:	b580      	push	{r7, lr}
 800f508:	b08a      	sub	sp, #40	; 0x28
 800f50a:	af02      	add	r7, sp, #8
 800f50c:	60f8      	str	r0, [r7, #12]
 800f50e:	60b9      	str	r1, [r7, #8]
 800f510:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f512:	2300      	movs	r3, #0
 800f514:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f516:	f3ef 8305 	mrs	r3, IPSR
 800f51a:	613b      	str	r3, [r7, #16]
  return(result);
 800f51c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d175      	bne.n	800f60e <osSemaphoreNew+0x108>
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d072      	beq.n	800f60e <osSemaphoreNew+0x108>
 800f528:	68ba      	ldr	r2, [r7, #8]
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d86e      	bhi.n	800f60e <osSemaphoreNew+0x108>
    mem = -1;
 800f530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f534:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d015      	beq.n	800f568 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	689b      	ldr	r3, [r3, #8]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d006      	beq.n	800f552 <osSemaphoreNew+0x4c>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	68db      	ldr	r3, [r3, #12]
 800f548:	2b4f      	cmp	r3, #79	; 0x4f
 800f54a:	d902      	bls.n	800f552 <osSemaphoreNew+0x4c>
        mem = 1;
 800f54c:	2301      	movs	r3, #1
 800f54e:	61bb      	str	r3, [r7, #24]
 800f550:	e00c      	b.n	800f56c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d108      	bne.n	800f56c <osSemaphoreNew+0x66>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d104      	bne.n	800f56c <osSemaphoreNew+0x66>
          mem = 0;
 800f562:	2300      	movs	r3, #0
 800f564:	61bb      	str	r3, [r7, #24]
 800f566:	e001      	b.n	800f56c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f568:	2300      	movs	r3, #0
 800f56a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f56c:	69bb      	ldr	r3, [r7, #24]
 800f56e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f572:	d04c      	beq.n	800f60e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2b01      	cmp	r3, #1
 800f578:	d128      	bne.n	800f5cc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	2b01      	cmp	r3, #1
 800f57e:	d10a      	bne.n	800f596 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	689b      	ldr	r3, [r3, #8]
 800f584:	2203      	movs	r2, #3
 800f586:	9200      	str	r2, [sp, #0]
 800f588:	2200      	movs	r2, #0
 800f58a:	2100      	movs	r1, #0
 800f58c:	2001      	movs	r0, #1
 800f58e:	f000 f993 	bl	800f8b8 <xQueueGenericCreateStatic>
 800f592:	61f8      	str	r0, [r7, #28]
 800f594:	e005      	b.n	800f5a2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f596:	2203      	movs	r2, #3
 800f598:	2100      	movs	r1, #0
 800f59a:	2001      	movs	r0, #1
 800f59c:	f000 fa04 	bl	800f9a8 <xQueueGenericCreate>
 800f5a0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f5a2:	69fb      	ldr	r3, [r7, #28]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d022      	beq.n	800f5ee <osSemaphoreNew+0xe8>
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d01f      	beq.n	800f5ee <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	2100      	movs	r1, #0
 800f5b4:	69f8      	ldr	r0, [r7, #28]
 800f5b6:	f000 fabf 	bl	800fb38 <xQueueGenericSend>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	d016      	beq.n	800f5ee <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f5c0:	69f8      	ldr	r0, [r7, #28]
 800f5c2:	f000 fe3f 	bl	8010244 <vQueueDelete>
            hSemaphore = NULL;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	61fb      	str	r3, [r7, #28]
 800f5ca:	e010      	b.n	800f5ee <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d108      	bne.n	800f5e4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	689b      	ldr	r3, [r3, #8]
 800f5d6:	461a      	mov	r2, r3
 800f5d8:	68b9      	ldr	r1, [r7, #8]
 800f5da:	68f8      	ldr	r0, [r7, #12]
 800f5dc:	f000 fa41 	bl	800fa62 <xQueueCreateCountingSemaphoreStatic>
 800f5e0:	61f8      	str	r0, [r7, #28]
 800f5e2:	e004      	b.n	800f5ee <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f5e4:	68b9      	ldr	r1, [r7, #8]
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	f000 fa72 	bl	800fad0 <xQueueCreateCountingSemaphore>
 800f5ec:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d00c      	beq.n	800f60e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d003      	beq.n	800f602 <osSemaphoreNew+0xfc>
          name = attr->name;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	617b      	str	r3, [r7, #20]
 800f600:	e001      	b.n	800f606 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f602:	2300      	movs	r3, #0
 800f604:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f606:	6979      	ldr	r1, [r7, #20]
 800f608:	69f8      	ldr	r0, [r7, #28]
 800f60a:	f000 ff67 	bl	80104dc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f60e:	69fb      	ldr	r3, [r7, #28]
}
 800f610:	4618      	mov	r0, r3
 800f612:	3720      	adds	r7, #32
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}

0800f618 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f618:	b480      	push	{r7}
 800f61a:	b085      	sub	sp, #20
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	4a07      	ldr	r2, [pc, #28]	; (800f644 <vApplicationGetIdleTaskMemory+0x2c>)
 800f628:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	4a06      	ldr	r2, [pc, #24]	; (800f648 <vApplicationGetIdleTaskMemory+0x30>)
 800f62e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2280      	movs	r2, #128	; 0x80
 800f634:	601a      	str	r2, [r3, #0]
}
 800f636:	bf00      	nop
 800f638:	3714      	adds	r7, #20
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr
 800f642:	bf00      	nop
 800f644:	20000524 	.word	0x20000524
 800f648:	200005e0 	.word	0x200005e0

0800f64c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f64c:	b480      	push	{r7}
 800f64e:	b085      	sub	sp, #20
 800f650:	af00      	add	r7, sp, #0
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	4a07      	ldr	r2, [pc, #28]	; (800f678 <vApplicationGetTimerTaskMemory+0x2c>)
 800f65c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	4a06      	ldr	r2, [pc, #24]	; (800f67c <vApplicationGetTimerTaskMemory+0x30>)
 800f662:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f66a:	601a      	str	r2, [r3, #0]
}
 800f66c:	bf00      	nop
 800f66e:	3714      	adds	r7, #20
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr
 800f678:	200007e0 	.word	0x200007e0
 800f67c:	2000089c 	.word	0x2000089c

0800f680 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f680:	b480      	push	{r7}
 800f682:	b083      	sub	sp, #12
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f103 0208 	add.w	r2, r3, #8
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f698:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f103 0208 	add.w	r2, r3, #8
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f103 0208 	add.w	r2, r3, #8
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f6b4:	bf00      	nop
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f6ce:	bf00      	nop
 800f6d0:	370c      	adds	r7, #12
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d8:	4770      	bx	lr

0800f6da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f6da:	b480      	push	{r7}
 800f6dc:	b085      	sub	sp, #20
 800f6de:	af00      	add	r7, sp, #0
 800f6e0:	6078      	str	r0, [r7, #4]
 800f6e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	685b      	ldr	r3, [r3, #4]
 800f6e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	68fa      	ldr	r2, [r7, #12]
 800f6ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	689a      	ldr	r2, [r3, #8]
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	689b      	ldr	r3, [r3, #8]
 800f6fc:	683a      	ldr	r2, [r7, #0]
 800f6fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	683a      	ldr	r2, [r7, #0]
 800f704:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	687a      	ldr	r2, [r7, #4]
 800f70a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	1c5a      	adds	r2, r3, #1
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	601a      	str	r2, [r3, #0]
}
 800f716:	bf00      	nop
 800f718:	3714      	adds	r7, #20
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr

0800f722 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f722:	b480      	push	{r7}
 800f724:	b085      	sub	sp, #20
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
 800f72a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f738:	d103      	bne.n	800f742 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	691b      	ldr	r3, [r3, #16]
 800f73e:	60fb      	str	r3, [r7, #12]
 800f740:	e00c      	b.n	800f75c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	3308      	adds	r3, #8
 800f746:	60fb      	str	r3, [r7, #12]
 800f748:	e002      	b.n	800f750 <vListInsert+0x2e>
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	60fb      	str	r3, [r7, #12]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	685b      	ldr	r3, [r3, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	68ba      	ldr	r2, [r7, #8]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d2f6      	bcs.n	800f74a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	685a      	ldr	r2, [r3, #4]
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	683a      	ldr	r2, [r7, #0]
 800f76a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	68fa      	ldr	r2, [r7, #12]
 800f770:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	683a      	ldr	r2, [r7, #0]
 800f776:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	687a      	ldr	r2, [r7, #4]
 800f77c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	1c5a      	adds	r2, r3, #1
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	601a      	str	r2, [r3, #0]
}
 800f788:	bf00      	nop
 800f78a:	3714      	adds	r7, #20
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr

0800f794 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f794:	b480      	push	{r7}
 800f796:	b085      	sub	sp, #20
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	691b      	ldr	r3, [r3, #16]
 800f7a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	685b      	ldr	r3, [r3, #4]
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	6892      	ldr	r2, [r2, #8]
 800f7aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	689b      	ldr	r3, [r3, #8]
 800f7b0:	687a      	ldr	r2, [r7, #4]
 800f7b2:	6852      	ldr	r2, [r2, #4]
 800f7b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	685b      	ldr	r3, [r3, #4]
 800f7ba:	687a      	ldr	r2, [r7, #4]
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d103      	bne.n	800f7c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	689a      	ldr	r2, [r3, #8]
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	1e5a      	subs	r2, r3, #1
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681b      	ldr	r3, [r3, #0]
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3714      	adds	r7, #20
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr

0800f7e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d10a      	bne.n	800f812 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f800:	f383 8811 	msr	BASEPRI, r3
 800f804:	f3bf 8f6f 	isb	sy
 800f808:	f3bf 8f4f 	dsb	sy
 800f80c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f80e:	bf00      	nop
 800f810:	e7fe      	b.n	800f810 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f812:	f002 fb8f 	bl	8011f34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681a      	ldr	r2, [r3, #0]
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f81e:	68f9      	ldr	r1, [r7, #12]
 800f820:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f822:	fb01 f303 	mul.w	r3, r1, r3
 800f826:	441a      	add	r2, r3
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2200      	movs	r2, #0
 800f830:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681a      	ldr	r2, [r3, #0]
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681a      	ldr	r2, [r3, #0]
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f842:	3b01      	subs	r3, #1
 800f844:	68f9      	ldr	r1, [r7, #12]
 800f846:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f848:	fb01 f303 	mul.w	r3, r1, r3
 800f84c:	441a      	add	r2, r3
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	22ff      	movs	r2, #255	; 0xff
 800f856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	22ff      	movs	r2, #255	; 0xff
 800f85e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d114      	bne.n	800f892 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	691b      	ldr	r3, [r3, #16]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d01a      	beq.n	800f8a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	3310      	adds	r3, #16
 800f874:	4618      	mov	r0, r3
 800f876:	f001 fb3f 	bl	8010ef8 <xTaskRemoveFromEventList>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d012      	beq.n	800f8a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f880:	4b0c      	ldr	r3, [pc, #48]	; (800f8b4 <xQueueGenericReset+0xcc>)
 800f882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f886:	601a      	str	r2, [r3, #0]
 800f888:	f3bf 8f4f 	dsb	sy
 800f88c:	f3bf 8f6f 	isb	sy
 800f890:	e009      	b.n	800f8a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	3310      	adds	r3, #16
 800f896:	4618      	mov	r0, r3
 800f898:	f7ff fef2 	bl	800f680 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	3324      	adds	r3, #36	; 0x24
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7ff feed 	bl	800f680 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f8a6:	f002 fb75 	bl	8011f94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f8aa:	2301      	movs	r3, #1
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3710      	adds	r7, #16
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}
 800f8b4:	e000ed04 	.word	0xe000ed04

0800f8b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b08e      	sub	sp, #56	; 0x38
 800f8bc:	af02      	add	r7, sp, #8
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	607a      	str	r2, [r7, #4]
 800f8c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d10a      	bne.n	800f8e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d0:	f383 8811 	msr	BASEPRI, r3
 800f8d4:	f3bf 8f6f 	isb	sy
 800f8d8:	f3bf 8f4f 	dsb	sy
 800f8dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f8de:	bf00      	nop
 800f8e0:	e7fe      	b.n	800f8e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d10a      	bne.n	800f8fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ec:	f383 8811 	msr	BASEPRI, r3
 800f8f0:	f3bf 8f6f 	isb	sy
 800f8f4:	f3bf 8f4f 	dsb	sy
 800f8f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f8fa:	bf00      	nop
 800f8fc:	e7fe      	b.n	800f8fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d002      	beq.n	800f90a <xQueueGenericCreateStatic+0x52>
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d001      	beq.n	800f90e <xQueueGenericCreateStatic+0x56>
 800f90a:	2301      	movs	r3, #1
 800f90c:	e000      	b.n	800f910 <xQueueGenericCreateStatic+0x58>
 800f90e:	2300      	movs	r3, #0
 800f910:	2b00      	cmp	r3, #0
 800f912:	d10a      	bne.n	800f92a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f918:	f383 8811 	msr	BASEPRI, r3
 800f91c:	f3bf 8f6f 	isb	sy
 800f920:	f3bf 8f4f 	dsb	sy
 800f924:	623b      	str	r3, [r7, #32]
}
 800f926:	bf00      	nop
 800f928:	e7fe      	b.n	800f928 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d102      	bne.n	800f936 <xQueueGenericCreateStatic+0x7e>
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d101      	bne.n	800f93a <xQueueGenericCreateStatic+0x82>
 800f936:	2301      	movs	r3, #1
 800f938:	e000      	b.n	800f93c <xQueueGenericCreateStatic+0x84>
 800f93a:	2300      	movs	r3, #0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d10a      	bne.n	800f956 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f944:	f383 8811 	msr	BASEPRI, r3
 800f948:	f3bf 8f6f 	isb	sy
 800f94c:	f3bf 8f4f 	dsb	sy
 800f950:	61fb      	str	r3, [r7, #28]
}
 800f952:	bf00      	nop
 800f954:	e7fe      	b.n	800f954 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f956:	2350      	movs	r3, #80	; 0x50
 800f958:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	2b50      	cmp	r3, #80	; 0x50
 800f95e:	d00a      	beq.n	800f976 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f964:	f383 8811 	msr	BASEPRI, r3
 800f968:	f3bf 8f6f 	isb	sy
 800f96c:	f3bf 8f4f 	dsb	sy
 800f970:	61bb      	str	r3, [r7, #24]
}
 800f972:	bf00      	nop
 800f974:	e7fe      	b.n	800f974 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f976:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d00d      	beq.n	800f99e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f984:	2201      	movs	r2, #1
 800f986:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f98a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f990:	9300      	str	r3, [sp, #0]
 800f992:	4613      	mov	r3, r2
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	68b9      	ldr	r1, [r7, #8]
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f000 f83f 	bl	800fa1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3730      	adds	r7, #48	; 0x30
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b08a      	sub	sp, #40	; 0x28
 800f9ac:	af02      	add	r7, sp, #8
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d10a      	bne.n	800f9d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c0:	f383 8811 	msr	BASEPRI, r3
 800f9c4:	f3bf 8f6f 	isb	sy
 800f9c8:	f3bf 8f4f 	dsb	sy
 800f9cc:	613b      	str	r3, [r7, #16]
}
 800f9ce:	bf00      	nop
 800f9d0:	e7fe      	b.n	800f9d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	68ba      	ldr	r2, [r7, #8]
 800f9d6:	fb02 f303 	mul.w	r3, r2, r3
 800f9da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f9dc:	69fb      	ldr	r3, [r7, #28]
 800f9de:	3350      	adds	r3, #80	; 0x50
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f002 fbc9 	bl	8012178 <pvPortMalloc>
 800f9e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f9e8:	69bb      	ldr	r3, [r7, #24]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d011      	beq.n	800fa12 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f9ee:	69bb      	ldr	r3, [r7, #24]
 800f9f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	3350      	adds	r3, #80	; 0x50
 800f9f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fa00:	79fa      	ldrb	r2, [r7, #7]
 800fa02:	69bb      	ldr	r3, [r7, #24]
 800fa04:	9300      	str	r3, [sp, #0]
 800fa06:	4613      	mov	r3, r2
 800fa08:	697a      	ldr	r2, [r7, #20]
 800fa0a:	68b9      	ldr	r1, [r7, #8]
 800fa0c:	68f8      	ldr	r0, [r7, #12]
 800fa0e:	f000 f805 	bl	800fa1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fa12:	69bb      	ldr	r3, [r7, #24]
	}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3720      	adds	r7, #32
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	60b9      	str	r1, [r7, #8]
 800fa26:	607a      	str	r2, [r7, #4]
 800fa28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d103      	bne.n	800fa38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fa30:	69bb      	ldr	r3, [r7, #24]
 800fa32:	69ba      	ldr	r2, [r7, #24]
 800fa34:	601a      	str	r2, [r3, #0]
 800fa36:	e002      	b.n	800fa3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fa38:	69bb      	ldr	r3, [r7, #24]
 800fa3a:	687a      	ldr	r2, [r7, #4]
 800fa3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fa44:	69bb      	ldr	r3, [r7, #24]
 800fa46:	68ba      	ldr	r2, [r7, #8]
 800fa48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fa4a:	2101      	movs	r1, #1
 800fa4c:	69b8      	ldr	r0, [r7, #24]
 800fa4e:	f7ff fecb 	bl	800f7e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fa52:	69bb      	ldr	r3, [r7, #24]
 800fa54:	78fa      	ldrb	r2, [r7, #3]
 800fa56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fa5a:	bf00      	nop
 800fa5c:	3710      	adds	r7, #16
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}

0800fa62 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fa62:	b580      	push	{r7, lr}
 800fa64:	b08a      	sub	sp, #40	; 0x28
 800fa66:	af02      	add	r7, sp, #8
 800fa68:	60f8      	str	r0, [r7, #12]
 800fa6a:	60b9      	str	r1, [r7, #8]
 800fa6c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d10a      	bne.n	800fa8a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800fa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa78:	f383 8811 	msr	BASEPRI, r3
 800fa7c:	f3bf 8f6f 	isb	sy
 800fa80:	f3bf 8f4f 	dsb	sy
 800fa84:	61bb      	str	r3, [r7, #24]
}
 800fa86:	bf00      	nop
 800fa88:	e7fe      	b.n	800fa88 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fa8a:	68ba      	ldr	r2, [r7, #8]
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d90a      	bls.n	800faa8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800fa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa96:	f383 8811 	msr	BASEPRI, r3
 800fa9a:	f3bf 8f6f 	isb	sy
 800fa9e:	f3bf 8f4f 	dsb	sy
 800faa2:	617b      	str	r3, [r7, #20]
}
 800faa4:	bf00      	nop
 800faa6:	e7fe      	b.n	800faa6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800faa8:	2302      	movs	r3, #2
 800faaa:	9300      	str	r3, [sp, #0]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2200      	movs	r2, #0
 800fab0:	2100      	movs	r1, #0
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	f7ff ff00 	bl	800f8b8 <xQueueGenericCreateStatic>
 800fab8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800faba:	69fb      	ldr	r3, [r7, #28]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d002      	beq.n	800fac6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fac0:	69fb      	ldr	r3, [r7, #28]
 800fac2:	68ba      	ldr	r2, [r7, #8]
 800fac4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fac6:	69fb      	ldr	r3, [r7, #28]
	}
 800fac8:	4618      	mov	r0, r3
 800faca:	3720      	adds	r7, #32
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}

0800fad0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b086      	sub	sp, #24
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d10a      	bne.n	800faf6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800fae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae4:	f383 8811 	msr	BASEPRI, r3
 800fae8:	f3bf 8f6f 	isb	sy
 800faec:	f3bf 8f4f 	dsb	sy
 800faf0:	613b      	str	r3, [r7, #16]
}
 800faf2:	bf00      	nop
 800faf4:	e7fe      	b.n	800faf4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800faf6:	683a      	ldr	r2, [r7, #0]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d90a      	bls.n	800fb14 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800fafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb02:	f383 8811 	msr	BASEPRI, r3
 800fb06:	f3bf 8f6f 	isb	sy
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	60fb      	str	r3, [r7, #12]
}
 800fb10:	bf00      	nop
 800fb12:	e7fe      	b.n	800fb12 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fb14:	2202      	movs	r2, #2
 800fb16:	2100      	movs	r1, #0
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7ff ff45 	bl	800f9a8 <xQueueGenericCreate>
 800fb1e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d002      	beq.n	800fb2c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	683a      	ldr	r2, [r7, #0]
 800fb2a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fb2c:	697b      	ldr	r3, [r7, #20]
	}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3718      	adds	r7, #24
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
	...

0800fb38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b08e      	sub	sp, #56	; 0x38
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	607a      	str	r2, [r7, #4]
 800fb44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fb46:	2300      	movs	r3, #0
 800fb48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d10a      	bne.n	800fb6a <xQueueGenericSend+0x32>
	__asm volatile
 800fb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb58:	f383 8811 	msr	BASEPRI, r3
 800fb5c:	f3bf 8f6f 	isb	sy
 800fb60:	f3bf 8f4f 	dsb	sy
 800fb64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fb66:	bf00      	nop
 800fb68:	e7fe      	b.n	800fb68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d103      	bne.n	800fb78 <xQueueGenericSend+0x40>
 800fb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d101      	bne.n	800fb7c <xQueueGenericSend+0x44>
 800fb78:	2301      	movs	r3, #1
 800fb7a:	e000      	b.n	800fb7e <xQueueGenericSend+0x46>
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d10a      	bne.n	800fb98 <xQueueGenericSend+0x60>
	__asm volatile
 800fb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb86:	f383 8811 	msr	BASEPRI, r3
 800fb8a:	f3bf 8f6f 	isb	sy
 800fb8e:	f3bf 8f4f 	dsb	sy
 800fb92:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fb94:	bf00      	nop
 800fb96:	e7fe      	b.n	800fb96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	2b02      	cmp	r3, #2
 800fb9c:	d103      	bne.n	800fba6 <xQueueGenericSend+0x6e>
 800fb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d101      	bne.n	800fbaa <xQueueGenericSend+0x72>
 800fba6:	2301      	movs	r3, #1
 800fba8:	e000      	b.n	800fbac <xQueueGenericSend+0x74>
 800fbaa:	2300      	movs	r3, #0
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d10a      	bne.n	800fbc6 <xQueueGenericSend+0x8e>
	__asm volatile
 800fbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb4:	f383 8811 	msr	BASEPRI, r3
 800fbb8:	f3bf 8f6f 	isb	sy
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	623b      	str	r3, [r7, #32]
}
 800fbc2:	bf00      	nop
 800fbc4:	e7fe      	b.n	800fbc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fbc6:	f001 fb59 	bl	801127c <xTaskGetSchedulerState>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d102      	bne.n	800fbd6 <xQueueGenericSend+0x9e>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d101      	bne.n	800fbda <xQueueGenericSend+0xa2>
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	e000      	b.n	800fbdc <xQueueGenericSend+0xa4>
 800fbda:	2300      	movs	r3, #0
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d10a      	bne.n	800fbf6 <xQueueGenericSend+0xbe>
	__asm volatile
 800fbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe4:	f383 8811 	msr	BASEPRI, r3
 800fbe8:	f3bf 8f6f 	isb	sy
 800fbec:	f3bf 8f4f 	dsb	sy
 800fbf0:	61fb      	str	r3, [r7, #28]
}
 800fbf2:	bf00      	nop
 800fbf4:	e7fe      	b.n	800fbf4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fbf6:	f002 f99d 	bl	8011f34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d302      	bcc.n	800fc0c <xQueueGenericSend+0xd4>
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	2b02      	cmp	r3, #2
 800fc0a:	d129      	bne.n	800fc60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fc0c:	683a      	ldr	r2, [r7, #0]
 800fc0e:	68b9      	ldr	r1, [r7, #8]
 800fc10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc12:	f000 fb52 	bl	80102ba <prvCopyDataToQueue>
 800fc16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d010      	beq.n	800fc42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc22:	3324      	adds	r3, #36	; 0x24
 800fc24:	4618      	mov	r0, r3
 800fc26:	f001 f967 	bl	8010ef8 <xTaskRemoveFromEventList>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d013      	beq.n	800fc58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fc30:	4b3f      	ldr	r3, [pc, #252]	; (800fd30 <xQueueGenericSend+0x1f8>)
 800fc32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc36:	601a      	str	r2, [r3, #0]
 800fc38:	f3bf 8f4f 	dsb	sy
 800fc3c:	f3bf 8f6f 	isb	sy
 800fc40:	e00a      	b.n	800fc58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d007      	beq.n	800fc58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fc48:	4b39      	ldr	r3, [pc, #228]	; (800fd30 <xQueueGenericSend+0x1f8>)
 800fc4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc4e:	601a      	str	r2, [r3, #0]
 800fc50:	f3bf 8f4f 	dsb	sy
 800fc54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fc58:	f002 f99c 	bl	8011f94 <vPortExitCritical>
				return pdPASS;
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	e063      	b.n	800fd28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d103      	bne.n	800fc6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fc66:	f002 f995 	bl	8011f94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	e05c      	b.n	800fd28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d106      	bne.n	800fc82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fc74:	f107 0314 	add.w	r3, r7, #20
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f001 f9a1 	bl	8010fc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fc7e:	2301      	movs	r3, #1
 800fc80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fc82:	f002 f987 	bl	8011f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fc86:	f000 ff0d 	bl	8010aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fc8a:	f002 f953 	bl	8011f34 <vPortEnterCritical>
 800fc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc94:	b25b      	sxtb	r3, r3
 800fc96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc9a:	d103      	bne.n	800fca4 <xQueueGenericSend+0x16c>
 800fc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9e:	2200      	movs	r2, #0
 800fca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fcaa:	b25b      	sxtb	r3, r3
 800fcac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcb0:	d103      	bne.n	800fcba <xQueueGenericSend+0x182>
 800fcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fcba:	f002 f96b 	bl	8011f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fcbe:	1d3a      	adds	r2, r7, #4
 800fcc0:	f107 0314 	add.w	r3, r7, #20
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f001 f990 	bl	8010fec <xTaskCheckForTimeOut>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d124      	bne.n	800fd1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fcd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcd4:	f000 fbe9 	bl	80104aa <prvIsQueueFull>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d018      	beq.n	800fd10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce0:	3310      	adds	r3, #16
 800fce2:	687a      	ldr	r2, [r7, #4]
 800fce4:	4611      	mov	r1, r2
 800fce6:	4618      	mov	r0, r3
 800fce8:	f001 f8b6 	bl	8010e58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fcec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcee:	f000 fb74 	bl	80103da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fcf2:	f000 fee5 	bl	8010ac0 <xTaskResumeAll>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	f47f af7c 	bne.w	800fbf6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800fcfe:	4b0c      	ldr	r3, [pc, #48]	; (800fd30 <xQueueGenericSend+0x1f8>)
 800fd00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd04:	601a      	str	r2, [r3, #0]
 800fd06:	f3bf 8f4f 	dsb	sy
 800fd0a:	f3bf 8f6f 	isb	sy
 800fd0e:	e772      	b.n	800fbf6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fd10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd12:	f000 fb62 	bl	80103da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fd16:	f000 fed3 	bl	8010ac0 <xTaskResumeAll>
 800fd1a:	e76c      	b.n	800fbf6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fd1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd1e:	f000 fb5c 	bl	80103da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fd22:	f000 fecd 	bl	8010ac0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fd26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3738      	adds	r7, #56	; 0x38
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	e000ed04 	.word	0xe000ed04

0800fd34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b090      	sub	sp, #64	; 0x40
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	60f8      	str	r0, [r7, #12]
 800fd3c:	60b9      	str	r1, [r7, #8]
 800fd3e:	607a      	str	r2, [r7, #4]
 800fd40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800fd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d10a      	bne.n	800fd62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800fd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd50:	f383 8811 	msr	BASEPRI, r3
 800fd54:	f3bf 8f6f 	isb	sy
 800fd58:	f3bf 8f4f 	dsb	sy
 800fd5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fd5e:	bf00      	nop
 800fd60:	e7fe      	b.n	800fd60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d103      	bne.n	800fd70 <xQueueGenericSendFromISR+0x3c>
 800fd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d101      	bne.n	800fd74 <xQueueGenericSendFromISR+0x40>
 800fd70:	2301      	movs	r3, #1
 800fd72:	e000      	b.n	800fd76 <xQueueGenericSendFromISR+0x42>
 800fd74:	2300      	movs	r3, #0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d10a      	bne.n	800fd90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800fd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd7e:	f383 8811 	msr	BASEPRI, r3
 800fd82:	f3bf 8f6f 	isb	sy
 800fd86:	f3bf 8f4f 	dsb	sy
 800fd8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fd8c:	bf00      	nop
 800fd8e:	e7fe      	b.n	800fd8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	2b02      	cmp	r3, #2
 800fd94:	d103      	bne.n	800fd9e <xQueueGenericSendFromISR+0x6a>
 800fd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd9a:	2b01      	cmp	r3, #1
 800fd9c:	d101      	bne.n	800fda2 <xQueueGenericSendFromISR+0x6e>
 800fd9e:	2301      	movs	r3, #1
 800fda0:	e000      	b.n	800fda4 <xQueueGenericSendFromISR+0x70>
 800fda2:	2300      	movs	r3, #0
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d10a      	bne.n	800fdbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800fda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdac:	f383 8811 	msr	BASEPRI, r3
 800fdb0:	f3bf 8f6f 	isb	sy
 800fdb4:	f3bf 8f4f 	dsb	sy
 800fdb8:	623b      	str	r3, [r7, #32]
}
 800fdba:	bf00      	nop
 800fdbc:	e7fe      	b.n	800fdbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fdbe:	f002 f99b 	bl	80120f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fdc2:	f3ef 8211 	mrs	r2, BASEPRI
 800fdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdca:	f383 8811 	msr	BASEPRI, r3
 800fdce:	f3bf 8f6f 	isb	sy
 800fdd2:	f3bf 8f4f 	dsb	sy
 800fdd6:	61fa      	str	r2, [r7, #28]
 800fdd8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fdda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fddc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d302      	bcc.n	800fdf0 <xQueueGenericSendFromISR+0xbc>
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	2b02      	cmp	r3, #2
 800fdee:	d12f      	bne.n	800fe50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fdf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdfe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fe00:	683a      	ldr	r2, [r7, #0]
 800fe02:	68b9      	ldr	r1, [r7, #8]
 800fe04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe06:	f000 fa58 	bl	80102ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fe0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800fe0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe12:	d112      	bne.n	800fe3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d016      	beq.n	800fe4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1e:	3324      	adds	r3, #36	; 0x24
 800fe20:	4618      	mov	r0, r3
 800fe22:	f001 f869 	bl	8010ef8 <xTaskRemoveFromEventList>
 800fe26:	4603      	mov	r3, r0
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d00e      	beq.n	800fe4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d00b      	beq.n	800fe4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2201      	movs	r2, #1
 800fe36:	601a      	str	r2, [r3, #0]
 800fe38:	e007      	b.n	800fe4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fe3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fe3e:	3301      	adds	r3, #1
 800fe40:	b2db      	uxtb	r3, r3
 800fe42:	b25a      	sxtb	r2, r3
 800fe44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800fe4e:	e001      	b.n	800fe54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fe50:	2300      	movs	r3, #0
 800fe52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fe5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fe60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3740      	adds	r7, #64	; 0x40
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
	...

0800fe6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b08c      	sub	sp, #48	; 0x30
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	60f8      	str	r0, [r7, #12]
 800fe74:	60b9      	str	r1, [r7, #8]
 800fe76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fe80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d10a      	bne.n	800fe9c <xQueueReceive+0x30>
	__asm volatile
 800fe86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8a:	f383 8811 	msr	BASEPRI, r3
 800fe8e:	f3bf 8f6f 	isb	sy
 800fe92:	f3bf 8f4f 	dsb	sy
 800fe96:	623b      	str	r3, [r7, #32]
}
 800fe98:	bf00      	nop
 800fe9a:	e7fe      	b.n	800fe9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d103      	bne.n	800feaa <xQueueReceive+0x3e>
 800fea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d101      	bne.n	800feae <xQueueReceive+0x42>
 800feaa:	2301      	movs	r3, #1
 800feac:	e000      	b.n	800feb0 <xQueueReceive+0x44>
 800feae:	2300      	movs	r3, #0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d10a      	bne.n	800feca <xQueueReceive+0x5e>
	__asm volatile
 800feb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb8:	f383 8811 	msr	BASEPRI, r3
 800febc:	f3bf 8f6f 	isb	sy
 800fec0:	f3bf 8f4f 	dsb	sy
 800fec4:	61fb      	str	r3, [r7, #28]
}
 800fec6:	bf00      	nop
 800fec8:	e7fe      	b.n	800fec8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800feca:	f001 f9d7 	bl	801127c <xTaskGetSchedulerState>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d102      	bne.n	800feda <xQueueReceive+0x6e>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d101      	bne.n	800fede <xQueueReceive+0x72>
 800feda:	2301      	movs	r3, #1
 800fedc:	e000      	b.n	800fee0 <xQueueReceive+0x74>
 800fede:	2300      	movs	r3, #0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d10a      	bne.n	800fefa <xQueueReceive+0x8e>
	__asm volatile
 800fee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee8:	f383 8811 	msr	BASEPRI, r3
 800feec:	f3bf 8f6f 	isb	sy
 800fef0:	f3bf 8f4f 	dsb	sy
 800fef4:	61bb      	str	r3, [r7, #24]
}
 800fef6:	bf00      	nop
 800fef8:	e7fe      	b.n	800fef8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fefa:	f002 f81b 	bl	8011f34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d01f      	beq.n	800ff4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff0a:	68b9      	ldr	r1, [r7, #8]
 800ff0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff0e:	f000 fa3e 	bl	801038e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff14:	1e5a      	subs	r2, r3, #1
 800ff16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1c:	691b      	ldr	r3, [r3, #16]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d00f      	beq.n	800ff42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff24:	3310      	adds	r3, #16
 800ff26:	4618      	mov	r0, r3
 800ff28:	f000 ffe6 	bl	8010ef8 <xTaskRemoveFromEventList>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d007      	beq.n	800ff42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ff32:	4b3d      	ldr	r3, [pc, #244]	; (8010028 <xQueueReceive+0x1bc>)
 800ff34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff38:	601a      	str	r2, [r3, #0]
 800ff3a:	f3bf 8f4f 	dsb	sy
 800ff3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ff42:	f002 f827 	bl	8011f94 <vPortExitCritical>
				return pdPASS;
 800ff46:	2301      	movs	r3, #1
 800ff48:	e069      	b.n	801001e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d103      	bne.n	800ff58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ff50:	f002 f820 	bl	8011f94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ff54:	2300      	movs	r3, #0
 800ff56:	e062      	b.n	801001e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ff58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d106      	bne.n	800ff6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff5e:	f107 0310 	add.w	r3, r7, #16
 800ff62:	4618      	mov	r0, r3
 800ff64:	f001 f82c 	bl	8010fc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff6c:	f002 f812 	bl	8011f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff70:	f000 fd98 	bl	8010aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff74:	f001 ffde 	bl	8011f34 <vPortEnterCritical>
 800ff78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff7e:	b25b      	sxtb	r3, r3
 800ff80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff84:	d103      	bne.n	800ff8e <xQueueReceive+0x122>
 800ff86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff88:	2200      	movs	r2, #0
 800ff8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff94:	b25b      	sxtb	r3, r3
 800ff96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff9a:	d103      	bne.n	800ffa4 <xQueueReceive+0x138>
 800ff9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ffa4:	f001 fff6 	bl	8011f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ffa8:	1d3a      	adds	r2, r7, #4
 800ffaa:	f107 0310 	add.w	r3, r7, #16
 800ffae:	4611      	mov	r1, r2
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f001 f81b 	bl	8010fec <xTaskCheckForTimeOut>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d123      	bne.n	8010004 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffbe:	f000 fa5e 	bl	801047e <prvIsQueueEmpty>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d017      	beq.n	800fff8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ffc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffca:	3324      	adds	r3, #36	; 0x24
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	4611      	mov	r1, r2
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f000 ff41 	bl	8010e58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ffd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffd8:	f000 f9ff 	bl	80103da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ffdc:	f000 fd70 	bl	8010ac0 <xTaskResumeAll>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d189      	bne.n	800fefa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ffe6:	4b10      	ldr	r3, [pc, #64]	; (8010028 <xQueueReceive+0x1bc>)
 800ffe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffec:	601a      	str	r2, [r3, #0]
 800ffee:	f3bf 8f4f 	dsb	sy
 800fff2:	f3bf 8f6f 	isb	sy
 800fff6:	e780      	b.n	800fefa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fffa:	f000 f9ee 	bl	80103da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fffe:	f000 fd5f 	bl	8010ac0 <xTaskResumeAll>
 8010002:	e77a      	b.n	800fefa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010006:	f000 f9e8 	bl	80103da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801000a:	f000 fd59 	bl	8010ac0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801000e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010010:	f000 fa35 	bl	801047e <prvIsQueueEmpty>
 8010014:	4603      	mov	r3, r0
 8010016:	2b00      	cmp	r3, #0
 8010018:	f43f af6f 	beq.w	800fefa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801001c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801001e:	4618      	mov	r0, r3
 8010020:	3730      	adds	r7, #48	; 0x30
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	e000ed04 	.word	0xe000ed04

0801002c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b08e      	sub	sp, #56	; 0x38
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010036:	2300      	movs	r3, #0
 8010038:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801003e:	2300      	movs	r3, #0
 8010040:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010044:	2b00      	cmp	r3, #0
 8010046:	d10a      	bne.n	801005e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801004c:	f383 8811 	msr	BASEPRI, r3
 8010050:	f3bf 8f6f 	isb	sy
 8010054:	f3bf 8f4f 	dsb	sy
 8010058:	623b      	str	r3, [r7, #32]
}
 801005a:	bf00      	nop
 801005c:	e7fe      	b.n	801005c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801005e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010062:	2b00      	cmp	r3, #0
 8010064:	d00a      	beq.n	801007c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801006a:	f383 8811 	msr	BASEPRI, r3
 801006e:	f3bf 8f6f 	isb	sy
 8010072:	f3bf 8f4f 	dsb	sy
 8010076:	61fb      	str	r3, [r7, #28]
}
 8010078:	bf00      	nop
 801007a:	e7fe      	b.n	801007a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801007c:	f001 f8fe 	bl	801127c <xTaskGetSchedulerState>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d102      	bne.n	801008c <xQueueSemaphoreTake+0x60>
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d101      	bne.n	8010090 <xQueueSemaphoreTake+0x64>
 801008c:	2301      	movs	r3, #1
 801008e:	e000      	b.n	8010092 <xQueueSemaphoreTake+0x66>
 8010090:	2300      	movs	r3, #0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d10a      	bne.n	80100ac <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801009a:	f383 8811 	msr	BASEPRI, r3
 801009e:	f3bf 8f6f 	isb	sy
 80100a2:	f3bf 8f4f 	dsb	sy
 80100a6:	61bb      	str	r3, [r7, #24]
}
 80100a8:	bf00      	nop
 80100aa:	e7fe      	b.n	80100aa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80100ac:	f001 ff42 	bl	8011f34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80100b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100b4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80100b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d024      	beq.n	8010106 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80100bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100be:	1e5a      	subs	r2, r3, #1
 80100c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80100c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d104      	bne.n	80100d6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80100cc:	f001 fa4c 	bl	8011568 <pvTaskIncrementMutexHeldCount>
 80100d0:	4602      	mov	r2, r0
 80100d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d8:	691b      	ldr	r3, [r3, #16]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d00f      	beq.n	80100fe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e0:	3310      	adds	r3, #16
 80100e2:	4618      	mov	r0, r3
 80100e4:	f000 ff08 	bl	8010ef8 <xTaskRemoveFromEventList>
 80100e8:	4603      	mov	r3, r0
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d007      	beq.n	80100fe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80100ee:	4b54      	ldr	r3, [pc, #336]	; (8010240 <xQueueSemaphoreTake+0x214>)
 80100f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100f4:	601a      	str	r2, [r3, #0]
 80100f6:	f3bf 8f4f 	dsb	sy
 80100fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80100fe:	f001 ff49 	bl	8011f94 <vPortExitCritical>
				return pdPASS;
 8010102:	2301      	movs	r3, #1
 8010104:	e097      	b.n	8010236 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d111      	bne.n	8010130 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801010c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801010e:	2b00      	cmp	r3, #0
 8010110:	d00a      	beq.n	8010128 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010116:	f383 8811 	msr	BASEPRI, r3
 801011a:	f3bf 8f6f 	isb	sy
 801011e:	f3bf 8f4f 	dsb	sy
 8010122:	617b      	str	r3, [r7, #20]
}
 8010124:	bf00      	nop
 8010126:	e7fe      	b.n	8010126 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010128:	f001 ff34 	bl	8011f94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801012c:	2300      	movs	r3, #0
 801012e:	e082      	b.n	8010236 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010132:	2b00      	cmp	r3, #0
 8010134:	d106      	bne.n	8010144 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010136:	f107 030c 	add.w	r3, r7, #12
 801013a:	4618      	mov	r0, r3
 801013c:	f000 ff40 	bl	8010fc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010140:	2301      	movs	r3, #1
 8010142:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010144:	f001 ff26 	bl	8011f94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010148:	f000 fcac 	bl	8010aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801014c:	f001 fef2 	bl	8011f34 <vPortEnterCritical>
 8010150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010156:	b25b      	sxtb	r3, r3
 8010158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801015c:	d103      	bne.n	8010166 <xQueueSemaphoreTake+0x13a>
 801015e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010160:	2200      	movs	r2, #0
 8010162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801016c:	b25b      	sxtb	r3, r3
 801016e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010172:	d103      	bne.n	801017c <xQueueSemaphoreTake+0x150>
 8010174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010176:	2200      	movs	r2, #0
 8010178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801017c:	f001 ff0a 	bl	8011f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010180:	463a      	mov	r2, r7
 8010182:	f107 030c 	add.w	r3, r7, #12
 8010186:	4611      	mov	r1, r2
 8010188:	4618      	mov	r0, r3
 801018a:	f000 ff2f 	bl	8010fec <xTaskCheckForTimeOut>
 801018e:	4603      	mov	r3, r0
 8010190:	2b00      	cmp	r3, #0
 8010192:	d132      	bne.n	80101fa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010194:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010196:	f000 f972 	bl	801047e <prvIsQueueEmpty>
 801019a:	4603      	mov	r3, r0
 801019c:	2b00      	cmp	r3, #0
 801019e:	d026      	beq.n	80101ee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80101a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d109      	bne.n	80101bc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80101a8:	f001 fec4 	bl	8011f34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80101ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ae:	689b      	ldr	r3, [r3, #8]
 80101b0:	4618      	mov	r0, r3
 80101b2:	f001 f881 	bl	80112b8 <xTaskPriorityInherit>
 80101b6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80101b8:	f001 feec 	bl	8011f94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80101bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101be:	3324      	adds	r3, #36	; 0x24
 80101c0:	683a      	ldr	r2, [r7, #0]
 80101c2:	4611      	mov	r1, r2
 80101c4:	4618      	mov	r0, r3
 80101c6:	f000 fe47 	bl	8010e58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80101ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101cc:	f000 f905 	bl	80103da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80101d0:	f000 fc76 	bl	8010ac0 <xTaskResumeAll>
 80101d4:	4603      	mov	r3, r0
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	f47f af68 	bne.w	80100ac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80101dc:	4b18      	ldr	r3, [pc, #96]	; (8010240 <xQueueSemaphoreTake+0x214>)
 80101de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101e2:	601a      	str	r2, [r3, #0]
 80101e4:	f3bf 8f4f 	dsb	sy
 80101e8:	f3bf 8f6f 	isb	sy
 80101ec:	e75e      	b.n	80100ac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80101ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101f0:	f000 f8f3 	bl	80103da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80101f4:	f000 fc64 	bl	8010ac0 <xTaskResumeAll>
 80101f8:	e758      	b.n	80100ac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80101fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101fc:	f000 f8ed 	bl	80103da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010200:	f000 fc5e 	bl	8010ac0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010206:	f000 f93a 	bl	801047e <prvIsQueueEmpty>
 801020a:	4603      	mov	r3, r0
 801020c:	2b00      	cmp	r3, #0
 801020e:	f43f af4d 	beq.w	80100ac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010214:	2b00      	cmp	r3, #0
 8010216:	d00d      	beq.n	8010234 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010218:	f001 fe8c 	bl	8011f34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801021c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801021e:	f000 f834 	bl	801028a <prvGetDisinheritPriorityAfterTimeout>
 8010222:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010226:	689b      	ldr	r3, [r3, #8]
 8010228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801022a:	4618      	mov	r0, r3
 801022c:	f001 f91a 	bl	8011464 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010230:	f001 feb0 	bl	8011f94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010234:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010236:	4618      	mov	r0, r3
 8010238:	3738      	adds	r7, #56	; 0x38
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
 801023e:	bf00      	nop
 8010240:	e000ed04 	.word	0xe000ed04

08010244 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b084      	sub	sp, #16
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d10a      	bne.n	801026c <vQueueDelete+0x28>
	__asm volatile
 8010256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801025a:	f383 8811 	msr	BASEPRI, r3
 801025e:	f3bf 8f6f 	isb	sy
 8010262:	f3bf 8f4f 	dsb	sy
 8010266:	60bb      	str	r3, [r7, #8]
}
 8010268:	bf00      	nop
 801026a:	e7fe      	b.n	801026a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801026c:	68f8      	ldr	r0, [r7, #12]
 801026e:	f000 f95f 	bl	8010530 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010278:	2b00      	cmp	r3, #0
 801027a:	d102      	bne.n	8010282 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 801027c:	68f8      	ldr	r0, [r7, #12]
 801027e:	f002 f847 	bl	8012310 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010282:	bf00      	nop
 8010284:	3710      	adds	r7, #16
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}

0801028a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801028a:	b480      	push	{r7}
 801028c:	b085      	sub	sp, #20
 801028e:	af00      	add	r7, sp, #0
 8010290:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010296:	2b00      	cmp	r3, #0
 8010298:	d006      	beq.n	80102a8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80102a4:	60fb      	str	r3, [r7, #12]
 80102a6:	e001      	b.n	80102ac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80102a8:	2300      	movs	r3, #0
 80102aa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80102ac:	68fb      	ldr	r3, [r7, #12]
	}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3714      	adds	r7, #20
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr

080102ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80102ba:	b580      	push	{r7, lr}
 80102bc:	b086      	sub	sp, #24
 80102be:	af00      	add	r7, sp, #0
 80102c0:	60f8      	str	r0, [r7, #12]
 80102c2:	60b9      	str	r1, [r7, #8]
 80102c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80102c6:	2300      	movs	r3, #0
 80102c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d10d      	bne.n	80102f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d14d      	bne.n	801037c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	4618      	mov	r0, r3
 80102e6:	f001 f84f 	bl	8011388 <xTaskPriorityDisinherit>
 80102ea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2200      	movs	r2, #0
 80102f0:	609a      	str	r2, [r3, #8]
 80102f2:	e043      	b.n	801037c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d119      	bne.n	801032e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	6858      	ldr	r0, [r3, #4]
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010302:	461a      	mov	r2, r3
 8010304:	68b9      	ldr	r1, [r7, #8]
 8010306:	f002 ff46 	bl	8013196 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	685a      	ldr	r2, [r3, #4]
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010312:	441a      	add	r2, r3
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	685a      	ldr	r2, [r3, #4]
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	689b      	ldr	r3, [r3, #8]
 8010320:	429a      	cmp	r2, r3
 8010322:	d32b      	bcc.n	801037c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	605a      	str	r2, [r3, #4]
 801032c:	e026      	b.n	801037c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	68d8      	ldr	r0, [r3, #12]
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010336:	461a      	mov	r2, r3
 8010338:	68b9      	ldr	r1, [r7, #8]
 801033a:	f002 ff2c 	bl	8013196 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	68da      	ldr	r2, [r3, #12]
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010346:	425b      	negs	r3, r3
 8010348:	441a      	add	r2, r3
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	68da      	ldr	r2, [r3, #12]
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	429a      	cmp	r2, r3
 8010358:	d207      	bcs.n	801036a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	689a      	ldr	r2, [r3, #8]
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010362:	425b      	negs	r3, r3
 8010364:	441a      	add	r2, r3
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2b02      	cmp	r3, #2
 801036e:	d105      	bne.n	801037c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d002      	beq.n	801037c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	3b01      	subs	r3, #1
 801037a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	1c5a      	adds	r2, r3, #1
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010384:	697b      	ldr	r3, [r7, #20]
}
 8010386:	4618      	mov	r0, r3
 8010388:	3718      	adds	r7, #24
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}

0801038e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801038e:	b580      	push	{r7, lr}
 8010390:	b082      	sub	sp, #8
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
 8010396:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801039c:	2b00      	cmp	r3, #0
 801039e:	d018      	beq.n	80103d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	68da      	ldr	r2, [r3, #12]
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103a8:	441a      	add	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	68da      	ldr	r2, [r3, #12]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	689b      	ldr	r3, [r3, #8]
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d303      	bcc.n	80103c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681a      	ldr	r2, [r3, #0]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	68d9      	ldr	r1, [r3, #12]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103ca:	461a      	mov	r2, r3
 80103cc:	6838      	ldr	r0, [r7, #0]
 80103ce:	f002 fee2 	bl	8013196 <memcpy>
	}
}
 80103d2:	bf00      	nop
 80103d4:	3708      	adds	r7, #8
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80103da:	b580      	push	{r7, lr}
 80103dc:	b084      	sub	sp, #16
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80103e2:	f001 fda7 	bl	8011f34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80103ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80103ee:	e011      	b.n	8010414 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d012      	beq.n	801041e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	3324      	adds	r3, #36	; 0x24
 80103fc:	4618      	mov	r0, r3
 80103fe:	f000 fd7b 	bl	8010ef8 <xTaskRemoveFromEventList>
 8010402:	4603      	mov	r3, r0
 8010404:	2b00      	cmp	r3, #0
 8010406:	d001      	beq.n	801040c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010408:	f000 fe52 	bl	80110b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801040c:	7bfb      	ldrb	r3, [r7, #15]
 801040e:	3b01      	subs	r3, #1
 8010410:	b2db      	uxtb	r3, r3
 8010412:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010418:	2b00      	cmp	r3, #0
 801041a:	dce9      	bgt.n	80103f0 <prvUnlockQueue+0x16>
 801041c:	e000      	b.n	8010420 <prvUnlockQueue+0x46>
					break;
 801041e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	22ff      	movs	r2, #255	; 0xff
 8010424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010428:	f001 fdb4 	bl	8011f94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801042c:	f001 fd82 	bl	8011f34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010436:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010438:	e011      	b.n	801045e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	691b      	ldr	r3, [r3, #16]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d012      	beq.n	8010468 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	3310      	adds	r3, #16
 8010446:	4618      	mov	r0, r3
 8010448:	f000 fd56 	bl	8010ef8 <xTaskRemoveFromEventList>
 801044c:	4603      	mov	r3, r0
 801044e:	2b00      	cmp	r3, #0
 8010450:	d001      	beq.n	8010456 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010452:	f000 fe2d 	bl	80110b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010456:	7bbb      	ldrb	r3, [r7, #14]
 8010458:	3b01      	subs	r3, #1
 801045a:	b2db      	uxtb	r3, r3
 801045c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801045e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010462:	2b00      	cmp	r3, #0
 8010464:	dce9      	bgt.n	801043a <prvUnlockQueue+0x60>
 8010466:	e000      	b.n	801046a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010468:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	22ff      	movs	r2, #255	; 0xff
 801046e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010472:	f001 fd8f 	bl	8011f94 <vPortExitCritical>
}
 8010476:	bf00      	nop
 8010478:	3710      	adds	r7, #16
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}

0801047e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801047e:	b580      	push	{r7, lr}
 8010480:	b084      	sub	sp, #16
 8010482:	af00      	add	r7, sp, #0
 8010484:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010486:	f001 fd55 	bl	8011f34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801048e:	2b00      	cmp	r3, #0
 8010490:	d102      	bne.n	8010498 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010492:	2301      	movs	r3, #1
 8010494:	60fb      	str	r3, [r7, #12]
 8010496:	e001      	b.n	801049c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010498:	2300      	movs	r3, #0
 801049a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801049c:	f001 fd7a 	bl	8011f94 <vPortExitCritical>

	return xReturn;
 80104a0:	68fb      	ldr	r3, [r7, #12]
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3710      	adds	r7, #16
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}

080104aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80104aa:	b580      	push	{r7, lr}
 80104ac:	b084      	sub	sp, #16
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80104b2:	f001 fd3f 	bl	8011f34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104be:	429a      	cmp	r2, r3
 80104c0:	d102      	bne.n	80104c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80104c2:	2301      	movs	r3, #1
 80104c4:	60fb      	str	r3, [r7, #12]
 80104c6:	e001      	b.n	80104cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80104c8:	2300      	movs	r3, #0
 80104ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80104cc:	f001 fd62 	bl	8011f94 <vPortExitCritical>

	return xReturn;
 80104d0:	68fb      	ldr	r3, [r7, #12]
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3710      	adds	r7, #16
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
	...

080104dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80104dc:	b480      	push	{r7}
 80104de:	b085      	sub	sp, #20
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80104e6:	2300      	movs	r3, #0
 80104e8:	60fb      	str	r3, [r7, #12]
 80104ea:	e014      	b.n	8010516 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80104ec:	4a0f      	ldr	r2, [pc, #60]	; (801052c <vQueueAddToRegistry+0x50>)
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d10b      	bne.n	8010510 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80104f8:	490c      	ldr	r1, [pc, #48]	; (801052c <vQueueAddToRegistry+0x50>)
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	683a      	ldr	r2, [r7, #0]
 80104fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010502:	4a0a      	ldr	r2, [pc, #40]	; (801052c <vQueueAddToRegistry+0x50>)
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	00db      	lsls	r3, r3, #3
 8010508:	4413      	add	r3, r2
 801050a:	687a      	ldr	r2, [r7, #4]
 801050c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801050e:	e006      	b.n	801051e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	3301      	adds	r3, #1
 8010514:	60fb      	str	r3, [r7, #12]
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	2b07      	cmp	r3, #7
 801051a:	d9e7      	bls.n	80104ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801051c:	bf00      	nop
 801051e:	bf00      	nop
 8010520:	3714      	adds	r7, #20
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr
 801052a:	bf00      	nop
 801052c:	2000b208 	.word	0x2000b208

08010530 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010530:	b480      	push	{r7}
 8010532:	b085      	sub	sp, #20
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010538:	2300      	movs	r3, #0
 801053a:	60fb      	str	r3, [r7, #12]
 801053c:	e016      	b.n	801056c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801053e:	4a10      	ldr	r2, [pc, #64]	; (8010580 <vQueueUnregisterQueue+0x50>)
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	00db      	lsls	r3, r3, #3
 8010544:	4413      	add	r3, r2
 8010546:	685b      	ldr	r3, [r3, #4]
 8010548:	687a      	ldr	r2, [r7, #4]
 801054a:	429a      	cmp	r2, r3
 801054c:	d10b      	bne.n	8010566 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801054e:	4a0c      	ldr	r2, [pc, #48]	; (8010580 <vQueueUnregisterQueue+0x50>)
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2100      	movs	r1, #0
 8010554:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010558:	4a09      	ldr	r2, [pc, #36]	; (8010580 <vQueueUnregisterQueue+0x50>)
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	00db      	lsls	r3, r3, #3
 801055e:	4413      	add	r3, r2
 8010560:	2200      	movs	r2, #0
 8010562:	605a      	str	r2, [r3, #4]
				break;
 8010564:	e006      	b.n	8010574 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	3301      	adds	r3, #1
 801056a:	60fb      	str	r3, [r7, #12]
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2b07      	cmp	r3, #7
 8010570:	d9e5      	bls.n	801053e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010572:	bf00      	nop
 8010574:	bf00      	nop
 8010576:	3714      	adds	r7, #20
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr
 8010580:	2000b208 	.word	0x2000b208

08010584 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010584:	b580      	push	{r7, lr}
 8010586:	b086      	sub	sp, #24
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010594:	f001 fcce 	bl	8011f34 <vPortEnterCritical>
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801059e:	b25b      	sxtb	r3, r3
 80105a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105a4:	d103      	bne.n	80105ae <vQueueWaitForMessageRestricted+0x2a>
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	2200      	movs	r2, #0
 80105aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80105b4:	b25b      	sxtb	r3, r3
 80105b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105ba:	d103      	bne.n	80105c4 <vQueueWaitForMessageRestricted+0x40>
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	2200      	movs	r2, #0
 80105c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80105c4:	f001 fce6 	bl	8011f94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d106      	bne.n	80105de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	3324      	adds	r3, #36	; 0x24
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	68b9      	ldr	r1, [r7, #8]
 80105d8:	4618      	mov	r0, r3
 80105da:	f000 fc61 	bl	8010ea0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80105de:	6978      	ldr	r0, [r7, #20]
 80105e0:	f7ff fefb 	bl	80103da <prvUnlockQueue>
	}
 80105e4:	bf00      	nop
 80105e6:	3718      	adds	r7, #24
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b08e      	sub	sp, #56	; 0x38
 80105f0:	af04      	add	r7, sp, #16
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	607a      	str	r2, [r7, #4]
 80105f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80105fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d10a      	bne.n	8010616 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010604:	f383 8811 	msr	BASEPRI, r3
 8010608:	f3bf 8f6f 	isb	sy
 801060c:	f3bf 8f4f 	dsb	sy
 8010610:	623b      	str	r3, [r7, #32]
}
 8010612:	bf00      	nop
 8010614:	e7fe      	b.n	8010614 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010618:	2b00      	cmp	r3, #0
 801061a:	d10a      	bne.n	8010632 <xTaskCreateStatic+0x46>
	__asm volatile
 801061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010620:	f383 8811 	msr	BASEPRI, r3
 8010624:	f3bf 8f6f 	isb	sy
 8010628:	f3bf 8f4f 	dsb	sy
 801062c:	61fb      	str	r3, [r7, #28]
}
 801062e:	bf00      	nop
 8010630:	e7fe      	b.n	8010630 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010632:	23bc      	movs	r3, #188	; 0xbc
 8010634:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	2bbc      	cmp	r3, #188	; 0xbc
 801063a:	d00a      	beq.n	8010652 <xTaskCreateStatic+0x66>
	__asm volatile
 801063c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010640:	f383 8811 	msr	BASEPRI, r3
 8010644:	f3bf 8f6f 	isb	sy
 8010648:	f3bf 8f4f 	dsb	sy
 801064c:	61bb      	str	r3, [r7, #24]
}
 801064e:	bf00      	nop
 8010650:	e7fe      	b.n	8010650 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010652:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010656:	2b00      	cmp	r3, #0
 8010658:	d01e      	beq.n	8010698 <xTaskCreateStatic+0xac>
 801065a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801065c:	2b00      	cmp	r3, #0
 801065e:	d01b      	beq.n	8010698 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010662:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010668:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066c:	2202      	movs	r2, #2
 801066e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010672:	2300      	movs	r3, #0
 8010674:	9303      	str	r3, [sp, #12]
 8010676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010678:	9302      	str	r3, [sp, #8]
 801067a:	f107 0314 	add.w	r3, r7, #20
 801067e:	9301      	str	r3, [sp, #4]
 8010680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010682:	9300      	str	r3, [sp, #0]
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	687a      	ldr	r2, [r7, #4]
 8010688:	68b9      	ldr	r1, [r7, #8]
 801068a:	68f8      	ldr	r0, [r7, #12]
 801068c:	f000 f850 	bl	8010730 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010690:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010692:	f000 f8f3 	bl	801087c <prvAddNewTaskToReadyList>
 8010696:	e001      	b.n	801069c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010698:	2300      	movs	r3, #0
 801069a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801069c:	697b      	ldr	r3, [r7, #20]
	}
 801069e:	4618      	mov	r0, r3
 80106a0:	3728      	adds	r7, #40	; 0x28
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}

080106a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80106a6:	b580      	push	{r7, lr}
 80106a8:	b08c      	sub	sp, #48	; 0x30
 80106aa:	af04      	add	r7, sp, #16
 80106ac:	60f8      	str	r0, [r7, #12]
 80106ae:	60b9      	str	r1, [r7, #8]
 80106b0:	603b      	str	r3, [r7, #0]
 80106b2:	4613      	mov	r3, r2
 80106b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80106b6:	88fb      	ldrh	r3, [r7, #6]
 80106b8:	009b      	lsls	r3, r3, #2
 80106ba:	4618      	mov	r0, r3
 80106bc:	f001 fd5c 	bl	8012178 <pvPortMalloc>
 80106c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d00e      	beq.n	80106e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80106c8:	20bc      	movs	r0, #188	; 0xbc
 80106ca:	f001 fd55 	bl	8012178 <pvPortMalloc>
 80106ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80106d0:	69fb      	ldr	r3, [r7, #28]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d003      	beq.n	80106de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	697a      	ldr	r2, [r7, #20]
 80106da:	631a      	str	r2, [r3, #48]	; 0x30
 80106dc:	e005      	b.n	80106ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80106de:	6978      	ldr	r0, [r7, #20]
 80106e0:	f001 fe16 	bl	8012310 <vPortFree>
 80106e4:	e001      	b.n	80106ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80106e6:	2300      	movs	r3, #0
 80106e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d017      	beq.n	8010720 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80106f0:	69fb      	ldr	r3, [r7, #28]
 80106f2:	2200      	movs	r2, #0
 80106f4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80106f8:	88fa      	ldrh	r2, [r7, #6]
 80106fa:	2300      	movs	r3, #0
 80106fc:	9303      	str	r3, [sp, #12]
 80106fe:	69fb      	ldr	r3, [r7, #28]
 8010700:	9302      	str	r3, [sp, #8]
 8010702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010704:	9301      	str	r3, [sp, #4]
 8010706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010708:	9300      	str	r3, [sp, #0]
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	68b9      	ldr	r1, [r7, #8]
 801070e:	68f8      	ldr	r0, [r7, #12]
 8010710:	f000 f80e 	bl	8010730 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010714:	69f8      	ldr	r0, [r7, #28]
 8010716:	f000 f8b1 	bl	801087c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801071a:	2301      	movs	r3, #1
 801071c:	61bb      	str	r3, [r7, #24]
 801071e:	e002      	b.n	8010726 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010724:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010726:	69bb      	ldr	r3, [r7, #24]
	}
 8010728:	4618      	mov	r0, r3
 801072a:	3720      	adds	r7, #32
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b088      	sub	sp, #32
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	607a      	str	r2, [r7, #4]
 801073c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801073e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010740:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	009b      	lsls	r3, r3, #2
 8010746:	461a      	mov	r2, r3
 8010748:	21a5      	movs	r1, #165	; 0xa5
 801074a:	f002 fd32 	bl	80131b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801074e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010758:	3b01      	subs	r3, #1
 801075a:	009b      	lsls	r3, r3, #2
 801075c:	4413      	add	r3, r2
 801075e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010760:	69bb      	ldr	r3, [r7, #24]
 8010762:	f023 0307 	bic.w	r3, r3, #7
 8010766:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010768:	69bb      	ldr	r3, [r7, #24]
 801076a:	f003 0307 	and.w	r3, r3, #7
 801076e:	2b00      	cmp	r3, #0
 8010770:	d00a      	beq.n	8010788 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010776:	f383 8811 	msr	BASEPRI, r3
 801077a:	f3bf 8f6f 	isb	sy
 801077e:	f3bf 8f4f 	dsb	sy
 8010782:	617b      	str	r3, [r7, #20]
}
 8010784:	bf00      	nop
 8010786:	e7fe      	b.n	8010786 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d01f      	beq.n	80107ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801078e:	2300      	movs	r3, #0
 8010790:	61fb      	str	r3, [r7, #28]
 8010792:	e012      	b.n	80107ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010794:	68ba      	ldr	r2, [r7, #8]
 8010796:	69fb      	ldr	r3, [r7, #28]
 8010798:	4413      	add	r3, r2
 801079a:	7819      	ldrb	r1, [r3, #0]
 801079c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801079e:	69fb      	ldr	r3, [r7, #28]
 80107a0:	4413      	add	r3, r2
 80107a2:	3334      	adds	r3, #52	; 0x34
 80107a4:	460a      	mov	r2, r1
 80107a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80107a8:	68ba      	ldr	r2, [r7, #8]
 80107aa:	69fb      	ldr	r3, [r7, #28]
 80107ac:	4413      	add	r3, r2
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d006      	beq.n	80107c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	3301      	adds	r3, #1
 80107b8:	61fb      	str	r3, [r7, #28]
 80107ba:	69fb      	ldr	r3, [r7, #28]
 80107bc:	2b0f      	cmp	r3, #15
 80107be:	d9e9      	bls.n	8010794 <prvInitialiseNewTask+0x64>
 80107c0:	e000      	b.n	80107c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80107c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80107c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c6:	2200      	movs	r2, #0
 80107c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80107cc:	e003      	b.n	80107d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80107ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d0:	2200      	movs	r2, #0
 80107d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80107d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d8:	2b37      	cmp	r3, #55	; 0x37
 80107da:	d901      	bls.n	80107e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80107dc:	2337      	movs	r3, #55	; 0x37
 80107de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80107e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80107e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80107ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ee:	2200      	movs	r2, #0
 80107f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80107f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f4:	3304      	adds	r3, #4
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7fe ff62 	bl	800f6c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80107fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107fe:	3318      	adds	r3, #24
 8010800:	4618      	mov	r0, r3
 8010802:	f7fe ff5d 	bl	800f6c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801080a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801080c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801080e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010814:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801081a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801081c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801081e:	2200      	movs	r2, #0
 8010820:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010826:	2200      	movs	r2, #0
 8010828:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801082c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801082e:	3354      	adds	r3, #84	; 0x54
 8010830:	2260      	movs	r2, #96	; 0x60
 8010832:	2100      	movs	r1, #0
 8010834:	4618      	mov	r0, r3
 8010836:	f002 fcbc 	bl	80131b2 <memset>
 801083a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801083c:	4a0c      	ldr	r2, [pc, #48]	; (8010870 <prvInitialiseNewTask+0x140>)
 801083e:	659a      	str	r2, [r3, #88]	; 0x58
 8010840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010842:	4a0c      	ldr	r2, [pc, #48]	; (8010874 <prvInitialiseNewTask+0x144>)
 8010844:	65da      	str	r2, [r3, #92]	; 0x5c
 8010846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010848:	4a0b      	ldr	r2, [pc, #44]	; (8010878 <prvInitialiseNewTask+0x148>)
 801084a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801084c:	683a      	ldr	r2, [r7, #0]
 801084e:	68f9      	ldr	r1, [r7, #12]
 8010850:	69b8      	ldr	r0, [r7, #24]
 8010852:	f001 fa3f 	bl	8011cd4 <pxPortInitialiseStack>
 8010856:	4602      	mov	r2, r0
 8010858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801085c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801085e:	2b00      	cmp	r3, #0
 8010860:	d002      	beq.n	8010868 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010866:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010868:	bf00      	nop
 801086a:	3720      	adds	r7, #32
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}
 8010870:	08018768 	.word	0x08018768
 8010874:	08018788 	.word	0x08018788
 8010878:	08018748 	.word	0x08018748

0801087c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010884:	f001 fb56 	bl	8011f34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010888:	4b2d      	ldr	r3, [pc, #180]	; (8010940 <prvAddNewTaskToReadyList+0xc4>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	3301      	adds	r3, #1
 801088e:	4a2c      	ldr	r2, [pc, #176]	; (8010940 <prvAddNewTaskToReadyList+0xc4>)
 8010890:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010892:	4b2c      	ldr	r3, [pc, #176]	; (8010944 <prvAddNewTaskToReadyList+0xc8>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d109      	bne.n	80108ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801089a:	4a2a      	ldr	r2, [pc, #168]	; (8010944 <prvAddNewTaskToReadyList+0xc8>)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80108a0:	4b27      	ldr	r3, [pc, #156]	; (8010940 <prvAddNewTaskToReadyList+0xc4>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	2b01      	cmp	r3, #1
 80108a6:	d110      	bne.n	80108ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80108a8:	f000 fc26 	bl	80110f8 <prvInitialiseTaskLists>
 80108ac:	e00d      	b.n	80108ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80108ae:	4b26      	ldr	r3, [pc, #152]	; (8010948 <prvAddNewTaskToReadyList+0xcc>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d109      	bne.n	80108ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80108b6:	4b23      	ldr	r3, [pc, #140]	; (8010944 <prvAddNewTaskToReadyList+0xc8>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d802      	bhi.n	80108ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80108c4:	4a1f      	ldr	r2, [pc, #124]	; (8010944 <prvAddNewTaskToReadyList+0xc8>)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80108ca:	4b20      	ldr	r3, [pc, #128]	; (801094c <prvAddNewTaskToReadyList+0xd0>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	3301      	adds	r3, #1
 80108d0:	4a1e      	ldr	r2, [pc, #120]	; (801094c <prvAddNewTaskToReadyList+0xd0>)
 80108d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80108d4:	4b1d      	ldr	r3, [pc, #116]	; (801094c <prvAddNewTaskToReadyList+0xd0>)
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108e0:	4b1b      	ldr	r3, [pc, #108]	; (8010950 <prvAddNewTaskToReadyList+0xd4>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d903      	bls.n	80108f0 <prvAddNewTaskToReadyList+0x74>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108ec:	4a18      	ldr	r2, [pc, #96]	; (8010950 <prvAddNewTaskToReadyList+0xd4>)
 80108ee:	6013      	str	r3, [r2, #0]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108f4:	4613      	mov	r3, r2
 80108f6:	009b      	lsls	r3, r3, #2
 80108f8:	4413      	add	r3, r2
 80108fa:	009b      	lsls	r3, r3, #2
 80108fc:	4a15      	ldr	r2, [pc, #84]	; (8010954 <prvAddNewTaskToReadyList+0xd8>)
 80108fe:	441a      	add	r2, r3
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	3304      	adds	r3, #4
 8010904:	4619      	mov	r1, r3
 8010906:	4610      	mov	r0, r2
 8010908:	f7fe fee7 	bl	800f6da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801090c:	f001 fb42 	bl	8011f94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010910:	4b0d      	ldr	r3, [pc, #52]	; (8010948 <prvAddNewTaskToReadyList+0xcc>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d00e      	beq.n	8010936 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010918:	4b0a      	ldr	r3, [pc, #40]	; (8010944 <prvAddNewTaskToReadyList+0xc8>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010922:	429a      	cmp	r2, r3
 8010924:	d207      	bcs.n	8010936 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010926:	4b0c      	ldr	r3, [pc, #48]	; (8010958 <prvAddNewTaskToReadyList+0xdc>)
 8010928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801092c:	601a      	str	r2, [r3, #0]
 801092e:	f3bf 8f4f 	dsb	sy
 8010932:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010936:	bf00      	nop
 8010938:	3708      	adds	r7, #8
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}
 801093e:	bf00      	nop
 8010940:	20001170 	.word	0x20001170
 8010944:	20000c9c 	.word	0x20000c9c
 8010948:	2000117c 	.word	0x2000117c
 801094c:	2000118c 	.word	0x2000118c
 8010950:	20001178 	.word	0x20001178
 8010954:	20000ca0 	.word	0x20000ca0
 8010958:	e000ed04 	.word	0xe000ed04

0801095c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801095c:	b580      	push	{r7, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010964:	2300      	movs	r3, #0
 8010966:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d017      	beq.n	801099e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801096e:	4b13      	ldr	r3, [pc, #76]	; (80109bc <vTaskDelay+0x60>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d00a      	beq.n	801098c <vTaskDelay+0x30>
	__asm volatile
 8010976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801097a:	f383 8811 	msr	BASEPRI, r3
 801097e:	f3bf 8f6f 	isb	sy
 8010982:	f3bf 8f4f 	dsb	sy
 8010986:	60bb      	str	r3, [r7, #8]
}
 8010988:	bf00      	nop
 801098a:	e7fe      	b.n	801098a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801098c:	f000 f88a 	bl	8010aa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010990:	2100      	movs	r1, #0
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f000 fdfc 	bl	8011590 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010998:	f000 f892 	bl	8010ac0 <xTaskResumeAll>
 801099c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d107      	bne.n	80109b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80109a4:	4b06      	ldr	r3, [pc, #24]	; (80109c0 <vTaskDelay+0x64>)
 80109a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109aa:	601a      	str	r2, [r3, #0]
 80109ac:	f3bf 8f4f 	dsb	sy
 80109b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80109b4:	bf00      	nop
 80109b6:	3710      	adds	r7, #16
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	20001198 	.word	0x20001198
 80109c0:	e000ed04 	.word	0xe000ed04

080109c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b08a      	sub	sp, #40	; 0x28
 80109c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80109ca:	2300      	movs	r3, #0
 80109cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80109ce:	2300      	movs	r3, #0
 80109d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80109d2:	463a      	mov	r2, r7
 80109d4:	1d39      	adds	r1, r7, #4
 80109d6:	f107 0308 	add.w	r3, r7, #8
 80109da:	4618      	mov	r0, r3
 80109dc:	f7fe fe1c 	bl	800f618 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80109e0:	6839      	ldr	r1, [r7, #0]
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	68ba      	ldr	r2, [r7, #8]
 80109e6:	9202      	str	r2, [sp, #8]
 80109e8:	9301      	str	r3, [sp, #4]
 80109ea:	2300      	movs	r3, #0
 80109ec:	9300      	str	r3, [sp, #0]
 80109ee:	2300      	movs	r3, #0
 80109f0:	460a      	mov	r2, r1
 80109f2:	4924      	ldr	r1, [pc, #144]	; (8010a84 <vTaskStartScheduler+0xc0>)
 80109f4:	4824      	ldr	r0, [pc, #144]	; (8010a88 <vTaskStartScheduler+0xc4>)
 80109f6:	f7ff fdf9 	bl	80105ec <xTaskCreateStatic>
 80109fa:	4603      	mov	r3, r0
 80109fc:	4a23      	ldr	r2, [pc, #140]	; (8010a8c <vTaskStartScheduler+0xc8>)
 80109fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010a00:	4b22      	ldr	r3, [pc, #136]	; (8010a8c <vTaskStartScheduler+0xc8>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d002      	beq.n	8010a0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010a08:	2301      	movs	r3, #1
 8010a0a:	617b      	str	r3, [r7, #20]
 8010a0c:	e001      	b.n	8010a12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	2b01      	cmp	r3, #1
 8010a16:	d102      	bne.n	8010a1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010a18:	f000 fe0e 	bl	8011638 <xTimerCreateTimerTask>
 8010a1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	2b01      	cmp	r3, #1
 8010a22:	d11b      	bne.n	8010a5c <vTaskStartScheduler+0x98>
	__asm volatile
 8010a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a28:	f383 8811 	msr	BASEPRI, r3
 8010a2c:	f3bf 8f6f 	isb	sy
 8010a30:	f3bf 8f4f 	dsb	sy
 8010a34:	613b      	str	r3, [r7, #16]
}
 8010a36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010a38:	4b15      	ldr	r3, [pc, #84]	; (8010a90 <vTaskStartScheduler+0xcc>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	3354      	adds	r3, #84	; 0x54
 8010a3e:	4a15      	ldr	r2, [pc, #84]	; (8010a94 <vTaskStartScheduler+0xd0>)
 8010a40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010a42:	4b15      	ldr	r3, [pc, #84]	; (8010a98 <vTaskStartScheduler+0xd4>)
 8010a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010a48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010a4a:	4b14      	ldr	r3, [pc, #80]	; (8010a9c <vTaskStartScheduler+0xd8>)
 8010a4c:	2201      	movs	r2, #1
 8010a4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010a50:	4b13      	ldr	r3, [pc, #76]	; (8010aa0 <vTaskStartScheduler+0xdc>)
 8010a52:	2200      	movs	r2, #0
 8010a54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010a56:	f001 f9cb 	bl	8011df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010a5a:	e00e      	b.n	8010a7a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a62:	d10a      	bne.n	8010a7a <vTaskStartScheduler+0xb6>
	__asm volatile
 8010a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a68:	f383 8811 	msr	BASEPRI, r3
 8010a6c:	f3bf 8f6f 	isb	sy
 8010a70:	f3bf 8f4f 	dsb	sy
 8010a74:	60fb      	str	r3, [r7, #12]
}
 8010a76:	bf00      	nop
 8010a78:	e7fe      	b.n	8010a78 <vTaskStartScheduler+0xb4>
}
 8010a7a:	bf00      	nop
 8010a7c:	3718      	adds	r7, #24
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
 8010a82:	bf00      	nop
 8010a84:	0801847c 	.word	0x0801847c
 8010a88:	080110c9 	.word	0x080110c9
 8010a8c:	20001194 	.word	0x20001194
 8010a90:	20000c9c 	.word	0x20000c9c
 8010a94:	2000019c 	.word	0x2000019c
 8010a98:	20001190 	.word	0x20001190
 8010a9c:	2000117c 	.word	0x2000117c
 8010aa0:	20001174 	.word	0x20001174

08010aa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010aa8:	4b04      	ldr	r3, [pc, #16]	; (8010abc <vTaskSuspendAll+0x18>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	3301      	adds	r3, #1
 8010aae:	4a03      	ldr	r2, [pc, #12]	; (8010abc <vTaskSuspendAll+0x18>)
 8010ab0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010ab2:	bf00      	nop
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aba:	4770      	bx	lr
 8010abc:	20001198 	.word	0x20001198

08010ac0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b084      	sub	sp, #16
 8010ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010aca:	2300      	movs	r3, #0
 8010acc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010ace:	4b42      	ldr	r3, [pc, #264]	; (8010bd8 <xTaskResumeAll+0x118>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d10a      	bne.n	8010aec <xTaskResumeAll+0x2c>
	__asm volatile
 8010ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ada:	f383 8811 	msr	BASEPRI, r3
 8010ade:	f3bf 8f6f 	isb	sy
 8010ae2:	f3bf 8f4f 	dsb	sy
 8010ae6:	603b      	str	r3, [r7, #0]
}
 8010ae8:	bf00      	nop
 8010aea:	e7fe      	b.n	8010aea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010aec:	f001 fa22 	bl	8011f34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010af0:	4b39      	ldr	r3, [pc, #228]	; (8010bd8 <xTaskResumeAll+0x118>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	3b01      	subs	r3, #1
 8010af6:	4a38      	ldr	r2, [pc, #224]	; (8010bd8 <xTaskResumeAll+0x118>)
 8010af8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010afa:	4b37      	ldr	r3, [pc, #220]	; (8010bd8 <xTaskResumeAll+0x118>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d162      	bne.n	8010bc8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010b02:	4b36      	ldr	r3, [pc, #216]	; (8010bdc <xTaskResumeAll+0x11c>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d05e      	beq.n	8010bc8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010b0a:	e02f      	b.n	8010b6c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b0c:	4b34      	ldr	r3, [pc, #208]	; (8010be0 <xTaskResumeAll+0x120>)
 8010b0e:	68db      	ldr	r3, [r3, #12]
 8010b10:	68db      	ldr	r3, [r3, #12]
 8010b12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	3318      	adds	r3, #24
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7fe fe3b 	bl	800f794 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	3304      	adds	r3, #4
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7fe fe36 	bl	800f794 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b2c:	4b2d      	ldr	r3, [pc, #180]	; (8010be4 <xTaskResumeAll+0x124>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d903      	bls.n	8010b3c <xTaskResumeAll+0x7c>
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b38:	4a2a      	ldr	r2, [pc, #168]	; (8010be4 <xTaskResumeAll+0x124>)
 8010b3a:	6013      	str	r3, [r2, #0]
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b40:	4613      	mov	r3, r2
 8010b42:	009b      	lsls	r3, r3, #2
 8010b44:	4413      	add	r3, r2
 8010b46:	009b      	lsls	r3, r3, #2
 8010b48:	4a27      	ldr	r2, [pc, #156]	; (8010be8 <xTaskResumeAll+0x128>)
 8010b4a:	441a      	add	r2, r3
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	3304      	adds	r3, #4
 8010b50:	4619      	mov	r1, r3
 8010b52:	4610      	mov	r0, r2
 8010b54:	f7fe fdc1 	bl	800f6da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b5c:	4b23      	ldr	r3, [pc, #140]	; (8010bec <xTaskResumeAll+0x12c>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d302      	bcc.n	8010b6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010b66:	4b22      	ldr	r3, [pc, #136]	; (8010bf0 <xTaskResumeAll+0x130>)
 8010b68:	2201      	movs	r2, #1
 8010b6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010b6c:	4b1c      	ldr	r3, [pc, #112]	; (8010be0 <xTaskResumeAll+0x120>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d1cb      	bne.n	8010b0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d001      	beq.n	8010b7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010b7a:	f000 fb5f 	bl	801123c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010b7e:	4b1d      	ldr	r3, [pc, #116]	; (8010bf4 <xTaskResumeAll+0x134>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d010      	beq.n	8010bac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010b8a:	f000 f847 	bl	8010c1c <xTaskIncrementTick>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d002      	beq.n	8010b9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010b94:	4b16      	ldr	r3, [pc, #88]	; (8010bf0 <xTaskResumeAll+0x130>)
 8010b96:	2201      	movs	r2, #1
 8010b98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	3b01      	subs	r3, #1
 8010b9e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d1f1      	bne.n	8010b8a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010ba6:	4b13      	ldr	r3, [pc, #76]	; (8010bf4 <xTaskResumeAll+0x134>)
 8010ba8:	2200      	movs	r2, #0
 8010baa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010bac:	4b10      	ldr	r3, [pc, #64]	; (8010bf0 <xTaskResumeAll+0x130>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d009      	beq.n	8010bc8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010bb8:	4b0f      	ldr	r3, [pc, #60]	; (8010bf8 <xTaskResumeAll+0x138>)
 8010bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bbe:	601a      	str	r2, [r3, #0]
 8010bc0:	f3bf 8f4f 	dsb	sy
 8010bc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010bc8:	f001 f9e4 	bl	8011f94 <vPortExitCritical>

	return xAlreadyYielded;
 8010bcc:	68bb      	ldr	r3, [r7, #8]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3710      	adds	r7, #16
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	20001198 	.word	0x20001198
 8010bdc:	20001170 	.word	0x20001170
 8010be0:	20001130 	.word	0x20001130
 8010be4:	20001178 	.word	0x20001178
 8010be8:	20000ca0 	.word	0x20000ca0
 8010bec:	20000c9c 	.word	0x20000c9c
 8010bf0:	20001184 	.word	0x20001184
 8010bf4:	20001180 	.word	0x20001180
 8010bf8:	e000ed04 	.word	0xe000ed04

08010bfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010bfc:	b480      	push	{r7}
 8010bfe:	b083      	sub	sp, #12
 8010c00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010c02:	4b05      	ldr	r3, [pc, #20]	; (8010c18 <xTaskGetTickCount+0x1c>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010c08:	687b      	ldr	r3, [r7, #4]
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	370c      	adds	r7, #12
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c14:	4770      	bx	lr
 8010c16:	bf00      	nop
 8010c18:	20001174 	.word	0x20001174

08010c1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b086      	sub	sp, #24
 8010c20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010c22:	2300      	movs	r3, #0
 8010c24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c26:	4b4f      	ldr	r3, [pc, #316]	; (8010d64 <xTaskIncrementTick+0x148>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	f040 808f 	bne.w	8010d4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010c30:	4b4d      	ldr	r3, [pc, #308]	; (8010d68 <xTaskIncrementTick+0x14c>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	3301      	adds	r3, #1
 8010c36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010c38:	4a4b      	ldr	r2, [pc, #300]	; (8010d68 <xTaskIncrementTick+0x14c>)
 8010c3a:	693b      	ldr	r3, [r7, #16]
 8010c3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d120      	bne.n	8010c86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010c44:	4b49      	ldr	r3, [pc, #292]	; (8010d6c <xTaskIncrementTick+0x150>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d00a      	beq.n	8010c64 <xTaskIncrementTick+0x48>
	__asm volatile
 8010c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c52:	f383 8811 	msr	BASEPRI, r3
 8010c56:	f3bf 8f6f 	isb	sy
 8010c5a:	f3bf 8f4f 	dsb	sy
 8010c5e:	603b      	str	r3, [r7, #0]
}
 8010c60:	bf00      	nop
 8010c62:	e7fe      	b.n	8010c62 <xTaskIncrementTick+0x46>
 8010c64:	4b41      	ldr	r3, [pc, #260]	; (8010d6c <xTaskIncrementTick+0x150>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	60fb      	str	r3, [r7, #12]
 8010c6a:	4b41      	ldr	r3, [pc, #260]	; (8010d70 <xTaskIncrementTick+0x154>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	4a3f      	ldr	r2, [pc, #252]	; (8010d6c <xTaskIncrementTick+0x150>)
 8010c70:	6013      	str	r3, [r2, #0]
 8010c72:	4a3f      	ldr	r2, [pc, #252]	; (8010d70 <xTaskIncrementTick+0x154>)
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	6013      	str	r3, [r2, #0]
 8010c78:	4b3e      	ldr	r3, [pc, #248]	; (8010d74 <xTaskIncrementTick+0x158>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	3301      	adds	r3, #1
 8010c7e:	4a3d      	ldr	r2, [pc, #244]	; (8010d74 <xTaskIncrementTick+0x158>)
 8010c80:	6013      	str	r3, [r2, #0]
 8010c82:	f000 fadb 	bl	801123c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010c86:	4b3c      	ldr	r3, [pc, #240]	; (8010d78 <xTaskIncrementTick+0x15c>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	693a      	ldr	r2, [r7, #16]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d349      	bcc.n	8010d24 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c90:	4b36      	ldr	r3, [pc, #216]	; (8010d6c <xTaskIncrementTick+0x150>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d104      	bne.n	8010ca4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c9a:	4b37      	ldr	r3, [pc, #220]	; (8010d78 <xTaskIncrementTick+0x15c>)
 8010c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ca0:	601a      	str	r2, [r3, #0]
					break;
 8010ca2:	e03f      	b.n	8010d24 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ca4:	4b31      	ldr	r3, [pc, #196]	; (8010d6c <xTaskIncrementTick+0x150>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	68db      	ldr	r3, [r3, #12]
 8010caa:	68db      	ldr	r3, [r3, #12]
 8010cac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010cb4:	693a      	ldr	r2, [r7, #16]
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d203      	bcs.n	8010cc4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010cbc:	4a2e      	ldr	r2, [pc, #184]	; (8010d78 <xTaskIncrementTick+0x15c>)
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010cc2:	e02f      	b.n	8010d24 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	3304      	adds	r3, #4
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7fe fd63 	bl	800f794 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d004      	beq.n	8010ce0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010cd6:	68bb      	ldr	r3, [r7, #8]
 8010cd8:	3318      	adds	r3, #24
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fe fd5a 	bl	800f794 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ce4:	4b25      	ldr	r3, [pc, #148]	; (8010d7c <xTaskIncrementTick+0x160>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d903      	bls.n	8010cf4 <xTaskIncrementTick+0xd8>
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cf0:	4a22      	ldr	r2, [pc, #136]	; (8010d7c <xTaskIncrementTick+0x160>)
 8010cf2:	6013      	str	r3, [r2, #0]
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cf8:	4613      	mov	r3, r2
 8010cfa:	009b      	lsls	r3, r3, #2
 8010cfc:	4413      	add	r3, r2
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	4a1f      	ldr	r2, [pc, #124]	; (8010d80 <xTaskIncrementTick+0x164>)
 8010d02:	441a      	add	r2, r3
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	3304      	adds	r3, #4
 8010d08:	4619      	mov	r1, r3
 8010d0a:	4610      	mov	r0, r2
 8010d0c:	f7fe fce5 	bl	800f6da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d14:	4b1b      	ldr	r3, [pc, #108]	; (8010d84 <xTaskIncrementTick+0x168>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d3b8      	bcc.n	8010c90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010d1e:	2301      	movs	r3, #1
 8010d20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d22:	e7b5      	b.n	8010c90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010d24:	4b17      	ldr	r3, [pc, #92]	; (8010d84 <xTaskIncrementTick+0x168>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d2a:	4915      	ldr	r1, [pc, #84]	; (8010d80 <xTaskIncrementTick+0x164>)
 8010d2c:	4613      	mov	r3, r2
 8010d2e:	009b      	lsls	r3, r3, #2
 8010d30:	4413      	add	r3, r2
 8010d32:	009b      	lsls	r3, r3, #2
 8010d34:	440b      	add	r3, r1
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	2b01      	cmp	r3, #1
 8010d3a:	d901      	bls.n	8010d40 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010d40:	4b11      	ldr	r3, [pc, #68]	; (8010d88 <xTaskIncrementTick+0x16c>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d007      	beq.n	8010d58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010d48:	2301      	movs	r3, #1
 8010d4a:	617b      	str	r3, [r7, #20]
 8010d4c:	e004      	b.n	8010d58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010d4e:	4b0f      	ldr	r3, [pc, #60]	; (8010d8c <xTaskIncrementTick+0x170>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	3301      	adds	r3, #1
 8010d54:	4a0d      	ldr	r2, [pc, #52]	; (8010d8c <xTaskIncrementTick+0x170>)
 8010d56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010d58:	697b      	ldr	r3, [r7, #20]
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	3718      	adds	r7, #24
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}
 8010d62:	bf00      	nop
 8010d64:	20001198 	.word	0x20001198
 8010d68:	20001174 	.word	0x20001174
 8010d6c:	20001128 	.word	0x20001128
 8010d70:	2000112c 	.word	0x2000112c
 8010d74:	20001188 	.word	0x20001188
 8010d78:	20001190 	.word	0x20001190
 8010d7c:	20001178 	.word	0x20001178
 8010d80:	20000ca0 	.word	0x20000ca0
 8010d84:	20000c9c 	.word	0x20000c9c
 8010d88:	20001184 	.word	0x20001184
 8010d8c:	20001180 	.word	0x20001180

08010d90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010d90:	b480      	push	{r7}
 8010d92:	b085      	sub	sp, #20
 8010d94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010d96:	4b2a      	ldr	r3, [pc, #168]	; (8010e40 <vTaskSwitchContext+0xb0>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d003      	beq.n	8010da6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010d9e:	4b29      	ldr	r3, [pc, #164]	; (8010e44 <vTaskSwitchContext+0xb4>)
 8010da0:	2201      	movs	r2, #1
 8010da2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010da4:	e046      	b.n	8010e34 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8010da6:	4b27      	ldr	r3, [pc, #156]	; (8010e44 <vTaskSwitchContext+0xb4>)
 8010da8:	2200      	movs	r2, #0
 8010daa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010dac:	4b26      	ldr	r3, [pc, #152]	; (8010e48 <vTaskSwitchContext+0xb8>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	60fb      	str	r3, [r7, #12]
 8010db2:	e010      	b.n	8010dd6 <vTaskSwitchContext+0x46>
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d10a      	bne.n	8010dd0 <vTaskSwitchContext+0x40>
	__asm volatile
 8010dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dbe:	f383 8811 	msr	BASEPRI, r3
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	f3bf 8f4f 	dsb	sy
 8010dca:	607b      	str	r3, [r7, #4]
}
 8010dcc:	bf00      	nop
 8010dce:	e7fe      	b.n	8010dce <vTaskSwitchContext+0x3e>
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	3b01      	subs	r3, #1
 8010dd4:	60fb      	str	r3, [r7, #12]
 8010dd6:	491d      	ldr	r1, [pc, #116]	; (8010e4c <vTaskSwitchContext+0xbc>)
 8010dd8:	68fa      	ldr	r2, [r7, #12]
 8010dda:	4613      	mov	r3, r2
 8010ddc:	009b      	lsls	r3, r3, #2
 8010dde:	4413      	add	r3, r2
 8010de0:	009b      	lsls	r3, r3, #2
 8010de2:	440b      	add	r3, r1
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d0e4      	beq.n	8010db4 <vTaskSwitchContext+0x24>
 8010dea:	68fa      	ldr	r2, [r7, #12]
 8010dec:	4613      	mov	r3, r2
 8010dee:	009b      	lsls	r3, r3, #2
 8010df0:	4413      	add	r3, r2
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	4a15      	ldr	r2, [pc, #84]	; (8010e4c <vTaskSwitchContext+0xbc>)
 8010df6:	4413      	add	r3, r2
 8010df8:	60bb      	str	r3, [r7, #8]
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	685a      	ldr	r2, [r3, #4]
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	605a      	str	r2, [r3, #4]
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	685a      	ldr	r2, [r3, #4]
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	3308      	adds	r3, #8
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d104      	bne.n	8010e1a <vTaskSwitchContext+0x8a>
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	685a      	ldr	r2, [r3, #4]
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	605a      	str	r2, [r3, #4]
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	4a0b      	ldr	r2, [pc, #44]	; (8010e50 <vTaskSwitchContext+0xc0>)
 8010e22:	6013      	str	r3, [r2, #0]
 8010e24:	4a08      	ldr	r2, [pc, #32]	; (8010e48 <vTaskSwitchContext+0xb8>)
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010e2a:	4b09      	ldr	r3, [pc, #36]	; (8010e50 <vTaskSwitchContext+0xc0>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	3354      	adds	r3, #84	; 0x54
 8010e30:	4a08      	ldr	r2, [pc, #32]	; (8010e54 <vTaskSwitchContext+0xc4>)
 8010e32:	6013      	str	r3, [r2, #0]
}
 8010e34:	bf00      	nop
 8010e36:	3714      	adds	r7, #20
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3e:	4770      	bx	lr
 8010e40:	20001198 	.word	0x20001198
 8010e44:	20001184 	.word	0x20001184
 8010e48:	20001178 	.word	0x20001178
 8010e4c:	20000ca0 	.word	0x20000ca0
 8010e50:	20000c9c 	.word	0x20000c9c
 8010e54:	2000019c 	.word	0x2000019c

08010e58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d10a      	bne.n	8010e7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e6c:	f383 8811 	msr	BASEPRI, r3
 8010e70:	f3bf 8f6f 	isb	sy
 8010e74:	f3bf 8f4f 	dsb	sy
 8010e78:	60fb      	str	r3, [r7, #12]
}
 8010e7a:	bf00      	nop
 8010e7c:	e7fe      	b.n	8010e7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010e7e:	4b07      	ldr	r3, [pc, #28]	; (8010e9c <vTaskPlaceOnEventList+0x44>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	3318      	adds	r3, #24
 8010e84:	4619      	mov	r1, r3
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f7fe fc4b 	bl	800f722 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010e8c:	2101      	movs	r1, #1
 8010e8e:	6838      	ldr	r0, [r7, #0]
 8010e90:	f000 fb7e 	bl	8011590 <prvAddCurrentTaskToDelayedList>
}
 8010e94:	bf00      	nop
 8010e96:	3710      	adds	r7, #16
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}
 8010e9c:	20000c9c 	.word	0x20000c9c

08010ea0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b086      	sub	sp, #24
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	60b9      	str	r1, [r7, #8]
 8010eaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d10a      	bne.n	8010ec8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb6:	f383 8811 	msr	BASEPRI, r3
 8010eba:	f3bf 8f6f 	isb	sy
 8010ebe:	f3bf 8f4f 	dsb	sy
 8010ec2:	617b      	str	r3, [r7, #20]
}
 8010ec4:	bf00      	nop
 8010ec6:	e7fe      	b.n	8010ec6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010ec8:	4b0a      	ldr	r3, [pc, #40]	; (8010ef4 <vTaskPlaceOnEventListRestricted+0x54>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	3318      	adds	r3, #24
 8010ece:	4619      	mov	r1, r3
 8010ed0:	68f8      	ldr	r0, [r7, #12]
 8010ed2:	f7fe fc02 	bl	800f6da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d002      	beq.n	8010ee2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ee0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010ee2:	6879      	ldr	r1, [r7, #4]
 8010ee4:	68b8      	ldr	r0, [r7, #8]
 8010ee6:	f000 fb53 	bl	8011590 <prvAddCurrentTaskToDelayedList>
	}
 8010eea:	bf00      	nop
 8010eec:	3718      	adds	r7, #24
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	20000c9c 	.word	0x20000c9c

08010ef8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b086      	sub	sp, #24
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d10a      	bne.n	8010f24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f12:	f383 8811 	msr	BASEPRI, r3
 8010f16:	f3bf 8f6f 	isb	sy
 8010f1a:	f3bf 8f4f 	dsb	sy
 8010f1e:	60fb      	str	r3, [r7, #12]
}
 8010f20:	bf00      	nop
 8010f22:	e7fe      	b.n	8010f22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	3318      	adds	r3, #24
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7fe fc33 	bl	800f794 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f2e:	4b1e      	ldr	r3, [pc, #120]	; (8010fa8 <xTaskRemoveFromEventList+0xb0>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d11d      	bne.n	8010f72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	3304      	adds	r3, #4
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f7fe fc2a 	bl	800f794 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f44:	4b19      	ldr	r3, [pc, #100]	; (8010fac <xTaskRemoveFromEventList+0xb4>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d903      	bls.n	8010f54 <xTaskRemoveFromEventList+0x5c>
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f50:	4a16      	ldr	r2, [pc, #88]	; (8010fac <xTaskRemoveFromEventList+0xb4>)
 8010f52:	6013      	str	r3, [r2, #0]
 8010f54:	693b      	ldr	r3, [r7, #16]
 8010f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f58:	4613      	mov	r3, r2
 8010f5a:	009b      	lsls	r3, r3, #2
 8010f5c:	4413      	add	r3, r2
 8010f5e:	009b      	lsls	r3, r3, #2
 8010f60:	4a13      	ldr	r2, [pc, #76]	; (8010fb0 <xTaskRemoveFromEventList+0xb8>)
 8010f62:	441a      	add	r2, r3
 8010f64:	693b      	ldr	r3, [r7, #16]
 8010f66:	3304      	adds	r3, #4
 8010f68:	4619      	mov	r1, r3
 8010f6a:	4610      	mov	r0, r2
 8010f6c:	f7fe fbb5 	bl	800f6da <vListInsertEnd>
 8010f70:	e005      	b.n	8010f7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	3318      	adds	r3, #24
 8010f76:	4619      	mov	r1, r3
 8010f78:	480e      	ldr	r0, [pc, #56]	; (8010fb4 <xTaskRemoveFromEventList+0xbc>)
 8010f7a:	f7fe fbae 	bl	800f6da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f82:	4b0d      	ldr	r3, [pc, #52]	; (8010fb8 <xTaskRemoveFromEventList+0xc0>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d905      	bls.n	8010f98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010f90:	4b0a      	ldr	r3, [pc, #40]	; (8010fbc <xTaskRemoveFromEventList+0xc4>)
 8010f92:	2201      	movs	r2, #1
 8010f94:	601a      	str	r2, [r3, #0]
 8010f96:	e001      	b.n	8010f9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010f9c:	697b      	ldr	r3, [r7, #20]
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3718      	adds	r7, #24
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	20001198 	.word	0x20001198
 8010fac:	20001178 	.word	0x20001178
 8010fb0:	20000ca0 	.word	0x20000ca0
 8010fb4:	20001130 	.word	0x20001130
 8010fb8:	20000c9c 	.word	0x20000c9c
 8010fbc:	20001184 	.word	0x20001184

08010fc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b083      	sub	sp, #12
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010fc8:	4b06      	ldr	r3, [pc, #24]	; (8010fe4 <vTaskInternalSetTimeOutState+0x24>)
 8010fca:	681a      	ldr	r2, [r3, #0]
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010fd0:	4b05      	ldr	r3, [pc, #20]	; (8010fe8 <vTaskInternalSetTimeOutState+0x28>)
 8010fd2:	681a      	ldr	r2, [r3, #0]
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	605a      	str	r2, [r3, #4]
}
 8010fd8:	bf00      	nop
 8010fda:	370c      	adds	r7, #12
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr
 8010fe4:	20001188 	.word	0x20001188
 8010fe8:	20001174 	.word	0x20001174

08010fec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b088      	sub	sp, #32
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d10a      	bne.n	8011012 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011000:	f383 8811 	msr	BASEPRI, r3
 8011004:	f3bf 8f6f 	isb	sy
 8011008:	f3bf 8f4f 	dsb	sy
 801100c:	613b      	str	r3, [r7, #16]
}
 801100e:	bf00      	nop
 8011010:	e7fe      	b.n	8011010 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d10a      	bne.n	801102e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801101c:	f383 8811 	msr	BASEPRI, r3
 8011020:	f3bf 8f6f 	isb	sy
 8011024:	f3bf 8f4f 	dsb	sy
 8011028:	60fb      	str	r3, [r7, #12]
}
 801102a:	bf00      	nop
 801102c:	e7fe      	b.n	801102c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801102e:	f000 ff81 	bl	8011f34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011032:	4b1d      	ldr	r3, [pc, #116]	; (80110a8 <xTaskCheckForTimeOut+0xbc>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	685b      	ldr	r3, [r3, #4]
 801103c:	69ba      	ldr	r2, [r7, #24]
 801103e:	1ad3      	subs	r3, r2, r3
 8011040:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801104a:	d102      	bne.n	8011052 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801104c:	2300      	movs	r3, #0
 801104e:	61fb      	str	r3, [r7, #28]
 8011050:	e023      	b.n	801109a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681a      	ldr	r2, [r3, #0]
 8011056:	4b15      	ldr	r3, [pc, #84]	; (80110ac <xTaskCheckForTimeOut+0xc0>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	429a      	cmp	r2, r3
 801105c:	d007      	beq.n	801106e <xTaskCheckForTimeOut+0x82>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	69ba      	ldr	r2, [r7, #24]
 8011064:	429a      	cmp	r2, r3
 8011066:	d302      	bcc.n	801106e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011068:	2301      	movs	r3, #1
 801106a:	61fb      	str	r3, [r7, #28]
 801106c:	e015      	b.n	801109a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	697a      	ldr	r2, [r7, #20]
 8011074:	429a      	cmp	r2, r3
 8011076:	d20b      	bcs.n	8011090 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	681a      	ldr	r2, [r3, #0]
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	1ad2      	subs	r2, r2, r3
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f7ff ff9b 	bl	8010fc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801108a:	2300      	movs	r3, #0
 801108c:	61fb      	str	r3, [r7, #28]
 801108e:	e004      	b.n	801109a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	2200      	movs	r2, #0
 8011094:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011096:	2301      	movs	r3, #1
 8011098:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801109a:	f000 ff7b 	bl	8011f94 <vPortExitCritical>

	return xReturn;
 801109e:	69fb      	ldr	r3, [r7, #28]
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3720      	adds	r7, #32
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}
 80110a8:	20001174 	.word	0x20001174
 80110ac:	20001188 	.word	0x20001188

080110b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80110b0:	b480      	push	{r7}
 80110b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80110b4:	4b03      	ldr	r3, [pc, #12]	; (80110c4 <vTaskMissedYield+0x14>)
 80110b6:	2201      	movs	r2, #1
 80110b8:	601a      	str	r2, [r3, #0]
}
 80110ba:	bf00      	nop
 80110bc:	46bd      	mov	sp, r7
 80110be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c2:	4770      	bx	lr
 80110c4:	20001184 	.word	0x20001184

080110c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80110d0:	f000 f852 	bl	8011178 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80110d4:	4b06      	ldr	r3, [pc, #24]	; (80110f0 <prvIdleTask+0x28>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d9f9      	bls.n	80110d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80110dc:	4b05      	ldr	r3, [pc, #20]	; (80110f4 <prvIdleTask+0x2c>)
 80110de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110e2:	601a      	str	r2, [r3, #0]
 80110e4:	f3bf 8f4f 	dsb	sy
 80110e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80110ec:	e7f0      	b.n	80110d0 <prvIdleTask+0x8>
 80110ee:	bf00      	nop
 80110f0:	20000ca0 	.word	0x20000ca0
 80110f4:	e000ed04 	.word	0xe000ed04

080110f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80110fe:	2300      	movs	r3, #0
 8011100:	607b      	str	r3, [r7, #4]
 8011102:	e00c      	b.n	801111e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011104:	687a      	ldr	r2, [r7, #4]
 8011106:	4613      	mov	r3, r2
 8011108:	009b      	lsls	r3, r3, #2
 801110a:	4413      	add	r3, r2
 801110c:	009b      	lsls	r3, r3, #2
 801110e:	4a12      	ldr	r2, [pc, #72]	; (8011158 <prvInitialiseTaskLists+0x60>)
 8011110:	4413      	add	r3, r2
 8011112:	4618      	mov	r0, r3
 8011114:	f7fe fab4 	bl	800f680 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	3301      	adds	r3, #1
 801111c:	607b      	str	r3, [r7, #4]
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2b37      	cmp	r3, #55	; 0x37
 8011122:	d9ef      	bls.n	8011104 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011124:	480d      	ldr	r0, [pc, #52]	; (801115c <prvInitialiseTaskLists+0x64>)
 8011126:	f7fe faab 	bl	800f680 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801112a:	480d      	ldr	r0, [pc, #52]	; (8011160 <prvInitialiseTaskLists+0x68>)
 801112c:	f7fe faa8 	bl	800f680 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011130:	480c      	ldr	r0, [pc, #48]	; (8011164 <prvInitialiseTaskLists+0x6c>)
 8011132:	f7fe faa5 	bl	800f680 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011136:	480c      	ldr	r0, [pc, #48]	; (8011168 <prvInitialiseTaskLists+0x70>)
 8011138:	f7fe faa2 	bl	800f680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801113c:	480b      	ldr	r0, [pc, #44]	; (801116c <prvInitialiseTaskLists+0x74>)
 801113e:	f7fe fa9f 	bl	800f680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011142:	4b0b      	ldr	r3, [pc, #44]	; (8011170 <prvInitialiseTaskLists+0x78>)
 8011144:	4a05      	ldr	r2, [pc, #20]	; (801115c <prvInitialiseTaskLists+0x64>)
 8011146:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011148:	4b0a      	ldr	r3, [pc, #40]	; (8011174 <prvInitialiseTaskLists+0x7c>)
 801114a:	4a05      	ldr	r2, [pc, #20]	; (8011160 <prvInitialiseTaskLists+0x68>)
 801114c:	601a      	str	r2, [r3, #0]
}
 801114e:	bf00      	nop
 8011150:	3708      	adds	r7, #8
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}
 8011156:	bf00      	nop
 8011158:	20000ca0 	.word	0x20000ca0
 801115c:	20001100 	.word	0x20001100
 8011160:	20001114 	.word	0x20001114
 8011164:	20001130 	.word	0x20001130
 8011168:	20001144 	.word	0x20001144
 801116c:	2000115c 	.word	0x2000115c
 8011170:	20001128 	.word	0x20001128
 8011174:	2000112c 	.word	0x2000112c

08011178 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b082      	sub	sp, #8
 801117c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801117e:	e019      	b.n	80111b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011180:	f000 fed8 	bl	8011f34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011184:	4b10      	ldr	r3, [pc, #64]	; (80111c8 <prvCheckTasksWaitingTermination+0x50>)
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	3304      	adds	r3, #4
 8011190:	4618      	mov	r0, r3
 8011192:	f7fe faff 	bl	800f794 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011196:	4b0d      	ldr	r3, [pc, #52]	; (80111cc <prvCheckTasksWaitingTermination+0x54>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	3b01      	subs	r3, #1
 801119c:	4a0b      	ldr	r2, [pc, #44]	; (80111cc <prvCheckTasksWaitingTermination+0x54>)
 801119e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80111a0:	4b0b      	ldr	r3, [pc, #44]	; (80111d0 <prvCheckTasksWaitingTermination+0x58>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	3b01      	subs	r3, #1
 80111a6:	4a0a      	ldr	r2, [pc, #40]	; (80111d0 <prvCheckTasksWaitingTermination+0x58>)
 80111a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80111aa:	f000 fef3 	bl	8011f94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f000 f810 	bl	80111d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80111b4:	4b06      	ldr	r3, [pc, #24]	; (80111d0 <prvCheckTasksWaitingTermination+0x58>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d1e1      	bne.n	8011180 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80111bc:	bf00      	nop
 80111be:	bf00      	nop
 80111c0:	3708      	adds	r7, #8
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop
 80111c8:	20001144 	.word	0x20001144
 80111cc:	20001170 	.word	0x20001170
 80111d0:	20001158 	.word	0x20001158

080111d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b084      	sub	sp, #16
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	3354      	adds	r3, #84	; 0x54
 80111e0:	4618      	mov	r0, r3
 80111e2:	f002 fed1 	bl	8013f88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d108      	bne.n	8011202 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111f4:	4618      	mov	r0, r3
 80111f6:	f001 f88b 	bl	8012310 <vPortFree>
				vPortFree( pxTCB );
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f001 f888 	bl	8012310 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011200:	e018      	b.n	8011234 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011208:	2b01      	cmp	r3, #1
 801120a:	d103      	bne.n	8011214 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f001 f87f 	bl	8012310 <vPortFree>
	}
 8011212:	e00f      	b.n	8011234 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801121a:	2b02      	cmp	r3, #2
 801121c:	d00a      	beq.n	8011234 <prvDeleteTCB+0x60>
	__asm volatile
 801121e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011222:	f383 8811 	msr	BASEPRI, r3
 8011226:	f3bf 8f6f 	isb	sy
 801122a:	f3bf 8f4f 	dsb	sy
 801122e:	60fb      	str	r3, [r7, #12]
}
 8011230:	bf00      	nop
 8011232:	e7fe      	b.n	8011232 <prvDeleteTCB+0x5e>
	}
 8011234:	bf00      	nop
 8011236:	3710      	adds	r7, #16
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}

0801123c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801123c:	b480      	push	{r7}
 801123e:	b083      	sub	sp, #12
 8011240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011242:	4b0c      	ldr	r3, [pc, #48]	; (8011274 <prvResetNextTaskUnblockTime+0x38>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d104      	bne.n	8011256 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801124c:	4b0a      	ldr	r3, [pc, #40]	; (8011278 <prvResetNextTaskUnblockTime+0x3c>)
 801124e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011252:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011254:	e008      	b.n	8011268 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011256:	4b07      	ldr	r3, [pc, #28]	; (8011274 <prvResetNextTaskUnblockTime+0x38>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	685b      	ldr	r3, [r3, #4]
 8011264:	4a04      	ldr	r2, [pc, #16]	; (8011278 <prvResetNextTaskUnblockTime+0x3c>)
 8011266:	6013      	str	r3, [r2, #0]
}
 8011268:	bf00      	nop
 801126a:	370c      	adds	r7, #12
 801126c:	46bd      	mov	sp, r7
 801126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011272:	4770      	bx	lr
 8011274:	20001128 	.word	0x20001128
 8011278:	20001190 	.word	0x20001190

0801127c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801127c:	b480      	push	{r7}
 801127e:	b083      	sub	sp, #12
 8011280:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011282:	4b0b      	ldr	r3, [pc, #44]	; (80112b0 <xTaskGetSchedulerState+0x34>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d102      	bne.n	8011290 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801128a:	2301      	movs	r3, #1
 801128c:	607b      	str	r3, [r7, #4]
 801128e:	e008      	b.n	80112a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011290:	4b08      	ldr	r3, [pc, #32]	; (80112b4 <xTaskGetSchedulerState+0x38>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d102      	bne.n	801129e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011298:	2302      	movs	r3, #2
 801129a:	607b      	str	r3, [r7, #4]
 801129c:	e001      	b.n	80112a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801129e:	2300      	movs	r3, #0
 80112a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80112a2:	687b      	ldr	r3, [r7, #4]
	}
 80112a4:	4618      	mov	r0, r3
 80112a6:	370c      	adds	r7, #12
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr
 80112b0:	2000117c 	.word	0x2000117c
 80112b4:	20001198 	.word	0x20001198

080112b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b084      	sub	sp, #16
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80112c4:	2300      	movs	r3, #0
 80112c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d051      	beq.n	8011372 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112d2:	4b2a      	ldr	r3, [pc, #168]	; (801137c <xTaskPriorityInherit+0xc4>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112d8:	429a      	cmp	r2, r3
 80112da:	d241      	bcs.n	8011360 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	699b      	ldr	r3, [r3, #24]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	db06      	blt.n	80112f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112e4:	4b25      	ldr	r3, [pc, #148]	; (801137c <xTaskPriorityInherit+0xc4>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	6959      	ldr	r1, [r3, #20]
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112fa:	4613      	mov	r3, r2
 80112fc:	009b      	lsls	r3, r3, #2
 80112fe:	4413      	add	r3, r2
 8011300:	009b      	lsls	r3, r3, #2
 8011302:	4a1f      	ldr	r2, [pc, #124]	; (8011380 <xTaskPriorityInherit+0xc8>)
 8011304:	4413      	add	r3, r2
 8011306:	4299      	cmp	r1, r3
 8011308:	d122      	bne.n	8011350 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	3304      	adds	r3, #4
 801130e:	4618      	mov	r0, r3
 8011310:	f7fe fa40 	bl	800f794 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011314:	4b19      	ldr	r3, [pc, #100]	; (801137c <xTaskPriorityInherit+0xc4>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011322:	4b18      	ldr	r3, [pc, #96]	; (8011384 <xTaskPriorityInherit+0xcc>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	429a      	cmp	r2, r3
 8011328:	d903      	bls.n	8011332 <xTaskPriorityInherit+0x7a>
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801132e:	4a15      	ldr	r2, [pc, #84]	; (8011384 <xTaskPriorityInherit+0xcc>)
 8011330:	6013      	str	r3, [r2, #0]
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011336:	4613      	mov	r3, r2
 8011338:	009b      	lsls	r3, r3, #2
 801133a:	4413      	add	r3, r2
 801133c:	009b      	lsls	r3, r3, #2
 801133e:	4a10      	ldr	r2, [pc, #64]	; (8011380 <xTaskPriorityInherit+0xc8>)
 8011340:	441a      	add	r2, r3
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	3304      	adds	r3, #4
 8011346:	4619      	mov	r1, r3
 8011348:	4610      	mov	r0, r2
 801134a:	f7fe f9c6 	bl	800f6da <vListInsertEnd>
 801134e:	e004      	b.n	801135a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011350:	4b0a      	ldr	r3, [pc, #40]	; (801137c <xTaskPriorityInherit+0xc4>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801135a:	2301      	movs	r3, #1
 801135c:	60fb      	str	r3, [r7, #12]
 801135e:	e008      	b.n	8011372 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011364:	4b05      	ldr	r3, [pc, #20]	; (801137c <xTaskPriorityInherit+0xc4>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801136a:	429a      	cmp	r2, r3
 801136c:	d201      	bcs.n	8011372 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801136e:	2301      	movs	r3, #1
 8011370:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011372:	68fb      	ldr	r3, [r7, #12]
	}
 8011374:	4618      	mov	r0, r3
 8011376:	3710      	adds	r7, #16
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}
 801137c:	20000c9c 	.word	0x20000c9c
 8011380:	20000ca0 	.word	0x20000ca0
 8011384:	20001178 	.word	0x20001178

08011388 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011388:	b580      	push	{r7, lr}
 801138a:	b086      	sub	sp, #24
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011394:	2300      	movs	r3, #0
 8011396:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d056      	beq.n	801144c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801139e:	4b2e      	ldr	r3, [pc, #184]	; (8011458 <xTaskPriorityDisinherit+0xd0>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	693a      	ldr	r2, [r7, #16]
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d00a      	beq.n	80113be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80113a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ac:	f383 8811 	msr	BASEPRI, r3
 80113b0:	f3bf 8f6f 	isb	sy
 80113b4:	f3bf 8f4f 	dsb	sy
 80113b8:	60fb      	str	r3, [r7, #12]
}
 80113ba:	bf00      	nop
 80113bc:	e7fe      	b.n	80113bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d10a      	bne.n	80113dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80113c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ca:	f383 8811 	msr	BASEPRI, r3
 80113ce:	f3bf 8f6f 	isb	sy
 80113d2:	f3bf 8f4f 	dsb	sy
 80113d6:	60bb      	str	r3, [r7, #8]
}
 80113d8:	bf00      	nop
 80113da:	e7fe      	b.n	80113da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113e0:	1e5a      	subs	r2, r3, #1
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d02c      	beq.n	801144c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d128      	bne.n	801144c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	3304      	adds	r3, #4
 80113fe:	4618      	mov	r0, r3
 8011400:	f7fe f9c8 	bl	800f794 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011408:	693b      	ldr	r3, [r7, #16]
 801140a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801140c:	693b      	ldr	r3, [r7, #16]
 801140e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011410:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801141c:	4b0f      	ldr	r3, [pc, #60]	; (801145c <xTaskPriorityDisinherit+0xd4>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	429a      	cmp	r2, r3
 8011422:	d903      	bls.n	801142c <xTaskPriorityDisinherit+0xa4>
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011428:	4a0c      	ldr	r2, [pc, #48]	; (801145c <xTaskPriorityDisinherit+0xd4>)
 801142a:	6013      	str	r3, [r2, #0]
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011430:	4613      	mov	r3, r2
 8011432:	009b      	lsls	r3, r3, #2
 8011434:	4413      	add	r3, r2
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	4a09      	ldr	r2, [pc, #36]	; (8011460 <xTaskPriorityDisinherit+0xd8>)
 801143a:	441a      	add	r2, r3
 801143c:	693b      	ldr	r3, [r7, #16]
 801143e:	3304      	adds	r3, #4
 8011440:	4619      	mov	r1, r3
 8011442:	4610      	mov	r0, r2
 8011444:	f7fe f949 	bl	800f6da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011448:	2301      	movs	r3, #1
 801144a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801144c:	697b      	ldr	r3, [r7, #20]
	}
 801144e:	4618      	mov	r0, r3
 8011450:	3718      	adds	r7, #24
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}
 8011456:	bf00      	nop
 8011458:	20000c9c 	.word	0x20000c9c
 801145c:	20001178 	.word	0x20001178
 8011460:	20000ca0 	.word	0x20000ca0

08011464 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011464:	b580      	push	{r7, lr}
 8011466:	b088      	sub	sp, #32
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011472:	2301      	movs	r3, #1
 8011474:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d06a      	beq.n	8011552 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801147c:	69bb      	ldr	r3, [r7, #24]
 801147e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011480:	2b00      	cmp	r3, #0
 8011482:	d10a      	bne.n	801149a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011488:	f383 8811 	msr	BASEPRI, r3
 801148c:	f3bf 8f6f 	isb	sy
 8011490:	f3bf 8f4f 	dsb	sy
 8011494:	60fb      	str	r3, [r7, #12]
}
 8011496:	bf00      	nop
 8011498:	e7fe      	b.n	8011498 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801149e:	683a      	ldr	r2, [r7, #0]
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d902      	bls.n	80114aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	61fb      	str	r3, [r7, #28]
 80114a8:	e002      	b.n	80114b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80114aa:	69bb      	ldr	r3, [r7, #24]
 80114ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80114b0:	69bb      	ldr	r3, [r7, #24]
 80114b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b4:	69fa      	ldr	r2, [r7, #28]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d04b      	beq.n	8011552 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80114ba:	69bb      	ldr	r3, [r7, #24]
 80114bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80114be:	697a      	ldr	r2, [r7, #20]
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d146      	bne.n	8011552 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80114c4:	4b25      	ldr	r3, [pc, #148]	; (801155c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	69ba      	ldr	r2, [r7, #24]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d10a      	bne.n	80114e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80114ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d2:	f383 8811 	msr	BASEPRI, r3
 80114d6:	f3bf 8f6f 	isb	sy
 80114da:	f3bf 8f4f 	dsb	sy
 80114de:	60bb      	str	r3, [r7, #8]
}
 80114e0:	bf00      	nop
 80114e2:	e7fe      	b.n	80114e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80114e4:	69bb      	ldr	r3, [r7, #24]
 80114e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80114ea:	69bb      	ldr	r3, [r7, #24]
 80114ec:	69fa      	ldr	r2, [r7, #28]
 80114ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80114f0:	69bb      	ldr	r3, [r7, #24]
 80114f2:	699b      	ldr	r3, [r3, #24]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	db04      	blt.n	8011502 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114f8:	69fb      	ldr	r3, [r7, #28]
 80114fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80114fe:	69bb      	ldr	r3, [r7, #24]
 8011500:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	6959      	ldr	r1, [r3, #20]
 8011506:	693a      	ldr	r2, [r7, #16]
 8011508:	4613      	mov	r3, r2
 801150a:	009b      	lsls	r3, r3, #2
 801150c:	4413      	add	r3, r2
 801150e:	009b      	lsls	r3, r3, #2
 8011510:	4a13      	ldr	r2, [pc, #76]	; (8011560 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011512:	4413      	add	r3, r2
 8011514:	4299      	cmp	r1, r3
 8011516:	d11c      	bne.n	8011552 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011518:	69bb      	ldr	r3, [r7, #24]
 801151a:	3304      	adds	r3, #4
 801151c:	4618      	mov	r0, r3
 801151e:	f7fe f939 	bl	800f794 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011522:	69bb      	ldr	r3, [r7, #24]
 8011524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011526:	4b0f      	ldr	r3, [pc, #60]	; (8011564 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	429a      	cmp	r2, r3
 801152c:	d903      	bls.n	8011536 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801152e:	69bb      	ldr	r3, [r7, #24]
 8011530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011532:	4a0c      	ldr	r2, [pc, #48]	; (8011564 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011534:	6013      	str	r3, [r2, #0]
 8011536:	69bb      	ldr	r3, [r7, #24]
 8011538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801153a:	4613      	mov	r3, r2
 801153c:	009b      	lsls	r3, r3, #2
 801153e:	4413      	add	r3, r2
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	4a07      	ldr	r2, [pc, #28]	; (8011560 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011544:	441a      	add	r2, r3
 8011546:	69bb      	ldr	r3, [r7, #24]
 8011548:	3304      	adds	r3, #4
 801154a:	4619      	mov	r1, r3
 801154c:	4610      	mov	r0, r2
 801154e:	f7fe f8c4 	bl	800f6da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011552:	bf00      	nop
 8011554:	3720      	adds	r7, #32
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop
 801155c:	20000c9c 	.word	0x20000c9c
 8011560:	20000ca0 	.word	0x20000ca0
 8011564:	20001178 	.word	0x20001178

08011568 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011568:	b480      	push	{r7}
 801156a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801156c:	4b07      	ldr	r3, [pc, #28]	; (801158c <pvTaskIncrementMutexHeldCount+0x24>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d004      	beq.n	801157e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011574:	4b05      	ldr	r3, [pc, #20]	; (801158c <pvTaskIncrementMutexHeldCount+0x24>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801157a:	3201      	adds	r2, #1
 801157c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801157e:	4b03      	ldr	r3, [pc, #12]	; (801158c <pvTaskIncrementMutexHeldCount+0x24>)
 8011580:	681b      	ldr	r3, [r3, #0]
	}
 8011582:	4618      	mov	r0, r3
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr
 801158c:	20000c9c 	.word	0x20000c9c

08011590 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801159a:	4b21      	ldr	r3, [pc, #132]	; (8011620 <prvAddCurrentTaskToDelayedList+0x90>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80115a0:	4b20      	ldr	r3, [pc, #128]	; (8011624 <prvAddCurrentTaskToDelayedList+0x94>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	3304      	adds	r3, #4
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7fe f8f4 	bl	800f794 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115b2:	d10a      	bne.n	80115ca <prvAddCurrentTaskToDelayedList+0x3a>
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d007      	beq.n	80115ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80115ba:	4b1a      	ldr	r3, [pc, #104]	; (8011624 <prvAddCurrentTaskToDelayedList+0x94>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	3304      	adds	r3, #4
 80115c0:	4619      	mov	r1, r3
 80115c2:	4819      	ldr	r0, [pc, #100]	; (8011628 <prvAddCurrentTaskToDelayedList+0x98>)
 80115c4:	f7fe f889 	bl	800f6da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80115c8:	e026      	b.n	8011618 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80115ca:	68fa      	ldr	r2, [r7, #12]
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	4413      	add	r3, r2
 80115d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80115d2:	4b14      	ldr	r3, [pc, #80]	; (8011624 <prvAddCurrentTaskToDelayedList+0x94>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	68ba      	ldr	r2, [r7, #8]
 80115d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80115da:	68ba      	ldr	r2, [r7, #8]
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	429a      	cmp	r2, r3
 80115e0:	d209      	bcs.n	80115f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80115e2:	4b12      	ldr	r3, [pc, #72]	; (801162c <prvAddCurrentTaskToDelayedList+0x9c>)
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	4b0f      	ldr	r3, [pc, #60]	; (8011624 <prvAddCurrentTaskToDelayedList+0x94>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	3304      	adds	r3, #4
 80115ec:	4619      	mov	r1, r3
 80115ee:	4610      	mov	r0, r2
 80115f0:	f7fe f897 	bl	800f722 <vListInsert>
}
 80115f4:	e010      	b.n	8011618 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80115f6:	4b0e      	ldr	r3, [pc, #56]	; (8011630 <prvAddCurrentTaskToDelayedList+0xa0>)
 80115f8:	681a      	ldr	r2, [r3, #0]
 80115fa:	4b0a      	ldr	r3, [pc, #40]	; (8011624 <prvAddCurrentTaskToDelayedList+0x94>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	3304      	adds	r3, #4
 8011600:	4619      	mov	r1, r3
 8011602:	4610      	mov	r0, r2
 8011604:	f7fe f88d 	bl	800f722 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011608:	4b0a      	ldr	r3, [pc, #40]	; (8011634 <prvAddCurrentTaskToDelayedList+0xa4>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	68ba      	ldr	r2, [r7, #8]
 801160e:	429a      	cmp	r2, r3
 8011610:	d202      	bcs.n	8011618 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011612:	4a08      	ldr	r2, [pc, #32]	; (8011634 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	6013      	str	r3, [r2, #0]
}
 8011618:	bf00      	nop
 801161a:	3710      	adds	r7, #16
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}
 8011620:	20001174 	.word	0x20001174
 8011624:	20000c9c 	.word	0x20000c9c
 8011628:	2000115c 	.word	0x2000115c
 801162c:	2000112c 	.word	0x2000112c
 8011630:	20001128 	.word	0x20001128
 8011634:	20001190 	.word	0x20001190

08011638 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b08a      	sub	sp, #40	; 0x28
 801163c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801163e:	2300      	movs	r3, #0
 8011640:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011642:	f000 fb07 	bl	8011c54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011646:	4b1c      	ldr	r3, [pc, #112]	; (80116b8 <xTimerCreateTimerTask+0x80>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d021      	beq.n	8011692 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801164e:	2300      	movs	r3, #0
 8011650:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011652:	2300      	movs	r3, #0
 8011654:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011656:	1d3a      	adds	r2, r7, #4
 8011658:	f107 0108 	add.w	r1, r7, #8
 801165c:	f107 030c 	add.w	r3, r7, #12
 8011660:	4618      	mov	r0, r3
 8011662:	f7fd fff3 	bl	800f64c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011666:	6879      	ldr	r1, [r7, #4]
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	68fa      	ldr	r2, [r7, #12]
 801166c:	9202      	str	r2, [sp, #8]
 801166e:	9301      	str	r3, [sp, #4]
 8011670:	2302      	movs	r3, #2
 8011672:	9300      	str	r3, [sp, #0]
 8011674:	2300      	movs	r3, #0
 8011676:	460a      	mov	r2, r1
 8011678:	4910      	ldr	r1, [pc, #64]	; (80116bc <xTimerCreateTimerTask+0x84>)
 801167a:	4811      	ldr	r0, [pc, #68]	; (80116c0 <xTimerCreateTimerTask+0x88>)
 801167c:	f7fe ffb6 	bl	80105ec <xTaskCreateStatic>
 8011680:	4603      	mov	r3, r0
 8011682:	4a10      	ldr	r2, [pc, #64]	; (80116c4 <xTimerCreateTimerTask+0x8c>)
 8011684:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011686:	4b0f      	ldr	r3, [pc, #60]	; (80116c4 <xTimerCreateTimerTask+0x8c>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d001      	beq.n	8011692 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801168e:	2301      	movs	r3, #1
 8011690:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d10a      	bne.n	80116ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801169c:	f383 8811 	msr	BASEPRI, r3
 80116a0:	f3bf 8f6f 	isb	sy
 80116a4:	f3bf 8f4f 	dsb	sy
 80116a8:	613b      	str	r3, [r7, #16]
}
 80116aa:	bf00      	nop
 80116ac:	e7fe      	b.n	80116ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80116ae:	697b      	ldr	r3, [r7, #20]
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3718      	adds	r7, #24
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	200011cc 	.word	0x200011cc
 80116bc:	08018484 	.word	0x08018484
 80116c0:	080117fd 	.word	0x080117fd
 80116c4:	200011d0 	.word	0x200011d0

080116c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b08a      	sub	sp, #40	; 0x28
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	60f8      	str	r0, [r7, #12]
 80116d0:	60b9      	str	r1, [r7, #8]
 80116d2:	607a      	str	r2, [r7, #4]
 80116d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80116d6:	2300      	movs	r3, #0
 80116d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d10a      	bne.n	80116f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80116e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e4:	f383 8811 	msr	BASEPRI, r3
 80116e8:	f3bf 8f6f 	isb	sy
 80116ec:	f3bf 8f4f 	dsb	sy
 80116f0:	623b      	str	r3, [r7, #32]
}
 80116f2:	bf00      	nop
 80116f4:	e7fe      	b.n	80116f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80116f6:	4b1a      	ldr	r3, [pc, #104]	; (8011760 <xTimerGenericCommand+0x98>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d02a      	beq.n	8011754 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	2b05      	cmp	r3, #5
 801170e:	dc18      	bgt.n	8011742 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011710:	f7ff fdb4 	bl	801127c <xTaskGetSchedulerState>
 8011714:	4603      	mov	r3, r0
 8011716:	2b02      	cmp	r3, #2
 8011718:	d109      	bne.n	801172e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801171a:	4b11      	ldr	r3, [pc, #68]	; (8011760 <xTimerGenericCommand+0x98>)
 801171c:	6818      	ldr	r0, [r3, #0]
 801171e:	f107 0110 	add.w	r1, r7, #16
 8011722:	2300      	movs	r3, #0
 8011724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011726:	f7fe fa07 	bl	800fb38 <xQueueGenericSend>
 801172a:	6278      	str	r0, [r7, #36]	; 0x24
 801172c:	e012      	b.n	8011754 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801172e:	4b0c      	ldr	r3, [pc, #48]	; (8011760 <xTimerGenericCommand+0x98>)
 8011730:	6818      	ldr	r0, [r3, #0]
 8011732:	f107 0110 	add.w	r1, r7, #16
 8011736:	2300      	movs	r3, #0
 8011738:	2200      	movs	r2, #0
 801173a:	f7fe f9fd 	bl	800fb38 <xQueueGenericSend>
 801173e:	6278      	str	r0, [r7, #36]	; 0x24
 8011740:	e008      	b.n	8011754 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011742:	4b07      	ldr	r3, [pc, #28]	; (8011760 <xTimerGenericCommand+0x98>)
 8011744:	6818      	ldr	r0, [r3, #0]
 8011746:	f107 0110 	add.w	r1, r7, #16
 801174a:	2300      	movs	r3, #0
 801174c:	683a      	ldr	r2, [r7, #0]
 801174e:	f7fe faf1 	bl	800fd34 <xQueueGenericSendFromISR>
 8011752:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011756:	4618      	mov	r0, r3
 8011758:	3728      	adds	r7, #40	; 0x28
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	200011cc 	.word	0x200011cc

08011764 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b088      	sub	sp, #32
 8011768:	af02      	add	r7, sp, #8
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801176e:	4b22      	ldr	r3, [pc, #136]	; (80117f8 <prvProcessExpiredTimer+0x94>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	68db      	ldr	r3, [r3, #12]
 8011776:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	3304      	adds	r3, #4
 801177c:	4618      	mov	r0, r3
 801177e:	f7fe f809 	bl	800f794 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011788:	f003 0304 	and.w	r3, r3, #4
 801178c:	2b00      	cmp	r3, #0
 801178e:	d022      	beq.n	80117d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	699a      	ldr	r2, [r3, #24]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	18d1      	adds	r1, r2, r3
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	683a      	ldr	r2, [r7, #0]
 801179c:	6978      	ldr	r0, [r7, #20]
 801179e:	f000 f8d1 	bl	8011944 <prvInsertTimerInActiveList>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d01f      	beq.n	80117e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80117a8:	2300      	movs	r3, #0
 80117aa:	9300      	str	r3, [sp, #0]
 80117ac:	2300      	movs	r3, #0
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	2100      	movs	r1, #0
 80117b2:	6978      	ldr	r0, [r7, #20]
 80117b4:	f7ff ff88 	bl	80116c8 <xTimerGenericCommand>
 80117b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d113      	bne.n	80117e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80117c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117c4:	f383 8811 	msr	BASEPRI, r3
 80117c8:	f3bf 8f6f 	isb	sy
 80117cc:	f3bf 8f4f 	dsb	sy
 80117d0:	60fb      	str	r3, [r7, #12]
}
 80117d2:	bf00      	nop
 80117d4:	e7fe      	b.n	80117d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80117dc:	f023 0301 	bic.w	r3, r3, #1
 80117e0:	b2da      	uxtb	r2, r3
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	6a1b      	ldr	r3, [r3, #32]
 80117ec:	6978      	ldr	r0, [r7, #20]
 80117ee:	4798      	blx	r3
}
 80117f0:	bf00      	nop
 80117f2:	3718      	adds	r7, #24
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}
 80117f8:	200011c4 	.word	0x200011c4

080117fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b084      	sub	sp, #16
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011804:	f107 0308 	add.w	r3, r7, #8
 8011808:	4618      	mov	r0, r3
 801180a:	f000 f857 	bl	80118bc <prvGetNextExpireTime>
 801180e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	4619      	mov	r1, r3
 8011814:	68f8      	ldr	r0, [r7, #12]
 8011816:	f000 f803 	bl	8011820 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801181a:	f000 f8d5 	bl	80119c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801181e:	e7f1      	b.n	8011804 <prvTimerTask+0x8>

08011820 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b084      	sub	sp, #16
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801182a:	f7ff f93b 	bl	8010aa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801182e:	f107 0308 	add.w	r3, r7, #8
 8011832:	4618      	mov	r0, r3
 8011834:	f000 f866 	bl	8011904 <prvSampleTimeNow>
 8011838:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d130      	bne.n	80118a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d10a      	bne.n	801185c <prvProcessTimerOrBlockTask+0x3c>
 8011846:	687a      	ldr	r2, [r7, #4]
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	429a      	cmp	r2, r3
 801184c:	d806      	bhi.n	801185c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801184e:	f7ff f937 	bl	8010ac0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011852:	68f9      	ldr	r1, [r7, #12]
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f7ff ff85 	bl	8011764 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801185a:	e024      	b.n	80118a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d008      	beq.n	8011874 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011862:	4b13      	ldr	r3, [pc, #76]	; (80118b0 <prvProcessTimerOrBlockTask+0x90>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d101      	bne.n	8011870 <prvProcessTimerOrBlockTask+0x50>
 801186c:	2301      	movs	r3, #1
 801186e:	e000      	b.n	8011872 <prvProcessTimerOrBlockTask+0x52>
 8011870:	2300      	movs	r3, #0
 8011872:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011874:	4b0f      	ldr	r3, [pc, #60]	; (80118b4 <prvProcessTimerOrBlockTask+0x94>)
 8011876:	6818      	ldr	r0, [r3, #0]
 8011878:	687a      	ldr	r2, [r7, #4]
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	1ad3      	subs	r3, r2, r3
 801187e:	683a      	ldr	r2, [r7, #0]
 8011880:	4619      	mov	r1, r3
 8011882:	f7fe fe7f 	bl	8010584 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011886:	f7ff f91b 	bl	8010ac0 <xTaskResumeAll>
 801188a:	4603      	mov	r3, r0
 801188c:	2b00      	cmp	r3, #0
 801188e:	d10a      	bne.n	80118a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011890:	4b09      	ldr	r3, [pc, #36]	; (80118b8 <prvProcessTimerOrBlockTask+0x98>)
 8011892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011896:	601a      	str	r2, [r3, #0]
 8011898:	f3bf 8f4f 	dsb	sy
 801189c:	f3bf 8f6f 	isb	sy
}
 80118a0:	e001      	b.n	80118a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80118a2:	f7ff f90d 	bl	8010ac0 <xTaskResumeAll>
}
 80118a6:	bf00      	nop
 80118a8:	3710      	adds	r7, #16
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	200011c8 	.word	0x200011c8
 80118b4:	200011cc 	.word	0x200011cc
 80118b8:	e000ed04 	.word	0xe000ed04

080118bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80118bc:	b480      	push	{r7}
 80118be:	b085      	sub	sp, #20
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80118c4:	4b0e      	ldr	r3, [pc, #56]	; (8011900 <prvGetNextExpireTime+0x44>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d101      	bne.n	80118d2 <prvGetNextExpireTime+0x16>
 80118ce:	2201      	movs	r2, #1
 80118d0:	e000      	b.n	80118d4 <prvGetNextExpireTime+0x18>
 80118d2:	2200      	movs	r2, #0
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d105      	bne.n	80118ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80118e0:	4b07      	ldr	r3, [pc, #28]	; (8011900 <prvGetNextExpireTime+0x44>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	68db      	ldr	r3, [r3, #12]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	60fb      	str	r3, [r7, #12]
 80118ea:	e001      	b.n	80118f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80118ec:	2300      	movs	r3, #0
 80118ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80118f0:	68fb      	ldr	r3, [r7, #12]
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3714      	adds	r7, #20
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr
 80118fe:	bf00      	nop
 8011900:	200011c4 	.word	0x200011c4

08011904 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b084      	sub	sp, #16
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801190c:	f7ff f976 	bl	8010bfc <xTaskGetTickCount>
 8011910:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011912:	4b0b      	ldr	r3, [pc, #44]	; (8011940 <prvSampleTimeNow+0x3c>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	68fa      	ldr	r2, [r7, #12]
 8011918:	429a      	cmp	r2, r3
 801191a:	d205      	bcs.n	8011928 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801191c:	f000 f936 	bl	8011b8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2201      	movs	r2, #1
 8011924:	601a      	str	r2, [r3, #0]
 8011926:	e002      	b.n	801192e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801192e:	4a04      	ldr	r2, [pc, #16]	; (8011940 <prvSampleTimeNow+0x3c>)
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011934:	68fb      	ldr	r3, [r7, #12]
}
 8011936:	4618      	mov	r0, r3
 8011938:	3710      	adds	r7, #16
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
 801193e:	bf00      	nop
 8011940:	200011d4 	.word	0x200011d4

08011944 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b086      	sub	sp, #24
 8011948:	af00      	add	r7, sp, #0
 801194a:	60f8      	str	r0, [r7, #12]
 801194c:	60b9      	str	r1, [r7, #8]
 801194e:	607a      	str	r2, [r7, #4]
 8011950:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011952:	2300      	movs	r3, #0
 8011954:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	68ba      	ldr	r2, [r7, #8]
 801195a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	68fa      	ldr	r2, [r7, #12]
 8011960:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011962:	68ba      	ldr	r2, [r7, #8]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	429a      	cmp	r2, r3
 8011968:	d812      	bhi.n	8011990 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801196a:	687a      	ldr	r2, [r7, #4]
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	1ad2      	subs	r2, r2, r3
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	699b      	ldr	r3, [r3, #24]
 8011974:	429a      	cmp	r2, r3
 8011976:	d302      	bcc.n	801197e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011978:	2301      	movs	r3, #1
 801197a:	617b      	str	r3, [r7, #20]
 801197c:	e01b      	b.n	80119b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801197e:	4b10      	ldr	r3, [pc, #64]	; (80119c0 <prvInsertTimerInActiveList+0x7c>)
 8011980:	681a      	ldr	r2, [r3, #0]
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	3304      	adds	r3, #4
 8011986:	4619      	mov	r1, r3
 8011988:	4610      	mov	r0, r2
 801198a:	f7fd feca 	bl	800f722 <vListInsert>
 801198e:	e012      	b.n	80119b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	429a      	cmp	r2, r3
 8011996:	d206      	bcs.n	80119a6 <prvInsertTimerInActiveList+0x62>
 8011998:	68ba      	ldr	r2, [r7, #8]
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	429a      	cmp	r2, r3
 801199e:	d302      	bcc.n	80119a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80119a0:	2301      	movs	r3, #1
 80119a2:	617b      	str	r3, [r7, #20]
 80119a4:	e007      	b.n	80119b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80119a6:	4b07      	ldr	r3, [pc, #28]	; (80119c4 <prvInsertTimerInActiveList+0x80>)
 80119a8:	681a      	ldr	r2, [r3, #0]
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	3304      	adds	r3, #4
 80119ae:	4619      	mov	r1, r3
 80119b0:	4610      	mov	r0, r2
 80119b2:	f7fd feb6 	bl	800f722 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80119b6:	697b      	ldr	r3, [r7, #20]
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3718      	adds	r7, #24
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	200011c8 	.word	0x200011c8
 80119c4:	200011c4 	.word	0x200011c4

080119c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b08e      	sub	sp, #56	; 0x38
 80119cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80119ce:	e0ca      	b.n	8011b66 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	da18      	bge.n	8011a08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80119d6:	1d3b      	adds	r3, r7, #4
 80119d8:	3304      	adds	r3, #4
 80119da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80119dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d10a      	bne.n	80119f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80119e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e6:	f383 8811 	msr	BASEPRI, r3
 80119ea:	f3bf 8f6f 	isb	sy
 80119ee:	f3bf 8f4f 	dsb	sy
 80119f2:	61fb      	str	r3, [r7, #28]
}
 80119f4:	bf00      	nop
 80119f6:	e7fe      	b.n	80119f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80119f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119fe:	6850      	ldr	r0, [r2, #4]
 8011a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a02:	6892      	ldr	r2, [r2, #8]
 8011a04:	4611      	mov	r1, r2
 8011a06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	f2c0 80aa 	blt.w	8011b64 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a16:	695b      	ldr	r3, [r3, #20]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d004      	beq.n	8011a26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a1e:	3304      	adds	r3, #4
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7fd feb7 	bl	800f794 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011a26:	463b      	mov	r3, r7
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7ff ff6b 	bl	8011904 <prvSampleTimeNow>
 8011a2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2b09      	cmp	r3, #9
 8011a34:	f200 8097 	bhi.w	8011b66 <prvProcessReceivedCommands+0x19e>
 8011a38:	a201      	add	r2, pc, #4	; (adr r2, 8011a40 <prvProcessReceivedCommands+0x78>)
 8011a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a3e:	bf00      	nop
 8011a40:	08011a69 	.word	0x08011a69
 8011a44:	08011a69 	.word	0x08011a69
 8011a48:	08011a69 	.word	0x08011a69
 8011a4c:	08011add 	.word	0x08011add
 8011a50:	08011af1 	.word	0x08011af1
 8011a54:	08011b3b 	.word	0x08011b3b
 8011a58:	08011a69 	.word	0x08011a69
 8011a5c:	08011a69 	.word	0x08011a69
 8011a60:	08011add 	.word	0x08011add
 8011a64:	08011af1 	.word	0x08011af1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a6e:	f043 0301 	orr.w	r3, r3, #1
 8011a72:	b2da      	uxtb	r2, r3
 8011a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011a7a:	68ba      	ldr	r2, [r7, #8]
 8011a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a7e:	699b      	ldr	r3, [r3, #24]
 8011a80:	18d1      	adds	r1, r2, r3
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a88:	f7ff ff5c 	bl	8011944 <prvInsertTimerInActiveList>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d069      	beq.n	8011b66 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a94:	6a1b      	ldr	r3, [r3, #32]
 8011a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011aa0:	f003 0304 	and.w	r3, r3, #4
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d05e      	beq.n	8011b66 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011aa8:	68ba      	ldr	r2, [r7, #8]
 8011aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aac:	699b      	ldr	r3, [r3, #24]
 8011aae:	441a      	add	r2, r3
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	9300      	str	r3, [sp, #0]
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	2100      	movs	r1, #0
 8011ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011aba:	f7ff fe05 	bl	80116c8 <xTimerGenericCommand>
 8011abe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011ac0:	6a3b      	ldr	r3, [r7, #32]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d14f      	bne.n	8011b66 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aca:	f383 8811 	msr	BASEPRI, r3
 8011ace:	f3bf 8f6f 	isb	sy
 8011ad2:	f3bf 8f4f 	dsb	sy
 8011ad6:	61bb      	str	r3, [r7, #24]
}
 8011ad8:	bf00      	nop
 8011ada:	e7fe      	b.n	8011ada <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ae2:	f023 0301 	bic.w	r3, r3, #1
 8011ae6:	b2da      	uxtb	r2, r3
 8011ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011aee:	e03a      	b.n	8011b66 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011af6:	f043 0301 	orr.w	r3, r3, #1
 8011afa:	b2da      	uxtb	r2, r3
 8011afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011b02:	68ba      	ldr	r2, [r7, #8]
 8011b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b0a:	699b      	ldr	r3, [r3, #24]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d10a      	bne.n	8011b26 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b14:	f383 8811 	msr	BASEPRI, r3
 8011b18:	f3bf 8f6f 	isb	sy
 8011b1c:	f3bf 8f4f 	dsb	sy
 8011b20:	617b      	str	r3, [r7, #20]
}
 8011b22:	bf00      	nop
 8011b24:	e7fe      	b.n	8011b24 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b28:	699a      	ldr	r2, [r3, #24]
 8011b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2c:	18d1      	adds	r1, r2, r3
 8011b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b34:	f7ff ff06 	bl	8011944 <prvInsertTimerInActiveList>
					break;
 8011b38:	e015      	b.n	8011b66 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b40:	f003 0302 	and.w	r3, r3, #2
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d103      	bne.n	8011b50 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b4a:	f000 fbe1 	bl	8012310 <vPortFree>
 8011b4e:	e00a      	b.n	8011b66 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b56:	f023 0301 	bic.w	r3, r3, #1
 8011b5a:	b2da      	uxtb	r2, r3
 8011b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011b62:	e000      	b.n	8011b66 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011b64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011b66:	4b08      	ldr	r3, [pc, #32]	; (8011b88 <prvProcessReceivedCommands+0x1c0>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	1d39      	adds	r1, r7, #4
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7fe f97c 	bl	800fe6c <xQueueReceive>
 8011b74:	4603      	mov	r3, r0
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	f47f af2a 	bne.w	80119d0 <prvProcessReceivedCommands+0x8>
	}
}
 8011b7c:	bf00      	nop
 8011b7e:	bf00      	nop
 8011b80:	3730      	adds	r7, #48	; 0x30
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop
 8011b88:	200011cc 	.word	0x200011cc

08011b8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b088      	sub	sp, #32
 8011b90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011b92:	e048      	b.n	8011c26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b94:	4b2d      	ldr	r3, [pc, #180]	; (8011c4c <prvSwitchTimerLists+0xc0>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	68db      	ldr	r3, [r3, #12]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b9e:	4b2b      	ldr	r3, [pc, #172]	; (8011c4c <prvSwitchTimerLists+0xc0>)
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	68db      	ldr	r3, [r3, #12]
 8011ba4:	68db      	ldr	r3, [r3, #12]
 8011ba6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	3304      	adds	r3, #4
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7fd fdf1 	bl	800f794 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	6a1b      	ldr	r3, [r3, #32]
 8011bb6:	68f8      	ldr	r0, [r7, #12]
 8011bb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011bc0:	f003 0304 	and.w	r3, r3, #4
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d02e      	beq.n	8011c26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	699b      	ldr	r3, [r3, #24]
 8011bcc:	693a      	ldr	r2, [r7, #16]
 8011bce:	4413      	add	r3, r2
 8011bd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011bd2:	68ba      	ldr	r2, [r7, #8]
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d90e      	bls.n	8011bf8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	68ba      	ldr	r2, [r7, #8]
 8011bde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	68fa      	ldr	r2, [r7, #12]
 8011be4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011be6:	4b19      	ldr	r3, [pc, #100]	; (8011c4c <prvSwitchTimerLists+0xc0>)
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	3304      	adds	r3, #4
 8011bee:	4619      	mov	r1, r3
 8011bf0:	4610      	mov	r0, r2
 8011bf2:	f7fd fd96 	bl	800f722 <vListInsert>
 8011bf6:	e016      	b.n	8011c26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	9300      	str	r3, [sp, #0]
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	693a      	ldr	r2, [r7, #16]
 8011c00:	2100      	movs	r1, #0
 8011c02:	68f8      	ldr	r0, [r7, #12]
 8011c04:	f7ff fd60 	bl	80116c8 <xTimerGenericCommand>
 8011c08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d10a      	bne.n	8011c26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c14:	f383 8811 	msr	BASEPRI, r3
 8011c18:	f3bf 8f6f 	isb	sy
 8011c1c:	f3bf 8f4f 	dsb	sy
 8011c20:	603b      	str	r3, [r7, #0]
}
 8011c22:	bf00      	nop
 8011c24:	e7fe      	b.n	8011c24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011c26:	4b09      	ldr	r3, [pc, #36]	; (8011c4c <prvSwitchTimerLists+0xc0>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d1b1      	bne.n	8011b94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011c30:	4b06      	ldr	r3, [pc, #24]	; (8011c4c <prvSwitchTimerLists+0xc0>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011c36:	4b06      	ldr	r3, [pc, #24]	; (8011c50 <prvSwitchTimerLists+0xc4>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	4a04      	ldr	r2, [pc, #16]	; (8011c4c <prvSwitchTimerLists+0xc0>)
 8011c3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011c3e:	4a04      	ldr	r2, [pc, #16]	; (8011c50 <prvSwitchTimerLists+0xc4>)
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	6013      	str	r3, [r2, #0]
}
 8011c44:	bf00      	nop
 8011c46:	3718      	adds	r7, #24
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	200011c4 	.word	0x200011c4
 8011c50:	200011c8 	.word	0x200011c8

08011c54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011c5a:	f000 f96b 	bl	8011f34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011c5e:	4b15      	ldr	r3, [pc, #84]	; (8011cb4 <prvCheckForValidListAndQueue+0x60>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d120      	bne.n	8011ca8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011c66:	4814      	ldr	r0, [pc, #80]	; (8011cb8 <prvCheckForValidListAndQueue+0x64>)
 8011c68:	f7fd fd0a 	bl	800f680 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011c6c:	4813      	ldr	r0, [pc, #76]	; (8011cbc <prvCheckForValidListAndQueue+0x68>)
 8011c6e:	f7fd fd07 	bl	800f680 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011c72:	4b13      	ldr	r3, [pc, #76]	; (8011cc0 <prvCheckForValidListAndQueue+0x6c>)
 8011c74:	4a10      	ldr	r2, [pc, #64]	; (8011cb8 <prvCheckForValidListAndQueue+0x64>)
 8011c76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011c78:	4b12      	ldr	r3, [pc, #72]	; (8011cc4 <prvCheckForValidListAndQueue+0x70>)
 8011c7a:	4a10      	ldr	r2, [pc, #64]	; (8011cbc <prvCheckForValidListAndQueue+0x68>)
 8011c7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011c7e:	2300      	movs	r3, #0
 8011c80:	9300      	str	r3, [sp, #0]
 8011c82:	4b11      	ldr	r3, [pc, #68]	; (8011cc8 <prvCheckForValidListAndQueue+0x74>)
 8011c84:	4a11      	ldr	r2, [pc, #68]	; (8011ccc <prvCheckForValidListAndQueue+0x78>)
 8011c86:	2110      	movs	r1, #16
 8011c88:	200a      	movs	r0, #10
 8011c8a:	f7fd fe15 	bl	800f8b8 <xQueueGenericCreateStatic>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	4a08      	ldr	r2, [pc, #32]	; (8011cb4 <prvCheckForValidListAndQueue+0x60>)
 8011c92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011c94:	4b07      	ldr	r3, [pc, #28]	; (8011cb4 <prvCheckForValidListAndQueue+0x60>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d005      	beq.n	8011ca8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011c9c:	4b05      	ldr	r3, [pc, #20]	; (8011cb4 <prvCheckForValidListAndQueue+0x60>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	490b      	ldr	r1, [pc, #44]	; (8011cd0 <prvCheckForValidListAndQueue+0x7c>)
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7fe fc1a 	bl	80104dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011ca8:	f000 f974 	bl	8011f94 <vPortExitCritical>
}
 8011cac:	bf00      	nop
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}
 8011cb2:	bf00      	nop
 8011cb4:	200011cc 	.word	0x200011cc
 8011cb8:	2000119c 	.word	0x2000119c
 8011cbc:	200011b0 	.word	0x200011b0
 8011cc0:	200011c4 	.word	0x200011c4
 8011cc4:	200011c8 	.word	0x200011c8
 8011cc8:	20001278 	.word	0x20001278
 8011ccc:	200011d8 	.word	0x200011d8
 8011cd0:	0801848c 	.word	0x0801848c

08011cd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011cd4:	b480      	push	{r7}
 8011cd6:	b085      	sub	sp, #20
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	60f8      	str	r0, [r7, #12]
 8011cdc:	60b9      	str	r1, [r7, #8]
 8011cde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	3b04      	subs	r3, #4
 8011ce4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	3b04      	subs	r3, #4
 8011cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	f023 0201 	bic.w	r2, r3, #1
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	3b04      	subs	r3, #4
 8011d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011d04:	4a0c      	ldr	r2, [pc, #48]	; (8011d38 <pxPortInitialiseStack+0x64>)
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	3b14      	subs	r3, #20
 8011d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011d10:	687a      	ldr	r2, [r7, #4]
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	3b04      	subs	r3, #4
 8011d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	f06f 0202 	mvn.w	r2, #2
 8011d22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	3b20      	subs	r3, #32
 8011d28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3714      	adds	r7, #20
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr
 8011d38:	08011d3d 	.word	0x08011d3d

08011d3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b085      	sub	sp, #20
 8011d40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011d42:	2300      	movs	r3, #0
 8011d44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011d46:	4b12      	ldr	r3, [pc, #72]	; (8011d90 <prvTaskExitError+0x54>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d4e:	d00a      	beq.n	8011d66 <prvTaskExitError+0x2a>
	__asm volatile
 8011d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d54:	f383 8811 	msr	BASEPRI, r3
 8011d58:	f3bf 8f6f 	isb	sy
 8011d5c:	f3bf 8f4f 	dsb	sy
 8011d60:	60fb      	str	r3, [r7, #12]
}
 8011d62:	bf00      	nop
 8011d64:	e7fe      	b.n	8011d64 <prvTaskExitError+0x28>
	__asm volatile
 8011d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d6a:	f383 8811 	msr	BASEPRI, r3
 8011d6e:	f3bf 8f6f 	isb	sy
 8011d72:	f3bf 8f4f 	dsb	sy
 8011d76:	60bb      	str	r3, [r7, #8]
}
 8011d78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011d7a:	bf00      	nop
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d0fc      	beq.n	8011d7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011d82:	bf00      	nop
 8011d84:	bf00      	nop
 8011d86:	3714      	adds	r7, #20
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8e:	4770      	bx	lr
 8011d90:	20000134 	.word	0x20000134
	...

08011da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011da0:	4b07      	ldr	r3, [pc, #28]	; (8011dc0 <pxCurrentTCBConst2>)
 8011da2:	6819      	ldr	r1, [r3, #0]
 8011da4:	6808      	ldr	r0, [r1, #0]
 8011da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011daa:	f380 8809 	msr	PSP, r0
 8011dae:	f3bf 8f6f 	isb	sy
 8011db2:	f04f 0000 	mov.w	r0, #0
 8011db6:	f380 8811 	msr	BASEPRI, r0
 8011dba:	4770      	bx	lr
 8011dbc:	f3af 8000 	nop.w

08011dc0 <pxCurrentTCBConst2>:
 8011dc0:	20000c9c 	.word	0x20000c9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011dc4:	bf00      	nop
 8011dc6:	bf00      	nop

08011dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011dc8:	4808      	ldr	r0, [pc, #32]	; (8011dec <prvPortStartFirstTask+0x24>)
 8011dca:	6800      	ldr	r0, [r0, #0]
 8011dcc:	6800      	ldr	r0, [r0, #0]
 8011dce:	f380 8808 	msr	MSP, r0
 8011dd2:	f04f 0000 	mov.w	r0, #0
 8011dd6:	f380 8814 	msr	CONTROL, r0
 8011dda:	b662      	cpsie	i
 8011ddc:	b661      	cpsie	f
 8011dde:	f3bf 8f4f 	dsb	sy
 8011de2:	f3bf 8f6f 	isb	sy
 8011de6:	df00      	svc	0
 8011de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011dea:	bf00      	nop
 8011dec:	e000ed08 	.word	0xe000ed08

08011df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b086      	sub	sp, #24
 8011df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011df6:	4b46      	ldr	r3, [pc, #280]	; (8011f10 <xPortStartScheduler+0x120>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	4a46      	ldr	r2, [pc, #280]	; (8011f14 <xPortStartScheduler+0x124>)
 8011dfc:	4293      	cmp	r3, r2
 8011dfe:	d10a      	bne.n	8011e16 <xPortStartScheduler+0x26>
	__asm volatile
 8011e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e04:	f383 8811 	msr	BASEPRI, r3
 8011e08:	f3bf 8f6f 	isb	sy
 8011e0c:	f3bf 8f4f 	dsb	sy
 8011e10:	613b      	str	r3, [r7, #16]
}
 8011e12:	bf00      	nop
 8011e14:	e7fe      	b.n	8011e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011e16:	4b3e      	ldr	r3, [pc, #248]	; (8011f10 <xPortStartScheduler+0x120>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4a3f      	ldr	r2, [pc, #252]	; (8011f18 <xPortStartScheduler+0x128>)
 8011e1c:	4293      	cmp	r3, r2
 8011e1e:	d10a      	bne.n	8011e36 <xPortStartScheduler+0x46>
	__asm volatile
 8011e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e24:	f383 8811 	msr	BASEPRI, r3
 8011e28:	f3bf 8f6f 	isb	sy
 8011e2c:	f3bf 8f4f 	dsb	sy
 8011e30:	60fb      	str	r3, [r7, #12]
}
 8011e32:	bf00      	nop
 8011e34:	e7fe      	b.n	8011e34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011e36:	4b39      	ldr	r3, [pc, #228]	; (8011f1c <xPortStartScheduler+0x12c>)
 8011e38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	781b      	ldrb	r3, [r3, #0]
 8011e3e:	b2db      	uxtb	r3, r3
 8011e40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011e42:	697b      	ldr	r3, [r7, #20]
 8011e44:	22ff      	movs	r2, #255	; 0xff
 8011e46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011e48:	697b      	ldr	r3, [r7, #20]
 8011e4a:	781b      	ldrb	r3, [r3, #0]
 8011e4c:	b2db      	uxtb	r3, r3
 8011e4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011e50:	78fb      	ldrb	r3, [r7, #3]
 8011e52:	b2db      	uxtb	r3, r3
 8011e54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011e58:	b2da      	uxtb	r2, r3
 8011e5a:	4b31      	ldr	r3, [pc, #196]	; (8011f20 <xPortStartScheduler+0x130>)
 8011e5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011e5e:	4b31      	ldr	r3, [pc, #196]	; (8011f24 <xPortStartScheduler+0x134>)
 8011e60:	2207      	movs	r2, #7
 8011e62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e64:	e009      	b.n	8011e7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011e66:	4b2f      	ldr	r3, [pc, #188]	; (8011f24 <xPortStartScheduler+0x134>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	3b01      	subs	r3, #1
 8011e6c:	4a2d      	ldr	r2, [pc, #180]	; (8011f24 <xPortStartScheduler+0x134>)
 8011e6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011e70:	78fb      	ldrb	r3, [r7, #3]
 8011e72:	b2db      	uxtb	r3, r3
 8011e74:	005b      	lsls	r3, r3, #1
 8011e76:	b2db      	uxtb	r3, r3
 8011e78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e7a:	78fb      	ldrb	r3, [r7, #3]
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e82:	2b80      	cmp	r3, #128	; 0x80
 8011e84:	d0ef      	beq.n	8011e66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011e86:	4b27      	ldr	r3, [pc, #156]	; (8011f24 <xPortStartScheduler+0x134>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	f1c3 0307 	rsb	r3, r3, #7
 8011e8e:	2b04      	cmp	r3, #4
 8011e90:	d00a      	beq.n	8011ea8 <xPortStartScheduler+0xb8>
	__asm volatile
 8011e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e96:	f383 8811 	msr	BASEPRI, r3
 8011e9a:	f3bf 8f6f 	isb	sy
 8011e9e:	f3bf 8f4f 	dsb	sy
 8011ea2:	60bb      	str	r3, [r7, #8]
}
 8011ea4:	bf00      	nop
 8011ea6:	e7fe      	b.n	8011ea6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011ea8:	4b1e      	ldr	r3, [pc, #120]	; (8011f24 <xPortStartScheduler+0x134>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	021b      	lsls	r3, r3, #8
 8011eae:	4a1d      	ldr	r2, [pc, #116]	; (8011f24 <xPortStartScheduler+0x134>)
 8011eb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011eb2:	4b1c      	ldr	r3, [pc, #112]	; (8011f24 <xPortStartScheduler+0x134>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011eba:	4a1a      	ldr	r2, [pc, #104]	; (8011f24 <xPortStartScheduler+0x134>)
 8011ebc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	b2da      	uxtb	r2, r3
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011ec6:	4b18      	ldr	r3, [pc, #96]	; (8011f28 <xPortStartScheduler+0x138>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	4a17      	ldr	r2, [pc, #92]	; (8011f28 <xPortStartScheduler+0x138>)
 8011ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011ed0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011ed2:	4b15      	ldr	r3, [pc, #84]	; (8011f28 <xPortStartScheduler+0x138>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	4a14      	ldr	r2, [pc, #80]	; (8011f28 <xPortStartScheduler+0x138>)
 8011ed8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011edc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011ede:	f000 f8dd 	bl	801209c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011ee2:	4b12      	ldr	r3, [pc, #72]	; (8011f2c <xPortStartScheduler+0x13c>)
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011ee8:	f000 f8fc 	bl	80120e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011eec:	4b10      	ldr	r3, [pc, #64]	; (8011f30 <xPortStartScheduler+0x140>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	4a0f      	ldr	r2, [pc, #60]	; (8011f30 <xPortStartScheduler+0x140>)
 8011ef2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011ef6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011ef8:	f7ff ff66 	bl	8011dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011efc:	f7fe ff48 	bl	8010d90 <vTaskSwitchContext>
	prvTaskExitError();
 8011f00:	f7ff ff1c 	bl	8011d3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011f04:	2300      	movs	r3, #0
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	3718      	adds	r7, #24
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}
 8011f0e:	bf00      	nop
 8011f10:	e000ed00 	.word	0xe000ed00
 8011f14:	410fc271 	.word	0x410fc271
 8011f18:	410fc270 	.word	0x410fc270
 8011f1c:	e000e400 	.word	0xe000e400
 8011f20:	200012c8 	.word	0x200012c8
 8011f24:	200012cc 	.word	0x200012cc
 8011f28:	e000ed20 	.word	0xe000ed20
 8011f2c:	20000134 	.word	0x20000134
 8011f30:	e000ef34 	.word	0xe000ef34

08011f34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011f34:	b480      	push	{r7}
 8011f36:	b083      	sub	sp, #12
 8011f38:	af00      	add	r7, sp, #0
	__asm volatile
 8011f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f3e:	f383 8811 	msr	BASEPRI, r3
 8011f42:	f3bf 8f6f 	isb	sy
 8011f46:	f3bf 8f4f 	dsb	sy
 8011f4a:	607b      	str	r3, [r7, #4]
}
 8011f4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011f4e:	4b0f      	ldr	r3, [pc, #60]	; (8011f8c <vPortEnterCritical+0x58>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	3301      	adds	r3, #1
 8011f54:	4a0d      	ldr	r2, [pc, #52]	; (8011f8c <vPortEnterCritical+0x58>)
 8011f56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011f58:	4b0c      	ldr	r3, [pc, #48]	; (8011f8c <vPortEnterCritical+0x58>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	2b01      	cmp	r3, #1
 8011f5e:	d10f      	bne.n	8011f80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011f60:	4b0b      	ldr	r3, [pc, #44]	; (8011f90 <vPortEnterCritical+0x5c>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	b2db      	uxtb	r3, r3
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d00a      	beq.n	8011f80 <vPortEnterCritical+0x4c>
	__asm volatile
 8011f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f6e:	f383 8811 	msr	BASEPRI, r3
 8011f72:	f3bf 8f6f 	isb	sy
 8011f76:	f3bf 8f4f 	dsb	sy
 8011f7a:	603b      	str	r3, [r7, #0]
}
 8011f7c:	bf00      	nop
 8011f7e:	e7fe      	b.n	8011f7e <vPortEnterCritical+0x4a>
	}
}
 8011f80:	bf00      	nop
 8011f82:	370c      	adds	r7, #12
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr
 8011f8c:	20000134 	.word	0x20000134
 8011f90:	e000ed04 	.word	0xe000ed04

08011f94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011f94:	b480      	push	{r7}
 8011f96:	b083      	sub	sp, #12
 8011f98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011f9a:	4b12      	ldr	r3, [pc, #72]	; (8011fe4 <vPortExitCritical+0x50>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d10a      	bne.n	8011fb8 <vPortExitCritical+0x24>
	__asm volatile
 8011fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fa6:	f383 8811 	msr	BASEPRI, r3
 8011faa:	f3bf 8f6f 	isb	sy
 8011fae:	f3bf 8f4f 	dsb	sy
 8011fb2:	607b      	str	r3, [r7, #4]
}
 8011fb4:	bf00      	nop
 8011fb6:	e7fe      	b.n	8011fb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011fb8:	4b0a      	ldr	r3, [pc, #40]	; (8011fe4 <vPortExitCritical+0x50>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	3b01      	subs	r3, #1
 8011fbe:	4a09      	ldr	r2, [pc, #36]	; (8011fe4 <vPortExitCritical+0x50>)
 8011fc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011fc2:	4b08      	ldr	r3, [pc, #32]	; (8011fe4 <vPortExitCritical+0x50>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d105      	bne.n	8011fd6 <vPortExitCritical+0x42>
 8011fca:	2300      	movs	r3, #0
 8011fcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	f383 8811 	msr	BASEPRI, r3
}
 8011fd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011fd6:	bf00      	nop
 8011fd8:	370c      	adds	r7, #12
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe0:	4770      	bx	lr
 8011fe2:	bf00      	nop
 8011fe4:	20000134 	.word	0x20000134
	...

08011ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011ff0:	f3ef 8009 	mrs	r0, PSP
 8011ff4:	f3bf 8f6f 	isb	sy
 8011ff8:	4b15      	ldr	r3, [pc, #84]	; (8012050 <pxCurrentTCBConst>)
 8011ffa:	681a      	ldr	r2, [r3, #0]
 8011ffc:	f01e 0f10 	tst.w	lr, #16
 8012000:	bf08      	it	eq
 8012002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200a:	6010      	str	r0, [r2, #0]
 801200c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012014:	f380 8811 	msr	BASEPRI, r0
 8012018:	f3bf 8f4f 	dsb	sy
 801201c:	f3bf 8f6f 	isb	sy
 8012020:	f7fe feb6 	bl	8010d90 <vTaskSwitchContext>
 8012024:	f04f 0000 	mov.w	r0, #0
 8012028:	f380 8811 	msr	BASEPRI, r0
 801202c:	bc09      	pop	{r0, r3}
 801202e:	6819      	ldr	r1, [r3, #0]
 8012030:	6808      	ldr	r0, [r1, #0]
 8012032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012036:	f01e 0f10 	tst.w	lr, #16
 801203a:	bf08      	it	eq
 801203c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012040:	f380 8809 	msr	PSP, r0
 8012044:	f3bf 8f6f 	isb	sy
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop
 801204c:	f3af 8000 	nop.w

08012050 <pxCurrentTCBConst>:
 8012050:	20000c9c 	.word	0x20000c9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012054:	bf00      	nop
 8012056:	bf00      	nop

08012058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
	__asm volatile
 801205e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012062:	f383 8811 	msr	BASEPRI, r3
 8012066:	f3bf 8f6f 	isb	sy
 801206a:	f3bf 8f4f 	dsb	sy
 801206e:	607b      	str	r3, [r7, #4]
}
 8012070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012072:	f7fe fdd3 	bl	8010c1c <xTaskIncrementTick>
 8012076:	4603      	mov	r3, r0
 8012078:	2b00      	cmp	r3, #0
 801207a:	d003      	beq.n	8012084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801207c:	4b06      	ldr	r3, [pc, #24]	; (8012098 <xPortSysTickHandler+0x40>)
 801207e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012082:	601a      	str	r2, [r3, #0]
 8012084:	2300      	movs	r3, #0
 8012086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	f383 8811 	msr	BASEPRI, r3
}
 801208e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012090:	bf00      	nop
 8012092:	3708      	adds	r7, #8
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	e000ed04 	.word	0xe000ed04

0801209c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801209c:	b480      	push	{r7}
 801209e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80120a0:	4b0b      	ldr	r3, [pc, #44]	; (80120d0 <vPortSetupTimerInterrupt+0x34>)
 80120a2:	2200      	movs	r2, #0
 80120a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80120a6:	4b0b      	ldr	r3, [pc, #44]	; (80120d4 <vPortSetupTimerInterrupt+0x38>)
 80120a8:	2200      	movs	r2, #0
 80120aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80120ac:	4b0a      	ldr	r3, [pc, #40]	; (80120d8 <vPortSetupTimerInterrupt+0x3c>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	4a0a      	ldr	r2, [pc, #40]	; (80120dc <vPortSetupTimerInterrupt+0x40>)
 80120b2:	fba2 2303 	umull	r2, r3, r2, r3
 80120b6:	099b      	lsrs	r3, r3, #6
 80120b8:	4a09      	ldr	r2, [pc, #36]	; (80120e0 <vPortSetupTimerInterrupt+0x44>)
 80120ba:	3b01      	subs	r3, #1
 80120bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80120be:	4b04      	ldr	r3, [pc, #16]	; (80120d0 <vPortSetupTimerInterrupt+0x34>)
 80120c0:	2207      	movs	r2, #7
 80120c2:	601a      	str	r2, [r3, #0]
}
 80120c4:	bf00      	nop
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr
 80120ce:	bf00      	nop
 80120d0:	e000e010 	.word	0xe000e010
 80120d4:	e000e018 	.word	0xe000e018
 80120d8:	20000000 	.word	0x20000000
 80120dc:	10624dd3 	.word	0x10624dd3
 80120e0:	e000e014 	.word	0xe000e014

080120e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80120e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80120f4 <vPortEnableVFP+0x10>
 80120e8:	6801      	ldr	r1, [r0, #0]
 80120ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80120ee:	6001      	str	r1, [r0, #0]
 80120f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80120f2:	bf00      	nop
 80120f4:	e000ed88 	.word	0xe000ed88

080120f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80120f8:	b480      	push	{r7}
 80120fa:	b085      	sub	sp, #20
 80120fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80120fe:	f3ef 8305 	mrs	r3, IPSR
 8012102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2b0f      	cmp	r3, #15
 8012108:	d914      	bls.n	8012134 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801210a:	4a17      	ldr	r2, [pc, #92]	; (8012168 <vPortValidateInterruptPriority+0x70>)
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	4413      	add	r3, r2
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012114:	4b15      	ldr	r3, [pc, #84]	; (801216c <vPortValidateInterruptPriority+0x74>)
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	7afa      	ldrb	r2, [r7, #11]
 801211a:	429a      	cmp	r2, r3
 801211c:	d20a      	bcs.n	8012134 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801211e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012122:	f383 8811 	msr	BASEPRI, r3
 8012126:	f3bf 8f6f 	isb	sy
 801212a:	f3bf 8f4f 	dsb	sy
 801212e:	607b      	str	r3, [r7, #4]
}
 8012130:	bf00      	nop
 8012132:	e7fe      	b.n	8012132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012134:	4b0e      	ldr	r3, [pc, #56]	; (8012170 <vPortValidateInterruptPriority+0x78>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801213c:	4b0d      	ldr	r3, [pc, #52]	; (8012174 <vPortValidateInterruptPriority+0x7c>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	429a      	cmp	r2, r3
 8012142:	d90a      	bls.n	801215a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012148:	f383 8811 	msr	BASEPRI, r3
 801214c:	f3bf 8f6f 	isb	sy
 8012150:	f3bf 8f4f 	dsb	sy
 8012154:	603b      	str	r3, [r7, #0]
}
 8012156:	bf00      	nop
 8012158:	e7fe      	b.n	8012158 <vPortValidateInterruptPriority+0x60>
	}
 801215a:	bf00      	nop
 801215c:	3714      	adds	r7, #20
 801215e:	46bd      	mov	sp, r7
 8012160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012164:	4770      	bx	lr
 8012166:	bf00      	nop
 8012168:	e000e3f0 	.word	0xe000e3f0
 801216c:	200012c8 	.word	0x200012c8
 8012170:	e000ed0c 	.word	0xe000ed0c
 8012174:	200012cc 	.word	0x200012cc

08012178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b08a      	sub	sp, #40	; 0x28
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012180:	2300      	movs	r3, #0
 8012182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012184:	f7fe fc8e 	bl	8010aa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012188:	4b5b      	ldr	r3, [pc, #364]	; (80122f8 <pvPortMalloc+0x180>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d101      	bne.n	8012194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012190:	f000 f920 	bl	80123d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012194:	4b59      	ldr	r3, [pc, #356]	; (80122fc <pvPortMalloc+0x184>)
 8012196:	681a      	ldr	r2, [r3, #0]
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	4013      	ands	r3, r2
 801219c:	2b00      	cmp	r3, #0
 801219e:	f040 8093 	bne.w	80122c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d01d      	beq.n	80121e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80121a8:	2208      	movs	r2, #8
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	4413      	add	r3, r2
 80121ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f003 0307 	and.w	r3, r3, #7
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d014      	beq.n	80121e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f023 0307 	bic.w	r3, r3, #7
 80121c0:	3308      	adds	r3, #8
 80121c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f003 0307 	and.w	r3, r3, #7
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d00a      	beq.n	80121e4 <pvPortMalloc+0x6c>
	__asm volatile
 80121ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d2:	f383 8811 	msr	BASEPRI, r3
 80121d6:	f3bf 8f6f 	isb	sy
 80121da:	f3bf 8f4f 	dsb	sy
 80121de:	617b      	str	r3, [r7, #20]
}
 80121e0:	bf00      	nop
 80121e2:	e7fe      	b.n	80121e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d06e      	beq.n	80122c8 <pvPortMalloc+0x150>
 80121ea:	4b45      	ldr	r3, [pc, #276]	; (8012300 <pvPortMalloc+0x188>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	687a      	ldr	r2, [r7, #4]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d869      	bhi.n	80122c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80121f4:	4b43      	ldr	r3, [pc, #268]	; (8012304 <pvPortMalloc+0x18c>)
 80121f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80121f8:	4b42      	ldr	r3, [pc, #264]	; (8012304 <pvPortMalloc+0x18c>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80121fe:	e004      	b.n	801220a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220c:	685b      	ldr	r3, [r3, #4]
 801220e:	687a      	ldr	r2, [r7, #4]
 8012210:	429a      	cmp	r2, r3
 8012212:	d903      	bls.n	801221c <pvPortMalloc+0xa4>
 8012214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d1f1      	bne.n	8012200 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801221c:	4b36      	ldr	r3, [pc, #216]	; (80122f8 <pvPortMalloc+0x180>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012222:	429a      	cmp	r2, r3
 8012224:	d050      	beq.n	80122c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012226:	6a3b      	ldr	r3, [r7, #32]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	2208      	movs	r2, #8
 801222c:	4413      	add	r3, r2
 801222e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012232:	681a      	ldr	r2, [r3, #0]
 8012234:	6a3b      	ldr	r3, [r7, #32]
 8012236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223a:	685a      	ldr	r2, [r3, #4]
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	1ad2      	subs	r2, r2, r3
 8012240:	2308      	movs	r3, #8
 8012242:	005b      	lsls	r3, r3, #1
 8012244:	429a      	cmp	r2, r3
 8012246:	d91f      	bls.n	8012288 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	4413      	add	r3, r2
 801224e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	f003 0307 	and.w	r3, r3, #7
 8012256:	2b00      	cmp	r3, #0
 8012258:	d00a      	beq.n	8012270 <pvPortMalloc+0xf8>
	__asm volatile
 801225a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801225e:	f383 8811 	msr	BASEPRI, r3
 8012262:	f3bf 8f6f 	isb	sy
 8012266:	f3bf 8f4f 	dsb	sy
 801226a:	613b      	str	r3, [r7, #16]
}
 801226c:	bf00      	nop
 801226e:	e7fe      	b.n	801226e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012272:	685a      	ldr	r2, [r3, #4]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	1ad2      	subs	r2, r2, r3
 8012278:	69bb      	ldr	r3, [r7, #24]
 801227a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227e:	687a      	ldr	r2, [r7, #4]
 8012280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012282:	69b8      	ldr	r0, [r7, #24]
 8012284:	f000 f908 	bl	8012498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012288:	4b1d      	ldr	r3, [pc, #116]	; (8012300 <pvPortMalloc+0x188>)
 801228a:	681a      	ldr	r2, [r3, #0]
 801228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	1ad3      	subs	r3, r2, r3
 8012292:	4a1b      	ldr	r2, [pc, #108]	; (8012300 <pvPortMalloc+0x188>)
 8012294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012296:	4b1a      	ldr	r3, [pc, #104]	; (8012300 <pvPortMalloc+0x188>)
 8012298:	681a      	ldr	r2, [r3, #0]
 801229a:	4b1b      	ldr	r3, [pc, #108]	; (8012308 <pvPortMalloc+0x190>)
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	429a      	cmp	r2, r3
 80122a0:	d203      	bcs.n	80122aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80122a2:	4b17      	ldr	r3, [pc, #92]	; (8012300 <pvPortMalloc+0x188>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	4a18      	ldr	r2, [pc, #96]	; (8012308 <pvPortMalloc+0x190>)
 80122a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80122aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ac:	685a      	ldr	r2, [r3, #4]
 80122ae:	4b13      	ldr	r3, [pc, #76]	; (80122fc <pvPortMalloc+0x184>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	431a      	orrs	r2, r3
 80122b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80122b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ba:	2200      	movs	r2, #0
 80122bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80122be:	4b13      	ldr	r3, [pc, #76]	; (801230c <pvPortMalloc+0x194>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	3301      	adds	r3, #1
 80122c4:	4a11      	ldr	r2, [pc, #68]	; (801230c <pvPortMalloc+0x194>)
 80122c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80122c8:	f7fe fbfa 	bl	8010ac0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80122cc:	69fb      	ldr	r3, [r7, #28]
 80122ce:	f003 0307 	and.w	r3, r3, #7
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d00a      	beq.n	80122ec <pvPortMalloc+0x174>
	__asm volatile
 80122d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122da:	f383 8811 	msr	BASEPRI, r3
 80122de:	f3bf 8f6f 	isb	sy
 80122e2:	f3bf 8f4f 	dsb	sy
 80122e6:	60fb      	str	r3, [r7, #12]
}
 80122e8:	bf00      	nop
 80122ea:	e7fe      	b.n	80122ea <pvPortMalloc+0x172>
	return pvReturn;
 80122ec:	69fb      	ldr	r3, [r7, #28]
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3728      	adds	r7, #40	; 0x28
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop
 80122f8:	20009b90 	.word	0x20009b90
 80122fc:	20009ba4 	.word	0x20009ba4
 8012300:	20009b94 	.word	0x20009b94
 8012304:	20009b88 	.word	0x20009b88
 8012308:	20009b98 	.word	0x20009b98
 801230c:	20009b9c 	.word	0x20009b9c

08012310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b086      	sub	sp, #24
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d04d      	beq.n	80123be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012322:	2308      	movs	r3, #8
 8012324:	425b      	negs	r3, r3
 8012326:	697a      	ldr	r2, [r7, #20]
 8012328:	4413      	add	r3, r2
 801232a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	685a      	ldr	r2, [r3, #4]
 8012334:	4b24      	ldr	r3, [pc, #144]	; (80123c8 <vPortFree+0xb8>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	4013      	ands	r3, r2
 801233a:	2b00      	cmp	r3, #0
 801233c:	d10a      	bne.n	8012354 <vPortFree+0x44>
	__asm volatile
 801233e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012342:	f383 8811 	msr	BASEPRI, r3
 8012346:	f3bf 8f6f 	isb	sy
 801234a:	f3bf 8f4f 	dsb	sy
 801234e:	60fb      	str	r3, [r7, #12]
}
 8012350:	bf00      	nop
 8012352:	e7fe      	b.n	8012352 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012354:	693b      	ldr	r3, [r7, #16]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d00a      	beq.n	8012372 <vPortFree+0x62>
	__asm volatile
 801235c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012360:	f383 8811 	msr	BASEPRI, r3
 8012364:	f3bf 8f6f 	isb	sy
 8012368:	f3bf 8f4f 	dsb	sy
 801236c:	60bb      	str	r3, [r7, #8]
}
 801236e:	bf00      	nop
 8012370:	e7fe      	b.n	8012370 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	685a      	ldr	r2, [r3, #4]
 8012376:	4b14      	ldr	r3, [pc, #80]	; (80123c8 <vPortFree+0xb8>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	4013      	ands	r3, r2
 801237c:	2b00      	cmp	r3, #0
 801237e:	d01e      	beq.n	80123be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012380:	693b      	ldr	r3, [r7, #16]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d11a      	bne.n	80123be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012388:	693b      	ldr	r3, [r7, #16]
 801238a:	685a      	ldr	r2, [r3, #4]
 801238c:	4b0e      	ldr	r3, [pc, #56]	; (80123c8 <vPortFree+0xb8>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	43db      	mvns	r3, r3
 8012392:	401a      	ands	r2, r3
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012398:	f7fe fb84 	bl	8010aa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	685a      	ldr	r2, [r3, #4]
 80123a0:	4b0a      	ldr	r3, [pc, #40]	; (80123cc <vPortFree+0xbc>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	4413      	add	r3, r2
 80123a6:	4a09      	ldr	r2, [pc, #36]	; (80123cc <vPortFree+0xbc>)
 80123a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80123aa:	6938      	ldr	r0, [r7, #16]
 80123ac:	f000 f874 	bl	8012498 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80123b0:	4b07      	ldr	r3, [pc, #28]	; (80123d0 <vPortFree+0xc0>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	3301      	adds	r3, #1
 80123b6:	4a06      	ldr	r2, [pc, #24]	; (80123d0 <vPortFree+0xc0>)
 80123b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80123ba:	f7fe fb81 	bl	8010ac0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80123be:	bf00      	nop
 80123c0:	3718      	adds	r7, #24
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
 80123c6:	bf00      	nop
 80123c8:	20009ba4 	.word	0x20009ba4
 80123cc:	20009b94 	.word	0x20009b94
 80123d0:	20009ba0 	.word	0x20009ba0

080123d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80123d4:	b480      	push	{r7}
 80123d6:	b085      	sub	sp, #20
 80123d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80123da:	f648 03b8 	movw	r3, #35000	; 0x88b8
 80123de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80123e0:	4b27      	ldr	r3, [pc, #156]	; (8012480 <prvHeapInit+0xac>)
 80123e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	f003 0307 	and.w	r3, r3, #7
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d00c      	beq.n	8012408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	3307      	adds	r3, #7
 80123f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	f023 0307 	bic.w	r3, r3, #7
 80123fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80123fc:	68ba      	ldr	r2, [r7, #8]
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	1ad3      	subs	r3, r2, r3
 8012402:	4a1f      	ldr	r2, [pc, #124]	; (8012480 <prvHeapInit+0xac>)
 8012404:	4413      	add	r3, r2
 8012406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801240c:	4a1d      	ldr	r2, [pc, #116]	; (8012484 <prvHeapInit+0xb0>)
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012412:	4b1c      	ldr	r3, [pc, #112]	; (8012484 <prvHeapInit+0xb0>)
 8012414:	2200      	movs	r2, #0
 8012416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	68ba      	ldr	r2, [r7, #8]
 801241c:	4413      	add	r3, r2
 801241e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012420:	2208      	movs	r2, #8
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	1a9b      	subs	r3, r3, r2
 8012426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	f023 0307 	bic.w	r3, r3, #7
 801242e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	4a15      	ldr	r2, [pc, #84]	; (8012488 <prvHeapInit+0xb4>)
 8012434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012436:	4b14      	ldr	r3, [pc, #80]	; (8012488 <prvHeapInit+0xb4>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	2200      	movs	r2, #0
 801243c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801243e:	4b12      	ldr	r3, [pc, #72]	; (8012488 <prvHeapInit+0xb4>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	2200      	movs	r2, #0
 8012444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	68fa      	ldr	r2, [r7, #12]
 801244e:	1ad2      	subs	r2, r2, r3
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012454:	4b0c      	ldr	r3, [pc, #48]	; (8012488 <prvHeapInit+0xb4>)
 8012456:	681a      	ldr	r2, [r3, #0]
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	685b      	ldr	r3, [r3, #4]
 8012460:	4a0a      	ldr	r2, [pc, #40]	; (801248c <prvHeapInit+0xb8>)
 8012462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	685b      	ldr	r3, [r3, #4]
 8012468:	4a09      	ldr	r2, [pc, #36]	; (8012490 <prvHeapInit+0xbc>)
 801246a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801246c:	4b09      	ldr	r3, [pc, #36]	; (8012494 <prvHeapInit+0xc0>)
 801246e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012472:	601a      	str	r2, [r3, #0]
}
 8012474:	bf00      	nop
 8012476:	3714      	adds	r7, #20
 8012478:	46bd      	mov	sp, r7
 801247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247e:	4770      	bx	lr
 8012480:	200012d0 	.word	0x200012d0
 8012484:	20009b88 	.word	0x20009b88
 8012488:	20009b90 	.word	0x20009b90
 801248c:	20009b98 	.word	0x20009b98
 8012490:	20009b94 	.word	0x20009b94
 8012494:	20009ba4 	.word	0x20009ba4

08012498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012498:	b480      	push	{r7}
 801249a:	b085      	sub	sp, #20
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80124a0:	4b28      	ldr	r3, [pc, #160]	; (8012544 <prvInsertBlockIntoFreeList+0xac>)
 80124a2:	60fb      	str	r3, [r7, #12]
 80124a4:	e002      	b.n	80124ac <prvInsertBlockIntoFreeList+0x14>
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	60fb      	str	r3, [r7, #12]
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	687a      	ldr	r2, [r7, #4]
 80124b2:	429a      	cmp	r2, r3
 80124b4:	d8f7      	bhi.n	80124a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	68ba      	ldr	r2, [r7, #8]
 80124c0:	4413      	add	r3, r2
 80124c2:	687a      	ldr	r2, [r7, #4]
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d108      	bne.n	80124da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	685a      	ldr	r2, [r3, #4]
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	441a      	add	r2, r3
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	685b      	ldr	r3, [r3, #4]
 80124e2:	68ba      	ldr	r2, [r7, #8]
 80124e4:	441a      	add	r2, r3
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d118      	bne.n	8012520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	681a      	ldr	r2, [r3, #0]
 80124f2:	4b15      	ldr	r3, [pc, #84]	; (8012548 <prvInsertBlockIntoFreeList+0xb0>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d00d      	beq.n	8012516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	685a      	ldr	r2, [r3, #4]
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	685b      	ldr	r3, [r3, #4]
 8012504:	441a      	add	r2, r3
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	681a      	ldr	r2, [r3, #0]
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	601a      	str	r2, [r3, #0]
 8012514:	e008      	b.n	8012528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012516:	4b0c      	ldr	r3, [pc, #48]	; (8012548 <prvInsertBlockIntoFreeList+0xb0>)
 8012518:	681a      	ldr	r2, [r3, #0]
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	601a      	str	r2, [r3, #0]
 801251e:	e003      	b.n	8012528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	681a      	ldr	r2, [r3, #0]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012528:	68fa      	ldr	r2, [r7, #12]
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	429a      	cmp	r2, r3
 801252e:	d002      	beq.n	8012536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	687a      	ldr	r2, [r7, #4]
 8012534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012536:	bf00      	nop
 8012538:	3714      	adds	r7, #20
 801253a:	46bd      	mov	sp, r7
 801253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012540:	4770      	bx	lr
 8012542:	bf00      	nop
 8012544:	20009b88 	.word	0x20009b88
 8012548:	20009b90 	.word	0x20009b90

0801254c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012550:	2200      	movs	r2, #0
 8012552:	4912      	ldr	r1, [pc, #72]	; (801259c <MX_USB_DEVICE_Init+0x50>)
 8012554:	4812      	ldr	r0, [pc, #72]	; (80125a0 <MX_USB_DEVICE_Init+0x54>)
 8012556:	f7f8 ffdb 	bl	800b510 <USBD_Init>
 801255a:	4603      	mov	r3, r0
 801255c:	2b00      	cmp	r3, #0
 801255e:	d001      	beq.n	8012564 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012560:	f7f0 fbf4 	bl	8002d4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012564:	490f      	ldr	r1, [pc, #60]	; (80125a4 <MX_USB_DEVICE_Init+0x58>)
 8012566:	480e      	ldr	r0, [pc, #56]	; (80125a0 <MX_USB_DEVICE_Init+0x54>)
 8012568:	f7f9 f802 	bl	800b570 <USBD_RegisterClass>
 801256c:	4603      	mov	r3, r0
 801256e:	2b00      	cmp	r3, #0
 8012570:	d001      	beq.n	8012576 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012572:	f7f0 fbeb 	bl	8002d4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012576:	490c      	ldr	r1, [pc, #48]	; (80125a8 <MX_USB_DEVICE_Init+0x5c>)
 8012578:	4809      	ldr	r0, [pc, #36]	; (80125a0 <MX_USB_DEVICE_Init+0x54>)
 801257a:	f7f8 ff53 	bl	800b424 <USBD_CDC_RegisterInterface>
 801257e:	4603      	mov	r3, r0
 8012580:	2b00      	cmp	r3, #0
 8012582:	d001      	beq.n	8012588 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012584:	f7f0 fbe2 	bl	8002d4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012588:	4805      	ldr	r0, [pc, #20]	; (80125a0 <MX_USB_DEVICE_Init+0x54>)
 801258a:	f7f9 f818 	bl	800b5be <USBD_Start>
 801258e:	4603      	mov	r3, r0
 8012590:	2b00      	cmp	r3, #0
 8012592:	d001      	beq.n	8012598 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012594:	f7f0 fbda 	bl	8002d4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012598:	bf00      	nop
 801259a:	bd80      	pop	{r7, pc}
 801259c:	2000014c 	.word	0x2000014c
 80125a0:	2000b248 	.word	0x2000b248
 80125a4:	20000030 	.word	0x20000030
 80125a8:	20000138 	.word	0x20000138

080125ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80125b0:	2200      	movs	r2, #0
 80125b2:	4905      	ldr	r1, [pc, #20]	; (80125c8 <CDC_Init_FS+0x1c>)
 80125b4:	4805      	ldr	r0, [pc, #20]	; (80125cc <CDC_Init_FS+0x20>)
 80125b6:	f7f8 ff4a 	bl	800b44e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80125ba:	4905      	ldr	r1, [pc, #20]	; (80125d0 <CDC_Init_FS+0x24>)
 80125bc:	4803      	ldr	r0, [pc, #12]	; (80125cc <CDC_Init_FS+0x20>)
 80125be:	f7f8 ff64 	bl	800b48a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80125c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80125c4:	4618      	mov	r0, r3
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	2000bd18 	.word	0x2000bd18
 80125cc:	2000b248 	.word	0x2000b248
 80125d0:	2000b518 	.word	0x2000b518

080125d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80125d4:	b480      	push	{r7}
 80125d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80125d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80125da:	4618      	mov	r0, r3
 80125dc:	46bd      	mov	sp, r7
 80125de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e2:	4770      	bx	lr

080125e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80125e4:	b480      	push	{r7}
 80125e6:	b083      	sub	sp, #12
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	4603      	mov	r3, r0
 80125ec:	6039      	str	r1, [r7, #0]
 80125ee:	71fb      	strb	r3, [r7, #7]
 80125f0:	4613      	mov	r3, r2
 80125f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80125f4:	79fb      	ldrb	r3, [r7, #7]
 80125f6:	2b23      	cmp	r3, #35	; 0x23
 80125f8:	d84a      	bhi.n	8012690 <CDC_Control_FS+0xac>
 80125fa:	a201      	add	r2, pc, #4	; (adr r2, 8012600 <CDC_Control_FS+0x1c>)
 80125fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012600:	08012691 	.word	0x08012691
 8012604:	08012691 	.word	0x08012691
 8012608:	08012691 	.word	0x08012691
 801260c:	08012691 	.word	0x08012691
 8012610:	08012691 	.word	0x08012691
 8012614:	08012691 	.word	0x08012691
 8012618:	08012691 	.word	0x08012691
 801261c:	08012691 	.word	0x08012691
 8012620:	08012691 	.word	0x08012691
 8012624:	08012691 	.word	0x08012691
 8012628:	08012691 	.word	0x08012691
 801262c:	08012691 	.word	0x08012691
 8012630:	08012691 	.word	0x08012691
 8012634:	08012691 	.word	0x08012691
 8012638:	08012691 	.word	0x08012691
 801263c:	08012691 	.word	0x08012691
 8012640:	08012691 	.word	0x08012691
 8012644:	08012691 	.word	0x08012691
 8012648:	08012691 	.word	0x08012691
 801264c:	08012691 	.word	0x08012691
 8012650:	08012691 	.word	0x08012691
 8012654:	08012691 	.word	0x08012691
 8012658:	08012691 	.word	0x08012691
 801265c:	08012691 	.word	0x08012691
 8012660:	08012691 	.word	0x08012691
 8012664:	08012691 	.word	0x08012691
 8012668:	08012691 	.word	0x08012691
 801266c:	08012691 	.word	0x08012691
 8012670:	08012691 	.word	0x08012691
 8012674:	08012691 	.word	0x08012691
 8012678:	08012691 	.word	0x08012691
 801267c:	08012691 	.word	0x08012691
 8012680:	08012691 	.word	0x08012691
 8012684:	08012691 	.word	0x08012691
 8012688:	08012691 	.word	0x08012691
 801268c:	08012691 	.word	0x08012691
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012690:	bf00      	nop
  }

  return (USBD_OK);
 8012692:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012694:	4618      	mov	r0, r3
 8012696:	370c      	adds	r7, #12
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80126aa:	6879      	ldr	r1, [r7, #4]
 80126ac:	4805      	ldr	r0, [pc, #20]	; (80126c4 <CDC_Receive_FS+0x24>)
 80126ae:	f7f8 feec 	bl	800b48a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80126b2:	4804      	ldr	r0, [pc, #16]	; (80126c4 <CDC_Receive_FS+0x24>)
 80126b4:	f7f8 ff02 	bl	800b4bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80126b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80126ba:	4618      	mov	r0, r3
 80126bc:	3708      	adds	r7, #8
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	2000b248 	.word	0x2000b248

080126c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80126c8:	b480      	push	{r7}
 80126ca:	b087      	sub	sp, #28
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	60f8      	str	r0, [r7, #12]
 80126d0:	60b9      	str	r1, [r7, #8]
 80126d2:	4613      	mov	r3, r2
 80126d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80126d6:	2300      	movs	r3, #0
 80126d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80126da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126de:	4618      	mov	r0, r3
 80126e0:	371c      	adds	r7, #28
 80126e2:	46bd      	mov	sp, r7
 80126e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e8:	4770      	bx	lr
	...

080126ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80126ec:	b480      	push	{r7}
 80126ee:	b083      	sub	sp, #12
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	4603      	mov	r3, r0
 80126f4:	6039      	str	r1, [r7, #0]
 80126f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	2212      	movs	r2, #18
 80126fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80126fe:	4b03      	ldr	r3, [pc, #12]	; (801270c <USBD_FS_DeviceDescriptor+0x20>)
}
 8012700:	4618      	mov	r0, r3
 8012702:	370c      	adds	r7, #12
 8012704:	46bd      	mov	sp, r7
 8012706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270a:	4770      	bx	lr
 801270c:	20000168 	.word	0x20000168

08012710 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012710:	b480      	push	{r7}
 8012712:	b083      	sub	sp, #12
 8012714:	af00      	add	r7, sp, #0
 8012716:	4603      	mov	r3, r0
 8012718:	6039      	str	r1, [r7, #0]
 801271a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	2204      	movs	r2, #4
 8012720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012722:	4b03      	ldr	r3, [pc, #12]	; (8012730 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012724:	4618      	mov	r0, r3
 8012726:	370c      	adds	r7, #12
 8012728:	46bd      	mov	sp, r7
 801272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272e:	4770      	bx	lr
 8012730:	2000017c 	.word	0x2000017c

08012734 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b082      	sub	sp, #8
 8012738:	af00      	add	r7, sp, #0
 801273a:	4603      	mov	r3, r0
 801273c:	6039      	str	r1, [r7, #0]
 801273e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012740:	79fb      	ldrb	r3, [r7, #7]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d105      	bne.n	8012752 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012746:	683a      	ldr	r2, [r7, #0]
 8012748:	4907      	ldr	r1, [pc, #28]	; (8012768 <USBD_FS_ProductStrDescriptor+0x34>)
 801274a:	4808      	ldr	r0, [pc, #32]	; (801276c <USBD_FS_ProductStrDescriptor+0x38>)
 801274c:	f7f9 ff69 	bl	800c622 <USBD_GetString>
 8012750:	e004      	b.n	801275c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012752:	683a      	ldr	r2, [r7, #0]
 8012754:	4904      	ldr	r1, [pc, #16]	; (8012768 <USBD_FS_ProductStrDescriptor+0x34>)
 8012756:	4805      	ldr	r0, [pc, #20]	; (801276c <USBD_FS_ProductStrDescriptor+0x38>)
 8012758:	f7f9 ff63 	bl	800c622 <USBD_GetString>
  }
  return USBD_StrDesc;
 801275c:	4b02      	ldr	r3, [pc, #8]	; (8012768 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801275e:	4618      	mov	r0, r3
 8012760:	3708      	adds	r7, #8
 8012762:	46bd      	mov	sp, r7
 8012764:	bd80      	pop	{r7, pc}
 8012766:	bf00      	nop
 8012768:	2000c518 	.word	0x2000c518
 801276c:	08018494 	.word	0x08018494

08012770 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	4603      	mov	r3, r0
 8012778:	6039      	str	r1, [r7, #0]
 801277a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801277c:	683a      	ldr	r2, [r7, #0]
 801277e:	4904      	ldr	r1, [pc, #16]	; (8012790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012780:	4804      	ldr	r0, [pc, #16]	; (8012794 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012782:	f7f9 ff4e 	bl	800c622 <USBD_GetString>
  return USBD_StrDesc;
 8012786:	4b02      	ldr	r3, [pc, #8]	; (8012790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012788:	4618      	mov	r0, r3
 801278a:	3708      	adds	r7, #8
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}
 8012790:	2000c518 	.word	0x2000c518
 8012794:	080184ac 	.word	0x080184ac

08012798 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b082      	sub	sp, #8
 801279c:	af00      	add	r7, sp, #0
 801279e:	4603      	mov	r3, r0
 80127a0:	6039      	str	r1, [r7, #0]
 80127a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	221a      	movs	r2, #26
 80127a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80127aa:	f000 f843 	bl	8012834 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80127ae:	4b02      	ldr	r3, [pc, #8]	; (80127b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80127b0:	4618      	mov	r0, r3
 80127b2:	3708      	adds	r7, #8
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd80      	pop	{r7, pc}
 80127b8:	20000180 	.word	0x20000180

080127bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b082      	sub	sp, #8
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	4603      	mov	r3, r0
 80127c4:	6039      	str	r1, [r7, #0]
 80127c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80127c8:	79fb      	ldrb	r3, [r7, #7]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d105      	bne.n	80127da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80127ce:	683a      	ldr	r2, [r7, #0]
 80127d0:	4907      	ldr	r1, [pc, #28]	; (80127f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80127d2:	4808      	ldr	r0, [pc, #32]	; (80127f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80127d4:	f7f9 ff25 	bl	800c622 <USBD_GetString>
 80127d8:	e004      	b.n	80127e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80127da:	683a      	ldr	r2, [r7, #0]
 80127dc:	4904      	ldr	r1, [pc, #16]	; (80127f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80127de:	4805      	ldr	r0, [pc, #20]	; (80127f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80127e0:	f7f9 ff1f 	bl	800c622 <USBD_GetString>
  }
  return USBD_StrDesc;
 80127e4:	4b02      	ldr	r3, [pc, #8]	; (80127f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80127e6:	4618      	mov	r0, r3
 80127e8:	3708      	adds	r7, #8
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}
 80127ee:	bf00      	nop
 80127f0:	2000c518 	.word	0x2000c518
 80127f4:	080184c0 	.word	0x080184c0

080127f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	4603      	mov	r3, r0
 8012800:	6039      	str	r1, [r7, #0]
 8012802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012804:	79fb      	ldrb	r3, [r7, #7]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d105      	bne.n	8012816 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801280a:	683a      	ldr	r2, [r7, #0]
 801280c:	4907      	ldr	r1, [pc, #28]	; (801282c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801280e:	4808      	ldr	r0, [pc, #32]	; (8012830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012810:	f7f9 ff07 	bl	800c622 <USBD_GetString>
 8012814:	e004      	b.n	8012820 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012816:	683a      	ldr	r2, [r7, #0]
 8012818:	4904      	ldr	r1, [pc, #16]	; (801282c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801281a:	4805      	ldr	r0, [pc, #20]	; (8012830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801281c:	f7f9 ff01 	bl	800c622 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012820:	4b02      	ldr	r3, [pc, #8]	; (801282c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012822:	4618      	mov	r0, r3
 8012824:	3708      	adds	r7, #8
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}
 801282a:	bf00      	nop
 801282c:	2000c518 	.word	0x2000c518
 8012830:	080184cc 	.word	0x080184cc

08012834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b084      	sub	sp, #16
 8012838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801283a:	4b0f      	ldr	r3, [pc, #60]	; (8012878 <Get_SerialNum+0x44>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012840:	4b0e      	ldr	r3, [pc, #56]	; (801287c <Get_SerialNum+0x48>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012846:	4b0e      	ldr	r3, [pc, #56]	; (8012880 <Get_SerialNum+0x4c>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801284c:	68fa      	ldr	r2, [r7, #12]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	4413      	add	r3, r2
 8012852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d009      	beq.n	801286e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801285a:	2208      	movs	r2, #8
 801285c:	4909      	ldr	r1, [pc, #36]	; (8012884 <Get_SerialNum+0x50>)
 801285e:	68f8      	ldr	r0, [r7, #12]
 8012860:	f000 f814 	bl	801288c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012864:	2204      	movs	r2, #4
 8012866:	4908      	ldr	r1, [pc, #32]	; (8012888 <Get_SerialNum+0x54>)
 8012868:	68b8      	ldr	r0, [r7, #8]
 801286a:	f000 f80f 	bl	801288c <IntToUnicode>
  }
}
 801286e:	bf00      	nop
 8012870:	3710      	adds	r7, #16
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}
 8012876:	bf00      	nop
 8012878:	1fff7a10 	.word	0x1fff7a10
 801287c:	1fff7a14 	.word	0x1fff7a14
 8012880:	1fff7a18 	.word	0x1fff7a18
 8012884:	20000182 	.word	0x20000182
 8012888:	20000192 	.word	0x20000192

0801288c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801288c:	b480      	push	{r7}
 801288e:	b087      	sub	sp, #28
 8012890:	af00      	add	r7, sp, #0
 8012892:	60f8      	str	r0, [r7, #12]
 8012894:	60b9      	str	r1, [r7, #8]
 8012896:	4613      	mov	r3, r2
 8012898:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801289a:	2300      	movs	r3, #0
 801289c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801289e:	2300      	movs	r3, #0
 80128a0:	75fb      	strb	r3, [r7, #23]
 80128a2:	e027      	b.n	80128f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	0f1b      	lsrs	r3, r3, #28
 80128a8:	2b09      	cmp	r3, #9
 80128aa:	d80b      	bhi.n	80128c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	0f1b      	lsrs	r3, r3, #28
 80128b0:	b2da      	uxtb	r2, r3
 80128b2:	7dfb      	ldrb	r3, [r7, #23]
 80128b4:	005b      	lsls	r3, r3, #1
 80128b6:	4619      	mov	r1, r3
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	440b      	add	r3, r1
 80128bc:	3230      	adds	r2, #48	; 0x30
 80128be:	b2d2      	uxtb	r2, r2
 80128c0:	701a      	strb	r2, [r3, #0]
 80128c2:	e00a      	b.n	80128da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	0f1b      	lsrs	r3, r3, #28
 80128c8:	b2da      	uxtb	r2, r3
 80128ca:	7dfb      	ldrb	r3, [r7, #23]
 80128cc:	005b      	lsls	r3, r3, #1
 80128ce:	4619      	mov	r1, r3
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	440b      	add	r3, r1
 80128d4:	3237      	adds	r2, #55	; 0x37
 80128d6:	b2d2      	uxtb	r2, r2
 80128d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	011b      	lsls	r3, r3, #4
 80128de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80128e0:	7dfb      	ldrb	r3, [r7, #23]
 80128e2:	005b      	lsls	r3, r3, #1
 80128e4:	3301      	adds	r3, #1
 80128e6:	68ba      	ldr	r2, [r7, #8]
 80128e8:	4413      	add	r3, r2
 80128ea:	2200      	movs	r2, #0
 80128ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80128ee:	7dfb      	ldrb	r3, [r7, #23]
 80128f0:	3301      	adds	r3, #1
 80128f2:	75fb      	strb	r3, [r7, #23]
 80128f4:	7dfa      	ldrb	r2, [r7, #23]
 80128f6:	79fb      	ldrb	r3, [r7, #7]
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d3d3      	bcc.n	80128a4 <IntToUnicode+0x18>
  }
}
 80128fc:	bf00      	nop
 80128fe:	bf00      	nop
 8012900:	371c      	adds	r7, #28
 8012902:	46bd      	mov	sp, r7
 8012904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012908:	4770      	bx	lr
	...

0801290c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b08a      	sub	sp, #40	; 0x28
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012914:	f107 0314 	add.w	r3, r7, #20
 8012918:	2200      	movs	r2, #0
 801291a:	601a      	str	r2, [r3, #0]
 801291c:	605a      	str	r2, [r3, #4]
 801291e:	609a      	str	r2, [r3, #8]
 8012920:	60da      	str	r2, [r3, #12]
 8012922:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801292c:	d147      	bne.n	80129be <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801292e:	2300      	movs	r3, #0
 8012930:	613b      	str	r3, [r7, #16]
 8012932:	4b25      	ldr	r3, [pc, #148]	; (80129c8 <HAL_PCD_MspInit+0xbc>)
 8012934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012936:	4a24      	ldr	r2, [pc, #144]	; (80129c8 <HAL_PCD_MspInit+0xbc>)
 8012938:	f043 0301 	orr.w	r3, r3, #1
 801293c:	6313      	str	r3, [r2, #48]	; 0x30
 801293e:	4b22      	ldr	r3, [pc, #136]	; (80129c8 <HAL_PCD_MspInit+0xbc>)
 8012940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012942:	f003 0301 	and.w	r3, r3, #1
 8012946:	613b      	str	r3, [r7, #16]
 8012948:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801294a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801294e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012950:	2300      	movs	r3, #0
 8012952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012954:	2300      	movs	r3, #0
 8012956:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012958:	f107 0314 	add.w	r3, r7, #20
 801295c:	4619      	mov	r1, r3
 801295e:	481b      	ldr	r0, [pc, #108]	; (80129cc <HAL_PCD_MspInit+0xc0>)
 8012960:	f7f1 fbcc 	bl	80040fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012964:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801296a:	2302      	movs	r3, #2
 801296c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801296e:	2300      	movs	r3, #0
 8012970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012972:	2303      	movs	r3, #3
 8012974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012976:	230a      	movs	r3, #10
 8012978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801297a:	f107 0314 	add.w	r3, r7, #20
 801297e:	4619      	mov	r1, r3
 8012980:	4812      	ldr	r0, [pc, #72]	; (80129cc <HAL_PCD_MspInit+0xc0>)
 8012982:	f7f1 fbbb 	bl	80040fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012986:	4b10      	ldr	r3, [pc, #64]	; (80129c8 <HAL_PCD_MspInit+0xbc>)
 8012988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801298a:	4a0f      	ldr	r2, [pc, #60]	; (80129c8 <HAL_PCD_MspInit+0xbc>)
 801298c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012990:	6353      	str	r3, [r2, #52]	; 0x34
 8012992:	2300      	movs	r3, #0
 8012994:	60fb      	str	r3, [r7, #12]
 8012996:	4b0c      	ldr	r3, [pc, #48]	; (80129c8 <HAL_PCD_MspInit+0xbc>)
 8012998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801299a:	4a0b      	ldr	r2, [pc, #44]	; (80129c8 <HAL_PCD_MspInit+0xbc>)
 801299c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80129a0:	6453      	str	r3, [r2, #68]	; 0x44
 80129a2:	4b09      	ldr	r3, [pc, #36]	; (80129c8 <HAL_PCD_MspInit+0xbc>)
 80129a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80129aa:	60fb      	str	r3, [r7, #12]
 80129ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80129ae:	2200      	movs	r2, #0
 80129b0:	2105      	movs	r1, #5
 80129b2:	2043      	movs	r0, #67	; 0x43
 80129b4:	f7f1 fb78 	bl	80040a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80129b8:	2043      	movs	r0, #67	; 0x43
 80129ba:	f7f1 fb91 	bl	80040e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80129be:	bf00      	nop
 80129c0:	3728      	adds	r7, #40	; 0x28
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	40023800 	.word	0x40023800
 80129cc:	40020000 	.word	0x40020000

080129d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80129e4:	4619      	mov	r1, r3
 80129e6:	4610      	mov	r0, r2
 80129e8:	f7f8 fe34 	bl	800b654 <USBD_LL_SetupStage>
}
 80129ec:	bf00      	nop
 80129ee:	3708      	adds	r7, #8
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}

080129f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	460b      	mov	r3, r1
 80129fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012a06:	78fa      	ldrb	r2, [r7, #3]
 8012a08:	6879      	ldr	r1, [r7, #4]
 8012a0a:	4613      	mov	r3, r2
 8012a0c:	00db      	lsls	r3, r3, #3
 8012a0e:	1a9b      	subs	r3, r3, r2
 8012a10:	009b      	lsls	r3, r3, #2
 8012a12:	440b      	add	r3, r1
 8012a14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012a18:	681a      	ldr	r2, [r3, #0]
 8012a1a:	78fb      	ldrb	r3, [r7, #3]
 8012a1c:	4619      	mov	r1, r3
 8012a1e:	f7f8 fe6e 	bl	800b6fe <USBD_LL_DataOutStage>
}
 8012a22:	bf00      	nop
 8012a24:	3708      	adds	r7, #8
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}

08012a2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a2a:	b580      	push	{r7, lr}
 8012a2c:	b082      	sub	sp, #8
 8012a2e:	af00      	add	r7, sp, #0
 8012a30:	6078      	str	r0, [r7, #4]
 8012a32:	460b      	mov	r3, r1
 8012a34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012a3c:	78fa      	ldrb	r2, [r7, #3]
 8012a3e:	6879      	ldr	r1, [r7, #4]
 8012a40:	4613      	mov	r3, r2
 8012a42:	00db      	lsls	r3, r3, #3
 8012a44:	1a9b      	subs	r3, r3, r2
 8012a46:	009b      	lsls	r3, r3, #2
 8012a48:	440b      	add	r3, r1
 8012a4a:	3348      	adds	r3, #72	; 0x48
 8012a4c:	681a      	ldr	r2, [r3, #0]
 8012a4e:	78fb      	ldrb	r3, [r7, #3]
 8012a50:	4619      	mov	r1, r3
 8012a52:	f7f8 feb7 	bl	800b7c4 <USBD_LL_DataInStage>
}
 8012a56:	bf00      	nop
 8012a58:	3708      	adds	r7, #8
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}

08012a5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a5e:	b580      	push	{r7, lr}
 8012a60:	b082      	sub	sp, #8
 8012a62:	af00      	add	r7, sp, #0
 8012a64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f7f8 ffcb 	bl	800ba08 <USBD_LL_SOF>
}
 8012a72:	bf00      	nop
 8012a74:	3708      	adds	r7, #8
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd80      	pop	{r7, pc}

08012a7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a7a:	b580      	push	{r7, lr}
 8012a7c:	b084      	sub	sp, #16
 8012a7e:	af00      	add	r7, sp, #0
 8012a80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012a82:	2301      	movs	r3, #1
 8012a84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	68db      	ldr	r3, [r3, #12]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d102      	bne.n	8012a94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	73fb      	strb	r3, [r7, #15]
 8012a92:	e008      	b.n	8012aa6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	68db      	ldr	r3, [r3, #12]
 8012a98:	2b02      	cmp	r3, #2
 8012a9a:	d102      	bne.n	8012aa2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012a9c:	2301      	movs	r3, #1
 8012a9e:	73fb      	strb	r3, [r7, #15]
 8012aa0:	e001      	b.n	8012aa6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012aa2:	f7f0 f953 	bl	8002d4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012aac:	7bfa      	ldrb	r2, [r7, #15]
 8012aae:	4611      	mov	r1, r2
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7f8 ff6b 	bl	800b98c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012abc:	4618      	mov	r0, r3
 8012abe:	f7f8 ff17 	bl	800b8f0 <USBD_LL_Reset>
}
 8012ac2:	bf00      	nop
 8012ac4:	3710      	adds	r7, #16
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd80      	pop	{r7, pc}
	...

08012acc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012ada:	4618      	mov	r0, r3
 8012adc:	f7f8 ff66 	bl	800b9ac <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	687a      	ldr	r2, [r7, #4]
 8012aec:	6812      	ldr	r2, [r2, #0]
 8012aee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012af2:	f043 0301 	orr.w	r3, r3, #1
 8012af6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	6a1b      	ldr	r3, [r3, #32]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d005      	beq.n	8012b0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012b00:	4b04      	ldr	r3, [pc, #16]	; (8012b14 <HAL_PCD_SuspendCallback+0x48>)
 8012b02:	691b      	ldr	r3, [r3, #16]
 8012b04:	4a03      	ldr	r2, [pc, #12]	; (8012b14 <HAL_PCD_SuspendCallback+0x48>)
 8012b06:	f043 0306 	orr.w	r3, r3, #6
 8012b0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012b0c:	bf00      	nop
 8012b0e:	3708      	adds	r7, #8
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}
 8012b14:	e000ed00 	.word	0xe000ed00

08012b18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b082      	sub	sp, #8
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012b26:	4618      	mov	r0, r3
 8012b28:	f7f8 ff56 	bl	800b9d8 <USBD_LL_Resume>
}
 8012b2c:	bf00      	nop
 8012b2e:	3708      	adds	r7, #8
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}

08012b34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b082      	sub	sp, #8
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
 8012b3c:	460b      	mov	r3, r1
 8012b3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012b46:	78fa      	ldrb	r2, [r7, #3]
 8012b48:	4611      	mov	r1, r2
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f7f8 ffa4 	bl	800ba98 <USBD_LL_IsoOUTIncomplete>
}
 8012b50:	bf00      	nop
 8012b52:	3708      	adds	r7, #8
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}

08012b58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b082      	sub	sp, #8
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
 8012b60:	460b      	mov	r3, r1
 8012b62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012b6a:	78fa      	ldrb	r2, [r7, #3]
 8012b6c:	4611      	mov	r1, r2
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f7f8 ff6c 	bl	800ba4c <USBD_LL_IsoINIncomplete>
}
 8012b74:	bf00      	nop
 8012b76:	3708      	adds	r7, #8
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}

08012b7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b082      	sub	sp, #8
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f7f8 ffaa 	bl	800bae4 <USBD_LL_DevConnected>
}
 8012b90:	bf00      	nop
 8012b92:	3708      	adds	r7, #8
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}

08012b98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b082      	sub	sp, #8
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7f8 ffa7 	bl	800bafa <USBD_LL_DevDisconnected>
}
 8012bac:	bf00      	nop
 8012bae:	3708      	adds	r7, #8
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}

08012bb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b082      	sub	sp, #8
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	781b      	ldrb	r3, [r3, #0]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d13c      	bne.n	8012c3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012bc4:	4a20      	ldr	r2, [pc, #128]	; (8012c48 <USBD_LL_Init+0x94>)
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	4a1e      	ldr	r2, [pc, #120]	; (8012c48 <USBD_LL_Init+0x94>)
 8012bd0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012bd4:	4b1c      	ldr	r3, [pc, #112]	; (8012c48 <USBD_LL_Init+0x94>)
 8012bd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012bda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8012bdc:	4b1a      	ldr	r3, [pc, #104]	; (8012c48 <USBD_LL_Init+0x94>)
 8012bde:	2204      	movs	r2, #4
 8012be0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012be2:	4b19      	ldr	r3, [pc, #100]	; (8012c48 <USBD_LL_Init+0x94>)
 8012be4:	2202      	movs	r2, #2
 8012be6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012be8:	4b17      	ldr	r3, [pc, #92]	; (8012c48 <USBD_LL_Init+0x94>)
 8012bea:	2200      	movs	r2, #0
 8012bec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012bee:	4b16      	ldr	r3, [pc, #88]	; (8012c48 <USBD_LL_Init+0x94>)
 8012bf0:	2202      	movs	r2, #2
 8012bf2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012bf4:	4b14      	ldr	r3, [pc, #80]	; (8012c48 <USBD_LL_Init+0x94>)
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012bfa:	4b13      	ldr	r3, [pc, #76]	; (8012c48 <USBD_LL_Init+0x94>)
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012c00:	4b11      	ldr	r3, [pc, #68]	; (8012c48 <USBD_LL_Init+0x94>)
 8012c02:	2200      	movs	r2, #0
 8012c04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8012c06:	4b10      	ldr	r3, [pc, #64]	; (8012c48 <USBD_LL_Init+0x94>)
 8012c08:	2201      	movs	r2, #1
 8012c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012c0c:	4b0e      	ldr	r3, [pc, #56]	; (8012c48 <USBD_LL_Init+0x94>)
 8012c0e:	2200      	movs	r2, #0
 8012c10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012c12:	480d      	ldr	r0, [pc, #52]	; (8012c48 <USBD_LL_Init+0x94>)
 8012c14:	f7f2 fc96 	bl	8005544 <HAL_PCD_Init>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d001      	beq.n	8012c22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8012c1e:	f7f0 f895 	bl	8002d4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012c22:	2180      	movs	r1, #128	; 0x80
 8012c24:	4808      	ldr	r0, [pc, #32]	; (8012c48 <USBD_LL_Init+0x94>)
 8012c26:	f7f3 fdf4 	bl	8006812 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012c2a:	2240      	movs	r2, #64	; 0x40
 8012c2c:	2100      	movs	r1, #0
 8012c2e:	4806      	ldr	r0, [pc, #24]	; (8012c48 <USBD_LL_Init+0x94>)
 8012c30:	f7f3 fda8 	bl	8006784 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012c34:	2280      	movs	r2, #128	; 0x80
 8012c36:	2101      	movs	r1, #1
 8012c38:	4803      	ldr	r0, [pc, #12]	; (8012c48 <USBD_LL_Init+0x94>)
 8012c3a:	f7f3 fda3 	bl	8006784 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012c3e:	2300      	movs	r3, #0
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3708      	adds	r7, #8
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}
 8012c48:	2000c718 	.word	0x2000c718

08012c4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b084      	sub	sp, #16
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c54:	2300      	movs	r3, #0
 8012c56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012c62:	4618      	mov	r0, r3
 8012c64:	f7f2 fd8b 	bl	800577e <HAL_PCD_Start>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c6c:	7bfb      	ldrb	r3, [r7, #15]
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f000 f942 	bl	8012ef8 <USBD_Get_USB_Status>
 8012c74:	4603      	mov	r3, r0
 8012c76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	3710      	adds	r7, #16
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}

08012c82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012c82:	b580      	push	{r7, lr}
 8012c84:	b084      	sub	sp, #16
 8012c86:	af00      	add	r7, sp, #0
 8012c88:	6078      	str	r0, [r7, #4]
 8012c8a:	4608      	mov	r0, r1
 8012c8c:	4611      	mov	r1, r2
 8012c8e:	461a      	mov	r2, r3
 8012c90:	4603      	mov	r3, r0
 8012c92:	70fb      	strb	r3, [r7, #3]
 8012c94:	460b      	mov	r3, r1
 8012c96:	70bb      	strb	r3, [r7, #2]
 8012c98:	4613      	mov	r3, r2
 8012c9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012caa:	78bb      	ldrb	r3, [r7, #2]
 8012cac:	883a      	ldrh	r2, [r7, #0]
 8012cae:	78f9      	ldrb	r1, [r7, #3]
 8012cb0:	f7f3 f96f 	bl	8005f92 <HAL_PCD_EP_Open>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012cb8:	7bfb      	ldrb	r3, [r7, #15]
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f000 f91c 	bl	8012ef8 <USBD_Get_USB_Status>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3710      	adds	r7, #16
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}

08012cce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012cce:	b580      	push	{r7, lr}
 8012cd0:	b084      	sub	sp, #16
 8012cd2:	af00      	add	r7, sp, #0
 8012cd4:	6078      	str	r0, [r7, #4]
 8012cd6:	460b      	mov	r3, r1
 8012cd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012ce8:	78fa      	ldrb	r2, [r7, #3]
 8012cea:	4611      	mov	r1, r2
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7f3 f9b8 	bl	8006062 <HAL_PCD_EP_Close>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012cf6:	7bfb      	ldrb	r3, [r7, #15]
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f000 f8fd 	bl	8012ef8 <USBD_Get_USB_Status>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d02:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d04:	4618      	mov	r0, r3
 8012d06:	3710      	adds	r7, #16
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bd80      	pop	{r7, pc}

08012d0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b084      	sub	sp, #16
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
 8012d14:	460b      	mov	r3, r1
 8012d16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d18:	2300      	movs	r3, #0
 8012d1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012d26:	78fa      	ldrb	r2, [r7, #3]
 8012d28:	4611      	mov	r1, r2
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7f3 fa90 	bl	8006250 <HAL_PCD_EP_SetStall>
 8012d30:	4603      	mov	r3, r0
 8012d32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d34:	7bfb      	ldrb	r3, [r7, #15]
 8012d36:	4618      	mov	r0, r3
 8012d38:	f000 f8de 	bl	8012ef8 <USBD_Get_USB_Status>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	3710      	adds	r7, #16
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}

08012d4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012d4a:	b580      	push	{r7, lr}
 8012d4c:	b084      	sub	sp, #16
 8012d4e:	af00      	add	r7, sp, #0
 8012d50:	6078      	str	r0, [r7, #4]
 8012d52:	460b      	mov	r3, r1
 8012d54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d56:	2300      	movs	r3, #0
 8012d58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012d64:	78fa      	ldrb	r2, [r7, #3]
 8012d66:	4611      	mov	r1, r2
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f7f3 fad5 	bl	8006318 <HAL_PCD_EP_ClrStall>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d72:	7bfb      	ldrb	r3, [r7, #15]
 8012d74:	4618      	mov	r0, r3
 8012d76:	f000 f8bf 	bl	8012ef8 <USBD_Get_USB_Status>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d80:	4618      	mov	r0, r3
 8012d82:	3710      	adds	r7, #16
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}

08012d88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012d88:	b480      	push	{r7}
 8012d8a:	b085      	sub	sp, #20
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	460b      	mov	r3, r1
 8012d92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012d9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012d9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	da0b      	bge.n	8012dbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012da4:	78fb      	ldrb	r3, [r7, #3]
 8012da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012daa:	68f9      	ldr	r1, [r7, #12]
 8012dac:	4613      	mov	r3, r2
 8012dae:	00db      	lsls	r3, r3, #3
 8012db0:	1a9b      	subs	r3, r3, r2
 8012db2:	009b      	lsls	r3, r3, #2
 8012db4:	440b      	add	r3, r1
 8012db6:	333e      	adds	r3, #62	; 0x3e
 8012db8:	781b      	ldrb	r3, [r3, #0]
 8012dba:	e00b      	b.n	8012dd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012dbc:	78fb      	ldrb	r3, [r7, #3]
 8012dbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012dc2:	68f9      	ldr	r1, [r7, #12]
 8012dc4:	4613      	mov	r3, r2
 8012dc6:	00db      	lsls	r3, r3, #3
 8012dc8:	1a9b      	subs	r3, r3, r2
 8012dca:	009b      	lsls	r3, r3, #2
 8012dcc:	440b      	add	r3, r1
 8012dce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012dd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	3714      	adds	r7, #20
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dde:	4770      	bx	lr

08012de0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b084      	sub	sp, #16
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	460b      	mov	r3, r1
 8012dea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012dec:	2300      	movs	r3, #0
 8012dee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012df0:	2300      	movs	r3, #0
 8012df2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012dfa:	78fa      	ldrb	r2, [r7, #3]
 8012dfc:	4611      	mov	r1, r2
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7f3 f8a2 	bl	8005f48 <HAL_PCD_SetAddress>
 8012e04:	4603      	mov	r3, r0
 8012e06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e08:	7bfb      	ldrb	r3, [r7, #15]
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f000 f874 	bl	8012ef8 <USBD_Get_USB_Status>
 8012e10:	4603      	mov	r3, r0
 8012e12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e14:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e16:	4618      	mov	r0, r3
 8012e18:	3710      	adds	r7, #16
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}

08012e1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012e1e:	b580      	push	{r7, lr}
 8012e20:	b086      	sub	sp, #24
 8012e22:	af00      	add	r7, sp, #0
 8012e24:	60f8      	str	r0, [r7, #12]
 8012e26:	607a      	str	r2, [r7, #4]
 8012e28:	603b      	str	r3, [r7, #0]
 8012e2a:	460b      	mov	r3, r1
 8012e2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e2e:	2300      	movs	r3, #0
 8012e30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e32:	2300      	movs	r3, #0
 8012e34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012e3c:	7af9      	ldrb	r1, [r7, #11]
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	687a      	ldr	r2, [r7, #4]
 8012e42:	f7f3 f9bb 	bl	80061bc <HAL_PCD_EP_Transmit>
 8012e46:	4603      	mov	r3, r0
 8012e48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e4a:	7dfb      	ldrb	r3, [r7, #23]
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f000 f853 	bl	8012ef8 <USBD_Get_USB_Status>
 8012e52:	4603      	mov	r3, r0
 8012e54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012e56:	7dbb      	ldrb	r3, [r7, #22]
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3718      	adds	r7, #24
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}

08012e60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b086      	sub	sp, #24
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	607a      	str	r2, [r7, #4]
 8012e6a:	603b      	str	r3, [r7, #0]
 8012e6c:	460b      	mov	r3, r1
 8012e6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e70:	2300      	movs	r3, #0
 8012e72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e74:	2300      	movs	r3, #0
 8012e76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012e7e:	7af9      	ldrb	r1, [r7, #11]
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	687a      	ldr	r2, [r7, #4]
 8012e84:	f7f3 f937 	bl	80060f6 <HAL_PCD_EP_Receive>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e8c:	7dfb      	ldrb	r3, [r7, #23]
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f000 f832 	bl	8012ef8 <USBD_Get_USB_Status>
 8012e94:	4603      	mov	r3, r0
 8012e96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012e98:	7dbb      	ldrb	r3, [r7, #22]
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3718      	adds	r7, #24
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}

08012ea2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ea2:	b580      	push	{r7, lr}
 8012ea4:	b082      	sub	sp, #8
 8012ea6:	af00      	add	r7, sp, #0
 8012ea8:	6078      	str	r0, [r7, #4]
 8012eaa:	460b      	mov	r3, r1
 8012eac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012eb4:	78fa      	ldrb	r2, [r7, #3]
 8012eb6:	4611      	mov	r1, r2
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7f3 f967 	bl	800618c <HAL_PCD_EP_GetRxCount>
 8012ebe:	4603      	mov	r3, r0
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	3708      	adds	r7, #8
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd80      	pop	{r7, pc}

08012ec8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012ec8:	b480      	push	{r7}
 8012eca:	b083      	sub	sp, #12
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012ed0:	4b03      	ldr	r3, [pc, #12]	; (8012ee0 <USBD_static_malloc+0x18>)
}
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	370c      	adds	r7, #12
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012edc:	4770      	bx	lr
 8012ede:	bf00      	nop
 8012ee0:	20009ba8 	.word	0x20009ba8

08012ee4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012ee4:	b480      	push	{r7}
 8012ee6:	b083      	sub	sp, #12
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]

}
 8012eec:	bf00      	nop
 8012eee:	370c      	adds	r7, #12
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef6:	4770      	bx	lr

08012ef8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012ef8:	b480      	push	{r7}
 8012efa:	b085      	sub	sp, #20
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	4603      	mov	r3, r0
 8012f00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f02:	2300      	movs	r3, #0
 8012f04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012f06:	79fb      	ldrb	r3, [r7, #7]
 8012f08:	2b03      	cmp	r3, #3
 8012f0a:	d817      	bhi.n	8012f3c <USBD_Get_USB_Status+0x44>
 8012f0c:	a201      	add	r2, pc, #4	; (adr r2, 8012f14 <USBD_Get_USB_Status+0x1c>)
 8012f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f12:	bf00      	nop
 8012f14:	08012f25 	.word	0x08012f25
 8012f18:	08012f2b 	.word	0x08012f2b
 8012f1c:	08012f31 	.word	0x08012f31
 8012f20:	08012f37 	.word	0x08012f37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012f24:	2300      	movs	r3, #0
 8012f26:	73fb      	strb	r3, [r7, #15]
    break;
 8012f28:	e00b      	b.n	8012f42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012f2a:	2303      	movs	r3, #3
 8012f2c:	73fb      	strb	r3, [r7, #15]
    break;
 8012f2e:	e008      	b.n	8012f42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012f30:	2301      	movs	r3, #1
 8012f32:	73fb      	strb	r3, [r7, #15]
    break;
 8012f34:	e005      	b.n	8012f42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012f36:	2303      	movs	r3, #3
 8012f38:	73fb      	strb	r3, [r7, #15]
    break;
 8012f3a:	e002      	b.n	8012f42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012f3c:	2303      	movs	r3, #3
 8012f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8012f40:	bf00      	nop
  }
  return usb_status;
 8012f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f44:	4618      	mov	r0, r3
 8012f46:	3714      	adds	r7, #20
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4e:	4770      	bx	lr

08012f50 <__errno>:
 8012f50:	4b01      	ldr	r3, [pc, #4]	; (8012f58 <__errno+0x8>)
 8012f52:	6818      	ldr	r0, [r3, #0]
 8012f54:	4770      	bx	lr
 8012f56:	bf00      	nop
 8012f58:	2000019c 	.word	0x2000019c

08012f5c <std>:
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	b510      	push	{r4, lr}
 8012f60:	4604      	mov	r4, r0
 8012f62:	e9c0 3300 	strd	r3, r3, [r0]
 8012f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012f6a:	6083      	str	r3, [r0, #8]
 8012f6c:	8181      	strh	r1, [r0, #12]
 8012f6e:	6643      	str	r3, [r0, #100]	; 0x64
 8012f70:	81c2      	strh	r2, [r0, #14]
 8012f72:	6183      	str	r3, [r0, #24]
 8012f74:	4619      	mov	r1, r3
 8012f76:	2208      	movs	r2, #8
 8012f78:	305c      	adds	r0, #92	; 0x5c
 8012f7a:	f000 f91a 	bl	80131b2 <memset>
 8012f7e:	4b05      	ldr	r3, [pc, #20]	; (8012f94 <std+0x38>)
 8012f80:	6263      	str	r3, [r4, #36]	; 0x24
 8012f82:	4b05      	ldr	r3, [pc, #20]	; (8012f98 <std+0x3c>)
 8012f84:	62a3      	str	r3, [r4, #40]	; 0x28
 8012f86:	4b05      	ldr	r3, [pc, #20]	; (8012f9c <std+0x40>)
 8012f88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012f8a:	4b05      	ldr	r3, [pc, #20]	; (8012fa0 <std+0x44>)
 8012f8c:	6224      	str	r4, [r4, #32]
 8012f8e:	6323      	str	r3, [r4, #48]	; 0x30
 8012f90:	bd10      	pop	{r4, pc}
 8012f92:	bf00      	nop
 8012f94:	08014105 	.word	0x08014105
 8012f98:	0801412b 	.word	0x0801412b
 8012f9c:	08014163 	.word	0x08014163
 8012fa0:	08014187 	.word	0x08014187

08012fa4 <_cleanup_r>:
 8012fa4:	4901      	ldr	r1, [pc, #4]	; (8012fac <_cleanup_r+0x8>)
 8012fa6:	f000 b8af 	b.w	8013108 <_fwalk_reent>
 8012faa:	bf00      	nop
 8012fac:	08015df5 	.word	0x08015df5

08012fb0 <__sfmoreglue>:
 8012fb0:	b570      	push	{r4, r5, r6, lr}
 8012fb2:	1e4a      	subs	r2, r1, #1
 8012fb4:	2568      	movs	r5, #104	; 0x68
 8012fb6:	4355      	muls	r5, r2
 8012fb8:	460e      	mov	r6, r1
 8012fba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012fbe:	f000 f901 	bl	80131c4 <_malloc_r>
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	b140      	cbz	r0, 8012fd8 <__sfmoreglue+0x28>
 8012fc6:	2100      	movs	r1, #0
 8012fc8:	e9c0 1600 	strd	r1, r6, [r0]
 8012fcc:	300c      	adds	r0, #12
 8012fce:	60a0      	str	r0, [r4, #8]
 8012fd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012fd4:	f000 f8ed 	bl	80131b2 <memset>
 8012fd8:	4620      	mov	r0, r4
 8012fda:	bd70      	pop	{r4, r5, r6, pc}

08012fdc <__sfp_lock_acquire>:
 8012fdc:	4801      	ldr	r0, [pc, #4]	; (8012fe4 <__sfp_lock_acquire+0x8>)
 8012fde:	f000 b8d8 	b.w	8013192 <__retarget_lock_acquire_recursive>
 8012fe2:	bf00      	nop
 8012fe4:	2000cb28 	.word	0x2000cb28

08012fe8 <__sfp_lock_release>:
 8012fe8:	4801      	ldr	r0, [pc, #4]	; (8012ff0 <__sfp_lock_release+0x8>)
 8012fea:	f000 b8d3 	b.w	8013194 <__retarget_lock_release_recursive>
 8012fee:	bf00      	nop
 8012ff0:	2000cb28 	.word	0x2000cb28

08012ff4 <__sinit_lock_acquire>:
 8012ff4:	4801      	ldr	r0, [pc, #4]	; (8012ffc <__sinit_lock_acquire+0x8>)
 8012ff6:	f000 b8cc 	b.w	8013192 <__retarget_lock_acquire_recursive>
 8012ffa:	bf00      	nop
 8012ffc:	2000cb23 	.word	0x2000cb23

08013000 <__sinit_lock_release>:
 8013000:	4801      	ldr	r0, [pc, #4]	; (8013008 <__sinit_lock_release+0x8>)
 8013002:	f000 b8c7 	b.w	8013194 <__retarget_lock_release_recursive>
 8013006:	bf00      	nop
 8013008:	2000cb23 	.word	0x2000cb23

0801300c <__sinit>:
 801300c:	b510      	push	{r4, lr}
 801300e:	4604      	mov	r4, r0
 8013010:	f7ff fff0 	bl	8012ff4 <__sinit_lock_acquire>
 8013014:	69a3      	ldr	r3, [r4, #24]
 8013016:	b11b      	cbz	r3, 8013020 <__sinit+0x14>
 8013018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801301c:	f7ff bff0 	b.w	8013000 <__sinit_lock_release>
 8013020:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013024:	6523      	str	r3, [r4, #80]	; 0x50
 8013026:	4b13      	ldr	r3, [pc, #76]	; (8013074 <__sinit+0x68>)
 8013028:	4a13      	ldr	r2, [pc, #76]	; (8013078 <__sinit+0x6c>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	62a2      	str	r2, [r4, #40]	; 0x28
 801302e:	42a3      	cmp	r3, r4
 8013030:	bf04      	itt	eq
 8013032:	2301      	moveq	r3, #1
 8013034:	61a3      	streq	r3, [r4, #24]
 8013036:	4620      	mov	r0, r4
 8013038:	f000 f820 	bl	801307c <__sfp>
 801303c:	6060      	str	r0, [r4, #4]
 801303e:	4620      	mov	r0, r4
 8013040:	f000 f81c 	bl	801307c <__sfp>
 8013044:	60a0      	str	r0, [r4, #8]
 8013046:	4620      	mov	r0, r4
 8013048:	f000 f818 	bl	801307c <__sfp>
 801304c:	2200      	movs	r2, #0
 801304e:	60e0      	str	r0, [r4, #12]
 8013050:	2104      	movs	r1, #4
 8013052:	6860      	ldr	r0, [r4, #4]
 8013054:	f7ff ff82 	bl	8012f5c <std>
 8013058:	68a0      	ldr	r0, [r4, #8]
 801305a:	2201      	movs	r2, #1
 801305c:	2109      	movs	r1, #9
 801305e:	f7ff ff7d 	bl	8012f5c <std>
 8013062:	68e0      	ldr	r0, [r4, #12]
 8013064:	2202      	movs	r2, #2
 8013066:	2112      	movs	r1, #18
 8013068:	f7ff ff78 	bl	8012f5c <std>
 801306c:	2301      	movs	r3, #1
 801306e:	61a3      	str	r3, [r4, #24]
 8013070:	e7d2      	b.n	8013018 <__sinit+0xc>
 8013072:	bf00      	nop
 8013074:	080187a8 	.word	0x080187a8
 8013078:	08012fa5 	.word	0x08012fa5

0801307c <__sfp>:
 801307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801307e:	4607      	mov	r7, r0
 8013080:	f7ff ffac 	bl	8012fdc <__sfp_lock_acquire>
 8013084:	4b1e      	ldr	r3, [pc, #120]	; (8013100 <__sfp+0x84>)
 8013086:	681e      	ldr	r6, [r3, #0]
 8013088:	69b3      	ldr	r3, [r6, #24]
 801308a:	b913      	cbnz	r3, 8013092 <__sfp+0x16>
 801308c:	4630      	mov	r0, r6
 801308e:	f7ff ffbd 	bl	801300c <__sinit>
 8013092:	3648      	adds	r6, #72	; 0x48
 8013094:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013098:	3b01      	subs	r3, #1
 801309a:	d503      	bpl.n	80130a4 <__sfp+0x28>
 801309c:	6833      	ldr	r3, [r6, #0]
 801309e:	b30b      	cbz	r3, 80130e4 <__sfp+0x68>
 80130a0:	6836      	ldr	r6, [r6, #0]
 80130a2:	e7f7      	b.n	8013094 <__sfp+0x18>
 80130a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80130a8:	b9d5      	cbnz	r5, 80130e0 <__sfp+0x64>
 80130aa:	4b16      	ldr	r3, [pc, #88]	; (8013104 <__sfp+0x88>)
 80130ac:	60e3      	str	r3, [r4, #12]
 80130ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80130b2:	6665      	str	r5, [r4, #100]	; 0x64
 80130b4:	f000 f86c 	bl	8013190 <__retarget_lock_init_recursive>
 80130b8:	f7ff ff96 	bl	8012fe8 <__sfp_lock_release>
 80130bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80130c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80130c4:	6025      	str	r5, [r4, #0]
 80130c6:	61a5      	str	r5, [r4, #24]
 80130c8:	2208      	movs	r2, #8
 80130ca:	4629      	mov	r1, r5
 80130cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80130d0:	f000 f86f 	bl	80131b2 <memset>
 80130d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80130d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80130dc:	4620      	mov	r0, r4
 80130de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130e0:	3468      	adds	r4, #104	; 0x68
 80130e2:	e7d9      	b.n	8013098 <__sfp+0x1c>
 80130e4:	2104      	movs	r1, #4
 80130e6:	4638      	mov	r0, r7
 80130e8:	f7ff ff62 	bl	8012fb0 <__sfmoreglue>
 80130ec:	4604      	mov	r4, r0
 80130ee:	6030      	str	r0, [r6, #0]
 80130f0:	2800      	cmp	r0, #0
 80130f2:	d1d5      	bne.n	80130a0 <__sfp+0x24>
 80130f4:	f7ff ff78 	bl	8012fe8 <__sfp_lock_release>
 80130f8:	230c      	movs	r3, #12
 80130fa:	603b      	str	r3, [r7, #0]
 80130fc:	e7ee      	b.n	80130dc <__sfp+0x60>
 80130fe:	bf00      	nop
 8013100:	080187a8 	.word	0x080187a8
 8013104:	ffff0001 	.word	0xffff0001

08013108 <_fwalk_reent>:
 8013108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801310c:	4606      	mov	r6, r0
 801310e:	4688      	mov	r8, r1
 8013110:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013114:	2700      	movs	r7, #0
 8013116:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801311a:	f1b9 0901 	subs.w	r9, r9, #1
 801311e:	d505      	bpl.n	801312c <_fwalk_reent+0x24>
 8013120:	6824      	ldr	r4, [r4, #0]
 8013122:	2c00      	cmp	r4, #0
 8013124:	d1f7      	bne.n	8013116 <_fwalk_reent+0xe>
 8013126:	4638      	mov	r0, r7
 8013128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801312c:	89ab      	ldrh	r3, [r5, #12]
 801312e:	2b01      	cmp	r3, #1
 8013130:	d907      	bls.n	8013142 <_fwalk_reent+0x3a>
 8013132:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013136:	3301      	adds	r3, #1
 8013138:	d003      	beq.n	8013142 <_fwalk_reent+0x3a>
 801313a:	4629      	mov	r1, r5
 801313c:	4630      	mov	r0, r6
 801313e:	47c0      	blx	r8
 8013140:	4307      	orrs	r7, r0
 8013142:	3568      	adds	r5, #104	; 0x68
 8013144:	e7e9      	b.n	801311a <_fwalk_reent+0x12>
	...

08013148 <__libc_init_array>:
 8013148:	b570      	push	{r4, r5, r6, lr}
 801314a:	4d0d      	ldr	r5, [pc, #52]	; (8013180 <__libc_init_array+0x38>)
 801314c:	4c0d      	ldr	r4, [pc, #52]	; (8013184 <__libc_init_array+0x3c>)
 801314e:	1b64      	subs	r4, r4, r5
 8013150:	10a4      	asrs	r4, r4, #2
 8013152:	2600      	movs	r6, #0
 8013154:	42a6      	cmp	r6, r4
 8013156:	d109      	bne.n	801316c <__libc_init_array+0x24>
 8013158:	4d0b      	ldr	r5, [pc, #44]	; (8013188 <__libc_init_array+0x40>)
 801315a:	4c0c      	ldr	r4, [pc, #48]	; (801318c <__libc_init_array+0x44>)
 801315c:	f005 f844 	bl	80181e8 <_init>
 8013160:	1b64      	subs	r4, r4, r5
 8013162:	10a4      	asrs	r4, r4, #2
 8013164:	2600      	movs	r6, #0
 8013166:	42a6      	cmp	r6, r4
 8013168:	d105      	bne.n	8013176 <__libc_init_array+0x2e>
 801316a:	bd70      	pop	{r4, r5, r6, pc}
 801316c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013170:	4798      	blx	r3
 8013172:	3601      	adds	r6, #1
 8013174:	e7ee      	b.n	8013154 <__libc_init_array+0xc>
 8013176:	f855 3b04 	ldr.w	r3, [r5], #4
 801317a:	4798      	blx	r3
 801317c:	3601      	adds	r6, #1
 801317e:	e7f2      	b.n	8013166 <__libc_init_array+0x1e>
 8013180:	08018b1c 	.word	0x08018b1c
 8013184:	08018b1c 	.word	0x08018b1c
 8013188:	08018b1c 	.word	0x08018b1c
 801318c:	08018b20 	.word	0x08018b20

08013190 <__retarget_lock_init_recursive>:
 8013190:	4770      	bx	lr

08013192 <__retarget_lock_acquire_recursive>:
 8013192:	4770      	bx	lr

08013194 <__retarget_lock_release_recursive>:
 8013194:	4770      	bx	lr

08013196 <memcpy>:
 8013196:	440a      	add	r2, r1
 8013198:	4291      	cmp	r1, r2
 801319a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801319e:	d100      	bne.n	80131a2 <memcpy+0xc>
 80131a0:	4770      	bx	lr
 80131a2:	b510      	push	{r4, lr}
 80131a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80131a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80131ac:	4291      	cmp	r1, r2
 80131ae:	d1f9      	bne.n	80131a4 <memcpy+0xe>
 80131b0:	bd10      	pop	{r4, pc}

080131b2 <memset>:
 80131b2:	4402      	add	r2, r0
 80131b4:	4603      	mov	r3, r0
 80131b6:	4293      	cmp	r3, r2
 80131b8:	d100      	bne.n	80131bc <memset+0xa>
 80131ba:	4770      	bx	lr
 80131bc:	f803 1b01 	strb.w	r1, [r3], #1
 80131c0:	e7f9      	b.n	80131b6 <memset+0x4>
	...

080131c4 <_malloc_r>:
 80131c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131c6:	1ccd      	adds	r5, r1, #3
 80131c8:	f025 0503 	bic.w	r5, r5, #3
 80131cc:	3508      	adds	r5, #8
 80131ce:	2d0c      	cmp	r5, #12
 80131d0:	bf38      	it	cc
 80131d2:	250c      	movcc	r5, #12
 80131d4:	2d00      	cmp	r5, #0
 80131d6:	4606      	mov	r6, r0
 80131d8:	db01      	blt.n	80131de <_malloc_r+0x1a>
 80131da:	42a9      	cmp	r1, r5
 80131dc:	d903      	bls.n	80131e6 <_malloc_r+0x22>
 80131de:	230c      	movs	r3, #12
 80131e0:	6033      	str	r3, [r6, #0]
 80131e2:	2000      	movs	r0, #0
 80131e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131e6:	f003 f9e1 	bl	80165ac <__malloc_lock>
 80131ea:	4921      	ldr	r1, [pc, #132]	; (8013270 <_malloc_r+0xac>)
 80131ec:	680a      	ldr	r2, [r1, #0]
 80131ee:	4614      	mov	r4, r2
 80131f0:	b99c      	cbnz	r4, 801321a <_malloc_r+0x56>
 80131f2:	4f20      	ldr	r7, [pc, #128]	; (8013274 <_malloc_r+0xb0>)
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	b923      	cbnz	r3, 8013202 <_malloc_r+0x3e>
 80131f8:	4621      	mov	r1, r4
 80131fa:	4630      	mov	r0, r6
 80131fc:	f000 ff20 	bl	8014040 <_sbrk_r>
 8013200:	6038      	str	r0, [r7, #0]
 8013202:	4629      	mov	r1, r5
 8013204:	4630      	mov	r0, r6
 8013206:	f000 ff1b 	bl	8014040 <_sbrk_r>
 801320a:	1c43      	adds	r3, r0, #1
 801320c:	d123      	bne.n	8013256 <_malloc_r+0x92>
 801320e:	230c      	movs	r3, #12
 8013210:	6033      	str	r3, [r6, #0]
 8013212:	4630      	mov	r0, r6
 8013214:	f003 f9d0 	bl	80165b8 <__malloc_unlock>
 8013218:	e7e3      	b.n	80131e2 <_malloc_r+0x1e>
 801321a:	6823      	ldr	r3, [r4, #0]
 801321c:	1b5b      	subs	r3, r3, r5
 801321e:	d417      	bmi.n	8013250 <_malloc_r+0x8c>
 8013220:	2b0b      	cmp	r3, #11
 8013222:	d903      	bls.n	801322c <_malloc_r+0x68>
 8013224:	6023      	str	r3, [r4, #0]
 8013226:	441c      	add	r4, r3
 8013228:	6025      	str	r5, [r4, #0]
 801322a:	e004      	b.n	8013236 <_malloc_r+0x72>
 801322c:	6863      	ldr	r3, [r4, #4]
 801322e:	42a2      	cmp	r2, r4
 8013230:	bf0c      	ite	eq
 8013232:	600b      	streq	r3, [r1, #0]
 8013234:	6053      	strne	r3, [r2, #4]
 8013236:	4630      	mov	r0, r6
 8013238:	f003 f9be 	bl	80165b8 <__malloc_unlock>
 801323c:	f104 000b 	add.w	r0, r4, #11
 8013240:	1d23      	adds	r3, r4, #4
 8013242:	f020 0007 	bic.w	r0, r0, #7
 8013246:	1ac2      	subs	r2, r0, r3
 8013248:	d0cc      	beq.n	80131e4 <_malloc_r+0x20>
 801324a:	1a1b      	subs	r3, r3, r0
 801324c:	50a3      	str	r3, [r4, r2]
 801324e:	e7c9      	b.n	80131e4 <_malloc_r+0x20>
 8013250:	4622      	mov	r2, r4
 8013252:	6864      	ldr	r4, [r4, #4]
 8013254:	e7cc      	b.n	80131f0 <_malloc_r+0x2c>
 8013256:	1cc4      	adds	r4, r0, #3
 8013258:	f024 0403 	bic.w	r4, r4, #3
 801325c:	42a0      	cmp	r0, r4
 801325e:	d0e3      	beq.n	8013228 <_malloc_r+0x64>
 8013260:	1a21      	subs	r1, r4, r0
 8013262:	4630      	mov	r0, r6
 8013264:	f000 feec 	bl	8014040 <_sbrk_r>
 8013268:	3001      	adds	r0, #1
 801326a:	d1dd      	bne.n	8013228 <_malloc_r+0x64>
 801326c:	e7cf      	b.n	801320e <_malloc_r+0x4a>
 801326e:	bf00      	nop
 8013270:	20009dc8 	.word	0x20009dc8
 8013274:	20009dcc 	.word	0x20009dcc

08013278 <__cvt>:
 8013278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801327c:	ec55 4b10 	vmov	r4, r5, d0
 8013280:	2d00      	cmp	r5, #0
 8013282:	460e      	mov	r6, r1
 8013284:	4619      	mov	r1, r3
 8013286:	462b      	mov	r3, r5
 8013288:	bfbb      	ittet	lt
 801328a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801328e:	461d      	movlt	r5, r3
 8013290:	2300      	movge	r3, #0
 8013292:	232d      	movlt	r3, #45	; 0x2d
 8013294:	700b      	strb	r3, [r1, #0]
 8013296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013298:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801329c:	4691      	mov	r9, r2
 801329e:	f023 0820 	bic.w	r8, r3, #32
 80132a2:	bfbc      	itt	lt
 80132a4:	4622      	movlt	r2, r4
 80132a6:	4614      	movlt	r4, r2
 80132a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80132ac:	d005      	beq.n	80132ba <__cvt+0x42>
 80132ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80132b2:	d100      	bne.n	80132b6 <__cvt+0x3e>
 80132b4:	3601      	adds	r6, #1
 80132b6:	2102      	movs	r1, #2
 80132b8:	e000      	b.n	80132bc <__cvt+0x44>
 80132ba:	2103      	movs	r1, #3
 80132bc:	ab03      	add	r3, sp, #12
 80132be:	9301      	str	r3, [sp, #4]
 80132c0:	ab02      	add	r3, sp, #8
 80132c2:	9300      	str	r3, [sp, #0]
 80132c4:	ec45 4b10 	vmov	d0, r4, r5
 80132c8:	4653      	mov	r3, sl
 80132ca:	4632      	mov	r2, r6
 80132cc:	f001 ff20 	bl	8015110 <_dtoa_r>
 80132d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80132d4:	4607      	mov	r7, r0
 80132d6:	d102      	bne.n	80132de <__cvt+0x66>
 80132d8:	f019 0f01 	tst.w	r9, #1
 80132dc:	d022      	beq.n	8013324 <__cvt+0xac>
 80132de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80132e2:	eb07 0906 	add.w	r9, r7, r6
 80132e6:	d110      	bne.n	801330a <__cvt+0x92>
 80132e8:	783b      	ldrb	r3, [r7, #0]
 80132ea:	2b30      	cmp	r3, #48	; 0x30
 80132ec:	d10a      	bne.n	8013304 <__cvt+0x8c>
 80132ee:	2200      	movs	r2, #0
 80132f0:	2300      	movs	r3, #0
 80132f2:	4620      	mov	r0, r4
 80132f4:	4629      	mov	r1, r5
 80132f6:	f7ed fbf7 	bl	8000ae8 <__aeabi_dcmpeq>
 80132fa:	b918      	cbnz	r0, 8013304 <__cvt+0x8c>
 80132fc:	f1c6 0601 	rsb	r6, r6, #1
 8013300:	f8ca 6000 	str.w	r6, [sl]
 8013304:	f8da 3000 	ldr.w	r3, [sl]
 8013308:	4499      	add	r9, r3
 801330a:	2200      	movs	r2, #0
 801330c:	2300      	movs	r3, #0
 801330e:	4620      	mov	r0, r4
 8013310:	4629      	mov	r1, r5
 8013312:	f7ed fbe9 	bl	8000ae8 <__aeabi_dcmpeq>
 8013316:	b108      	cbz	r0, 801331c <__cvt+0xa4>
 8013318:	f8cd 900c 	str.w	r9, [sp, #12]
 801331c:	2230      	movs	r2, #48	; 0x30
 801331e:	9b03      	ldr	r3, [sp, #12]
 8013320:	454b      	cmp	r3, r9
 8013322:	d307      	bcc.n	8013334 <__cvt+0xbc>
 8013324:	9b03      	ldr	r3, [sp, #12]
 8013326:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013328:	1bdb      	subs	r3, r3, r7
 801332a:	4638      	mov	r0, r7
 801332c:	6013      	str	r3, [r2, #0]
 801332e:	b004      	add	sp, #16
 8013330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013334:	1c59      	adds	r1, r3, #1
 8013336:	9103      	str	r1, [sp, #12]
 8013338:	701a      	strb	r2, [r3, #0]
 801333a:	e7f0      	b.n	801331e <__cvt+0xa6>

0801333c <__exponent>:
 801333c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801333e:	4603      	mov	r3, r0
 8013340:	2900      	cmp	r1, #0
 8013342:	bfb8      	it	lt
 8013344:	4249      	neglt	r1, r1
 8013346:	f803 2b02 	strb.w	r2, [r3], #2
 801334a:	bfb4      	ite	lt
 801334c:	222d      	movlt	r2, #45	; 0x2d
 801334e:	222b      	movge	r2, #43	; 0x2b
 8013350:	2909      	cmp	r1, #9
 8013352:	7042      	strb	r2, [r0, #1]
 8013354:	dd2a      	ble.n	80133ac <__exponent+0x70>
 8013356:	f10d 0407 	add.w	r4, sp, #7
 801335a:	46a4      	mov	ip, r4
 801335c:	270a      	movs	r7, #10
 801335e:	46a6      	mov	lr, r4
 8013360:	460a      	mov	r2, r1
 8013362:	fb91 f6f7 	sdiv	r6, r1, r7
 8013366:	fb07 1516 	mls	r5, r7, r6, r1
 801336a:	3530      	adds	r5, #48	; 0x30
 801336c:	2a63      	cmp	r2, #99	; 0x63
 801336e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8013372:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013376:	4631      	mov	r1, r6
 8013378:	dcf1      	bgt.n	801335e <__exponent+0x22>
 801337a:	3130      	adds	r1, #48	; 0x30
 801337c:	f1ae 0502 	sub.w	r5, lr, #2
 8013380:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013384:	1c44      	adds	r4, r0, #1
 8013386:	4629      	mov	r1, r5
 8013388:	4561      	cmp	r1, ip
 801338a:	d30a      	bcc.n	80133a2 <__exponent+0x66>
 801338c:	f10d 0209 	add.w	r2, sp, #9
 8013390:	eba2 020e 	sub.w	r2, r2, lr
 8013394:	4565      	cmp	r5, ip
 8013396:	bf88      	it	hi
 8013398:	2200      	movhi	r2, #0
 801339a:	4413      	add	r3, r2
 801339c:	1a18      	subs	r0, r3, r0
 801339e:	b003      	add	sp, #12
 80133a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80133a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80133aa:	e7ed      	b.n	8013388 <__exponent+0x4c>
 80133ac:	2330      	movs	r3, #48	; 0x30
 80133ae:	3130      	adds	r1, #48	; 0x30
 80133b0:	7083      	strb	r3, [r0, #2]
 80133b2:	70c1      	strb	r1, [r0, #3]
 80133b4:	1d03      	adds	r3, r0, #4
 80133b6:	e7f1      	b.n	801339c <__exponent+0x60>

080133b8 <_printf_float>:
 80133b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133bc:	ed2d 8b02 	vpush	{d8}
 80133c0:	b08d      	sub	sp, #52	; 0x34
 80133c2:	460c      	mov	r4, r1
 80133c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80133c8:	4616      	mov	r6, r2
 80133ca:	461f      	mov	r7, r3
 80133cc:	4605      	mov	r5, r0
 80133ce:	f003 f8bd 	bl	801654c <_localeconv_r>
 80133d2:	f8d0 a000 	ldr.w	sl, [r0]
 80133d6:	4650      	mov	r0, sl
 80133d8:	f7ec ff0a 	bl	80001f0 <strlen>
 80133dc:	2300      	movs	r3, #0
 80133de:	930a      	str	r3, [sp, #40]	; 0x28
 80133e0:	6823      	ldr	r3, [r4, #0]
 80133e2:	9305      	str	r3, [sp, #20]
 80133e4:	f8d8 3000 	ldr.w	r3, [r8]
 80133e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80133ec:	3307      	adds	r3, #7
 80133ee:	f023 0307 	bic.w	r3, r3, #7
 80133f2:	f103 0208 	add.w	r2, r3, #8
 80133f6:	f8c8 2000 	str.w	r2, [r8]
 80133fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013402:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013406:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801340a:	9307      	str	r3, [sp, #28]
 801340c:	f8cd 8018 	str.w	r8, [sp, #24]
 8013410:	ee08 0a10 	vmov	s16, r0
 8013414:	4b9f      	ldr	r3, [pc, #636]	; (8013694 <_printf_float+0x2dc>)
 8013416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801341a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801341e:	f7ed fb95 	bl	8000b4c <__aeabi_dcmpun>
 8013422:	bb88      	cbnz	r0, 8013488 <_printf_float+0xd0>
 8013424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013428:	4b9a      	ldr	r3, [pc, #616]	; (8013694 <_printf_float+0x2dc>)
 801342a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801342e:	f7ed fb6f 	bl	8000b10 <__aeabi_dcmple>
 8013432:	bb48      	cbnz	r0, 8013488 <_printf_float+0xd0>
 8013434:	2200      	movs	r2, #0
 8013436:	2300      	movs	r3, #0
 8013438:	4640      	mov	r0, r8
 801343a:	4649      	mov	r1, r9
 801343c:	f7ed fb5e 	bl	8000afc <__aeabi_dcmplt>
 8013440:	b110      	cbz	r0, 8013448 <_printf_float+0x90>
 8013442:	232d      	movs	r3, #45	; 0x2d
 8013444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013448:	4b93      	ldr	r3, [pc, #588]	; (8013698 <_printf_float+0x2e0>)
 801344a:	4894      	ldr	r0, [pc, #592]	; (801369c <_printf_float+0x2e4>)
 801344c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013450:	bf94      	ite	ls
 8013452:	4698      	movls	r8, r3
 8013454:	4680      	movhi	r8, r0
 8013456:	2303      	movs	r3, #3
 8013458:	6123      	str	r3, [r4, #16]
 801345a:	9b05      	ldr	r3, [sp, #20]
 801345c:	f023 0204 	bic.w	r2, r3, #4
 8013460:	6022      	str	r2, [r4, #0]
 8013462:	f04f 0900 	mov.w	r9, #0
 8013466:	9700      	str	r7, [sp, #0]
 8013468:	4633      	mov	r3, r6
 801346a:	aa0b      	add	r2, sp, #44	; 0x2c
 801346c:	4621      	mov	r1, r4
 801346e:	4628      	mov	r0, r5
 8013470:	f000 f9d8 	bl	8013824 <_printf_common>
 8013474:	3001      	adds	r0, #1
 8013476:	f040 8090 	bne.w	801359a <_printf_float+0x1e2>
 801347a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801347e:	b00d      	add	sp, #52	; 0x34
 8013480:	ecbd 8b02 	vpop	{d8}
 8013484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013488:	4642      	mov	r2, r8
 801348a:	464b      	mov	r3, r9
 801348c:	4640      	mov	r0, r8
 801348e:	4649      	mov	r1, r9
 8013490:	f7ed fb5c 	bl	8000b4c <__aeabi_dcmpun>
 8013494:	b140      	cbz	r0, 80134a8 <_printf_float+0xf0>
 8013496:	464b      	mov	r3, r9
 8013498:	2b00      	cmp	r3, #0
 801349a:	bfbc      	itt	lt
 801349c:	232d      	movlt	r3, #45	; 0x2d
 801349e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80134a2:	487f      	ldr	r0, [pc, #508]	; (80136a0 <_printf_float+0x2e8>)
 80134a4:	4b7f      	ldr	r3, [pc, #508]	; (80136a4 <_printf_float+0x2ec>)
 80134a6:	e7d1      	b.n	801344c <_printf_float+0x94>
 80134a8:	6863      	ldr	r3, [r4, #4]
 80134aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80134ae:	9206      	str	r2, [sp, #24]
 80134b0:	1c5a      	adds	r2, r3, #1
 80134b2:	d13f      	bne.n	8013534 <_printf_float+0x17c>
 80134b4:	2306      	movs	r3, #6
 80134b6:	6063      	str	r3, [r4, #4]
 80134b8:	9b05      	ldr	r3, [sp, #20]
 80134ba:	6861      	ldr	r1, [r4, #4]
 80134bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80134c0:	2300      	movs	r3, #0
 80134c2:	9303      	str	r3, [sp, #12]
 80134c4:	ab0a      	add	r3, sp, #40	; 0x28
 80134c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80134ca:	ab09      	add	r3, sp, #36	; 0x24
 80134cc:	ec49 8b10 	vmov	d0, r8, r9
 80134d0:	9300      	str	r3, [sp, #0]
 80134d2:	6022      	str	r2, [r4, #0]
 80134d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80134d8:	4628      	mov	r0, r5
 80134da:	f7ff fecd 	bl	8013278 <__cvt>
 80134de:	9b06      	ldr	r3, [sp, #24]
 80134e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80134e2:	2b47      	cmp	r3, #71	; 0x47
 80134e4:	4680      	mov	r8, r0
 80134e6:	d108      	bne.n	80134fa <_printf_float+0x142>
 80134e8:	1cc8      	adds	r0, r1, #3
 80134ea:	db02      	blt.n	80134f2 <_printf_float+0x13a>
 80134ec:	6863      	ldr	r3, [r4, #4]
 80134ee:	4299      	cmp	r1, r3
 80134f0:	dd41      	ble.n	8013576 <_printf_float+0x1be>
 80134f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80134f6:	fa5f fb8b 	uxtb.w	fp, fp
 80134fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80134fe:	d820      	bhi.n	8013542 <_printf_float+0x18a>
 8013500:	3901      	subs	r1, #1
 8013502:	465a      	mov	r2, fp
 8013504:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013508:	9109      	str	r1, [sp, #36]	; 0x24
 801350a:	f7ff ff17 	bl	801333c <__exponent>
 801350e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013510:	1813      	adds	r3, r2, r0
 8013512:	2a01      	cmp	r2, #1
 8013514:	4681      	mov	r9, r0
 8013516:	6123      	str	r3, [r4, #16]
 8013518:	dc02      	bgt.n	8013520 <_printf_float+0x168>
 801351a:	6822      	ldr	r2, [r4, #0]
 801351c:	07d2      	lsls	r2, r2, #31
 801351e:	d501      	bpl.n	8013524 <_printf_float+0x16c>
 8013520:	3301      	adds	r3, #1
 8013522:	6123      	str	r3, [r4, #16]
 8013524:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013528:	2b00      	cmp	r3, #0
 801352a:	d09c      	beq.n	8013466 <_printf_float+0xae>
 801352c:	232d      	movs	r3, #45	; 0x2d
 801352e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013532:	e798      	b.n	8013466 <_printf_float+0xae>
 8013534:	9a06      	ldr	r2, [sp, #24]
 8013536:	2a47      	cmp	r2, #71	; 0x47
 8013538:	d1be      	bne.n	80134b8 <_printf_float+0x100>
 801353a:	2b00      	cmp	r3, #0
 801353c:	d1bc      	bne.n	80134b8 <_printf_float+0x100>
 801353e:	2301      	movs	r3, #1
 8013540:	e7b9      	b.n	80134b6 <_printf_float+0xfe>
 8013542:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013546:	d118      	bne.n	801357a <_printf_float+0x1c2>
 8013548:	2900      	cmp	r1, #0
 801354a:	6863      	ldr	r3, [r4, #4]
 801354c:	dd0b      	ble.n	8013566 <_printf_float+0x1ae>
 801354e:	6121      	str	r1, [r4, #16]
 8013550:	b913      	cbnz	r3, 8013558 <_printf_float+0x1a0>
 8013552:	6822      	ldr	r2, [r4, #0]
 8013554:	07d0      	lsls	r0, r2, #31
 8013556:	d502      	bpl.n	801355e <_printf_float+0x1a6>
 8013558:	3301      	adds	r3, #1
 801355a:	440b      	add	r3, r1
 801355c:	6123      	str	r3, [r4, #16]
 801355e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013560:	f04f 0900 	mov.w	r9, #0
 8013564:	e7de      	b.n	8013524 <_printf_float+0x16c>
 8013566:	b913      	cbnz	r3, 801356e <_printf_float+0x1b6>
 8013568:	6822      	ldr	r2, [r4, #0]
 801356a:	07d2      	lsls	r2, r2, #31
 801356c:	d501      	bpl.n	8013572 <_printf_float+0x1ba>
 801356e:	3302      	adds	r3, #2
 8013570:	e7f4      	b.n	801355c <_printf_float+0x1a4>
 8013572:	2301      	movs	r3, #1
 8013574:	e7f2      	b.n	801355c <_printf_float+0x1a4>
 8013576:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801357a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801357c:	4299      	cmp	r1, r3
 801357e:	db05      	blt.n	801358c <_printf_float+0x1d4>
 8013580:	6823      	ldr	r3, [r4, #0]
 8013582:	6121      	str	r1, [r4, #16]
 8013584:	07d8      	lsls	r0, r3, #31
 8013586:	d5ea      	bpl.n	801355e <_printf_float+0x1a6>
 8013588:	1c4b      	adds	r3, r1, #1
 801358a:	e7e7      	b.n	801355c <_printf_float+0x1a4>
 801358c:	2900      	cmp	r1, #0
 801358e:	bfd4      	ite	le
 8013590:	f1c1 0202 	rsble	r2, r1, #2
 8013594:	2201      	movgt	r2, #1
 8013596:	4413      	add	r3, r2
 8013598:	e7e0      	b.n	801355c <_printf_float+0x1a4>
 801359a:	6823      	ldr	r3, [r4, #0]
 801359c:	055a      	lsls	r2, r3, #21
 801359e:	d407      	bmi.n	80135b0 <_printf_float+0x1f8>
 80135a0:	6923      	ldr	r3, [r4, #16]
 80135a2:	4642      	mov	r2, r8
 80135a4:	4631      	mov	r1, r6
 80135a6:	4628      	mov	r0, r5
 80135a8:	47b8      	blx	r7
 80135aa:	3001      	adds	r0, #1
 80135ac:	d12c      	bne.n	8013608 <_printf_float+0x250>
 80135ae:	e764      	b.n	801347a <_printf_float+0xc2>
 80135b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80135b4:	f240 80e0 	bls.w	8013778 <_printf_float+0x3c0>
 80135b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80135bc:	2200      	movs	r2, #0
 80135be:	2300      	movs	r3, #0
 80135c0:	f7ed fa92 	bl	8000ae8 <__aeabi_dcmpeq>
 80135c4:	2800      	cmp	r0, #0
 80135c6:	d034      	beq.n	8013632 <_printf_float+0x27a>
 80135c8:	4a37      	ldr	r2, [pc, #220]	; (80136a8 <_printf_float+0x2f0>)
 80135ca:	2301      	movs	r3, #1
 80135cc:	4631      	mov	r1, r6
 80135ce:	4628      	mov	r0, r5
 80135d0:	47b8      	blx	r7
 80135d2:	3001      	adds	r0, #1
 80135d4:	f43f af51 	beq.w	801347a <_printf_float+0xc2>
 80135d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80135dc:	429a      	cmp	r2, r3
 80135de:	db02      	blt.n	80135e6 <_printf_float+0x22e>
 80135e0:	6823      	ldr	r3, [r4, #0]
 80135e2:	07d8      	lsls	r0, r3, #31
 80135e4:	d510      	bpl.n	8013608 <_printf_float+0x250>
 80135e6:	ee18 3a10 	vmov	r3, s16
 80135ea:	4652      	mov	r2, sl
 80135ec:	4631      	mov	r1, r6
 80135ee:	4628      	mov	r0, r5
 80135f0:	47b8      	blx	r7
 80135f2:	3001      	adds	r0, #1
 80135f4:	f43f af41 	beq.w	801347a <_printf_float+0xc2>
 80135f8:	f04f 0800 	mov.w	r8, #0
 80135fc:	f104 091a 	add.w	r9, r4, #26
 8013600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013602:	3b01      	subs	r3, #1
 8013604:	4543      	cmp	r3, r8
 8013606:	dc09      	bgt.n	801361c <_printf_float+0x264>
 8013608:	6823      	ldr	r3, [r4, #0]
 801360a:	079b      	lsls	r3, r3, #30
 801360c:	f100 8105 	bmi.w	801381a <_printf_float+0x462>
 8013610:	68e0      	ldr	r0, [r4, #12]
 8013612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013614:	4298      	cmp	r0, r3
 8013616:	bfb8      	it	lt
 8013618:	4618      	movlt	r0, r3
 801361a:	e730      	b.n	801347e <_printf_float+0xc6>
 801361c:	2301      	movs	r3, #1
 801361e:	464a      	mov	r2, r9
 8013620:	4631      	mov	r1, r6
 8013622:	4628      	mov	r0, r5
 8013624:	47b8      	blx	r7
 8013626:	3001      	adds	r0, #1
 8013628:	f43f af27 	beq.w	801347a <_printf_float+0xc2>
 801362c:	f108 0801 	add.w	r8, r8, #1
 8013630:	e7e6      	b.n	8013600 <_printf_float+0x248>
 8013632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013634:	2b00      	cmp	r3, #0
 8013636:	dc39      	bgt.n	80136ac <_printf_float+0x2f4>
 8013638:	4a1b      	ldr	r2, [pc, #108]	; (80136a8 <_printf_float+0x2f0>)
 801363a:	2301      	movs	r3, #1
 801363c:	4631      	mov	r1, r6
 801363e:	4628      	mov	r0, r5
 8013640:	47b8      	blx	r7
 8013642:	3001      	adds	r0, #1
 8013644:	f43f af19 	beq.w	801347a <_printf_float+0xc2>
 8013648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801364c:	4313      	orrs	r3, r2
 801364e:	d102      	bne.n	8013656 <_printf_float+0x29e>
 8013650:	6823      	ldr	r3, [r4, #0]
 8013652:	07d9      	lsls	r1, r3, #31
 8013654:	d5d8      	bpl.n	8013608 <_printf_float+0x250>
 8013656:	ee18 3a10 	vmov	r3, s16
 801365a:	4652      	mov	r2, sl
 801365c:	4631      	mov	r1, r6
 801365e:	4628      	mov	r0, r5
 8013660:	47b8      	blx	r7
 8013662:	3001      	adds	r0, #1
 8013664:	f43f af09 	beq.w	801347a <_printf_float+0xc2>
 8013668:	f04f 0900 	mov.w	r9, #0
 801366c:	f104 0a1a 	add.w	sl, r4, #26
 8013670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013672:	425b      	negs	r3, r3
 8013674:	454b      	cmp	r3, r9
 8013676:	dc01      	bgt.n	801367c <_printf_float+0x2c4>
 8013678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801367a:	e792      	b.n	80135a2 <_printf_float+0x1ea>
 801367c:	2301      	movs	r3, #1
 801367e:	4652      	mov	r2, sl
 8013680:	4631      	mov	r1, r6
 8013682:	4628      	mov	r0, r5
 8013684:	47b8      	blx	r7
 8013686:	3001      	adds	r0, #1
 8013688:	f43f aef7 	beq.w	801347a <_printf_float+0xc2>
 801368c:	f109 0901 	add.w	r9, r9, #1
 8013690:	e7ee      	b.n	8013670 <_printf_float+0x2b8>
 8013692:	bf00      	nop
 8013694:	7fefffff 	.word	0x7fefffff
 8013698:	080187ac 	.word	0x080187ac
 801369c:	080187b0 	.word	0x080187b0
 80136a0:	080187b8 	.word	0x080187b8
 80136a4:	080187b4 	.word	0x080187b4
 80136a8:	08018ac1 	.word	0x08018ac1
 80136ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80136b0:	429a      	cmp	r2, r3
 80136b2:	bfa8      	it	ge
 80136b4:	461a      	movge	r2, r3
 80136b6:	2a00      	cmp	r2, #0
 80136b8:	4691      	mov	r9, r2
 80136ba:	dc37      	bgt.n	801372c <_printf_float+0x374>
 80136bc:	f04f 0b00 	mov.w	fp, #0
 80136c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80136c4:	f104 021a 	add.w	r2, r4, #26
 80136c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80136ca:	9305      	str	r3, [sp, #20]
 80136cc:	eba3 0309 	sub.w	r3, r3, r9
 80136d0:	455b      	cmp	r3, fp
 80136d2:	dc33      	bgt.n	801373c <_printf_float+0x384>
 80136d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80136d8:	429a      	cmp	r2, r3
 80136da:	db3b      	blt.n	8013754 <_printf_float+0x39c>
 80136dc:	6823      	ldr	r3, [r4, #0]
 80136de:	07da      	lsls	r2, r3, #31
 80136e0:	d438      	bmi.n	8013754 <_printf_float+0x39c>
 80136e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136e4:	9b05      	ldr	r3, [sp, #20]
 80136e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80136e8:	1ad3      	subs	r3, r2, r3
 80136ea:	eba2 0901 	sub.w	r9, r2, r1
 80136ee:	4599      	cmp	r9, r3
 80136f0:	bfa8      	it	ge
 80136f2:	4699      	movge	r9, r3
 80136f4:	f1b9 0f00 	cmp.w	r9, #0
 80136f8:	dc35      	bgt.n	8013766 <_printf_float+0x3ae>
 80136fa:	f04f 0800 	mov.w	r8, #0
 80136fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013702:	f104 0a1a 	add.w	sl, r4, #26
 8013706:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801370a:	1a9b      	subs	r3, r3, r2
 801370c:	eba3 0309 	sub.w	r3, r3, r9
 8013710:	4543      	cmp	r3, r8
 8013712:	f77f af79 	ble.w	8013608 <_printf_float+0x250>
 8013716:	2301      	movs	r3, #1
 8013718:	4652      	mov	r2, sl
 801371a:	4631      	mov	r1, r6
 801371c:	4628      	mov	r0, r5
 801371e:	47b8      	blx	r7
 8013720:	3001      	adds	r0, #1
 8013722:	f43f aeaa 	beq.w	801347a <_printf_float+0xc2>
 8013726:	f108 0801 	add.w	r8, r8, #1
 801372a:	e7ec      	b.n	8013706 <_printf_float+0x34e>
 801372c:	4613      	mov	r3, r2
 801372e:	4631      	mov	r1, r6
 8013730:	4642      	mov	r2, r8
 8013732:	4628      	mov	r0, r5
 8013734:	47b8      	blx	r7
 8013736:	3001      	adds	r0, #1
 8013738:	d1c0      	bne.n	80136bc <_printf_float+0x304>
 801373a:	e69e      	b.n	801347a <_printf_float+0xc2>
 801373c:	2301      	movs	r3, #1
 801373e:	4631      	mov	r1, r6
 8013740:	4628      	mov	r0, r5
 8013742:	9205      	str	r2, [sp, #20]
 8013744:	47b8      	blx	r7
 8013746:	3001      	adds	r0, #1
 8013748:	f43f ae97 	beq.w	801347a <_printf_float+0xc2>
 801374c:	9a05      	ldr	r2, [sp, #20]
 801374e:	f10b 0b01 	add.w	fp, fp, #1
 8013752:	e7b9      	b.n	80136c8 <_printf_float+0x310>
 8013754:	ee18 3a10 	vmov	r3, s16
 8013758:	4652      	mov	r2, sl
 801375a:	4631      	mov	r1, r6
 801375c:	4628      	mov	r0, r5
 801375e:	47b8      	blx	r7
 8013760:	3001      	adds	r0, #1
 8013762:	d1be      	bne.n	80136e2 <_printf_float+0x32a>
 8013764:	e689      	b.n	801347a <_printf_float+0xc2>
 8013766:	9a05      	ldr	r2, [sp, #20]
 8013768:	464b      	mov	r3, r9
 801376a:	4442      	add	r2, r8
 801376c:	4631      	mov	r1, r6
 801376e:	4628      	mov	r0, r5
 8013770:	47b8      	blx	r7
 8013772:	3001      	adds	r0, #1
 8013774:	d1c1      	bne.n	80136fa <_printf_float+0x342>
 8013776:	e680      	b.n	801347a <_printf_float+0xc2>
 8013778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801377a:	2a01      	cmp	r2, #1
 801377c:	dc01      	bgt.n	8013782 <_printf_float+0x3ca>
 801377e:	07db      	lsls	r3, r3, #31
 8013780:	d538      	bpl.n	80137f4 <_printf_float+0x43c>
 8013782:	2301      	movs	r3, #1
 8013784:	4642      	mov	r2, r8
 8013786:	4631      	mov	r1, r6
 8013788:	4628      	mov	r0, r5
 801378a:	47b8      	blx	r7
 801378c:	3001      	adds	r0, #1
 801378e:	f43f ae74 	beq.w	801347a <_printf_float+0xc2>
 8013792:	ee18 3a10 	vmov	r3, s16
 8013796:	4652      	mov	r2, sl
 8013798:	4631      	mov	r1, r6
 801379a:	4628      	mov	r0, r5
 801379c:	47b8      	blx	r7
 801379e:	3001      	adds	r0, #1
 80137a0:	f43f ae6b 	beq.w	801347a <_printf_float+0xc2>
 80137a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80137a8:	2200      	movs	r2, #0
 80137aa:	2300      	movs	r3, #0
 80137ac:	f7ed f99c 	bl	8000ae8 <__aeabi_dcmpeq>
 80137b0:	b9d8      	cbnz	r0, 80137ea <_printf_float+0x432>
 80137b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137b4:	f108 0201 	add.w	r2, r8, #1
 80137b8:	3b01      	subs	r3, #1
 80137ba:	4631      	mov	r1, r6
 80137bc:	4628      	mov	r0, r5
 80137be:	47b8      	blx	r7
 80137c0:	3001      	adds	r0, #1
 80137c2:	d10e      	bne.n	80137e2 <_printf_float+0x42a>
 80137c4:	e659      	b.n	801347a <_printf_float+0xc2>
 80137c6:	2301      	movs	r3, #1
 80137c8:	4652      	mov	r2, sl
 80137ca:	4631      	mov	r1, r6
 80137cc:	4628      	mov	r0, r5
 80137ce:	47b8      	blx	r7
 80137d0:	3001      	adds	r0, #1
 80137d2:	f43f ae52 	beq.w	801347a <_printf_float+0xc2>
 80137d6:	f108 0801 	add.w	r8, r8, #1
 80137da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137dc:	3b01      	subs	r3, #1
 80137de:	4543      	cmp	r3, r8
 80137e0:	dcf1      	bgt.n	80137c6 <_printf_float+0x40e>
 80137e2:	464b      	mov	r3, r9
 80137e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80137e8:	e6dc      	b.n	80135a4 <_printf_float+0x1ec>
 80137ea:	f04f 0800 	mov.w	r8, #0
 80137ee:	f104 0a1a 	add.w	sl, r4, #26
 80137f2:	e7f2      	b.n	80137da <_printf_float+0x422>
 80137f4:	2301      	movs	r3, #1
 80137f6:	4642      	mov	r2, r8
 80137f8:	e7df      	b.n	80137ba <_printf_float+0x402>
 80137fa:	2301      	movs	r3, #1
 80137fc:	464a      	mov	r2, r9
 80137fe:	4631      	mov	r1, r6
 8013800:	4628      	mov	r0, r5
 8013802:	47b8      	blx	r7
 8013804:	3001      	adds	r0, #1
 8013806:	f43f ae38 	beq.w	801347a <_printf_float+0xc2>
 801380a:	f108 0801 	add.w	r8, r8, #1
 801380e:	68e3      	ldr	r3, [r4, #12]
 8013810:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013812:	1a5b      	subs	r3, r3, r1
 8013814:	4543      	cmp	r3, r8
 8013816:	dcf0      	bgt.n	80137fa <_printf_float+0x442>
 8013818:	e6fa      	b.n	8013610 <_printf_float+0x258>
 801381a:	f04f 0800 	mov.w	r8, #0
 801381e:	f104 0919 	add.w	r9, r4, #25
 8013822:	e7f4      	b.n	801380e <_printf_float+0x456>

08013824 <_printf_common>:
 8013824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013828:	4616      	mov	r6, r2
 801382a:	4699      	mov	r9, r3
 801382c:	688a      	ldr	r2, [r1, #8]
 801382e:	690b      	ldr	r3, [r1, #16]
 8013830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013834:	4293      	cmp	r3, r2
 8013836:	bfb8      	it	lt
 8013838:	4613      	movlt	r3, r2
 801383a:	6033      	str	r3, [r6, #0]
 801383c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013840:	4607      	mov	r7, r0
 8013842:	460c      	mov	r4, r1
 8013844:	b10a      	cbz	r2, 801384a <_printf_common+0x26>
 8013846:	3301      	adds	r3, #1
 8013848:	6033      	str	r3, [r6, #0]
 801384a:	6823      	ldr	r3, [r4, #0]
 801384c:	0699      	lsls	r1, r3, #26
 801384e:	bf42      	ittt	mi
 8013850:	6833      	ldrmi	r3, [r6, #0]
 8013852:	3302      	addmi	r3, #2
 8013854:	6033      	strmi	r3, [r6, #0]
 8013856:	6825      	ldr	r5, [r4, #0]
 8013858:	f015 0506 	ands.w	r5, r5, #6
 801385c:	d106      	bne.n	801386c <_printf_common+0x48>
 801385e:	f104 0a19 	add.w	sl, r4, #25
 8013862:	68e3      	ldr	r3, [r4, #12]
 8013864:	6832      	ldr	r2, [r6, #0]
 8013866:	1a9b      	subs	r3, r3, r2
 8013868:	42ab      	cmp	r3, r5
 801386a:	dc26      	bgt.n	80138ba <_printf_common+0x96>
 801386c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013870:	1e13      	subs	r3, r2, #0
 8013872:	6822      	ldr	r2, [r4, #0]
 8013874:	bf18      	it	ne
 8013876:	2301      	movne	r3, #1
 8013878:	0692      	lsls	r2, r2, #26
 801387a:	d42b      	bmi.n	80138d4 <_printf_common+0xb0>
 801387c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013880:	4649      	mov	r1, r9
 8013882:	4638      	mov	r0, r7
 8013884:	47c0      	blx	r8
 8013886:	3001      	adds	r0, #1
 8013888:	d01e      	beq.n	80138c8 <_printf_common+0xa4>
 801388a:	6823      	ldr	r3, [r4, #0]
 801388c:	68e5      	ldr	r5, [r4, #12]
 801388e:	6832      	ldr	r2, [r6, #0]
 8013890:	f003 0306 	and.w	r3, r3, #6
 8013894:	2b04      	cmp	r3, #4
 8013896:	bf08      	it	eq
 8013898:	1aad      	subeq	r5, r5, r2
 801389a:	68a3      	ldr	r3, [r4, #8]
 801389c:	6922      	ldr	r2, [r4, #16]
 801389e:	bf0c      	ite	eq
 80138a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80138a4:	2500      	movne	r5, #0
 80138a6:	4293      	cmp	r3, r2
 80138a8:	bfc4      	itt	gt
 80138aa:	1a9b      	subgt	r3, r3, r2
 80138ac:	18ed      	addgt	r5, r5, r3
 80138ae:	2600      	movs	r6, #0
 80138b0:	341a      	adds	r4, #26
 80138b2:	42b5      	cmp	r5, r6
 80138b4:	d11a      	bne.n	80138ec <_printf_common+0xc8>
 80138b6:	2000      	movs	r0, #0
 80138b8:	e008      	b.n	80138cc <_printf_common+0xa8>
 80138ba:	2301      	movs	r3, #1
 80138bc:	4652      	mov	r2, sl
 80138be:	4649      	mov	r1, r9
 80138c0:	4638      	mov	r0, r7
 80138c2:	47c0      	blx	r8
 80138c4:	3001      	adds	r0, #1
 80138c6:	d103      	bne.n	80138d0 <_printf_common+0xac>
 80138c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138d0:	3501      	adds	r5, #1
 80138d2:	e7c6      	b.n	8013862 <_printf_common+0x3e>
 80138d4:	18e1      	adds	r1, r4, r3
 80138d6:	1c5a      	adds	r2, r3, #1
 80138d8:	2030      	movs	r0, #48	; 0x30
 80138da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80138de:	4422      	add	r2, r4
 80138e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80138e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80138e8:	3302      	adds	r3, #2
 80138ea:	e7c7      	b.n	801387c <_printf_common+0x58>
 80138ec:	2301      	movs	r3, #1
 80138ee:	4622      	mov	r2, r4
 80138f0:	4649      	mov	r1, r9
 80138f2:	4638      	mov	r0, r7
 80138f4:	47c0      	blx	r8
 80138f6:	3001      	adds	r0, #1
 80138f8:	d0e6      	beq.n	80138c8 <_printf_common+0xa4>
 80138fa:	3601      	adds	r6, #1
 80138fc:	e7d9      	b.n	80138b2 <_printf_common+0x8e>
	...

08013900 <_printf_i>:
 8013900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013904:	460c      	mov	r4, r1
 8013906:	4691      	mov	r9, r2
 8013908:	7e27      	ldrb	r7, [r4, #24]
 801390a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801390c:	2f78      	cmp	r7, #120	; 0x78
 801390e:	4680      	mov	r8, r0
 8013910:	469a      	mov	sl, r3
 8013912:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013916:	d807      	bhi.n	8013928 <_printf_i+0x28>
 8013918:	2f62      	cmp	r7, #98	; 0x62
 801391a:	d80a      	bhi.n	8013932 <_printf_i+0x32>
 801391c:	2f00      	cmp	r7, #0
 801391e:	f000 80d8 	beq.w	8013ad2 <_printf_i+0x1d2>
 8013922:	2f58      	cmp	r7, #88	; 0x58
 8013924:	f000 80a3 	beq.w	8013a6e <_printf_i+0x16e>
 8013928:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801392c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013930:	e03a      	b.n	80139a8 <_printf_i+0xa8>
 8013932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013936:	2b15      	cmp	r3, #21
 8013938:	d8f6      	bhi.n	8013928 <_printf_i+0x28>
 801393a:	a001      	add	r0, pc, #4	; (adr r0, 8013940 <_printf_i+0x40>)
 801393c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013940:	08013999 	.word	0x08013999
 8013944:	080139ad 	.word	0x080139ad
 8013948:	08013929 	.word	0x08013929
 801394c:	08013929 	.word	0x08013929
 8013950:	08013929 	.word	0x08013929
 8013954:	08013929 	.word	0x08013929
 8013958:	080139ad 	.word	0x080139ad
 801395c:	08013929 	.word	0x08013929
 8013960:	08013929 	.word	0x08013929
 8013964:	08013929 	.word	0x08013929
 8013968:	08013929 	.word	0x08013929
 801396c:	08013ab9 	.word	0x08013ab9
 8013970:	080139dd 	.word	0x080139dd
 8013974:	08013a9b 	.word	0x08013a9b
 8013978:	08013929 	.word	0x08013929
 801397c:	08013929 	.word	0x08013929
 8013980:	08013adb 	.word	0x08013adb
 8013984:	08013929 	.word	0x08013929
 8013988:	080139dd 	.word	0x080139dd
 801398c:	08013929 	.word	0x08013929
 8013990:	08013929 	.word	0x08013929
 8013994:	08013aa3 	.word	0x08013aa3
 8013998:	680b      	ldr	r3, [r1, #0]
 801399a:	1d1a      	adds	r2, r3, #4
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	600a      	str	r2, [r1, #0]
 80139a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80139a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80139a8:	2301      	movs	r3, #1
 80139aa:	e0a3      	b.n	8013af4 <_printf_i+0x1f4>
 80139ac:	6825      	ldr	r5, [r4, #0]
 80139ae:	6808      	ldr	r0, [r1, #0]
 80139b0:	062e      	lsls	r6, r5, #24
 80139b2:	f100 0304 	add.w	r3, r0, #4
 80139b6:	d50a      	bpl.n	80139ce <_printf_i+0xce>
 80139b8:	6805      	ldr	r5, [r0, #0]
 80139ba:	600b      	str	r3, [r1, #0]
 80139bc:	2d00      	cmp	r5, #0
 80139be:	da03      	bge.n	80139c8 <_printf_i+0xc8>
 80139c0:	232d      	movs	r3, #45	; 0x2d
 80139c2:	426d      	negs	r5, r5
 80139c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139c8:	485e      	ldr	r0, [pc, #376]	; (8013b44 <_printf_i+0x244>)
 80139ca:	230a      	movs	r3, #10
 80139cc:	e019      	b.n	8013a02 <_printf_i+0x102>
 80139ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80139d2:	6805      	ldr	r5, [r0, #0]
 80139d4:	600b      	str	r3, [r1, #0]
 80139d6:	bf18      	it	ne
 80139d8:	b22d      	sxthne	r5, r5
 80139da:	e7ef      	b.n	80139bc <_printf_i+0xbc>
 80139dc:	680b      	ldr	r3, [r1, #0]
 80139de:	6825      	ldr	r5, [r4, #0]
 80139e0:	1d18      	adds	r0, r3, #4
 80139e2:	6008      	str	r0, [r1, #0]
 80139e4:	0628      	lsls	r0, r5, #24
 80139e6:	d501      	bpl.n	80139ec <_printf_i+0xec>
 80139e8:	681d      	ldr	r5, [r3, #0]
 80139ea:	e002      	b.n	80139f2 <_printf_i+0xf2>
 80139ec:	0669      	lsls	r1, r5, #25
 80139ee:	d5fb      	bpl.n	80139e8 <_printf_i+0xe8>
 80139f0:	881d      	ldrh	r5, [r3, #0]
 80139f2:	4854      	ldr	r0, [pc, #336]	; (8013b44 <_printf_i+0x244>)
 80139f4:	2f6f      	cmp	r7, #111	; 0x6f
 80139f6:	bf0c      	ite	eq
 80139f8:	2308      	moveq	r3, #8
 80139fa:	230a      	movne	r3, #10
 80139fc:	2100      	movs	r1, #0
 80139fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013a02:	6866      	ldr	r6, [r4, #4]
 8013a04:	60a6      	str	r6, [r4, #8]
 8013a06:	2e00      	cmp	r6, #0
 8013a08:	bfa2      	ittt	ge
 8013a0a:	6821      	ldrge	r1, [r4, #0]
 8013a0c:	f021 0104 	bicge.w	r1, r1, #4
 8013a10:	6021      	strge	r1, [r4, #0]
 8013a12:	b90d      	cbnz	r5, 8013a18 <_printf_i+0x118>
 8013a14:	2e00      	cmp	r6, #0
 8013a16:	d04d      	beq.n	8013ab4 <_printf_i+0x1b4>
 8013a18:	4616      	mov	r6, r2
 8013a1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8013a1e:	fb03 5711 	mls	r7, r3, r1, r5
 8013a22:	5dc7      	ldrb	r7, [r0, r7]
 8013a24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013a28:	462f      	mov	r7, r5
 8013a2a:	42bb      	cmp	r3, r7
 8013a2c:	460d      	mov	r5, r1
 8013a2e:	d9f4      	bls.n	8013a1a <_printf_i+0x11a>
 8013a30:	2b08      	cmp	r3, #8
 8013a32:	d10b      	bne.n	8013a4c <_printf_i+0x14c>
 8013a34:	6823      	ldr	r3, [r4, #0]
 8013a36:	07df      	lsls	r7, r3, #31
 8013a38:	d508      	bpl.n	8013a4c <_printf_i+0x14c>
 8013a3a:	6923      	ldr	r3, [r4, #16]
 8013a3c:	6861      	ldr	r1, [r4, #4]
 8013a3e:	4299      	cmp	r1, r3
 8013a40:	bfde      	ittt	le
 8013a42:	2330      	movle	r3, #48	; 0x30
 8013a44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013a48:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8013a4c:	1b92      	subs	r2, r2, r6
 8013a4e:	6122      	str	r2, [r4, #16]
 8013a50:	f8cd a000 	str.w	sl, [sp]
 8013a54:	464b      	mov	r3, r9
 8013a56:	aa03      	add	r2, sp, #12
 8013a58:	4621      	mov	r1, r4
 8013a5a:	4640      	mov	r0, r8
 8013a5c:	f7ff fee2 	bl	8013824 <_printf_common>
 8013a60:	3001      	adds	r0, #1
 8013a62:	d14c      	bne.n	8013afe <_printf_i+0x1fe>
 8013a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a68:	b004      	add	sp, #16
 8013a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a6e:	4835      	ldr	r0, [pc, #212]	; (8013b44 <_printf_i+0x244>)
 8013a70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013a74:	6823      	ldr	r3, [r4, #0]
 8013a76:	680e      	ldr	r6, [r1, #0]
 8013a78:	061f      	lsls	r7, r3, #24
 8013a7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8013a7e:	600e      	str	r6, [r1, #0]
 8013a80:	d514      	bpl.n	8013aac <_printf_i+0x1ac>
 8013a82:	07d9      	lsls	r1, r3, #31
 8013a84:	bf44      	itt	mi
 8013a86:	f043 0320 	orrmi.w	r3, r3, #32
 8013a8a:	6023      	strmi	r3, [r4, #0]
 8013a8c:	b91d      	cbnz	r5, 8013a96 <_printf_i+0x196>
 8013a8e:	6823      	ldr	r3, [r4, #0]
 8013a90:	f023 0320 	bic.w	r3, r3, #32
 8013a94:	6023      	str	r3, [r4, #0]
 8013a96:	2310      	movs	r3, #16
 8013a98:	e7b0      	b.n	80139fc <_printf_i+0xfc>
 8013a9a:	6823      	ldr	r3, [r4, #0]
 8013a9c:	f043 0320 	orr.w	r3, r3, #32
 8013aa0:	6023      	str	r3, [r4, #0]
 8013aa2:	2378      	movs	r3, #120	; 0x78
 8013aa4:	4828      	ldr	r0, [pc, #160]	; (8013b48 <_printf_i+0x248>)
 8013aa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013aaa:	e7e3      	b.n	8013a74 <_printf_i+0x174>
 8013aac:	065e      	lsls	r6, r3, #25
 8013aae:	bf48      	it	mi
 8013ab0:	b2ad      	uxthmi	r5, r5
 8013ab2:	e7e6      	b.n	8013a82 <_printf_i+0x182>
 8013ab4:	4616      	mov	r6, r2
 8013ab6:	e7bb      	b.n	8013a30 <_printf_i+0x130>
 8013ab8:	680b      	ldr	r3, [r1, #0]
 8013aba:	6826      	ldr	r6, [r4, #0]
 8013abc:	6960      	ldr	r0, [r4, #20]
 8013abe:	1d1d      	adds	r5, r3, #4
 8013ac0:	600d      	str	r5, [r1, #0]
 8013ac2:	0635      	lsls	r5, r6, #24
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	d501      	bpl.n	8013acc <_printf_i+0x1cc>
 8013ac8:	6018      	str	r0, [r3, #0]
 8013aca:	e002      	b.n	8013ad2 <_printf_i+0x1d2>
 8013acc:	0671      	lsls	r1, r6, #25
 8013ace:	d5fb      	bpl.n	8013ac8 <_printf_i+0x1c8>
 8013ad0:	8018      	strh	r0, [r3, #0]
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	6123      	str	r3, [r4, #16]
 8013ad6:	4616      	mov	r6, r2
 8013ad8:	e7ba      	b.n	8013a50 <_printf_i+0x150>
 8013ada:	680b      	ldr	r3, [r1, #0]
 8013adc:	1d1a      	adds	r2, r3, #4
 8013ade:	600a      	str	r2, [r1, #0]
 8013ae0:	681e      	ldr	r6, [r3, #0]
 8013ae2:	6862      	ldr	r2, [r4, #4]
 8013ae4:	2100      	movs	r1, #0
 8013ae6:	4630      	mov	r0, r6
 8013ae8:	f7ec fb8a 	bl	8000200 <memchr>
 8013aec:	b108      	cbz	r0, 8013af2 <_printf_i+0x1f2>
 8013aee:	1b80      	subs	r0, r0, r6
 8013af0:	6060      	str	r0, [r4, #4]
 8013af2:	6863      	ldr	r3, [r4, #4]
 8013af4:	6123      	str	r3, [r4, #16]
 8013af6:	2300      	movs	r3, #0
 8013af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013afc:	e7a8      	b.n	8013a50 <_printf_i+0x150>
 8013afe:	6923      	ldr	r3, [r4, #16]
 8013b00:	4632      	mov	r2, r6
 8013b02:	4649      	mov	r1, r9
 8013b04:	4640      	mov	r0, r8
 8013b06:	47d0      	blx	sl
 8013b08:	3001      	adds	r0, #1
 8013b0a:	d0ab      	beq.n	8013a64 <_printf_i+0x164>
 8013b0c:	6823      	ldr	r3, [r4, #0]
 8013b0e:	079b      	lsls	r3, r3, #30
 8013b10:	d413      	bmi.n	8013b3a <_printf_i+0x23a>
 8013b12:	68e0      	ldr	r0, [r4, #12]
 8013b14:	9b03      	ldr	r3, [sp, #12]
 8013b16:	4298      	cmp	r0, r3
 8013b18:	bfb8      	it	lt
 8013b1a:	4618      	movlt	r0, r3
 8013b1c:	e7a4      	b.n	8013a68 <_printf_i+0x168>
 8013b1e:	2301      	movs	r3, #1
 8013b20:	4632      	mov	r2, r6
 8013b22:	4649      	mov	r1, r9
 8013b24:	4640      	mov	r0, r8
 8013b26:	47d0      	blx	sl
 8013b28:	3001      	adds	r0, #1
 8013b2a:	d09b      	beq.n	8013a64 <_printf_i+0x164>
 8013b2c:	3501      	adds	r5, #1
 8013b2e:	68e3      	ldr	r3, [r4, #12]
 8013b30:	9903      	ldr	r1, [sp, #12]
 8013b32:	1a5b      	subs	r3, r3, r1
 8013b34:	42ab      	cmp	r3, r5
 8013b36:	dcf2      	bgt.n	8013b1e <_printf_i+0x21e>
 8013b38:	e7eb      	b.n	8013b12 <_printf_i+0x212>
 8013b3a:	2500      	movs	r5, #0
 8013b3c:	f104 0619 	add.w	r6, r4, #25
 8013b40:	e7f5      	b.n	8013b2e <_printf_i+0x22e>
 8013b42:	bf00      	nop
 8013b44:	080187bc 	.word	0x080187bc
 8013b48:	080187cd 	.word	0x080187cd

08013b4c <_scanf_float>:
 8013b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b50:	b087      	sub	sp, #28
 8013b52:	4617      	mov	r7, r2
 8013b54:	9303      	str	r3, [sp, #12]
 8013b56:	688b      	ldr	r3, [r1, #8]
 8013b58:	1e5a      	subs	r2, r3, #1
 8013b5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013b5e:	bf83      	ittte	hi
 8013b60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013b64:	195b      	addhi	r3, r3, r5
 8013b66:	9302      	strhi	r3, [sp, #8]
 8013b68:	2300      	movls	r3, #0
 8013b6a:	bf86      	itte	hi
 8013b6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013b70:	608b      	strhi	r3, [r1, #8]
 8013b72:	9302      	strls	r3, [sp, #8]
 8013b74:	680b      	ldr	r3, [r1, #0]
 8013b76:	468b      	mov	fp, r1
 8013b78:	2500      	movs	r5, #0
 8013b7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013b7e:	f84b 3b1c 	str.w	r3, [fp], #28
 8013b82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013b86:	4680      	mov	r8, r0
 8013b88:	460c      	mov	r4, r1
 8013b8a:	465e      	mov	r6, fp
 8013b8c:	46aa      	mov	sl, r5
 8013b8e:	46a9      	mov	r9, r5
 8013b90:	9501      	str	r5, [sp, #4]
 8013b92:	68a2      	ldr	r2, [r4, #8]
 8013b94:	b152      	cbz	r2, 8013bac <_scanf_float+0x60>
 8013b96:	683b      	ldr	r3, [r7, #0]
 8013b98:	781b      	ldrb	r3, [r3, #0]
 8013b9a:	2b4e      	cmp	r3, #78	; 0x4e
 8013b9c:	d864      	bhi.n	8013c68 <_scanf_float+0x11c>
 8013b9e:	2b40      	cmp	r3, #64	; 0x40
 8013ba0:	d83c      	bhi.n	8013c1c <_scanf_float+0xd0>
 8013ba2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013ba6:	b2c8      	uxtb	r0, r1
 8013ba8:	280e      	cmp	r0, #14
 8013baa:	d93a      	bls.n	8013c22 <_scanf_float+0xd6>
 8013bac:	f1b9 0f00 	cmp.w	r9, #0
 8013bb0:	d003      	beq.n	8013bba <_scanf_float+0x6e>
 8013bb2:	6823      	ldr	r3, [r4, #0]
 8013bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013bb8:	6023      	str	r3, [r4, #0]
 8013bba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013bbe:	f1ba 0f01 	cmp.w	sl, #1
 8013bc2:	f200 8113 	bhi.w	8013dec <_scanf_float+0x2a0>
 8013bc6:	455e      	cmp	r6, fp
 8013bc8:	f200 8105 	bhi.w	8013dd6 <_scanf_float+0x28a>
 8013bcc:	2501      	movs	r5, #1
 8013bce:	4628      	mov	r0, r5
 8013bd0:	b007      	add	sp, #28
 8013bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bd6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013bda:	2a0d      	cmp	r2, #13
 8013bdc:	d8e6      	bhi.n	8013bac <_scanf_float+0x60>
 8013bde:	a101      	add	r1, pc, #4	; (adr r1, 8013be4 <_scanf_float+0x98>)
 8013be0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013be4:	08013d23 	.word	0x08013d23
 8013be8:	08013bad 	.word	0x08013bad
 8013bec:	08013bad 	.word	0x08013bad
 8013bf0:	08013bad 	.word	0x08013bad
 8013bf4:	08013d83 	.word	0x08013d83
 8013bf8:	08013d5b 	.word	0x08013d5b
 8013bfc:	08013bad 	.word	0x08013bad
 8013c00:	08013bad 	.word	0x08013bad
 8013c04:	08013d31 	.word	0x08013d31
 8013c08:	08013bad 	.word	0x08013bad
 8013c0c:	08013bad 	.word	0x08013bad
 8013c10:	08013bad 	.word	0x08013bad
 8013c14:	08013bad 	.word	0x08013bad
 8013c18:	08013ce9 	.word	0x08013ce9
 8013c1c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013c20:	e7db      	b.n	8013bda <_scanf_float+0x8e>
 8013c22:	290e      	cmp	r1, #14
 8013c24:	d8c2      	bhi.n	8013bac <_scanf_float+0x60>
 8013c26:	a001      	add	r0, pc, #4	; (adr r0, 8013c2c <_scanf_float+0xe0>)
 8013c28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013c2c:	08013cdb 	.word	0x08013cdb
 8013c30:	08013bad 	.word	0x08013bad
 8013c34:	08013cdb 	.word	0x08013cdb
 8013c38:	08013d6f 	.word	0x08013d6f
 8013c3c:	08013bad 	.word	0x08013bad
 8013c40:	08013c89 	.word	0x08013c89
 8013c44:	08013cc5 	.word	0x08013cc5
 8013c48:	08013cc5 	.word	0x08013cc5
 8013c4c:	08013cc5 	.word	0x08013cc5
 8013c50:	08013cc5 	.word	0x08013cc5
 8013c54:	08013cc5 	.word	0x08013cc5
 8013c58:	08013cc5 	.word	0x08013cc5
 8013c5c:	08013cc5 	.word	0x08013cc5
 8013c60:	08013cc5 	.word	0x08013cc5
 8013c64:	08013cc5 	.word	0x08013cc5
 8013c68:	2b6e      	cmp	r3, #110	; 0x6e
 8013c6a:	d809      	bhi.n	8013c80 <_scanf_float+0x134>
 8013c6c:	2b60      	cmp	r3, #96	; 0x60
 8013c6e:	d8b2      	bhi.n	8013bd6 <_scanf_float+0x8a>
 8013c70:	2b54      	cmp	r3, #84	; 0x54
 8013c72:	d077      	beq.n	8013d64 <_scanf_float+0x218>
 8013c74:	2b59      	cmp	r3, #89	; 0x59
 8013c76:	d199      	bne.n	8013bac <_scanf_float+0x60>
 8013c78:	2d07      	cmp	r5, #7
 8013c7a:	d197      	bne.n	8013bac <_scanf_float+0x60>
 8013c7c:	2508      	movs	r5, #8
 8013c7e:	e029      	b.n	8013cd4 <_scanf_float+0x188>
 8013c80:	2b74      	cmp	r3, #116	; 0x74
 8013c82:	d06f      	beq.n	8013d64 <_scanf_float+0x218>
 8013c84:	2b79      	cmp	r3, #121	; 0x79
 8013c86:	e7f6      	b.n	8013c76 <_scanf_float+0x12a>
 8013c88:	6821      	ldr	r1, [r4, #0]
 8013c8a:	05c8      	lsls	r0, r1, #23
 8013c8c:	d51a      	bpl.n	8013cc4 <_scanf_float+0x178>
 8013c8e:	9b02      	ldr	r3, [sp, #8]
 8013c90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013c94:	6021      	str	r1, [r4, #0]
 8013c96:	f109 0901 	add.w	r9, r9, #1
 8013c9a:	b11b      	cbz	r3, 8013ca4 <_scanf_float+0x158>
 8013c9c:	3b01      	subs	r3, #1
 8013c9e:	3201      	adds	r2, #1
 8013ca0:	9302      	str	r3, [sp, #8]
 8013ca2:	60a2      	str	r2, [r4, #8]
 8013ca4:	68a3      	ldr	r3, [r4, #8]
 8013ca6:	3b01      	subs	r3, #1
 8013ca8:	60a3      	str	r3, [r4, #8]
 8013caa:	6923      	ldr	r3, [r4, #16]
 8013cac:	3301      	adds	r3, #1
 8013cae:	6123      	str	r3, [r4, #16]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	3b01      	subs	r3, #1
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	607b      	str	r3, [r7, #4]
 8013cb8:	f340 8084 	ble.w	8013dc4 <_scanf_float+0x278>
 8013cbc:	683b      	ldr	r3, [r7, #0]
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	603b      	str	r3, [r7, #0]
 8013cc2:	e766      	b.n	8013b92 <_scanf_float+0x46>
 8013cc4:	eb1a 0f05 	cmn.w	sl, r5
 8013cc8:	f47f af70 	bne.w	8013bac <_scanf_float+0x60>
 8013ccc:	6822      	ldr	r2, [r4, #0]
 8013cce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013cd2:	6022      	str	r2, [r4, #0]
 8013cd4:	f806 3b01 	strb.w	r3, [r6], #1
 8013cd8:	e7e4      	b.n	8013ca4 <_scanf_float+0x158>
 8013cda:	6822      	ldr	r2, [r4, #0]
 8013cdc:	0610      	lsls	r0, r2, #24
 8013cde:	f57f af65 	bpl.w	8013bac <_scanf_float+0x60>
 8013ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013ce6:	e7f4      	b.n	8013cd2 <_scanf_float+0x186>
 8013ce8:	f1ba 0f00 	cmp.w	sl, #0
 8013cec:	d10e      	bne.n	8013d0c <_scanf_float+0x1c0>
 8013cee:	f1b9 0f00 	cmp.w	r9, #0
 8013cf2:	d10e      	bne.n	8013d12 <_scanf_float+0x1c6>
 8013cf4:	6822      	ldr	r2, [r4, #0]
 8013cf6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013cfa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013cfe:	d108      	bne.n	8013d12 <_scanf_float+0x1c6>
 8013d00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013d04:	6022      	str	r2, [r4, #0]
 8013d06:	f04f 0a01 	mov.w	sl, #1
 8013d0a:	e7e3      	b.n	8013cd4 <_scanf_float+0x188>
 8013d0c:	f1ba 0f02 	cmp.w	sl, #2
 8013d10:	d055      	beq.n	8013dbe <_scanf_float+0x272>
 8013d12:	2d01      	cmp	r5, #1
 8013d14:	d002      	beq.n	8013d1c <_scanf_float+0x1d0>
 8013d16:	2d04      	cmp	r5, #4
 8013d18:	f47f af48 	bne.w	8013bac <_scanf_float+0x60>
 8013d1c:	3501      	adds	r5, #1
 8013d1e:	b2ed      	uxtb	r5, r5
 8013d20:	e7d8      	b.n	8013cd4 <_scanf_float+0x188>
 8013d22:	f1ba 0f01 	cmp.w	sl, #1
 8013d26:	f47f af41 	bne.w	8013bac <_scanf_float+0x60>
 8013d2a:	f04f 0a02 	mov.w	sl, #2
 8013d2e:	e7d1      	b.n	8013cd4 <_scanf_float+0x188>
 8013d30:	b97d      	cbnz	r5, 8013d52 <_scanf_float+0x206>
 8013d32:	f1b9 0f00 	cmp.w	r9, #0
 8013d36:	f47f af3c 	bne.w	8013bb2 <_scanf_float+0x66>
 8013d3a:	6822      	ldr	r2, [r4, #0]
 8013d3c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013d40:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013d44:	f47f af39 	bne.w	8013bba <_scanf_float+0x6e>
 8013d48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013d4c:	6022      	str	r2, [r4, #0]
 8013d4e:	2501      	movs	r5, #1
 8013d50:	e7c0      	b.n	8013cd4 <_scanf_float+0x188>
 8013d52:	2d03      	cmp	r5, #3
 8013d54:	d0e2      	beq.n	8013d1c <_scanf_float+0x1d0>
 8013d56:	2d05      	cmp	r5, #5
 8013d58:	e7de      	b.n	8013d18 <_scanf_float+0x1cc>
 8013d5a:	2d02      	cmp	r5, #2
 8013d5c:	f47f af26 	bne.w	8013bac <_scanf_float+0x60>
 8013d60:	2503      	movs	r5, #3
 8013d62:	e7b7      	b.n	8013cd4 <_scanf_float+0x188>
 8013d64:	2d06      	cmp	r5, #6
 8013d66:	f47f af21 	bne.w	8013bac <_scanf_float+0x60>
 8013d6a:	2507      	movs	r5, #7
 8013d6c:	e7b2      	b.n	8013cd4 <_scanf_float+0x188>
 8013d6e:	6822      	ldr	r2, [r4, #0]
 8013d70:	0591      	lsls	r1, r2, #22
 8013d72:	f57f af1b 	bpl.w	8013bac <_scanf_float+0x60>
 8013d76:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013d7a:	6022      	str	r2, [r4, #0]
 8013d7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013d80:	e7a8      	b.n	8013cd4 <_scanf_float+0x188>
 8013d82:	6822      	ldr	r2, [r4, #0]
 8013d84:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013d88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013d8c:	d006      	beq.n	8013d9c <_scanf_float+0x250>
 8013d8e:	0550      	lsls	r0, r2, #21
 8013d90:	f57f af0c 	bpl.w	8013bac <_scanf_float+0x60>
 8013d94:	f1b9 0f00 	cmp.w	r9, #0
 8013d98:	f43f af0f 	beq.w	8013bba <_scanf_float+0x6e>
 8013d9c:	0591      	lsls	r1, r2, #22
 8013d9e:	bf58      	it	pl
 8013da0:	9901      	ldrpl	r1, [sp, #4]
 8013da2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013da6:	bf58      	it	pl
 8013da8:	eba9 0101 	subpl.w	r1, r9, r1
 8013dac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013db0:	bf58      	it	pl
 8013db2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013db6:	6022      	str	r2, [r4, #0]
 8013db8:	f04f 0900 	mov.w	r9, #0
 8013dbc:	e78a      	b.n	8013cd4 <_scanf_float+0x188>
 8013dbe:	f04f 0a03 	mov.w	sl, #3
 8013dc2:	e787      	b.n	8013cd4 <_scanf_float+0x188>
 8013dc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013dc8:	4639      	mov	r1, r7
 8013dca:	4640      	mov	r0, r8
 8013dcc:	4798      	blx	r3
 8013dce:	2800      	cmp	r0, #0
 8013dd0:	f43f aedf 	beq.w	8013b92 <_scanf_float+0x46>
 8013dd4:	e6ea      	b.n	8013bac <_scanf_float+0x60>
 8013dd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013dda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013dde:	463a      	mov	r2, r7
 8013de0:	4640      	mov	r0, r8
 8013de2:	4798      	blx	r3
 8013de4:	6923      	ldr	r3, [r4, #16]
 8013de6:	3b01      	subs	r3, #1
 8013de8:	6123      	str	r3, [r4, #16]
 8013dea:	e6ec      	b.n	8013bc6 <_scanf_float+0x7a>
 8013dec:	1e6b      	subs	r3, r5, #1
 8013dee:	2b06      	cmp	r3, #6
 8013df0:	d825      	bhi.n	8013e3e <_scanf_float+0x2f2>
 8013df2:	2d02      	cmp	r5, #2
 8013df4:	d836      	bhi.n	8013e64 <_scanf_float+0x318>
 8013df6:	455e      	cmp	r6, fp
 8013df8:	f67f aee8 	bls.w	8013bcc <_scanf_float+0x80>
 8013dfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013e00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013e04:	463a      	mov	r2, r7
 8013e06:	4640      	mov	r0, r8
 8013e08:	4798      	blx	r3
 8013e0a:	6923      	ldr	r3, [r4, #16]
 8013e0c:	3b01      	subs	r3, #1
 8013e0e:	6123      	str	r3, [r4, #16]
 8013e10:	e7f1      	b.n	8013df6 <_scanf_float+0x2aa>
 8013e12:	9802      	ldr	r0, [sp, #8]
 8013e14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013e18:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013e1c:	9002      	str	r0, [sp, #8]
 8013e1e:	463a      	mov	r2, r7
 8013e20:	4640      	mov	r0, r8
 8013e22:	4798      	blx	r3
 8013e24:	6923      	ldr	r3, [r4, #16]
 8013e26:	3b01      	subs	r3, #1
 8013e28:	6123      	str	r3, [r4, #16]
 8013e2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013e2e:	fa5f fa8a 	uxtb.w	sl, sl
 8013e32:	f1ba 0f02 	cmp.w	sl, #2
 8013e36:	d1ec      	bne.n	8013e12 <_scanf_float+0x2c6>
 8013e38:	3d03      	subs	r5, #3
 8013e3a:	b2ed      	uxtb	r5, r5
 8013e3c:	1b76      	subs	r6, r6, r5
 8013e3e:	6823      	ldr	r3, [r4, #0]
 8013e40:	05da      	lsls	r2, r3, #23
 8013e42:	d52f      	bpl.n	8013ea4 <_scanf_float+0x358>
 8013e44:	055b      	lsls	r3, r3, #21
 8013e46:	d510      	bpl.n	8013e6a <_scanf_float+0x31e>
 8013e48:	455e      	cmp	r6, fp
 8013e4a:	f67f aebf 	bls.w	8013bcc <_scanf_float+0x80>
 8013e4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013e52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013e56:	463a      	mov	r2, r7
 8013e58:	4640      	mov	r0, r8
 8013e5a:	4798      	blx	r3
 8013e5c:	6923      	ldr	r3, [r4, #16]
 8013e5e:	3b01      	subs	r3, #1
 8013e60:	6123      	str	r3, [r4, #16]
 8013e62:	e7f1      	b.n	8013e48 <_scanf_float+0x2fc>
 8013e64:	46aa      	mov	sl, r5
 8013e66:	9602      	str	r6, [sp, #8]
 8013e68:	e7df      	b.n	8013e2a <_scanf_float+0x2de>
 8013e6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013e6e:	6923      	ldr	r3, [r4, #16]
 8013e70:	2965      	cmp	r1, #101	; 0x65
 8013e72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8013e76:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8013e7a:	6123      	str	r3, [r4, #16]
 8013e7c:	d00c      	beq.n	8013e98 <_scanf_float+0x34c>
 8013e7e:	2945      	cmp	r1, #69	; 0x45
 8013e80:	d00a      	beq.n	8013e98 <_scanf_float+0x34c>
 8013e82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013e86:	463a      	mov	r2, r7
 8013e88:	4640      	mov	r0, r8
 8013e8a:	4798      	blx	r3
 8013e8c:	6923      	ldr	r3, [r4, #16]
 8013e8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013e92:	3b01      	subs	r3, #1
 8013e94:	1eb5      	subs	r5, r6, #2
 8013e96:	6123      	str	r3, [r4, #16]
 8013e98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013e9c:	463a      	mov	r2, r7
 8013e9e:	4640      	mov	r0, r8
 8013ea0:	4798      	blx	r3
 8013ea2:	462e      	mov	r6, r5
 8013ea4:	6825      	ldr	r5, [r4, #0]
 8013ea6:	f015 0510 	ands.w	r5, r5, #16
 8013eaa:	d158      	bne.n	8013f5e <_scanf_float+0x412>
 8013eac:	7035      	strb	r5, [r6, #0]
 8013eae:	6823      	ldr	r3, [r4, #0]
 8013eb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013eb8:	d11c      	bne.n	8013ef4 <_scanf_float+0x3a8>
 8013eba:	9b01      	ldr	r3, [sp, #4]
 8013ebc:	454b      	cmp	r3, r9
 8013ebe:	eba3 0209 	sub.w	r2, r3, r9
 8013ec2:	d124      	bne.n	8013f0e <_scanf_float+0x3c2>
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	4659      	mov	r1, fp
 8013ec8:	4640      	mov	r0, r8
 8013eca:	f000 ffa3 	bl	8014e14 <_strtod_r>
 8013ece:	9b03      	ldr	r3, [sp, #12]
 8013ed0:	6821      	ldr	r1, [r4, #0]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	f011 0f02 	tst.w	r1, #2
 8013ed8:	ec57 6b10 	vmov	r6, r7, d0
 8013edc:	f103 0204 	add.w	r2, r3, #4
 8013ee0:	d020      	beq.n	8013f24 <_scanf_float+0x3d8>
 8013ee2:	9903      	ldr	r1, [sp, #12]
 8013ee4:	600a      	str	r2, [r1, #0]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	e9c3 6700 	strd	r6, r7, [r3]
 8013eec:	68e3      	ldr	r3, [r4, #12]
 8013eee:	3301      	adds	r3, #1
 8013ef0:	60e3      	str	r3, [r4, #12]
 8013ef2:	e66c      	b.n	8013bce <_scanf_float+0x82>
 8013ef4:	9b04      	ldr	r3, [sp, #16]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d0e4      	beq.n	8013ec4 <_scanf_float+0x378>
 8013efa:	9905      	ldr	r1, [sp, #20]
 8013efc:	230a      	movs	r3, #10
 8013efe:	462a      	mov	r2, r5
 8013f00:	3101      	adds	r1, #1
 8013f02:	4640      	mov	r0, r8
 8013f04:	f001 f810 	bl	8014f28 <_strtol_r>
 8013f08:	9b04      	ldr	r3, [sp, #16]
 8013f0a:	9e05      	ldr	r6, [sp, #20]
 8013f0c:	1ac2      	subs	r2, r0, r3
 8013f0e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013f12:	429e      	cmp	r6, r3
 8013f14:	bf28      	it	cs
 8013f16:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013f1a:	4912      	ldr	r1, [pc, #72]	; (8013f64 <_scanf_float+0x418>)
 8013f1c:	4630      	mov	r0, r6
 8013f1e:	f000 f8a5 	bl	801406c <siprintf>
 8013f22:	e7cf      	b.n	8013ec4 <_scanf_float+0x378>
 8013f24:	f011 0f04 	tst.w	r1, #4
 8013f28:	9903      	ldr	r1, [sp, #12]
 8013f2a:	600a      	str	r2, [r1, #0]
 8013f2c:	d1db      	bne.n	8013ee6 <_scanf_float+0x39a>
 8013f2e:	f8d3 8000 	ldr.w	r8, [r3]
 8013f32:	ee10 2a10 	vmov	r2, s0
 8013f36:	ee10 0a10 	vmov	r0, s0
 8013f3a:	463b      	mov	r3, r7
 8013f3c:	4639      	mov	r1, r7
 8013f3e:	f7ec fe05 	bl	8000b4c <__aeabi_dcmpun>
 8013f42:	b128      	cbz	r0, 8013f50 <_scanf_float+0x404>
 8013f44:	4808      	ldr	r0, [pc, #32]	; (8013f68 <_scanf_float+0x41c>)
 8013f46:	f000 f88b 	bl	8014060 <nanf>
 8013f4a:	ed88 0a00 	vstr	s0, [r8]
 8013f4e:	e7cd      	b.n	8013eec <_scanf_float+0x3a0>
 8013f50:	4630      	mov	r0, r6
 8013f52:	4639      	mov	r1, r7
 8013f54:	f7ec fe58 	bl	8000c08 <__aeabi_d2f>
 8013f58:	f8c8 0000 	str.w	r0, [r8]
 8013f5c:	e7c6      	b.n	8013eec <_scanf_float+0x3a0>
 8013f5e:	2500      	movs	r5, #0
 8013f60:	e635      	b.n	8013bce <_scanf_float+0x82>
 8013f62:	bf00      	nop
 8013f64:	080187de 	.word	0x080187de
 8013f68:	08018b13 	.word	0x08018b13

08013f6c <cleanup_glue>:
 8013f6c:	b538      	push	{r3, r4, r5, lr}
 8013f6e:	460c      	mov	r4, r1
 8013f70:	6809      	ldr	r1, [r1, #0]
 8013f72:	4605      	mov	r5, r0
 8013f74:	b109      	cbz	r1, 8013f7a <cleanup_glue+0xe>
 8013f76:	f7ff fff9 	bl	8013f6c <cleanup_glue>
 8013f7a:	4621      	mov	r1, r4
 8013f7c:	4628      	mov	r0, r5
 8013f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f82:	f002 bfe9 	b.w	8016f58 <_free_r>
	...

08013f88 <_reclaim_reent>:
 8013f88:	4b2c      	ldr	r3, [pc, #176]	; (801403c <_reclaim_reent+0xb4>)
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	4283      	cmp	r3, r0
 8013f8e:	b570      	push	{r4, r5, r6, lr}
 8013f90:	4604      	mov	r4, r0
 8013f92:	d051      	beq.n	8014038 <_reclaim_reent+0xb0>
 8013f94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013f96:	b143      	cbz	r3, 8013faa <_reclaim_reent+0x22>
 8013f98:	68db      	ldr	r3, [r3, #12]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d14a      	bne.n	8014034 <_reclaim_reent+0xac>
 8013f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fa0:	6819      	ldr	r1, [r3, #0]
 8013fa2:	b111      	cbz	r1, 8013faa <_reclaim_reent+0x22>
 8013fa4:	4620      	mov	r0, r4
 8013fa6:	f002 ffd7 	bl	8016f58 <_free_r>
 8013faa:	6961      	ldr	r1, [r4, #20]
 8013fac:	b111      	cbz	r1, 8013fb4 <_reclaim_reent+0x2c>
 8013fae:	4620      	mov	r0, r4
 8013fb0:	f002 ffd2 	bl	8016f58 <_free_r>
 8013fb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013fb6:	b111      	cbz	r1, 8013fbe <_reclaim_reent+0x36>
 8013fb8:	4620      	mov	r0, r4
 8013fba:	f002 ffcd 	bl	8016f58 <_free_r>
 8013fbe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013fc0:	b111      	cbz	r1, 8013fc8 <_reclaim_reent+0x40>
 8013fc2:	4620      	mov	r0, r4
 8013fc4:	f002 ffc8 	bl	8016f58 <_free_r>
 8013fc8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013fca:	b111      	cbz	r1, 8013fd2 <_reclaim_reent+0x4a>
 8013fcc:	4620      	mov	r0, r4
 8013fce:	f002 ffc3 	bl	8016f58 <_free_r>
 8013fd2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013fd4:	b111      	cbz	r1, 8013fdc <_reclaim_reent+0x54>
 8013fd6:	4620      	mov	r0, r4
 8013fd8:	f002 ffbe 	bl	8016f58 <_free_r>
 8013fdc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013fde:	b111      	cbz	r1, 8013fe6 <_reclaim_reent+0x5e>
 8013fe0:	4620      	mov	r0, r4
 8013fe2:	f002 ffb9 	bl	8016f58 <_free_r>
 8013fe6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013fe8:	b111      	cbz	r1, 8013ff0 <_reclaim_reent+0x68>
 8013fea:	4620      	mov	r0, r4
 8013fec:	f002 ffb4 	bl	8016f58 <_free_r>
 8013ff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ff2:	b111      	cbz	r1, 8013ffa <_reclaim_reent+0x72>
 8013ff4:	4620      	mov	r0, r4
 8013ff6:	f002 ffaf 	bl	8016f58 <_free_r>
 8013ffa:	69a3      	ldr	r3, [r4, #24]
 8013ffc:	b1e3      	cbz	r3, 8014038 <_reclaim_reent+0xb0>
 8013ffe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014000:	4620      	mov	r0, r4
 8014002:	4798      	blx	r3
 8014004:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014006:	b1b9      	cbz	r1, 8014038 <_reclaim_reent+0xb0>
 8014008:	4620      	mov	r0, r4
 801400a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801400e:	f7ff bfad 	b.w	8013f6c <cleanup_glue>
 8014012:	5949      	ldr	r1, [r1, r5]
 8014014:	b941      	cbnz	r1, 8014028 <_reclaim_reent+0xa0>
 8014016:	3504      	adds	r5, #4
 8014018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801401a:	2d80      	cmp	r5, #128	; 0x80
 801401c:	68d9      	ldr	r1, [r3, #12]
 801401e:	d1f8      	bne.n	8014012 <_reclaim_reent+0x8a>
 8014020:	4620      	mov	r0, r4
 8014022:	f002 ff99 	bl	8016f58 <_free_r>
 8014026:	e7ba      	b.n	8013f9e <_reclaim_reent+0x16>
 8014028:	680e      	ldr	r6, [r1, #0]
 801402a:	4620      	mov	r0, r4
 801402c:	f002 ff94 	bl	8016f58 <_free_r>
 8014030:	4631      	mov	r1, r6
 8014032:	e7ef      	b.n	8014014 <_reclaim_reent+0x8c>
 8014034:	2500      	movs	r5, #0
 8014036:	e7ef      	b.n	8014018 <_reclaim_reent+0x90>
 8014038:	bd70      	pop	{r4, r5, r6, pc}
 801403a:	bf00      	nop
 801403c:	2000019c 	.word	0x2000019c

08014040 <_sbrk_r>:
 8014040:	b538      	push	{r3, r4, r5, lr}
 8014042:	4d06      	ldr	r5, [pc, #24]	; (801405c <_sbrk_r+0x1c>)
 8014044:	2300      	movs	r3, #0
 8014046:	4604      	mov	r4, r0
 8014048:	4608      	mov	r0, r1
 801404a:	602b      	str	r3, [r5, #0]
 801404c:	f7ef fc2a 	bl	80038a4 <_sbrk>
 8014050:	1c43      	adds	r3, r0, #1
 8014052:	d102      	bne.n	801405a <_sbrk_r+0x1a>
 8014054:	682b      	ldr	r3, [r5, #0]
 8014056:	b103      	cbz	r3, 801405a <_sbrk_r+0x1a>
 8014058:	6023      	str	r3, [r4, #0]
 801405a:	bd38      	pop	{r3, r4, r5, pc}
 801405c:	2000cb2c 	.word	0x2000cb2c

08014060 <nanf>:
 8014060:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014068 <nanf+0x8>
 8014064:	4770      	bx	lr
 8014066:	bf00      	nop
 8014068:	7fc00000 	.word	0x7fc00000

0801406c <siprintf>:
 801406c:	b40e      	push	{r1, r2, r3}
 801406e:	b500      	push	{lr}
 8014070:	b09c      	sub	sp, #112	; 0x70
 8014072:	ab1d      	add	r3, sp, #116	; 0x74
 8014074:	9002      	str	r0, [sp, #8]
 8014076:	9006      	str	r0, [sp, #24]
 8014078:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801407c:	4809      	ldr	r0, [pc, #36]	; (80140a4 <siprintf+0x38>)
 801407e:	9107      	str	r1, [sp, #28]
 8014080:	9104      	str	r1, [sp, #16]
 8014082:	4909      	ldr	r1, [pc, #36]	; (80140a8 <siprintf+0x3c>)
 8014084:	f853 2b04 	ldr.w	r2, [r3], #4
 8014088:	9105      	str	r1, [sp, #20]
 801408a:	6800      	ldr	r0, [r0, #0]
 801408c:	9301      	str	r3, [sp, #4]
 801408e:	a902      	add	r1, sp, #8
 8014090:	f003 f80e 	bl	80170b0 <_svfiprintf_r>
 8014094:	9b02      	ldr	r3, [sp, #8]
 8014096:	2200      	movs	r2, #0
 8014098:	701a      	strb	r2, [r3, #0]
 801409a:	b01c      	add	sp, #112	; 0x70
 801409c:	f85d eb04 	ldr.w	lr, [sp], #4
 80140a0:	b003      	add	sp, #12
 80140a2:	4770      	bx	lr
 80140a4:	2000019c 	.word	0x2000019c
 80140a8:	ffff0208 	.word	0xffff0208

080140ac <siscanf>:
 80140ac:	b40e      	push	{r1, r2, r3}
 80140ae:	b510      	push	{r4, lr}
 80140b0:	b09f      	sub	sp, #124	; 0x7c
 80140b2:	ac21      	add	r4, sp, #132	; 0x84
 80140b4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80140b8:	f854 2b04 	ldr.w	r2, [r4], #4
 80140bc:	9201      	str	r2, [sp, #4]
 80140be:	f8ad 101c 	strh.w	r1, [sp, #28]
 80140c2:	9004      	str	r0, [sp, #16]
 80140c4:	9008      	str	r0, [sp, #32]
 80140c6:	f7ec f893 	bl	80001f0 <strlen>
 80140ca:	4b0c      	ldr	r3, [pc, #48]	; (80140fc <siscanf+0x50>)
 80140cc:	9005      	str	r0, [sp, #20]
 80140ce:	9009      	str	r0, [sp, #36]	; 0x24
 80140d0:	930d      	str	r3, [sp, #52]	; 0x34
 80140d2:	480b      	ldr	r0, [pc, #44]	; (8014100 <siscanf+0x54>)
 80140d4:	9a01      	ldr	r2, [sp, #4]
 80140d6:	6800      	ldr	r0, [r0, #0]
 80140d8:	9403      	str	r4, [sp, #12]
 80140da:	2300      	movs	r3, #0
 80140dc:	9311      	str	r3, [sp, #68]	; 0x44
 80140de:	9316      	str	r3, [sp, #88]	; 0x58
 80140e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80140e8:	a904      	add	r1, sp, #16
 80140ea:	4623      	mov	r3, r4
 80140ec:	f003 f93a 	bl	8017364 <__ssvfiscanf_r>
 80140f0:	b01f      	add	sp, #124	; 0x7c
 80140f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140f6:	b003      	add	sp, #12
 80140f8:	4770      	bx	lr
 80140fa:	bf00      	nop
 80140fc:	08014127 	.word	0x08014127
 8014100:	2000019c 	.word	0x2000019c

08014104 <__sread>:
 8014104:	b510      	push	{r4, lr}
 8014106:	460c      	mov	r4, r1
 8014108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801410c:	f003 fbee 	bl	80178ec <_read_r>
 8014110:	2800      	cmp	r0, #0
 8014112:	bfab      	itete	ge
 8014114:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014116:	89a3      	ldrhlt	r3, [r4, #12]
 8014118:	181b      	addge	r3, r3, r0
 801411a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801411e:	bfac      	ite	ge
 8014120:	6563      	strge	r3, [r4, #84]	; 0x54
 8014122:	81a3      	strhlt	r3, [r4, #12]
 8014124:	bd10      	pop	{r4, pc}

08014126 <__seofread>:
 8014126:	2000      	movs	r0, #0
 8014128:	4770      	bx	lr

0801412a <__swrite>:
 801412a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801412e:	461f      	mov	r7, r3
 8014130:	898b      	ldrh	r3, [r1, #12]
 8014132:	05db      	lsls	r3, r3, #23
 8014134:	4605      	mov	r5, r0
 8014136:	460c      	mov	r4, r1
 8014138:	4616      	mov	r6, r2
 801413a:	d505      	bpl.n	8014148 <__swrite+0x1e>
 801413c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014140:	2302      	movs	r3, #2
 8014142:	2200      	movs	r2, #0
 8014144:	f002 fa06 	bl	8016554 <_lseek_r>
 8014148:	89a3      	ldrh	r3, [r4, #12]
 801414a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801414e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014152:	81a3      	strh	r3, [r4, #12]
 8014154:	4632      	mov	r2, r6
 8014156:	463b      	mov	r3, r7
 8014158:	4628      	mov	r0, r5
 801415a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801415e:	f000 bf29 	b.w	8014fb4 <_write_r>

08014162 <__sseek>:
 8014162:	b510      	push	{r4, lr}
 8014164:	460c      	mov	r4, r1
 8014166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801416a:	f002 f9f3 	bl	8016554 <_lseek_r>
 801416e:	1c43      	adds	r3, r0, #1
 8014170:	89a3      	ldrh	r3, [r4, #12]
 8014172:	bf15      	itete	ne
 8014174:	6560      	strne	r0, [r4, #84]	; 0x54
 8014176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801417a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801417e:	81a3      	strheq	r3, [r4, #12]
 8014180:	bf18      	it	ne
 8014182:	81a3      	strhne	r3, [r4, #12]
 8014184:	bd10      	pop	{r4, pc}

08014186 <__sclose>:
 8014186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801418a:	f000 bf25 	b.w	8014fd8 <_close_r>

0801418e <strcpy>:
 801418e:	4603      	mov	r3, r0
 8014190:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014194:	f803 2b01 	strb.w	r2, [r3], #1
 8014198:	2a00      	cmp	r2, #0
 801419a:	d1f9      	bne.n	8014190 <strcpy+0x2>
 801419c:	4770      	bx	lr

0801419e <strncmp>:
 801419e:	b510      	push	{r4, lr}
 80141a0:	b16a      	cbz	r2, 80141be <strncmp+0x20>
 80141a2:	3901      	subs	r1, #1
 80141a4:	1884      	adds	r4, r0, r2
 80141a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80141aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80141ae:	4293      	cmp	r3, r2
 80141b0:	d103      	bne.n	80141ba <strncmp+0x1c>
 80141b2:	42a0      	cmp	r0, r4
 80141b4:	d001      	beq.n	80141ba <strncmp+0x1c>
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d1f5      	bne.n	80141a6 <strncmp+0x8>
 80141ba:	1a98      	subs	r0, r3, r2
 80141bc:	bd10      	pop	{r4, pc}
 80141be:	4610      	mov	r0, r2
 80141c0:	e7fc      	b.n	80141bc <strncmp+0x1e>

080141c2 <sulp>:
 80141c2:	b570      	push	{r4, r5, r6, lr}
 80141c4:	4604      	mov	r4, r0
 80141c6:	460d      	mov	r5, r1
 80141c8:	ec45 4b10 	vmov	d0, r4, r5
 80141cc:	4616      	mov	r6, r2
 80141ce:	f002 fd65 	bl	8016c9c <__ulp>
 80141d2:	ec51 0b10 	vmov	r0, r1, d0
 80141d6:	b17e      	cbz	r6, 80141f8 <sulp+0x36>
 80141d8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80141dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	dd09      	ble.n	80141f8 <sulp+0x36>
 80141e4:	051b      	lsls	r3, r3, #20
 80141e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80141ea:	2400      	movs	r4, #0
 80141ec:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80141f0:	4622      	mov	r2, r4
 80141f2:	462b      	mov	r3, r5
 80141f4:	f7ec fa10 	bl	8000618 <__aeabi_dmul>
 80141f8:	bd70      	pop	{r4, r5, r6, pc}
 80141fa:	0000      	movs	r0, r0
 80141fc:	0000      	movs	r0, r0
	...

08014200 <_strtod_l>:
 8014200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014204:	b0a3      	sub	sp, #140	; 0x8c
 8014206:	461f      	mov	r7, r3
 8014208:	2300      	movs	r3, #0
 801420a:	931e      	str	r3, [sp, #120]	; 0x78
 801420c:	4ba4      	ldr	r3, [pc, #656]	; (80144a0 <_strtod_l+0x2a0>)
 801420e:	9219      	str	r2, [sp, #100]	; 0x64
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	9307      	str	r3, [sp, #28]
 8014214:	4604      	mov	r4, r0
 8014216:	4618      	mov	r0, r3
 8014218:	4688      	mov	r8, r1
 801421a:	f7eb ffe9 	bl	80001f0 <strlen>
 801421e:	f04f 0a00 	mov.w	sl, #0
 8014222:	4605      	mov	r5, r0
 8014224:	f04f 0b00 	mov.w	fp, #0
 8014228:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801422c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801422e:	781a      	ldrb	r2, [r3, #0]
 8014230:	2a2b      	cmp	r2, #43	; 0x2b
 8014232:	d04c      	beq.n	80142ce <_strtod_l+0xce>
 8014234:	d839      	bhi.n	80142aa <_strtod_l+0xaa>
 8014236:	2a0d      	cmp	r2, #13
 8014238:	d832      	bhi.n	80142a0 <_strtod_l+0xa0>
 801423a:	2a08      	cmp	r2, #8
 801423c:	d832      	bhi.n	80142a4 <_strtod_l+0xa4>
 801423e:	2a00      	cmp	r2, #0
 8014240:	d03c      	beq.n	80142bc <_strtod_l+0xbc>
 8014242:	2300      	movs	r3, #0
 8014244:	930e      	str	r3, [sp, #56]	; 0x38
 8014246:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014248:	7833      	ldrb	r3, [r6, #0]
 801424a:	2b30      	cmp	r3, #48	; 0x30
 801424c:	f040 80b4 	bne.w	80143b8 <_strtod_l+0x1b8>
 8014250:	7873      	ldrb	r3, [r6, #1]
 8014252:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014256:	2b58      	cmp	r3, #88	; 0x58
 8014258:	d16c      	bne.n	8014334 <_strtod_l+0x134>
 801425a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801425c:	9301      	str	r3, [sp, #4]
 801425e:	ab1e      	add	r3, sp, #120	; 0x78
 8014260:	9702      	str	r7, [sp, #8]
 8014262:	9300      	str	r3, [sp, #0]
 8014264:	4a8f      	ldr	r2, [pc, #572]	; (80144a4 <_strtod_l+0x2a4>)
 8014266:	ab1f      	add	r3, sp, #124	; 0x7c
 8014268:	a91d      	add	r1, sp, #116	; 0x74
 801426a:	4620      	mov	r0, r4
 801426c:	f001 fe66 	bl	8015f3c <__gethex>
 8014270:	f010 0707 	ands.w	r7, r0, #7
 8014274:	4605      	mov	r5, r0
 8014276:	d005      	beq.n	8014284 <_strtod_l+0x84>
 8014278:	2f06      	cmp	r7, #6
 801427a:	d12a      	bne.n	80142d2 <_strtod_l+0xd2>
 801427c:	3601      	adds	r6, #1
 801427e:	2300      	movs	r3, #0
 8014280:	961d      	str	r6, [sp, #116]	; 0x74
 8014282:	930e      	str	r3, [sp, #56]	; 0x38
 8014284:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014286:	2b00      	cmp	r3, #0
 8014288:	f040 8596 	bne.w	8014db8 <_strtod_l+0xbb8>
 801428c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801428e:	b1db      	cbz	r3, 80142c8 <_strtod_l+0xc8>
 8014290:	4652      	mov	r2, sl
 8014292:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014296:	ec43 2b10 	vmov	d0, r2, r3
 801429a:	b023      	add	sp, #140	; 0x8c
 801429c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142a0:	2a20      	cmp	r2, #32
 80142a2:	d1ce      	bne.n	8014242 <_strtod_l+0x42>
 80142a4:	3301      	adds	r3, #1
 80142a6:	931d      	str	r3, [sp, #116]	; 0x74
 80142a8:	e7c0      	b.n	801422c <_strtod_l+0x2c>
 80142aa:	2a2d      	cmp	r2, #45	; 0x2d
 80142ac:	d1c9      	bne.n	8014242 <_strtod_l+0x42>
 80142ae:	2201      	movs	r2, #1
 80142b0:	920e      	str	r2, [sp, #56]	; 0x38
 80142b2:	1c5a      	adds	r2, r3, #1
 80142b4:	921d      	str	r2, [sp, #116]	; 0x74
 80142b6:	785b      	ldrb	r3, [r3, #1]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d1c4      	bne.n	8014246 <_strtod_l+0x46>
 80142bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80142be:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	f040 8576 	bne.w	8014db4 <_strtod_l+0xbb4>
 80142c8:	4652      	mov	r2, sl
 80142ca:	465b      	mov	r3, fp
 80142cc:	e7e3      	b.n	8014296 <_strtod_l+0x96>
 80142ce:	2200      	movs	r2, #0
 80142d0:	e7ee      	b.n	80142b0 <_strtod_l+0xb0>
 80142d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80142d4:	b13a      	cbz	r2, 80142e6 <_strtod_l+0xe6>
 80142d6:	2135      	movs	r1, #53	; 0x35
 80142d8:	a820      	add	r0, sp, #128	; 0x80
 80142da:	f002 fdea 	bl	8016eb2 <__copybits>
 80142de:	991e      	ldr	r1, [sp, #120]	; 0x78
 80142e0:	4620      	mov	r0, r4
 80142e2:	f002 f9af 	bl	8016644 <_Bfree>
 80142e6:	3f01      	subs	r7, #1
 80142e8:	2f05      	cmp	r7, #5
 80142ea:	d807      	bhi.n	80142fc <_strtod_l+0xfc>
 80142ec:	e8df f007 	tbb	[pc, r7]
 80142f0:	1d180b0e 	.word	0x1d180b0e
 80142f4:	030e      	.short	0x030e
 80142f6:	f04f 0b00 	mov.w	fp, #0
 80142fa:	46da      	mov	sl, fp
 80142fc:	0728      	lsls	r0, r5, #28
 80142fe:	d5c1      	bpl.n	8014284 <_strtod_l+0x84>
 8014300:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014304:	e7be      	b.n	8014284 <_strtod_l+0x84>
 8014306:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801430a:	e7f7      	b.n	80142fc <_strtod_l+0xfc>
 801430c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8014310:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014312:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014316:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801431a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801431e:	e7ed      	b.n	80142fc <_strtod_l+0xfc>
 8014320:	f8df b184 	ldr.w	fp, [pc, #388]	; 80144a8 <_strtod_l+0x2a8>
 8014324:	f04f 0a00 	mov.w	sl, #0
 8014328:	e7e8      	b.n	80142fc <_strtod_l+0xfc>
 801432a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801432e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014332:	e7e3      	b.n	80142fc <_strtod_l+0xfc>
 8014334:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014336:	1c5a      	adds	r2, r3, #1
 8014338:	921d      	str	r2, [sp, #116]	; 0x74
 801433a:	785b      	ldrb	r3, [r3, #1]
 801433c:	2b30      	cmp	r3, #48	; 0x30
 801433e:	d0f9      	beq.n	8014334 <_strtod_l+0x134>
 8014340:	2b00      	cmp	r3, #0
 8014342:	d09f      	beq.n	8014284 <_strtod_l+0x84>
 8014344:	2301      	movs	r3, #1
 8014346:	f04f 0900 	mov.w	r9, #0
 801434a:	9304      	str	r3, [sp, #16]
 801434c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801434e:	930a      	str	r3, [sp, #40]	; 0x28
 8014350:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014354:	464f      	mov	r7, r9
 8014356:	220a      	movs	r2, #10
 8014358:	981d      	ldr	r0, [sp, #116]	; 0x74
 801435a:	7806      	ldrb	r6, [r0, #0]
 801435c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014360:	b2d9      	uxtb	r1, r3
 8014362:	2909      	cmp	r1, #9
 8014364:	d92a      	bls.n	80143bc <_strtod_l+0x1bc>
 8014366:	9907      	ldr	r1, [sp, #28]
 8014368:	462a      	mov	r2, r5
 801436a:	f7ff ff18 	bl	801419e <strncmp>
 801436e:	b398      	cbz	r0, 80143d8 <_strtod_l+0x1d8>
 8014370:	2000      	movs	r0, #0
 8014372:	4633      	mov	r3, r6
 8014374:	463d      	mov	r5, r7
 8014376:	9007      	str	r0, [sp, #28]
 8014378:	4602      	mov	r2, r0
 801437a:	2b65      	cmp	r3, #101	; 0x65
 801437c:	d001      	beq.n	8014382 <_strtod_l+0x182>
 801437e:	2b45      	cmp	r3, #69	; 0x45
 8014380:	d118      	bne.n	80143b4 <_strtod_l+0x1b4>
 8014382:	b91d      	cbnz	r5, 801438c <_strtod_l+0x18c>
 8014384:	9b04      	ldr	r3, [sp, #16]
 8014386:	4303      	orrs	r3, r0
 8014388:	d098      	beq.n	80142bc <_strtod_l+0xbc>
 801438a:	2500      	movs	r5, #0
 801438c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8014390:	f108 0301 	add.w	r3, r8, #1
 8014394:	931d      	str	r3, [sp, #116]	; 0x74
 8014396:	f898 3001 	ldrb.w	r3, [r8, #1]
 801439a:	2b2b      	cmp	r3, #43	; 0x2b
 801439c:	d075      	beq.n	801448a <_strtod_l+0x28a>
 801439e:	2b2d      	cmp	r3, #45	; 0x2d
 80143a0:	d07b      	beq.n	801449a <_strtod_l+0x29a>
 80143a2:	f04f 0c00 	mov.w	ip, #0
 80143a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80143aa:	2909      	cmp	r1, #9
 80143ac:	f240 8082 	bls.w	80144b4 <_strtod_l+0x2b4>
 80143b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80143b4:	2600      	movs	r6, #0
 80143b6:	e09d      	b.n	80144f4 <_strtod_l+0x2f4>
 80143b8:	2300      	movs	r3, #0
 80143ba:	e7c4      	b.n	8014346 <_strtod_l+0x146>
 80143bc:	2f08      	cmp	r7, #8
 80143be:	bfd8      	it	le
 80143c0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80143c2:	f100 0001 	add.w	r0, r0, #1
 80143c6:	bfda      	itte	le
 80143c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80143cc:	9309      	strle	r3, [sp, #36]	; 0x24
 80143ce:	fb02 3909 	mlagt	r9, r2, r9, r3
 80143d2:	3701      	adds	r7, #1
 80143d4:	901d      	str	r0, [sp, #116]	; 0x74
 80143d6:	e7bf      	b.n	8014358 <_strtod_l+0x158>
 80143d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80143da:	195a      	adds	r2, r3, r5
 80143dc:	921d      	str	r2, [sp, #116]	; 0x74
 80143de:	5d5b      	ldrb	r3, [r3, r5]
 80143e0:	2f00      	cmp	r7, #0
 80143e2:	d037      	beq.n	8014454 <_strtod_l+0x254>
 80143e4:	9007      	str	r0, [sp, #28]
 80143e6:	463d      	mov	r5, r7
 80143e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80143ec:	2a09      	cmp	r2, #9
 80143ee:	d912      	bls.n	8014416 <_strtod_l+0x216>
 80143f0:	2201      	movs	r2, #1
 80143f2:	e7c2      	b.n	801437a <_strtod_l+0x17a>
 80143f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80143f6:	1c5a      	adds	r2, r3, #1
 80143f8:	921d      	str	r2, [sp, #116]	; 0x74
 80143fa:	785b      	ldrb	r3, [r3, #1]
 80143fc:	3001      	adds	r0, #1
 80143fe:	2b30      	cmp	r3, #48	; 0x30
 8014400:	d0f8      	beq.n	80143f4 <_strtod_l+0x1f4>
 8014402:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8014406:	2a08      	cmp	r2, #8
 8014408:	f200 84db 	bhi.w	8014dc2 <_strtod_l+0xbc2>
 801440c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801440e:	9007      	str	r0, [sp, #28]
 8014410:	2000      	movs	r0, #0
 8014412:	920a      	str	r2, [sp, #40]	; 0x28
 8014414:	4605      	mov	r5, r0
 8014416:	3b30      	subs	r3, #48	; 0x30
 8014418:	f100 0201 	add.w	r2, r0, #1
 801441c:	d014      	beq.n	8014448 <_strtod_l+0x248>
 801441e:	9907      	ldr	r1, [sp, #28]
 8014420:	4411      	add	r1, r2
 8014422:	9107      	str	r1, [sp, #28]
 8014424:	462a      	mov	r2, r5
 8014426:	eb00 0e05 	add.w	lr, r0, r5
 801442a:	210a      	movs	r1, #10
 801442c:	4572      	cmp	r2, lr
 801442e:	d113      	bne.n	8014458 <_strtod_l+0x258>
 8014430:	182a      	adds	r2, r5, r0
 8014432:	2a08      	cmp	r2, #8
 8014434:	f105 0501 	add.w	r5, r5, #1
 8014438:	4405      	add	r5, r0
 801443a:	dc1c      	bgt.n	8014476 <_strtod_l+0x276>
 801443c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801443e:	220a      	movs	r2, #10
 8014440:	fb02 3301 	mla	r3, r2, r1, r3
 8014444:	9309      	str	r3, [sp, #36]	; 0x24
 8014446:	2200      	movs	r2, #0
 8014448:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801444a:	1c59      	adds	r1, r3, #1
 801444c:	911d      	str	r1, [sp, #116]	; 0x74
 801444e:	785b      	ldrb	r3, [r3, #1]
 8014450:	4610      	mov	r0, r2
 8014452:	e7c9      	b.n	80143e8 <_strtod_l+0x1e8>
 8014454:	4638      	mov	r0, r7
 8014456:	e7d2      	b.n	80143fe <_strtod_l+0x1fe>
 8014458:	2a08      	cmp	r2, #8
 801445a:	dc04      	bgt.n	8014466 <_strtod_l+0x266>
 801445c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801445e:	434e      	muls	r6, r1
 8014460:	9609      	str	r6, [sp, #36]	; 0x24
 8014462:	3201      	adds	r2, #1
 8014464:	e7e2      	b.n	801442c <_strtod_l+0x22c>
 8014466:	f102 0c01 	add.w	ip, r2, #1
 801446a:	f1bc 0f10 	cmp.w	ip, #16
 801446e:	bfd8      	it	le
 8014470:	fb01 f909 	mulle.w	r9, r1, r9
 8014474:	e7f5      	b.n	8014462 <_strtod_l+0x262>
 8014476:	2d10      	cmp	r5, #16
 8014478:	bfdc      	itt	le
 801447a:	220a      	movle	r2, #10
 801447c:	fb02 3909 	mlale	r9, r2, r9, r3
 8014480:	e7e1      	b.n	8014446 <_strtod_l+0x246>
 8014482:	2300      	movs	r3, #0
 8014484:	9307      	str	r3, [sp, #28]
 8014486:	2201      	movs	r2, #1
 8014488:	e77c      	b.n	8014384 <_strtod_l+0x184>
 801448a:	f04f 0c00 	mov.w	ip, #0
 801448e:	f108 0302 	add.w	r3, r8, #2
 8014492:	931d      	str	r3, [sp, #116]	; 0x74
 8014494:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014498:	e785      	b.n	80143a6 <_strtod_l+0x1a6>
 801449a:	f04f 0c01 	mov.w	ip, #1
 801449e:	e7f6      	b.n	801448e <_strtod_l+0x28e>
 80144a0:	08018938 	.word	0x08018938
 80144a4:	080187e4 	.word	0x080187e4
 80144a8:	7ff00000 	.word	0x7ff00000
 80144ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80144ae:	1c59      	adds	r1, r3, #1
 80144b0:	911d      	str	r1, [sp, #116]	; 0x74
 80144b2:	785b      	ldrb	r3, [r3, #1]
 80144b4:	2b30      	cmp	r3, #48	; 0x30
 80144b6:	d0f9      	beq.n	80144ac <_strtod_l+0x2ac>
 80144b8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80144bc:	2908      	cmp	r1, #8
 80144be:	f63f af79 	bhi.w	80143b4 <_strtod_l+0x1b4>
 80144c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80144c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80144c8:	9308      	str	r3, [sp, #32]
 80144ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80144cc:	1c59      	adds	r1, r3, #1
 80144ce:	911d      	str	r1, [sp, #116]	; 0x74
 80144d0:	785b      	ldrb	r3, [r3, #1]
 80144d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80144d6:	2e09      	cmp	r6, #9
 80144d8:	d937      	bls.n	801454a <_strtod_l+0x34a>
 80144da:	9e08      	ldr	r6, [sp, #32]
 80144dc:	1b89      	subs	r1, r1, r6
 80144de:	2908      	cmp	r1, #8
 80144e0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80144e4:	dc02      	bgt.n	80144ec <_strtod_l+0x2ec>
 80144e6:	4576      	cmp	r6, lr
 80144e8:	bfa8      	it	ge
 80144ea:	4676      	movge	r6, lr
 80144ec:	f1bc 0f00 	cmp.w	ip, #0
 80144f0:	d000      	beq.n	80144f4 <_strtod_l+0x2f4>
 80144f2:	4276      	negs	r6, r6
 80144f4:	2d00      	cmp	r5, #0
 80144f6:	d14f      	bne.n	8014598 <_strtod_l+0x398>
 80144f8:	9904      	ldr	r1, [sp, #16]
 80144fa:	4301      	orrs	r1, r0
 80144fc:	f47f aec2 	bne.w	8014284 <_strtod_l+0x84>
 8014500:	2a00      	cmp	r2, #0
 8014502:	f47f aedb 	bne.w	80142bc <_strtod_l+0xbc>
 8014506:	2b69      	cmp	r3, #105	; 0x69
 8014508:	d027      	beq.n	801455a <_strtod_l+0x35a>
 801450a:	dc24      	bgt.n	8014556 <_strtod_l+0x356>
 801450c:	2b49      	cmp	r3, #73	; 0x49
 801450e:	d024      	beq.n	801455a <_strtod_l+0x35a>
 8014510:	2b4e      	cmp	r3, #78	; 0x4e
 8014512:	f47f aed3 	bne.w	80142bc <_strtod_l+0xbc>
 8014516:	499e      	ldr	r1, [pc, #632]	; (8014790 <_strtod_l+0x590>)
 8014518:	a81d      	add	r0, sp, #116	; 0x74
 801451a:	f001 ff67 	bl	80163ec <__match>
 801451e:	2800      	cmp	r0, #0
 8014520:	f43f aecc 	beq.w	80142bc <_strtod_l+0xbc>
 8014524:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014526:	781b      	ldrb	r3, [r3, #0]
 8014528:	2b28      	cmp	r3, #40	; 0x28
 801452a:	d12d      	bne.n	8014588 <_strtod_l+0x388>
 801452c:	4999      	ldr	r1, [pc, #612]	; (8014794 <_strtod_l+0x594>)
 801452e:	aa20      	add	r2, sp, #128	; 0x80
 8014530:	a81d      	add	r0, sp, #116	; 0x74
 8014532:	f001 ff6f 	bl	8016414 <__hexnan>
 8014536:	2805      	cmp	r0, #5
 8014538:	d126      	bne.n	8014588 <_strtod_l+0x388>
 801453a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801453c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8014540:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014544:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014548:	e69c      	b.n	8014284 <_strtod_l+0x84>
 801454a:	210a      	movs	r1, #10
 801454c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014550:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014554:	e7b9      	b.n	80144ca <_strtod_l+0x2ca>
 8014556:	2b6e      	cmp	r3, #110	; 0x6e
 8014558:	e7db      	b.n	8014512 <_strtod_l+0x312>
 801455a:	498f      	ldr	r1, [pc, #572]	; (8014798 <_strtod_l+0x598>)
 801455c:	a81d      	add	r0, sp, #116	; 0x74
 801455e:	f001 ff45 	bl	80163ec <__match>
 8014562:	2800      	cmp	r0, #0
 8014564:	f43f aeaa 	beq.w	80142bc <_strtod_l+0xbc>
 8014568:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801456a:	498c      	ldr	r1, [pc, #560]	; (801479c <_strtod_l+0x59c>)
 801456c:	3b01      	subs	r3, #1
 801456e:	a81d      	add	r0, sp, #116	; 0x74
 8014570:	931d      	str	r3, [sp, #116]	; 0x74
 8014572:	f001 ff3b 	bl	80163ec <__match>
 8014576:	b910      	cbnz	r0, 801457e <_strtod_l+0x37e>
 8014578:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801457a:	3301      	adds	r3, #1
 801457c:	931d      	str	r3, [sp, #116]	; 0x74
 801457e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80147ac <_strtod_l+0x5ac>
 8014582:	f04f 0a00 	mov.w	sl, #0
 8014586:	e67d      	b.n	8014284 <_strtod_l+0x84>
 8014588:	4885      	ldr	r0, [pc, #532]	; (80147a0 <_strtod_l+0x5a0>)
 801458a:	f003 f9c1 	bl	8017910 <nan>
 801458e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8014592:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014596:	e675      	b.n	8014284 <_strtod_l+0x84>
 8014598:	9b07      	ldr	r3, [sp, #28]
 801459a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801459c:	1af3      	subs	r3, r6, r3
 801459e:	2f00      	cmp	r7, #0
 80145a0:	bf08      	it	eq
 80145a2:	462f      	moveq	r7, r5
 80145a4:	2d10      	cmp	r5, #16
 80145a6:	9308      	str	r3, [sp, #32]
 80145a8:	46a8      	mov	r8, r5
 80145aa:	bfa8      	it	ge
 80145ac:	f04f 0810 	movge.w	r8, #16
 80145b0:	f7eb ffb8 	bl	8000524 <__aeabi_ui2d>
 80145b4:	2d09      	cmp	r5, #9
 80145b6:	4682      	mov	sl, r0
 80145b8:	468b      	mov	fp, r1
 80145ba:	dd13      	ble.n	80145e4 <_strtod_l+0x3e4>
 80145bc:	4b79      	ldr	r3, [pc, #484]	; (80147a4 <_strtod_l+0x5a4>)
 80145be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80145c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80145c6:	f7ec f827 	bl	8000618 <__aeabi_dmul>
 80145ca:	4682      	mov	sl, r0
 80145cc:	4648      	mov	r0, r9
 80145ce:	468b      	mov	fp, r1
 80145d0:	f7eb ffa8 	bl	8000524 <__aeabi_ui2d>
 80145d4:	4602      	mov	r2, r0
 80145d6:	460b      	mov	r3, r1
 80145d8:	4650      	mov	r0, sl
 80145da:	4659      	mov	r1, fp
 80145dc:	f7eb fe66 	bl	80002ac <__adddf3>
 80145e0:	4682      	mov	sl, r0
 80145e2:	468b      	mov	fp, r1
 80145e4:	2d0f      	cmp	r5, #15
 80145e6:	dc38      	bgt.n	801465a <_strtod_l+0x45a>
 80145e8:	9b08      	ldr	r3, [sp, #32]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	f43f ae4a 	beq.w	8014284 <_strtod_l+0x84>
 80145f0:	dd24      	ble.n	801463c <_strtod_l+0x43c>
 80145f2:	2b16      	cmp	r3, #22
 80145f4:	dc0b      	bgt.n	801460e <_strtod_l+0x40e>
 80145f6:	4d6b      	ldr	r5, [pc, #428]	; (80147a4 <_strtod_l+0x5a4>)
 80145f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80145fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014600:	4652      	mov	r2, sl
 8014602:	465b      	mov	r3, fp
 8014604:	f7ec f808 	bl	8000618 <__aeabi_dmul>
 8014608:	4682      	mov	sl, r0
 801460a:	468b      	mov	fp, r1
 801460c:	e63a      	b.n	8014284 <_strtod_l+0x84>
 801460e:	9a08      	ldr	r2, [sp, #32]
 8014610:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8014614:	4293      	cmp	r3, r2
 8014616:	db20      	blt.n	801465a <_strtod_l+0x45a>
 8014618:	4c62      	ldr	r4, [pc, #392]	; (80147a4 <_strtod_l+0x5a4>)
 801461a:	f1c5 050f 	rsb	r5, r5, #15
 801461e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014622:	4652      	mov	r2, sl
 8014624:	465b      	mov	r3, fp
 8014626:	e9d1 0100 	ldrd	r0, r1, [r1]
 801462a:	f7eb fff5 	bl	8000618 <__aeabi_dmul>
 801462e:	9b08      	ldr	r3, [sp, #32]
 8014630:	1b5d      	subs	r5, r3, r5
 8014632:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8014636:	e9d4 2300 	ldrd	r2, r3, [r4]
 801463a:	e7e3      	b.n	8014604 <_strtod_l+0x404>
 801463c:	9b08      	ldr	r3, [sp, #32]
 801463e:	3316      	adds	r3, #22
 8014640:	db0b      	blt.n	801465a <_strtod_l+0x45a>
 8014642:	9b07      	ldr	r3, [sp, #28]
 8014644:	4a57      	ldr	r2, [pc, #348]	; (80147a4 <_strtod_l+0x5a4>)
 8014646:	1b9e      	subs	r6, r3, r6
 8014648:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801464c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014650:	4650      	mov	r0, sl
 8014652:	4659      	mov	r1, fp
 8014654:	f7ec f90a 	bl	800086c <__aeabi_ddiv>
 8014658:	e7d6      	b.n	8014608 <_strtod_l+0x408>
 801465a:	9b08      	ldr	r3, [sp, #32]
 801465c:	eba5 0808 	sub.w	r8, r5, r8
 8014660:	4498      	add	r8, r3
 8014662:	f1b8 0f00 	cmp.w	r8, #0
 8014666:	dd71      	ble.n	801474c <_strtod_l+0x54c>
 8014668:	f018 030f 	ands.w	r3, r8, #15
 801466c:	d00a      	beq.n	8014684 <_strtod_l+0x484>
 801466e:	494d      	ldr	r1, [pc, #308]	; (80147a4 <_strtod_l+0x5a4>)
 8014670:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014674:	4652      	mov	r2, sl
 8014676:	465b      	mov	r3, fp
 8014678:	e9d1 0100 	ldrd	r0, r1, [r1]
 801467c:	f7eb ffcc 	bl	8000618 <__aeabi_dmul>
 8014680:	4682      	mov	sl, r0
 8014682:	468b      	mov	fp, r1
 8014684:	f038 080f 	bics.w	r8, r8, #15
 8014688:	d04d      	beq.n	8014726 <_strtod_l+0x526>
 801468a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801468e:	dd22      	ble.n	80146d6 <_strtod_l+0x4d6>
 8014690:	2500      	movs	r5, #0
 8014692:	462e      	mov	r6, r5
 8014694:	9509      	str	r5, [sp, #36]	; 0x24
 8014696:	9507      	str	r5, [sp, #28]
 8014698:	2322      	movs	r3, #34	; 0x22
 801469a:	f8df b110 	ldr.w	fp, [pc, #272]	; 80147ac <_strtod_l+0x5ac>
 801469e:	6023      	str	r3, [r4, #0]
 80146a0:	f04f 0a00 	mov.w	sl, #0
 80146a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	f43f adec 	beq.w	8014284 <_strtod_l+0x84>
 80146ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80146ae:	4620      	mov	r0, r4
 80146b0:	f001 ffc8 	bl	8016644 <_Bfree>
 80146b4:	9907      	ldr	r1, [sp, #28]
 80146b6:	4620      	mov	r0, r4
 80146b8:	f001 ffc4 	bl	8016644 <_Bfree>
 80146bc:	4631      	mov	r1, r6
 80146be:	4620      	mov	r0, r4
 80146c0:	f001 ffc0 	bl	8016644 <_Bfree>
 80146c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80146c6:	4620      	mov	r0, r4
 80146c8:	f001 ffbc 	bl	8016644 <_Bfree>
 80146cc:	4629      	mov	r1, r5
 80146ce:	4620      	mov	r0, r4
 80146d0:	f001 ffb8 	bl	8016644 <_Bfree>
 80146d4:	e5d6      	b.n	8014284 <_strtod_l+0x84>
 80146d6:	2300      	movs	r3, #0
 80146d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80146dc:	4650      	mov	r0, sl
 80146de:	4659      	mov	r1, fp
 80146e0:	4699      	mov	r9, r3
 80146e2:	f1b8 0f01 	cmp.w	r8, #1
 80146e6:	dc21      	bgt.n	801472c <_strtod_l+0x52c>
 80146e8:	b10b      	cbz	r3, 80146ee <_strtod_l+0x4ee>
 80146ea:	4682      	mov	sl, r0
 80146ec:	468b      	mov	fp, r1
 80146ee:	4b2e      	ldr	r3, [pc, #184]	; (80147a8 <_strtod_l+0x5a8>)
 80146f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80146f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80146f8:	4652      	mov	r2, sl
 80146fa:	465b      	mov	r3, fp
 80146fc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8014700:	f7eb ff8a 	bl	8000618 <__aeabi_dmul>
 8014704:	4b29      	ldr	r3, [pc, #164]	; (80147ac <_strtod_l+0x5ac>)
 8014706:	460a      	mov	r2, r1
 8014708:	400b      	ands	r3, r1
 801470a:	4929      	ldr	r1, [pc, #164]	; (80147b0 <_strtod_l+0x5b0>)
 801470c:	428b      	cmp	r3, r1
 801470e:	4682      	mov	sl, r0
 8014710:	d8be      	bhi.n	8014690 <_strtod_l+0x490>
 8014712:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014716:	428b      	cmp	r3, r1
 8014718:	bf86      	itte	hi
 801471a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80147b4 <_strtod_l+0x5b4>
 801471e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8014722:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8014726:	2300      	movs	r3, #0
 8014728:	9304      	str	r3, [sp, #16]
 801472a:	e081      	b.n	8014830 <_strtod_l+0x630>
 801472c:	f018 0f01 	tst.w	r8, #1
 8014730:	d007      	beq.n	8014742 <_strtod_l+0x542>
 8014732:	4b1d      	ldr	r3, [pc, #116]	; (80147a8 <_strtod_l+0x5a8>)
 8014734:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8014738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801473c:	f7eb ff6c 	bl	8000618 <__aeabi_dmul>
 8014740:	2301      	movs	r3, #1
 8014742:	f109 0901 	add.w	r9, r9, #1
 8014746:	ea4f 0868 	mov.w	r8, r8, asr #1
 801474a:	e7ca      	b.n	80146e2 <_strtod_l+0x4e2>
 801474c:	d0eb      	beq.n	8014726 <_strtod_l+0x526>
 801474e:	f1c8 0800 	rsb	r8, r8, #0
 8014752:	f018 020f 	ands.w	r2, r8, #15
 8014756:	d00a      	beq.n	801476e <_strtod_l+0x56e>
 8014758:	4b12      	ldr	r3, [pc, #72]	; (80147a4 <_strtod_l+0x5a4>)
 801475a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801475e:	4650      	mov	r0, sl
 8014760:	4659      	mov	r1, fp
 8014762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014766:	f7ec f881 	bl	800086c <__aeabi_ddiv>
 801476a:	4682      	mov	sl, r0
 801476c:	468b      	mov	fp, r1
 801476e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014772:	d0d8      	beq.n	8014726 <_strtod_l+0x526>
 8014774:	f1b8 0f1f 	cmp.w	r8, #31
 8014778:	dd1e      	ble.n	80147b8 <_strtod_l+0x5b8>
 801477a:	2500      	movs	r5, #0
 801477c:	462e      	mov	r6, r5
 801477e:	9509      	str	r5, [sp, #36]	; 0x24
 8014780:	9507      	str	r5, [sp, #28]
 8014782:	2322      	movs	r3, #34	; 0x22
 8014784:	f04f 0a00 	mov.w	sl, #0
 8014788:	f04f 0b00 	mov.w	fp, #0
 801478c:	6023      	str	r3, [r4, #0]
 801478e:	e789      	b.n	80146a4 <_strtod_l+0x4a4>
 8014790:	080187b9 	.word	0x080187b9
 8014794:	080187f8 	.word	0x080187f8
 8014798:	080187b1 	.word	0x080187b1
 801479c:	0801883b 	.word	0x0801883b
 80147a0:	08018b13 	.word	0x08018b13
 80147a4:	080189d8 	.word	0x080189d8
 80147a8:	080189b0 	.word	0x080189b0
 80147ac:	7ff00000 	.word	0x7ff00000
 80147b0:	7ca00000 	.word	0x7ca00000
 80147b4:	7fefffff 	.word	0x7fefffff
 80147b8:	f018 0310 	ands.w	r3, r8, #16
 80147bc:	bf18      	it	ne
 80147be:	236a      	movne	r3, #106	; 0x6a
 80147c0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8014b78 <_strtod_l+0x978>
 80147c4:	9304      	str	r3, [sp, #16]
 80147c6:	4650      	mov	r0, sl
 80147c8:	4659      	mov	r1, fp
 80147ca:	2300      	movs	r3, #0
 80147cc:	f018 0f01 	tst.w	r8, #1
 80147d0:	d004      	beq.n	80147dc <_strtod_l+0x5dc>
 80147d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80147d6:	f7eb ff1f 	bl	8000618 <__aeabi_dmul>
 80147da:	2301      	movs	r3, #1
 80147dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80147e0:	f109 0908 	add.w	r9, r9, #8
 80147e4:	d1f2      	bne.n	80147cc <_strtod_l+0x5cc>
 80147e6:	b10b      	cbz	r3, 80147ec <_strtod_l+0x5ec>
 80147e8:	4682      	mov	sl, r0
 80147ea:	468b      	mov	fp, r1
 80147ec:	9b04      	ldr	r3, [sp, #16]
 80147ee:	b1bb      	cbz	r3, 8014820 <_strtod_l+0x620>
 80147f0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80147f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	4659      	mov	r1, fp
 80147fc:	dd10      	ble.n	8014820 <_strtod_l+0x620>
 80147fe:	2b1f      	cmp	r3, #31
 8014800:	f340 8128 	ble.w	8014a54 <_strtod_l+0x854>
 8014804:	2b34      	cmp	r3, #52	; 0x34
 8014806:	bfde      	ittt	le
 8014808:	3b20      	suble	r3, #32
 801480a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801480e:	fa02 f303 	lslle.w	r3, r2, r3
 8014812:	f04f 0a00 	mov.w	sl, #0
 8014816:	bfcc      	ite	gt
 8014818:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801481c:	ea03 0b01 	andle.w	fp, r3, r1
 8014820:	2200      	movs	r2, #0
 8014822:	2300      	movs	r3, #0
 8014824:	4650      	mov	r0, sl
 8014826:	4659      	mov	r1, fp
 8014828:	f7ec f95e 	bl	8000ae8 <__aeabi_dcmpeq>
 801482c:	2800      	cmp	r0, #0
 801482e:	d1a4      	bne.n	801477a <_strtod_l+0x57a>
 8014830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014832:	9300      	str	r3, [sp, #0]
 8014834:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014836:	462b      	mov	r3, r5
 8014838:	463a      	mov	r2, r7
 801483a:	4620      	mov	r0, r4
 801483c:	f001 ff6e 	bl	801671c <__s2b>
 8014840:	9009      	str	r0, [sp, #36]	; 0x24
 8014842:	2800      	cmp	r0, #0
 8014844:	f43f af24 	beq.w	8014690 <_strtod_l+0x490>
 8014848:	9b07      	ldr	r3, [sp, #28]
 801484a:	1b9e      	subs	r6, r3, r6
 801484c:	9b08      	ldr	r3, [sp, #32]
 801484e:	2b00      	cmp	r3, #0
 8014850:	bfb4      	ite	lt
 8014852:	4633      	movlt	r3, r6
 8014854:	2300      	movge	r3, #0
 8014856:	9310      	str	r3, [sp, #64]	; 0x40
 8014858:	9b08      	ldr	r3, [sp, #32]
 801485a:	2500      	movs	r5, #0
 801485c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014860:	9318      	str	r3, [sp, #96]	; 0x60
 8014862:	462e      	mov	r6, r5
 8014864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014866:	4620      	mov	r0, r4
 8014868:	6859      	ldr	r1, [r3, #4]
 801486a:	f001 feab 	bl	80165c4 <_Balloc>
 801486e:	9007      	str	r0, [sp, #28]
 8014870:	2800      	cmp	r0, #0
 8014872:	f43f af11 	beq.w	8014698 <_strtod_l+0x498>
 8014876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014878:	691a      	ldr	r2, [r3, #16]
 801487a:	3202      	adds	r2, #2
 801487c:	f103 010c 	add.w	r1, r3, #12
 8014880:	0092      	lsls	r2, r2, #2
 8014882:	300c      	adds	r0, #12
 8014884:	f7fe fc87 	bl	8013196 <memcpy>
 8014888:	ec4b ab10 	vmov	d0, sl, fp
 801488c:	aa20      	add	r2, sp, #128	; 0x80
 801488e:	a91f      	add	r1, sp, #124	; 0x7c
 8014890:	4620      	mov	r0, r4
 8014892:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8014896:	f002 fa7d 	bl	8016d94 <__d2b>
 801489a:	901e      	str	r0, [sp, #120]	; 0x78
 801489c:	2800      	cmp	r0, #0
 801489e:	f43f aefb 	beq.w	8014698 <_strtod_l+0x498>
 80148a2:	2101      	movs	r1, #1
 80148a4:	4620      	mov	r0, r4
 80148a6:	f001 ffd3 	bl	8016850 <__i2b>
 80148aa:	4606      	mov	r6, r0
 80148ac:	2800      	cmp	r0, #0
 80148ae:	f43f aef3 	beq.w	8014698 <_strtod_l+0x498>
 80148b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80148b4:	9904      	ldr	r1, [sp, #16]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	bfab      	itete	ge
 80148ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80148bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80148be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80148c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80148c4:	bfac      	ite	ge
 80148c6:	eb03 0902 	addge.w	r9, r3, r2
 80148ca:	1ad7      	sublt	r7, r2, r3
 80148cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80148ce:	eba3 0801 	sub.w	r8, r3, r1
 80148d2:	4490      	add	r8, r2
 80148d4:	4ba3      	ldr	r3, [pc, #652]	; (8014b64 <_strtod_l+0x964>)
 80148d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80148da:	4598      	cmp	r8, r3
 80148dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80148e0:	f280 80cc 	bge.w	8014a7c <_strtod_l+0x87c>
 80148e4:	eba3 0308 	sub.w	r3, r3, r8
 80148e8:	2b1f      	cmp	r3, #31
 80148ea:	eba2 0203 	sub.w	r2, r2, r3
 80148ee:	f04f 0101 	mov.w	r1, #1
 80148f2:	f300 80b6 	bgt.w	8014a62 <_strtod_l+0x862>
 80148f6:	fa01 f303 	lsl.w	r3, r1, r3
 80148fa:	9311      	str	r3, [sp, #68]	; 0x44
 80148fc:	2300      	movs	r3, #0
 80148fe:	930c      	str	r3, [sp, #48]	; 0x30
 8014900:	eb09 0802 	add.w	r8, r9, r2
 8014904:	9b04      	ldr	r3, [sp, #16]
 8014906:	45c1      	cmp	r9, r8
 8014908:	4417      	add	r7, r2
 801490a:	441f      	add	r7, r3
 801490c:	464b      	mov	r3, r9
 801490e:	bfa8      	it	ge
 8014910:	4643      	movge	r3, r8
 8014912:	42bb      	cmp	r3, r7
 8014914:	bfa8      	it	ge
 8014916:	463b      	movge	r3, r7
 8014918:	2b00      	cmp	r3, #0
 801491a:	bfc2      	ittt	gt
 801491c:	eba8 0803 	subgt.w	r8, r8, r3
 8014920:	1aff      	subgt	r7, r7, r3
 8014922:	eba9 0903 	subgt.w	r9, r9, r3
 8014926:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014928:	2b00      	cmp	r3, #0
 801492a:	dd17      	ble.n	801495c <_strtod_l+0x75c>
 801492c:	4631      	mov	r1, r6
 801492e:	461a      	mov	r2, r3
 8014930:	4620      	mov	r0, r4
 8014932:	f002 f849 	bl	80169c8 <__pow5mult>
 8014936:	4606      	mov	r6, r0
 8014938:	2800      	cmp	r0, #0
 801493a:	f43f aead 	beq.w	8014698 <_strtod_l+0x498>
 801493e:	4601      	mov	r1, r0
 8014940:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014942:	4620      	mov	r0, r4
 8014944:	f001 ff9a 	bl	801687c <__multiply>
 8014948:	900f      	str	r0, [sp, #60]	; 0x3c
 801494a:	2800      	cmp	r0, #0
 801494c:	f43f aea4 	beq.w	8014698 <_strtod_l+0x498>
 8014950:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014952:	4620      	mov	r0, r4
 8014954:	f001 fe76 	bl	8016644 <_Bfree>
 8014958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801495a:	931e      	str	r3, [sp, #120]	; 0x78
 801495c:	f1b8 0f00 	cmp.w	r8, #0
 8014960:	f300 8091 	bgt.w	8014a86 <_strtod_l+0x886>
 8014964:	9b08      	ldr	r3, [sp, #32]
 8014966:	2b00      	cmp	r3, #0
 8014968:	dd08      	ble.n	801497c <_strtod_l+0x77c>
 801496a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801496c:	9907      	ldr	r1, [sp, #28]
 801496e:	4620      	mov	r0, r4
 8014970:	f002 f82a 	bl	80169c8 <__pow5mult>
 8014974:	9007      	str	r0, [sp, #28]
 8014976:	2800      	cmp	r0, #0
 8014978:	f43f ae8e 	beq.w	8014698 <_strtod_l+0x498>
 801497c:	2f00      	cmp	r7, #0
 801497e:	dd08      	ble.n	8014992 <_strtod_l+0x792>
 8014980:	9907      	ldr	r1, [sp, #28]
 8014982:	463a      	mov	r2, r7
 8014984:	4620      	mov	r0, r4
 8014986:	f002 f879 	bl	8016a7c <__lshift>
 801498a:	9007      	str	r0, [sp, #28]
 801498c:	2800      	cmp	r0, #0
 801498e:	f43f ae83 	beq.w	8014698 <_strtod_l+0x498>
 8014992:	f1b9 0f00 	cmp.w	r9, #0
 8014996:	dd08      	ble.n	80149aa <_strtod_l+0x7aa>
 8014998:	4631      	mov	r1, r6
 801499a:	464a      	mov	r2, r9
 801499c:	4620      	mov	r0, r4
 801499e:	f002 f86d 	bl	8016a7c <__lshift>
 80149a2:	4606      	mov	r6, r0
 80149a4:	2800      	cmp	r0, #0
 80149a6:	f43f ae77 	beq.w	8014698 <_strtod_l+0x498>
 80149aa:	9a07      	ldr	r2, [sp, #28]
 80149ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80149ae:	4620      	mov	r0, r4
 80149b0:	f002 f8ec 	bl	8016b8c <__mdiff>
 80149b4:	4605      	mov	r5, r0
 80149b6:	2800      	cmp	r0, #0
 80149b8:	f43f ae6e 	beq.w	8014698 <_strtod_l+0x498>
 80149bc:	68c3      	ldr	r3, [r0, #12]
 80149be:	930f      	str	r3, [sp, #60]	; 0x3c
 80149c0:	2300      	movs	r3, #0
 80149c2:	60c3      	str	r3, [r0, #12]
 80149c4:	4631      	mov	r1, r6
 80149c6:	f002 f8c5 	bl	8016b54 <__mcmp>
 80149ca:	2800      	cmp	r0, #0
 80149cc:	da65      	bge.n	8014a9a <_strtod_l+0x89a>
 80149ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149d0:	ea53 030a 	orrs.w	r3, r3, sl
 80149d4:	f040 8087 	bne.w	8014ae6 <_strtod_l+0x8e6>
 80149d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80149dc:	2b00      	cmp	r3, #0
 80149de:	f040 8082 	bne.w	8014ae6 <_strtod_l+0x8e6>
 80149e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80149e6:	0d1b      	lsrs	r3, r3, #20
 80149e8:	051b      	lsls	r3, r3, #20
 80149ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80149ee:	d97a      	bls.n	8014ae6 <_strtod_l+0x8e6>
 80149f0:	696b      	ldr	r3, [r5, #20]
 80149f2:	b913      	cbnz	r3, 80149fa <_strtod_l+0x7fa>
 80149f4:	692b      	ldr	r3, [r5, #16]
 80149f6:	2b01      	cmp	r3, #1
 80149f8:	dd75      	ble.n	8014ae6 <_strtod_l+0x8e6>
 80149fa:	4629      	mov	r1, r5
 80149fc:	2201      	movs	r2, #1
 80149fe:	4620      	mov	r0, r4
 8014a00:	f002 f83c 	bl	8016a7c <__lshift>
 8014a04:	4631      	mov	r1, r6
 8014a06:	4605      	mov	r5, r0
 8014a08:	f002 f8a4 	bl	8016b54 <__mcmp>
 8014a0c:	2800      	cmp	r0, #0
 8014a0e:	dd6a      	ble.n	8014ae6 <_strtod_l+0x8e6>
 8014a10:	9904      	ldr	r1, [sp, #16]
 8014a12:	4a55      	ldr	r2, [pc, #340]	; (8014b68 <_strtod_l+0x968>)
 8014a14:	465b      	mov	r3, fp
 8014a16:	2900      	cmp	r1, #0
 8014a18:	f000 8085 	beq.w	8014b26 <_strtod_l+0x926>
 8014a1c:	ea02 010b 	and.w	r1, r2, fp
 8014a20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014a24:	dc7f      	bgt.n	8014b26 <_strtod_l+0x926>
 8014a26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014a2a:	f77f aeaa 	ble.w	8014782 <_strtod_l+0x582>
 8014a2e:	4a4f      	ldr	r2, [pc, #316]	; (8014b6c <_strtod_l+0x96c>)
 8014a30:	2300      	movs	r3, #0
 8014a32:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8014a36:	4650      	mov	r0, sl
 8014a38:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8014a3c:	4659      	mov	r1, fp
 8014a3e:	f7eb fdeb 	bl	8000618 <__aeabi_dmul>
 8014a42:	460b      	mov	r3, r1
 8014a44:	4303      	orrs	r3, r0
 8014a46:	bf08      	it	eq
 8014a48:	2322      	moveq	r3, #34	; 0x22
 8014a4a:	4682      	mov	sl, r0
 8014a4c:	468b      	mov	fp, r1
 8014a4e:	bf08      	it	eq
 8014a50:	6023      	streq	r3, [r4, #0]
 8014a52:	e62b      	b.n	80146ac <_strtod_l+0x4ac>
 8014a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a58:	fa02 f303 	lsl.w	r3, r2, r3
 8014a5c:	ea03 0a0a 	and.w	sl, r3, sl
 8014a60:	e6de      	b.n	8014820 <_strtod_l+0x620>
 8014a62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8014a66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8014a6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8014a6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8014a72:	fa01 f308 	lsl.w	r3, r1, r8
 8014a76:	930c      	str	r3, [sp, #48]	; 0x30
 8014a78:	9111      	str	r1, [sp, #68]	; 0x44
 8014a7a:	e741      	b.n	8014900 <_strtod_l+0x700>
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	930c      	str	r3, [sp, #48]	; 0x30
 8014a80:	2301      	movs	r3, #1
 8014a82:	9311      	str	r3, [sp, #68]	; 0x44
 8014a84:	e73c      	b.n	8014900 <_strtod_l+0x700>
 8014a86:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014a88:	4642      	mov	r2, r8
 8014a8a:	4620      	mov	r0, r4
 8014a8c:	f001 fff6 	bl	8016a7c <__lshift>
 8014a90:	901e      	str	r0, [sp, #120]	; 0x78
 8014a92:	2800      	cmp	r0, #0
 8014a94:	f47f af66 	bne.w	8014964 <_strtod_l+0x764>
 8014a98:	e5fe      	b.n	8014698 <_strtod_l+0x498>
 8014a9a:	465f      	mov	r7, fp
 8014a9c:	d16e      	bne.n	8014b7c <_strtod_l+0x97c>
 8014a9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014aa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014aa4:	b342      	cbz	r2, 8014af8 <_strtod_l+0x8f8>
 8014aa6:	4a32      	ldr	r2, [pc, #200]	; (8014b70 <_strtod_l+0x970>)
 8014aa8:	4293      	cmp	r3, r2
 8014aaa:	d128      	bne.n	8014afe <_strtod_l+0x8fe>
 8014aac:	9b04      	ldr	r3, [sp, #16]
 8014aae:	4650      	mov	r0, sl
 8014ab0:	b1eb      	cbz	r3, 8014aee <_strtod_l+0x8ee>
 8014ab2:	4a2d      	ldr	r2, [pc, #180]	; (8014b68 <_strtod_l+0x968>)
 8014ab4:	403a      	ands	r2, r7
 8014ab6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014aba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014abe:	d819      	bhi.n	8014af4 <_strtod_l+0x8f4>
 8014ac0:	0d12      	lsrs	r2, r2, #20
 8014ac2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8014aca:	4298      	cmp	r0, r3
 8014acc:	d117      	bne.n	8014afe <_strtod_l+0x8fe>
 8014ace:	4b29      	ldr	r3, [pc, #164]	; (8014b74 <_strtod_l+0x974>)
 8014ad0:	429f      	cmp	r7, r3
 8014ad2:	d102      	bne.n	8014ada <_strtod_l+0x8da>
 8014ad4:	3001      	adds	r0, #1
 8014ad6:	f43f addf 	beq.w	8014698 <_strtod_l+0x498>
 8014ada:	4b23      	ldr	r3, [pc, #140]	; (8014b68 <_strtod_l+0x968>)
 8014adc:	403b      	ands	r3, r7
 8014ade:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014ae2:	f04f 0a00 	mov.w	sl, #0
 8014ae6:	9b04      	ldr	r3, [sp, #16]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d1a0      	bne.n	8014a2e <_strtod_l+0x82e>
 8014aec:	e5de      	b.n	80146ac <_strtod_l+0x4ac>
 8014aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014af2:	e7ea      	b.n	8014aca <_strtod_l+0x8ca>
 8014af4:	460b      	mov	r3, r1
 8014af6:	e7e8      	b.n	8014aca <_strtod_l+0x8ca>
 8014af8:	ea53 030a 	orrs.w	r3, r3, sl
 8014afc:	d088      	beq.n	8014a10 <_strtod_l+0x810>
 8014afe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b00:	b1db      	cbz	r3, 8014b3a <_strtod_l+0x93a>
 8014b02:	423b      	tst	r3, r7
 8014b04:	d0ef      	beq.n	8014ae6 <_strtod_l+0x8e6>
 8014b06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b08:	9a04      	ldr	r2, [sp, #16]
 8014b0a:	4650      	mov	r0, sl
 8014b0c:	4659      	mov	r1, fp
 8014b0e:	b1c3      	cbz	r3, 8014b42 <_strtod_l+0x942>
 8014b10:	f7ff fb57 	bl	80141c2 <sulp>
 8014b14:	4602      	mov	r2, r0
 8014b16:	460b      	mov	r3, r1
 8014b18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014b1c:	f7eb fbc6 	bl	80002ac <__adddf3>
 8014b20:	4682      	mov	sl, r0
 8014b22:	468b      	mov	fp, r1
 8014b24:	e7df      	b.n	8014ae6 <_strtod_l+0x8e6>
 8014b26:	4013      	ands	r3, r2
 8014b28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014b2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014b30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014b34:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014b38:	e7d5      	b.n	8014ae6 <_strtod_l+0x8e6>
 8014b3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014b3c:	ea13 0f0a 	tst.w	r3, sl
 8014b40:	e7e0      	b.n	8014b04 <_strtod_l+0x904>
 8014b42:	f7ff fb3e 	bl	80141c2 <sulp>
 8014b46:	4602      	mov	r2, r0
 8014b48:	460b      	mov	r3, r1
 8014b4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014b4e:	f7eb fbab 	bl	80002a8 <__aeabi_dsub>
 8014b52:	2200      	movs	r2, #0
 8014b54:	2300      	movs	r3, #0
 8014b56:	4682      	mov	sl, r0
 8014b58:	468b      	mov	fp, r1
 8014b5a:	f7eb ffc5 	bl	8000ae8 <__aeabi_dcmpeq>
 8014b5e:	2800      	cmp	r0, #0
 8014b60:	d0c1      	beq.n	8014ae6 <_strtod_l+0x8e6>
 8014b62:	e60e      	b.n	8014782 <_strtod_l+0x582>
 8014b64:	fffffc02 	.word	0xfffffc02
 8014b68:	7ff00000 	.word	0x7ff00000
 8014b6c:	39500000 	.word	0x39500000
 8014b70:	000fffff 	.word	0x000fffff
 8014b74:	7fefffff 	.word	0x7fefffff
 8014b78:	08018810 	.word	0x08018810
 8014b7c:	4631      	mov	r1, r6
 8014b7e:	4628      	mov	r0, r5
 8014b80:	f002 f964 	bl	8016e4c <__ratio>
 8014b84:	ec59 8b10 	vmov	r8, r9, d0
 8014b88:	ee10 0a10 	vmov	r0, s0
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014b92:	4649      	mov	r1, r9
 8014b94:	f7eb ffbc 	bl	8000b10 <__aeabi_dcmple>
 8014b98:	2800      	cmp	r0, #0
 8014b9a:	d07c      	beq.n	8014c96 <_strtod_l+0xa96>
 8014b9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d04c      	beq.n	8014c3c <_strtod_l+0xa3c>
 8014ba2:	4b95      	ldr	r3, [pc, #596]	; (8014df8 <_strtod_l+0xbf8>)
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014baa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014df8 <_strtod_l+0xbf8>
 8014bae:	f04f 0800 	mov.w	r8, #0
 8014bb2:	4b92      	ldr	r3, [pc, #584]	; (8014dfc <_strtod_l+0xbfc>)
 8014bb4:	403b      	ands	r3, r7
 8014bb6:	9311      	str	r3, [sp, #68]	; 0x44
 8014bb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014bba:	4b91      	ldr	r3, [pc, #580]	; (8014e00 <_strtod_l+0xc00>)
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	f040 80b2 	bne.w	8014d26 <_strtod_l+0xb26>
 8014bc2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014bc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014bca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014bce:	ec4b ab10 	vmov	d0, sl, fp
 8014bd2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8014bd6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014bda:	f002 f85f 	bl	8016c9c <__ulp>
 8014bde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014be2:	ec53 2b10 	vmov	r2, r3, d0
 8014be6:	f7eb fd17 	bl	8000618 <__aeabi_dmul>
 8014bea:	4652      	mov	r2, sl
 8014bec:	465b      	mov	r3, fp
 8014bee:	f7eb fb5d 	bl	80002ac <__adddf3>
 8014bf2:	460b      	mov	r3, r1
 8014bf4:	4981      	ldr	r1, [pc, #516]	; (8014dfc <_strtod_l+0xbfc>)
 8014bf6:	4a83      	ldr	r2, [pc, #524]	; (8014e04 <_strtod_l+0xc04>)
 8014bf8:	4019      	ands	r1, r3
 8014bfa:	4291      	cmp	r1, r2
 8014bfc:	4682      	mov	sl, r0
 8014bfe:	d95e      	bls.n	8014cbe <_strtod_l+0xabe>
 8014c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c02:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014c06:	4293      	cmp	r3, r2
 8014c08:	d103      	bne.n	8014c12 <_strtod_l+0xa12>
 8014c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c0c:	3301      	adds	r3, #1
 8014c0e:	f43f ad43 	beq.w	8014698 <_strtod_l+0x498>
 8014c12:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8014e10 <_strtod_l+0xc10>
 8014c16:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014c1a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014c1c:	4620      	mov	r0, r4
 8014c1e:	f001 fd11 	bl	8016644 <_Bfree>
 8014c22:	9907      	ldr	r1, [sp, #28]
 8014c24:	4620      	mov	r0, r4
 8014c26:	f001 fd0d 	bl	8016644 <_Bfree>
 8014c2a:	4631      	mov	r1, r6
 8014c2c:	4620      	mov	r0, r4
 8014c2e:	f001 fd09 	bl	8016644 <_Bfree>
 8014c32:	4629      	mov	r1, r5
 8014c34:	4620      	mov	r0, r4
 8014c36:	f001 fd05 	bl	8016644 <_Bfree>
 8014c3a:	e613      	b.n	8014864 <_strtod_l+0x664>
 8014c3c:	f1ba 0f00 	cmp.w	sl, #0
 8014c40:	d11b      	bne.n	8014c7a <_strtod_l+0xa7a>
 8014c42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014c46:	b9f3      	cbnz	r3, 8014c86 <_strtod_l+0xa86>
 8014c48:	4b6b      	ldr	r3, [pc, #428]	; (8014df8 <_strtod_l+0xbf8>)
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	4640      	mov	r0, r8
 8014c4e:	4649      	mov	r1, r9
 8014c50:	f7eb ff54 	bl	8000afc <__aeabi_dcmplt>
 8014c54:	b9d0      	cbnz	r0, 8014c8c <_strtod_l+0xa8c>
 8014c56:	4640      	mov	r0, r8
 8014c58:	4649      	mov	r1, r9
 8014c5a:	4b6b      	ldr	r3, [pc, #428]	; (8014e08 <_strtod_l+0xc08>)
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	f7eb fcdb 	bl	8000618 <__aeabi_dmul>
 8014c62:	4680      	mov	r8, r0
 8014c64:	4689      	mov	r9, r1
 8014c66:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014c6a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8014c6e:	931b      	str	r3, [sp, #108]	; 0x6c
 8014c70:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8014c74:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014c78:	e79b      	b.n	8014bb2 <_strtod_l+0x9b2>
 8014c7a:	f1ba 0f01 	cmp.w	sl, #1
 8014c7e:	d102      	bne.n	8014c86 <_strtod_l+0xa86>
 8014c80:	2f00      	cmp	r7, #0
 8014c82:	f43f ad7e 	beq.w	8014782 <_strtod_l+0x582>
 8014c86:	4b61      	ldr	r3, [pc, #388]	; (8014e0c <_strtod_l+0xc0c>)
 8014c88:	2200      	movs	r2, #0
 8014c8a:	e78c      	b.n	8014ba6 <_strtod_l+0x9a6>
 8014c8c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014e08 <_strtod_l+0xc08>
 8014c90:	f04f 0800 	mov.w	r8, #0
 8014c94:	e7e7      	b.n	8014c66 <_strtod_l+0xa66>
 8014c96:	4b5c      	ldr	r3, [pc, #368]	; (8014e08 <_strtod_l+0xc08>)
 8014c98:	4640      	mov	r0, r8
 8014c9a:	4649      	mov	r1, r9
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	f7eb fcbb 	bl	8000618 <__aeabi_dmul>
 8014ca2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ca4:	4680      	mov	r8, r0
 8014ca6:	4689      	mov	r9, r1
 8014ca8:	b933      	cbnz	r3, 8014cb8 <_strtod_l+0xab8>
 8014caa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014cae:	9012      	str	r0, [sp, #72]	; 0x48
 8014cb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8014cb2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014cb6:	e7dd      	b.n	8014c74 <_strtod_l+0xa74>
 8014cb8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8014cbc:	e7f9      	b.n	8014cb2 <_strtod_l+0xab2>
 8014cbe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014cc2:	9b04      	ldr	r3, [sp, #16]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d1a8      	bne.n	8014c1a <_strtod_l+0xa1a>
 8014cc8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014ccc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014cce:	0d1b      	lsrs	r3, r3, #20
 8014cd0:	051b      	lsls	r3, r3, #20
 8014cd2:	429a      	cmp	r2, r3
 8014cd4:	d1a1      	bne.n	8014c1a <_strtod_l+0xa1a>
 8014cd6:	4640      	mov	r0, r8
 8014cd8:	4649      	mov	r1, r9
 8014cda:	f7eb fffd 	bl	8000cd8 <__aeabi_d2lz>
 8014cde:	f7eb fc6d 	bl	80005bc <__aeabi_l2d>
 8014ce2:	4602      	mov	r2, r0
 8014ce4:	460b      	mov	r3, r1
 8014ce6:	4640      	mov	r0, r8
 8014ce8:	4649      	mov	r1, r9
 8014cea:	f7eb fadd 	bl	80002a8 <__aeabi_dsub>
 8014cee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014cf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014cf4:	ea43 030a 	orr.w	r3, r3, sl
 8014cf8:	4313      	orrs	r3, r2
 8014cfa:	4680      	mov	r8, r0
 8014cfc:	4689      	mov	r9, r1
 8014cfe:	d053      	beq.n	8014da8 <_strtod_l+0xba8>
 8014d00:	a335      	add	r3, pc, #212	; (adr r3, 8014dd8 <_strtod_l+0xbd8>)
 8014d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d06:	f7eb fef9 	bl	8000afc <__aeabi_dcmplt>
 8014d0a:	2800      	cmp	r0, #0
 8014d0c:	f47f acce 	bne.w	80146ac <_strtod_l+0x4ac>
 8014d10:	a333      	add	r3, pc, #204	; (adr r3, 8014de0 <_strtod_l+0xbe0>)
 8014d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d16:	4640      	mov	r0, r8
 8014d18:	4649      	mov	r1, r9
 8014d1a:	f7eb ff0d 	bl	8000b38 <__aeabi_dcmpgt>
 8014d1e:	2800      	cmp	r0, #0
 8014d20:	f43f af7b 	beq.w	8014c1a <_strtod_l+0xa1a>
 8014d24:	e4c2      	b.n	80146ac <_strtod_l+0x4ac>
 8014d26:	9b04      	ldr	r3, [sp, #16]
 8014d28:	b333      	cbz	r3, 8014d78 <_strtod_l+0xb78>
 8014d2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014d30:	d822      	bhi.n	8014d78 <_strtod_l+0xb78>
 8014d32:	a32d      	add	r3, pc, #180	; (adr r3, 8014de8 <_strtod_l+0xbe8>)
 8014d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d38:	4640      	mov	r0, r8
 8014d3a:	4649      	mov	r1, r9
 8014d3c:	f7eb fee8 	bl	8000b10 <__aeabi_dcmple>
 8014d40:	b1a0      	cbz	r0, 8014d6c <_strtod_l+0xb6c>
 8014d42:	4649      	mov	r1, r9
 8014d44:	4640      	mov	r0, r8
 8014d46:	f7eb ff3f 	bl	8000bc8 <__aeabi_d2uiz>
 8014d4a:	2801      	cmp	r0, #1
 8014d4c:	bf38      	it	cc
 8014d4e:	2001      	movcc	r0, #1
 8014d50:	f7eb fbe8 	bl	8000524 <__aeabi_ui2d>
 8014d54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d56:	4680      	mov	r8, r0
 8014d58:	4689      	mov	r9, r1
 8014d5a:	bb13      	cbnz	r3, 8014da2 <_strtod_l+0xba2>
 8014d5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d60:	9014      	str	r0, [sp, #80]	; 0x50
 8014d62:	9315      	str	r3, [sp, #84]	; 0x54
 8014d64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014d68:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014d70:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014d74:	1a9b      	subs	r3, r3, r2
 8014d76:	930d      	str	r3, [sp, #52]	; 0x34
 8014d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014d7c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014d80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014d84:	f001 ff8a 	bl	8016c9c <__ulp>
 8014d88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014d8c:	ec53 2b10 	vmov	r2, r3, d0
 8014d90:	f7eb fc42 	bl	8000618 <__aeabi_dmul>
 8014d94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014d98:	f7eb fa88 	bl	80002ac <__adddf3>
 8014d9c:	4682      	mov	sl, r0
 8014d9e:	468b      	mov	fp, r1
 8014da0:	e78f      	b.n	8014cc2 <_strtod_l+0xac2>
 8014da2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8014da6:	e7dd      	b.n	8014d64 <_strtod_l+0xb64>
 8014da8:	a311      	add	r3, pc, #68	; (adr r3, 8014df0 <_strtod_l+0xbf0>)
 8014daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dae:	f7eb fea5 	bl	8000afc <__aeabi_dcmplt>
 8014db2:	e7b4      	b.n	8014d1e <_strtod_l+0xb1e>
 8014db4:	2300      	movs	r3, #0
 8014db6:	930e      	str	r3, [sp, #56]	; 0x38
 8014db8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014dba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014dbc:	6013      	str	r3, [r2, #0]
 8014dbe:	f7ff ba65 	b.w	801428c <_strtod_l+0x8c>
 8014dc2:	2b65      	cmp	r3, #101	; 0x65
 8014dc4:	f43f ab5d 	beq.w	8014482 <_strtod_l+0x282>
 8014dc8:	2b45      	cmp	r3, #69	; 0x45
 8014dca:	f43f ab5a 	beq.w	8014482 <_strtod_l+0x282>
 8014dce:	2201      	movs	r2, #1
 8014dd0:	f7ff bb92 	b.w	80144f8 <_strtod_l+0x2f8>
 8014dd4:	f3af 8000 	nop.w
 8014dd8:	94a03595 	.word	0x94a03595
 8014ddc:	3fdfffff 	.word	0x3fdfffff
 8014de0:	35afe535 	.word	0x35afe535
 8014de4:	3fe00000 	.word	0x3fe00000
 8014de8:	ffc00000 	.word	0xffc00000
 8014dec:	41dfffff 	.word	0x41dfffff
 8014df0:	94a03595 	.word	0x94a03595
 8014df4:	3fcfffff 	.word	0x3fcfffff
 8014df8:	3ff00000 	.word	0x3ff00000
 8014dfc:	7ff00000 	.word	0x7ff00000
 8014e00:	7fe00000 	.word	0x7fe00000
 8014e04:	7c9fffff 	.word	0x7c9fffff
 8014e08:	3fe00000 	.word	0x3fe00000
 8014e0c:	bff00000 	.word	0xbff00000
 8014e10:	7fefffff 	.word	0x7fefffff

08014e14 <_strtod_r>:
 8014e14:	4b01      	ldr	r3, [pc, #4]	; (8014e1c <_strtod_r+0x8>)
 8014e16:	f7ff b9f3 	b.w	8014200 <_strtod_l>
 8014e1a:	bf00      	nop
 8014e1c:	20000204 	.word	0x20000204

08014e20 <_strtol_l.isra.0>:
 8014e20:	2b01      	cmp	r3, #1
 8014e22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e26:	d001      	beq.n	8014e2c <_strtol_l.isra.0+0xc>
 8014e28:	2b24      	cmp	r3, #36	; 0x24
 8014e2a:	d906      	bls.n	8014e3a <_strtol_l.isra.0+0x1a>
 8014e2c:	f7fe f890 	bl	8012f50 <__errno>
 8014e30:	2316      	movs	r3, #22
 8014e32:	6003      	str	r3, [r0, #0]
 8014e34:	2000      	movs	r0, #0
 8014e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e3a:	4f3a      	ldr	r7, [pc, #232]	; (8014f24 <_strtol_l.isra.0+0x104>)
 8014e3c:	468e      	mov	lr, r1
 8014e3e:	4676      	mov	r6, lr
 8014e40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014e44:	5de5      	ldrb	r5, [r4, r7]
 8014e46:	f015 0508 	ands.w	r5, r5, #8
 8014e4a:	d1f8      	bne.n	8014e3e <_strtol_l.isra.0+0x1e>
 8014e4c:	2c2d      	cmp	r4, #45	; 0x2d
 8014e4e:	d134      	bne.n	8014eba <_strtol_l.isra.0+0x9a>
 8014e50:	f89e 4000 	ldrb.w	r4, [lr]
 8014e54:	f04f 0801 	mov.w	r8, #1
 8014e58:	f106 0e02 	add.w	lr, r6, #2
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d05c      	beq.n	8014f1a <_strtol_l.isra.0+0xfa>
 8014e60:	2b10      	cmp	r3, #16
 8014e62:	d10c      	bne.n	8014e7e <_strtol_l.isra.0+0x5e>
 8014e64:	2c30      	cmp	r4, #48	; 0x30
 8014e66:	d10a      	bne.n	8014e7e <_strtol_l.isra.0+0x5e>
 8014e68:	f89e 4000 	ldrb.w	r4, [lr]
 8014e6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014e70:	2c58      	cmp	r4, #88	; 0x58
 8014e72:	d14d      	bne.n	8014f10 <_strtol_l.isra.0+0xf0>
 8014e74:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8014e78:	2310      	movs	r3, #16
 8014e7a:	f10e 0e02 	add.w	lr, lr, #2
 8014e7e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8014e82:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8014e86:	2600      	movs	r6, #0
 8014e88:	fbbc f9f3 	udiv	r9, ip, r3
 8014e8c:	4635      	mov	r5, r6
 8014e8e:	fb03 ca19 	mls	sl, r3, r9, ip
 8014e92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8014e96:	2f09      	cmp	r7, #9
 8014e98:	d818      	bhi.n	8014ecc <_strtol_l.isra.0+0xac>
 8014e9a:	463c      	mov	r4, r7
 8014e9c:	42a3      	cmp	r3, r4
 8014e9e:	dd24      	ble.n	8014eea <_strtol_l.isra.0+0xca>
 8014ea0:	2e00      	cmp	r6, #0
 8014ea2:	db1f      	blt.n	8014ee4 <_strtol_l.isra.0+0xc4>
 8014ea4:	45a9      	cmp	r9, r5
 8014ea6:	d31d      	bcc.n	8014ee4 <_strtol_l.isra.0+0xc4>
 8014ea8:	d101      	bne.n	8014eae <_strtol_l.isra.0+0x8e>
 8014eaa:	45a2      	cmp	sl, r4
 8014eac:	db1a      	blt.n	8014ee4 <_strtol_l.isra.0+0xc4>
 8014eae:	fb05 4503 	mla	r5, r5, r3, r4
 8014eb2:	2601      	movs	r6, #1
 8014eb4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014eb8:	e7eb      	b.n	8014e92 <_strtol_l.isra.0+0x72>
 8014eba:	2c2b      	cmp	r4, #43	; 0x2b
 8014ebc:	bf08      	it	eq
 8014ebe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8014ec2:	46a8      	mov	r8, r5
 8014ec4:	bf08      	it	eq
 8014ec6:	f106 0e02 	addeq.w	lr, r6, #2
 8014eca:	e7c7      	b.n	8014e5c <_strtol_l.isra.0+0x3c>
 8014ecc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8014ed0:	2f19      	cmp	r7, #25
 8014ed2:	d801      	bhi.n	8014ed8 <_strtol_l.isra.0+0xb8>
 8014ed4:	3c37      	subs	r4, #55	; 0x37
 8014ed6:	e7e1      	b.n	8014e9c <_strtol_l.isra.0+0x7c>
 8014ed8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014edc:	2f19      	cmp	r7, #25
 8014ede:	d804      	bhi.n	8014eea <_strtol_l.isra.0+0xca>
 8014ee0:	3c57      	subs	r4, #87	; 0x57
 8014ee2:	e7db      	b.n	8014e9c <_strtol_l.isra.0+0x7c>
 8014ee4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8014ee8:	e7e4      	b.n	8014eb4 <_strtol_l.isra.0+0x94>
 8014eea:	2e00      	cmp	r6, #0
 8014eec:	da05      	bge.n	8014efa <_strtol_l.isra.0+0xda>
 8014eee:	2322      	movs	r3, #34	; 0x22
 8014ef0:	6003      	str	r3, [r0, #0]
 8014ef2:	4665      	mov	r5, ip
 8014ef4:	b942      	cbnz	r2, 8014f08 <_strtol_l.isra.0+0xe8>
 8014ef6:	4628      	mov	r0, r5
 8014ef8:	e79d      	b.n	8014e36 <_strtol_l.isra.0+0x16>
 8014efa:	f1b8 0f00 	cmp.w	r8, #0
 8014efe:	d000      	beq.n	8014f02 <_strtol_l.isra.0+0xe2>
 8014f00:	426d      	negs	r5, r5
 8014f02:	2a00      	cmp	r2, #0
 8014f04:	d0f7      	beq.n	8014ef6 <_strtol_l.isra.0+0xd6>
 8014f06:	b10e      	cbz	r6, 8014f0c <_strtol_l.isra.0+0xec>
 8014f08:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8014f0c:	6011      	str	r1, [r2, #0]
 8014f0e:	e7f2      	b.n	8014ef6 <_strtol_l.isra.0+0xd6>
 8014f10:	2430      	movs	r4, #48	; 0x30
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d1b3      	bne.n	8014e7e <_strtol_l.isra.0+0x5e>
 8014f16:	2308      	movs	r3, #8
 8014f18:	e7b1      	b.n	8014e7e <_strtol_l.isra.0+0x5e>
 8014f1a:	2c30      	cmp	r4, #48	; 0x30
 8014f1c:	d0a4      	beq.n	8014e68 <_strtol_l.isra.0+0x48>
 8014f1e:	230a      	movs	r3, #10
 8014f20:	e7ad      	b.n	8014e7e <_strtol_l.isra.0+0x5e>
 8014f22:	bf00      	nop
 8014f24:	08018645 	.word	0x08018645

08014f28 <_strtol_r>:
 8014f28:	f7ff bf7a 	b.w	8014e20 <_strtol_l.isra.0>

08014f2c <strtol>:
 8014f2c:	4613      	mov	r3, r2
 8014f2e:	460a      	mov	r2, r1
 8014f30:	4601      	mov	r1, r0
 8014f32:	4802      	ldr	r0, [pc, #8]	; (8014f3c <strtol+0x10>)
 8014f34:	6800      	ldr	r0, [r0, #0]
 8014f36:	f7ff bf73 	b.w	8014e20 <_strtol_l.isra.0>
 8014f3a:	bf00      	nop
 8014f3c:	2000019c 	.word	0x2000019c

08014f40 <_vsniprintf_r>:
 8014f40:	b530      	push	{r4, r5, lr}
 8014f42:	1e14      	subs	r4, r2, #0
 8014f44:	4605      	mov	r5, r0
 8014f46:	b09b      	sub	sp, #108	; 0x6c
 8014f48:	4618      	mov	r0, r3
 8014f4a:	da05      	bge.n	8014f58 <_vsniprintf_r+0x18>
 8014f4c:	238b      	movs	r3, #139	; 0x8b
 8014f4e:	602b      	str	r3, [r5, #0]
 8014f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f54:	b01b      	add	sp, #108	; 0x6c
 8014f56:	bd30      	pop	{r4, r5, pc}
 8014f58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014f5c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014f60:	bf14      	ite	ne
 8014f62:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8014f66:	4623      	moveq	r3, r4
 8014f68:	9302      	str	r3, [sp, #8]
 8014f6a:	9305      	str	r3, [sp, #20]
 8014f6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f70:	9100      	str	r1, [sp, #0]
 8014f72:	9104      	str	r1, [sp, #16]
 8014f74:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014f78:	4602      	mov	r2, r0
 8014f7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014f7c:	4669      	mov	r1, sp
 8014f7e:	4628      	mov	r0, r5
 8014f80:	f002 f896 	bl	80170b0 <_svfiprintf_r>
 8014f84:	1c43      	adds	r3, r0, #1
 8014f86:	bfbc      	itt	lt
 8014f88:	238b      	movlt	r3, #139	; 0x8b
 8014f8a:	602b      	strlt	r3, [r5, #0]
 8014f8c:	2c00      	cmp	r4, #0
 8014f8e:	d0e1      	beq.n	8014f54 <_vsniprintf_r+0x14>
 8014f90:	9b00      	ldr	r3, [sp, #0]
 8014f92:	2200      	movs	r2, #0
 8014f94:	701a      	strb	r2, [r3, #0]
 8014f96:	e7dd      	b.n	8014f54 <_vsniprintf_r+0x14>

08014f98 <vsniprintf>:
 8014f98:	b507      	push	{r0, r1, r2, lr}
 8014f9a:	9300      	str	r3, [sp, #0]
 8014f9c:	4613      	mov	r3, r2
 8014f9e:	460a      	mov	r2, r1
 8014fa0:	4601      	mov	r1, r0
 8014fa2:	4803      	ldr	r0, [pc, #12]	; (8014fb0 <vsniprintf+0x18>)
 8014fa4:	6800      	ldr	r0, [r0, #0]
 8014fa6:	f7ff ffcb 	bl	8014f40 <_vsniprintf_r>
 8014faa:	b003      	add	sp, #12
 8014fac:	f85d fb04 	ldr.w	pc, [sp], #4
 8014fb0:	2000019c 	.word	0x2000019c

08014fb4 <_write_r>:
 8014fb4:	b538      	push	{r3, r4, r5, lr}
 8014fb6:	4d07      	ldr	r5, [pc, #28]	; (8014fd4 <_write_r+0x20>)
 8014fb8:	4604      	mov	r4, r0
 8014fba:	4608      	mov	r0, r1
 8014fbc:	4611      	mov	r1, r2
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	602a      	str	r2, [r5, #0]
 8014fc2:	461a      	mov	r2, r3
 8014fc4:	f7ee fc1d 	bl	8003802 <_write>
 8014fc8:	1c43      	adds	r3, r0, #1
 8014fca:	d102      	bne.n	8014fd2 <_write_r+0x1e>
 8014fcc:	682b      	ldr	r3, [r5, #0]
 8014fce:	b103      	cbz	r3, 8014fd2 <_write_r+0x1e>
 8014fd0:	6023      	str	r3, [r4, #0]
 8014fd2:	bd38      	pop	{r3, r4, r5, pc}
 8014fd4:	2000cb2c 	.word	0x2000cb2c

08014fd8 <_close_r>:
 8014fd8:	b538      	push	{r3, r4, r5, lr}
 8014fda:	4d06      	ldr	r5, [pc, #24]	; (8014ff4 <_close_r+0x1c>)
 8014fdc:	2300      	movs	r3, #0
 8014fde:	4604      	mov	r4, r0
 8014fe0:	4608      	mov	r0, r1
 8014fe2:	602b      	str	r3, [r5, #0]
 8014fe4:	f7ee fc29 	bl	800383a <_close>
 8014fe8:	1c43      	adds	r3, r0, #1
 8014fea:	d102      	bne.n	8014ff2 <_close_r+0x1a>
 8014fec:	682b      	ldr	r3, [r5, #0]
 8014fee:	b103      	cbz	r3, 8014ff2 <_close_r+0x1a>
 8014ff0:	6023      	str	r3, [r4, #0]
 8014ff2:	bd38      	pop	{r3, r4, r5, pc}
 8014ff4:	2000cb2c 	.word	0x2000cb2c

08014ff8 <quorem>:
 8014ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ffc:	6903      	ldr	r3, [r0, #16]
 8014ffe:	690c      	ldr	r4, [r1, #16]
 8015000:	42a3      	cmp	r3, r4
 8015002:	4607      	mov	r7, r0
 8015004:	f2c0 8081 	blt.w	801510a <quorem+0x112>
 8015008:	3c01      	subs	r4, #1
 801500a:	f101 0814 	add.w	r8, r1, #20
 801500e:	f100 0514 	add.w	r5, r0, #20
 8015012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015016:	9301      	str	r3, [sp, #4]
 8015018:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801501c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015020:	3301      	adds	r3, #1
 8015022:	429a      	cmp	r2, r3
 8015024:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015028:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801502c:	fbb2 f6f3 	udiv	r6, r2, r3
 8015030:	d331      	bcc.n	8015096 <quorem+0x9e>
 8015032:	f04f 0e00 	mov.w	lr, #0
 8015036:	4640      	mov	r0, r8
 8015038:	46ac      	mov	ip, r5
 801503a:	46f2      	mov	sl, lr
 801503c:	f850 2b04 	ldr.w	r2, [r0], #4
 8015040:	b293      	uxth	r3, r2
 8015042:	fb06 e303 	mla	r3, r6, r3, lr
 8015046:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801504a:	b29b      	uxth	r3, r3
 801504c:	ebaa 0303 	sub.w	r3, sl, r3
 8015050:	0c12      	lsrs	r2, r2, #16
 8015052:	f8dc a000 	ldr.w	sl, [ip]
 8015056:	fb06 e202 	mla	r2, r6, r2, lr
 801505a:	fa13 f38a 	uxtah	r3, r3, sl
 801505e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015062:	fa1f fa82 	uxth.w	sl, r2
 8015066:	f8dc 2000 	ldr.w	r2, [ip]
 801506a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801506e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015072:	b29b      	uxth	r3, r3
 8015074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015078:	4581      	cmp	r9, r0
 801507a:	f84c 3b04 	str.w	r3, [ip], #4
 801507e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015082:	d2db      	bcs.n	801503c <quorem+0x44>
 8015084:	f855 300b 	ldr.w	r3, [r5, fp]
 8015088:	b92b      	cbnz	r3, 8015096 <quorem+0x9e>
 801508a:	9b01      	ldr	r3, [sp, #4]
 801508c:	3b04      	subs	r3, #4
 801508e:	429d      	cmp	r5, r3
 8015090:	461a      	mov	r2, r3
 8015092:	d32e      	bcc.n	80150f2 <quorem+0xfa>
 8015094:	613c      	str	r4, [r7, #16]
 8015096:	4638      	mov	r0, r7
 8015098:	f001 fd5c 	bl	8016b54 <__mcmp>
 801509c:	2800      	cmp	r0, #0
 801509e:	db24      	blt.n	80150ea <quorem+0xf2>
 80150a0:	3601      	adds	r6, #1
 80150a2:	4628      	mov	r0, r5
 80150a4:	f04f 0c00 	mov.w	ip, #0
 80150a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80150ac:	f8d0 e000 	ldr.w	lr, [r0]
 80150b0:	b293      	uxth	r3, r2
 80150b2:	ebac 0303 	sub.w	r3, ip, r3
 80150b6:	0c12      	lsrs	r2, r2, #16
 80150b8:	fa13 f38e 	uxtah	r3, r3, lr
 80150bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80150c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80150c4:	b29b      	uxth	r3, r3
 80150c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80150ca:	45c1      	cmp	r9, r8
 80150cc:	f840 3b04 	str.w	r3, [r0], #4
 80150d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80150d4:	d2e8      	bcs.n	80150a8 <quorem+0xb0>
 80150d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80150da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80150de:	b922      	cbnz	r2, 80150ea <quorem+0xf2>
 80150e0:	3b04      	subs	r3, #4
 80150e2:	429d      	cmp	r5, r3
 80150e4:	461a      	mov	r2, r3
 80150e6:	d30a      	bcc.n	80150fe <quorem+0x106>
 80150e8:	613c      	str	r4, [r7, #16]
 80150ea:	4630      	mov	r0, r6
 80150ec:	b003      	add	sp, #12
 80150ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150f2:	6812      	ldr	r2, [r2, #0]
 80150f4:	3b04      	subs	r3, #4
 80150f6:	2a00      	cmp	r2, #0
 80150f8:	d1cc      	bne.n	8015094 <quorem+0x9c>
 80150fa:	3c01      	subs	r4, #1
 80150fc:	e7c7      	b.n	801508e <quorem+0x96>
 80150fe:	6812      	ldr	r2, [r2, #0]
 8015100:	3b04      	subs	r3, #4
 8015102:	2a00      	cmp	r2, #0
 8015104:	d1f0      	bne.n	80150e8 <quorem+0xf0>
 8015106:	3c01      	subs	r4, #1
 8015108:	e7eb      	b.n	80150e2 <quorem+0xea>
 801510a:	2000      	movs	r0, #0
 801510c:	e7ee      	b.n	80150ec <quorem+0xf4>
	...

08015110 <_dtoa_r>:
 8015110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015114:	ed2d 8b02 	vpush	{d8}
 8015118:	ec57 6b10 	vmov	r6, r7, d0
 801511c:	b095      	sub	sp, #84	; 0x54
 801511e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015120:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015124:	9105      	str	r1, [sp, #20]
 8015126:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801512a:	4604      	mov	r4, r0
 801512c:	9209      	str	r2, [sp, #36]	; 0x24
 801512e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015130:	b975      	cbnz	r5, 8015150 <_dtoa_r+0x40>
 8015132:	2010      	movs	r0, #16
 8015134:	f001 fa20 	bl	8016578 <malloc>
 8015138:	4602      	mov	r2, r0
 801513a:	6260      	str	r0, [r4, #36]	; 0x24
 801513c:	b920      	cbnz	r0, 8015148 <_dtoa_r+0x38>
 801513e:	4bb2      	ldr	r3, [pc, #712]	; (8015408 <_dtoa_r+0x2f8>)
 8015140:	21ea      	movs	r1, #234	; 0xea
 8015142:	48b2      	ldr	r0, [pc, #712]	; (801540c <_dtoa_r+0x2fc>)
 8015144:	f002 fcec 	bl	8017b20 <__assert_func>
 8015148:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801514c:	6005      	str	r5, [r0, #0]
 801514e:	60c5      	str	r5, [r0, #12]
 8015150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015152:	6819      	ldr	r1, [r3, #0]
 8015154:	b151      	cbz	r1, 801516c <_dtoa_r+0x5c>
 8015156:	685a      	ldr	r2, [r3, #4]
 8015158:	604a      	str	r2, [r1, #4]
 801515a:	2301      	movs	r3, #1
 801515c:	4093      	lsls	r3, r2
 801515e:	608b      	str	r3, [r1, #8]
 8015160:	4620      	mov	r0, r4
 8015162:	f001 fa6f 	bl	8016644 <_Bfree>
 8015166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015168:	2200      	movs	r2, #0
 801516a:	601a      	str	r2, [r3, #0]
 801516c:	1e3b      	subs	r3, r7, #0
 801516e:	bfb9      	ittee	lt
 8015170:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015174:	9303      	strlt	r3, [sp, #12]
 8015176:	2300      	movge	r3, #0
 8015178:	f8c8 3000 	strge.w	r3, [r8]
 801517c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8015180:	4ba3      	ldr	r3, [pc, #652]	; (8015410 <_dtoa_r+0x300>)
 8015182:	bfbc      	itt	lt
 8015184:	2201      	movlt	r2, #1
 8015186:	f8c8 2000 	strlt.w	r2, [r8]
 801518a:	ea33 0309 	bics.w	r3, r3, r9
 801518e:	d11b      	bne.n	80151c8 <_dtoa_r+0xb8>
 8015190:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015192:	f242 730f 	movw	r3, #9999	; 0x270f
 8015196:	6013      	str	r3, [r2, #0]
 8015198:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801519c:	4333      	orrs	r3, r6
 801519e:	f000 857a 	beq.w	8015c96 <_dtoa_r+0xb86>
 80151a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151a4:	b963      	cbnz	r3, 80151c0 <_dtoa_r+0xb0>
 80151a6:	4b9b      	ldr	r3, [pc, #620]	; (8015414 <_dtoa_r+0x304>)
 80151a8:	e024      	b.n	80151f4 <_dtoa_r+0xe4>
 80151aa:	4b9b      	ldr	r3, [pc, #620]	; (8015418 <_dtoa_r+0x308>)
 80151ac:	9300      	str	r3, [sp, #0]
 80151ae:	3308      	adds	r3, #8
 80151b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80151b2:	6013      	str	r3, [r2, #0]
 80151b4:	9800      	ldr	r0, [sp, #0]
 80151b6:	b015      	add	sp, #84	; 0x54
 80151b8:	ecbd 8b02 	vpop	{d8}
 80151bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151c0:	4b94      	ldr	r3, [pc, #592]	; (8015414 <_dtoa_r+0x304>)
 80151c2:	9300      	str	r3, [sp, #0]
 80151c4:	3303      	adds	r3, #3
 80151c6:	e7f3      	b.n	80151b0 <_dtoa_r+0xa0>
 80151c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80151cc:	2200      	movs	r2, #0
 80151ce:	ec51 0b17 	vmov	r0, r1, d7
 80151d2:	2300      	movs	r3, #0
 80151d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80151d8:	f7eb fc86 	bl	8000ae8 <__aeabi_dcmpeq>
 80151dc:	4680      	mov	r8, r0
 80151de:	b158      	cbz	r0, 80151f8 <_dtoa_r+0xe8>
 80151e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80151e2:	2301      	movs	r3, #1
 80151e4:	6013      	str	r3, [r2, #0]
 80151e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	f000 8551 	beq.w	8015c90 <_dtoa_r+0xb80>
 80151ee:	488b      	ldr	r0, [pc, #556]	; (801541c <_dtoa_r+0x30c>)
 80151f0:	6018      	str	r0, [r3, #0]
 80151f2:	1e43      	subs	r3, r0, #1
 80151f4:	9300      	str	r3, [sp, #0]
 80151f6:	e7dd      	b.n	80151b4 <_dtoa_r+0xa4>
 80151f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80151fc:	aa12      	add	r2, sp, #72	; 0x48
 80151fe:	a913      	add	r1, sp, #76	; 0x4c
 8015200:	4620      	mov	r0, r4
 8015202:	f001 fdc7 	bl	8016d94 <__d2b>
 8015206:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801520a:	4683      	mov	fp, r0
 801520c:	2d00      	cmp	r5, #0
 801520e:	d07c      	beq.n	801530a <_dtoa_r+0x1fa>
 8015210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015212:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8015216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801521a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801521e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015222:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801522a:	4b7d      	ldr	r3, [pc, #500]	; (8015420 <_dtoa_r+0x310>)
 801522c:	2200      	movs	r2, #0
 801522e:	4630      	mov	r0, r6
 8015230:	4639      	mov	r1, r7
 8015232:	f7eb f839 	bl	80002a8 <__aeabi_dsub>
 8015236:	a36e      	add	r3, pc, #440	; (adr r3, 80153f0 <_dtoa_r+0x2e0>)
 8015238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801523c:	f7eb f9ec 	bl	8000618 <__aeabi_dmul>
 8015240:	a36d      	add	r3, pc, #436	; (adr r3, 80153f8 <_dtoa_r+0x2e8>)
 8015242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015246:	f7eb f831 	bl	80002ac <__adddf3>
 801524a:	4606      	mov	r6, r0
 801524c:	4628      	mov	r0, r5
 801524e:	460f      	mov	r7, r1
 8015250:	f7eb f978 	bl	8000544 <__aeabi_i2d>
 8015254:	a36a      	add	r3, pc, #424	; (adr r3, 8015400 <_dtoa_r+0x2f0>)
 8015256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801525a:	f7eb f9dd 	bl	8000618 <__aeabi_dmul>
 801525e:	4602      	mov	r2, r0
 8015260:	460b      	mov	r3, r1
 8015262:	4630      	mov	r0, r6
 8015264:	4639      	mov	r1, r7
 8015266:	f7eb f821 	bl	80002ac <__adddf3>
 801526a:	4606      	mov	r6, r0
 801526c:	460f      	mov	r7, r1
 801526e:	f7eb fc83 	bl	8000b78 <__aeabi_d2iz>
 8015272:	2200      	movs	r2, #0
 8015274:	4682      	mov	sl, r0
 8015276:	2300      	movs	r3, #0
 8015278:	4630      	mov	r0, r6
 801527a:	4639      	mov	r1, r7
 801527c:	f7eb fc3e 	bl	8000afc <__aeabi_dcmplt>
 8015280:	b148      	cbz	r0, 8015296 <_dtoa_r+0x186>
 8015282:	4650      	mov	r0, sl
 8015284:	f7eb f95e 	bl	8000544 <__aeabi_i2d>
 8015288:	4632      	mov	r2, r6
 801528a:	463b      	mov	r3, r7
 801528c:	f7eb fc2c 	bl	8000ae8 <__aeabi_dcmpeq>
 8015290:	b908      	cbnz	r0, 8015296 <_dtoa_r+0x186>
 8015292:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015296:	f1ba 0f16 	cmp.w	sl, #22
 801529a:	d854      	bhi.n	8015346 <_dtoa_r+0x236>
 801529c:	4b61      	ldr	r3, [pc, #388]	; (8015424 <_dtoa_r+0x314>)
 801529e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80152a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80152aa:	f7eb fc27 	bl	8000afc <__aeabi_dcmplt>
 80152ae:	2800      	cmp	r0, #0
 80152b0:	d04b      	beq.n	801534a <_dtoa_r+0x23a>
 80152b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80152b6:	2300      	movs	r3, #0
 80152b8:	930e      	str	r3, [sp, #56]	; 0x38
 80152ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80152bc:	1b5d      	subs	r5, r3, r5
 80152be:	1e6b      	subs	r3, r5, #1
 80152c0:	9304      	str	r3, [sp, #16]
 80152c2:	bf43      	ittte	mi
 80152c4:	2300      	movmi	r3, #0
 80152c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80152ca:	9304      	strmi	r3, [sp, #16]
 80152cc:	f04f 0800 	movpl.w	r8, #0
 80152d0:	f1ba 0f00 	cmp.w	sl, #0
 80152d4:	db3b      	blt.n	801534e <_dtoa_r+0x23e>
 80152d6:	9b04      	ldr	r3, [sp, #16]
 80152d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80152dc:	4453      	add	r3, sl
 80152de:	9304      	str	r3, [sp, #16]
 80152e0:	2300      	movs	r3, #0
 80152e2:	9306      	str	r3, [sp, #24]
 80152e4:	9b05      	ldr	r3, [sp, #20]
 80152e6:	2b09      	cmp	r3, #9
 80152e8:	d869      	bhi.n	80153be <_dtoa_r+0x2ae>
 80152ea:	2b05      	cmp	r3, #5
 80152ec:	bfc4      	itt	gt
 80152ee:	3b04      	subgt	r3, #4
 80152f0:	9305      	strgt	r3, [sp, #20]
 80152f2:	9b05      	ldr	r3, [sp, #20]
 80152f4:	f1a3 0302 	sub.w	r3, r3, #2
 80152f8:	bfcc      	ite	gt
 80152fa:	2500      	movgt	r5, #0
 80152fc:	2501      	movle	r5, #1
 80152fe:	2b03      	cmp	r3, #3
 8015300:	d869      	bhi.n	80153d6 <_dtoa_r+0x2c6>
 8015302:	e8df f003 	tbb	[pc, r3]
 8015306:	4e2c      	.short	0x4e2c
 8015308:	5a4c      	.short	0x5a4c
 801530a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801530e:	441d      	add	r5, r3
 8015310:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015314:	2b20      	cmp	r3, #32
 8015316:	bfc1      	itttt	gt
 8015318:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801531c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015320:	fa09 f303 	lslgt.w	r3, r9, r3
 8015324:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015328:	bfda      	itte	le
 801532a:	f1c3 0320 	rsble	r3, r3, #32
 801532e:	fa06 f003 	lslle.w	r0, r6, r3
 8015332:	4318      	orrgt	r0, r3
 8015334:	f7eb f8f6 	bl	8000524 <__aeabi_ui2d>
 8015338:	2301      	movs	r3, #1
 801533a:	4606      	mov	r6, r0
 801533c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015340:	3d01      	subs	r5, #1
 8015342:	9310      	str	r3, [sp, #64]	; 0x40
 8015344:	e771      	b.n	801522a <_dtoa_r+0x11a>
 8015346:	2301      	movs	r3, #1
 8015348:	e7b6      	b.n	80152b8 <_dtoa_r+0x1a8>
 801534a:	900e      	str	r0, [sp, #56]	; 0x38
 801534c:	e7b5      	b.n	80152ba <_dtoa_r+0x1aa>
 801534e:	f1ca 0300 	rsb	r3, sl, #0
 8015352:	9306      	str	r3, [sp, #24]
 8015354:	2300      	movs	r3, #0
 8015356:	eba8 080a 	sub.w	r8, r8, sl
 801535a:	930d      	str	r3, [sp, #52]	; 0x34
 801535c:	e7c2      	b.n	80152e4 <_dtoa_r+0x1d4>
 801535e:	2300      	movs	r3, #0
 8015360:	9308      	str	r3, [sp, #32]
 8015362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015364:	2b00      	cmp	r3, #0
 8015366:	dc39      	bgt.n	80153dc <_dtoa_r+0x2cc>
 8015368:	f04f 0901 	mov.w	r9, #1
 801536c:	f8cd 9004 	str.w	r9, [sp, #4]
 8015370:	464b      	mov	r3, r9
 8015372:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8015376:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015378:	2200      	movs	r2, #0
 801537a:	6042      	str	r2, [r0, #4]
 801537c:	2204      	movs	r2, #4
 801537e:	f102 0614 	add.w	r6, r2, #20
 8015382:	429e      	cmp	r6, r3
 8015384:	6841      	ldr	r1, [r0, #4]
 8015386:	d92f      	bls.n	80153e8 <_dtoa_r+0x2d8>
 8015388:	4620      	mov	r0, r4
 801538a:	f001 f91b 	bl	80165c4 <_Balloc>
 801538e:	9000      	str	r0, [sp, #0]
 8015390:	2800      	cmp	r0, #0
 8015392:	d14b      	bne.n	801542c <_dtoa_r+0x31c>
 8015394:	4b24      	ldr	r3, [pc, #144]	; (8015428 <_dtoa_r+0x318>)
 8015396:	4602      	mov	r2, r0
 8015398:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801539c:	e6d1      	b.n	8015142 <_dtoa_r+0x32>
 801539e:	2301      	movs	r3, #1
 80153a0:	e7de      	b.n	8015360 <_dtoa_r+0x250>
 80153a2:	2300      	movs	r3, #0
 80153a4:	9308      	str	r3, [sp, #32]
 80153a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153a8:	eb0a 0903 	add.w	r9, sl, r3
 80153ac:	f109 0301 	add.w	r3, r9, #1
 80153b0:	2b01      	cmp	r3, #1
 80153b2:	9301      	str	r3, [sp, #4]
 80153b4:	bfb8      	it	lt
 80153b6:	2301      	movlt	r3, #1
 80153b8:	e7dd      	b.n	8015376 <_dtoa_r+0x266>
 80153ba:	2301      	movs	r3, #1
 80153bc:	e7f2      	b.n	80153a4 <_dtoa_r+0x294>
 80153be:	2501      	movs	r5, #1
 80153c0:	2300      	movs	r3, #0
 80153c2:	9305      	str	r3, [sp, #20]
 80153c4:	9508      	str	r5, [sp, #32]
 80153c6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80153ca:	2200      	movs	r2, #0
 80153cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80153d0:	2312      	movs	r3, #18
 80153d2:	9209      	str	r2, [sp, #36]	; 0x24
 80153d4:	e7cf      	b.n	8015376 <_dtoa_r+0x266>
 80153d6:	2301      	movs	r3, #1
 80153d8:	9308      	str	r3, [sp, #32]
 80153da:	e7f4      	b.n	80153c6 <_dtoa_r+0x2b6>
 80153dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80153e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80153e4:	464b      	mov	r3, r9
 80153e6:	e7c6      	b.n	8015376 <_dtoa_r+0x266>
 80153e8:	3101      	adds	r1, #1
 80153ea:	6041      	str	r1, [r0, #4]
 80153ec:	0052      	lsls	r2, r2, #1
 80153ee:	e7c6      	b.n	801537e <_dtoa_r+0x26e>
 80153f0:	636f4361 	.word	0x636f4361
 80153f4:	3fd287a7 	.word	0x3fd287a7
 80153f8:	8b60c8b3 	.word	0x8b60c8b3
 80153fc:	3fc68a28 	.word	0x3fc68a28
 8015400:	509f79fb 	.word	0x509f79fb
 8015404:	3fd34413 	.word	0x3fd34413
 8015408:	08018845 	.word	0x08018845
 801540c:	0801885c 	.word	0x0801885c
 8015410:	7ff00000 	.word	0x7ff00000
 8015414:	08018841 	.word	0x08018841
 8015418:	08018838 	.word	0x08018838
 801541c:	08018ac2 	.word	0x08018ac2
 8015420:	3ff80000 	.word	0x3ff80000
 8015424:	080189d8 	.word	0x080189d8
 8015428:	080188bb 	.word	0x080188bb
 801542c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801542e:	9a00      	ldr	r2, [sp, #0]
 8015430:	601a      	str	r2, [r3, #0]
 8015432:	9b01      	ldr	r3, [sp, #4]
 8015434:	2b0e      	cmp	r3, #14
 8015436:	f200 80ad 	bhi.w	8015594 <_dtoa_r+0x484>
 801543a:	2d00      	cmp	r5, #0
 801543c:	f000 80aa 	beq.w	8015594 <_dtoa_r+0x484>
 8015440:	f1ba 0f00 	cmp.w	sl, #0
 8015444:	dd36      	ble.n	80154b4 <_dtoa_r+0x3a4>
 8015446:	4ac3      	ldr	r2, [pc, #780]	; (8015754 <_dtoa_r+0x644>)
 8015448:	f00a 030f 	and.w	r3, sl, #15
 801544c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015450:	ed93 7b00 	vldr	d7, [r3]
 8015454:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015458:	ea4f 172a 	mov.w	r7, sl, asr #4
 801545c:	eeb0 8a47 	vmov.f32	s16, s14
 8015460:	eef0 8a67 	vmov.f32	s17, s15
 8015464:	d016      	beq.n	8015494 <_dtoa_r+0x384>
 8015466:	4bbc      	ldr	r3, [pc, #752]	; (8015758 <_dtoa_r+0x648>)
 8015468:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801546c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015470:	f7eb f9fc 	bl	800086c <__aeabi_ddiv>
 8015474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015478:	f007 070f 	and.w	r7, r7, #15
 801547c:	2503      	movs	r5, #3
 801547e:	4eb6      	ldr	r6, [pc, #728]	; (8015758 <_dtoa_r+0x648>)
 8015480:	b957      	cbnz	r7, 8015498 <_dtoa_r+0x388>
 8015482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015486:	ec53 2b18 	vmov	r2, r3, d8
 801548a:	f7eb f9ef 	bl	800086c <__aeabi_ddiv>
 801548e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015492:	e029      	b.n	80154e8 <_dtoa_r+0x3d8>
 8015494:	2502      	movs	r5, #2
 8015496:	e7f2      	b.n	801547e <_dtoa_r+0x36e>
 8015498:	07f9      	lsls	r1, r7, #31
 801549a:	d508      	bpl.n	80154ae <_dtoa_r+0x39e>
 801549c:	ec51 0b18 	vmov	r0, r1, d8
 80154a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80154a4:	f7eb f8b8 	bl	8000618 <__aeabi_dmul>
 80154a8:	ec41 0b18 	vmov	d8, r0, r1
 80154ac:	3501      	adds	r5, #1
 80154ae:	107f      	asrs	r7, r7, #1
 80154b0:	3608      	adds	r6, #8
 80154b2:	e7e5      	b.n	8015480 <_dtoa_r+0x370>
 80154b4:	f000 80a6 	beq.w	8015604 <_dtoa_r+0x4f4>
 80154b8:	f1ca 0600 	rsb	r6, sl, #0
 80154bc:	4ba5      	ldr	r3, [pc, #660]	; (8015754 <_dtoa_r+0x644>)
 80154be:	4fa6      	ldr	r7, [pc, #664]	; (8015758 <_dtoa_r+0x648>)
 80154c0:	f006 020f 	and.w	r2, r6, #15
 80154c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80154c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80154d0:	f7eb f8a2 	bl	8000618 <__aeabi_dmul>
 80154d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80154d8:	1136      	asrs	r6, r6, #4
 80154da:	2300      	movs	r3, #0
 80154dc:	2502      	movs	r5, #2
 80154de:	2e00      	cmp	r6, #0
 80154e0:	f040 8085 	bne.w	80155ee <_dtoa_r+0x4de>
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d1d2      	bne.n	801548e <_dtoa_r+0x37e>
 80154e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	f000 808c 	beq.w	8015608 <_dtoa_r+0x4f8>
 80154f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80154f4:	4b99      	ldr	r3, [pc, #612]	; (801575c <_dtoa_r+0x64c>)
 80154f6:	2200      	movs	r2, #0
 80154f8:	4630      	mov	r0, r6
 80154fa:	4639      	mov	r1, r7
 80154fc:	f7eb fafe 	bl	8000afc <__aeabi_dcmplt>
 8015500:	2800      	cmp	r0, #0
 8015502:	f000 8081 	beq.w	8015608 <_dtoa_r+0x4f8>
 8015506:	9b01      	ldr	r3, [sp, #4]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d07d      	beq.n	8015608 <_dtoa_r+0x4f8>
 801550c:	f1b9 0f00 	cmp.w	r9, #0
 8015510:	dd3c      	ble.n	801558c <_dtoa_r+0x47c>
 8015512:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8015516:	9307      	str	r3, [sp, #28]
 8015518:	2200      	movs	r2, #0
 801551a:	4b91      	ldr	r3, [pc, #580]	; (8015760 <_dtoa_r+0x650>)
 801551c:	4630      	mov	r0, r6
 801551e:	4639      	mov	r1, r7
 8015520:	f7eb f87a 	bl	8000618 <__aeabi_dmul>
 8015524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015528:	3501      	adds	r5, #1
 801552a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801552e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015532:	4628      	mov	r0, r5
 8015534:	f7eb f806 	bl	8000544 <__aeabi_i2d>
 8015538:	4632      	mov	r2, r6
 801553a:	463b      	mov	r3, r7
 801553c:	f7eb f86c 	bl	8000618 <__aeabi_dmul>
 8015540:	4b88      	ldr	r3, [pc, #544]	; (8015764 <_dtoa_r+0x654>)
 8015542:	2200      	movs	r2, #0
 8015544:	f7ea feb2 	bl	80002ac <__adddf3>
 8015548:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801554c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015550:	9303      	str	r3, [sp, #12]
 8015552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015554:	2b00      	cmp	r3, #0
 8015556:	d15c      	bne.n	8015612 <_dtoa_r+0x502>
 8015558:	4b83      	ldr	r3, [pc, #524]	; (8015768 <_dtoa_r+0x658>)
 801555a:	2200      	movs	r2, #0
 801555c:	4630      	mov	r0, r6
 801555e:	4639      	mov	r1, r7
 8015560:	f7ea fea2 	bl	80002a8 <__aeabi_dsub>
 8015564:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015568:	4606      	mov	r6, r0
 801556a:	460f      	mov	r7, r1
 801556c:	f7eb fae4 	bl	8000b38 <__aeabi_dcmpgt>
 8015570:	2800      	cmp	r0, #0
 8015572:	f040 8296 	bne.w	8015aa2 <_dtoa_r+0x992>
 8015576:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801557a:	4630      	mov	r0, r6
 801557c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015580:	4639      	mov	r1, r7
 8015582:	f7eb fabb 	bl	8000afc <__aeabi_dcmplt>
 8015586:	2800      	cmp	r0, #0
 8015588:	f040 8288 	bne.w	8015a9c <_dtoa_r+0x98c>
 801558c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015590:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015594:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015596:	2b00      	cmp	r3, #0
 8015598:	f2c0 8158 	blt.w	801584c <_dtoa_r+0x73c>
 801559c:	f1ba 0f0e 	cmp.w	sl, #14
 80155a0:	f300 8154 	bgt.w	801584c <_dtoa_r+0x73c>
 80155a4:	4b6b      	ldr	r3, [pc, #428]	; (8015754 <_dtoa_r+0x644>)
 80155a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80155aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80155ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	f280 80e3 	bge.w	801577c <_dtoa_r+0x66c>
 80155b6:	9b01      	ldr	r3, [sp, #4]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	f300 80df 	bgt.w	801577c <_dtoa_r+0x66c>
 80155be:	f040 826d 	bne.w	8015a9c <_dtoa_r+0x98c>
 80155c2:	4b69      	ldr	r3, [pc, #420]	; (8015768 <_dtoa_r+0x658>)
 80155c4:	2200      	movs	r2, #0
 80155c6:	4640      	mov	r0, r8
 80155c8:	4649      	mov	r1, r9
 80155ca:	f7eb f825 	bl	8000618 <__aeabi_dmul>
 80155ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80155d2:	f7eb faa7 	bl	8000b24 <__aeabi_dcmpge>
 80155d6:	9e01      	ldr	r6, [sp, #4]
 80155d8:	4637      	mov	r7, r6
 80155da:	2800      	cmp	r0, #0
 80155dc:	f040 8243 	bne.w	8015a66 <_dtoa_r+0x956>
 80155e0:	9d00      	ldr	r5, [sp, #0]
 80155e2:	2331      	movs	r3, #49	; 0x31
 80155e4:	f805 3b01 	strb.w	r3, [r5], #1
 80155e8:	f10a 0a01 	add.w	sl, sl, #1
 80155ec:	e23f      	b.n	8015a6e <_dtoa_r+0x95e>
 80155ee:	07f2      	lsls	r2, r6, #31
 80155f0:	d505      	bpl.n	80155fe <_dtoa_r+0x4ee>
 80155f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80155f6:	f7eb f80f 	bl	8000618 <__aeabi_dmul>
 80155fa:	3501      	adds	r5, #1
 80155fc:	2301      	movs	r3, #1
 80155fe:	1076      	asrs	r6, r6, #1
 8015600:	3708      	adds	r7, #8
 8015602:	e76c      	b.n	80154de <_dtoa_r+0x3ce>
 8015604:	2502      	movs	r5, #2
 8015606:	e76f      	b.n	80154e8 <_dtoa_r+0x3d8>
 8015608:	9b01      	ldr	r3, [sp, #4]
 801560a:	f8cd a01c 	str.w	sl, [sp, #28]
 801560e:	930c      	str	r3, [sp, #48]	; 0x30
 8015610:	e78d      	b.n	801552e <_dtoa_r+0x41e>
 8015612:	9900      	ldr	r1, [sp, #0]
 8015614:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015618:	4b4e      	ldr	r3, [pc, #312]	; (8015754 <_dtoa_r+0x644>)
 801561a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801561e:	4401      	add	r1, r0
 8015620:	9102      	str	r1, [sp, #8]
 8015622:	9908      	ldr	r1, [sp, #32]
 8015624:	eeb0 8a47 	vmov.f32	s16, s14
 8015628:	eef0 8a67 	vmov.f32	s17, s15
 801562c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015630:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015634:	2900      	cmp	r1, #0
 8015636:	d045      	beq.n	80156c4 <_dtoa_r+0x5b4>
 8015638:	494c      	ldr	r1, [pc, #304]	; (801576c <_dtoa_r+0x65c>)
 801563a:	2000      	movs	r0, #0
 801563c:	f7eb f916 	bl	800086c <__aeabi_ddiv>
 8015640:	ec53 2b18 	vmov	r2, r3, d8
 8015644:	f7ea fe30 	bl	80002a8 <__aeabi_dsub>
 8015648:	9d00      	ldr	r5, [sp, #0]
 801564a:	ec41 0b18 	vmov	d8, r0, r1
 801564e:	4639      	mov	r1, r7
 8015650:	4630      	mov	r0, r6
 8015652:	f7eb fa91 	bl	8000b78 <__aeabi_d2iz>
 8015656:	900c      	str	r0, [sp, #48]	; 0x30
 8015658:	f7ea ff74 	bl	8000544 <__aeabi_i2d>
 801565c:	4602      	mov	r2, r0
 801565e:	460b      	mov	r3, r1
 8015660:	4630      	mov	r0, r6
 8015662:	4639      	mov	r1, r7
 8015664:	f7ea fe20 	bl	80002a8 <__aeabi_dsub>
 8015668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801566a:	3330      	adds	r3, #48	; 0x30
 801566c:	f805 3b01 	strb.w	r3, [r5], #1
 8015670:	ec53 2b18 	vmov	r2, r3, d8
 8015674:	4606      	mov	r6, r0
 8015676:	460f      	mov	r7, r1
 8015678:	f7eb fa40 	bl	8000afc <__aeabi_dcmplt>
 801567c:	2800      	cmp	r0, #0
 801567e:	d165      	bne.n	801574c <_dtoa_r+0x63c>
 8015680:	4632      	mov	r2, r6
 8015682:	463b      	mov	r3, r7
 8015684:	4935      	ldr	r1, [pc, #212]	; (801575c <_dtoa_r+0x64c>)
 8015686:	2000      	movs	r0, #0
 8015688:	f7ea fe0e 	bl	80002a8 <__aeabi_dsub>
 801568c:	ec53 2b18 	vmov	r2, r3, d8
 8015690:	f7eb fa34 	bl	8000afc <__aeabi_dcmplt>
 8015694:	2800      	cmp	r0, #0
 8015696:	f040 80b9 	bne.w	801580c <_dtoa_r+0x6fc>
 801569a:	9b02      	ldr	r3, [sp, #8]
 801569c:	429d      	cmp	r5, r3
 801569e:	f43f af75 	beq.w	801558c <_dtoa_r+0x47c>
 80156a2:	4b2f      	ldr	r3, [pc, #188]	; (8015760 <_dtoa_r+0x650>)
 80156a4:	ec51 0b18 	vmov	r0, r1, d8
 80156a8:	2200      	movs	r2, #0
 80156aa:	f7ea ffb5 	bl	8000618 <__aeabi_dmul>
 80156ae:	4b2c      	ldr	r3, [pc, #176]	; (8015760 <_dtoa_r+0x650>)
 80156b0:	ec41 0b18 	vmov	d8, r0, r1
 80156b4:	2200      	movs	r2, #0
 80156b6:	4630      	mov	r0, r6
 80156b8:	4639      	mov	r1, r7
 80156ba:	f7ea ffad 	bl	8000618 <__aeabi_dmul>
 80156be:	4606      	mov	r6, r0
 80156c0:	460f      	mov	r7, r1
 80156c2:	e7c4      	b.n	801564e <_dtoa_r+0x53e>
 80156c4:	ec51 0b17 	vmov	r0, r1, d7
 80156c8:	f7ea ffa6 	bl	8000618 <__aeabi_dmul>
 80156cc:	9b02      	ldr	r3, [sp, #8]
 80156ce:	9d00      	ldr	r5, [sp, #0]
 80156d0:	930c      	str	r3, [sp, #48]	; 0x30
 80156d2:	ec41 0b18 	vmov	d8, r0, r1
 80156d6:	4639      	mov	r1, r7
 80156d8:	4630      	mov	r0, r6
 80156da:	f7eb fa4d 	bl	8000b78 <__aeabi_d2iz>
 80156de:	9011      	str	r0, [sp, #68]	; 0x44
 80156e0:	f7ea ff30 	bl	8000544 <__aeabi_i2d>
 80156e4:	4602      	mov	r2, r0
 80156e6:	460b      	mov	r3, r1
 80156e8:	4630      	mov	r0, r6
 80156ea:	4639      	mov	r1, r7
 80156ec:	f7ea fddc 	bl	80002a8 <__aeabi_dsub>
 80156f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80156f2:	3330      	adds	r3, #48	; 0x30
 80156f4:	f805 3b01 	strb.w	r3, [r5], #1
 80156f8:	9b02      	ldr	r3, [sp, #8]
 80156fa:	429d      	cmp	r5, r3
 80156fc:	4606      	mov	r6, r0
 80156fe:	460f      	mov	r7, r1
 8015700:	f04f 0200 	mov.w	r2, #0
 8015704:	d134      	bne.n	8015770 <_dtoa_r+0x660>
 8015706:	4b19      	ldr	r3, [pc, #100]	; (801576c <_dtoa_r+0x65c>)
 8015708:	ec51 0b18 	vmov	r0, r1, d8
 801570c:	f7ea fdce 	bl	80002ac <__adddf3>
 8015710:	4602      	mov	r2, r0
 8015712:	460b      	mov	r3, r1
 8015714:	4630      	mov	r0, r6
 8015716:	4639      	mov	r1, r7
 8015718:	f7eb fa0e 	bl	8000b38 <__aeabi_dcmpgt>
 801571c:	2800      	cmp	r0, #0
 801571e:	d175      	bne.n	801580c <_dtoa_r+0x6fc>
 8015720:	ec53 2b18 	vmov	r2, r3, d8
 8015724:	4911      	ldr	r1, [pc, #68]	; (801576c <_dtoa_r+0x65c>)
 8015726:	2000      	movs	r0, #0
 8015728:	f7ea fdbe 	bl	80002a8 <__aeabi_dsub>
 801572c:	4602      	mov	r2, r0
 801572e:	460b      	mov	r3, r1
 8015730:	4630      	mov	r0, r6
 8015732:	4639      	mov	r1, r7
 8015734:	f7eb f9e2 	bl	8000afc <__aeabi_dcmplt>
 8015738:	2800      	cmp	r0, #0
 801573a:	f43f af27 	beq.w	801558c <_dtoa_r+0x47c>
 801573e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015740:	1e6b      	subs	r3, r5, #1
 8015742:	930c      	str	r3, [sp, #48]	; 0x30
 8015744:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015748:	2b30      	cmp	r3, #48	; 0x30
 801574a:	d0f8      	beq.n	801573e <_dtoa_r+0x62e>
 801574c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015750:	e04a      	b.n	80157e8 <_dtoa_r+0x6d8>
 8015752:	bf00      	nop
 8015754:	080189d8 	.word	0x080189d8
 8015758:	080189b0 	.word	0x080189b0
 801575c:	3ff00000 	.word	0x3ff00000
 8015760:	40240000 	.word	0x40240000
 8015764:	401c0000 	.word	0x401c0000
 8015768:	40140000 	.word	0x40140000
 801576c:	3fe00000 	.word	0x3fe00000
 8015770:	4baf      	ldr	r3, [pc, #700]	; (8015a30 <_dtoa_r+0x920>)
 8015772:	f7ea ff51 	bl	8000618 <__aeabi_dmul>
 8015776:	4606      	mov	r6, r0
 8015778:	460f      	mov	r7, r1
 801577a:	e7ac      	b.n	80156d6 <_dtoa_r+0x5c6>
 801577c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015780:	9d00      	ldr	r5, [sp, #0]
 8015782:	4642      	mov	r2, r8
 8015784:	464b      	mov	r3, r9
 8015786:	4630      	mov	r0, r6
 8015788:	4639      	mov	r1, r7
 801578a:	f7eb f86f 	bl	800086c <__aeabi_ddiv>
 801578e:	f7eb f9f3 	bl	8000b78 <__aeabi_d2iz>
 8015792:	9002      	str	r0, [sp, #8]
 8015794:	f7ea fed6 	bl	8000544 <__aeabi_i2d>
 8015798:	4642      	mov	r2, r8
 801579a:	464b      	mov	r3, r9
 801579c:	f7ea ff3c 	bl	8000618 <__aeabi_dmul>
 80157a0:	4602      	mov	r2, r0
 80157a2:	460b      	mov	r3, r1
 80157a4:	4630      	mov	r0, r6
 80157a6:	4639      	mov	r1, r7
 80157a8:	f7ea fd7e 	bl	80002a8 <__aeabi_dsub>
 80157ac:	9e02      	ldr	r6, [sp, #8]
 80157ae:	9f01      	ldr	r7, [sp, #4]
 80157b0:	3630      	adds	r6, #48	; 0x30
 80157b2:	f805 6b01 	strb.w	r6, [r5], #1
 80157b6:	9e00      	ldr	r6, [sp, #0]
 80157b8:	1bae      	subs	r6, r5, r6
 80157ba:	42b7      	cmp	r7, r6
 80157bc:	4602      	mov	r2, r0
 80157be:	460b      	mov	r3, r1
 80157c0:	d137      	bne.n	8015832 <_dtoa_r+0x722>
 80157c2:	f7ea fd73 	bl	80002ac <__adddf3>
 80157c6:	4642      	mov	r2, r8
 80157c8:	464b      	mov	r3, r9
 80157ca:	4606      	mov	r6, r0
 80157cc:	460f      	mov	r7, r1
 80157ce:	f7eb f9b3 	bl	8000b38 <__aeabi_dcmpgt>
 80157d2:	b9c8      	cbnz	r0, 8015808 <_dtoa_r+0x6f8>
 80157d4:	4642      	mov	r2, r8
 80157d6:	464b      	mov	r3, r9
 80157d8:	4630      	mov	r0, r6
 80157da:	4639      	mov	r1, r7
 80157dc:	f7eb f984 	bl	8000ae8 <__aeabi_dcmpeq>
 80157e0:	b110      	cbz	r0, 80157e8 <_dtoa_r+0x6d8>
 80157e2:	9b02      	ldr	r3, [sp, #8]
 80157e4:	07d9      	lsls	r1, r3, #31
 80157e6:	d40f      	bmi.n	8015808 <_dtoa_r+0x6f8>
 80157e8:	4620      	mov	r0, r4
 80157ea:	4659      	mov	r1, fp
 80157ec:	f000 ff2a 	bl	8016644 <_Bfree>
 80157f0:	2300      	movs	r3, #0
 80157f2:	702b      	strb	r3, [r5, #0]
 80157f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80157f6:	f10a 0001 	add.w	r0, sl, #1
 80157fa:	6018      	str	r0, [r3, #0]
 80157fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157fe:	2b00      	cmp	r3, #0
 8015800:	f43f acd8 	beq.w	80151b4 <_dtoa_r+0xa4>
 8015804:	601d      	str	r5, [r3, #0]
 8015806:	e4d5      	b.n	80151b4 <_dtoa_r+0xa4>
 8015808:	f8cd a01c 	str.w	sl, [sp, #28]
 801580c:	462b      	mov	r3, r5
 801580e:	461d      	mov	r5, r3
 8015810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015814:	2a39      	cmp	r2, #57	; 0x39
 8015816:	d108      	bne.n	801582a <_dtoa_r+0x71a>
 8015818:	9a00      	ldr	r2, [sp, #0]
 801581a:	429a      	cmp	r2, r3
 801581c:	d1f7      	bne.n	801580e <_dtoa_r+0x6fe>
 801581e:	9a07      	ldr	r2, [sp, #28]
 8015820:	9900      	ldr	r1, [sp, #0]
 8015822:	3201      	adds	r2, #1
 8015824:	9207      	str	r2, [sp, #28]
 8015826:	2230      	movs	r2, #48	; 0x30
 8015828:	700a      	strb	r2, [r1, #0]
 801582a:	781a      	ldrb	r2, [r3, #0]
 801582c:	3201      	adds	r2, #1
 801582e:	701a      	strb	r2, [r3, #0]
 8015830:	e78c      	b.n	801574c <_dtoa_r+0x63c>
 8015832:	4b7f      	ldr	r3, [pc, #508]	; (8015a30 <_dtoa_r+0x920>)
 8015834:	2200      	movs	r2, #0
 8015836:	f7ea feef 	bl	8000618 <__aeabi_dmul>
 801583a:	2200      	movs	r2, #0
 801583c:	2300      	movs	r3, #0
 801583e:	4606      	mov	r6, r0
 8015840:	460f      	mov	r7, r1
 8015842:	f7eb f951 	bl	8000ae8 <__aeabi_dcmpeq>
 8015846:	2800      	cmp	r0, #0
 8015848:	d09b      	beq.n	8015782 <_dtoa_r+0x672>
 801584a:	e7cd      	b.n	80157e8 <_dtoa_r+0x6d8>
 801584c:	9a08      	ldr	r2, [sp, #32]
 801584e:	2a00      	cmp	r2, #0
 8015850:	f000 80c4 	beq.w	80159dc <_dtoa_r+0x8cc>
 8015854:	9a05      	ldr	r2, [sp, #20]
 8015856:	2a01      	cmp	r2, #1
 8015858:	f300 80a8 	bgt.w	80159ac <_dtoa_r+0x89c>
 801585c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801585e:	2a00      	cmp	r2, #0
 8015860:	f000 80a0 	beq.w	80159a4 <_dtoa_r+0x894>
 8015864:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015868:	9e06      	ldr	r6, [sp, #24]
 801586a:	4645      	mov	r5, r8
 801586c:	9a04      	ldr	r2, [sp, #16]
 801586e:	2101      	movs	r1, #1
 8015870:	441a      	add	r2, r3
 8015872:	4620      	mov	r0, r4
 8015874:	4498      	add	r8, r3
 8015876:	9204      	str	r2, [sp, #16]
 8015878:	f000 ffea 	bl	8016850 <__i2b>
 801587c:	4607      	mov	r7, r0
 801587e:	2d00      	cmp	r5, #0
 8015880:	dd0b      	ble.n	801589a <_dtoa_r+0x78a>
 8015882:	9b04      	ldr	r3, [sp, #16]
 8015884:	2b00      	cmp	r3, #0
 8015886:	dd08      	ble.n	801589a <_dtoa_r+0x78a>
 8015888:	42ab      	cmp	r3, r5
 801588a:	9a04      	ldr	r2, [sp, #16]
 801588c:	bfa8      	it	ge
 801588e:	462b      	movge	r3, r5
 8015890:	eba8 0803 	sub.w	r8, r8, r3
 8015894:	1aed      	subs	r5, r5, r3
 8015896:	1ad3      	subs	r3, r2, r3
 8015898:	9304      	str	r3, [sp, #16]
 801589a:	9b06      	ldr	r3, [sp, #24]
 801589c:	b1fb      	cbz	r3, 80158de <_dtoa_r+0x7ce>
 801589e:	9b08      	ldr	r3, [sp, #32]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	f000 809f 	beq.w	80159e4 <_dtoa_r+0x8d4>
 80158a6:	2e00      	cmp	r6, #0
 80158a8:	dd11      	ble.n	80158ce <_dtoa_r+0x7be>
 80158aa:	4639      	mov	r1, r7
 80158ac:	4632      	mov	r2, r6
 80158ae:	4620      	mov	r0, r4
 80158b0:	f001 f88a 	bl	80169c8 <__pow5mult>
 80158b4:	465a      	mov	r2, fp
 80158b6:	4601      	mov	r1, r0
 80158b8:	4607      	mov	r7, r0
 80158ba:	4620      	mov	r0, r4
 80158bc:	f000 ffde 	bl	801687c <__multiply>
 80158c0:	4659      	mov	r1, fp
 80158c2:	9007      	str	r0, [sp, #28]
 80158c4:	4620      	mov	r0, r4
 80158c6:	f000 febd 	bl	8016644 <_Bfree>
 80158ca:	9b07      	ldr	r3, [sp, #28]
 80158cc:	469b      	mov	fp, r3
 80158ce:	9b06      	ldr	r3, [sp, #24]
 80158d0:	1b9a      	subs	r2, r3, r6
 80158d2:	d004      	beq.n	80158de <_dtoa_r+0x7ce>
 80158d4:	4659      	mov	r1, fp
 80158d6:	4620      	mov	r0, r4
 80158d8:	f001 f876 	bl	80169c8 <__pow5mult>
 80158dc:	4683      	mov	fp, r0
 80158de:	2101      	movs	r1, #1
 80158e0:	4620      	mov	r0, r4
 80158e2:	f000 ffb5 	bl	8016850 <__i2b>
 80158e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	4606      	mov	r6, r0
 80158ec:	dd7c      	ble.n	80159e8 <_dtoa_r+0x8d8>
 80158ee:	461a      	mov	r2, r3
 80158f0:	4601      	mov	r1, r0
 80158f2:	4620      	mov	r0, r4
 80158f4:	f001 f868 	bl	80169c8 <__pow5mult>
 80158f8:	9b05      	ldr	r3, [sp, #20]
 80158fa:	2b01      	cmp	r3, #1
 80158fc:	4606      	mov	r6, r0
 80158fe:	dd76      	ble.n	80159ee <_dtoa_r+0x8de>
 8015900:	2300      	movs	r3, #0
 8015902:	9306      	str	r3, [sp, #24]
 8015904:	6933      	ldr	r3, [r6, #16]
 8015906:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801590a:	6918      	ldr	r0, [r3, #16]
 801590c:	f000 ff50 	bl	80167b0 <__hi0bits>
 8015910:	f1c0 0020 	rsb	r0, r0, #32
 8015914:	9b04      	ldr	r3, [sp, #16]
 8015916:	4418      	add	r0, r3
 8015918:	f010 001f 	ands.w	r0, r0, #31
 801591c:	f000 8086 	beq.w	8015a2c <_dtoa_r+0x91c>
 8015920:	f1c0 0320 	rsb	r3, r0, #32
 8015924:	2b04      	cmp	r3, #4
 8015926:	dd7f      	ble.n	8015a28 <_dtoa_r+0x918>
 8015928:	f1c0 001c 	rsb	r0, r0, #28
 801592c:	9b04      	ldr	r3, [sp, #16]
 801592e:	4403      	add	r3, r0
 8015930:	4480      	add	r8, r0
 8015932:	4405      	add	r5, r0
 8015934:	9304      	str	r3, [sp, #16]
 8015936:	f1b8 0f00 	cmp.w	r8, #0
 801593a:	dd05      	ble.n	8015948 <_dtoa_r+0x838>
 801593c:	4659      	mov	r1, fp
 801593e:	4642      	mov	r2, r8
 8015940:	4620      	mov	r0, r4
 8015942:	f001 f89b 	bl	8016a7c <__lshift>
 8015946:	4683      	mov	fp, r0
 8015948:	9b04      	ldr	r3, [sp, #16]
 801594a:	2b00      	cmp	r3, #0
 801594c:	dd05      	ble.n	801595a <_dtoa_r+0x84a>
 801594e:	4631      	mov	r1, r6
 8015950:	461a      	mov	r2, r3
 8015952:	4620      	mov	r0, r4
 8015954:	f001 f892 	bl	8016a7c <__lshift>
 8015958:	4606      	mov	r6, r0
 801595a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801595c:	2b00      	cmp	r3, #0
 801595e:	d069      	beq.n	8015a34 <_dtoa_r+0x924>
 8015960:	4631      	mov	r1, r6
 8015962:	4658      	mov	r0, fp
 8015964:	f001 f8f6 	bl	8016b54 <__mcmp>
 8015968:	2800      	cmp	r0, #0
 801596a:	da63      	bge.n	8015a34 <_dtoa_r+0x924>
 801596c:	2300      	movs	r3, #0
 801596e:	4659      	mov	r1, fp
 8015970:	220a      	movs	r2, #10
 8015972:	4620      	mov	r0, r4
 8015974:	f000 fe88 	bl	8016688 <__multadd>
 8015978:	9b08      	ldr	r3, [sp, #32]
 801597a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801597e:	4683      	mov	fp, r0
 8015980:	2b00      	cmp	r3, #0
 8015982:	f000 818f 	beq.w	8015ca4 <_dtoa_r+0xb94>
 8015986:	4639      	mov	r1, r7
 8015988:	2300      	movs	r3, #0
 801598a:	220a      	movs	r2, #10
 801598c:	4620      	mov	r0, r4
 801598e:	f000 fe7b 	bl	8016688 <__multadd>
 8015992:	f1b9 0f00 	cmp.w	r9, #0
 8015996:	4607      	mov	r7, r0
 8015998:	f300 808e 	bgt.w	8015ab8 <_dtoa_r+0x9a8>
 801599c:	9b05      	ldr	r3, [sp, #20]
 801599e:	2b02      	cmp	r3, #2
 80159a0:	dc50      	bgt.n	8015a44 <_dtoa_r+0x934>
 80159a2:	e089      	b.n	8015ab8 <_dtoa_r+0x9a8>
 80159a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80159a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80159aa:	e75d      	b.n	8015868 <_dtoa_r+0x758>
 80159ac:	9b01      	ldr	r3, [sp, #4]
 80159ae:	1e5e      	subs	r6, r3, #1
 80159b0:	9b06      	ldr	r3, [sp, #24]
 80159b2:	42b3      	cmp	r3, r6
 80159b4:	bfbf      	itttt	lt
 80159b6:	9b06      	ldrlt	r3, [sp, #24]
 80159b8:	9606      	strlt	r6, [sp, #24]
 80159ba:	1af2      	sublt	r2, r6, r3
 80159bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80159be:	bfb6      	itet	lt
 80159c0:	189b      	addlt	r3, r3, r2
 80159c2:	1b9e      	subge	r6, r3, r6
 80159c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80159c6:	9b01      	ldr	r3, [sp, #4]
 80159c8:	bfb8      	it	lt
 80159ca:	2600      	movlt	r6, #0
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	bfb5      	itete	lt
 80159d0:	eba8 0503 	sublt.w	r5, r8, r3
 80159d4:	9b01      	ldrge	r3, [sp, #4]
 80159d6:	2300      	movlt	r3, #0
 80159d8:	4645      	movge	r5, r8
 80159da:	e747      	b.n	801586c <_dtoa_r+0x75c>
 80159dc:	9e06      	ldr	r6, [sp, #24]
 80159de:	9f08      	ldr	r7, [sp, #32]
 80159e0:	4645      	mov	r5, r8
 80159e2:	e74c      	b.n	801587e <_dtoa_r+0x76e>
 80159e4:	9a06      	ldr	r2, [sp, #24]
 80159e6:	e775      	b.n	80158d4 <_dtoa_r+0x7c4>
 80159e8:	9b05      	ldr	r3, [sp, #20]
 80159ea:	2b01      	cmp	r3, #1
 80159ec:	dc18      	bgt.n	8015a20 <_dtoa_r+0x910>
 80159ee:	9b02      	ldr	r3, [sp, #8]
 80159f0:	b9b3      	cbnz	r3, 8015a20 <_dtoa_r+0x910>
 80159f2:	9b03      	ldr	r3, [sp, #12]
 80159f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80159f8:	b9a3      	cbnz	r3, 8015a24 <_dtoa_r+0x914>
 80159fa:	9b03      	ldr	r3, [sp, #12]
 80159fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015a00:	0d1b      	lsrs	r3, r3, #20
 8015a02:	051b      	lsls	r3, r3, #20
 8015a04:	b12b      	cbz	r3, 8015a12 <_dtoa_r+0x902>
 8015a06:	9b04      	ldr	r3, [sp, #16]
 8015a08:	3301      	adds	r3, #1
 8015a0a:	9304      	str	r3, [sp, #16]
 8015a0c:	f108 0801 	add.w	r8, r8, #1
 8015a10:	2301      	movs	r3, #1
 8015a12:	9306      	str	r3, [sp, #24]
 8015a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	f47f af74 	bne.w	8015904 <_dtoa_r+0x7f4>
 8015a1c:	2001      	movs	r0, #1
 8015a1e:	e779      	b.n	8015914 <_dtoa_r+0x804>
 8015a20:	2300      	movs	r3, #0
 8015a22:	e7f6      	b.n	8015a12 <_dtoa_r+0x902>
 8015a24:	9b02      	ldr	r3, [sp, #8]
 8015a26:	e7f4      	b.n	8015a12 <_dtoa_r+0x902>
 8015a28:	d085      	beq.n	8015936 <_dtoa_r+0x826>
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	301c      	adds	r0, #28
 8015a2e:	e77d      	b.n	801592c <_dtoa_r+0x81c>
 8015a30:	40240000 	.word	0x40240000
 8015a34:	9b01      	ldr	r3, [sp, #4]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	dc38      	bgt.n	8015aac <_dtoa_r+0x99c>
 8015a3a:	9b05      	ldr	r3, [sp, #20]
 8015a3c:	2b02      	cmp	r3, #2
 8015a3e:	dd35      	ble.n	8015aac <_dtoa_r+0x99c>
 8015a40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015a44:	f1b9 0f00 	cmp.w	r9, #0
 8015a48:	d10d      	bne.n	8015a66 <_dtoa_r+0x956>
 8015a4a:	4631      	mov	r1, r6
 8015a4c:	464b      	mov	r3, r9
 8015a4e:	2205      	movs	r2, #5
 8015a50:	4620      	mov	r0, r4
 8015a52:	f000 fe19 	bl	8016688 <__multadd>
 8015a56:	4601      	mov	r1, r0
 8015a58:	4606      	mov	r6, r0
 8015a5a:	4658      	mov	r0, fp
 8015a5c:	f001 f87a 	bl	8016b54 <__mcmp>
 8015a60:	2800      	cmp	r0, #0
 8015a62:	f73f adbd 	bgt.w	80155e0 <_dtoa_r+0x4d0>
 8015a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a68:	9d00      	ldr	r5, [sp, #0]
 8015a6a:	ea6f 0a03 	mvn.w	sl, r3
 8015a6e:	f04f 0800 	mov.w	r8, #0
 8015a72:	4631      	mov	r1, r6
 8015a74:	4620      	mov	r0, r4
 8015a76:	f000 fde5 	bl	8016644 <_Bfree>
 8015a7a:	2f00      	cmp	r7, #0
 8015a7c:	f43f aeb4 	beq.w	80157e8 <_dtoa_r+0x6d8>
 8015a80:	f1b8 0f00 	cmp.w	r8, #0
 8015a84:	d005      	beq.n	8015a92 <_dtoa_r+0x982>
 8015a86:	45b8      	cmp	r8, r7
 8015a88:	d003      	beq.n	8015a92 <_dtoa_r+0x982>
 8015a8a:	4641      	mov	r1, r8
 8015a8c:	4620      	mov	r0, r4
 8015a8e:	f000 fdd9 	bl	8016644 <_Bfree>
 8015a92:	4639      	mov	r1, r7
 8015a94:	4620      	mov	r0, r4
 8015a96:	f000 fdd5 	bl	8016644 <_Bfree>
 8015a9a:	e6a5      	b.n	80157e8 <_dtoa_r+0x6d8>
 8015a9c:	2600      	movs	r6, #0
 8015a9e:	4637      	mov	r7, r6
 8015aa0:	e7e1      	b.n	8015a66 <_dtoa_r+0x956>
 8015aa2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015aa4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015aa8:	4637      	mov	r7, r6
 8015aaa:	e599      	b.n	80155e0 <_dtoa_r+0x4d0>
 8015aac:	9b08      	ldr	r3, [sp, #32]
 8015aae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	f000 80fd 	beq.w	8015cb2 <_dtoa_r+0xba2>
 8015ab8:	2d00      	cmp	r5, #0
 8015aba:	dd05      	ble.n	8015ac8 <_dtoa_r+0x9b8>
 8015abc:	4639      	mov	r1, r7
 8015abe:	462a      	mov	r2, r5
 8015ac0:	4620      	mov	r0, r4
 8015ac2:	f000 ffdb 	bl	8016a7c <__lshift>
 8015ac6:	4607      	mov	r7, r0
 8015ac8:	9b06      	ldr	r3, [sp, #24]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d05c      	beq.n	8015b88 <_dtoa_r+0xa78>
 8015ace:	6879      	ldr	r1, [r7, #4]
 8015ad0:	4620      	mov	r0, r4
 8015ad2:	f000 fd77 	bl	80165c4 <_Balloc>
 8015ad6:	4605      	mov	r5, r0
 8015ad8:	b928      	cbnz	r0, 8015ae6 <_dtoa_r+0x9d6>
 8015ada:	4b80      	ldr	r3, [pc, #512]	; (8015cdc <_dtoa_r+0xbcc>)
 8015adc:	4602      	mov	r2, r0
 8015ade:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015ae2:	f7ff bb2e 	b.w	8015142 <_dtoa_r+0x32>
 8015ae6:	693a      	ldr	r2, [r7, #16]
 8015ae8:	3202      	adds	r2, #2
 8015aea:	0092      	lsls	r2, r2, #2
 8015aec:	f107 010c 	add.w	r1, r7, #12
 8015af0:	300c      	adds	r0, #12
 8015af2:	f7fd fb50 	bl	8013196 <memcpy>
 8015af6:	2201      	movs	r2, #1
 8015af8:	4629      	mov	r1, r5
 8015afa:	4620      	mov	r0, r4
 8015afc:	f000 ffbe 	bl	8016a7c <__lshift>
 8015b00:	9b00      	ldr	r3, [sp, #0]
 8015b02:	3301      	adds	r3, #1
 8015b04:	9301      	str	r3, [sp, #4]
 8015b06:	9b00      	ldr	r3, [sp, #0]
 8015b08:	444b      	add	r3, r9
 8015b0a:	9307      	str	r3, [sp, #28]
 8015b0c:	9b02      	ldr	r3, [sp, #8]
 8015b0e:	f003 0301 	and.w	r3, r3, #1
 8015b12:	46b8      	mov	r8, r7
 8015b14:	9306      	str	r3, [sp, #24]
 8015b16:	4607      	mov	r7, r0
 8015b18:	9b01      	ldr	r3, [sp, #4]
 8015b1a:	4631      	mov	r1, r6
 8015b1c:	3b01      	subs	r3, #1
 8015b1e:	4658      	mov	r0, fp
 8015b20:	9302      	str	r3, [sp, #8]
 8015b22:	f7ff fa69 	bl	8014ff8 <quorem>
 8015b26:	4603      	mov	r3, r0
 8015b28:	3330      	adds	r3, #48	; 0x30
 8015b2a:	9004      	str	r0, [sp, #16]
 8015b2c:	4641      	mov	r1, r8
 8015b2e:	4658      	mov	r0, fp
 8015b30:	9308      	str	r3, [sp, #32]
 8015b32:	f001 f80f 	bl	8016b54 <__mcmp>
 8015b36:	463a      	mov	r2, r7
 8015b38:	4681      	mov	r9, r0
 8015b3a:	4631      	mov	r1, r6
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	f001 f825 	bl	8016b8c <__mdiff>
 8015b42:	68c2      	ldr	r2, [r0, #12]
 8015b44:	9b08      	ldr	r3, [sp, #32]
 8015b46:	4605      	mov	r5, r0
 8015b48:	bb02      	cbnz	r2, 8015b8c <_dtoa_r+0xa7c>
 8015b4a:	4601      	mov	r1, r0
 8015b4c:	4658      	mov	r0, fp
 8015b4e:	f001 f801 	bl	8016b54 <__mcmp>
 8015b52:	9b08      	ldr	r3, [sp, #32]
 8015b54:	4602      	mov	r2, r0
 8015b56:	4629      	mov	r1, r5
 8015b58:	4620      	mov	r0, r4
 8015b5a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8015b5e:	f000 fd71 	bl	8016644 <_Bfree>
 8015b62:	9b05      	ldr	r3, [sp, #20]
 8015b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b66:	9d01      	ldr	r5, [sp, #4]
 8015b68:	ea43 0102 	orr.w	r1, r3, r2
 8015b6c:	9b06      	ldr	r3, [sp, #24]
 8015b6e:	430b      	orrs	r3, r1
 8015b70:	9b08      	ldr	r3, [sp, #32]
 8015b72:	d10d      	bne.n	8015b90 <_dtoa_r+0xa80>
 8015b74:	2b39      	cmp	r3, #57	; 0x39
 8015b76:	d029      	beq.n	8015bcc <_dtoa_r+0xabc>
 8015b78:	f1b9 0f00 	cmp.w	r9, #0
 8015b7c:	dd01      	ble.n	8015b82 <_dtoa_r+0xa72>
 8015b7e:	9b04      	ldr	r3, [sp, #16]
 8015b80:	3331      	adds	r3, #49	; 0x31
 8015b82:	9a02      	ldr	r2, [sp, #8]
 8015b84:	7013      	strb	r3, [r2, #0]
 8015b86:	e774      	b.n	8015a72 <_dtoa_r+0x962>
 8015b88:	4638      	mov	r0, r7
 8015b8a:	e7b9      	b.n	8015b00 <_dtoa_r+0x9f0>
 8015b8c:	2201      	movs	r2, #1
 8015b8e:	e7e2      	b.n	8015b56 <_dtoa_r+0xa46>
 8015b90:	f1b9 0f00 	cmp.w	r9, #0
 8015b94:	db06      	blt.n	8015ba4 <_dtoa_r+0xa94>
 8015b96:	9905      	ldr	r1, [sp, #20]
 8015b98:	ea41 0909 	orr.w	r9, r1, r9
 8015b9c:	9906      	ldr	r1, [sp, #24]
 8015b9e:	ea59 0101 	orrs.w	r1, r9, r1
 8015ba2:	d120      	bne.n	8015be6 <_dtoa_r+0xad6>
 8015ba4:	2a00      	cmp	r2, #0
 8015ba6:	ddec      	ble.n	8015b82 <_dtoa_r+0xa72>
 8015ba8:	4659      	mov	r1, fp
 8015baa:	2201      	movs	r2, #1
 8015bac:	4620      	mov	r0, r4
 8015bae:	9301      	str	r3, [sp, #4]
 8015bb0:	f000 ff64 	bl	8016a7c <__lshift>
 8015bb4:	4631      	mov	r1, r6
 8015bb6:	4683      	mov	fp, r0
 8015bb8:	f000 ffcc 	bl	8016b54 <__mcmp>
 8015bbc:	2800      	cmp	r0, #0
 8015bbe:	9b01      	ldr	r3, [sp, #4]
 8015bc0:	dc02      	bgt.n	8015bc8 <_dtoa_r+0xab8>
 8015bc2:	d1de      	bne.n	8015b82 <_dtoa_r+0xa72>
 8015bc4:	07da      	lsls	r2, r3, #31
 8015bc6:	d5dc      	bpl.n	8015b82 <_dtoa_r+0xa72>
 8015bc8:	2b39      	cmp	r3, #57	; 0x39
 8015bca:	d1d8      	bne.n	8015b7e <_dtoa_r+0xa6e>
 8015bcc:	9a02      	ldr	r2, [sp, #8]
 8015bce:	2339      	movs	r3, #57	; 0x39
 8015bd0:	7013      	strb	r3, [r2, #0]
 8015bd2:	462b      	mov	r3, r5
 8015bd4:	461d      	mov	r5, r3
 8015bd6:	3b01      	subs	r3, #1
 8015bd8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015bdc:	2a39      	cmp	r2, #57	; 0x39
 8015bde:	d050      	beq.n	8015c82 <_dtoa_r+0xb72>
 8015be0:	3201      	adds	r2, #1
 8015be2:	701a      	strb	r2, [r3, #0]
 8015be4:	e745      	b.n	8015a72 <_dtoa_r+0x962>
 8015be6:	2a00      	cmp	r2, #0
 8015be8:	dd03      	ble.n	8015bf2 <_dtoa_r+0xae2>
 8015bea:	2b39      	cmp	r3, #57	; 0x39
 8015bec:	d0ee      	beq.n	8015bcc <_dtoa_r+0xabc>
 8015bee:	3301      	adds	r3, #1
 8015bf0:	e7c7      	b.n	8015b82 <_dtoa_r+0xa72>
 8015bf2:	9a01      	ldr	r2, [sp, #4]
 8015bf4:	9907      	ldr	r1, [sp, #28]
 8015bf6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015bfa:	428a      	cmp	r2, r1
 8015bfc:	d02a      	beq.n	8015c54 <_dtoa_r+0xb44>
 8015bfe:	4659      	mov	r1, fp
 8015c00:	2300      	movs	r3, #0
 8015c02:	220a      	movs	r2, #10
 8015c04:	4620      	mov	r0, r4
 8015c06:	f000 fd3f 	bl	8016688 <__multadd>
 8015c0a:	45b8      	cmp	r8, r7
 8015c0c:	4683      	mov	fp, r0
 8015c0e:	f04f 0300 	mov.w	r3, #0
 8015c12:	f04f 020a 	mov.w	r2, #10
 8015c16:	4641      	mov	r1, r8
 8015c18:	4620      	mov	r0, r4
 8015c1a:	d107      	bne.n	8015c2c <_dtoa_r+0xb1c>
 8015c1c:	f000 fd34 	bl	8016688 <__multadd>
 8015c20:	4680      	mov	r8, r0
 8015c22:	4607      	mov	r7, r0
 8015c24:	9b01      	ldr	r3, [sp, #4]
 8015c26:	3301      	adds	r3, #1
 8015c28:	9301      	str	r3, [sp, #4]
 8015c2a:	e775      	b.n	8015b18 <_dtoa_r+0xa08>
 8015c2c:	f000 fd2c 	bl	8016688 <__multadd>
 8015c30:	4639      	mov	r1, r7
 8015c32:	4680      	mov	r8, r0
 8015c34:	2300      	movs	r3, #0
 8015c36:	220a      	movs	r2, #10
 8015c38:	4620      	mov	r0, r4
 8015c3a:	f000 fd25 	bl	8016688 <__multadd>
 8015c3e:	4607      	mov	r7, r0
 8015c40:	e7f0      	b.n	8015c24 <_dtoa_r+0xb14>
 8015c42:	f1b9 0f00 	cmp.w	r9, #0
 8015c46:	9a00      	ldr	r2, [sp, #0]
 8015c48:	bfcc      	ite	gt
 8015c4a:	464d      	movgt	r5, r9
 8015c4c:	2501      	movle	r5, #1
 8015c4e:	4415      	add	r5, r2
 8015c50:	f04f 0800 	mov.w	r8, #0
 8015c54:	4659      	mov	r1, fp
 8015c56:	2201      	movs	r2, #1
 8015c58:	4620      	mov	r0, r4
 8015c5a:	9301      	str	r3, [sp, #4]
 8015c5c:	f000 ff0e 	bl	8016a7c <__lshift>
 8015c60:	4631      	mov	r1, r6
 8015c62:	4683      	mov	fp, r0
 8015c64:	f000 ff76 	bl	8016b54 <__mcmp>
 8015c68:	2800      	cmp	r0, #0
 8015c6a:	dcb2      	bgt.n	8015bd2 <_dtoa_r+0xac2>
 8015c6c:	d102      	bne.n	8015c74 <_dtoa_r+0xb64>
 8015c6e:	9b01      	ldr	r3, [sp, #4]
 8015c70:	07db      	lsls	r3, r3, #31
 8015c72:	d4ae      	bmi.n	8015bd2 <_dtoa_r+0xac2>
 8015c74:	462b      	mov	r3, r5
 8015c76:	461d      	mov	r5, r3
 8015c78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015c7c:	2a30      	cmp	r2, #48	; 0x30
 8015c7e:	d0fa      	beq.n	8015c76 <_dtoa_r+0xb66>
 8015c80:	e6f7      	b.n	8015a72 <_dtoa_r+0x962>
 8015c82:	9a00      	ldr	r2, [sp, #0]
 8015c84:	429a      	cmp	r2, r3
 8015c86:	d1a5      	bne.n	8015bd4 <_dtoa_r+0xac4>
 8015c88:	f10a 0a01 	add.w	sl, sl, #1
 8015c8c:	2331      	movs	r3, #49	; 0x31
 8015c8e:	e779      	b.n	8015b84 <_dtoa_r+0xa74>
 8015c90:	4b13      	ldr	r3, [pc, #76]	; (8015ce0 <_dtoa_r+0xbd0>)
 8015c92:	f7ff baaf 	b.w	80151f4 <_dtoa_r+0xe4>
 8015c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	f47f aa86 	bne.w	80151aa <_dtoa_r+0x9a>
 8015c9e:	4b11      	ldr	r3, [pc, #68]	; (8015ce4 <_dtoa_r+0xbd4>)
 8015ca0:	f7ff baa8 	b.w	80151f4 <_dtoa_r+0xe4>
 8015ca4:	f1b9 0f00 	cmp.w	r9, #0
 8015ca8:	dc03      	bgt.n	8015cb2 <_dtoa_r+0xba2>
 8015caa:	9b05      	ldr	r3, [sp, #20]
 8015cac:	2b02      	cmp	r3, #2
 8015cae:	f73f aec9 	bgt.w	8015a44 <_dtoa_r+0x934>
 8015cb2:	9d00      	ldr	r5, [sp, #0]
 8015cb4:	4631      	mov	r1, r6
 8015cb6:	4658      	mov	r0, fp
 8015cb8:	f7ff f99e 	bl	8014ff8 <quorem>
 8015cbc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015cc0:	f805 3b01 	strb.w	r3, [r5], #1
 8015cc4:	9a00      	ldr	r2, [sp, #0]
 8015cc6:	1aaa      	subs	r2, r5, r2
 8015cc8:	4591      	cmp	r9, r2
 8015cca:	ddba      	ble.n	8015c42 <_dtoa_r+0xb32>
 8015ccc:	4659      	mov	r1, fp
 8015cce:	2300      	movs	r3, #0
 8015cd0:	220a      	movs	r2, #10
 8015cd2:	4620      	mov	r0, r4
 8015cd4:	f000 fcd8 	bl	8016688 <__multadd>
 8015cd8:	4683      	mov	fp, r0
 8015cda:	e7eb      	b.n	8015cb4 <_dtoa_r+0xba4>
 8015cdc:	080188bb 	.word	0x080188bb
 8015ce0:	08018ac1 	.word	0x08018ac1
 8015ce4:	08018838 	.word	0x08018838

08015ce8 <__sflush_r>:
 8015ce8:	898a      	ldrh	r2, [r1, #12]
 8015cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cee:	4605      	mov	r5, r0
 8015cf0:	0710      	lsls	r0, r2, #28
 8015cf2:	460c      	mov	r4, r1
 8015cf4:	d458      	bmi.n	8015da8 <__sflush_r+0xc0>
 8015cf6:	684b      	ldr	r3, [r1, #4]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	dc05      	bgt.n	8015d08 <__sflush_r+0x20>
 8015cfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	dc02      	bgt.n	8015d08 <__sflush_r+0x20>
 8015d02:	2000      	movs	r0, #0
 8015d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d0a:	2e00      	cmp	r6, #0
 8015d0c:	d0f9      	beq.n	8015d02 <__sflush_r+0x1a>
 8015d0e:	2300      	movs	r3, #0
 8015d10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015d14:	682f      	ldr	r7, [r5, #0]
 8015d16:	602b      	str	r3, [r5, #0]
 8015d18:	d032      	beq.n	8015d80 <__sflush_r+0x98>
 8015d1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015d1c:	89a3      	ldrh	r3, [r4, #12]
 8015d1e:	075a      	lsls	r2, r3, #29
 8015d20:	d505      	bpl.n	8015d2e <__sflush_r+0x46>
 8015d22:	6863      	ldr	r3, [r4, #4]
 8015d24:	1ac0      	subs	r0, r0, r3
 8015d26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015d28:	b10b      	cbz	r3, 8015d2e <__sflush_r+0x46>
 8015d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015d2c:	1ac0      	subs	r0, r0, r3
 8015d2e:	2300      	movs	r3, #0
 8015d30:	4602      	mov	r2, r0
 8015d32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d34:	6a21      	ldr	r1, [r4, #32]
 8015d36:	4628      	mov	r0, r5
 8015d38:	47b0      	blx	r6
 8015d3a:	1c43      	adds	r3, r0, #1
 8015d3c:	89a3      	ldrh	r3, [r4, #12]
 8015d3e:	d106      	bne.n	8015d4e <__sflush_r+0x66>
 8015d40:	6829      	ldr	r1, [r5, #0]
 8015d42:	291d      	cmp	r1, #29
 8015d44:	d82c      	bhi.n	8015da0 <__sflush_r+0xb8>
 8015d46:	4a2a      	ldr	r2, [pc, #168]	; (8015df0 <__sflush_r+0x108>)
 8015d48:	40ca      	lsrs	r2, r1
 8015d4a:	07d6      	lsls	r6, r2, #31
 8015d4c:	d528      	bpl.n	8015da0 <__sflush_r+0xb8>
 8015d4e:	2200      	movs	r2, #0
 8015d50:	6062      	str	r2, [r4, #4]
 8015d52:	04d9      	lsls	r1, r3, #19
 8015d54:	6922      	ldr	r2, [r4, #16]
 8015d56:	6022      	str	r2, [r4, #0]
 8015d58:	d504      	bpl.n	8015d64 <__sflush_r+0x7c>
 8015d5a:	1c42      	adds	r2, r0, #1
 8015d5c:	d101      	bne.n	8015d62 <__sflush_r+0x7a>
 8015d5e:	682b      	ldr	r3, [r5, #0]
 8015d60:	b903      	cbnz	r3, 8015d64 <__sflush_r+0x7c>
 8015d62:	6560      	str	r0, [r4, #84]	; 0x54
 8015d64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d66:	602f      	str	r7, [r5, #0]
 8015d68:	2900      	cmp	r1, #0
 8015d6a:	d0ca      	beq.n	8015d02 <__sflush_r+0x1a>
 8015d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d70:	4299      	cmp	r1, r3
 8015d72:	d002      	beq.n	8015d7a <__sflush_r+0x92>
 8015d74:	4628      	mov	r0, r5
 8015d76:	f001 f8ef 	bl	8016f58 <_free_r>
 8015d7a:	2000      	movs	r0, #0
 8015d7c:	6360      	str	r0, [r4, #52]	; 0x34
 8015d7e:	e7c1      	b.n	8015d04 <__sflush_r+0x1c>
 8015d80:	6a21      	ldr	r1, [r4, #32]
 8015d82:	2301      	movs	r3, #1
 8015d84:	4628      	mov	r0, r5
 8015d86:	47b0      	blx	r6
 8015d88:	1c41      	adds	r1, r0, #1
 8015d8a:	d1c7      	bne.n	8015d1c <__sflush_r+0x34>
 8015d8c:	682b      	ldr	r3, [r5, #0]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d0c4      	beq.n	8015d1c <__sflush_r+0x34>
 8015d92:	2b1d      	cmp	r3, #29
 8015d94:	d001      	beq.n	8015d9a <__sflush_r+0xb2>
 8015d96:	2b16      	cmp	r3, #22
 8015d98:	d101      	bne.n	8015d9e <__sflush_r+0xb6>
 8015d9a:	602f      	str	r7, [r5, #0]
 8015d9c:	e7b1      	b.n	8015d02 <__sflush_r+0x1a>
 8015d9e:	89a3      	ldrh	r3, [r4, #12]
 8015da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015da4:	81a3      	strh	r3, [r4, #12]
 8015da6:	e7ad      	b.n	8015d04 <__sflush_r+0x1c>
 8015da8:	690f      	ldr	r7, [r1, #16]
 8015daa:	2f00      	cmp	r7, #0
 8015dac:	d0a9      	beq.n	8015d02 <__sflush_r+0x1a>
 8015dae:	0793      	lsls	r3, r2, #30
 8015db0:	680e      	ldr	r6, [r1, #0]
 8015db2:	bf08      	it	eq
 8015db4:	694b      	ldreq	r3, [r1, #20]
 8015db6:	600f      	str	r7, [r1, #0]
 8015db8:	bf18      	it	ne
 8015dba:	2300      	movne	r3, #0
 8015dbc:	eba6 0807 	sub.w	r8, r6, r7
 8015dc0:	608b      	str	r3, [r1, #8]
 8015dc2:	f1b8 0f00 	cmp.w	r8, #0
 8015dc6:	dd9c      	ble.n	8015d02 <__sflush_r+0x1a>
 8015dc8:	6a21      	ldr	r1, [r4, #32]
 8015dca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015dcc:	4643      	mov	r3, r8
 8015dce:	463a      	mov	r2, r7
 8015dd0:	4628      	mov	r0, r5
 8015dd2:	47b0      	blx	r6
 8015dd4:	2800      	cmp	r0, #0
 8015dd6:	dc06      	bgt.n	8015de6 <__sflush_r+0xfe>
 8015dd8:	89a3      	ldrh	r3, [r4, #12]
 8015dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015dde:	81a3      	strh	r3, [r4, #12]
 8015de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015de4:	e78e      	b.n	8015d04 <__sflush_r+0x1c>
 8015de6:	4407      	add	r7, r0
 8015de8:	eba8 0800 	sub.w	r8, r8, r0
 8015dec:	e7e9      	b.n	8015dc2 <__sflush_r+0xda>
 8015dee:	bf00      	nop
 8015df0:	20400001 	.word	0x20400001

08015df4 <_fflush_r>:
 8015df4:	b538      	push	{r3, r4, r5, lr}
 8015df6:	690b      	ldr	r3, [r1, #16]
 8015df8:	4605      	mov	r5, r0
 8015dfa:	460c      	mov	r4, r1
 8015dfc:	b913      	cbnz	r3, 8015e04 <_fflush_r+0x10>
 8015dfe:	2500      	movs	r5, #0
 8015e00:	4628      	mov	r0, r5
 8015e02:	bd38      	pop	{r3, r4, r5, pc}
 8015e04:	b118      	cbz	r0, 8015e0e <_fflush_r+0x1a>
 8015e06:	6983      	ldr	r3, [r0, #24]
 8015e08:	b90b      	cbnz	r3, 8015e0e <_fflush_r+0x1a>
 8015e0a:	f7fd f8ff 	bl	801300c <__sinit>
 8015e0e:	4b14      	ldr	r3, [pc, #80]	; (8015e60 <_fflush_r+0x6c>)
 8015e10:	429c      	cmp	r4, r3
 8015e12:	d11b      	bne.n	8015e4c <_fflush_r+0x58>
 8015e14:	686c      	ldr	r4, [r5, #4]
 8015e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d0ef      	beq.n	8015dfe <_fflush_r+0xa>
 8015e1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015e20:	07d0      	lsls	r0, r2, #31
 8015e22:	d404      	bmi.n	8015e2e <_fflush_r+0x3a>
 8015e24:	0599      	lsls	r1, r3, #22
 8015e26:	d402      	bmi.n	8015e2e <_fflush_r+0x3a>
 8015e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e2a:	f7fd f9b2 	bl	8013192 <__retarget_lock_acquire_recursive>
 8015e2e:	4628      	mov	r0, r5
 8015e30:	4621      	mov	r1, r4
 8015e32:	f7ff ff59 	bl	8015ce8 <__sflush_r>
 8015e36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015e38:	07da      	lsls	r2, r3, #31
 8015e3a:	4605      	mov	r5, r0
 8015e3c:	d4e0      	bmi.n	8015e00 <_fflush_r+0xc>
 8015e3e:	89a3      	ldrh	r3, [r4, #12]
 8015e40:	059b      	lsls	r3, r3, #22
 8015e42:	d4dd      	bmi.n	8015e00 <_fflush_r+0xc>
 8015e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e46:	f7fd f9a5 	bl	8013194 <__retarget_lock_release_recursive>
 8015e4a:	e7d9      	b.n	8015e00 <_fflush_r+0xc>
 8015e4c:	4b05      	ldr	r3, [pc, #20]	; (8015e64 <_fflush_r+0x70>)
 8015e4e:	429c      	cmp	r4, r3
 8015e50:	d101      	bne.n	8015e56 <_fflush_r+0x62>
 8015e52:	68ac      	ldr	r4, [r5, #8]
 8015e54:	e7df      	b.n	8015e16 <_fflush_r+0x22>
 8015e56:	4b04      	ldr	r3, [pc, #16]	; (8015e68 <_fflush_r+0x74>)
 8015e58:	429c      	cmp	r4, r3
 8015e5a:	bf08      	it	eq
 8015e5c:	68ec      	ldreq	r4, [r5, #12]
 8015e5e:	e7da      	b.n	8015e16 <_fflush_r+0x22>
 8015e60:	08018768 	.word	0x08018768
 8015e64:	08018788 	.word	0x08018788
 8015e68:	08018748 	.word	0x08018748

08015e6c <rshift>:
 8015e6c:	6903      	ldr	r3, [r0, #16]
 8015e6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015e72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015e7a:	f100 0414 	add.w	r4, r0, #20
 8015e7e:	dd45      	ble.n	8015f0c <rshift+0xa0>
 8015e80:	f011 011f 	ands.w	r1, r1, #31
 8015e84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015e88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015e8c:	d10c      	bne.n	8015ea8 <rshift+0x3c>
 8015e8e:	f100 0710 	add.w	r7, r0, #16
 8015e92:	4629      	mov	r1, r5
 8015e94:	42b1      	cmp	r1, r6
 8015e96:	d334      	bcc.n	8015f02 <rshift+0x96>
 8015e98:	1a9b      	subs	r3, r3, r2
 8015e9a:	009b      	lsls	r3, r3, #2
 8015e9c:	1eea      	subs	r2, r5, #3
 8015e9e:	4296      	cmp	r6, r2
 8015ea0:	bf38      	it	cc
 8015ea2:	2300      	movcc	r3, #0
 8015ea4:	4423      	add	r3, r4
 8015ea6:	e015      	b.n	8015ed4 <rshift+0x68>
 8015ea8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015eac:	f1c1 0820 	rsb	r8, r1, #32
 8015eb0:	40cf      	lsrs	r7, r1
 8015eb2:	f105 0e04 	add.w	lr, r5, #4
 8015eb6:	46a1      	mov	r9, r4
 8015eb8:	4576      	cmp	r6, lr
 8015eba:	46f4      	mov	ip, lr
 8015ebc:	d815      	bhi.n	8015eea <rshift+0x7e>
 8015ebe:	1a9b      	subs	r3, r3, r2
 8015ec0:	009a      	lsls	r2, r3, #2
 8015ec2:	3a04      	subs	r2, #4
 8015ec4:	3501      	adds	r5, #1
 8015ec6:	42ae      	cmp	r6, r5
 8015ec8:	bf38      	it	cc
 8015eca:	2200      	movcc	r2, #0
 8015ecc:	18a3      	adds	r3, r4, r2
 8015ece:	50a7      	str	r7, [r4, r2]
 8015ed0:	b107      	cbz	r7, 8015ed4 <rshift+0x68>
 8015ed2:	3304      	adds	r3, #4
 8015ed4:	1b1a      	subs	r2, r3, r4
 8015ed6:	42a3      	cmp	r3, r4
 8015ed8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015edc:	bf08      	it	eq
 8015ede:	2300      	moveq	r3, #0
 8015ee0:	6102      	str	r2, [r0, #16]
 8015ee2:	bf08      	it	eq
 8015ee4:	6143      	streq	r3, [r0, #20]
 8015ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015eea:	f8dc c000 	ldr.w	ip, [ip]
 8015eee:	fa0c fc08 	lsl.w	ip, ip, r8
 8015ef2:	ea4c 0707 	orr.w	r7, ip, r7
 8015ef6:	f849 7b04 	str.w	r7, [r9], #4
 8015efa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015efe:	40cf      	lsrs	r7, r1
 8015f00:	e7da      	b.n	8015eb8 <rshift+0x4c>
 8015f02:	f851 cb04 	ldr.w	ip, [r1], #4
 8015f06:	f847 cf04 	str.w	ip, [r7, #4]!
 8015f0a:	e7c3      	b.n	8015e94 <rshift+0x28>
 8015f0c:	4623      	mov	r3, r4
 8015f0e:	e7e1      	b.n	8015ed4 <rshift+0x68>

08015f10 <__hexdig_fun>:
 8015f10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015f14:	2b09      	cmp	r3, #9
 8015f16:	d802      	bhi.n	8015f1e <__hexdig_fun+0xe>
 8015f18:	3820      	subs	r0, #32
 8015f1a:	b2c0      	uxtb	r0, r0
 8015f1c:	4770      	bx	lr
 8015f1e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015f22:	2b05      	cmp	r3, #5
 8015f24:	d801      	bhi.n	8015f2a <__hexdig_fun+0x1a>
 8015f26:	3847      	subs	r0, #71	; 0x47
 8015f28:	e7f7      	b.n	8015f1a <__hexdig_fun+0xa>
 8015f2a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015f2e:	2b05      	cmp	r3, #5
 8015f30:	d801      	bhi.n	8015f36 <__hexdig_fun+0x26>
 8015f32:	3827      	subs	r0, #39	; 0x27
 8015f34:	e7f1      	b.n	8015f1a <__hexdig_fun+0xa>
 8015f36:	2000      	movs	r0, #0
 8015f38:	4770      	bx	lr
	...

08015f3c <__gethex>:
 8015f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f40:	ed2d 8b02 	vpush	{d8}
 8015f44:	b089      	sub	sp, #36	; 0x24
 8015f46:	ee08 0a10 	vmov	s16, r0
 8015f4a:	9304      	str	r3, [sp, #16]
 8015f4c:	4bbc      	ldr	r3, [pc, #752]	; (8016240 <__gethex+0x304>)
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	9301      	str	r3, [sp, #4]
 8015f52:	4618      	mov	r0, r3
 8015f54:	468b      	mov	fp, r1
 8015f56:	4690      	mov	r8, r2
 8015f58:	f7ea f94a 	bl	80001f0 <strlen>
 8015f5c:	9b01      	ldr	r3, [sp, #4]
 8015f5e:	f8db 2000 	ldr.w	r2, [fp]
 8015f62:	4403      	add	r3, r0
 8015f64:	4682      	mov	sl, r0
 8015f66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015f6a:	9305      	str	r3, [sp, #20]
 8015f6c:	1c93      	adds	r3, r2, #2
 8015f6e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015f72:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015f76:	32fe      	adds	r2, #254	; 0xfe
 8015f78:	18d1      	adds	r1, r2, r3
 8015f7a:	461f      	mov	r7, r3
 8015f7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015f80:	9100      	str	r1, [sp, #0]
 8015f82:	2830      	cmp	r0, #48	; 0x30
 8015f84:	d0f8      	beq.n	8015f78 <__gethex+0x3c>
 8015f86:	f7ff ffc3 	bl	8015f10 <__hexdig_fun>
 8015f8a:	4604      	mov	r4, r0
 8015f8c:	2800      	cmp	r0, #0
 8015f8e:	d13a      	bne.n	8016006 <__gethex+0xca>
 8015f90:	9901      	ldr	r1, [sp, #4]
 8015f92:	4652      	mov	r2, sl
 8015f94:	4638      	mov	r0, r7
 8015f96:	f7fe f902 	bl	801419e <strncmp>
 8015f9a:	4605      	mov	r5, r0
 8015f9c:	2800      	cmp	r0, #0
 8015f9e:	d168      	bne.n	8016072 <__gethex+0x136>
 8015fa0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015fa4:	eb07 060a 	add.w	r6, r7, sl
 8015fa8:	f7ff ffb2 	bl	8015f10 <__hexdig_fun>
 8015fac:	2800      	cmp	r0, #0
 8015fae:	d062      	beq.n	8016076 <__gethex+0x13a>
 8015fb0:	4633      	mov	r3, r6
 8015fb2:	7818      	ldrb	r0, [r3, #0]
 8015fb4:	2830      	cmp	r0, #48	; 0x30
 8015fb6:	461f      	mov	r7, r3
 8015fb8:	f103 0301 	add.w	r3, r3, #1
 8015fbc:	d0f9      	beq.n	8015fb2 <__gethex+0x76>
 8015fbe:	f7ff ffa7 	bl	8015f10 <__hexdig_fun>
 8015fc2:	2301      	movs	r3, #1
 8015fc4:	fab0 f480 	clz	r4, r0
 8015fc8:	0964      	lsrs	r4, r4, #5
 8015fca:	4635      	mov	r5, r6
 8015fcc:	9300      	str	r3, [sp, #0]
 8015fce:	463a      	mov	r2, r7
 8015fd0:	4616      	mov	r6, r2
 8015fd2:	3201      	adds	r2, #1
 8015fd4:	7830      	ldrb	r0, [r6, #0]
 8015fd6:	f7ff ff9b 	bl	8015f10 <__hexdig_fun>
 8015fda:	2800      	cmp	r0, #0
 8015fdc:	d1f8      	bne.n	8015fd0 <__gethex+0x94>
 8015fde:	9901      	ldr	r1, [sp, #4]
 8015fe0:	4652      	mov	r2, sl
 8015fe2:	4630      	mov	r0, r6
 8015fe4:	f7fe f8db 	bl	801419e <strncmp>
 8015fe8:	b980      	cbnz	r0, 801600c <__gethex+0xd0>
 8015fea:	b94d      	cbnz	r5, 8016000 <__gethex+0xc4>
 8015fec:	eb06 050a 	add.w	r5, r6, sl
 8015ff0:	462a      	mov	r2, r5
 8015ff2:	4616      	mov	r6, r2
 8015ff4:	3201      	adds	r2, #1
 8015ff6:	7830      	ldrb	r0, [r6, #0]
 8015ff8:	f7ff ff8a 	bl	8015f10 <__hexdig_fun>
 8015ffc:	2800      	cmp	r0, #0
 8015ffe:	d1f8      	bne.n	8015ff2 <__gethex+0xb6>
 8016000:	1bad      	subs	r5, r5, r6
 8016002:	00ad      	lsls	r5, r5, #2
 8016004:	e004      	b.n	8016010 <__gethex+0xd4>
 8016006:	2400      	movs	r4, #0
 8016008:	4625      	mov	r5, r4
 801600a:	e7e0      	b.n	8015fce <__gethex+0x92>
 801600c:	2d00      	cmp	r5, #0
 801600e:	d1f7      	bne.n	8016000 <__gethex+0xc4>
 8016010:	7833      	ldrb	r3, [r6, #0]
 8016012:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016016:	2b50      	cmp	r3, #80	; 0x50
 8016018:	d13b      	bne.n	8016092 <__gethex+0x156>
 801601a:	7873      	ldrb	r3, [r6, #1]
 801601c:	2b2b      	cmp	r3, #43	; 0x2b
 801601e:	d02c      	beq.n	801607a <__gethex+0x13e>
 8016020:	2b2d      	cmp	r3, #45	; 0x2d
 8016022:	d02e      	beq.n	8016082 <__gethex+0x146>
 8016024:	1c71      	adds	r1, r6, #1
 8016026:	f04f 0900 	mov.w	r9, #0
 801602a:	7808      	ldrb	r0, [r1, #0]
 801602c:	f7ff ff70 	bl	8015f10 <__hexdig_fun>
 8016030:	1e43      	subs	r3, r0, #1
 8016032:	b2db      	uxtb	r3, r3
 8016034:	2b18      	cmp	r3, #24
 8016036:	d82c      	bhi.n	8016092 <__gethex+0x156>
 8016038:	f1a0 0210 	sub.w	r2, r0, #16
 801603c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016040:	f7ff ff66 	bl	8015f10 <__hexdig_fun>
 8016044:	1e43      	subs	r3, r0, #1
 8016046:	b2db      	uxtb	r3, r3
 8016048:	2b18      	cmp	r3, #24
 801604a:	d91d      	bls.n	8016088 <__gethex+0x14c>
 801604c:	f1b9 0f00 	cmp.w	r9, #0
 8016050:	d000      	beq.n	8016054 <__gethex+0x118>
 8016052:	4252      	negs	r2, r2
 8016054:	4415      	add	r5, r2
 8016056:	f8cb 1000 	str.w	r1, [fp]
 801605a:	b1e4      	cbz	r4, 8016096 <__gethex+0x15a>
 801605c:	9b00      	ldr	r3, [sp, #0]
 801605e:	2b00      	cmp	r3, #0
 8016060:	bf14      	ite	ne
 8016062:	2700      	movne	r7, #0
 8016064:	2706      	moveq	r7, #6
 8016066:	4638      	mov	r0, r7
 8016068:	b009      	add	sp, #36	; 0x24
 801606a:	ecbd 8b02 	vpop	{d8}
 801606e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016072:	463e      	mov	r6, r7
 8016074:	4625      	mov	r5, r4
 8016076:	2401      	movs	r4, #1
 8016078:	e7ca      	b.n	8016010 <__gethex+0xd4>
 801607a:	f04f 0900 	mov.w	r9, #0
 801607e:	1cb1      	adds	r1, r6, #2
 8016080:	e7d3      	b.n	801602a <__gethex+0xee>
 8016082:	f04f 0901 	mov.w	r9, #1
 8016086:	e7fa      	b.n	801607e <__gethex+0x142>
 8016088:	230a      	movs	r3, #10
 801608a:	fb03 0202 	mla	r2, r3, r2, r0
 801608e:	3a10      	subs	r2, #16
 8016090:	e7d4      	b.n	801603c <__gethex+0x100>
 8016092:	4631      	mov	r1, r6
 8016094:	e7df      	b.n	8016056 <__gethex+0x11a>
 8016096:	1bf3      	subs	r3, r6, r7
 8016098:	3b01      	subs	r3, #1
 801609a:	4621      	mov	r1, r4
 801609c:	2b07      	cmp	r3, #7
 801609e:	dc0b      	bgt.n	80160b8 <__gethex+0x17c>
 80160a0:	ee18 0a10 	vmov	r0, s16
 80160a4:	f000 fa8e 	bl	80165c4 <_Balloc>
 80160a8:	4604      	mov	r4, r0
 80160aa:	b940      	cbnz	r0, 80160be <__gethex+0x182>
 80160ac:	4b65      	ldr	r3, [pc, #404]	; (8016244 <__gethex+0x308>)
 80160ae:	4602      	mov	r2, r0
 80160b0:	21de      	movs	r1, #222	; 0xde
 80160b2:	4865      	ldr	r0, [pc, #404]	; (8016248 <__gethex+0x30c>)
 80160b4:	f001 fd34 	bl	8017b20 <__assert_func>
 80160b8:	3101      	adds	r1, #1
 80160ba:	105b      	asrs	r3, r3, #1
 80160bc:	e7ee      	b.n	801609c <__gethex+0x160>
 80160be:	f100 0914 	add.w	r9, r0, #20
 80160c2:	f04f 0b00 	mov.w	fp, #0
 80160c6:	f1ca 0301 	rsb	r3, sl, #1
 80160ca:	f8cd 9008 	str.w	r9, [sp, #8]
 80160ce:	f8cd b000 	str.w	fp, [sp]
 80160d2:	9306      	str	r3, [sp, #24]
 80160d4:	42b7      	cmp	r7, r6
 80160d6:	d340      	bcc.n	801615a <__gethex+0x21e>
 80160d8:	9802      	ldr	r0, [sp, #8]
 80160da:	9b00      	ldr	r3, [sp, #0]
 80160dc:	f840 3b04 	str.w	r3, [r0], #4
 80160e0:	eba0 0009 	sub.w	r0, r0, r9
 80160e4:	1080      	asrs	r0, r0, #2
 80160e6:	0146      	lsls	r6, r0, #5
 80160e8:	6120      	str	r0, [r4, #16]
 80160ea:	4618      	mov	r0, r3
 80160ec:	f000 fb60 	bl	80167b0 <__hi0bits>
 80160f0:	1a30      	subs	r0, r6, r0
 80160f2:	f8d8 6000 	ldr.w	r6, [r8]
 80160f6:	42b0      	cmp	r0, r6
 80160f8:	dd63      	ble.n	80161c2 <__gethex+0x286>
 80160fa:	1b87      	subs	r7, r0, r6
 80160fc:	4639      	mov	r1, r7
 80160fe:	4620      	mov	r0, r4
 8016100:	f000 fefa 	bl	8016ef8 <__any_on>
 8016104:	4682      	mov	sl, r0
 8016106:	b1a8      	cbz	r0, 8016134 <__gethex+0x1f8>
 8016108:	1e7b      	subs	r3, r7, #1
 801610a:	1159      	asrs	r1, r3, #5
 801610c:	f003 021f 	and.w	r2, r3, #31
 8016110:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016114:	f04f 0a01 	mov.w	sl, #1
 8016118:	fa0a f202 	lsl.w	r2, sl, r2
 801611c:	420a      	tst	r2, r1
 801611e:	d009      	beq.n	8016134 <__gethex+0x1f8>
 8016120:	4553      	cmp	r3, sl
 8016122:	dd05      	ble.n	8016130 <__gethex+0x1f4>
 8016124:	1eb9      	subs	r1, r7, #2
 8016126:	4620      	mov	r0, r4
 8016128:	f000 fee6 	bl	8016ef8 <__any_on>
 801612c:	2800      	cmp	r0, #0
 801612e:	d145      	bne.n	80161bc <__gethex+0x280>
 8016130:	f04f 0a02 	mov.w	sl, #2
 8016134:	4639      	mov	r1, r7
 8016136:	4620      	mov	r0, r4
 8016138:	f7ff fe98 	bl	8015e6c <rshift>
 801613c:	443d      	add	r5, r7
 801613e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016142:	42ab      	cmp	r3, r5
 8016144:	da4c      	bge.n	80161e0 <__gethex+0x2a4>
 8016146:	ee18 0a10 	vmov	r0, s16
 801614a:	4621      	mov	r1, r4
 801614c:	f000 fa7a 	bl	8016644 <_Bfree>
 8016150:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016152:	2300      	movs	r3, #0
 8016154:	6013      	str	r3, [r2, #0]
 8016156:	27a3      	movs	r7, #163	; 0xa3
 8016158:	e785      	b.n	8016066 <__gethex+0x12a>
 801615a:	1e73      	subs	r3, r6, #1
 801615c:	9a05      	ldr	r2, [sp, #20]
 801615e:	9303      	str	r3, [sp, #12]
 8016160:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016164:	4293      	cmp	r3, r2
 8016166:	d019      	beq.n	801619c <__gethex+0x260>
 8016168:	f1bb 0f20 	cmp.w	fp, #32
 801616c:	d107      	bne.n	801617e <__gethex+0x242>
 801616e:	9b02      	ldr	r3, [sp, #8]
 8016170:	9a00      	ldr	r2, [sp, #0]
 8016172:	f843 2b04 	str.w	r2, [r3], #4
 8016176:	9302      	str	r3, [sp, #8]
 8016178:	2300      	movs	r3, #0
 801617a:	9300      	str	r3, [sp, #0]
 801617c:	469b      	mov	fp, r3
 801617e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016182:	f7ff fec5 	bl	8015f10 <__hexdig_fun>
 8016186:	9b00      	ldr	r3, [sp, #0]
 8016188:	f000 000f 	and.w	r0, r0, #15
 801618c:	fa00 f00b 	lsl.w	r0, r0, fp
 8016190:	4303      	orrs	r3, r0
 8016192:	9300      	str	r3, [sp, #0]
 8016194:	f10b 0b04 	add.w	fp, fp, #4
 8016198:	9b03      	ldr	r3, [sp, #12]
 801619a:	e00d      	b.n	80161b8 <__gethex+0x27c>
 801619c:	9b03      	ldr	r3, [sp, #12]
 801619e:	9a06      	ldr	r2, [sp, #24]
 80161a0:	4413      	add	r3, r2
 80161a2:	42bb      	cmp	r3, r7
 80161a4:	d3e0      	bcc.n	8016168 <__gethex+0x22c>
 80161a6:	4618      	mov	r0, r3
 80161a8:	9901      	ldr	r1, [sp, #4]
 80161aa:	9307      	str	r3, [sp, #28]
 80161ac:	4652      	mov	r2, sl
 80161ae:	f7fd fff6 	bl	801419e <strncmp>
 80161b2:	9b07      	ldr	r3, [sp, #28]
 80161b4:	2800      	cmp	r0, #0
 80161b6:	d1d7      	bne.n	8016168 <__gethex+0x22c>
 80161b8:	461e      	mov	r6, r3
 80161ba:	e78b      	b.n	80160d4 <__gethex+0x198>
 80161bc:	f04f 0a03 	mov.w	sl, #3
 80161c0:	e7b8      	b.n	8016134 <__gethex+0x1f8>
 80161c2:	da0a      	bge.n	80161da <__gethex+0x29e>
 80161c4:	1a37      	subs	r7, r6, r0
 80161c6:	4621      	mov	r1, r4
 80161c8:	ee18 0a10 	vmov	r0, s16
 80161cc:	463a      	mov	r2, r7
 80161ce:	f000 fc55 	bl	8016a7c <__lshift>
 80161d2:	1bed      	subs	r5, r5, r7
 80161d4:	4604      	mov	r4, r0
 80161d6:	f100 0914 	add.w	r9, r0, #20
 80161da:	f04f 0a00 	mov.w	sl, #0
 80161de:	e7ae      	b.n	801613e <__gethex+0x202>
 80161e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80161e4:	42a8      	cmp	r0, r5
 80161e6:	dd72      	ble.n	80162ce <__gethex+0x392>
 80161e8:	1b45      	subs	r5, r0, r5
 80161ea:	42ae      	cmp	r6, r5
 80161ec:	dc36      	bgt.n	801625c <__gethex+0x320>
 80161ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80161f2:	2b02      	cmp	r3, #2
 80161f4:	d02a      	beq.n	801624c <__gethex+0x310>
 80161f6:	2b03      	cmp	r3, #3
 80161f8:	d02c      	beq.n	8016254 <__gethex+0x318>
 80161fa:	2b01      	cmp	r3, #1
 80161fc:	d115      	bne.n	801622a <__gethex+0x2ee>
 80161fe:	42ae      	cmp	r6, r5
 8016200:	d113      	bne.n	801622a <__gethex+0x2ee>
 8016202:	2e01      	cmp	r6, #1
 8016204:	d10b      	bne.n	801621e <__gethex+0x2e2>
 8016206:	9a04      	ldr	r2, [sp, #16]
 8016208:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801620c:	6013      	str	r3, [r2, #0]
 801620e:	2301      	movs	r3, #1
 8016210:	6123      	str	r3, [r4, #16]
 8016212:	f8c9 3000 	str.w	r3, [r9]
 8016216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016218:	2762      	movs	r7, #98	; 0x62
 801621a:	601c      	str	r4, [r3, #0]
 801621c:	e723      	b.n	8016066 <__gethex+0x12a>
 801621e:	1e71      	subs	r1, r6, #1
 8016220:	4620      	mov	r0, r4
 8016222:	f000 fe69 	bl	8016ef8 <__any_on>
 8016226:	2800      	cmp	r0, #0
 8016228:	d1ed      	bne.n	8016206 <__gethex+0x2ca>
 801622a:	ee18 0a10 	vmov	r0, s16
 801622e:	4621      	mov	r1, r4
 8016230:	f000 fa08 	bl	8016644 <_Bfree>
 8016234:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016236:	2300      	movs	r3, #0
 8016238:	6013      	str	r3, [r2, #0]
 801623a:	2750      	movs	r7, #80	; 0x50
 801623c:	e713      	b.n	8016066 <__gethex+0x12a>
 801623e:	bf00      	nop
 8016240:	08018938 	.word	0x08018938
 8016244:	080188bb 	.word	0x080188bb
 8016248:	080188cc 	.word	0x080188cc
 801624c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801624e:	2b00      	cmp	r3, #0
 8016250:	d1eb      	bne.n	801622a <__gethex+0x2ee>
 8016252:	e7d8      	b.n	8016206 <__gethex+0x2ca>
 8016254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016256:	2b00      	cmp	r3, #0
 8016258:	d1d5      	bne.n	8016206 <__gethex+0x2ca>
 801625a:	e7e6      	b.n	801622a <__gethex+0x2ee>
 801625c:	1e6f      	subs	r7, r5, #1
 801625e:	f1ba 0f00 	cmp.w	sl, #0
 8016262:	d131      	bne.n	80162c8 <__gethex+0x38c>
 8016264:	b127      	cbz	r7, 8016270 <__gethex+0x334>
 8016266:	4639      	mov	r1, r7
 8016268:	4620      	mov	r0, r4
 801626a:	f000 fe45 	bl	8016ef8 <__any_on>
 801626e:	4682      	mov	sl, r0
 8016270:	117b      	asrs	r3, r7, #5
 8016272:	2101      	movs	r1, #1
 8016274:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016278:	f007 071f 	and.w	r7, r7, #31
 801627c:	fa01 f707 	lsl.w	r7, r1, r7
 8016280:	421f      	tst	r7, r3
 8016282:	4629      	mov	r1, r5
 8016284:	4620      	mov	r0, r4
 8016286:	bf18      	it	ne
 8016288:	f04a 0a02 	orrne.w	sl, sl, #2
 801628c:	1b76      	subs	r6, r6, r5
 801628e:	f7ff fded 	bl	8015e6c <rshift>
 8016292:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016296:	2702      	movs	r7, #2
 8016298:	f1ba 0f00 	cmp.w	sl, #0
 801629c:	d048      	beq.n	8016330 <__gethex+0x3f4>
 801629e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80162a2:	2b02      	cmp	r3, #2
 80162a4:	d015      	beq.n	80162d2 <__gethex+0x396>
 80162a6:	2b03      	cmp	r3, #3
 80162a8:	d017      	beq.n	80162da <__gethex+0x39e>
 80162aa:	2b01      	cmp	r3, #1
 80162ac:	d109      	bne.n	80162c2 <__gethex+0x386>
 80162ae:	f01a 0f02 	tst.w	sl, #2
 80162b2:	d006      	beq.n	80162c2 <__gethex+0x386>
 80162b4:	f8d9 0000 	ldr.w	r0, [r9]
 80162b8:	ea4a 0a00 	orr.w	sl, sl, r0
 80162bc:	f01a 0f01 	tst.w	sl, #1
 80162c0:	d10e      	bne.n	80162e0 <__gethex+0x3a4>
 80162c2:	f047 0710 	orr.w	r7, r7, #16
 80162c6:	e033      	b.n	8016330 <__gethex+0x3f4>
 80162c8:	f04f 0a01 	mov.w	sl, #1
 80162cc:	e7d0      	b.n	8016270 <__gethex+0x334>
 80162ce:	2701      	movs	r7, #1
 80162d0:	e7e2      	b.n	8016298 <__gethex+0x35c>
 80162d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80162d4:	f1c3 0301 	rsb	r3, r3, #1
 80162d8:	9315      	str	r3, [sp, #84]	; 0x54
 80162da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d0f0      	beq.n	80162c2 <__gethex+0x386>
 80162e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80162e4:	f104 0314 	add.w	r3, r4, #20
 80162e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80162ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80162f0:	f04f 0c00 	mov.w	ip, #0
 80162f4:	4618      	mov	r0, r3
 80162f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80162fa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80162fe:	d01c      	beq.n	801633a <__gethex+0x3fe>
 8016300:	3201      	adds	r2, #1
 8016302:	6002      	str	r2, [r0, #0]
 8016304:	2f02      	cmp	r7, #2
 8016306:	f104 0314 	add.w	r3, r4, #20
 801630a:	d13f      	bne.n	801638c <__gethex+0x450>
 801630c:	f8d8 2000 	ldr.w	r2, [r8]
 8016310:	3a01      	subs	r2, #1
 8016312:	42b2      	cmp	r2, r6
 8016314:	d10a      	bne.n	801632c <__gethex+0x3f0>
 8016316:	1171      	asrs	r1, r6, #5
 8016318:	2201      	movs	r2, #1
 801631a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801631e:	f006 061f 	and.w	r6, r6, #31
 8016322:	fa02 f606 	lsl.w	r6, r2, r6
 8016326:	421e      	tst	r6, r3
 8016328:	bf18      	it	ne
 801632a:	4617      	movne	r7, r2
 801632c:	f047 0720 	orr.w	r7, r7, #32
 8016330:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016332:	601c      	str	r4, [r3, #0]
 8016334:	9b04      	ldr	r3, [sp, #16]
 8016336:	601d      	str	r5, [r3, #0]
 8016338:	e695      	b.n	8016066 <__gethex+0x12a>
 801633a:	4299      	cmp	r1, r3
 801633c:	f843 cc04 	str.w	ip, [r3, #-4]
 8016340:	d8d8      	bhi.n	80162f4 <__gethex+0x3b8>
 8016342:	68a3      	ldr	r3, [r4, #8]
 8016344:	459b      	cmp	fp, r3
 8016346:	db19      	blt.n	801637c <__gethex+0x440>
 8016348:	6861      	ldr	r1, [r4, #4]
 801634a:	ee18 0a10 	vmov	r0, s16
 801634e:	3101      	adds	r1, #1
 8016350:	f000 f938 	bl	80165c4 <_Balloc>
 8016354:	4681      	mov	r9, r0
 8016356:	b918      	cbnz	r0, 8016360 <__gethex+0x424>
 8016358:	4b1a      	ldr	r3, [pc, #104]	; (80163c4 <__gethex+0x488>)
 801635a:	4602      	mov	r2, r0
 801635c:	2184      	movs	r1, #132	; 0x84
 801635e:	e6a8      	b.n	80160b2 <__gethex+0x176>
 8016360:	6922      	ldr	r2, [r4, #16]
 8016362:	3202      	adds	r2, #2
 8016364:	f104 010c 	add.w	r1, r4, #12
 8016368:	0092      	lsls	r2, r2, #2
 801636a:	300c      	adds	r0, #12
 801636c:	f7fc ff13 	bl	8013196 <memcpy>
 8016370:	4621      	mov	r1, r4
 8016372:	ee18 0a10 	vmov	r0, s16
 8016376:	f000 f965 	bl	8016644 <_Bfree>
 801637a:	464c      	mov	r4, r9
 801637c:	6923      	ldr	r3, [r4, #16]
 801637e:	1c5a      	adds	r2, r3, #1
 8016380:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016384:	6122      	str	r2, [r4, #16]
 8016386:	2201      	movs	r2, #1
 8016388:	615a      	str	r2, [r3, #20]
 801638a:	e7bb      	b.n	8016304 <__gethex+0x3c8>
 801638c:	6922      	ldr	r2, [r4, #16]
 801638e:	455a      	cmp	r2, fp
 8016390:	dd0b      	ble.n	80163aa <__gethex+0x46e>
 8016392:	2101      	movs	r1, #1
 8016394:	4620      	mov	r0, r4
 8016396:	f7ff fd69 	bl	8015e6c <rshift>
 801639a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801639e:	3501      	adds	r5, #1
 80163a0:	42ab      	cmp	r3, r5
 80163a2:	f6ff aed0 	blt.w	8016146 <__gethex+0x20a>
 80163a6:	2701      	movs	r7, #1
 80163a8:	e7c0      	b.n	801632c <__gethex+0x3f0>
 80163aa:	f016 061f 	ands.w	r6, r6, #31
 80163ae:	d0fa      	beq.n	80163a6 <__gethex+0x46a>
 80163b0:	449a      	add	sl, r3
 80163b2:	f1c6 0620 	rsb	r6, r6, #32
 80163b6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80163ba:	f000 f9f9 	bl	80167b0 <__hi0bits>
 80163be:	42b0      	cmp	r0, r6
 80163c0:	dbe7      	blt.n	8016392 <__gethex+0x456>
 80163c2:	e7f0      	b.n	80163a6 <__gethex+0x46a>
 80163c4:	080188bb 	.word	0x080188bb

080163c8 <L_shift>:
 80163c8:	f1c2 0208 	rsb	r2, r2, #8
 80163cc:	0092      	lsls	r2, r2, #2
 80163ce:	b570      	push	{r4, r5, r6, lr}
 80163d0:	f1c2 0620 	rsb	r6, r2, #32
 80163d4:	6843      	ldr	r3, [r0, #4]
 80163d6:	6804      	ldr	r4, [r0, #0]
 80163d8:	fa03 f506 	lsl.w	r5, r3, r6
 80163dc:	432c      	orrs	r4, r5
 80163de:	40d3      	lsrs	r3, r2
 80163e0:	6004      	str	r4, [r0, #0]
 80163e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80163e6:	4288      	cmp	r0, r1
 80163e8:	d3f4      	bcc.n	80163d4 <L_shift+0xc>
 80163ea:	bd70      	pop	{r4, r5, r6, pc}

080163ec <__match>:
 80163ec:	b530      	push	{r4, r5, lr}
 80163ee:	6803      	ldr	r3, [r0, #0]
 80163f0:	3301      	adds	r3, #1
 80163f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80163f6:	b914      	cbnz	r4, 80163fe <__match+0x12>
 80163f8:	6003      	str	r3, [r0, #0]
 80163fa:	2001      	movs	r0, #1
 80163fc:	bd30      	pop	{r4, r5, pc}
 80163fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016402:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016406:	2d19      	cmp	r5, #25
 8016408:	bf98      	it	ls
 801640a:	3220      	addls	r2, #32
 801640c:	42a2      	cmp	r2, r4
 801640e:	d0f0      	beq.n	80163f2 <__match+0x6>
 8016410:	2000      	movs	r0, #0
 8016412:	e7f3      	b.n	80163fc <__match+0x10>

08016414 <__hexnan>:
 8016414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016418:	680b      	ldr	r3, [r1, #0]
 801641a:	6801      	ldr	r1, [r0, #0]
 801641c:	115e      	asrs	r6, r3, #5
 801641e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016422:	f013 031f 	ands.w	r3, r3, #31
 8016426:	b087      	sub	sp, #28
 8016428:	bf18      	it	ne
 801642a:	3604      	addne	r6, #4
 801642c:	2500      	movs	r5, #0
 801642e:	1f37      	subs	r7, r6, #4
 8016430:	4682      	mov	sl, r0
 8016432:	4690      	mov	r8, r2
 8016434:	9301      	str	r3, [sp, #4]
 8016436:	f846 5c04 	str.w	r5, [r6, #-4]
 801643a:	46b9      	mov	r9, r7
 801643c:	463c      	mov	r4, r7
 801643e:	9502      	str	r5, [sp, #8]
 8016440:	46ab      	mov	fp, r5
 8016442:	784a      	ldrb	r2, [r1, #1]
 8016444:	1c4b      	adds	r3, r1, #1
 8016446:	9303      	str	r3, [sp, #12]
 8016448:	b342      	cbz	r2, 801649c <__hexnan+0x88>
 801644a:	4610      	mov	r0, r2
 801644c:	9105      	str	r1, [sp, #20]
 801644e:	9204      	str	r2, [sp, #16]
 8016450:	f7ff fd5e 	bl	8015f10 <__hexdig_fun>
 8016454:	2800      	cmp	r0, #0
 8016456:	d14f      	bne.n	80164f8 <__hexnan+0xe4>
 8016458:	9a04      	ldr	r2, [sp, #16]
 801645a:	9905      	ldr	r1, [sp, #20]
 801645c:	2a20      	cmp	r2, #32
 801645e:	d818      	bhi.n	8016492 <__hexnan+0x7e>
 8016460:	9b02      	ldr	r3, [sp, #8]
 8016462:	459b      	cmp	fp, r3
 8016464:	dd13      	ble.n	801648e <__hexnan+0x7a>
 8016466:	454c      	cmp	r4, r9
 8016468:	d206      	bcs.n	8016478 <__hexnan+0x64>
 801646a:	2d07      	cmp	r5, #7
 801646c:	dc04      	bgt.n	8016478 <__hexnan+0x64>
 801646e:	462a      	mov	r2, r5
 8016470:	4649      	mov	r1, r9
 8016472:	4620      	mov	r0, r4
 8016474:	f7ff ffa8 	bl	80163c8 <L_shift>
 8016478:	4544      	cmp	r4, r8
 801647a:	d950      	bls.n	801651e <__hexnan+0x10a>
 801647c:	2300      	movs	r3, #0
 801647e:	f1a4 0904 	sub.w	r9, r4, #4
 8016482:	f844 3c04 	str.w	r3, [r4, #-4]
 8016486:	f8cd b008 	str.w	fp, [sp, #8]
 801648a:	464c      	mov	r4, r9
 801648c:	461d      	mov	r5, r3
 801648e:	9903      	ldr	r1, [sp, #12]
 8016490:	e7d7      	b.n	8016442 <__hexnan+0x2e>
 8016492:	2a29      	cmp	r2, #41	; 0x29
 8016494:	d156      	bne.n	8016544 <__hexnan+0x130>
 8016496:	3102      	adds	r1, #2
 8016498:	f8ca 1000 	str.w	r1, [sl]
 801649c:	f1bb 0f00 	cmp.w	fp, #0
 80164a0:	d050      	beq.n	8016544 <__hexnan+0x130>
 80164a2:	454c      	cmp	r4, r9
 80164a4:	d206      	bcs.n	80164b4 <__hexnan+0xa0>
 80164a6:	2d07      	cmp	r5, #7
 80164a8:	dc04      	bgt.n	80164b4 <__hexnan+0xa0>
 80164aa:	462a      	mov	r2, r5
 80164ac:	4649      	mov	r1, r9
 80164ae:	4620      	mov	r0, r4
 80164b0:	f7ff ff8a 	bl	80163c8 <L_shift>
 80164b4:	4544      	cmp	r4, r8
 80164b6:	d934      	bls.n	8016522 <__hexnan+0x10e>
 80164b8:	f1a8 0204 	sub.w	r2, r8, #4
 80164bc:	4623      	mov	r3, r4
 80164be:	f853 1b04 	ldr.w	r1, [r3], #4
 80164c2:	f842 1f04 	str.w	r1, [r2, #4]!
 80164c6:	429f      	cmp	r7, r3
 80164c8:	d2f9      	bcs.n	80164be <__hexnan+0xaa>
 80164ca:	1b3b      	subs	r3, r7, r4
 80164cc:	f023 0303 	bic.w	r3, r3, #3
 80164d0:	3304      	adds	r3, #4
 80164d2:	3401      	adds	r4, #1
 80164d4:	3e03      	subs	r6, #3
 80164d6:	42b4      	cmp	r4, r6
 80164d8:	bf88      	it	hi
 80164da:	2304      	movhi	r3, #4
 80164dc:	4443      	add	r3, r8
 80164de:	2200      	movs	r2, #0
 80164e0:	f843 2b04 	str.w	r2, [r3], #4
 80164e4:	429f      	cmp	r7, r3
 80164e6:	d2fb      	bcs.n	80164e0 <__hexnan+0xcc>
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	b91b      	cbnz	r3, 80164f4 <__hexnan+0xe0>
 80164ec:	4547      	cmp	r7, r8
 80164ee:	d127      	bne.n	8016540 <__hexnan+0x12c>
 80164f0:	2301      	movs	r3, #1
 80164f2:	603b      	str	r3, [r7, #0]
 80164f4:	2005      	movs	r0, #5
 80164f6:	e026      	b.n	8016546 <__hexnan+0x132>
 80164f8:	3501      	adds	r5, #1
 80164fa:	2d08      	cmp	r5, #8
 80164fc:	f10b 0b01 	add.w	fp, fp, #1
 8016500:	dd06      	ble.n	8016510 <__hexnan+0xfc>
 8016502:	4544      	cmp	r4, r8
 8016504:	d9c3      	bls.n	801648e <__hexnan+0x7a>
 8016506:	2300      	movs	r3, #0
 8016508:	f844 3c04 	str.w	r3, [r4, #-4]
 801650c:	2501      	movs	r5, #1
 801650e:	3c04      	subs	r4, #4
 8016510:	6822      	ldr	r2, [r4, #0]
 8016512:	f000 000f 	and.w	r0, r0, #15
 8016516:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801651a:	6022      	str	r2, [r4, #0]
 801651c:	e7b7      	b.n	801648e <__hexnan+0x7a>
 801651e:	2508      	movs	r5, #8
 8016520:	e7b5      	b.n	801648e <__hexnan+0x7a>
 8016522:	9b01      	ldr	r3, [sp, #4]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d0df      	beq.n	80164e8 <__hexnan+0xd4>
 8016528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801652c:	f1c3 0320 	rsb	r3, r3, #32
 8016530:	fa22 f303 	lsr.w	r3, r2, r3
 8016534:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016538:	401a      	ands	r2, r3
 801653a:	f846 2c04 	str.w	r2, [r6, #-4]
 801653e:	e7d3      	b.n	80164e8 <__hexnan+0xd4>
 8016540:	3f04      	subs	r7, #4
 8016542:	e7d1      	b.n	80164e8 <__hexnan+0xd4>
 8016544:	2004      	movs	r0, #4
 8016546:	b007      	add	sp, #28
 8016548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801654c <_localeconv_r>:
 801654c:	4800      	ldr	r0, [pc, #0]	; (8016550 <_localeconv_r+0x4>)
 801654e:	4770      	bx	lr
 8016550:	200002f4 	.word	0x200002f4

08016554 <_lseek_r>:
 8016554:	b538      	push	{r3, r4, r5, lr}
 8016556:	4d07      	ldr	r5, [pc, #28]	; (8016574 <_lseek_r+0x20>)
 8016558:	4604      	mov	r4, r0
 801655a:	4608      	mov	r0, r1
 801655c:	4611      	mov	r1, r2
 801655e:	2200      	movs	r2, #0
 8016560:	602a      	str	r2, [r5, #0]
 8016562:	461a      	mov	r2, r3
 8016564:	f7ed f990 	bl	8003888 <_lseek>
 8016568:	1c43      	adds	r3, r0, #1
 801656a:	d102      	bne.n	8016572 <_lseek_r+0x1e>
 801656c:	682b      	ldr	r3, [r5, #0]
 801656e:	b103      	cbz	r3, 8016572 <_lseek_r+0x1e>
 8016570:	6023      	str	r3, [r4, #0]
 8016572:	bd38      	pop	{r3, r4, r5, pc}
 8016574:	2000cb2c 	.word	0x2000cb2c

08016578 <malloc>:
 8016578:	4b02      	ldr	r3, [pc, #8]	; (8016584 <malloc+0xc>)
 801657a:	4601      	mov	r1, r0
 801657c:	6818      	ldr	r0, [r3, #0]
 801657e:	f7fc be21 	b.w	80131c4 <_malloc_r>
 8016582:	bf00      	nop
 8016584:	2000019c 	.word	0x2000019c

08016588 <__ascii_mbtowc>:
 8016588:	b082      	sub	sp, #8
 801658a:	b901      	cbnz	r1, 801658e <__ascii_mbtowc+0x6>
 801658c:	a901      	add	r1, sp, #4
 801658e:	b142      	cbz	r2, 80165a2 <__ascii_mbtowc+0x1a>
 8016590:	b14b      	cbz	r3, 80165a6 <__ascii_mbtowc+0x1e>
 8016592:	7813      	ldrb	r3, [r2, #0]
 8016594:	600b      	str	r3, [r1, #0]
 8016596:	7812      	ldrb	r2, [r2, #0]
 8016598:	1e10      	subs	r0, r2, #0
 801659a:	bf18      	it	ne
 801659c:	2001      	movne	r0, #1
 801659e:	b002      	add	sp, #8
 80165a0:	4770      	bx	lr
 80165a2:	4610      	mov	r0, r2
 80165a4:	e7fb      	b.n	801659e <__ascii_mbtowc+0x16>
 80165a6:	f06f 0001 	mvn.w	r0, #1
 80165aa:	e7f8      	b.n	801659e <__ascii_mbtowc+0x16>

080165ac <__malloc_lock>:
 80165ac:	4801      	ldr	r0, [pc, #4]	; (80165b4 <__malloc_lock+0x8>)
 80165ae:	f7fc bdf0 	b.w	8013192 <__retarget_lock_acquire_recursive>
 80165b2:	bf00      	nop
 80165b4:	2000cb24 	.word	0x2000cb24

080165b8 <__malloc_unlock>:
 80165b8:	4801      	ldr	r0, [pc, #4]	; (80165c0 <__malloc_unlock+0x8>)
 80165ba:	f7fc bdeb 	b.w	8013194 <__retarget_lock_release_recursive>
 80165be:	bf00      	nop
 80165c0:	2000cb24 	.word	0x2000cb24

080165c4 <_Balloc>:
 80165c4:	b570      	push	{r4, r5, r6, lr}
 80165c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80165c8:	4604      	mov	r4, r0
 80165ca:	460d      	mov	r5, r1
 80165cc:	b976      	cbnz	r6, 80165ec <_Balloc+0x28>
 80165ce:	2010      	movs	r0, #16
 80165d0:	f7ff ffd2 	bl	8016578 <malloc>
 80165d4:	4602      	mov	r2, r0
 80165d6:	6260      	str	r0, [r4, #36]	; 0x24
 80165d8:	b920      	cbnz	r0, 80165e4 <_Balloc+0x20>
 80165da:	4b18      	ldr	r3, [pc, #96]	; (801663c <_Balloc+0x78>)
 80165dc:	4818      	ldr	r0, [pc, #96]	; (8016640 <_Balloc+0x7c>)
 80165de:	2166      	movs	r1, #102	; 0x66
 80165e0:	f001 fa9e 	bl	8017b20 <__assert_func>
 80165e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80165e8:	6006      	str	r6, [r0, #0]
 80165ea:	60c6      	str	r6, [r0, #12]
 80165ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80165ee:	68f3      	ldr	r3, [r6, #12]
 80165f0:	b183      	cbz	r3, 8016614 <_Balloc+0x50>
 80165f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80165f4:	68db      	ldr	r3, [r3, #12]
 80165f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80165fa:	b9b8      	cbnz	r0, 801662c <_Balloc+0x68>
 80165fc:	2101      	movs	r1, #1
 80165fe:	fa01 f605 	lsl.w	r6, r1, r5
 8016602:	1d72      	adds	r2, r6, #5
 8016604:	0092      	lsls	r2, r2, #2
 8016606:	4620      	mov	r0, r4
 8016608:	f000 fc97 	bl	8016f3a <_calloc_r>
 801660c:	b160      	cbz	r0, 8016628 <_Balloc+0x64>
 801660e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016612:	e00e      	b.n	8016632 <_Balloc+0x6e>
 8016614:	2221      	movs	r2, #33	; 0x21
 8016616:	2104      	movs	r1, #4
 8016618:	4620      	mov	r0, r4
 801661a:	f000 fc8e 	bl	8016f3a <_calloc_r>
 801661e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016620:	60f0      	str	r0, [r6, #12]
 8016622:	68db      	ldr	r3, [r3, #12]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d1e4      	bne.n	80165f2 <_Balloc+0x2e>
 8016628:	2000      	movs	r0, #0
 801662a:	bd70      	pop	{r4, r5, r6, pc}
 801662c:	6802      	ldr	r2, [r0, #0]
 801662e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016632:	2300      	movs	r3, #0
 8016634:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016638:	e7f7      	b.n	801662a <_Balloc+0x66>
 801663a:	bf00      	nop
 801663c:	08018845 	.word	0x08018845
 8016640:	0801894c 	.word	0x0801894c

08016644 <_Bfree>:
 8016644:	b570      	push	{r4, r5, r6, lr}
 8016646:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016648:	4605      	mov	r5, r0
 801664a:	460c      	mov	r4, r1
 801664c:	b976      	cbnz	r6, 801666c <_Bfree+0x28>
 801664e:	2010      	movs	r0, #16
 8016650:	f7ff ff92 	bl	8016578 <malloc>
 8016654:	4602      	mov	r2, r0
 8016656:	6268      	str	r0, [r5, #36]	; 0x24
 8016658:	b920      	cbnz	r0, 8016664 <_Bfree+0x20>
 801665a:	4b09      	ldr	r3, [pc, #36]	; (8016680 <_Bfree+0x3c>)
 801665c:	4809      	ldr	r0, [pc, #36]	; (8016684 <_Bfree+0x40>)
 801665e:	218a      	movs	r1, #138	; 0x8a
 8016660:	f001 fa5e 	bl	8017b20 <__assert_func>
 8016664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016668:	6006      	str	r6, [r0, #0]
 801666a:	60c6      	str	r6, [r0, #12]
 801666c:	b13c      	cbz	r4, 801667e <_Bfree+0x3a>
 801666e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016670:	6862      	ldr	r2, [r4, #4]
 8016672:	68db      	ldr	r3, [r3, #12]
 8016674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016678:	6021      	str	r1, [r4, #0]
 801667a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801667e:	bd70      	pop	{r4, r5, r6, pc}
 8016680:	08018845 	.word	0x08018845
 8016684:	0801894c 	.word	0x0801894c

08016688 <__multadd>:
 8016688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801668c:	690e      	ldr	r6, [r1, #16]
 801668e:	4607      	mov	r7, r0
 8016690:	4698      	mov	r8, r3
 8016692:	460c      	mov	r4, r1
 8016694:	f101 0014 	add.w	r0, r1, #20
 8016698:	2300      	movs	r3, #0
 801669a:	6805      	ldr	r5, [r0, #0]
 801669c:	b2a9      	uxth	r1, r5
 801669e:	fb02 8101 	mla	r1, r2, r1, r8
 80166a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80166a6:	0c2d      	lsrs	r5, r5, #16
 80166a8:	fb02 c505 	mla	r5, r2, r5, ip
 80166ac:	b289      	uxth	r1, r1
 80166ae:	3301      	adds	r3, #1
 80166b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80166b4:	429e      	cmp	r6, r3
 80166b6:	f840 1b04 	str.w	r1, [r0], #4
 80166ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80166be:	dcec      	bgt.n	801669a <__multadd+0x12>
 80166c0:	f1b8 0f00 	cmp.w	r8, #0
 80166c4:	d022      	beq.n	801670c <__multadd+0x84>
 80166c6:	68a3      	ldr	r3, [r4, #8]
 80166c8:	42b3      	cmp	r3, r6
 80166ca:	dc19      	bgt.n	8016700 <__multadd+0x78>
 80166cc:	6861      	ldr	r1, [r4, #4]
 80166ce:	4638      	mov	r0, r7
 80166d0:	3101      	adds	r1, #1
 80166d2:	f7ff ff77 	bl	80165c4 <_Balloc>
 80166d6:	4605      	mov	r5, r0
 80166d8:	b928      	cbnz	r0, 80166e6 <__multadd+0x5e>
 80166da:	4602      	mov	r2, r0
 80166dc:	4b0d      	ldr	r3, [pc, #52]	; (8016714 <__multadd+0x8c>)
 80166de:	480e      	ldr	r0, [pc, #56]	; (8016718 <__multadd+0x90>)
 80166e0:	21b5      	movs	r1, #181	; 0xb5
 80166e2:	f001 fa1d 	bl	8017b20 <__assert_func>
 80166e6:	6922      	ldr	r2, [r4, #16]
 80166e8:	3202      	adds	r2, #2
 80166ea:	f104 010c 	add.w	r1, r4, #12
 80166ee:	0092      	lsls	r2, r2, #2
 80166f0:	300c      	adds	r0, #12
 80166f2:	f7fc fd50 	bl	8013196 <memcpy>
 80166f6:	4621      	mov	r1, r4
 80166f8:	4638      	mov	r0, r7
 80166fa:	f7ff ffa3 	bl	8016644 <_Bfree>
 80166fe:	462c      	mov	r4, r5
 8016700:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8016704:	3601      	adds	r6, #1
 8016706:	f8c3 8014 	str.w	r8, [r3, #20]
 801670a:	6126      	str	r6, [r4, #16]
 801670c:	4620      	mov	r0, r4
 801670e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016712:	bf00      	nop
 8016714:	080188bb 	.word	0x080188bb
 8016718:	0801894c 	.word	0x0801894c

0801671c <__s2b>:
 801671c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016720:	460c      	mov	r4, r1
 8016722:	4615      	mov	r5, r2
 8016724:	461f      	mov	r7, r3
 8016726:	2209      	movs	r2, #9
 8016728:	3308      	adds	r3, #8
 801672a:	4606      	mov	r6, r0
 801672c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016730:	2100      	movs	r1, #0
 8016732:	2201      	movs	r2, #1
 8016734:	429a      	cmp	r2, r3
 8016736:	db09      	blt.n	801674c <__s2b+0x30>
 8016738:	4630      	mov	r0, r6
 801673a:	f7ff ff43 	bl	80165c4 <_Balloc>
 801673e:	b940      	cbnz	r0, 8016752 <__s2b+0x36>
 8016740:	4602      	mov	r2, r0
 8016742:	4b19      	ldr	r3, [pc, #100]	; (80167a8 <__s2b+0x8c>)
 8016744:	4819      	ldr	r0, [pc, #100]	; (80167ac <__s2b+0x90>)
 8016746:	21ce      	movs	r1, #206	; 0xce
 8016748:	f001 f9ea 	bl	8017b20 <__assert_func>
 801674c:	0052      	lsls	r2, r2, #1
 801674e:	3101      	adds	r1, #1
 8016750:	e7f0      	b.n	8016734 <__s2b+0x18>
 8016752:	9b08      	ldr	r3, [sp, #32]
 8016754:	6143      	str	r3, [r0, #20]
 8016756:	2d09      	cmp	r5, #9
 8016758:	f04f 0301 	mov.w	r3, #1
 801675c:	6103      	str	r3, [r0, #16]
 801675e:	dd16      	ble.n	801678e <__s2b+0x72>
 8016760:	f104 0909 	add.w	r9, r4, #9
 8016764:	46c8      	mov	r8, r9
 8016766:	442c      	add	r4, r5
 8016768:	f818 3b01 	ldrb.w	r3, [r8], #1
 801676c:	4601      	mov	r1, r0
 801676e:	3b30      	subs	r3, #48	; 0x30
 8016770:	220a      	movs	r2, #10
 8016772:	4630      	mov	r0, r6
 8016774:	f7ff ff88 	bl	8016688 <__multadd>
 8016778:	45a0      	cmp	r8, r4
 801677a:	d1f5      	bne.n	8016768 <__s2b+0x4c>
 801677c:	f1a5 0408 	sub.w	r4, r5, #8
 8016780:	444c      	add	r4, r9
 8016782:	1b2d      	subs	r5, r5, r4
 8016784:	1963      	adds	r3, r4, r5
 8016786:	42bb      	cmp	r3, r7
 8016788:	db04      	blt.n	8016794 <__s2b+0x78>
 801678a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801678e:	340a      	adds	r4, #10
 8016790:	2509      	movs	r5, #9
 8016792:	e7f6      	b.n	8016782 <__s2b+0x66>
 8016794:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016798:	4601      	mov	r1, r0
 801679a:	3b30      	subs	r3, #48	; 0x30
 801679c:	220a      	movs	r2, #10
 801679e:	4630      	mov	r0, r6
 80167a0:	f7ff ff72 	bl	8016688 <__multadd>
 80167a4:	e7ee      	b.n	8016784 <__s2b+0x68>
 80167a6:	bf00      	nop
 80167a8:	080188bb 	.word	0x080188bb
 80167ac:	0801894c 	.word	0x0801894c

080167b0 <__hi0bits>:
 80167b0:	0c03      	lsrs	r3, r0, #16
 80167b2:	041b      	lsls	r3, r3, #16
 80167b4:	b9d3      	cbnz	r3, 80167ec <__hi0bits+0x3c>
 80167b6:	0400      	lsls	r0, r0, #16
 80167b8:	2310      	movs	r3, #16
 80167ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80167be:	bf04      	itt	eq
 80167c0:	0200      	lsleq	r0, r0, #8
 80167c2:	3308      	addeq	r3, #8
 80167c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80167c8:	bf04      	itt	eq
 80167ca:	0100      	lsleq	r0, r0, #4
 80167cc:	3304      	addeq	r3, #4
 80167ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80167d2:	bf04      	itt	eq
 80167d4:	0080      	lsleq	r0, r0, #2
 80167d6:	3302      	addeq	r3, #2
 80167d8:	2800      	cmp	r0, #0
 80167da:	db05      	blt.n	80167e8 <__hi0bits+0x38>
 80167dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80167e0:	f103 0301 	add.w	r3, r3, #1
 80167e4:	bf08      	it	eq
 80167e6:	2320      	moveq	r3, #32
 80167e8:	4618      	mov	r0, r3
 80167ea:	4770      	bx	lr
 80167ec:	2300      	movs	r3, #0
 80167ee:	e7e4      	b.n	80167ba <__hi0bits+0xa>

080167f0 <__lo0bits>:
 80167f0:	6803      	ldr	r3, [r0, #0]
 80167f2:	f013 0207 	ands.w	r2, r3, #7
 80167f6:	4601      	mov	r1, r0
 80167f8:	d00b      	beq.n	8016812 <__lo0bits+0x22>
 80167fa:	07da      	lsls	r2, r3, #31
 80167fc:	d424      	bmi.n	8016848 <__lo0bits+0x58>
 80167fe:	0798      	lsls	r0, r3, #30
 8016800:	bf49      	itett	mi
 8016802:	085b      	lsrmi	r3, r3, #1
 8016804:	089b      	lsrpl	r3, r3, #2
 8016806:	2001      	movmi	r0, #1
 8016808:	600b      	strmi	r3, [r1, #0]
 801680a:	bf5c      	itt	pl
 801680c:	600b      	strpl	r3, [r1, #0]
 801680e:	2002      	movpl	r0, #2
 8016810:	4770      	bx	lr
 8016812:	b298      	uxth	r0, r3
 8016814:	b9b0      	cbnz	r0, 8016844 <__lo0bits+0x54>
 8016816:	0c1b      	lsrs	r3, r3, #16
 8016818:	2010      	movs	r0, #16
 801681a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801681e:	bf04      	itt	eq
 8016820:	0a1b      	lsreq	r3, r3, #8
 8016822:	3008      	addeq	r0, #8
 8016824:	071a      	lsls	r2, r3, #28
 8016826:	bf04      	itt	eq
 8016828:	091b      	lsreq	r3, r3, #4
 801682a:	3004      	addeq	r0, #4
 801682c:	079a      	lsls	r2, r3, #30
 801682e:	bf04      	itt	eq
 8016830:	089b      	lsreq	r3, r3, #2
 8016832:	3002      	addeq	r0, #2
 8016834:	07da      	lsls	r2, r3, #31
 8016836:	d403      	bmi.n	8016840 <__lo0bits+0x50>
 8016838:	085b      	lsrs	r3, r3, #1
 801683a:	f100 0001 	add.w	r0, r0, #1
 801683e:	d005      	beq.n	801684c <__lo0bits+0x5c>
 8016840:	600b      	str	r3, [r1, #0]
 8016842:	4770      	bx	lr
 8016844:	4610      	mov	r0, r2
 8016846:	e7e8      	b.n	801681a <__lo0bits+0x2a>
 8016848:	2000      	movs	r0, #0
 801684a:	4770      	bx	lr
 801684c:	2020      	movs	r0, #32
 801684e:	4770      	bx	lr

08016850 <__i2b>:
 8016850:	b510      	push	{r4, lr}
 8016852:	460c      	mov	r4, r1
 8016854:	2101      	movs	r1, #1
 8016856:	f7ff feb5 	bl	80165c4 <_Balloc>
 801685a:	4602      	mov	r2, r0
 801685c:	b928      	cbnz	r0, 801686a <__i2b+0x1a>
 801685e:	4b05      	ldr	r3, [pc, #20]	; (8016874 <__i2b+0x24>)
 8016860:	4805      	ldr	r0, [pc, #20]	; (8016878 <__i2b+0x28>)
 8016862:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016866:	f001 f95b 	bl	8017b20 <__assert_func>
 801686a:	2301      	movs	r3, #1
 801686c:	6144      	str	r4, [r0, #20]
 801686e:	6103      	str	r3, [r0, #16]
 8016870:	bd10      	pop	{r4, pc}
 8016872:	bf00      	nop
 8016874:	080188bb 	.word	0x080188bb
 8016878:	0801894c 	.word	0x0801894c

0801687c <__multiply>:
 801687c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016880:	4614      	mov	r4, r2
 8016882:	690a      	ldr	r2, [r1, #16]
 8016884:	6923      	ldr	r3, [r4, #16]
 8016886:	429a      	cmp	r2, r3
 8016888:	bfb8      	it	lt
 801688a:	460b      	movlt	r3, r1
 801688c:	460d      	mov	r5, r1
 801688e:	bfbc      	itt	lt
 8016890:	4625      	movlt	r5, r4
 8016892:	461c      	movlt	r4, r3
 8016894:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8016898:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801689c:	68ab      	ldr	r3, [r5, #8]
 801689e:	6869      	ldr	r1, [r5, #4]
 80168a0:	eb0a 0709 	add.w	r7, sl, r9
 80168a4:	42bb      	cmp	r3, r7
 80168a6:	b085      	sub	sp, #20
 80168a8:	bfb8      	it	lt
 80168aa:	3101      	addlt	r1, #1
 80168ac:	f7ff fe8a 	bl	80165c4 <_Balloc>
 80168b0:	b930      	cbnz	r0, 80168c0 <__multiply+0x44>
 80168b2:	4602      	mov	r2, r0
 80168b4:	4b42      	ldr	r3, [pc, #264]	; (80169c0 <__multiply+0x144>)
 80168b6:	4843      	ldr	r0, [pc, #268]	; (80169c4 <__multiply+0x148>)
 80168b8:	f240 115d 	movw	r1, #349	; 0x15d
 80168bc:	f001 f930 	bl	8017b20 <__assert_func>
 80168c0:	f100 0614 	add.w	r6, r0, #20
 80168c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80168c8:	4633      	mov	r3, r6
 80168ca:	2200      	movs	r2, #0
 80168cc:	4543      	cmp	r3, r8
 80168ce:	d31e      	bcc.n	801690e <__multiply+0x92>
 80168d0:	f105 0c14 	add.w	ip, r5, #20
 80168d4:	f104 0314 	add.w	r3, r4, #20
 80168d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80168dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80168e0:	9202      	str	r2, [sp, #8]
 80168e2:	ebac 0205 	sub.w	r2, ip, r5
 80168e6:	3a15      	subs	r2, #21
 80168e8:	f022 0203 	bic.w	r2, r2, #3
 80168ec:	3204      	adds	r2, #4
 80168ee:	f105 0115 	add.w	r1, r5, #21
 80168f2:	458c      	cmp	ip, r1
 80168f4:	bf38      	it	cc
 80168f6:	2204      	movcc	r2, #4
 80168f8:	9201      	str	r2, [sp, #4]
 80168fa:	9a02      	ldr	r2, [sp, #8]
 80168fc:	9303      	str	r3, [sp, #12]
 80168fe:	429a      	cmp	r2, r3
 8016900:	d808      	bhi.n	8016914 <__multiply+0x98>
 8016902:	2f00      	cmp	r7, #0
 8016904:	dc55      	bgt.n	80169b2 <__multiply+0x136>
 8016906:	6107      	str	r7, [r0, #16]
 8016908:	b005      	add	sp, #20
 801690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801690e:	f843 2b04 	str.w	r2, [r3], #4
 8016912:	e7db      	b.n	80168cc <__multiply+0x50>
 8016914:	f8b3 a000 	ldrh.w	sl, [r3]
 8016918:	f1ba 0f00 	cmp.w	sl, #0
 801691c:	d020      	beq.n	8016960 <__multiply+0xe4>
 801691e:	f105 0e14 	add.w	lr, r5, #20
 8016922:	46b1      	mov	r9, r6
 8016924:	2200      	movs	r2, #0
 8016926:	f85e 4b04 	ldr.w	r4, [lr], #4
 801692a:	f8d9 b000 	ldr.w	fp, [r9]
 801692e:	b2a1      	uxth	r1, r4
 8016930:	fa1f fb8b 	uxth.w	fp, fp
 8016934:	fb0a b101 	mla	r1, sl, r1, fp
 8016938:	4411      	add	r1, r2
 801693a:	f8d9 2000 	ldr.w	r2, [r9]
 801693e:	0c24      	lsrs	r4, r4, #16
 8016940:	0c12      	lsrs	r2, r2, #16
 8016942:	fb0a 2404 	mla	r4, sl, r4, r2
 8016946:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801694a:	b289      	uxth	r1, r1
 801694c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8016950:	45f4      	cmp	ip, lr
 8016952:	f849 1b04 	str.w	r1, [r9], #4
 8016956:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801695a:	d8e4      	bhi.n	8016926 <__multiply+0xaa>
 801695c:	9901      	ldr	r1, [sp, #4]
 801695e:	5072      	str	r2, [r6, r1]
 8016960:	9a03      	ldr	r2, [sp, #12]
 8016962:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016966:	3304      	adds	r3, #4
 8016968:	f1b9 0f00 	cmp.w	r9, #0
 801696c:	d01f      	beq.n	80169ae <__multiply+0x132>
 801696e:	6834      	ldr	r4, [r6, #0]
 8016970:	f105 0114 	add.w	r1, r5, #20
 8016974:	46b6      	mov	lr, r6
 8016976:	f04f 0a00 	mov.w	sl, #0
 801697a:	880a      	ldrh	r2, [r1, #0]
 801697c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8016980:	fb09 b202 	mla	r2, r9, r2, fp
 8016984:	4492      	add	sl, r2
 8016986:	b2a4      	uxth	r4, r4
 8016988:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801698c:	f84e 4b04 	str.w	r4, [lr], #4
 8016990:	f851 4b04 	ldr.w	r4, [r1], #4
 8016994:	f8be 2000 	ldrh.w	r2, [lr]
 8016998:	0c24      	lsrs	r4, r4, #16
 801699a:	fb09 2404 	mla	r4, r9, r4, r2
 801699e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80169a2:	458c      	cmp	ip, r1
 80169a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80169a8:	d8e7      	bhi.n	801697a <__multiply+0xfe>
 80169aa:	9a01      	ldr	r2, [sp, #4]
 80169ac:	50b4      	str	r4, [r6, r2]
 80169ae:	3604      	adds	r6, #4
 80169b0:	e7a3      	b.n	80168fa <__multiply+0x7e>
 80169b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d1a5      	bne.n	8016906 <__multiply+0x8a>
 80169ba:	3f01      	subs	r7, #1
 80169bc:	e7a1      	b.n	8016902 <__multiply+0x86>
 80169be:	bf00      	nop
 80169c0:	080188bb 	.word	0x080188bb
 80169c4:	0801894c 	.word	0x0801894c

080169c8 <__pow5mult>:
 80169c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169cc:	4615      	mov	r5, r2
 80169ce:	f012 0203 	ands.w	r2, r2, #3
 80169d2:	4606      	mov	r6, r0
 80169d4:	460f      	mov	r7, r1
 80169d6:	d007      	beq.n	80169e8 <__pow5mult+0x20>
 80169d8:	4c25      	ldr	r4, [pc, #148]	; (8016a70 <__pow5mult+0xa8>)
 80169da:	3a01      	subs	r2, #1
 80169dc:	2300      	movs	r3, #0
 80169de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80169e2:	f7ff fe51 	bl	8016688 <__multadd>
 80169e6:	4607      	mov	r7, r0
 80169e8:	10ad      	asrs	r5, r5, #2
 80169ea:	d03d      	beq.n	8016a68 <__pow5mult+0xa0>
 80169ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80169ee:	b97c      	cbnz	r4, 8016a10 <__pow5mult+0x48>
 80169f0:	2010      	movs	r0, #16
 80169f2:	f7ff fdc1 	bl	8016578 <malloc>
 80169f6:	4602      	mov	r2, r0
 80169f8:	6270      	str	r0, [r6, #36]	; 0x24
 80169fa:	b928      	cbnz	r0, 8016a08 <__pow5mult+0x40>
 80169fc:	4b1d      	ldr	r3, [pc, #116]	; (8016a74 <__pow5mult+0xac>)
 80169fe:	481e      	ldr	r0, [pc, #120]	; (8016a78 <__pow5mult+0xb0>)
 8016a00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016a04:	f001 f88c 	bl	8017b20 <__assert_func>
 8016a08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016a0c:	6004      	str	r4, [r0, #0]
 8016a0e:	60c4      	str	r4, [r0, #12]
 8016a10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016a14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016a18:	b94c      	cbnz	r4, 8016a2e <__pow5mult+0x66>
 8016a1a:	f240 2171 	movw	r1, #625	; 0x271
 8016a1e:	4630      	mov	r0, r6
 8016a20:	f7ff ff16 	bl	8016850 <__i2b>
 8016a24:	2300      	movs	r3, #0
 8016a26:	f8c8 0008 	str.w	r0, [r8, #8]
 8016a2a:	4604      	mov	r4, r0
 8016a2c:	6003      	str	r3, [r0, #0]
 8016a2e:	f04f 0900 	mov.w	r9, #0
 8016a32:	07eb      	lsls	r3, r5, #31
 8016a34:	d50a      	bpl.n	8016a4c <__pow5mult+0x84>
 8016a36:	4639      	mov	r1, r7
 8016a38:	4622      	mov	r2, r4
 8016a3a:	4630      	mov	r0, r6
 8016a3c:	f7ff ff1e 	bl	801687c <__multiply>
 8016a40:	4639      	mov	r1, r7
 8016a42:	4680      	mov	r8, r0
 8016a44:	4630      	mov	r0, r6
 8016a46:	f7ff fdfd 	bl	8016644 <_Bfree>
 8016a4a:	4647      	mov	r7, r8
 8016a4c:	106d      	asrs	r5, r5, #1
 8016a4e:	d00b      	beq.n	8016a68 <__pow5mult+0xa0>
 8016a50:	6820      	ldr	r0, [r4, #0]
 8016a52:	b938      	cbnz	r0, 8016a64 <__pow5mult+0x9c>
 8016a54:	4622      	mov	r2, r4
 8016a56:	4621      	mov	r1, r4
 8016a58:	4630      	mov	r0, r6
 8016a5a:	f7ff ff0f 	bl	801687c <__multiply>
 8016a5e:	6020      	str	r0, [r4, #0]
 8016a60:	f8c0 9000 	str.w	r9, [r0]
 8016a64:	4604      	mov	r4, r0
 8016a66:	e7e4      	b.n	8016a32 <__pow5mult+0x6a>
 8016a68:	4638      	mov	r0, r7
 8016a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a6e:	bf00      	nop
 8016a70:	08018aa0 	.word	0x08018aa0
 8016a74:	08018845 	.word	0x08018845
 8016a78:	0801894c 	.word	0x0801894c

08016a7c <__lshift>:
 8016a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a80:	460c      	mov	r4, r1
 8016a82:	6849      	ldr	r1, [r1, #4]
 8016a84:	6923      	ldr	r3, [r4, #16]
 8016a86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016a8a:	68a3      	ldr	r3, [r4, #8]
 8016a8c:	4607      	mov	r7, r0
 8016a8e:	4691      	mov	r9, r2
 8016a90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016a94:	f108 0601 	add.w	r6, r8, #1
 8016a98:	42b3      	cmp	r3, r6
 8016a9a:	db0b      	blt.n	8016ab4 <__lshift+0x38>
 8016a9c:	4638      	mov	r0, r7
 8016a9e:	f7ff fd91 	bl	80165c4 <_Balloc>
 8016aa2:	4605      	mov	r5, r0
 8016aa4:	b948      	cbnz	r0, 8016aba <__lshift+0x3e>
 8016aa6:	4602      	mov	r2, r0
 8016aa8:	4b28      	ldr	r3, [pc, #160]	; (8016b4c <__lshift+0xd0>)
 8016aaa:	4829      	ldr	r0, [pc, #164]	; (8016b50 <__lshift+0xd4>)
 8016aac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016ab0:	f001 f836 	bl	8017b20 <__assert_func>
 8016ab4:	3101      	adds	r1, #1
 8016ab6:	005b      	lsls	r3, r3, #1
 8016ab8:	e7ee      	b.n	8016a98 <__lshift+0x1c>
 8016aba:	2300      	movs	r3, #0
 8016abc:	f100 0114 	add.w	r1, r0, #20
 8016ac0:	f100 0210 	add.w	r2, r0, #16
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	4553      	cmp	r3, sl
 8016ac8:	db33      	blt.n	8016b32 <__lshift+0xb6>
 8016aca:	6920      	ldr	r0, [r4, #16]
 8016acc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016ad0:	f104 0314 	add.w	r3, r4, #20
 8016ad4:	f019 091f 	ands.w	r9, r9, #31
 8016ad8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016adc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016ae0:	d02b      	beq.n	8016b3a <__lshift+0xbe>
 8016ae2:	f1c9 0e20 	rsb	lr, r9, #32
 8016ae6:	468a      	mov	sl, r1
 8016ae8:	2200      	movs	r2, #0
 8016aea:	6818      	ldr	r0, [r3, #0]
 8016aec:	fa00 f009 	lsl.w	r0, r0, r9
 8016af0:	4302      	orrs	r2, r0
 8016af2:	f84a 2b04 	str.w	r2, [sl], #4
 8016af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016afa:	459c      	cmp	ip, r3
 8016afc:	fa22 f20e 	lsr.w	r2, r2, lr
 8016b00:	d8f3      	bhi.n	8016aea <__lshift+0x6e>
 8016b02:	ebac 0304 	sub.w	r3, ip, r4
 8016b06:	3b15      	subs	r3, #21
 8016b08:	f023 0303 	bic.w	r3, r3, #3
 8016b0c:	3304      	adds	r3, #4
 8016b0e:	f104 0015 	add.w	r0, r4, #21
 8016b12:	4584      	cmp	ip, r0
 8016b14:	bf38      	it	cc
 8016b16:	2304      	movcc	r3, #4
 8016b18:	50ca      	str	r2, [r1, r3]
 8016b1a:	b10a      	cbz	r2, 8016b20 <__lshift+0xa4>
 8016b1c:	f108 0602 	add.w	r6, r8, #2
 8016b20:	3e01      	subs	r6, #1
 8016b22:	4638      	mov	r0, r7
 8016b24:	612e      	str	r6, [r5, #16]
 8016b26:	4621      	mov	r1, r4
 8016b28:	f7ff fd8c 	bl	8016644 <_Bfree>
 8016b2c:	4628      	mov	r0, r5
 8016b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b32:	f842 0f04 	str.w	r0, [r2, #4]!
 8016b36:	3301      	adds	r3, #1
 8016b38:	e7c5      	b.n	8016ac6 <__lshift+0x4a>
 8016b3a:	3904      	subs	r1, #4
 8016b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b40:	f841 2f04 	str.w	r2, [r1, #4]!
 8016b44:	459c      	cmp	ip, r3
 8016b46:	d8f9      	bhi.n	8016b3c <__lshift+0xc0>
 8016b48:	e7ea      	b.n	8016b20 <__lshift+0xa4>
 8016b4a:	bf00      	nop
 8016b4c:	080188bb 	.word	0x080188bb
 8016b50:	0801894c 	.word	0x0801894c

08016b54 <__mcmp>:
 8016b54:	b530      	push	{r4, r5, lr}
 8016b56:	6902      	ldr	r2, [r0, #16]
 8016b58:	690c      	ldr	r4, [r1, #16]
 8016b5a:	1b12      	subs	r2, r2, r4
 8016b5c:	d10e      	bne.n	8016b7c <__mcmp+0x28>
 8016b5e:	f100 0314 	add.w	r3, r0, #20
 8016b62:	3114      	adds	r1, #20
 8016b64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016b68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016b6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016b70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016b74:	42a5      	cmp	r5, r4
 8016b76:	d003      	beq.n	8016b80 <__mcmp+0x2c>
 8016b78:	d305      	bcc.n	8016b86 <__mcmp+0x32>
 8016b7a:	2201      	movs	r2, #1
 8016b7c:	4610      	mov	r0, r2
 8016b7e:	bd30      	pop	{r4, r5, pc}
 8016b80:	4283      	cmp	r3, r0
 8016b82:	d3f3      	bcc.n	8016b6c <__mcmp+0x18>
 8016b84:	e7fa      	b.n	8016b7c <__mcmp+0x28>
 8016b86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016b8a:	e7f7      	b.n	8016b7c <__mcmp+0x28>

08016b8c <__mdiff>:
 8016b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b90:	460c      	mov	r4, r1
 8016b92:	4606      	mov	r6, r0
 8016b94:	4611      	mov	r1, r2
 8016b96:	4620      	mov	r0, r4
 8016b98:	4617      	mov	r7, r2
 8016b9a:	f7ff ffdb 	bl	8016b54 <__mcmp>
 8016b9e:	1e05      	subs	r5, r0, #0
 8016ba0:	d110      	bne.n	8016bc4 <__mdiff+0x38>
 8016ba2:	4629      	mov	r1, r5
 8016ba4:	4630      	mov	r0, r6
 8016ba6:	f7ff fd0d 	bl	80165c4 <_Balloc>
 8016baa:	b930      	cbnz	r0, 8016bba <__mdiff+0x2e>
 8016bac:	4b39      	ldr	r3, [pc, #228]	; (8016c94 <__mdiff+0x108>)
 8016bae:	4602      	mov	r2, r0
 8016bb0:	f240 2132 	movw	r1, #562	; 0x232
 8016bb4:	4838      	ldr	r0, [pc, #224]	; (8016c98 <__mdiff+0x10c>)
 8016bb6:	f000 ffb3 	bl	8017b20 <__assert_func>
 8016bba:	2301      	movs	r3, #1
 8016bbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bc4:	bfa4      	itt	ge
 8016bc6:	463b      	movge	r3, r7
 8016bc8:	4627      	movge	r7, r4
 8016bca:	4630      	mov	r0, r6
 8016bcc:	6879      	ldr	r1, [r7, #4]
 8016bce:	bfa6      	itte	ge
 8016bd0:	461c      	movge	r4, r3
 8016bd2:	2500      	movge	r5, #0
 8016bd4:	2501      	movlt	r5, #1
 8016bd6:	f7ff fcf5 	bl	80165c4 <_Balloc>
 8016bda:	b920      	cbnz	r0, 8016be6 <__mdiff+0x5a>
 8016bdc:	4b2d      	ldr	r3, [pc, #180]	; (8016c94 <__mdiff+0x108>)
 8016bde:	4602      	mov	r2, r0
 8016be0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016be4:	e7e6      	b.n	8016bb4 <__mdiff+0x28>
 8016be6:	693e      	ldr	r6, [r7, #16]
 8016be8:	60c5      	str	r5, [r0, #12]
 8016bea:	6925      	ldr	r5, [r4, #16]
 8016bec:	f107 0114 	add.w	r1, r7, #20
 8016bf0:	f104 0914 	add.w	r9, r4, #20
 8016bf4:	f100 0e14 	add.w	lr, r0, #20
 8016bf8:	f107 0210 	add.w	r2, r7, #16
 8016bfc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8016c00:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8016c04:	46f2      	mov	sl, lr
 8016c06:	2700      	movs	r7, #0
 8016c08:	f859 3b04 	ldr.w	r3, [r9], #4
 8016c0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016c10:	fa1f f883 	uxth.w	r8, r3
 8016c14:	fa17 f78b 	uxtah	r7, r7, fp
 8016c18:	0c1b      	lsrs	r3, r3, #16
 8016c1a:	eba7 0808 	sub.w	r8, r7, r8
 8016c1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016c22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016c26:	fa1f f888 	uxth.w	r8, r8
 8016c2a:	141f      	asrs	r7, r3, #16
 8016c2c:	454d      	cmp	r5, r9
 8016c2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016c32:	f84a 3b04 	str.w	r3, [sl], #4
 8016c36:	d8e7      	bhi.n	8016c08 <__mdiff+0x7c>
 8016c38:	1b2b      	subs	r3, r5, r4
 8016c3a:	3b15      	subs	r3, #21
 8016c3c:	f023 0303 	bic.w	r3, r3, #3
 8016c40:	3304      	adds	r3, #4
 8016c42:	3415      	adds	r4, #21
 8016c44:	42a5      	cmp	r5, r4
 8016c46:	bf38      	it	cc
 8016c48:	2304      	movcc	r3, #4
 8016c4a:	4419      	add	r1, r3
 8016c4c:	4473      	add	r3, lr
 8016c4e:	469e      	mov	lr, r3
 8016c50:	460d      	mov	r5, r1
 8016c52:	4565      	cmp	r5, ip
 8016c54:	d30e      	bcc.n	8016c74 <__mdiff+0xe8>
 8016c56:	f10c 0203 	add.w	r2, ip, #3
 8016c5a:	1a52      	subs	r2, r2, r1
 8016c5c:	f022 0203 	bic.w	r2, r2, #3
 8016c60:	3903      	subs	r1, #3
 8016c62:	458c      	cmp	ip, r1
 8016c64:	bf38      	it	cc
 8016c66:	2200      	movcc	r2, #0
 8016c68:	441a      	add	r2, r3
 8016c6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016c6e:	b17b      	cbz	r3, 8016c90 <__mdiff+0x104>
 8016c70:	6106      	str	r6, [r0, #16]
 8016c72:	e7a5      	b.n	8016bc0 <__mdiff+0x34>
 8016c74:	f855 8b04 	ldr.w	r8, [r5], #4
 8016c78:	fa17 f488 	uxtah	r4, r7, r8
 8016c7c:	1422      	asrs	r2, r4, #16
 8016c7e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8016c82:	b2a4      	uxth	r4, r4
 8016c84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8016c88:	f84e 4b04 	str.w	r4, [lr], #4
 8016c8c:	1417      	asrs	r7, r2, #16
 8016c8e:	e7e0      	b.n	8016c52 <__mdiff+0xc6>
 8016c90:	3e01      	subs	r6, #1
 8016c92:	e7ea      	b.n	8016c6a <__mdiff+0xde>
 8016c94:	080188bb 	.word	0x080188bb
 8016c98:	0801894c 	.word	0x0801894c

08016c9c <__ulp>:
 8016c9c:	b082      	sub	sp, #8
 8016c9e:	ed8d 0b00 	vstr	d0, [sp]
 8016ca2:	9b01      	ldr	r3, [sp, #4]
 8016ca4:	4912      	ldr	r1, [pc, #72]	; (8016cf0 <__ulp+0x54>)
 8016ca6:	4019      	ands	r1, r3
 8016ca8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016cac:	2900      	cmp	r1, #0
 8016cae:	dd05      	ble.n	8016cbc <__ulp+0x20>
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	460b      	mov	r3, r1
 8016cb4:	ec43 2b10 	vmov	d0, r2, r3
 8016cb8:	b002      	add	sp, #8
 8016cba:	4770      	bx	lr
 8016cbc:	4249      	negs	r1, r1
 8016cbe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016cc2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016cc6:	f04f 0200 	mov.w	r2, #0
 8016cca:	f04f 0300 	mov.w	r3, #0
 8016cce:	da04      	bge.n	8016cda <__ulp+0x3e>
 8016cd0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016cd4:	fa41 f300 	asr.w	r3, r1, r0
 8016cd8:	e7ec      	b.n	8016cb4 <__ulp+0x18>
 8016cda:	f1a0 0114 	sub.w	r1, r0, #20
 8016cde:	291e      	cmp	r1, #30
 8016ce0:	bfda      	itte	le
 8016ce2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016ce6:	fa20 f101 	lsrle.w	r1, r0, r1
 8016cea:	2101      	movgt	r1, #1
 8016cec:	460a      	mov	r2, r1
 8016cee:	e7e1      	b.n	8016cb4 <__ulp+0x18>
 8016cf0:	7ff00000 	.word	0x7ff00000

08016cf4 <__b2d>:
 8016cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cf6:	6905      	ldr	r5, [r0, #16]
 8016cf8:	f100 0714 	add.w	r7, r0, #20
 8016cfc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016d00:	1f2e      	subs	r6, r5, #4
 8016d02:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016d06:	4620      	mov	r0, r4
 8016d08:	f7ff fd52 	bl	80167b0 <__hi0bits>
 8016d0c:	f1c0 0320 	rsb	r3, r0, #32
 8016d10:	280a      	cmp	r0, #10
 8016d12:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016d90 <__b2d+0x9c>
 8016d16:	600b      	str	r3, [r1, #0]
 8016d18:	dc14      	bgt.n	8016d44 <__b2d+0x50>
 8016d1a:	f1c0 0e0b 	rsb	lr, r0, #11
 8016d1e:	fa24 f10e 	lsr.w	r1, r4, lr
 8016d22:	42b7      	cmp	r7, r6
 8016d24:	ea41 030c 	orr.w	r3, r1, ip
 8016d28:	bf34      	ite	cc
 8016d2a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016d2e:	2100      	movcs	r1, #0
 8016d30:	3015      	adds	r0, #21
 8016d32:	fa04 f000 	lsl.w	r0, r4, r0
 8016d36:	fa21 f10e 	lsr.w	r1, r1, lr
 8016d3a:	ea40 0201 	orr.w	r2, r0, r1
 8016d3e:	ec43 2b10 	vmov	d0, r2, r3
 8016d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d44:	42b7      	cmp	r7, r6
 8016d46:	bf3a      	itte	cc
 8016d48:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016d4c:	f1a5 0608 	subcc.w	r6, r5, #8
 8016d50:	2100      	movcs	r1, #0
 8016d52:	380b      	subs	r0, #11
 8016d54:	d017      	beq.n	8016d86 <__b2d+0x92>
 8016d56:	f1c0 0c20 	rsb	ip, r0, #32
 8016d5a:	fa04 f500 	lsl.w	r5, r4, r0
 8016d5e:	42be      	cmp	r6, r7
 8016d60:	fa21 f40c 	lsr.w	r4, r1, ip
 8016d64:	ea45 0504 	orr.w	r5, r5, r4
 8016d68:	bf8c      	ite	hi
 8016d6a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016d6e:	2400      	movls	r4, #0
 8016d70:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016d74:	fa01 f000 	lsl.w	r0, r1, r0
 8016d78:	fa24 f40c 	lsr.w	r4, r4, ip
 8016d7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016d80:	ea40 0204 	orr.w	r2, r0, r4
 8016d84:	e7db      	b.n	8016d3e <__b2d+0x4a>
 8016d86:	ea44 030c 	orr.w	r3, r4, ip
 8016d8a:	460a      	mov	r2, r1
 8016d8c:	e7d7      	b.n	8016d3e <__b2d+0x4a>
 8016d8e:	bf00      	nop
 8016d90:	3ff00000 	.word	0x3ff00000

08016d94 <__d2b>:
 8016d94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016d98:	4689      	mov	r9, r1
 8016d9a:	2101      	movs	r1, #1
 8016d9c:	ec57 6b10 	vmov	r6, r7, d0
 8016da0:	4690      	mov	r8, r2
 8016da2:	f7ff fc0f 	bl	80165c4 <_Balloc>
 8016da6:	4604      	mov	r4, r0
 8016da8:	b930      	cbnz	r0, 8016db8 <__d2b+0x24>
 8016daa:	4602      	mov	r2, r0
 8016dac:	4b25      	ldr	r3, [pc, #148]	; (8016e44 <__d2b+0xb0>)
 8016dae:	4826      	ldr	r0, [pc, #152]	; (8016e48 <__d2b+0xb4>)
 8016db0:	f240 310a 	movw	r1, #778	; 0x30a
 8016db4:	f000 feb4 	bl	8017b20 <__assert_func>
 8016db8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016dbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016dc0:	bb35      	cbnz	r5, 8016e10 <__d2b+0x7c>
 8016dc2:	2e00      	cmp	r6, #0
 8016dc4:	9301      	str	r3, [sp, #4]
 8016dc6:	d028      	beq.n	8016e1a <__d2b+0x86>
 8016dc8:	4668      	mov	r0, sp
 8016dca:	9600      	str	r6, [sp, #0]
 8016dcc:	f7ff fd10 	bl	80167f0 <__lo0bits>
 8016dd0:	9900      	ldr	r1, [sp, #0]
 8016dd2:	b300      	cbz	r0, 8016e16 <__d2b+0x82>
 8016dd4:	9a01      	ldr	r2, [sp, #4]
 8016dd6:	f1c0 0320 	rsb	r3, r0, #32
 8016dda:	fa02 f303 	lsl.w	r3, r2, r3
 8016dde:	430b      	orrs	r3, r1
 8016de0:	40c2      	lsrs	r2, r0
 8016de2:	6163      	str	r3, [r4, #20]
 8016de4:	9201      	str	r2, [sp, #4]
 8016de6:	9b01      	ldr	r3, [sp, #4]
 8016de8:	61a3      	str	r3, [r4, #24]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	bf14      	ite	ne
 8016dee:	2202      	movne	r2, #2
 8016df0:	2201      	moveq	r2, #1
 8016df2:	6122      	str	r2, [r4, #16]
 8016df4:	b1d5      	cbz	r5, 8016e2c <__d2b+0x98>
 8016df6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016dfa:	4405      	add	r5, r0
 8016dfc:	f8c9 5000 	str.w	r5, [r9]
 8016e00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016e04:	f8c8 0000 	str.w	r0, [r8]
 8016e08:	4620      	mov	r0, r4
 8016e0a:	b003      	add	sp, #12
 8016e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016e14:	e7d5      	b.n	8016dc2 <__d2b+0x2e>
 8016e16:	6161      	str	r1, [r4, #20]
 8016e18:	e7e5      	b.n	8016de6 <__d2b+0x52>
 8016e1a:	a801      	add	r0, sp, #4
 8016e1c:	f7ff fce8 	bl	80167f0 <__lo0bits>
 8016e20:	9b01      	ldr	r3, [sp, #4]
 8016e22:	6163      	str	r3, [r4, #20]
 8016e24:	2201      	movs	r2, #1
 8016e26:	6122      	str	r2, [r4, #16]
 8016e28:	3020      	adds	r0, #32
 8016e2a:	e7e3      	b.n	8016df4 <__d2b+0x60>
 8016e2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016e30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016e34:	f8c9 0000 	str.w	r0, [r9]
 8016e38:	6918      	ldr	r0, [r3, #16]
 8016e3a:	f7ff fcb9 	bl	80167b0 <__hi0bits>
 8016e3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016e42:	e7df      	b.n	8016e04 <__d2b+0x70>
 8016e44:	080188bb 	.word	0x080188bb
 8016e48:	0801894c 	.word	0x0801894c

08016e4c <__ratio>:
 8016e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e50:	4688      	mov	r8, r1
 8016e52:	4669      	mov	r1, sp
 8016e54:	4681      	mov	r9, r0
 8016e56:	f7ff ff4d 	bl	8016cf4 <__b2d>
 8016e5a:	a901      	add	r1, sp, #4
 8016e5c:	4640      	mov	r0, r8
 8016e5e:	ec55 4b10 	vmov	r4, r5, d0
 8016e62:	f7ff ff47 	bl	8016cf4 <__b2d>
 8016e66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016e6a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016e6e:	eba3 0c02 	sub.w	ip, r3, r2
 8016e72:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016e76:	1a9b      	subs	r3, r3, r2
 8016e78:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016e7c:	ec51 0b10 	vmov	r0, r1, d0
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	bfd6      	itet	le
 8016e84:	460a      	movle	r2, r1
 8016e86:	462a      	movgt	r2, r5
 8016e88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016e8c:	468b      	mov	fp, r1
 8016e8e:	462f      	mov	r7, r5
 8016e90:	bfd4      	ite	le
 8016e92:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016e96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016e9a:	4620      	mov	r0, r4
 8016e9c:	ee10 2a10 	vmov	r2, s0
 8016ea0:	465b      	mov	r3, fp
 8016ea2:	4639      	mov	r1, r7
 8016ea4:	f7e9 fce2 	bl	800086c <__aeabi_ddiv>
 8016ea8:	ec41 0b10 	vmov	d0, r0, r1
 8016eac:	b003      	add	sp, #12
 8016eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016eb2 <__copybits>:
 8016eb2:	3901      	subs	r1, #1
 8016eb4:	b570      	push	{r4, r5, r6, lr}
 8016eb6:	1149      	asrs	r1, r1, #5
 8016eb8:	6914      	ldr	r4, [r2, #16]
 8016eba:	3101      	adds	r1, #1
 8016ebc:	f102 0314 	add.w	r3, r2, #20
 8016ec0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016ec4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016ec8:	1f05      	subs	r5, r0, #4
 8016eca:	42a3      	cmp	r3, r4
 8016ecc:	d30c      	bcc.n	8016ee8 <__copybits+0x36>
 8016ece:	1aa3      	subs	r3, r4, r2
 8016ed0:	3b11      	subs	r3, #17
 8016ed2:	f023 0303 	bic.w	r3, r3, #3
 8016ed6:	3211      	adds	r2, #17
 8016ed8:	42a2      	cmp	r2, r4
 8016eda:	bf88      	it	hi
 8016edc:	2300      	movhi	r3, #0
 8016ede:	4418      	add	r0, r3
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	4288      	cmp	r0, r1
 8016ee4:	d305      	bcc.n	8016ef2 <__copybits+0x40>
 8016ee6:	bd70      	pop	{r4, r5, r6, pc}
 8016ee8:	f853 6b04 	ldr.w	r6, [r3], #4
 8016eec:	f845 6f04 	str.w	r6, [r5, #4]!
 8016ef0:	e7eb      	b.n	8016eca <__copybits+0x18>
 8016ef2:	f840 3b04 	str.w	r3, [r0], #4
 8016ef6:	e7f4      	b.n	8016ee2 <__copybits+0x30>

08016ef8 <__any_on>:
 8016ef8:	f100 0214 	add.w	r2, r0, #20
 8016efc:	6900      	ldr	r0, [r0, #16]
 8016efe:	114b      	asrs	r3, r1, #5
 8016f00:	4298      	cmp	r0, r3
 8016f02:	b510      	push	{r4, lr}
 8016f04:	db11      	blt.n	8016f2a <__any_on+0x32>
 8016f06:	dd0a      	ble.n	8016f1e <__any_on+0x26>
 8016f08:	f011 011f 	ands.w	r1, r1, #31
 8016f0c:	d007      	beq.n	8016f1e <__any_on+0x26>
 8016f0e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016f12:	fa24 f001 	lsr.w	r0, r4, r1
 8016f16:	fa00 f101 	lsl.w	r1, r0, r1
 8016f1a:	428c      	cmp	r4, r1
 8016f1c:	d10b      	bne.n	8016f36 <__any_on+0x3e>
 8016f1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016f22:	4293      	cmp	r3, r2
 8016f24:	d803      	bhi.n	8016f2e <__any_on+0x36>
 8016f26:	2000      	movs	r0, #0
 8016f28:	bd10      	pop	{r4, pc}
 8016f2a:	4603      	mov	r3, r0
 8016f2c:	e7f7      	b.n	8016f1e <__any_on+0x26>
 8016f2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016f32:	2900      	cmp	r1, #0
 8016f34:	d0f5      	beq.n	8016f22 <__any_on+0x2a>
 8016f36:	2001      	movs	r0, #1
 8016f38:	e7f6      	b.n	8016f28 <__any_on+0x30>

08016f3a <_calloc_r>:
 8016f3a:	b513      	push	{r0, r1, r4, lr}
 8016f3c:	434a      	muls	r2, r1
 8016f3e:	4611      	mov	r1, r2
 8016f40:	9201      	str	r2, [sp, #4]
 8016f42:	f7fc f93f 	bl	80131c4 <_malloc_r>
 8016f46:	4604      	mov	r4, r0
 8016f48:	b118      	cbz	r0, 8016f52 <_calloc_r+0x18>
 8016f4a:	9a01      	ldr	r2, [sp, #4]
 8016f4c:	2100      	movs	r1, #0
 8016f4e:	f7fc f930 	bl	80131b2 <memset>
 8016f52:	4620      	mov	r0, r4
 8016f54:	b002      	add	sp, #8
 8016f56:	bd10      	pop	{r4, pc}

08016f58 <_free_r>:
 8016f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f5a:	2900      	cmp	r1, #0
 8016f5c:	d048      	beq.n	8016ff0 <_free_r+0x98>
 8016f5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f62:	9001      	str	r0, [sp, #4]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	f1a1 0404 	sub.w	r4, r1, #4
 8016f6a:	bfb8      	it	lt
 8016f6c:	18e4      	addlt	r4, r4, r3
 8016f6e:	f7ff fb1d 	bl	80165ac <__malloc_lock>
 8016f72:	4a20      	ldr	r2, [pc, #128]	; (8016ff4 <_free_r+0x9c>)
 8016f74:	9801      	ldr	r0, [sp, #4]
 8016f76:	6813      	ldr	r3, [r2, #0]
 8016f78:	4615      	mov	r5, r2
 8016f7a:	b933      	cbnz	r3, 8016f8a <_free_r+0x32>
 8016f7c:	6063      	str	r3, [r4, #4]
 8016f7e:	6014      	str	r4, [r2, #0]
 8016f80:	b003      	add	sp, #12
 8016f82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f86:	f7ff bb17 	b.w	80165b8 <__malloc_unlock>
 8016f8a:	42a3      	cmp	r3, r4
 8016f8c:	d90b      	bls.n	8016fa6 <_free_r+0x4e>
 8016f8e:	6821      	ldr	r1, [r4, #0]
 8016f90:	1862      	adds	r2, r4, r1
 8016f92:	4293      	cmp	r3, r2
 8016f94:	bf04      	itt	eq
 8016f96:	681a      	ldreq	r2, [r3, #0]
 8016f98:	685b      	ldreq	r3, [r3, #4]
 8016f9a:	6063      	str	r3, [r4, #4]
 8016f9c:	bf04      	itt	eq
 8016f9e:	1852      	addeq	r2, r2, r1
 8016fa0:	6022      	streq	r2, [r4, #0]
 8016fa2:	602c      	str	r4, [r5, #0]
 8016fa4:	e7ec      	b.n	8016f80 <_free_r+0x28>
 8016fa6:	461a      	mov	r2, r3
 8016fa8:	685b      	ldr	r3, [r3, #4]
 8016faa:	b10b      	cbz	r3, 8016fb0 <_free_r+0x58>
 8016fac:	42a3      	cmp	r3, r4
 8016fae:	d9fa      	bls.n	8016fa6 <_free_r+0x4e>
 8016fb0:	6811      	ldr	r1, [r2, #0]
 8016fb2:	1855      	adds	r5, r2, r1
 8016fb4:	42a5      	cmp	r5, r4
 8016fb6:	d10b      	bne.n	8016fd0 <_free_r+0x78>
 8016fb8:	6824      	ldr	r4, [r4, #0]
 8016fba:	4421      	add	r1, r4
 8016fbc:	1854      	adds	r4, r2, r1
 8016fbe:	42a3      	cmp	r3, r4
 8016fc0:	6011      	str	r1, [r2, #0]
 8016fc2:	d1dd      	bne.n	8016f80 <_free_r+0x28>
 8016fc4:	681c      	ldr	r4, [r3, #0]
 8016fc6:	685b      	ldr	r3, [r3, #4]
 8016fc8:	6053      	str	r3, [r2, #4]
 8016fca:	4421      	add	r1, r4
 8016fcc:	6011      	str	r1, [r2, #0]
 8016fce:	e7d7      	b.n	8016f80 <_free_r+0x28>
 8016fd0:	d902      	bls.n	8016fd8 <_free_r+0x80>
 8016fd2:	230c      	movs	r3, #12
 8016fd4:	6003      	str	r3, [r0, #0]
 8016fd6:	e7d3      	b.n	8016f80 <_free_r+0x28>
 8016fd8:	6825      	ldr	r5, [r4, #0]
 8016fda:	1961      	adds	r1, r4, r5
 8016fdc:	428b      	cmp	r3, r1
 8016fde:	bf04      	itt	eq
 8016fe0:	6819      	ldreq	r1, [r3, #0]
 8016fe2:	685b      	ldreq	r3, [r3, #4]
 8016fe4:	6063      	str	r3, [r4, #4]
 8016fe6:	bf04      	itt	eq
 8016fe8:	1949      	addeq	r1, r1, r5
 8016fea:	6021      	streq	r1, [r4, #0]
 8016fec:	6054      	str	r4, [r2, #4]
 8016fee:	e7c7      	b.n	8016f80 <_free_r+0x28>
 8016ff0:	b003      	add	sp, #12
 8016ff2:	bd30      	pop	{r4, r5, pc}
 8016ff4:	20009dc8 	.word	0x20009dc8

08016ff8 <__ssputs_r>:
 8016ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ffc:	688e      	ldr	r6, [r1, #8]
 8016ffe:	429e      	cmp	r6, r3
 8017000:	4682      	mov	sl, r0
 8017002:	460c      	mov	r4, r1
 8017004:	4690      	mov	r8, r2
 8017006:	461f      	mov	r7, r3
 8017008:	d838      	bhi.n	801707c <__ssputs_r+0x84>
 801700a:	898a      	ldrh	r2, [r1, #12]
 801700c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017010:	d032      	beq.n	8017078 <__ssputs_r+0x80>
 8017012:	6825      	ldr	r5, [r4, #0]
 8017014:	6909      	ldr	r1, [r1, #16]
 8017016:	eba5 0901 	sub.w	r9, r5, r1
 801701a:	6965      	ldr	r5, [r4, #20]
 801701c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017020:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017024:	3301      	adds	r3, #1
 8017026:	444b      	add	r3, r9
 8017028:	106d      	asrs	r5, r5, #1
 801702a:	429d      	cmp	r5, r3
 801702c:	bf38      	it	cc
 801702e:	461d      	movcc	r5, r3
 8017030:	0553      	lsls	r3, r2, #21
 8017032:	d531      	bpl.n	8017098 <__ssputs_r+0xa0>
 8017034:	4629      	mov	r1, r5
 8017036:	f7fc f8c5 	bl	80131c4 <_malloc_r>
 801703a:	4606      	mov	r6, r0
 801703c:	b950      	cbnz	r0, 8017054 <__ssputs_r+0x5c>
 801703e:	230c      	movs	r3, #12
 8017040:	f8ca 3000 	str.w	r3, [sl]
 8017044:	89a3      	ldrh	r3, [r4, #12]
 8017046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801704a:	81a3      	strh	r3, [r4, #12]
 801704c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017054:	6921      	ldr	r1, [r4, #16]
 8017056:	464a      	mov	r2, r9
 8017058:	f7fc f89d 	bl	8013196 <memcpy>
 801705c:	89a3      	ldrh	r3, [r4, #12]
 801705e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017066:	81a3      	strh	r3, [r4, #12]
 8017068:	6126      	str	r6, [r4, #16]
 801706a:	6165      	str	r5, [r4, #20]
 801706c:	444e      	add	r6, r9
 801706e:	eba5 0509 	sub.w	r5, r5, r9
 8017072:	6026      	str	r6, [r4, #0]
 8017074:	60a5      	str	r5, [r4, #8]
 8017076:	463e      	mov	r6, r7
 8017078:	42be      	cmp	r6, r7
 801707a:	d900      	bls.n	801707e <__ssputs_r+0x86>
 801707c:	463e      	mov	r6, r7
 801707e:	4632      	mov	r2, r6
 8017080:	6820      	ldr	r0, [r4, #0]
 8017082:	4641      	mov	r1, r8
 8017084:	f000 fd7c 	bl	8017b80 <memmove>
 8017088:	68a3      	ldr	r3, [r4, #8]
 801708a:	6822      	ldr	r2, [r4, #0]
 801708c:	1b9b      	subs	r3, r3, r6
 801708e:	4432      	add	r2, r6
 8017090:	60a3      	str	r3, [r4, #8]
 8017092:	6022      	str	r2, [r4, #0]
 8017094:	2000      	movs	r0, #0
 8017096:	e7db      	b.n	8017050 <__ssputs_r+0x58>
 8017098:	462a      	mov	r2, r5
 801709a:	f000 fd8b 	bl	8017bb4 <_realloc_r>
 801709e:	4606      	mov	r6, r0
 80170a0:	2800      	cmp	r0, #0
 80170a2:	d1e1      	bne.n	8017068 <__ssputs_r+0x70>
 80170a4:	6921      	ldr	r1, [r4, #16]
 80170a6:	4650      	mov	r0, sl
 80170a8:	f7ff ff56 	bl	8016f58 <_free_r>
 80170ac:	e7c7      	b.n	801703e <__ssputs_r+0x46>
	...

080170b0 <_svfiprintf_r>:
 80170b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170b4:	4698      	mov	r8, r3
 80170b6:	898b      	ldrh	r3, [r1, #12]
 80170b8:	061b      	lsls	r3, r3, #24
 80170ba:	b09d      	sub	sp, #116	; 0x74
 80170bc:	4607      	mov	r7, r0
 80170be:	460d      	mov	r5, r1
 80170c0:	4614      	mov	r4, r2
 80170c2:	d50e      	bpl.n	80170e2 <_svfiprintf_r+0x32>
 80170c4:	690b      	ldr	r3, [r1, #16]
 80170c6:	b963      	cbnz	r3, 80170e2 <_svfiprintf_r+0x32>
 80170c8:	2140      	movs	r1, #64	; 0x40
 80170ca:	f7fc f87b 	bl	80131c4 <_malloc_r>
 80170ce:	6028      	str	r0, [r5, #0]
 80170d0:	6128      	str	r0, [r5, #16]
 80170d2:	b920      	cbnz	r0, 80170de <_svfiprintf_r+0x2e>
 80170d4:	230c      	movs	r3, #12
 80170d6:	603b      	str	r3, [r7, #0]
 80170d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170dc:	e0d1      	b.n	8017282 <_svfiprintf_r+0x1d2>
 80170de:	2340      	movs	r3, #64	; 0x40
 80170e0:	616b      	str	r3, [r5, #20]
 80170e2:	2300      	movs	r3, #0
 80170e4:	9309      	str	r3, [sp, #36]	; 0x24
 80170e6:	2320      	movs	r3, #32
 80170e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80170ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80170f0:	2330      	movs	r3, #48	; 0x30
 80170f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801729c <_svfiprintf_r+0x1ec>
 80170f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80170fa:	f04f 0901 	mov.w	r9, #1
 80170fe:	4623      	mov	r3, r4
 8017100:	469a      	mov	sl, r3
 8017102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017106:	b10a      	cbz	r2, 801710c <_svfiprintf_r+0x5c>
 8017108:	2a25      	cmp	r2, #37	; 0x25
 801710a:	d1f9      	bne.n	8017100 <_svfiprintf_r+0x50>
 801710c:	ebba 0b04 	subs.w	fp, sl, r4
 8017110:	d00b      	beq.n	801712a <_svfiprintf_r+0x7a>
 8017112:	465b      	mov	r3, fp
 8017114:	4622      	mov	r2, r4
 8017116:	4629      	mov	r1, r5
 8017118:	4638      	mov	r0, r7
 801711a:	f7ff ff6d 	bl	8016ff8 <__ssputs_r>
 801711e:	3001      	adds	r0, #1
 8017120:	f000 80aa 	beq.w	8017278 <_svfiprintf_r+0x1c8>
 8017124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017126:	445a      	add	r2, fp
 8017128:	9209      	str	r2, [sp, #36]	; 0x24
 801712a:	f89a 3000 	ldrb.w	r3, [sl]
 801712e:	2b00      	cmp	r3, #0
 8017130:	f000 80a2 	beq.w	8017278 <_svfiprintf_r+0x1c8>
 8017134:	2300      	movs	r3, #0
 8017136:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801713a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801713e:	f10a 0a01 	add.w	sl, sl, #1
 8017142:	9304      	str	r3, [sp, #16]
 8017144:	9307      	str	r3, [sp, #28]
 8017146:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801714a:	931a      	str	r3, [sp, #104]	; 0x68
 801714c:	4654      	mov	r4, sl
 801714e:	2205      	movs	r2, #5
 8017150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017154:	4851      	ldr	r0, [pc, #324]	; (801729c <_svfiprintf_r+0x1ec>)
 8017156:	f7e9 f853 	bl	8000200 <memchr>
 801715a:	9a04      	ldr	r2, [sp, #16]
 801715c:	b9d8      	cbnz	r0, 8017196 <_svfiprintf_r+0xe6>
 801715e:	06d0      	lsls	r0, r2, #27
 8017160:	bf44      	itt	mi
 8017162:	2320      	movmi	r3, #32
 8017164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017168:	0711      	lsls	r1, r2, #28
 801716a:	bf44      	itt	mi
 801716c:	232b      	movmi	r3, #43	; 0x2b
 801716e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017172:	f89a 3000 	ldrb.w	r3, [sl]
 8017176:	2b2a      	cmp	r3, #42	; 0x2a
 8017178:	d015      	beq.n	80171a6 <_svfiprintf_r+0xf6>
 801717a:	9a07      	ldr	r2, [sp, #28]
 801717c:	4654      	mov	r4, sl
 801717e:	2000      	movs	r0, #0
 8017180:	f04f 0c0a 	mov.w	ip, #10
 8017184:	4621      	mov	r1, r4
 8017186:	f811 3b01 	ldrb.w	r3, [r1], #1
 801718a:	3b30      	subs	r3, #48	; 0x30
 801718c:	2b09      	cmp	r3, #9
 801718e:	d94e      	bls.n	801722e <_svfiprintf_r+0x17e>
 8017190:	b1b0      	cbz	r0, 80171c0 <_svfiprintf_r+0x110>
 8017192:	9207      	str	r2, [sp, #28]
 8017194:	e014      	b.n	80171c0 <_svfiprintf_r+0x110>
 8017196:	eba0 0308 	sub.w	r3, r0, r8
 801719a:	fa09 f303 	lsl.w	r3, r9, r3
 801719e:	4313      	orrs	r3, r2
 80171a0:	9304      	str	r3, [sp, #16]
 80171a2:	46a2      	mov	sl, r4
 80171a4:	e7d2      	b.n	801714c <_svfiprintf_r+0x9c>
 80171a6:	9b03      	ldr	r3, [sp, #12]
 80171a8:	1d19      	adds	r1, r3, #4
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	9103      	str	r1, [sp, #12]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	bfbb      	ittet	lt
 80171b2:	425b      	neglt	r3, r3
 80171b4:	f042 0202 	orrlt.w	r2, r2, #2
 80171b8:	9307      	strge	r3, [sp, #28]
 80171ba:	9307      	strlt	r3, [sp, #28]
 80171bc:	bfb8      	it	lt
 80171be:	9204      	strlt	r2, [sp, #16]
 80171c0:	7823      	ldrb	r3, [r4, #0]
 80171c2:	2b2e      	cmp	r3, #46	; 0x2e
 80171c4:	d10c      	bne.n	80171e0 <_svfiprintf_r+0x130>
 80171c6:	7863      	ldrb	r3, [r4, #1]
 80171c8:	2b2a      	cmp	r3, #42	; 0x2a
 80171ca:	d135      	bne.n	8017238 <_svfiprintf_r+0x188>
 80171cc:	9b03      	ldr	r3, [sp, #12]
 80171ce:	1d1a      	adds	r2, r3, #4
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	9203      	str	r2, [sp, #12]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	bfb8      	it	lt
 80171d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80171dc:	3402      	adds	r4, #2
 80171de:	9305      	str	r3, [sp, #20]
 80171e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80172ac <_svfiprintf_r+0x1fc>
 80171e4:	7821      	ldrb	r1, [r4, #0]
 80171e6:	2203      	movs	r2, #3
 80171e8:	4650      	mov	r0, sl
 80171ea:	f7e9 f809 	bl	8000200 <memchr>
 80171ee:	b140      	cbz	r0, 8017202 <_svfiprintf_r+0x152>
 80171f0:	2340      	movs	r3, #64	; 0x40
 80171f2:	eba0 000a 	sub.w	r0, r0, sl
 80171f6:	fa03 f000 	lsl.w	r0, r3, r0
 80171fa:	9b04      	ldr	r3, [sp, #16]
 80171fc:	4303      	orrs	r3, r0
 80171fe:	3401      	adds	r4, #1
 8017200:	9304      	str	r3, [sp, #16]
 8017202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017206:	4826      	ldr	r0, [pc, #152]	; (80172a0 <_svfiprintf_r+0x1f0>)
 8017208:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801720c:	2206      	movs	r2, #6
 801720e:	f7e8 fff7 	bl	8000200 <memchr>
 8017212:	2800      	cmp	r0, #0
 8017214:	d038      	beq.n	8017288 <_svfiprintf_r+0x1d8>
 8017216:	4b23      	ldr	r3, [pc, #140]	; (80172a4 <_svfiprintf_r+0x1f4>)
 8017218:	bb1b      	cbnz	r3, 8017262 <_svfiprintf_r+0x1b2>
 801721a:	9b03      	ldr	r3, [sp, #12]
 801721c:	3307      	adds	r3, #7
 801721e:	f023 0307 	bic.w	r3, r3, #7
 8017222:	3308      	adds	r3, #8
 8017224:	9303      	str	r3, [sp, #12]
 8017226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017228:	4433      	add	r3, r6
 801722a:	9309      	str	r3, [sp, #36]	; 0x24
 801722c:	e767      	b.n	80170fe <_svfiprintf_r+0x4e>
 801722e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017232:	460c      	mov	r4, r1
 8017234:	2001      	movs	r0, #1
 8017236:	e7a5      	b.n	8017184 <_svfiprintf_r+0xd4>
 8017238:	2300      	movs	r3, #0
 801723a:	3401      	adds	r4, #1
 801723c:	9305      	str	r3, [sp, #20]
 801723e:	4619      	mov	r1, r3
 8017240:	f04f 0c0a 	mov.w	ip, #10
 8017244:	4620      	mov	r0, r4
 8017246:	f810 2b01 	ldrb.w	r2, [r0], #1
 801724a:	3a30      	subs	r2, #48	; 0x30
 801724c:	2a09      	cmp	r2, #9
 801724e:	d903      	bls.n	8017258 <_svfiprintf_r+0x1a8>
 8017250:	2b00      	cmp	r3, #0
 8017252:	d0c5      	beq.n	80171e0 <_svfiprintf_r+0x130>
 8017254:	9105      	str	r1, [sp, #20]
 8017256:	e7c3      	b.n	80171e0 <_svfiprintf_r+0x130>
 8017258:	fb0c 2101 	mla	r1, ip, r1, r2
 801725c:	4604      	mov	r4, r0
 801725e:	2301      	movs	r3, #1
 8017260:	e7f0      	b.n	8017244 <_svfiprintf_r+0x194>
 8017262:	ab03      	add	r3, sp, #12
 8017264:	9300      	str	r3, [sp, #0]
 8017266:	462a      	mov	r2, r5
 8017268:	4b0f      	ldr	r3, [pc, #60]	; (80172a8 <_svfiprintf_r+0x1f8>)
 801726a:	a904      	add	r1, sp, #16
 801726c:	4638      	mov	r0, r7
 801726e:	f7fc f8a3 	bl	80133b8 <_printf_float>
 8017272:	1c42      	adds	r2, r0, #1
 8017274:	4606      	mov	r6, r0
 8017276:	d1d6      	bne.n	8017226 <_svfiprintf_r+0x176>
 8017278:	89ab      	ldrh	r3, [r5, #12]
 801727a:	065b      	lsls	r3, r3, #25
 801727c:	f53f af2c 	bmi.w	80170d8 <_svfiprintf_r+0x28>
 8017280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017282:	b01d      	add	sp, #116	; 0x74
 8017284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017288:	ab03      	add	r3, sp, #12
 801728a:	9300      	str	r3, [sp, #0]
 801728c:	462a      	mov	r2, r5
 801728e:	4b06      	ldr	r3, [pc, #24]	; (80172a8 <_svfiprintf_r+0x1f8>)
 8017290:	a904      	add	r1, sp, #16
 8017292:	4638      	mov	r0, r7
 8017294:	f7fc fb34 	bl	8013900 <_printf_i>
 8017298:	e7eb      	b.n	8017272 <_svfiprintf_r+0x1c2>
 801729a:	bf00      	nop
 801729c:	08018aac 	.word	0x08018aac
 80172a0:	08018ab6 	.word	0x08018ab6
 80172a4:	080133b9 	.word	0x080133b9
 80172a8:	08016ff9 	.word	0x08016ff9
 80172ac:	08018ab2 	.word	0x08018ab2

080172b0 <_sungetc_r>:
 80172b0:	b538      	push	{r3, r4, r5, lr}
 80172b2:	1c4b      	adds	r3, r1, #1
 80172b4:	4614      	mov	r4, r2
 80172b6:	d103      	bne.n	80172c0 <_sungetc_r+0x10>
 80172b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80172bc:	4628      	mov	r0, r5
 80172be:	bd38      	pop	{r3, r4, r5, pc}
 80172c0:	8993      	ldrh	r3, [r2, #12]
 80172c2:	f023 0320 	bic.w	r3, r3, #32
 80172c6:	8193      	strh	r3, [r2, #12]
 80172c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80172ca:	6852      	ldr	r2, [r2, #4]
 80172cc:	b2cd      	uxtb	r5, r1
 80172ce:	b18b      	cbz	r3, 80172f4 <_sungetc_r+0x44>
 80172d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80172d2:	4293      	cmp	r3, r2
 80172d4:	dd08      	ble.n	80172e8 <_sungetc_r+0x38>
 80172d6:	6823      	ldr	r3, [r4, #0]
 80172d8:	1e5a      	subs	r2, r3, #1
 80172da:	6022      	str	r2, [r4, #0]
 80172dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80172e0:	6863      	ldr	r3, [r4, #4]
 80172e2:	3301      	adds	r3, #1
 80172e4:	6063      	str	r3, [r4, #4]
 80172e6:	e7e9      	b.n	80172bc <_sungetc_r+0xc>
 80172e8:	4621      	mov	r1, r4
 80172ea:	f000 fbd1 	bl	8017a90 <__submore>
 80172ee:	2800      	cmp	r0, #0
 80172f0:	d0f1      	beq.n	80172d6 <_sungetc_r+0x26>
 80172f2:	e7e1      	b.n	80172b8 <_sungetc_r+0x8>
 80172f4:	6921      	ldr	r1, [r4, #16]
 80172f6:	6823      	ldr	r3, [r4, #0]
 80172f8:	b151      	cbz	r1, 8017310 <_sungetc_r+0x60>
 80172fa:	4299      	cmp	r1, r3
 80172fc:	d208      	bcs.n	8017310 <_sungetc_r+0x60>
 80172fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017302:	42a9      	cmp	r1, r5
 8017304:	d104      	bne.n	8017310 <_sungetc_r+0x60>
 8017306:	3b01      	subs	r3, #1
 8017308:	3201      	adds	r2, #1
 801730a:	6023      	str	r3, [r4, #0]
 801730c:	6062      	str	r2, [r4, #4]
 801730e:	e7d5      	b.n	80172bc <_sungetc_r+0xc>
 8017310:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017318:	6363      	str	r3, [r4, #52]	; 0x34
 801731a:	2303      	movs	r3, #3
 801731c:	63a3      	str	r3, [r4, #56]	; 0x38
 801731e:	4623      	mov	r3, r4
 8017320:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017324:	6023      	str	r3, [r4, #0]
 8017326:	2301      	movs	r3, #1
 8017328:	e7dc      	b.n	80172e4 <_sungetc_r+0x34>

0801732a <__ssrefill_r>:
 801732a:	b510      	push	{r4, lr}
 801732c:	460c      	mov	r4, r1
 801732e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017330:	b169      	cbz	r1, 801734e <__ssrefill_r+0x24>
 8017332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017336:	4299      	cmp	r1, r3
 8017338:	d001      	beq.n	801733e <__ssrefill_r+0x14>
 801733a:	f7ff fe0d 	bl	8016f58 <_free_r>
 801733e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017340:	6063      	str	r3, [r4, #4]
 8017342:	2000      	movs	r0, #0
 8017344:	6360      	str	r0, [r4, #52]	; 0x34
 8017346:	b113      	cbz	r3, 801734e <__ssrefill_r+0x24>
 8017348:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801734a:	6023      	str	r3, [r4, #0]
 801734c:	bd10      	pop	{r4, pc}
 801734e:	6923      	ldr	r3, [r4, #16]
 8017350:	6023      	str	r3, [r4, #0]
 8017352:	2300      	movs	r3, #0
 8017354:	6063      	str	r3, [r4, #4]
 8017356:	89a3      	ldrh	r3, [r4, #12]
 8017358:	f043 0320 	orr.w	r3, r3, #32
 801735c:	81a3      	strh	r3, [r4, #12]
 801735e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017362:	e7f3      	b.n	801734c <__ssrefill_r+0x22>

08017364 <__ssvfiscanf_r>:
 8017364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017368:	460c      	mov	r4, r1
 801736a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801736e:	2100      	movs	r1, #0
 8017370:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017374:	49b2      	ldr	r1, [pc, #712]	; (8017640 <__ssvfiscanf_r+0x2dc>)
 8017376:	91a0      	str	r1, [sp, #640]	; 0x280
 8017378:	f10d 0804 	add.w	r8, sp, #4
 801737c:	49b1      	ldr	r1, [pc, #708]	; (8017644 <__ssvfiscanf_r+0x2e0>)
 801737e:	4fb2      	ldr	r7, [pc, #712]	; (8017648 <__ssvfiscanf_r+0x2e4>)
 8017380:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801764c <__ssvfiscanf_r+0x2e8>
 8017384:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017388:	4606      	mov	r6, r0
 801738a:	91a1      	str	r1, [sp, #644]	; 0x284
 801738c:	9300      	str	r3, [sp, #0]
 801738e:	f892 a000 	ldrb.w	sl, [r2]
 8017392:	f1ba 0f00 	cmp.w	sl, #0
 8017396:	f000 8151 	beq.w	801763c <__ssvfiscanf_r+0x2d8>
 801739a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801739e:	f013 0308 	ands.w	r3, r3, #8
 80173a2:	f102 0501 	add.w	r5, r2, #1
 80173a6:	d019      	beq.n	80173dc <__ssvfiscanf_r+0x78>
 80173a8:	6863      	ldr	r3, [r4, #4]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	dd0f      	ble.n	80173ce <__ssvfiscanf_r+0x6a>
 80173ae:	6823      	ldr	r3, [r4, #0]
 80173b0:	781a      	ldrb	r2, [r3, #0]
 80173b2:	5cba      	ldrb	r2, [r7, r2]
 80173b4:	0712      	lsls	r2, r2, #28
 80173b6:	d401      	bmi.n	80173bc <__ssvfiscanf_r+0x58>
 80173b8:	462a      	mov	r2, r5
 80173ba:	e7e8      	b.n	801738e <__ssvfiscanf_r+0x2a>
 80173bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80173be:	3201      	adds	r2, #1
 80173c0:	9245      	str	r2, [sp, #276]	; 0x114
 80173c2:	6862      	ldr	r2, [r4, #4]
 80173c4:	3301      	adds	r3, #1
 80173c6:	3a01      	subs	r2, #1
 80173c8:	6062      	str	r2, [r4, #4]
 80173ca:	6023      	str	r3, [r4, #0]
 80173cc:	e7ec      	b.n	80173a8 <__ssvfiscanf_r+0x44>
 80173ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80173d0:	4621      	mov	r1, r4
 80173d2:	4630      	mov	r0, r6
 80173d4:	4798      	blx	r3
 80173d6:	2800      	cmp	r0, #0
 80173d8:	d0e9      	beq.n	80173ae <__ssvfiscanf_r+0x4a>
 80173da:	e7ed      	b.n	80173b8 <__ssvfiscanf_r+0x54>
 80173dc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80173e0:	f040 8083 	bne.w	80174ea <__ssvfiscanf_r+0x186>
 80173e4:	9341      	str	r3, [sp, #260]	; 0x104
 80173e6:	9343      	str	r3, [sp, #268]	; 0x10c
 80173e8:	7853      	ldrb	r3, [r2, #1]
 80173ea:	2b2a      	cmp	r3, #42	; 0x2a
 80173ec:	bf02      	ittt	eq
 80173ee:	2310      	moveq	r3, #16
 80173f0:	1c95      	addeq	r5, r2, #2
 80173f2:	9341      	streq	r3, [sp, #260]	; 0x104
 80173f4:	220a      	movs	r2, #10
 80173f6:	46ab      	mov	fp, r5
 80173f8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80173fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017400:	2b09      	cmp	r3, #9
 8017402:	d91d      	bls.n	8017440 <__ssvfiscanf_r+0xdc>
 8017404:	4891      	ldr	r0, [pc, #580]	; (801764c <__ssvfiscanf_r+0x2e8>)
 8017406:	2203      	movs	r2, #3
 8017408:	f7e8 fefa 	bl	8000200 <memchr>
 801740c:	b140      	cbz	r0, 8017420 <__ssvfiscanf_r+0xbc>
 801740e:	2301      	movs	r3, #1
 8017410:	eba0 0009 	sub.w	r0, r0, r9
 8017414:	fa03 f000 	lsl.w	r0, r3, r0
 8017418:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801741a:	4318      	orrs	r0, r3
 801741c:	9041      	str	r0, [sp, #260]	; 0x104
 801741e:	465d      	mov	r5, fp
 8017420:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017424:	2b78      	cmp	r3, #120	; 0x78
 8017426:	d806      	bhi.n	8017436 <__ssvfiscanf_r+0xd2>
 8017428:	2b57      	cmp	r3, #87	; 0x57
 801742a:	d810      	bhi.n	801744e <__ssvfiscanf_r+0xea>
 801742c:	2b25      	cmp	r3, #37	; 0x25
 801742e:	d05c      	beq.n	80174ea <__ssvfiscanf_r+0x186>
 8017430:	d856      	bhi.n	80174e0 <__ssvfiscanf_r+0x17c>
 8017432:	2b00      	cmp	r3, #0
 8017434:	d074      	beq.n	8017520 <__ssvfiscanf_r+0x1bc>
 8017436:	2303      	movs	r3, #3
 8017438:	9347      	str	r3, [sp, #284]	; 0x11c
 801743a:	230a      	movs	r3, #10
 801743c:	9342      	str	r3, [sp, #264]	; 0x108
 801743e:	e081      	b.n	8017544 <__ssvfiscanf_r+0x1e0>
 8017440:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017442:	fb02 1303 	mla	r3, r2, r3, r1
 8017446:	3b30      	subs	r3, #48	; 0x30
 8017448:	9343      	str	r3, [sp, #268]	; 0x10c
 801744a:	465d      	mov	r5, fp
 801744c:	e7d3      	b.n	80173f6 <__ssvfiscanf_r+0x92>
 801744e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017452:	2a20      	cmp	r2, #32
 8017454:	d8ef      	bhi.n	8017436 <__ssvfiscanf_r+0xd2>
 8017456:	a101      	add	r1, pc, #4	; (adr r1, 801745c <__ssvfiscanf_r+0xf8>)
 8017458:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801745c:	0801752f 	.word	0x0801752f
 8017460:	08017437 	.word	0x08017437
 8017464:	08017437 	.word	0x08017437
 8017468:	0801758d 	.word	0x0801758d
 801746c:	08017437 	.word	0x08017437
 8017470:	08017437 	.word	0x08017437
 8017474:	08017437 	.word	0x08017437
 8017478:	08017437 	.word	0x08017437
 801747c:	08017437 	.word	0x08017437
 8017480:	08017437 	.word	0x08017437
 8017484:	08017437 	.word	0x08017437
 8017488:	080175a3 	.word	0x080175a3
 801748c:	08017579 	.word	0x08017579
 8017490:	080174e7 	.word	0x080174e7
 8017494:	080174e7 	.word	0x080174e7
 8017498:	080174e7 	.word	0x080174e7
 801749c:	08017437 	.word	0x08017437
 80174a0:	0801757d 	.word	0x0801757d
 80174a4:	08017437 	.word	0x08017437
 80174a8:	08017437 	.word	0x08017437
 80174ac:	08017437 	.word	0x08017437
 80174b0:	08017437 	.word	0x08017437
 80174b4:	080175b3 	.word	0x080175b3
 80174b8:	08017585 	.word	0x08017585
 80174bc:	08017527 	.word	0x08017527
 80174c0:	08017437 	.word	0x08017437
 80174c4:	08017437 	.word	0x08017437
 80174c8:	080175af 	.word	0x080175af
 80174cc:	08017437 	.word	0x08017437
 80174d0:	08017579 	.word	0x08017579
 80174d4:	08017437 	.word	0x08017437
 80174d8:	08017437 	.word	0x08017437
 80174dc:	0801752f 	.word	0x0801752f
 80174e0:	3b45      	subs	r3, #69	; 0x45
 80174e2:	2b02      	cmp	r3, #2
 80174e4:	d8a7      	bhi.n	8017436 <__ssvfiscanf_r+0xd2>
 80174e6:	2305      	movs	r3, #5
 80174e8:	e02b      	b.n	8017542 <__ssvfiscanf_r+0x1de>
 80174ea:	6863      	ldr	r3, [r4, #4]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	dd0d      	ble.n	801750c <__ssvfiscanf_r+0x1a8>
 80174f0:	6823      	ldr	r3, [r4, #0]
 80174f2:	781a      	ldrb	r2, [r3, #0]
 80174f4:	4552      	cmp	r2, sl
 80174f6:	f040 80a1 	bne.w	801763c <__ssvfiscanf_r+0x2d8>
 80174fa:	3301      	adds	r3, #1
 80174fc:	6862      	ldr	r2, [r4, #4]
 80174fe:	6023      	str	r3, [r4, #0]
 8017500:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017502:	3a01      	subs	r2, #1
 8017504:	3301      	adds	r3, #1
 8017506:	6062      	str	r2, [r4, #4]
 8017508:	9345      	str	r3, [sp, #276]	; 0x114
 801750a:	e755      	b.n	80173b8 <__ssvfiscanf_r+0x54>
 801750c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801750e:	4621      	mov	r1, r4
 8017510:	4630      	mov	r0, r6
 8017512:	4798      	blx	r3
 8017514:	2800      	cmp	r0, #0
 8017516:	d0eb      	beq.n	80174f0 <__ssvfiscanf_r+0x18c>
 8017518:	9844      	ldr	r0, [sp, #272]	; 0x110
 801751a:	2800      	cmp	r0, #0
 801751c:	f040 8084 	bne.w	8017628 <__ssvfiscanf_r+0x2c4>
 8017520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017524:	e086      	b.n	8017634 <__ssvfiscanf_r+0x2d0>
 8017526:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017528:	f042 0220 	orr.w	r2, r2, #32
 801752c:	9241      	str	r2, [sp, #260]	; 0x104
 801752e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017534:	9241      	str	r2, [sp, #260]	; 0x104
 8017536:	2210      	movs	r2, #16
 8017538:	2b6f      	cmp	r3, #111	; 0x6f
 801753a:	9242      	str	r2, [sp, #264]	; 0x108
 801753c:	bf34      	ite	cc
 801753e:	2303      	movcc	r3, #3
 8017540:	2304      	movcs	r3, #4
 8017542:	9347      	str	r3, [sp, #284]	; 0x11c
 8017544:	6863      	ldr	r3, [r4, #4]
 8017546:	2b00      	cmp	r3, #0
 8017548:	dd41      	ble.n	80175ce <__ssvfiscanf_r+0x26a>
 801754a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801754c:	0659      	lsls	r1, r3, #25
 801754e:	d404      	bmi.n	801755a <__ssvfiscanf_r+0x1f6>
 8017550:	6823      	ldr	r3, [r4, #0]
 8017552:	781a      	ldrb	r2, [r3, #0]
 8017554:	5cba      	ldrb	r2, [r7, r2]
 8017556:	0712      	lsls	r2, r2, #28
 8017558:	d440      	bmi.n	80175dc <__ssvfiscanf_r+0x278>
 801755a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801755c:	2b02      	cmp	r3, #2
 801755e:	dc4f      	bgt.n	8017600 <__ssvfiscanf_r+0x29c>
 8017560:	466b      	mov	r3, sp
 8017562:	4622      	mov	r2, r4
 8017564:	a941      	add	r1, sp, #260	; 0x104
 8017566:	4630      	mov	r0, r6
 8017568:	f000 f874 	bl	8017654 <_scanf_chars>
 801756c:	2801      	cmp	r0, #1
 801756e:	d065      	beq.n	801763c <__ssvfiscanf_r+0x2d8>
 8017570:	2802      	cmp	r0, #2
 8017572:	f47f af21 	bne.w	80173b8 <__ssvfiscanf_r+0x54>
 8017576:	e7cf      	b.n	8017518 <__ssvfiscanf_r+0x1b4>
 8017578:	220a      	movs	r2, #10
 801757a:	e7dd      	b.n	8017538 <__ssvfiscanf_r+0x1d4>
 801757c:	2300      	movs	r3, #0
 801757e:	9342      	str	r3, [sp, #264]	; 0x108
 8017580:	2303      	movs	r3, #3
 8017582:	e7de      	b.n	8017542 <__ssvfiscanf_r+0x1de>
 8017584:	2308      	movs	r3, #8
 8017586:	9342      	str	r3, [sp, #264]	; 0x108
 8017588:	2304      	movs	r3, #4
 801758a:	e7da      	b.n	8017542 <__ssvfiscanf_r+0x1de>
 801758c:	4629      	mov	r1, r5
 801758e:	4640      	mov	r0, r8
 8017590:	f000 f9c6 	bl	8017920 <__sccl>
 8017594:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801759a:	9341      	str	r3, [sp, #260]	; 0x104
 801759c:	4605      	mov	r5, r0
 801759e:	2301      	movs	r3, #1
 80175a0:	e7cf      	b.n	8017542 <__ssvfiscanf_r+0x1de>
 80175a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80175a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175a8:	9341      	str	r3, [sp, #260]	; 0x104
 80175aa:	2300      	movs	r3, #0
 80175ac:	e7c9      	b.n	8017542 <__ssvfiscanf_r+0x1de>
 80175ae:	2302      	movs	r3, #2
 80175b0:	e7c7      	b.n	8017542 <__ssvfiscanf_r+0x1de>
 80175b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80175b4:	06c3      	lsls	r3, r0, #27
 80175b6:	f53f aeff 	bmi.w	80173b8 <__ssvfiscanf_r+0x54>
 80175ba:	9b00      	ldr	r3, [sp, #0]
 80175bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80175be:	1d19      	adds	r1, r3, #4
 80175c0:	9100      	str	r1, [sp, #0]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	07c0      	lsls	r0, r0, #31
 80175c6:	bf4c      	ite	mi
 80175c8:	801a      	strhmi	r2, [r3, #0]
 80175ca:	601a      	strpl	r2, [r3, #0]
 80175cc:	e6f4      	b.n	80173b8 <__ssvfiscanf_r+0x54>
 80175ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80175d0:	4621      	mov	r1, r4
 80175d2:	4630      	mov	r0, r6
 80175d4:	4798      	blx	r3
 80175d6:	2800      	cmp	r0, #0
 80175d8:	d0b7      	beq.n	801754a <__ssvfiscanf_r+0x1e6>
 80175da:	e79d      	b.n	8017518 <__ssvfiscanf_r+0x1b4>
 80175dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80175de:	3201      	adds	r2, #1
 80175e0:	9245      	str	r2, [sp, #276]	; 0x114
 80175e2:	6862      	ldr	r2, [r4, #4]
 80175e4:	3a01      	subs	r2, #1
 80175e6:	2a00      	cmp	r2, #0
 80175e8:	6062      	str	r2, [r4, #4]
 80175ea:	dd02      	ble.n	80175f2 <__ssvfiscanf_r+0x28e>
 80175ec:	3301      	adds	r3, #1
 80175ee:	6023      	str	r3, [r4, #0]
 80175f0:	e7ae      	b.n	8017550 <__ssvfiscanf_r+0x1ec>
 80175f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80175f4:	4621      	mov	r1, r4
 80175f6:	4630      	mov	r0, r6
 80175f8:	4798      	blx	r3
 80175fa:	2800      	cmp	r0, #0
 80175fc:	d0a8      	beq.n	8017550 <__ssvfiscanf_r+0x1ec>
 80175fe:	e78b      	b.n	8017518 <__ssvfiscanf_r+0x1b4>
 8017600:	2b04      	cmp	r3, #4
 8017602:	dc06      	bgt.n	8017612 <__ssvfiscanf_r+0x2ae>
 8017604:	466b      	mov	r3, sp
 8017606:	4622      	mov	r2, r4
 8017608:	a941      	add	r1, sp, #260	; 0x104
 801760a:	4630      	mov	r0, r6
 801760c:	f000 f87a 	bl	8017704 <_scanf_i>
 8017610:	e7ac      	b.n	801756c <__ssvfiscanf_r+0x208>
 8017612:	4b0f      	ldr	r3, [pc, #60]	; (8017650 <__ssvfiscanf_r+0x2ec>)
 8017614:	2b00      	cmp	r3, #0
 8017616:	f43f aecf 	beq.w	80173b8 <__ssvfiscanf_r+0x54>
 801761a:	466b      	mov	r3, sp
 801761c:	4622      	mov	r2, r4
 801761e:	a941      	add	r1, sp, #260	; 0x104
 8017620:	4630      	mov	r0, r6
 8017622:	f7fc fa93 	bl	8013b4c <_scanf_float>
 8017626:	e7a1      	b.n	801756c <__ssvfiscanf_r+0x208>
 8017628:	89a3      	ldrh	r3, [r4, #12]
 801762a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801762e:	bf18      	it	ne
 8017630:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8017634:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8017638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801763c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801763e:	e7f9      	b.n	8017634 <__ssvfiscanf_r+0x2d0>
 8017640:	080172b1 	.word	0x080172b1
 8017644:	0801732b 	.word	0x0801732b
 8017648:	08018645 	.word	0x08018645
 801764c:	08018ab2 	.word	0x08018ab2
 8017650:	08013b4d 	.word	0x08013b4d

08017654 <_scanf_chars>:
 8017654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017658:	4615      	mov	r5, r2
 801765a:	688a      	ldr	r2, [r1, #8]
 801765c:	4680      	mov	r8, r0
 801765e:	460c      	mov	r4, r1
 8017660:	b932      	cbnz	r2, 8017670 <_scanf_chars+0x1c>
 8017662:	698a      	ldr	r2, [r1, #24]
 8017664:	2a00      	cmp	r2, #0
 8017666:	bf0c      	ite	eq
 8017668:	2201      	moveq	r2, #1
 801766a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 801766e:	608a      	str	r2, [r1, #8]
 8017670:	6822      	ldr	r2, [r4, #0]
 8017672:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8017700 <_scanf_chars+0xac>
 8017676:	06d1      	lsls	r1, r2, #27
 8017678:	bf5f      	itttt	pl
 801767a:	681a      	ldrpl	r2, [r3, #0]
 801767c:	1d11      	addpl	r1, r2, #4
 801767e:	6019      	strpl	r1, [r3, #0]
 8017680:	6816      	ldrpl	r6, [r2, #0]
 8017682:	2700      	movs	r7, #0
 8017684:	69a0      	ldr	r0, [r4, #24]
 8017686:	b188      	cbz	r0, 80176ac <_scanf_chars+0x58>
 8017688:	2801      	cmp	r0, #1
 801768a:	d107      	bne.n	801769c <_scanf_chars+0x48>
 801768c:	682b      	ldr	r3, [r5, #0]
 801768e:	781a      	ldrb	r2, [r3, #0]
 8017690:	6963      	ldr	r3, [r4, #20]
 8017692:	5c9b      	ldrb	r3, [r3, r2]
 8017694:	b953      	cbnz	r3, 80176ac <_scanf_chars+0x58>
 8017696:	bb27      	cbnz	r7, 80176e2 <_scanf_chars+0x8e>
 8017698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801769c:	2802      	cmp	r0, #2
 801769e:	d120      	bne.n	80176e2 <_scanf_chars+0x8e>
 80176a0:	682b      	ldr	r3, [r5, #0]
 80176a2:	781b      	ldrb	r3, [r3, #0]
 80176a4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80176a8:	071b      	lsls	r3, r3, #28
 80176aa:	d41a      	bmi.n	80176e2 <_scanf_chars+0x8e>
 80176ac:	6823      	ldr	r3, [r4, #0]
 80176ae:	06da      	lsls	r2, r3, #27
 80176b0:	bf5e      	ittt	pl
 80176b2:	682b      	ldrpl	r3, [r5, #0]
 80176b4:	781b      	ldrbpl	r3, [r3, #0]
 80176b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80176ba:	682a      	ldr	r2, [r5, #0]
 80176bc:	686b      	ldr	r3, [r5, #4]
 80176be:	3201      	adds	r2, #1
 80176c0:	602a      	str	r2, [r5, #0]
 80176c2:	68a2      	ldr	r2, [r4, #8]
 80176c4:	3b01      	subs	r3, #1
 80176c6:	3a01      	subs	r2, #1
 80176c8:	606b      	str	r3, [r5, #4]
 80176ca:	3701      	adds	r7, #1
 80176cc:	60a2      	str	r2, [r4, #8]
 80176ce:	b142      	cbz	r2, 80176e2 <_scanf_chars+0x8e>
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	dcd7      	bgt.n	8017684 <_scanf_chars+0x30>
 80176d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80176d8:	4629      	mov	r1, r5
 80176da:	4640      	mov	r0, r8
 80176dc:	4798      	blx	r3
 80176de:	2800      	cmp	r0, #0
 80176e0:	d0d0      	beq.n	8017684 <_scanf_chars+0x30>
 80176e2:	6823      	ldr	r3, [r4, #0]
 80176e4:	f013 0310 	ands.w	r3, r3, #16
 80176e8:	d105      	bne.n	80176f6 <_scanf_chars+0xa2>
 80176ea:	68e2      	ldr	r2, [r4, #12]
 80176ec:	3201      	adds	r2, #1
 80176ee:	60e2      	str	r2, [r4, #12]
 80176f0:	69a2      	ldr	r2, [r4, #24]
 80176f2:	b102      	cbz	r2, 80176f6 <_scanf_chars+0xa2>
 80176f4:	7033      	strb	r3, [r6, #0]
 80176f6:	6923      	ldr	r3, [r4, #16]
 80176f8:	441f      	add	r7, r3
 80176fa:	6127      	str	r7, [r4, #16]
 80176fc:	2000      	movs	r0, #0
 80176fe:	e7cb      	b.n	8017698 <_scanf_chars+0x44>
 8017700:	08018645 	.word	0x08018645

08017704 <_scanf_i>:
 8017704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017708:	4698      	mov	r8, r3
 801770a:	4b74      	ldr	r3, [pc, #464]	; (80178dc <_scanf_i+0x1d8>)
 801770c:	460c      	mov	r4, r1
 801770e:	4682      	mov	sl, r0
 8017710:	4616      	mov	r6, r2
 8017712:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017716:	b087      	sub	sp, #28
 8017718:	ab03      	add	r3, sp, #12
 801771a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801771e:	4b70      	ldr	r3, [pc, #448]	; (80178e0 <_scanf_i+0x1dc>)
 8017720:	69a1      	ldr	r1, [r4, #24]
 8017722:	4a70      	ldr	r2, [pc, #448]	; (80178e4 <_scanf_i+0x1e0>)
 8017724:	2903      	cmp	r1, #3
 8017726:	bf18      	it	ne
 8017728:	461a      	movne	r2, r3
 801772a:	68a3      	ldr	r3, [r4, #8]
 801772c:	9201      	str	r2, [sp, #4]
 801772e:	1e5a      	subs	r2, r3, #1
 8017730:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017734:	bf88      	it	hi
 8017736:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801773a:	4627      	mov	r7, r4
 801773c:	bf82      	ittt	hi
 801773e:	eb03 0905 	addhi.w	r9, r3, r5
 8017742:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017746:	60a3      	strhi	r3, [r4, #8]
 8017748:	f857 3b1c 	ldr.w	r3, [r7], #28
 801774c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017750:	bf98      	it	ls
 8017752:	f04f 0900 	movls.w	r9, #0
 8017756:	6023      	str	r3, [r4, #0]
 8017758:	463d      	mov	r5, r7
 801775a:	f04f 0b00 	mov.w	fp, #0
 801775e:	6831      	ldr	r1, [r6, #0]
 8017760:	ab03      	add	r3, sp, #12
 8017762:	7809      	ldrb	r1, [r1, #0]
 8017764:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017768:	2202      	movs	r2, #2
 801776a:	f7e8 fd49 	bl	8000200 <memchr>
 801776e:	b328      	cbz	r0, 80177bc <_scanf_i+0xb8>
 8017770:	f1bb 0f01 	cmp.w	fp, #1
 8017774:	d159      	bne.n	801782a <_scanf_i+0x126>
 8017776:	6862      	ldr	r2, [r4, #4]
 8017778:	b92a      	cbnz	r2, 8017786 <_scanf_i+0x82>
 801777a:	6822      	ldr	r2, [r4, #0]
 801777c:	2308      	movs	r3, #8
 801777e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017782:	6063      	str	r3, [r4, #4]
 8017784:	6022      	str	r2, [r4, #0]
 8017786:	6822      	ldr	r2, [r4, #0]
 8017788:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801778c:	6022      	str	r2, [r4, #0]
 801778e:	68a2      	ldr	r2, [r4, #8]
 8017790:	1e51      	subs	r1, r2, #1
 8017792:	60a1      	str	r1, [r4, #8]
 8017794:	b192      	cbz	r2, 80177bc <_scanf_i+0xb8>
 8017796:	6832      	ldr	r2, [r6, #0]
 8017798:	1c51      	adds	r1, r2, #1
 801779a:	6031      	str	r1, [r6, #0]
 801779c:	7812      	ldrb	r2, [r2, #0]
 801779e:	f805 2b01 	strb.w	r2, [r5], #1
 80177a2:	6872      	ldr	r2, [r6, #4]
 80177a4:	3a01      	subs	r2, #1
 80177a6:	2a00      	cmp	r2, #0
 80177a8:	6072      	str	r2, [r6, #4]
 80177aa:	dc07      	bgt.n	80177bc <_scanf_i+0xb8>
 80177ac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80177b0:	4631      	mov	r1, r6
 80177b2:	4650      	mov	r0, sl
 80177b4:	4790      	blx	r2
 80177b6:	2800      	cmp	r0, #0
 80177b8:	f040 8085 	bne.w	80178c6 <_scanf_i+0x1c2>
 80177bc:	f10b 0b01 	add.w	fp, fp, #1
 80177c0:	f1bb 0f03 	cmp.w	fp, #3
 80177c4:	d1cb      	bne.n	801775e <_scanf_i+0x5a>
 80177c6:	6863      	ldr	r3, [r4, #4]
 80177c8:	b90b      	cbnz	r3, 80177ce <_scanf_i+0xca>
 80177ca:	230a      	movs	r3, #10
 80177cc:	6063      	str	r3, [r4, #4]
 80177ce:	6863      	ldr	r3, [r4, #4]
 80177d0:	4945      	ldr	r1, [pc, #276]	; (80178e8 <_scanf_i+0x1e4>)
 80177d2:	6960      	ldr	r0, [r4, #20]
 80177d4:	1ac9      	subs	r1, r1, r3
 80177d6:	f000 f8a3 	bl	8017920 <__sccl>
 80177da:	f04f 0b00 	mov.w	fp, #0
 80177de:	68a3      	ldr	r3, [r4, #8]
 80177e0:	6822      	ldr	r2, [r4, #0]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d03d      	beq.n	8017862 <_scanf_i+0x15e>
 80177e6:	6831      	ldr	r1, [r6, #0]
 80177e8:	6960      	ldr	r0, [r4, #20]
 80177ea:	f891 c000 	ldrb.w	ip, [r1]
 80177ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 80177f2:	2800      	cmp	r0, #0
 80177f4:	d035      	beq.n	8017862 <_scanf_i+0x15e>
 80177f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80177fa:	d124      	bne.n	8017846 <_scanf_i+0x142>
 80177fc:	0510      	lsls	r0, r2, #20
 80177fe:	d522      	bpl.n	8017846 <_scanf_i+0x142>
 8017800:	f10b 0b01 	add.w	fp, fp, #1
 8017804:	f1b9 0f00 	cmp.w	r9, #0
 8017808:	d003      	beq.n	8017812 <_scanf_i+0x10e>
 801780a:	3301      	adds	r3, #1
 801780c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8017810:	60a3      	str	r3, [r4, #8]
 8017812:	6873      	ldr	r3, [r6, #4]
 8017814:	3b01      	subs	r3, #1
 8017816:	2b00      	cmp	r3, #0
 8017818:	6073      	str	r3, [r6, #4]
 801781a:	dd1b      	ble.n	8017854 <_scanf_i+0x150>
 801781c:	6833      	ldr	r3, [r6, #0]
 801781e:	3301      	adds	r3, #1
 8017820:	6033      	str	r3, [r6, #0]
 8017822:	68a3      	ldr	r3, [r4, #8]
 8017824:	3b01      	subs	r3, #1
 8017826:	60a3      	str	r3, [r4, #8]
 8017828:	e7d9      	b.n	80177de <_scanf_i+0xda>
 801782a:	f1bb 0f02 	cmp.w	fp, #2
 801782e:	d1ae      	bne.n	801778e <_scanf_i+0x8a>
 8017830:	6822      	ldr	r2, [r4, #0]
 8017832:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017836:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801783a:	d1bf      	bne.n	80177bc <_scanf_i+0xb8>
 801783c:	2310      	movs	r3, #16
 801783e:	6063      	str	r3, [r4, #4]
 8017840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017844:	e7a2      	b.n	801778c <_scanf_i+0x88>
 8017846:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801784a:	6022      	str	r2, [r4, #0]
 801784c:	780b      	ldrb	r3, [r1, #0]
 801784e:	f805 3b01 	strb.w	r3, [r5], #1
 8017852:	e7de      	b.n	8017812 <_scanf_i+0x10e>
 8017854:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017858:	4631      	mov	r1, r6
 801785a:	4650      	mov	r0, sl
 801785c:	4798      	blx	r3
 801785e:	2800      	cmp	r0, #0
 8017860:	d0df      	beq.n	8017822 <_scanf_i+0x11e>
 8017862:	6823      	ldr	r3, [r4, #0]
 8017864:	05d9      	lsls	r1, r3, #23
 8017866:	d50d      	bpl.n	8017884 <_scanf_i+0x180>
 8017868:	42bd      	cmp	r5, r7
 801786a:	d909      	bls.n	8017880 <_scanf_i+0x17c>
 801786c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017870:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017874:	4632      	mov	r2, r6
 8017876:	4650      	mov	r0, sl
 8017878:	4798      	blx	r3
 801787a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 801787e:	464d      	mov	r5, r9
 8017880:	42bd      	cmp	r5, r7
 8017882:	d028      	beq.n	80178d6 <_scanf_i+0x1d2>
 8017884:	6822      	ldr	r2, [r4, #0]
 8017886:	f012 0210 	ands.w	r2, r2, #16
 801788a:	d113      	bne.n	80178b4 <_scanf_i+0x1b0>
 801788c:	702a      	strb	r2, [r5, #0]
 801788e:	6863      	ldr	r3, [r4, #4]
 8017890:	9e01      	ldr	r6, [sp, #4]
 8017892:	4639      	mov	r1, r7
 8017894:	4650      	mov	r0, sl
 8017896:	47b0      	blx	r6
 8017898:	f8d8 3000 	ldr.w	r3, [r8]
 801789c:	6821      	ldr	r1, [r4, #0]
 801789e:	1d1a      	adds	r2, r3, #4
 80178a0:	f8c8 2000 	str.w	r2, [r8]
 80178a4:	f011 0f20 	tst.w	r1, #32
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	d00f      	beq.n	80178cc <_scanf_i+0x1c8>
 80178ac:	6018      	str	r0, [r3, #0]
 80178ae:	68e3      	ldr	r3, [r4, #12]
 80178b0:	3301      	adds	r3, #1
 80178b2:	60e3      	str	r3, [r4, #12]
 80178b4:	1bed      	subs	r5, r5, r7
 80178b6:	44ab      	add	fp, r5
 80178b8:	6925      	ldr	r5, [r4, #16]
 80178ba:	445d      	add	r5, fp
 80178bc:	6125      	str	r5, [r4, #16]
 80178be:	2000      	movs	r0, #0
 80178c0:	b007      	add	sp, #28
 80178c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178c6:	f04f 0b00 	mov.w	fp, #0
 80178ca:	e7ca      	b.n	8017862 <_scanf_i+0x15e>
 80178cc:	07ca      	lsls	r2, r1, #31
 80178ce:	bf4c      	ite	mi
 80178d0:	8018      	strhmi	r0, [r3, #0]
 80178d2:	6018      	strpl	r0, [r3, #0]
 80178d4:	e7eb      	b.n	80178ae <_scanf_i+0x1aa>
 80178d6:	2001      	movs	r0, #1
 80178d8:	e7f2      	b.n	80178c0 <_scanf_i+0x1bc>
 80178da:	bf00      	nop
 80178dc:	080184dc 	.word	0x080184dc
 80178e0:	08017a8d 	.word	0x08017a8d
 80178e4:	08014f29 	.word	0x08014f29
 80178e8:	08018ad6 	.word	0x08018ad6

080178ec <_read_r>:
 80178ec:	b538      	push	{r3, r4, r5, lr}
 80178ee:	4d07      	ldr	r5, [pc, #28]	; (801790c <_read_r+0x20>)
 80178f0:	4604      	mov	r4, r0
 80178f2:	4608      	mov	r0, r1
 80178f4:	4611      	mov	r1, r2
 80178f6:	2200      	movs	r2, #0
 80178f8:	602a      	str	r2, [r5, #0]
 80178fa:	461a      	mov	r2, r3
 80178fc:	f7eb ff64 	bl	80037c8 <_read>
 8017900:	1c43      	adds	r3, r0, #1
 8017902:	d102      	bne.n	801790a <_read_r+0x1e>
 8017904:	682b      	ldr	r3, [r5, #0]
 8017906:	b103      	cbz	r3, 801790a <_read_r+0x1e>
 8017908:	6023      	str	r3, [r4, #0]
 801790a:	bd38      	pop	{r3, r4, r5, pc}
 801790c:	2000cb2c 	.word	0x2000cb2c

08017910 <nan>:
 8017910:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017918 <nan+0x8>
 8017914:	4770      	bx	lr
 8017916:	bf00      	nop
 8017918:	00000000 	.word	0x00000000
 801791c:	7ff80000 	.word	0x7ff80000

08017920 <__sccl>:
 8017920:	b570      	push	{r4, r5, r6, lr}
 8017922:	780b      	ldrb	r3, [r1, #0]
 8017924:	4604      	mov	r4, r0
 8017926:	2b5e      	cmp	r3, #94	; 0x5e
 8017928:	bf0b      	itete	eq
 801792a:	784b      	ldrbeq	r3, [r1, #1]
 801792c:	1c48      	addne	r0, r1, #1
 801792e:	1c88      	addeq	r0, r1, #2
 8017930:	2200      	movne	r2, #0
 8017932:	bf08      	it	eq
 8017934:	2201      	moveq	r2, #1
 8017936:	1e61      	subs	r1, r4, #1
 8017938:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801793c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8017940:	42a9      	cmp	r1, r5
 8017942:	d1fb      	bne.n	801793c <__sccl+0x1c>
 8017944:	b90b      	cbnz	r3, 801794a <__sccl+0x2a>
 8017946:	3801      	subs	r0, #1
 8017948:	bd70      	pop	{r4, r5, r6, pc}
 801794a:	f082 0101 	eor.w	r1, r2, #1
 801794e:	54e1      	strb	r1, [r4, r3]
 8017950:	1c42      	adds	r2, r0, #1
 8017952:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8017956:	2d2d      	cmp	r5, #45	; 0x2d
 8017958:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 801795c:	4610      	mov	r0, r2
 801795e:	d006      	beq.n	801796e <__sccl+0x4e>
 8017960:	2d5d      	cmp	r5, #93	; 0x5d
 8017962:	d0f1      	beq.n	8017948 <__sccl+0x28>
 8017964:	b90d      	cbnz	r5, 801796a <__sccl+0x4a>
 8017966:	4630      	mov	r0, r6
 8017968:	e7ee      	b.n	8017948 <__sccl+0x28>
 801796a:	462b      	mov	r3, r5
 801796c:	e7ef      	b.n	801794e <__sccl+0x2e>
 801796e:	7816      	ldrb	r6, [r2, #0]
 8017970:	2e5d      	cmp	r6, #93	; 0x5d
 8017972:	d0fa      	beq.n	801796a <__sccl+0x4a>
 8017974:	42b3      	cmp	r3, r6
 8017976:	dcf8      	bgt.n	801796a <__sccl+0x4a>
 8017978:	4618      	mov	r0, r3
 801797a:	3001      	adds	r0, #1
 801797c:	4286      	cmp	r6, r0
 801797e:	5421      	strb	r1, [r4, r0]
 8017980:	dcfb      	bgt.n	801797a <__sccl+0x5a>
 8017982:	43d8      	mvns	r0, r3
 8017984:	4430      	add	r0, r6
 8017986:	1c5d      	adds	r5, r3, #1
 8017988:	42b3      	cmp	r3, r6
 801798a:	bfa8      	it	ge
 801798c:	2000      	movge	r0, #0
 801798e:	182b      	adds	r3, r5, r0
 8017990:	3202      	adds	r2, #2
 8017992:	e7de      	b.n	8017952 <__sccl+0x32>

08017994 <_strtoul_l.isra.0>:
 8017994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017998:	4e3b      	ldr	r6, [pc, #236]	; (8017a88 <_strtoul_l.isra.0+0xf4>)
 801799a:	4686      	mov	lr, r0
 801799c:	468c      	mov	ip, r1
 801799e:	4660      	mov	r0, ip
 80179a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80179a4:	5da5      	ldrb	r5, [r4, r6]
 80179a6:	f015 0508 	ands.w	r5, r5, #8
 80179aa:	d1f8      	bne.n	801799e <_strtoul_l.isra.0+0xa>
 80179ac:	2c2d      	cmp	r4, #45	; 0x2d
 80179ae:	d134      	bne.n	8017a1a <_strtoul_l.isra.0+0x86>
 80179b0:	f89c 4000 	ldrb.w	r4, [ip]
 80179b4:	f04f 0801 	mov.w	r8, #1
 80179b8:	f100 0c02 	add.w	ip, r0, #2
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d05e      	beq.n	8017a7e <_strtoul_l.isra.0+0xea>
 80179c0:	2b10      	cmp	r3, #16
 80179c2:	d10c      	bne.n	80179de <_strtoul_l.isra.0+0x4a>
 80179c4:	2c30      	cmp	r4, #48	; 0x30
 80179c6:	d10a      	bne.n	80179de <_strtoul_l.isra.0+0x4a>
 80179c8:	f89c 0000 	ldrb.w	r0, [ip]
 80179cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80179d0:	2858      	cmp	r0, #88	; 0x58
 80179d2:	d14f      	bne.n	8017a74 <_strtoul_l.isra.0+0xe0>
 80179d4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80179d8:	2310      	movs	r3, #16
 80179da:	f10c 0c02 	add.w	ip, ip, #2
 80179de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80179e2:	2500      	movs	r5, #0
 80179e4:	fbb7 f7f3 	udiv	r7, r7, r3
 80179e8:	fb03 f907 	mul.w	r9, r3, r7
 80179ec:	ea6f 0909 	mvn.w	r9, r9
 80179f0:	4628      	mov	r0, r5
 80179f2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80179f6:	2e09      	cmp	r6, #9
 80179f8:	d818      	bhi.n	8017a2c <_strtoul_l.isra.0+0x98>
 80179fa:	4634      	mov	r4, r6
 80179fc:	42a3      	cmp	r3, r4
 80179fe:	dd24      	ble.n	8017a4a <_strtoul_l.isra.0+0xb6>
 8017a00:	2d00      	cmp	r5, #0
 8017a02:	db1f      	blt.n	8017a44 <_strtoul_l.isra.0+0xb0>
 8017a04:	4287      	cmp	r7, r0
 8017a06:	d31d      	bcc.n	8017a44 <_strtoul_l.isra.0+0xb0>
 8017a08:	d101      	bne.n	8017a0e <_strtoul_l.isra.0+0x7a>
 8017a0a:	45a1      	cmp	r9, r4
 8017a0c:	db1a      	blt.n	8017a44 <_strtoul_l.isra.0+0xb0>
 8017a0e:	fb00 4003 	mla	r0, r0, r3, r4
 8017a12:	2501      	movs	r5, #1
 8017a14:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8017a18:	e7eb      	b.n	80179f2 <_strtoul_l.isra.0+0x5e>
 8017a1a:	2c2b      	cmp	r4, #43	; 0x2b
 8017a1c:	bf08      	it	eq
 8017a1e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8017a22:	46a8      	mov	r8, r5
 8017a24:	bf08      	it	eq
 8017a26:	f100 0c02 	addeq.w	ip, r0, #2
 8017a2a:	e7c7      	b.n	80179bc <_strtoul_l.isra.0+0x28>
 8017a2c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8017a30:	2e19      	cmp	r6, #25
 8017a32:	d801      	bhi.n	8017a38 <_strtoul_l.isra.0+0xa4>
 8017a34:	3c37      	subs	r4, #55	; 0x37
 8017a36:	e7e1      	b.n	80179fc <_strtoul_l.isra.0+0x68>
 8017a38:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8017a3c:	2e19      	cmp	r6, #25
 8017a3e:	d804      	bhi.n	8017a4a <_strtoul_l.isra.0+0xb6>
 8017a40:	3c57      	subs	r4, #87	; 0x57
 8017a42:	e7db      	b.n	80179fc <_strtoul_l.isra.0+0x68>
 8017a44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017a48:	e7e4      	b.n	8017a14 <_strtoul_l.isra.0+0x80>
 8017a4a:	2d00      	cmp	r5, #0
 8017a4c:	da07      	bge.n	8017a5e <_strtoul_l.isra.0+0xca>
 8017a4e:	2322      	movs	r3, #34	; 0x22
 8017a50:	f8ce 3000 	str.w	r3, [lr]
 8017a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a58:	b942      	cbnz	r2, 8017a6c <_strtoul_l.isra.0+0xd8>
 8017a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a5e:	f1b8 0f00 	cmp.w	r8, #0
 8017a62:	d000      	beq.n	8017a66 <_strtoul_l.isra.0+0xd2>
 8017a64:	4240      	negs	r0, r0
 8017a66:	2a00      	cmp	r2, #0
 8017a68:	d0f7      	beq.n	8017a5a <_strtoul_l.isra.0+0xc6>
 8017a6a:	b10d      	cbz	r5, 8017a70 <_strtoul_l.isra.0+0xdc>
 8017a6c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8017a70:	6011      	str	r1, [r2, #0]
 8017a72:	e7f2      	b.n	8017a5a <_strtoul_l.isra.0+0xc6>
 8017a74:	2430      	movs	r4, #48	; 0x30
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d1b1      	bne.n	80179de <_strtoul_l.isra.0+0x4a>
 8017a7a:	2308      	movs	r3, #8
 8017a7c:	e7af      	b.n	80179de <_strtoul_l.isra.0+0x4a>
 8017a7e:	2c30      	cmp	r4, #48	; 0x30
 8017a80:	d0a2      	beq.n	80179c8 <_strtoul_l.isra.0+0x34>
 8017a82:	230a      	movs	r3, #10
 8017a84:	e7ab      	b.n	80179de <_strtoul_l.isra.0+0x4a>
 8017a86:	bf00      	nop
 8017a88:	08018645 	.word	0x08018645

08017a8c <_strtoul_r>:
 8017a8c:	f7ff bf82 	b.w	8017994 <_strtoul_l.isra.0>

08017a90 <__submore>:
 8017a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a94:	460c      	mov	r4, r1
 8017a96:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a9c:	4299      	cmp	r1, r3
 8017a9e:	d11d      	bne.n	8017adc <__submore+0x4c>
 8017aa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017aa4:	f7fb fb8e 	bl	80131c4 <_malloc_r>
 8017aa8:	b918      	cbnz	r0, 8017ab2 <__submore+0x22>
 8017aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017ab6:	63a3      	str	r3, [r4, #56]	; 0x38
 8017ab8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017abc:	6360      	str	r0, [r4, #52]	; 0x34
 8017abe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017ac2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017ac6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017aca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017ace:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017ad2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017ad6:	6020      	str	r0, [r4, #0]
 8017ad8:	2000      	movs	r0, #0
 8017ada:	e7e8      	b.n	8017aae <__submore+0x1e>
 8017adc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017ade:	0077      	lsls	r7, r6, #1
 8017ae0:	463a      	mov	r2, r7
 8017ae2:	f000 f867 	bl	8017bb4 <_realloc_r>
 8017ae6:	4605      	mov	r5, r0
 8017ae8:	2800      	cmp	r0, #0
 8017aea:	d0de      	beq.n	8017aaa <__submore+0x1a>
 8017aec:	eb00 0806 	add.w	r8, r0, r6
 8017af0:	4601      	mov	r1, r0
 8017af2:	4632      	mov	r2, r6
 8017af4:	4640      	mov	r0, r8
 8017af6:	f7fb fb4e 	bl	8013196 <memcpy>
 8017afa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017afe:	f8c4 8000 	str.w	r8, [r4]
 8017b02:	e7e9      	b.n	8017ad8 <__submore+0x48>

08017b04 <__ascii_wctomb>:
 8017b04:	b149      	cbz	r1, 8017b1a <__ascii_wctomb+0x16>
 8017b06:	2aff      	cmp	r2, #255	; 0xff
 8017b08:	bf85      	ittet	hi
 8017b0a:	238a      	movhi	r3, #138	; 0x8a
 8017b0c:	6003      	strhi	r3, [r0, #0]
 8017b0e:	700a      	strbls	r2, [r1, #0]
 8017b10:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8017b14:	bf98      	it	ls
 8017b16:	2001      	movls	r0, #1
 8017b18:	4770      	bx	lr
 8017b1a:	4608      	mov	r0, r1
 8017b1c:	4770      	bx	lr
	...

08017b20 <__assert_func>:
 8017b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017b22:	4614      	mov	r4, r2
 8017b24:	461a      	mov	r2, r3
 8017b26:	4b09      	ldr	r3, [pc, #36]	; (8017b4c <__assert_func+0x2c>)
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	4605      	mov	r5, r0
 8017b2c:	68d8      	ldr	r0, [r3, #12]
 8017b2e:	b14c      	cbz	r4, 8017b44 <__assert_func+0x24>
 8017b30:	4b07      	ldr	r3, [pc, #28]	; (8017b50 <__assert_func+0x30>)
 8017b32:	9100      	str	r1, [sp, #0]
 8017b34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017b38:	4906      	ldr	r1, [pc, #24]	; (8017b54 <__assert_func+0x34>)
 8017b3a:	462b      	mov	r3, r5
 8017b3c:	f000 f80e 	bl	8017b5c <fiprintf>
 8017b40:	f000 fa78 	bl	8018034 <abort>
 8017b44:	4b04      	ldr	r3, [pc, #16]	; (8017b58 <__assert_func+0x38>)
 8017b46:	461c      	mov	r4, r3
 8017b48:	e7f3      	b.n	8017b32 <__assert_func+0x12>
 8017b4a:	bf00      	nop
 8017b4c:	2000019c 	.word	0x2000019c
 8017b50:	08018ad8 	.word	0x08018ad8
 8017b54:	08018ae5 	.word	0x08018ae5
 8017b58:	08018b13 	.word	0x08018b13

08017b5c <fiprintf>:
 8017b5c:	b40e      	push	{r1, r2, r3}
 8017b5e:	b503      	push	{r0, r1, lr}
 8017b60:	4601      	mov	r1, r0
 8017b62:	ab03      	add	r3, sp, #12
 8017b64:	4805      	ldr	r0, [pc, #20]	; (8017b7c <fiprintf+0x20>)
 8017b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b6a:	6800      	ldr	r0, [r0, #0]
 8017b6c:	9301      	str	r3, [sp, #4]
 8017b6e:	f000 f871 	bl	8017c54 <_vfiprintf_r>
 8017b72:	b002      	add	sp, #8
 8017b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b78:	b003      	add	sp, #12
 8017b7a:	4770      	bx	lr
 8017b7c:	2000019c 	.word	0x2000019c

08017b80 <memmove>:
 8017b80:	4288      	cmp	r0, r1
 8017b82:	b510      	push	{r4, lr}
 8017b84:	eb01 0402 	add.w	r4, r1, r2
 8017b88:	d902      	bls.n	8017b90 <memmove+0x10>
 8017b8a:	4284      	cmp	r4, r0
 8017b8c:	4623      	mov	r3, r4
 8017b8e:	d807      	bhi.n	8017ba0 <memmove+0x20>
 8017b90:	1e43      	subs	r3, r0, #1
 8017b92:	42a1      	cmp	r1, r4
 8017b94:	d008      	beq.n	8017ba8 <memmove+0x28>
 8017b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017b9e:	e7f8      	b.n	8017b92 <memmove+0x12>
 8017ba0:	4402      	add	r2, r0
 8017ba2:	4601      	mov	r1, r0
 8017ba4:	428a      	cmp	r2, r1
 8017ba6:	d100      	bne.n	8017baa <memmove+0x2a>
 8017ba8:	bd10      	pop	{r4, pc}
 8017baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017bb2:	e7f7      	b.n	8017ba4 <memmove+0x24>

08017bb4 <_realloc_r>:
 8017bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bb6:	4607      	mov	r7, r0
 8017bb8:	4614      	mov	r4, r2
 8017bba:	460e      	mov	r6, r1
 8017bbc:	b921      	cbnz	r1, 8017bc8 <_realloc_r+0x14>
 8017bbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017bc2:	4611      	mov	r1, r2
 8017bc4:	f7fb bafe 	b.w	80131c4 <_malloc_r>
 8017bc8:	b922      	cbnz	r2, 8017bd4 <_realloc_r+0x20>
 8017bca:	f7ff f9c5 	bl	8016f58 <_free_r>
 8017bce:	4625      	mov	r5, r4
 8017bd0:	4628      	mov	r0, r5
 8017bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bd4:	f000 fa9a 	bl	801810c <_malloc_usable_size_r>
 8017bd8:	42a0      	cmp	r0, r4
 8017bda:	d20f      	bcs.n	8017bfc <_realloc_r+0x48>
 8017bdc:	4621      	mov	r1, r4
 8017bde:	4638      	mov	r0, r7
 8017be0:	f7fb faf0 	bl	80131c4 <_malloc_r>
 8017be4:	4605      	mov	r5, r0
 8017be6:	2800      	cmp	r0, #0
 8017be8:	d0f2      	beq.n	8017bd0 <_realloc_r+0x1c>
 8017bea:	4631      	mov	r1, r6
 8017bec:	4622      	mov	r2, r4
 8017bee:	f7fb fad2 	bl	8013196 <memcpy>
 8017bf2:	4631      	mov	r1, r6
 8017bf4:	4638      	mov	r0, r7
 8017bf6:	f7ff f9af 	bl	8016f58 <_free_r>
 8017bfa:	e7e9      	b.n	8017bd0 <_realloc_r+0x1c>
 8017bfc:	4635      	mov	r5, r6
 8017bfe:	e7e7      	b.n	8017bd0 <_realloc_r+0x1c>

08017c00 <__sfputc_r>:
 8017c00:	6893      	ldr	r3, [r2, #8]
 8017c02:	3b01      	subs	r3, #1
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	b410      	push	{r4}
 8017c08:	6093      	str	r3, [r2, #8]
 8017c0a:	da08      	bge.n	8017c1e <__sfputc_r+0x1e>
 8017c0c:	6994      	ldr	r4, [r2, #24]
 8017c0e:	42a3      	cmp	r3, r4
 8017c10:	db01      	blt.n	8017c16 <__sfputc_r+0x16>
 8017c12:	290a      	cmp	r1, #10
 8017c14:	d103      	bne.n	8017c1e <__sfputc_r+0x1e>
 8017c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c1a:	f000 b94b 	b.w	8017eb4 <__swbuf_r>
 8017c1e:	6813      	ldr	r3, [r2, #0]
 8017c20:	1c58      	adds	r0, r3, #1
 8017c22:	6010      	str	r0, [r2, #0]
 8017c24:	7019      	strb	r1, [r3, #0]
 8017c26:	4608      	mov	r0, r1
 8017c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c2c:	4770      	bx	lr

08017c2e <__sfputs_r>:
 8017c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c30:	4606      	mov	r6, r0
 8017c32:	460f      	mov	r7, r1
 8017c34:	4614      	mov	r4, r2
 8017c36:	18d5      	adds	r5, r2, r3
 8017c38:	42ac      	cmp	r4, r5
 8017c3a:	d101      	bne.n	8017c40 <__sfputs_r+0x12>
 8017c3c:	2000      	movs	r0, #0
 8017c3e:	e007      	b.n	8017c50 <__sfputs_r+0x22>
 8017c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c44:	463a      	mov	r2, r7
 8017c46:	4630      	mov	r0, r6
 8017c48:	f7ff ffda 	bl	8017c00 <__sfputc_r>
 8017c4c:	1c43      	adds	r3, r0, #1
 8017c4e:	d1f3      	bne.n	8017c38 <__sfputs_r+0xa>
 8017c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017c54 <_vfiprintf_r>:
 8017c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c58:	460d      	mov	r5, r1
 8017c5a:	b09d      	sub	sp, #116	; 0x74
 8017c5c:	4614      	mov	r4, r2
 8017c5e:	4698      	mov	r8, r3
 8017c60:	4606      	mov	r6, r0
 8017c62:	b118      	cbz	r0, 8017c6c <_vfiprintf_r+0x18>
 8017c64:	6983      	ldr	r3, [r0, #24]
 8017c66:	b90b      	cbnz	r3, 8017c6c <_vfiprintf_r+0x18>
 8017c68:	f7fb f9d0 	bl	801300c <__sinit>
 8017c6c:	4b89      	ldr	r3, [pc, #548]	; (8017e94 <_vfiprintf_r+0x240>)
 8017c6e:	429d      	cmp	r5, r3
 8017c70:	d11b      	bne.n	8017caa <_vfiprintf_r+0x56>
 8017c72:	6875      	ldr	r5, [r6, #4]
 8017c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c76:	07d9      	lsls	r1, r3, #31
 8017c78:	d405      	bmi.n	8017c86 <_vfiprintf_r+0x32>
 8017c7a:	89ab      	ldrh	r3, [r5, #12]
 8017c7c:	059a      	lsls	r2, r3, #22
 8017c7e:	d402      	bmi.n	8017c86 <_vfiprintf_r+0x32>
 8017c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c82:	f7fb fa86 	bl	8013192 <__retarget_lock_acquire_recursive>
 8017c86:	89ab      	ldrh	r3, [r5, #12]
 8017c88:	071b      	lsls	r3, r3, #28
 8017c8a:	d501      	bpl.n	8017c90 <_vfiprintf_r+0x3c>
 8017c8c:	692b      	ldr	r3, [r5, #16]
 8017c8e:	b9eb      	cbnz	r3, 8017ccc <_vfiprintf_r+0x78>
 8017c90:	4629      	mov	r1, r5
 8017c92:	4630      	mov	r0, r6
 8017c94:	f000 f960 	bl	8017f58 <__swsetup_r>
 8017c98:	b1c0      	cbz	r0, 8017ccc <_vfiprintf_r+0x78>
 8017c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c9c:	07dc      	lsls	r4, r3, #31
 8017c9e:	d50e      	bpl.n	8017cbe <_vfiprintf_r+0x6a>
 8017ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017ca4:	b01d      	add	sp, #116	; 0x74
 8017ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017caa:	4b7b      	ldr	r3, [pc, #492]	; (8017e98 <_vfiprintf_r+0x244>)
 8017cac:	429d      	cmp	r5, r3
 8017cae:	d101      	bne.n	8017cb4 <_vfiprintf_r+0x60>
 8017cb0:	68b5      	ldr	r5, [r6, #8]
 8017cb2:	e7df      	b.n	8017c74 <_vfiprintf_r+0x20>
 8017cb4:	4b79      	ldr	r3, [pc, #484]	; (8017e9c <_vfiprintf_r+0x248>)
 8017cb6:	429d      	cmp	r5, r3
 8017cb8:	bf08      	it	eq
 8017cba:	68f5      	ldreq	r5, [r6, #12]
 8017cbc:	e7da      	b.n	8017c74 <_vfiprintf_r+0x20>
 8017cbe:	89ab      	ldrh	r3, [r5, #12]
 8017cc0:	0598      	lsls	r0, r3, #22
 8017cc2:	d4ed      	bmi.n	8017ca0 <_vfiprintf_r+0x4c>
 8017cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017cc6:	f7fb fa65 	bl	8013194 <__retarget_lock_release_recursive>
 8017cca:	e7e9      	b.n	8017ca0 <_vfiprintf_r+0x4c>
 8017ccc:	2300      	movs	r3, #0
 8017cce:	9309      	str	r3, [sp, #36]	; 0x24
 8017cd0:	2320      	movs	r3, #32
 8017cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8017cda:	2330      	movs	r3, #48	; 0x30
 8017cdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017ea0 <_vfiprintf_r+0x24c>
 8017ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017ce4:	f04f 0901 	mov.w	r9, #1
 8017ce8:	4623      	mov	r3, r4
 8017cea:	469a      	mov	sl, r3
 8017cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cf0:	b10a      	cbz	r2, 8017cf6 <_vfiprintf_r+0xa2>
 8017cf2:	2a25      	cmp	r2, #37	; 0x25
 8017cf4:	d1f9      	bne.n	8017cea <_vfiprintf_r+0x96>
 8017cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8017cfa:	d00b      	beq.n	8017d14 <_vfiprintf_r+0xc0>
 8017cfc:	465b      	mov	r3, fp
 8017cfe:	4622      	mov	r2, r4
 8017d00:	4629      	mov	r1, r5
 8017d02:	4630      	mov	r0, r6
 8017d04:	f7ff ff93 	bl	8017c2e <__sfputs_r>
 8017d08:	3001      	adds	r0, #1
 8017d0a:	f000 80aa 	beq.w	8017e62 <_vfiprintf_r+0x20e>
 8017d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d10:	445a      	add	r2, fp
 8017d12:	9209      	str	r2, [sp, #36]	; 0x24
 8017d14:	f89a 3000 	ldrb.w	r3, [sl]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	f000 80a2 	beq.w	8017e62 <_vfiprintf_r+0x20e>
 8017d1e:	2300      	movs	r3, #0
 8017d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d28:	f10a 0a01 	add.w	sl, sl, #1
 8017d2c:	9304      	str	r3, [sp, #16]
 8017d2e:	9307      	str	r3, [sp, #28]
 8017d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017d34:	931a      	str	r3, [sp, #104]	; 0x68
 8017d36:	4654      	mov	r4, sl
 8017d38:	2205      	movs	r2, #5
 8017d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d3e:	4858      	ldr	r0, [pc, #352]	; (8017ea0 <_vfiprintf_r+0x24c>)
 8017d40:	f7e8 fa5e 	bl	8000200 <memchr>
 8017d44:	9a04      	ldr	r2, [sp, #16]
 8017d46:	b9d8      	cbnz	r0, 8017d80 <_vfiprintf_r+0x12c>
 8017d48:	06d1      	lsls	r1, r2, #27
 8017d4a:	bf44      	itt	mi
 8017d4c:	2320      	movmi	r3, #32
 8017d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d52:	0713      	lsls	r3, r2, #28
 8017d54:	bf44      	itt	mi
 8017d56:	232b      	movmi	r3, #43	; 0x2b
 8017d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8017d60:	2b2a      	cmp	r3, #42	; 0x2a
 8017d62:	d015      	beq.n	8017d90 <_vfiprintf_r+0x13c>
 8017d64:	9a07      	ldr	r2, [sp, #28]
 8017d66:	4654      	mov	r4, sl
 8017d68:	2000      	movs	r0, #0
 8017d6a:	f04f 0c0a 	mov.w	ip, #10
 8017d6e:	4621      	mov	r1, r4
 8017d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d74:	3b30      	subs	r3, #48	; 0x30
 8017d76:	2b09      	cmp	r3, #9
 8017d78:	d94e      	bls.n	8017e18 <_vfiprintf_r+0x1c4>
 8017d7a:	b1b0      	cbz	r0, 8017daa <_vfiprintf_r+0x156>
 8017d7c:	9207      	str	r2, [sp, #28]
 8017d7e:	e014      	b.n	8017daa <_vfiprintf_r+0x156>
 8017d80:	eba0 0308 	sub.w	r3, r0, r8
 8017d84:	fa09 f303 	lsl.w	r3, r9, r3
 8017d88:	4313      	orrs	r3, r2
 8017d8a:	9304      	str	r3, [sp, #16]
 8017d8c:	46a2      	mov	sl, r4
 8017d8e:	e7d2      	b.n	8017d36 <_vfiprintf_r+0xe2>
 8017d90:	9b03      	ldr	r3, [sp, #12]
 8017d92:	1d19      	adds	r1, r3, #4
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	9103      	str	r1, [sp, #12]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	bfbb      	ittet	lt
 8017d9c:	425b      	neglt	r3, r3
 8017d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8017da2:	9307      	strge	r3, [sp, #28]
 8017da4:	9307      	strlt	r3, [sp, #28]
 8017da6:	bfb8      	it	lt
 8017da8:	9204      	strlt	r2, [sp, #16]
 8017daa:	7823      	ldrb	r3, [r4, #0]
 8017dac:	2b2e      	cmp	r3, #46	; 0x2e
 8017dae:	d10c      	bne.n	8017dca <_vfiprintf_r+0x176>
 8017db0:	7863      	ldrb	r3, [r4, #1]
 8017db2:	2b2a      	cmp	r3, #42	; 0x2a
 8017db4:	d135      	bne.n	8017e22 <_vfiprintf_r+0x1ce>
 8017db6:	9b03      	ldr	r3, [sp, #12]
 8017db8:	1d1a      	adds	r2, r3, #4
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	9203      	str	r2, [sp, #12]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	bfb8      	it	lt
 8017dc2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017dc6:	3402      	adds	r4, #2
 8017dc8:	9305      	str	r3, [sp, #20]
 8017dca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017eb0 <_vfiprintf_r+0x25c>
 8017dce:	7821      	ldrb	r1, [r4, #0]
 8017dd0:	2203      	movs	r2, #3
 8017dd2:	4650      	mov	r0, sl
 8017dd4:	f7e8 fa14 	bl	8000200 <memchr>
 8017dd8:	b140      	cbz	r0, 8017dec <_vfiprintf_r+0x198>
 8017dda:	2340      	movs	r3, #64	; 0x40
 8017ddc:	eba0 000a 	sub.w	r0, r0, sl
 8017de0:	fa03 f000 	lsl.w	r0, r3, r0
 8017de4:	9b04      	ldr	r3, [sp, #16]
 8017de6:	4303      	orrs	r3, r0
 8017de8:	3401      	adds	r4, #1
 8017dea:	9304      	str	r3, [sp, #16]
 8017dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017df0:	482c      	ldr	r0, [pc, #176]	; (8017ea4 <_vfiprintf_r+0x250>)
 8017df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017df6:	2206      	movs	r2, #6
 8017df8:	f7e8 fa02 	bl	8000200 <memchr>
 8017dfc:	2800      	cmp	r0, #0
 8017dfe:	d03f      	beq.n	8017e80 <_vfiprintf_r+0x22c>
 8017e00:	4b29      	ldr	r3, [pc, #164]	; (8017ea8 <_vfiprintf_r+0x254>)
 8017e02:	bb1b      	cbnz	r3, 8017e4c <_vfiprintf_r+0x1f8>
 8017e04:	9b03      	ldr	r3, [sp, #12]
 8017e06:	3307      	adds	r3, #7
 8017e08:	f023 0307 	bic.w	r3, r3, #7
 8017e0c:	3308      	adds	r3, #8
 8017e0e:	9303      	str	r3, [sp, #12]
 8017e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e12:	443b      	add	r3, r7
 8017e14:	9309      	str	r3, [sp, #36]	; 0x24
 8017e16:	e767      	b.n	8017ce8 <_vfiprintf_r+0x94>
 8017e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e1c:	460c      	mov	r4, r1
 8017e1e:	2001      	movs	r0, #1
 8017e20:	e7a5      	b.n	8017d6e <_vfiprintf_r+0x11a>
 8017e22:	2300      	movs	r3, #0
 8017e24:	3401      	adds	r4, #1
 8017e26:	9305      	str	r3, [sp, #20]
 8017e28:	4619      	mov	r1, r3
 8017e2a:	f04f 0c0a 	mov.w	ip, #10
 8017e2e:	4620      	mov	r0, r4
 8017e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e34:	3a30      	subs	r2, #48	; 0x30
 8017e36:	2a09      	cmp	r2, #9
 8017e38:	d903      	bls.n	8017e42 <_vfiprintf_r+0x1ee>
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d0c5      	beq.n	8017dca <_vfiprintf_r+0x176>
 8017e3e:	9105      	str	r1, [sp, #20]
 8017e40:	e7c3      	b.n	8017dca <_vfiprintf_r+0x176>
 8017e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e46:	4604      	mov	r4, r0
 8017e48:	2301      	movs	r3, #1
 8017e4a:	e7f0      	b.n	8017e2e <_vfiprintf_r+0x1da>
 8017e4c:	ab03      	add	r3, sp, #12
 8017e4e:	9300      	str	r3, [sp, #0]
 8017e50:	462a      	mov	r2, r5
 8017e52:	4b16      	ldr	r3, [pc, #88]	; (8017eac <_vfiprintf_r+0x258>)
 8017e54:	a904      	add	r1, sp, #16
 8017e56:	4630      	mov	r0, r6
 8017e58:	f7fb faae 	bl	80133b8 <_printf_float>
 8017e5c:	4607      	mov	r7, r0
 8017e5e:	1c78      	adds	r0, r7, #1
 8017e60:	d1d6      	bne.n	8017e10 <_vfiprintf_r+0x1bc>
 8017e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e64:	07d9      	lsls	r1, r3, #31
 8017e66:	d405      	bmi.n	8017e74 <_vfiprintf_r+0x220>
 8017e68:	89ab      	ldrh	r3, [r5, #12]
 8017e6a:	059a      	lsls	r2, r3, #22
 8017e6c:	d402      	bmi.n	8017e74 <_vfiprintf_r+0x220>
 8017e6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e70:	f7fb f990 	bl	8013194 <__retarget_lock_release_recursive>
 8017e74:	89ab      	ldrh	r3, [r5, #12]
 8017e76:	065b      	lsls	r3, r3, #25
 8017e78:	f53f af12 	bmi.w	8017ca0 <_vfiprintf_r+0x4c>
 8017e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e7e:	e711      	b.n	8017ca4 <_vfiprintf_r+0x50>
 8017e80:	ab03      	add	r3, sp, #12
 8017e82:	9300      	str	r3, [sp, #0]
 8017e84:	462a      	mov	r2, r5
 8017e86:	4b09      	ldr	r3, [pc, #36]	; (8017eac <_vfiprintf_r+0x258>)
 8017e88:	a904      	add	r1, sp, #16
 8017e8a:	4630      	mov	r0, r6
 8017e8c:	f7fb fd38 	bl	8013900 <_printf_i>
 8017e90:	e7e4      	b.n	8017e5c <_vfiprintf_r+0x208>
 8017e92:	bf00      	nop
 8017e94:	08018768 	.word	0x08018768
 8017e98:	08018788 	.word	0x08018788
 8017e9c:	08018748 	.word	0x08018748
 8017ea0:	08018aac 	.word	0x08018aac
 8017ea4:	08018ab6 	.word	0x08018ab6
 8017ea8:	080133b9 	.word	0x080133b9
 8017eac:	08017c2f 	.word	0x08017c2f
 8017eb0:	08018ab2 	.word	0x08018ab2

08017eb4 <__swbuf_r>:
 8017eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eb6:	460e      	mov	r6, r1
 8017eb8:	4614      	mov	r4, r2
 8017eba:	4605      	mov	r5, r0
 8017ebc:	b118      	cbz	r0, 8017ec6 <__swbuf_r+0x12>
 8017ebe:	6983      	ldr	r3, [r0, #24]
 8017ec0:	b90b      	cbnz	r3, 8017ec6 <__swbuf_r+0x12>
 8017ec2:	f7fb f8a3 	bl	801300c <__sinit>
 8017ec6:	4b21      	ldr	r3, [pc, #132]	; (8017f4c <__swbuf_r+0x98>)
 8017ec8:	429c      	cmp	r4, r3
 8017eca:	d12b      	bne.n	8017f24 <__swbuf_r+0x70>
 8017ecc:	686c      	ldr	r4, [r5, #4]
 8017ece:	69a3      	ldr	r3, [r4, #24]
 8017ed0:	60a3      	str	r3, [r4, #8]
 8017ed2:	89a3      	ldrh	r3, [r4, #12]
 8017ed4:	071a      	lsls	r2, r3, #28
 8017ed6:	d52f      	bpl.n	8017f38 <__swbuf_r+0x84>
 8017ed8:	6923      	ldr	r3, [r4, #16]
 8017eda:	b36b      	cbz	r3, 8017f38 <__swbuf_r+0x84>
 8017edc:	6923      	ldr	r3, [r4, #16]
 8017ede:	6820      	ldr	r0, [r4, #0]
 8017ee0:	1ac0      	subs	r0, r0, r3
 8017ee2:	6963      	ldr	r3, [r4, #20]
 8017ee4:	b2f6      	uxtb	r6, r6
 8017ee6:	4283      	cmp	r3, r0
 8017ee8:	4637      	mov	r7, r6
 8017eea:	dc04      	bgt.n	8017ef6 <__swbuf_r+0x42>
 8017eec:	4621      	mov	r1, r4
 8017eee:	4628      	mov	r0, r5
 8017ef0:	f7fd ff80 	bl	8015df4 <_fflush_r>
 8017ef4:	bb30      	cbnz	r0, 8017f44 <__swbuf_r+0x90>
 8017ef6:	68a3      	ldr	r3, [r4, #8]
 8017ef8:	3b01      	subs	r3, #1
 8017efa:	60a3      	str	r3, [r4, #8]
 8017efc:	6823      	ldr	r3, [r4, #0]
 8017efe:	1c5a      	adds	r2, r3, #1
 8017f00:	6022      	str	r2, [r4, #0]
 8017f02:	701e      	strb	r6, [r3, #0]
 8017f04:	6963      	ldr	r3, [r4, #20]
 8017f06:	3001      	adds	r0, #1
 8017f08:	4283      	cmp	r3, r0
 8017f0a:	d004      	beq.n	8017f16 <__swbuf_r+0x62>
 8017f0c:	89a3      	ldrh	r3, [r4, #12]
 8017f0e:	07db      	lsls	r3, r3, #31
 8017f10:	d506      	bpl.n	8017f20 <__swbuf_r+0x6c>
 8017f12:	2e0a      	cmp	r6, #10
 8017f14:	d104      	bne.n	8017f20 <__swbuf_r+0x6c>
 8017f16:	4621      	mov	r1, r4
 8017f18:	4628      	mov	r0, r5
 8017f1a:	f7fd ff6b 	bl	8015df4 <_fflush_r>
 8017f1e:	b988      	cbnz	r0, 8017f44 <__swbuf_r+0x90>
 8017f20:	4638      	mov	r0, r7
 8017f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f24:	4b0a      	ldr	r3, [pc, #40]	; (8017f50 <__swbuf_r+0x9c>)
 8017f26:	429c      	cmp	r4, r3
 8017f28:	d101      	bne.n	8017f2e <__swbuf_r+0x7a>
 8017f2a:	68ac      	ldr	r4, [r5, #8]
 8017f2c:	e7cf      	b.n	8017ece <__swbuf_r+0x1a>
 8017f2e:	4b09      	ldr	r3, [pc, #36]	; (8017f54 <__swbuf_r+0xa0>)
 8017f30:	429c      	cmp	r4, r3
 8017f32:	bf08      	it	eq
 8017f34:	68ec      	ldreq	r4, [r5, #12]
 8017f36:	e7ca      	b.n	8017ece <__swbuf_r+0x1a>
 8017f38:	4621      	mov	r1, r4
 8017f3a:	4628      	mov	r0, r5
 8017f3c:	f000 f80c 	bl	8017f58 <__swsetup_r>
 8017f40:	2800      	cmp	r0, #0
 8017f42:	d0cb      	beq.n	8017edc <__swbuf_r+0x28>
 8017f44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017f48:	e7ea      	b.n	8017f20 <__swbuf_r+0x6c>
 8017f4a:	bf00      	nop
 8017f4c:	08018768 	.word	0x08018768
 8017f50:	08018788 	.word	0x08018788
 8017f54:	08018748 	.word	0x08018748

08017f58 <__swsetup_r>:
 8017f58:	4b32      	ldr	r3, [pc, #200]	; (8018024 <__swsetup_r+0xcc>)
 8017f5a:	b570      	push	{r4, r5, r6, lr}
 8017f5c:	681d      	ldr	r5, [r3, #0]
 8017f5e:	4606      	mov	r6, r0
 8017f60:	460c      	mov	r4, r1
 8017f62:	b125      	cbz	r5, 8017f6e <__swsetup_r+0x16>
 8017f64:	69ab      	ldr	r3, [r5, #24]
 8017f66:	b913      	cbnz	r3, 8017f6e <__swsetup_r+0x16>
 8017f68:	4628      	mov	r0, r5
 8017f6a:	f7fb f84f 	bl	801300c <__sinit>
 8017f6e:	4b2e      	ldr	r3, [pc, #184]	; (8018028 <__swsetup_r+0xd0>)
 8017f70:	429c      	cmp	r4, r3
 8017f72:	d10f      	bne.n	8017f94 <__swsetup_r+0x3c>
 8017f74:	686c      	ldr	r4, [r5, #4]
 8017f76:	89a3      	ldrh	r3, [r4, #12]
 8017f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017f7c:	0719      	lsls	r1, r3, #28
 8017f7e:	d42c      	bmi.n	8017fda <__swsetup_r+0x82>
 8017f80:	06dd      	lsls	r5, r3, #27
 8017f82:	d411      	bmi.n	8017fa8 <__swsetup_r+0x50>
 8017f84:	2309      	movs	r3, #9
 8017f86:	6033      	str	r3, [r6, #0]
 8017f88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017f8c:	81a3      	strh	r3, [r4, #12]
 8017f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017f92:	e03e      	b.n	8018012 <__swsetup_r+0xba>
 8017f94:	4b25      	ldr	r3, [pc, #148]	; (801802c <__swsetup_r+0xd4>)
 8017f96:	429c      	cmp	r4, r3
 8017f98:	d101      	bne.n	8017f9e <__swsetup_r+0x46>
 8017f9a:	68ac      	ldr	r4, [r5, #8]
 8017f9c:	e7eb      	b.n	8017f76 <__swsetup_r+0x1e>
 8017f9e:	4b24      	ldr	r3, [pc, #144]	; (8018030 <__swsetup_r+0xd8>)
 8017fa0:	429c      	cmp	r4, r3
 8017fa2:	bf08      	it	eq
 8017fa4:	68ec      	ldreq	r4, [r5, #12]
 8017fa6:	e7e6      	b.n	8017f76 <__swsetup_r+0x1e>
 8017fa8:	0758      	lsls	r0, r3, #29
 8017faa:	d512      	bpl.n	8017fd2 <__swsetup_r+0x7a>
 8017fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017fae:	b141      	cbz	r1, 8017fc2 <__swsetup_r+0x6a>
 8017fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017fb4:	4299      	cmp	r1, r3
 8017fb6:	d002      	beq.n	8017fbe <__swsetup_r+0x66>
 8017fb8:	4630      	mov	r0, r6
 8017fba:	f7fe ffcd 	bl	8016f58 <_free_r>
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	6363      	str	r3, [r4, #52]	; 0x34
 8017fc2:	89a3      	ldrh	r3, [r4, #12]
 8017fc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017fc8:	81a3      	strh	r3, [r4, #12]
 8017fca:	2300      	movs	r3, #0
 8017fcc:	6063      	str	r3, [r4, #4]
 8017fce:	6923      	ldr	r3, [r4, #16]
 8017fd0:	6023      	str	r3, [r4, #0]
 8017fd2:	89a3      	ldrh	r3, [r4, #12]
 8017fd4:	f043 0308 	orr.w	r3, r3, #8
 8017fd8:	81a3      	strh	r3, [r4, #12]
 8017fda:	6923      	ldr	r3, [r4, #16]
 8017fdc:	b94b      	cbnz	r3, 8017ff2 <__swsetup_r+0x9a>
 8017fde:	89a3      	ldrh	r3, [r4, #12]
 8017fe0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017fe8:	d003      	beq.n	8017ff2 <__swsetup_r+0x9a>
 8017fea:	4621      	mov	r1, r4
 8017fec:	4630      	mov	r0, r6
 8017fee:	f000 f84d 	bl	801808c <__smakebuf_r>
 8017ff2:	89a0      	ldrh	r0, [r4, #12]
 8017ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017ff8:	f010 0301 	ands.w	r3, r0, #1
 8017ffc:	d00a      	beq.n	8018014 <__swsetup_r+0xbc>
 8017ffe:	2300      	movs	r3, #0
 8018000:	60a3      	str	r3, [r4, #8]
 8018002:	6963      	ldr	r3, [r4, #20]
 8018004:	425b      	negs	r3, r3
 8018006:	61a3      	str	r3, [r4, #24]
 8018008:	6923      	ldr	r3, [r4, #16]
 801800a:	b943      	cbnz	r3, 801801e <__swsetup_r+0xc6>
 801800c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018010:	d1ba      	bne.n	8017f88 <__swsetup_r+0x30>
 8018012:	bd70      	pop	{r4, r5, r6, pc}
 8018014:	0781      	lsls	r1, r0, #30
 8018016:	bf58      	it	pl
 8018018:	6963      	ldrpl	r3, [r4, #20]
 801801a:	60a3      	str	r3, [r4, #8]
 801801c:	e7f4      	b.n	8018008 <__swsetup_r+0xb0>
 801801e:	2000      	movs	r0, #0
 8018020:	e7f7      	b.n	8018012 <__swsetup_r+0xba>
 8018022:	bf00      	nop
 8018024:	2000019c 	.word	0x2000019c
 8018028:	08018768 	.word	0x08018768
 801802c:	08018788 	.word	0x08018788
 8018030:	08018748 	.word	0x08018748

08018034 <abort>:
 8018034:	b508      	push	{r3, lr}
 8018036:	2006      	movs	r0, #6
 8018038:	f000 f898 	bl	801816c <raise>
 801803c:	2001      	movs	r0, #1
 801803e:	f7eb fbb9 	bl	80037b4 <_exit>

08018042 <__swhatbuf_r>:
 8018042:	b570      	push	{r4, r5, r6, lr}
 8018044:	460e      	mov	r6, r1
 8018046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801804a:	2900      	cmp	r1, #0
 801804c:	b096      	sub	sp, #88	; 0x58
 801804e:	4614      	mov	r4, r2
 8018050:	461d      	mov	r5, r3
 8018052:	da07      	bge.n	8018064 <__swhatbuf_r+0x22>
 8018054:	2300      	movs	r3, #0
 8018056:	602b      	str	r3, [r5, #0]
 8018058:	89b3      	ldrh	r3, [r6, #12]
 801805a:	061a      	lsls	r2, r3, #24
 801805c:	d410      	bmi.n	8018080 <__swhatbuf_r+0x3e>
 801805e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018062:	e00e      	b.n	8018082 <__swhatbuf_r+0x40>
 8018064:	466a      	mov	r2, sp
 8018066:	f000 f89d 	bl	80181a4 <_fstat_r>
 801806a:	2800      	cmp	r0, #0
 801806c:	dbf2      	blt.n	8018054 <__swhatbuf_r+0x12>
 801806e:	9a01      	ldr	r2, [sp, #4]
 8018070:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018074:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018078:	425a      	negs	r2, r3
 801807a:	415a      	adcs	r2, r3
 801807c:	602a      	str	r2, [r5, #0]
 801807e:	e7ee      	b.n	801805e <__swhatbuf_r+0x1c>
 8018080:	2340      	movs	r3, #64	; 0x40
 8018082:	2000      	movs	r0, #0
 8018084:	6023      	str	r3, [r4, #0]
 8018086:	b016      	add	sp, #88	; 0x58
 8018088:	bd70      	pop	{r4, r5, r6, pc}
	...

0801808c <__smakebuf_r>:
 801808c:	898b      	ldrh	r3, [r1, #12]
 801808e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018090:	079d      	lsls	r5, r3, #30
 8018092:	4606      	mov	r6, r0
 8018094:	460c      	mov	r4, r1
 8018096:	d507      	bpl.n	80180a8 <__smakebuf_r+0x1c>
 8018098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801809c:	6023      	str	r3, [r4, #0]
 801809e:	6123      	str	r3, [r4, #16]
 80180a0:	2301      	movs	r3, #1
 80180a2:	6163      	str	r3, [r4, #20]
 80180a4:	b002      	add	sp, #8
 80180a6:	bd70      	pop	{r4, r5, r6, pc}
 80180a8:	ab01      	add	r3, sp, #4
 80180aa:	466a      	mov	r2, sp
 80180ac:	f7ff ffc9 	bl	8018042 <__swhatbuf_r>
 80180b0:	9900      	ldr	r1, [sp, #0]
 80180b2:	4605      	mov	r5, r0
 80180b4:	4630      	mov	r0, r6
 80180b6:	f7fb f885 	bl	80131c4 <_malloc_r>
 80180ba:	b948      	cbnz	r0, 80180d0 <__smakebuf_r+0x44>
 80180bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180c0:	059a      	lsls	r2, r3, #22
 80180c2:	d4ef      	bmi.n	80180a4 <__smakebuf_r+0x18>
 80180c4:	f023 0303 	bic.w	r3, r3, #3
 80180c8:	f043 0302 	orr.w	r3, r3, #2
 80180cc:	81a3      	strh	r3, [r4, #12]
 80180ce:	e7e3      	b.n	8018098 <__smakebuf_r+0xc>
 80180d0:	4b0d      	ldr	r3, [pc, #52]	; (8018108 <__smakebuf_r+0x7c>)
 80180d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80180d4:	89a3      	ldrh	r3, [r4, #12]
 80180d6:	6020      	str	r0, [r4, #0]
 80180d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80180dc:	81a3      	strh	r3, [r4, #12]
 80180de:	9b00      	ldr	r3, [sp, #0]
 80180e0:	6163      	str	r3, [r4, #20]
 80180e2:	9b01      	ldr	r3, [sp, #4]
 80180e4:	6120      	str	r0, [r4, #16]
 80180e6:	b15b      	cbz	r3, 8018100 <__smakebuf_r+0x74>
 80180e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80180ec:	4630      	mov	r0, r6
 80180ee:	f000 f86b 	bl	80181c8 <_isatty_r>
 80180f2:	b128      	cbz	r0, 8018100 <__smakebuf_r+0x74>
 80180f4:	89a3      	ldrh	r3, [r4, #12]
 80180f6:	f023 0303 	bic.w	r3, r3, #3
 80180fa:	f043 0301 	orr.w	r3, r3, #1
 80180fe:	81a3      	strh	r3, [r4, #12]
 8018100:	89a0      	ldrh	r0, [r4, #12]
 8018102:	4305      	orrs	r5, r0
 8018104:	81a5      	strh	r5, [r4, #12]
 8018106:	e7cd      	b.n	80180a4 <__smakebuf_r+0x18>
 8018108:	08012fa5 	.word	0x08012fa5

0801810c <_malloc_usable_size_r>:
 801810c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018110:	1f18      	subs	r0, r3, #4
 8018112:	2b00      	cmp	r3, #0
 8018114:	bfbc      	itt	lt
 8018116:	580b      	ldrlt	r3, [r1, r0]
 8018118:	18c0      	addlt	r0, r0, r3
 801811a:	4770      	bx	lr

0801811c <_raise_r>:
 801811c:	291f      	cmp	r1, #31
 801811e:	b538      	push	{r3, r4, r5, lr}
 8018120:	4604      	mov	r4, r0
 8018122:	460d      	mov	r5, r1
 8018124:	d904      	bls.n	8018130 <_raise_r+0x14>
 8018126:	2316      	movs	r3, #22
 8018128:	6003      	str	r3, [r0, #0]
 801812a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801812e:	bd38      	pop	{r3, r4, r5, pc}
 8018130:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018132:	b112      	cbz	r2, 801813a <_raise_r+0x1e>
 8018134:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018138:	b94b      	cbnz	r3, 801814e <_raise_r+0x32>
 801813a:	4620      	mov	r0, r4
 801813c:	f000 f830 	bl	80181a0 <_getpid_r>
 8018140:	462a      	mov	r2, r5
 8018142:	4601      	mov	r1, r0
 8018144:	4620      	mov	r0, r4
 8018146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801814a:	f000 b817 	b.w	801817c <_kill_r>
 801814e:	2b01      	cmp	r3, #1
 8018150:	d00a      	beq.n	8018168 <_raise_r+0x4c>
 8018152:	1c59      	adds	r1, r3, #1
 8018154:	d103      	bne.n	801815e <_raise_r+0x42>
 8018156:	2316      	movs	r3, #22
 8018158:	6003      	str	r3, [r0, #0]
 801815a:	2001      	movs	r0, #1
 801815c:	e7e7      	b.n	801812e <_raise_r+0x12>
 801815e:	2400      	movs	r4, #0
 8018160:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018164:	4628      	mov	r0, r5
 8018166:	4798      	blx	r3
 8018168:	2000      	movs	r0, #0
 801816a:	e7e0      	b.n	801812e <_raise_r+0x12>

0801816c <raise>:
 801816c:	4b02      	ldr	r3, [pc, #8]	; (8018178 <raise+0xc>)
 801816e:	4601      	mov	r1, r0
 8018170:	6818      	ldr	r0, [r3, #0]
 8018172:	f7ff bfd3 	b.w	801811c <_raise_r>
 8018176:	bf00      	nop
 8018178:	2000019c 	.word	0x2000019c

0801817c <_kill_r>:
 801817c:	b538      	push	{r3, r4, r5, lr}
 801817e:	4d07      	ldr	r5, [pc, #28]	; (801819c <_kill_r+0x20>)
 8018180:	2300      	movs	r3, #0
 8018182:	4604      	mov	r4, r0
 8018184:	4608      	mov	r0, r1
 8018186:	4611      	mov	r1, r2
 8018188:	602b      	str	r3, [r5, #0]
 801818a:	f7eb fb03 	bl	8003794 <_kill>
 801818e:	1c43      	adds	r3, r0, #1
 8018190:	d102      	bne.n	8018198 <_kill_r+0x1c>
 8018192:	682b      	ldr	r3, [r5, #0]
 8018194:	b103      	cbz	r3, 8018198 <_kill_r+0x1c>
 8018196:	6023      	str	r3, [r4, #0]
 8018198:	bd38      	pop	{r3, r4, r5, pc}
 801819a:	bf00      	nop
 801819c:	2000cb2c 	.word	0x2000cb2c

080181a0 <_getpid_r>:
 80181a0:	f7eb baf0 	b.w	8003784 <_getpid>

080181a4 <_fstat_r>:
 80181a4:	b538      	push	{r3, r4, r5, lr}
 80181a6:	4d07      	ldr	r5, [pc, #28]	; (80181c4 <_fstat_r+0x20>)
 80181a8:	2300      	movs	r3, #0
 80181aa:	4604      	mov	r4, r0
 80181ac:	4608      	mov	r0, r1
 80181ae:	4611      	mov	r1, r2
 80181b0:	602b      	str	r3, [r5, #0]
 80181b2:	f7eb fb4e 	bl	8003852 <_fstat>
 80181b6:	1c43      	adds	r3, r0, #1
 80181b8:	d102      	bne.n	80181c0 <_fstat_r+0x1c>
 80181ba:	682b      	ldr	r3, [r5, #0]
 80181bc:	b103      	cbz	r3, 80181c0 <_fstat_r+0x1c>
 80181be:	6023      	str	r3, [r4, #0]
 80181c0:	bd38      	pop	{r3, r4, r5, pc}
 80181c2:	bf00      	nop
 80181c4:	2000cb2c 	.word	0x2000cb2c

080181c8 <_isatty_r>:
 80181c8:	b538      	push	{r3, r4, r5, lr}
 80181ca:	4d06      	ldr	r5, [pc, #24]	; (80181e4 <_isatty_r+0x1c>)
 80181cc:	2300      	movs	r3, #0
 80181ce:	4604      	mov	r4, r0
 80181d0:	4608      	mov	r0, r1
 80181d2:	602b      	str	r3, [r5, #0]
 80181d4:	f7eb fb4d 	bl	8003872 <_isatty>
 80181d8:	1c43      	adds	r3, r0, #1
 80181da:	d102      	bne.n	80181e2 <_isatty_r+0x1a>
 80181dc:	682b      	ldr	r3, [r5, #0]
 80181de:	b103      	cbz	r3, 80181e2 <_isatty_r+0x1a>
 80181e0:	6023      	str	r3, [r4, #0]
 80181e2:	bd38      	pop	{r3, r4, r5, pc}
 80181e4:	2000cb2c 	.word	0x2000cb2c

080181e8 <_init>:
 80181e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181ea:	bf00      	nop
 80181ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181ee:	bc08      	pop	{r3}
 80181f0:	469e      	mov	lr, r3
 80181f2:	4770      	bx	lr

080181f4 <_fini>:
 80181f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181f6:	bf00      	nop
 80181f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181fa:	bc08      	pop	{r3}
 80181fc:	469e      	mov	lr, r3
 80181fe:	4770      	bx	lr
