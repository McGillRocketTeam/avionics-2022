
f446-xtend-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002958  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b6c  08002b6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b6c  08002b6c  00012b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b74  08002b74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b74  08002b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b78  08002b78  00012b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  2000000c  08002b88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08002b88  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114b7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef0  00000000  00000000  000314f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  000333e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  000342a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022249  00000000  00000000  000350d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012128  00000000  00000000  00057321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2f3f  00000000  00000000  00069449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c388  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f48  00000000  00000000  0013c3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002b04 	.word	0x08002b04

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002b04 	.word	0x08002b04

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b08c      	sub	sp, #48	; 0x30
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fb53 	bl	8000bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f845 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f931 	bl	8000770 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800050e:	f000 f905 	bl	800071c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000512:	f000 f8ab 	bl	800066c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f8d7 	bl	80006c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t Start[] = "Starting XTend\r\n";
 800051a:	4b19      	ldr	r3, [pc, #100]	; (8000580 <main+0x84>)
 800051c:	f107 041c 	add.w	r4, r7, #28
 8000520:	461d      	mov	r5, r3
 8000522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	682b      	ldr	r3, [r5, #0]
 8000528:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart3,Start,16,HAL_MAX_DELAY);
 800052a:	f107 011c 	add.w	r1, r7, #28
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	2210      	movs	r2, #16
 8000534:	4813      	ldr	r0, [pc, #76]	; (8000584 <main+0x88>)
 8000536:	f001 fff0 	bl	800251a <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t Msg[] = "hello!\r\n";
 800053a:	4a13      	ldr	r2, [pc, #76]	; (8000588 <main+0x8c>)
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	ca07      	ldmia	r2, {r0, r1, r2}
 8000542:	c303      	stmia	r3!, {r0, r1}
 8000544:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2,Msg,8,HAL_MAX_DELAY);
 8000546:	f107 0110 	add.w	r1, r7, #16
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	2208      	movs	r2, #8
 8000550:	480e      	ldr	r0, [pc, #56]	; (800058c <main+0x90>)
 8000552:	f001 ffe2 	bl	800251a <HAL_UART_Transmit>

	  uint8_t Sent[] = "Msg Sent\r\n";
 8000556:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <main+0x94>)
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	ca07      	ldmia	r2, {r0, r1, r2}
 800055c:	c303      	stmia	r3!, {r0, r1}
 800055e:	801a      	strh	r2, [r3, #0]
 8000560:	3302      	adds	r3, #2
 8000562:	0c12      	lsrs	r2, r2, #16
 8000564:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3,Sent,10,HAL_MAX_DELAY);
 8000566:	1d39      	adds	r1, r7, #4
 8000568:	f04f 33ff 	mov.w	r3, #4294967295
 800056c:	220a      	movs	r2, #10
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <main+0x88>)
 8000570:	f001 ffd3 	bl	800251a <HAL_UART_Transmit>

	  HAL_Delay(10000);
 8000574:	f242 7010 	movw	r0, #10000	; 0x2710
 8000578:	f000 fb5a 	bl	8000c30 <HAL_Delay>
  {
 800057c:	e7dd      	b.n	800053a <main+0x3e>
 800057e:	bf00      	nop
 8000580:	08002b1c 	.word	0x08002b1c
 8000584:	20000028 	.word	0x20000028
 8000588:	08002b30 	.word	0x08002b30
 800058c:	20000124 	.word	0x20000124
 8000590:	08002b3c 	.word	0x08002b3c

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2234      	movs	r2, #52	; 0x34
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 faa6 	bl	8002af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a28      	ldr	r2, [pc, #160]	; (8000664 <SystemClock_Config+0xd0>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b26      	ldr	r3, [pc, #152]	; (8000664 <SystemClock_Config+0xd0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	4b23      	ldr	r3, [pc, #140]	; (8000668 <SystemClock_Config+0xd4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a22      	ldr	r2, [pc, #136]	; (8000668 <SystemClock_Config+0xd4>)
 80005de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000604:	2308      	movs	r3, #8
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000608:	23a8      	movs	r3, #168	; 0xa8
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000610:	2307      	movs	r3, #7
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4618      	mov	r0, r3
 800061e:	f001 f9e3 	bl	80019e8 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000628:	f000 f902 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000638:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000642:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2105      	movs	r1, #5
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fece 	bl	80013ec <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000656:	f000 f8eb 	bl	8000830 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2C1_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <MX_I2C1_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2C1_Init+0x50>)
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x58>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_I2C1_Init+0x50>)
 800068a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_I2C1_Init+0x50>)
 80006aa:	f000 fd5b 	bl	8001164 <HAL_I2C_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f8bc 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000006c 	.word	0x2000006c
 80006c0:	40005400 	.word	0x40005400
 80006c4:	000186a0 	.word	0x000186a0

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_USART2_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2208      	movs	r2, #8
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = !UART_HWCONTROL_CTS; // CTS bit is inverted
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006fe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 8000702:	f001 febd 	bl	8002480 <HAL_UART_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800070c:	f000 f890 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000124 	.word	0x20000124
 8000718:	40004400 	.word	0x40004400

0800071c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_USART3_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000728:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800072c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000754:	f001 fe94 	bl	8002480 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f867 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000028 	.word	0x20000028
 800076c:	40004800 	.word	0x40004800

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_GPIO_Init+0x94>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <MX_GPIO_Init+0x94>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_GPIO_Init+0x94>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_GPIO_Init+0x94>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <MX_GPIO_Init+0x94>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_GPIO_Init+0x94>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_GPIO_Init+0x94>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <MX_GPIO_Init+0x94>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_GPIO_Init+0x94>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80007ec:	2308      	movs	r3, #8
 80007ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	4619      	mov	r1, r3
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_GPIO_Init+0x98>)
 80007f8:	f000 fb20 	bl	8000e3c <HAL_GPIO_Init>

}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020800 	.word	0x40020800

0800080c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d101      	bne.n	8000822 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800081e:	f000 f9e7 	bl	8000bf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40002000 	.word	0x40002000

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6453      	str	r3, [r2, #68]	; 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a19      	ldr	r2, [pc, #100]	; (8000910 <HAL_I2C_MspInit+0x84>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d12b      	bne.n	8000906 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_I2C_MspInit+0x88>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_I2C_MspInit+0x88>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_I2C_MspInit+0x88>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ca:	23c0      	movs	r3, #192	; 0xc0
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ce:	2312      	movs	r3, #18
 80008d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008da:	2304      	movs	r3, #4
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <HAL_I2C_MspInit+0x8c>)
 80008e6:	f000 faa9 	bl	8000e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_I2C_MspInit+0x88>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_I2C_MspInit+0x88>)
 80008f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_I2C_MspInit+0x88>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	; 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40005400 	.word	0x40005400
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a32      	ldr	r2, [pc, #200]	; (8000a04 <HAL_UART_MspInit+0xe8>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12c      	bne.n	8000998 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <HAL_UART_MspInit+0xec>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a30      	ldr	r2, [pc, #192]	; (8000a08 <HAL_UART_MspInit+0xec>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <HAL_UART_MspInit+0xec>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000956:	61bb      	str	r3, [r7, #24]
 8000958:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <HAL_UART_MspInit+0xec>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a29      	ldr	r2, [pc, #164]	; (8000a08 <HAL_UART_MspInit+0xec>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <HAL_UART_MspInit+0xec>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD3     ------> USART2_CTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 8000976:	2368      	movs	r3, #104	; 0x68
 8000978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000986:	2307      	movs	r3, #7
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	481e      	ldr	r0, [pc, #120]	; (8000a0c <HAL_UART_MspInit+0xf0>)
 8000992:	f000 fa53 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000996:	e031      	b.n	80009fc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a1c      	ldr	r2, [pc, #112]	; (8000a10 <HAL_UART_MspInit+0xf4>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d12c      	bne.n	80009fc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0xec>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_UART_MspInit+0xec>)
 80009ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_UART_MspInit+0xec>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_UART_MspInit+0xec>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <HAL_UART_MspInit+0xec>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_UART_MspInit+0xec>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009ec:	2307      	movs	r3, #7
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <HAL_UART_MspInit+0xf0>)
 80009f8:	f000 fa20 	bl	8000e3c <HAL_GPIO_Init>
}
 80009fc:	bf00      	nop
 80009fe:	3730      	adds	r7, #48	; 0x30
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40004400 	.word	0x40004400
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	40004800 	.word	0x40004800

08000a14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	202d      	movs	r0, #45	; 0x2d
 8000a2a:	f000 f9dd 	bl	8000de8 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a2e:	202d      	movs	r0, #45	; 0x2d
 8000a30:	f000 f9f6 	bl	8000e20 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <HAL_InitTick+0xa4>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <HAL_InitTick+0xa4>)
 8000a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <HAL_InitTick+0xa4>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a50:	f107 0210 	add.w	r2, r7, #16
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 fde0 	bl	8001620 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a60:	f000 fdb6 	bl	80015d0 <HAL_RCC_GetPCLK1Freq>
 8000a64:	4603      	mov	r3, r0
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6c:	4a13      	ldr	r2, [pc, #76]	; (8000abc <HAL_InitTick+0xa8>)
 8000a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a72:	0c9b      	lsrs	r3, r3, #18
 8000a74:	3b01      	subs	r3, #1
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <HAL_InitTick+0xb0>)
 8000a7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a84:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <HAL_InitTick+0xac>)
 8000a9a:	f001 fa43 	bl	8001f24 <HAL_TIM_Base_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d104      	bne.n	8000aae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000aa4:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <HAL_InitTick+0xac>)
 8000aa6:	f001 fa97 	bl	8001fd8 <HAL_TIM_Base_Start_IT>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3730      	adds	r7, #48	; 0x30
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	431bde83 	.word	0x431bde83
 8000ac0:	20000168 	.word	0x20000168
 8000ac4:	40002000 	.word	0x40002000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b26:	f001 fac7 	bl	80020b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000168 	.word	0x20000168

08000b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <SystemInit+0x20>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <SystemInit+0x20>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b5c:	480d      	ldr	r0, [pc, #52]	; (8000b94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b5e:	490e      	ldr	r1, [pc, #56]	; (8000b98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b60:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b74:	4c0b      	ldr	r4, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b82:	f7ff ffd7 	bl	8000b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b86:	f001 ff91 	bl	8002aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b8a:	f7ff fcb7 	bl	80004fc <main>
  bx  lr    
 8000b8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b9c:	08002b7c 	.word	0x08002b7c
  ldr r2, =_sbss
 8000ba0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ba4:	200001b4 	.word	0x200001b4

08000ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC_IRQHandler>
	...

08000bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <HAL_Init+0x40>)
 8000bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_Init+0x40>)
 8000bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <HAL_Init+0x40>)
 8000bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f8fc 	bl	8000dd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bda:	200f      	movs	r0, #15
 8000bdc:	f7ff ff1a 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be0:	f7ff fe2c 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023c00 	.word	0x40023c00

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	200001b0 	.word	0x200001b0

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	200001b0 	.word	0x200001b0

08000c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff ffee 	bl	8000c18 <HAL_GetTick>
 8000c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_Delay+0x44>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c56:	bf00      	nop
 8000c58:	f7ff ffde 	bl	8000c18 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008

08000c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60d3      	str	r3, [r2, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	db0b      	blt.n	8000d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f003 021f 	and.w	r2, r3, #31
 8000cf4:	4907      	ldr	r1, [pc, #28]	; (8000d14 <__NVIC_EnableIRQ+0x38>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	095b      	lsrs	r3, r3, #5
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ff4c 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfa:	f7ff ff61 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000dfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	6978      	ldr	r0, [r7, #20]
 8000e06:	f7ff ffb1 	bl	8000d6c <NVIC_EncodePriority>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff80 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff54 	bl	8000cdc <__NVIC_EnableIRQ>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	e165      	b.n	8001124 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 8154 	bne.w	800111e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d005      	beq.n	8000e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d130      	bne.n	8000ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	f003 0201 	and.w	r2, r3, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d017      	beq.n	8000f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d123      	bne.n	8000f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	69b9      	ldr	r1, [r7, #24]
 8000f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0203 	and.w	r2, r3, #3
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80ae 	beq.w	800111e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b5d      	ldr	r3, [pc, #372]	; (800113c <HAL_GPIO_Init+0x300>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a5c      	ldr	r2, [pc, #368]	; (800113c <HAL_GPIO_Init+0x300>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b5a      	ldr	r3, [pc, #360]	; (800113c <HAL_GPIO_Init+0x300>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fde:	4a58      	ldr	r2, [pc, #352]	; (8001140 <HAL_GPIO_Init+0x304>)
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4f      	ldr	r2, [pc, #316]	; (8001144 <HAL_GPIO_Init+0x308>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d025      	beq.n	8001056 <HAL_GPIO_Init+0x21a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4e      	ldr	r2, [pc, #312]	; (8001148 <HAL_GPIO_Init+0x30c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d01f      	beq.n	8001052 <HAL_GPIO_Init+0x216>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4d      	ldr	r2, [pc, #308]	; (800114c <HAL_GPIO_Init+0x310>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d019      	beq.n	800104e <HAL_GPIO_Init+0x212>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4c      	ldr	r2, [pc, #304]	; (8001150 <HAL_GPIO_Init+0x314>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d013      	beq.n	800104a <HAL_GPIO_Init+0x20e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4b      	ldr	r2, [pc, #300]	; (8001154 <HAL_GPIO_Init+0x318>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d00d      	beq.n	8001046 <HAL_GPIO_Init+0x20a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4a      	ldr	r2, [pc, #296]	; (8001158 <HAL_GPIO_Init+0x31c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d007      	beq.n	8001042 <HAL_GPIO_Init+0x206>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a49      	ldr	r2, [pc, #292]	; (800115c <HAL_GPIO_Init+0x320>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d101      	bne.n	800103e <HAL_GPIO_Init+0x202>
 800103a:	2306      	movs	r3, #6
 800103c:	e00c      	b.n	8001058 <HAL_GPIO_Init+0x21c>
 800103e:	2307      	movs	r3, #7
 8001040:	e00a      	b.n	8001058 <HAL_GPIO_Init+0x21c>
 8001042:	2305      	movs	r3, #5
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x21c>
 8001046:	2304      	movs	r3, #4
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x21c>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x21c>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x21c>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x21c>
 8001056:	2300      	movs	r3, #0
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001068:	4935      	ldr	r1, [pc, #212]	; (8001140 <HAL_GPIO_Init+0x304>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001076:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <HAL_GPIO_Init+0x324>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109a:	4a31      	ldr	r2, [pc, #196]	; (8001160 <HAL_GPIO_Init+0x324>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a0:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <HAL_GPIO_Init+0x324>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c4:	4a26      	ldr	r2, [pc, #152]	; (8001160 <HAL_GPIO_Init+0x324>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <HAL_GPIO_Init+0x324>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <HAL_GPIO_Init+0x324>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <HAL_GPIO_Init+0x324>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001118:	4a11      	ldr	r2, [pc, #68]	; (8001160 <HAL_GPIO_Init+0x324>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f ae96 	bls.w	8000e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40013800 	.word	0x40013800
 8001144:	40020000 	.word	0x40020000
 8001148:	40020400 	.word	0x40020400
 800114c:	40020800 	.word	0x40020800
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40021000 	.word	0x40021000
 8001158:	40021400 	.word	0x40021400
 800115c:	40021800 	.word	0x40021800
 8001160:	40013c00 	.word	0x40013c00

08001164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e12b      	b.n	80013ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d106      	bne.n	8001190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fb7e 	bl	800088c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2224      	movs	r2, #36	; 0x24
 8001194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0201 	bic.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011c8:	f000 fa02 	bl	80015d0 <HAL_RCC_GetPCLK1Freq>
 80011cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4a81      	ldr	r2, [pc, #516]	; (80013d8 <HAL_I2C_Init+0x274>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d807      	bhi.n	80011e8 <HAL_I2C_Init+0x84>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4a80      	ldr	r2, [pc, #512]	; (80013dc <HAL_I2C_Init+0x278>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	bf94      	ite	ls
 80011e0:	2301      	movls	r3, #1
 80011e2:	2300      	movhi	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	e006      	b.n	80011f6 <HAL_I2C_Init+0x92>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4a7d      	ldr	r2, [pc, #500]	; (80013e0 <HAL_I2C_Init+0x27c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	bf94      	ite	ls
 80011f0:	2301      	movls	r3, #1
 80011f2:	2300      	movhi	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e0e7      	b.n	80013ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4a78      	ldr	r2, [pc, #480]	; (80013e4 <HAL_I2C_Init+0x280>)
 8001202:	fba2 2303 	umull	r2, r3, r2, r3
 8001206:	0c9b      	lsrs	r3, r3, #18
 8001208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	430a      	orrs	r2, r1
 800121c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4a6a      	ldr	r2, [pc, #424]	; (80013d8 <HAL_I2C_Init+0x274>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d802      	bhi.n	8001238 <HAL_I2C_Init+0xd4>
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	3301      	adds	r3, #1
 8001236:	e009      	b.n	800124c <HAL_I2C_Init+0xe8>
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800123e:	fb02 f303 	mul.w	r3, r2, r3
 8001242:	4a69      	ldr	r2, [pc, #420]	; (80013e8 <HAL_I2C_Init+0x284>)
 8001244:	fba2 2303 	umull	r2, r3, r2, r3
 8001248:	099b      	lsrs	r3, r3, #6
 800124a:	3301      	adds	r3, #1
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	430b      	orrs	r3, r1
 8001252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800125e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	495c      	ldr	r1, [pc, #368]	; (80013d8 <HAL_I2C_Init+0x274>)
 8001268:	428b      	cmp	r3, r1
 800126a:	d819      	bhi.n	80012a0 <HAL_I2C_Init+0x13c>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1e59      	subs	r1, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fbb1 f3f3 	udiv	r3, r1, r3
 800127a:	1c59      	adds	r1, r3, #1
 800127c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001280:	400b      	ands	r3, r1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00a      	beq.n	800129c <HAL_I2C_Init+0x138>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1e59      	subs	r1, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fbb1 f3f3 	udiv	r3, r1, r3
 8001294:	3301      	adds	r3, #1
 8001296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800129a:	e051      	b.n	8001340 <HAL_I2C_Init+0x1dc>
 800129c:	2304      	movs	r3, #4
 800129e:	e04f      	b.n	8001340 <HAL_I2C_Init+0x1dc>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d111      	bne.n	80012cc <HAL_I2C_Init+0x168>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	1e58      	subs	r0, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6859      	ldr	r1, [r3, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	440b      	add	r3, r1
 80012b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ba:	3301      	adds	r3, #1
 80012bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf0c      	ite	eq
 80012c4:	2301      	moveq	r3, #1
 80012c6:	2300      	movne	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	e012      	b.n	80012f2 <HAL_I2C_Init+0x18e>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	1e58      	subs	r0, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6859      	ldr	r1, [r3, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	0099      	lsls	r1, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	fbb0 f3f3 	udiv	r3, r0, r3
 80012e2:	3301      	adds	r3, #1
 80012e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf0c      	ite	eq
 80012ec:	2301      	moveq	r3, #1
 80012ee:	2300      	movne	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_I2C_Init+0x196>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e022      	b.n	8001340 <HAL_I2C_Init+0x1dc>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10e      	bne.n	8001320 <HAL_I2C_Init+0x1bc>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	1e58      	subs	r0, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6859      	ldr	r1, [r3, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	440b      	add	r3, r1
 8001310:	fbb0 f3f3 	udiv	r3, r0, r3
 8001314:	3301      	adds	r3, #1
 8001316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800131a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131e:	e00f      	b.n	8001340 <HAL_I2C_Init+0x1dc>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	1e58      	subs	r0, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6859      	ldr	r1, [r3, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	0099      	lsls	r1, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	fbb0 f3f3 	udiv	r3, r0, r3
 8001336:	3301      	adds	r3, #1
 8001338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800133c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	6809      	ldr	r1, [r1, #0]
 8001344:	4313      	orrs	r3, r2
 8001346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69da      	ldr	r2, [r3, #28]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800136e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6911      	ldr	r1, [r2, #16]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68d2      	ldr	r2, [r2, #12]
 800137a:	4311      	orrs	r1, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	430b      	orrs	r3, r1
 8001382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695a      	ldr	r2, [r3, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2220      	movs	r2, #32
 80013ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	000186a0 	.word	0x000186a0
 80013dc:	001e847f 	.word	0x001e847f
 80013e0:	003d08ff 	.word	0x003d08ff
 80013e4:	431bde83 	.word	0x431bde83
 80013e8:	10624dd3 	.word	0x10624dd3

080013ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e0cc      	b.n	800159a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001400:	4b68      	ldr	r3, [pc, #416]	; (80015a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 030f 	and.w	r3, r3, #15
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d90c      	bls.n	8001428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140e:	4b65      	ldr	r3, [pc, #404]	; (80015a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001416:	4b63      	ldr	r3, [pc, #396]	; (80015a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d001      	beq.n	8001428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0b8      	b.n	800159a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001440:	4b59      	ldr	r3, [pc, #356]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	4a58      	ldr	r2, [pc, #352]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800144a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001458:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4a52      	ldr	r2, [pc, #328]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001464:	4b50      	ldr	r3, [pc, #320]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	494d      	ldr	r1, [pc, #308]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	4313      	orrs	r3, r2
 8001474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d044      	beq.n	800150c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d107      	bne.n	800149a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148a:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d119      	bne.n	80014ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e07f      	b.n	800159a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d003      	beq.n	80014aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d107      	bne.n	80014ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014aa:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d109      	bne.n	80014ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e06f      	b.n	800159a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ba:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e067      	b.n	800159a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ca:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f023 0203 	bic.w	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4934      	ldr	r1, [pc, #208]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014dc:	f7ff fb9c 	bl	8000c18 <HAL_GetTick>
 80014e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e4:	f7ff fb98 	bl	8000c18 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e04f      	b.n	800159a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 020c 	and.w	r2, r3, #12
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	429a      	cmp	r2, r3
 800150a:	d1eb      	bne.n	80014e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <HAL_RCC_ClockConfig+0x1b8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 030f 	and.w	r3, r3, #15
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d20c      	bcs.n	8001534 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <HAL_RCC_ClockConfig+0x1b8>)
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e032      	b.n	800159a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	4916      	ldr	r1, [pc, #88]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d009      	beq.n	8001572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	490e      	ldr	r1, [pc, #56]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	4313      	orrs	r3, r2
 8001570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001572:	f000 f887 	bl	8001684 <HAL_RCC_GetSysClockFreq>
 8001576:	4602      	mov	r2, r0
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	490a      	ldr	r1, [pc, #40]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 8001584:	5ccb      	ldrb	r3, [r1, r3]
 8001586:	fa22 f303 	lsr.w	r3, r2, r3
 800158a:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 800158c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fa3e 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023c00 	.word	0x40023c00
 80015a8:	40023800 	.word	0x40023800
 80015ac:	08002b54 	.word	0x08002b54
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000004 	.word	0x20000004

080015b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <HAL_RCC_GetHCLKFreq+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000000 	.word	0x20000000

080015d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015d4:	f7ff fff0 	bl	80015b8 <HAL_RCC_GetHCLKFreq>
 80015d8:	4602      	mov	r2, r0
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	0a9b      	lsrs	r3, r3, #10
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	4903      	ldr	r1, [pc, #12]	; (80015f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015e6:	5ccb      	ldrb	r3, [r1, r3]
 80015e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40023800 	.word	0x40023800
 80015f4:	08002b64 	.word	0x08002b64

080015f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015fc:	f7ff ffdc 	bl	80015b8 <HAL_RCC_GetHCLKFreq>
 8001600:	4602      	mov	r2, r0
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	0b5b      	lsrs	r3, r3, #13
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	4903      	ldr	r1, [pc, #12]	; (800161c <HAL_RCC_GetPCLK2Freq+0x24>)
 800160e:	5ccb      	ldrb	r3, [r1, r3]
 8001610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001614:	4618      	mov	r0, r3
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	08002b64 	.word	0x08002b64

08001620 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	220f      	movs	r2, #15
 800162e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_RCC_GetClockConfig+0x5c>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_RCC_GetClockConfig+0x5c>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_RCC_GetClockConfig+0x5c>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_RCC_GetClockConfig+0x5c>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	08db      	lsrs	r3, r3, #3
 800165a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <HAL_RCC_GetClockConfig+0x60>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 020f 	and.w	r2, r3, #15
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	601a      	str	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40023c00 	.word	0x40023c00

08001684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001688:	b088      	sub	sp, #32
 800168a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016a0:	4bce      	ldr	r3, [pc, #824]	; (80019dc <HAL_RCC_GetSysClockFreq+0x358>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b0c      	cmp	r3, #12
 80016aa:	f200 818d 	bhi.w	80019c8 <HAL_RCC_GetSysClockFreq+0x344>
 80016ae:	a201      	add	r2, pc, #4	; (adr r2, 80016b4 <HAL_RCC_GetSysClockFreq+0x30>)
 80016b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b4:	080016e9 	.word	0x080016e9
 80016b8:	080019c9 	.word	0x080019c9
 80016bc:	080019c9 	.word	0x080019c9
 80016c0:	080019c9 	.word	0x080019c9
 80016c4:	080016ef 	.word	0x080016ef
 80016c8:	080019c9 	.word	0x080019c9
 80016cc:	080019c9 	.word	0x080019c9
 80016d0:	080019c9 	.word	0x080019c9
 80016d4:	080016f5 	.word	0x080016f5
 80016d8:	080019c9 	.word	0x080019c9
 80016dc:	080019c9 	.word	0x080019c9
 80016e0:	080019c9 	.word	0x080019c9
 80016e4:	08001869 	.word	0x08001869
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016e8:	4bbd      	ldr	r3, [pc, #756]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80016ea:	61bb      	str	r3, [r7, #24]
       break;
 80016ec:	e16f      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ee:	4bbd      	ldr	r3, [pc, #756]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x360>)
 80016f0:	61bb      	str	r3, [r7, #24]
      break;
 80016f2:	e16c      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016f4:	4bb9      	ldr	r3, [pc, #740]	; (80019dc <HAL_RCC_GetSysClockFreq+0x358>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016fc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016fe:	4bb7      	ldr	r3, [pc, #732]	; (80019dc <HAL_RCC_GetSysClockFreq+0x358>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d053      	beq.n	80017b2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170a:	4bb4      	ldr	r3, [pc, #720]	; (80019dc <HAL_RCC_GetSysClockFreq+0x358>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	099b      	lsrs	r3, r3, #6
 8001710:	461a      	mov	r2, r3
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	f240 10ff 	movw	r0, #511	; 0x1ff
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	ea02 0400 	and.w	r4, r2, r0
 8001722:	603c      	str	r4, [r7, #0]
 8001724:	400b      	ands	r3, r1
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	e9d7 4500 	ldrd	r4, r5, [r7]
 800172c:	4620      	mov	r0, r4
 800172e:	4629      	mov	r1, r5
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	014b      	lsls	r3, r1, #5
 800173a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800173e:	0142      	lsls	r2, r0, #5
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	4623      	mov	r3, r4
 8001746:	1ac0      	subs	r0, r0, r3
 8001748:	462b      	mov	r3, r5
 800174a:	eb61 0103 	sbc.w	r1, r1, r3
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	018b      	lsls	r3, r1, #6
 8001758:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800175c:	0182      	lsls	r2, r0, #6
 800175e:	1a12      	subs	r2, r2, r0
 8001760:	eb63 0301 	sbc.w	r3, r3, r1
 8001764:	f04f 0000 	mov.w	r0, #0
 8001768:	f04f 0100 	mov.w	r1, #0
 800176c:	00d9      	lsls	r1, r3, #3
 800176e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001772:	00d0      	lsls	r0, r2, #3
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4621      	mov	r1, r4
 800177a:	1852      	adds	r2, r2, r1
 800177c:	4629      	mov	r1, r5
 800177e:	eb43 0101 	adc.w	r1, r3, r1
 8001782:	460b      	mov	r3, r1
 8001784:	f04f 0000 	mov.w	r0, #0
 8001788:	f04f 0100 	mov.w	r1, #0
 800178c:	0259      	lsls	r1, r3, #9
 800178e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001792:	0250      	lsls	r0, r2, #9
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	461a      	mov	r2, r3
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	f7fe fd2e 	bl	8000204 <__aeabi_uldivmod>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4613      	mov	r3, r2
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	e04c      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b2:	4b8a      	ldr	r3, [pc, #552]	; (80019dc <HAL_RCC_GetSysClockFreq+0x358>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	099b      	lsrs	r3, r3, #6
 80017b8:	461a      	mov	r2, r3
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017c2:	f04f 0100 	mov.w	r1, #0
 80017c6:	ea02 0a00 	and.w	sl, r2, r0
 80017ca:	ea03 0b01 	and.w	fp, r3, r1
 80017ce:	4650      	mov	r0, sl
 80017d0:	4659      	mov	r1, fp
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	014b      	lsls	r3, r1, #5
 80017dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017e0:	0142      	lsls	r2, r0, #5
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	ebb0 000a 	subs.w	r0, r0, sl
 80017ea:	eb61 010b 	sbc.w	r1, r1, fp
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	018b      	lsls	r3, r1, #6
 80017f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017fc:	0182      	lsls	r2, r0, #6
 80017fe:	1a12      	subs	r2, r2, r0
 8001800:	eb63 0301 	sbc.w	r3, r3, r1
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	00d9      	lsls	r1, r3, #3
 800180e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001812:	00d0      	lsls	r0, r2, #3
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	eb12 020a 	adds.w	r2, r2, sl
 800181c:	eb43 030b 	adc.w	r3, r3, fp
 8001820:	f04f 0000 	mov.w	r0, #0
 8001824:	f04f 0100 	mov.w	r1, #0
 8001828:	0299      	lsls	r1, r3, #10
 800182a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800182e:	0290      	lsls	r0, r2, #10
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	461a      	mov	r2, r3
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	f7fe fce0 	bl	8000204 <__aeabi_uldivmod>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4613      	mov	r3, r2
 800184a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800184c:	4b63      	ldr	r3, [pc, #396]	; (80019dc <HAL_RCC_GetSysClockFreq+0x358>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	0c1b      	lsrs	r3, r3, #16
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	3301      	adds	r3, #1
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	fbb2 f3f3 	udiv	r3, r2, r3
 8001864:	61bb      	str	r3, [r7, #24]
      break;
 8001866:	e0b2      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001868:	4b5c      	ldr	r3, [pc, #368]	; (80019dc <HAL_RCC_GetSysClockFreq+0x358>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001870:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001872:	4b5a      	ldr	r3, [pc, #360]	; (80019dc <HAL_RCC_GetSysClockFreq+0x358>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d04d      	beq.n	800191a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187e:	4b57      	ldr	r3, [pc, #348]	; (80019dc <HAL_RCC_GetSysClockFreq+0x358>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	099b      	lsrs	r3, r3, #6
 8001884:	461a      	mov	r2, r3
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	ea02 0800 	and.w	r8, r2, r0
 8001896:	ea03 0901 	and.w	r9, r3, r1
 800189a:	4640      	mov	r0, r8
 800189c:	4649      	mov	r1, r9
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	014b      	lsls	r3, r1, #5
 80018a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018ac:	0142      	lsls	r2, r0, #5
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	ebb0 0008 	subs.w	r0, r0, r8
 80018b6:	eb61 0109 	sbc.w	r1, r1, r9
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	018b      	lsls	r3, r1, #6
 80018c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018c8:	0182      	lsls	r2, r0, #6
 80018ca:	1a12      	subs	r2, r2, r0
 80018cc:	eb63 0301 	sbc.w	r3, r3, r1
 80018d0:	f04f 0000 	mov.w	r0, #0
 80018d4:	f04f 0100 	mov.w	r1, #0
 80018d8:	00d9      	lsls	r1, r3, #3
 80018da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018de:	00d0      	lsls	r0, r2, #3
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	eb12 0208 	adds.w	r2, r2, r8
 80018e8:	eb43 0309 	adc.w	r3, r3, r9
 80018ec:	f04f 0000 	mov.w	r0, #0
 80018f0:	f04f 0100 	mov.w	r1, #0
 80018f4:	0259      	lsls	r1, r3, #9
 80018f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80018fa:	0250      	lsls	r0, r2, #9
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	461a      	mov	r2, r3
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	f7fe fc7a 	bl	8000204 <__aeabi_uldivmod>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4613      	mov	r3, r2
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	e04a      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191a:	4b30      	ldr	r3, [pc, #192]	; (80019dc <HAL_RCC_GetSysClockFreq+0x358>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	099b      	lsrs	r3, r3, #6
 8001920:	461a      	mov	r2, r3
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	f240 10ff 	movw	r0, #511	; 0x1ff
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	ea02 0400 	and.w	r4, r2, r0
 8001932:	ea03 0501 	and.w	r5, r3, r1
 8001936:	4620      	mov	r0, r4
 8001938:	4629      	mov	r1, r5
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	014b      	lsls	r3, r1, #5
 8001944:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001948:	0142      	lsls	r2, r0, #5
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	1b00      	subs	r0, r0, r4
 8001950:	eb61 0105 	sbc.w	r1, r1, r5
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	018b      	lsls	r3, r1, #6
 800195e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001962:	0182      	lsls	r2, r0, #6
 8001964:	1a12      	subs	r2, r2, r0
 8001966:	eb63 0301 	sbc.w	r3, r3, r1
 800196a:	f04f 0000 	mov.w	r0, #0
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	00d9      	lsls	r1, r3, #3
 8001974:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001978:	00d0      	lsls	r0, r2, #3
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	1912      	adds	r2, r2, r4
 8001980:	eb45 0303 	adc.w	r3, r5, r3
 8001984:	f04f 0000 	mov.w	r0, #0
 8001988:	f04f 0100 	mov.w	r1, #0
 800198c:	0299      	lsls	r1, r3, #10
 800198e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001992:	0290      	lsls	r0, r2, #10
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	461a      	mov	r2, r3
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	f7fe fc2e 	bl	8000204 <__aeabi_uldivmod>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4613      	mov	r3, r2
 80019ae:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_RCC_GetSysClockFreq+0x358>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	0f1b      	lsrs	r3, r3, #28
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c4:	61bb      	str	r3, [r7, #24]
      break;
 80019c6:	e002      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80019ca:	61bb      	str	r3, [r7, #24]
      break;
 80019cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ce:	69bb      	ldr	r3, [r7, #24]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	00f42400 	.word	0x00f42400
 80019e4:	007a1200 	.word	0x007a1200

080019e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e28d      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8083 	beq.w	8001b0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a08:	4b94      	ldr	r3, [pc, #592]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d019      	beq.n	8001a48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a14:	4b91      	ldr	r3, [pc, #580]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a20:	4b8e      	ldr	r3, [pc, #568]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a2c:	d00c      	beq.n	8001a48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a2e:	4b8b      	ldr	r3, [pc, #556]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a36:	2b0c      	cmp	r3, #12
 8001a38:	d112      	bne.n	8001a60 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a3a:	4b88      	ldr	r3, [pc, #544]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a46:	d10b      	bne.n	8001a60 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a48:	4b84      	ldr	r3, [pc, #528]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d05b      	beq.n	8001b0c <HAL_RCC_OscConfig+0x124>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d157      	bne.n	8001b0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e25a      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a68:	d106      	bne.n	8001a78 <HAL_RCC_OscConfig+0x90>
 8001a6a:	4b7c      	ldr	r3, [pc, #496]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a7b      	ldr	r2, [pc, #492]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e01d      	b.n	8001ab4 <HAL_RCC_OscConfig+0xcc>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0xb4>
 8001a82:	4b76      	ldr	r3, [pc, #472]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a75      	ldr	r2, [pc, #468]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a72      	ldr	r2, [pc, #456]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCC_OscConfig+0xcc>
 8001a9c:	4b6f      	ldr	r3, [pc, #444]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a6e      	ldr	r2, [pc, #440]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b6c      	ldr	r3, [pc, #432]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a6b      	ldr	r2, [pc, #428]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d013      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff f8ac 	bl	8000c18 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff f8a8 	bl	8000c18 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e21f      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b61      	ldr	r3, [pc, #388]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xdc>
 8001ae2:	e014      	b.n	8001b0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff f898 	bl	8000c18 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff f894 	bl	8000c18 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e20b      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x104>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d06f      	beq.n	8001bfa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b1a:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d017      	beq.n	8001b56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b26:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d105      	bne.n	8001b3e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b32:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00b      	beq.n	8001b56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d11c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b4a:	4b44      	ldr	r3, [pc, #272]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d116      	bne.n	8001b84 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b56:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <HAL_RCC_OscConfig+0x186>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e1d3      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4937      	ldr	r1, [pc, #220]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b82:	e03a      	b.n	8001bfa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d020      	beq.n	8001bce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b8c:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <HAL_RCC_OscConfig+0x278>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff f841 	bl	8000c18 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7ff f83d 	bl	8000c18 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e1b4      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4925      	ldr	r1, [pc, #148]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	600b      	str	r3, [r1, #0]
 8001bcc:	e015      	b.n	8001bfa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bce:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_RCC_OscConfig+0x278>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f820 	bl	8000c18 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bdc:	f7ff f81c 	bl	8000c18 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e193      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bee:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d036      	beq.n	8001c74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d016      	beq.n	8001c3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_RCC_OscConfig+0x27c>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7ff f800 	bl	8000c18 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1c:	f7fe fffc 	bl	8000c18 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e173      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x234>
 8001c3a:	e01b      	b.n	8001c74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_RCC_OscConfig+0x27c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c42:	f7fe ffe9 	bl	8000c18 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c48:	e00e      	b.n	8001c68 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4a:	f7fe ffe5 	bl	8000c18 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d907      	bls.n	8001c68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e15c      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	42470000 	.word	0x42470000
 8001c64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	4b8a      	ldr	r3, [pc, #552]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1ea      	bne.n	8001c4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 8097 	beq.w	8001db0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c86:	4b83      	ldr	r3, [pc, #524]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10f      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b7f      	ldr	r3, [pc, #508]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a7e      	ldr	r2, [pc, #504]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b7c      	ldr	r3, [pc, #496]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	4b79      	ldr	r3, [pc, #484]	; (8001e98 <HAL_RCC_OscConfig+0x4b0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d118      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cbe:	4b76      	ldr	r3, [pc, #472]	; (8001e98 <HAL_RCC_OscConfig+0x4b0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a75      	ldr	r2, [pc, #468]	; (8001e98 <HAL_RCC_OscConfig+0x4b0>)
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cca:	f7fe ffa5 	bl	8000c18 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd2:	f7fe ffa1 	bl	8000c18 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e118      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	4b6c      	ldr	r3, [pc, #432]	; (8001e98 <HAL_RCC_OscConfig+0x4b0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d106      	bne.n	8001d06 <HAL_RCC_OscConfig+0x31e>
 8001cf8:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfc:	4a65      	ldr	r2, [pc, #404]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6713      	str	r3, [r2, #112]	; 0x70
 8001d04:	e01c      	b.n	8001d40 <HAL_RCC_OscConfig+0x358>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x340>
 8001d0e:	4b61      	ldr	r3, [pc, #388]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d12:	4a60      	ldr	r2, [pc, #384]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1a:	4b5e      	ldr	r3, [pc, #376]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	4a5d      	ldr	r2, [pc, #372]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6713      	str	r3, [r2, #112]	; 0x70
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0x358>
 8001d28:	4b5a      	ldr	r3, [pc, #360]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	4a59      	ldr	r2, [pc, #356]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70
 8001d34:	4b57      	ldr	r3, [pc, #348]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d38:	4a56      	ldr	r2, [pc, #344]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d3a:	f023 0304 	bic.w	r3, r3, #4
 8001d3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d015      	beq.n	8001d74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7fe ff66 	bl	8000c18 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d50:	f7fe ff62 	bl	8000c18 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e0d7      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d66:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0ee      	beq.n	8001d50 <HAL_RCC_OscConfig+0x368>
 8001d72:	e014      	b.n	8001d9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d74:	f7fe ff50 	bl	8000c18 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d7c:	f7fe ff4c 	bl	8000c18 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e0c1      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d92:	4b40      	ldr	r3, [pc, #256]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1ee      	bne.n	8001d7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	4a3a      	ldr	r2, [pc, #232]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80ad 	beq.w	8001f14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dba:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d060      	beq.n	8001e88 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d145      	bne.n	8001e5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dce:	4b33      	ldr	r3, [pc, #204]	; (8001e9c <HAL_RCC_OscConfig+0x4b4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7fe ff20 	bl	8000c18 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7fe ff1c 	bl	8000c18 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e093      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dee:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	019b      	lsls	r3, r3, #6
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	085b      	lsrs	r3, r3, #1
 8001e12:	3b01      	subs	r3, #1
 8001e14:	041b      	lsls	r3, r3, #16
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	061b      	lsls	r3, r3, #24
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	071b      	lsls	r3, r3, #28
 8001e26:	491b      	ldr	r1, [pc, #108]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_RCC_OscConfig+0x4b4>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e32:	f7fe fef1 	bl	8000c18 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3a:	f7fe feed 	bl	8000c18 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e064      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x452>
 8001e58:	e05c      	b.n	8001f14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_RCC_OscConfig+0x4b4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe feda 	bl	8000c18 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e68:	f7fe fed6 	bl	8000c18 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e04d      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCC_OscConfig+0x4ac>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x480>
 8001e86:	e045      	b.n	8001f14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e040      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <HAL_RCC_OscConfig+0x538>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d030      	beq.n	8001f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d129      	bne.n	8001f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d122      	bne.n	8001f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ed6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d119      	bne.n	8001f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	085b      	lsrs	r3, r3, #1
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d10f      	bne.n	8001f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e041      	b.n	8001fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f839 	bl	8001fc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4610      	mov	r0, r2
 8001f64:	f000 f9d8 	bl	8002318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d001      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e04e      	b.n	800208e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a23      	ldr	r2, [pc, #140]	; (800209c <HAL_TIM_Base_Start_IT+0xc4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d022      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x80>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201a:	d01d      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x80>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d018      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x80>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d013      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x80>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00e      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x80>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <HAL_TIM_Base_Start_IT+0xd4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d009      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x80>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d004      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x80>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d111      	bne.n	800207c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b06      	cmp	r3, #6
 8002068:	d010      	beq.n	800208c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207a:	e007      	b.n	800208c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40010000 	.word	0x40010000
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40000800 	.word	0x40000800
 80020a8:	40000c00 	.word	0x40000c00
 80020ac:	40010400 	.word	0x40010400
 80020b0:	40014000 	.word	0x40014000
 80020b4:	40001800 	.word	0x40001800

080020b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d122      	bne.n	8002114 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d11b      	bne.n	8002114 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0202 	mvn.w	r2, #2
 80020e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8ee 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8e0 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f8f1 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b04      	cmp	r3, #4
 8002120:	d122      	bne.n	8002168 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b04      	cmp	r3, #4
 800212e:	d11b      	bne.n	8002168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0204 	mvn.w	r2, #4
 8002138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f8c4 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 8002154:	e005      	b.n	8002162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f8b6 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f8c7 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b08      	cmp	r3, #8
 8002174:	d122      	bne.n	80021bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b08      	cmp	r3, #8
 8002182:	d11b      	bne.n	80021bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0208 	mvn.w	r2, #8
 800218c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2204      	movs	r2, #4
 8002192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f89a 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 80021a8:	e005      	b.n	80021b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f88c 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f89d 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b10      	cmp	r3, #16
 80021c8:	d122      	bne.n	8002210 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b10      	cmp	r3, #16
 80021d6:	d11b      	bne.n	8002210 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0210 	mvn.w	r2, #16
 80021e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2208      	movs	r2, #8
 80021e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f870 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 80021fc:	e005      	b.n	800220a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f862 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f873 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10e      	bne.n	800223c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d107      	bne.n	800223c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0201 	mvn.w	r2, #1
 8002234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fae8 	bl	800080c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002246:	2b80      	cmp	r3, #128	; 0x80
 8002248:	d10e      	bne.n	8002268 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d107      	bne.n	8002268 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f902 	bl	800246c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002272:	2b40      	cmp	r3, #64	; 0x40
 8002274:	d10e      	bne.n	8002294 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002280:	2b40      	cmp	r3, #64	; 0x40
 8002282:	d107      	bne.n	8002294 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800228c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f838 	bl	8002304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d10e      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d107      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0220 	mvn.w	r2, #32
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8cc 	bl	8002458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a40      	ldr	r2, [pc, #256]	; (800242c <TIM_Base_SetConfig+0x114>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <TIM_Base_SetConfig+0x40>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002336:	d00f      	beq.n	8002358 <TIM_Base_SetConfig+0x40>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a3d      	ldr	r2, [pc, #244]	; (8002430 <TIM_Base_SetConfig+0x118>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00b      	beq.n	8002358 <TIM_Base_SetConfig+0x40>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a3c      	ldr	r2, [pc, #240]	; (8002434 <TIM_Base_SetConfig+0x11c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d007      	beq.n	8002358 <TIM_Base_SetConfig+0x40>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <TIM_Base_SetConfig+0x120>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d003      	beq.n	8002358 <TIM_Base_SetConfig+0x40>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3a      	ldr	r2, [pc, #232]	; (800243c <TIM_Base_SetConfig+0x124>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d108      	bne.n	800236a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a2f      	ldr	r2, [pc, #188]	; (800242c <TIM_Base_SetConfig+0x114>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d02b      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002378:	d027      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a2c      	ldr	r2, [pc, #176]	; (8002430 <TIM_Base_SetConfig+0x118>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d023      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a2b      	ldr	r2, [pc, #172]	; (8002434 <TIM_Base_SetConfig+0x11c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d01f      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a2a      	ldr	r2, [pc, #168]	; (8002438 <TIM_Base_SetConfig+0x120>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01b      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a29      	ldr	r2, [pc, #164]	; (800243c <TIM_Base_SetConfig+0x124>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d017      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a28      	ldr	r2, [pc, #160]	; (8002440 <TIM_Base_SetConfig+0x128>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d013      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a27      	ldr	r2, [pc, #156]	; (8002444 <TIM_Base_SetConfig+0x12c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00f      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a26      	ldr	r2, [pc, #152]	; (8002448 <TIM_Base_SetConfig+0x130>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00b      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a25      	ldr	r2, [pc, #148]	; (800244c <TIM_Base_SetConfig+0x134>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d007      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a24      	ldr	r2, [pc, #144]	; (8002450 <TIM_Base_SetConfig+0x138>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d003      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a23      	ldr	r2, [pc, #140]	; (8002454 <TIM_Base_SetConfig+0x13c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d108      	bne.n	80023dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <TIM_Base_SetConfig+0x114>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d003      	beq.n	8002410 <TIM_Base_SetConfig+0xf8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a0c      	ldr	r2, [pc, #48]	; (800243c <TIM_Base_SetConfig+0x124>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d103      	bne.n	8002418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	615a      	str	r2, [r3, #20]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40010000 	.word	0x40010000
 8002430:	40000400 	.word	0x40000400
 8002434:	40000800 	.word	0x40000800
 8002438:	40000c00 	.word	0x40000c00
 800243c:	40010400 	.word	0x40010400
 8002440:	40014000 	.word	0x40014000
 8002444:	40014400 	.word	0x40014400
 8002448:	40014800 	.word	0x40014800
 800244c:	40001800 	.word	0x40001800
 8002450:	40001c00 	.word	0x40001c00
 8002454:	40002000 	.word	0x40002000

08002458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e03f      	b.n	8002512 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe fa38 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2224      	movs	r2, #36	; 0x24
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f929 	bl	800271c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b08a      	sub	sp, #40	; 0x28
 800251e:	af02      	add	r7, sp, #8
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	4613      	mov	r3, r2
 8002528:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b20      	cmp	r3, #32
 8002538:	d17c      	bne.n	8002634 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <HAL_UART_Transmit+0x2c>
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e075      	b.n	8002636 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_UART_Transmit+0x3e>
 8002554:	2302      	movs	r3, #2
 8002556:	e06e      	b.n	8002636 <HAL_UART_Transmit+0x11c>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2221      	movs	r2, #33	; 0x21
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800256e:	f7fe fb53 	bl	8000c18 <HAL_GetTick>
 8002572:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	88fa      	ldrh	r2, [r7, #6]
 8002578:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	88fa      	ldrh	r2, [r7, #6]
 800257e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002588:	d108      	bne.n	800259c <HAL_UART_Transmit+0x82>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d104      	bne.n	800259c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e003      	b.n	80025a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025ac:	e02a      	b.n	8002604 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2200      	movs	r2, #0
 80025b6:	2180      	movs	r1, #128	; 0x80
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 f840 	bl	800263e <UART_WaitOnFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e036      	b.n	8002636 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10b      	bne.n	80025e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	3302      	adds	r3, #2
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	e007      	b.n	80025f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	3301      	adds	r3, #1
 80025f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1cf      	bne.n	80025ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2200      	movs	r2, #0
 8002616:	2140      	movs	r1, #64	; 0x40
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f810 	bl	800263e <UART_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e006      	b.n	8002636 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	e000      	b.n	8002636 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002634:	2302      	movs	r3, #2
  }
}
 8002636:	4618      	mov	r0, r3
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b090      	sub	sp, #64	; 0x40
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	4613      	mov	r3, r2
 800264c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800264e:	e050      	b.n	80026f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002656:	d04c      	beq.n	80026f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <UART_WaitOnFlagUntilTimeout+0x30>
 800265e:	f7fe fadb 	bl	8000c18 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800266a:	429a      	cmp	r2, r3
 800266c:	d241      	bcs.n	80026f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	330c      	adds	r3, #12
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	e853 3f00 	ldrex	r3, [r3]
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	330c      	adds	r3, #12
 800268c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800268e:	637a      	str	r2, [r7, #52]	; 0x34
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002692:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002696:	e841 2300 	strex	r3, r2, [r1]
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1e5      	bne.n	800266e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3314      	adds	r3, #20
 80026a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	e853 3f00 	ldrex	r3, [r3]
 80026b0:	613b      	str	r3, [r7, #16]
   return(result);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3314      	adds	r3, #20
 80026c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026c2:	623a      	str	r2, [r7, #32]
 80026c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c6:	69f9      	ldr	r1, [r7, #28]
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	e841 2300 	strex	r3, r2, [r1]
 80026ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1e5      	bne.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e00f      	b.n	8002712 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4013      	ands	r3, r2
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	429a      	cmp	r2, r3
 8002700:	bf0c      	ite	eq
 8002702:	2301      	moveq	r3, #1
 8002704:	2300      	movne	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	429a      	cmp	r2, r3
 800270e:	d09f      	beq.n	8002650 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3740      	adds	r7, #64	; 0x40
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800271c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002720:	b09f      	sub	sp, #124	; 0x7c
 8002722:	af00      	add	r7, sp, #0
 8002724:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002732:	68d9      	ldr	r1, [r3, #12]
 8002734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	ea40 0301 	orr.w	r3, r0, r1
 800273c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800273e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	431a      	orrs	r2, r3
 8002748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	431a      	orrs	r2, r3
 800274e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4313      	orrs	r3, r2
 8002754:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002760:	f021 010c 	bic.w	r1, r1, #12
 8002764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800276a:	430b      	orrs	r3, r1
 800276c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800276e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277a:	6999      	ldr	r1, [r3, #24]
 800277c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	ea40 0301 	orr.w	r3, r0, r1
 8002784:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4bc5      	ldr	r3, [pc, #788]	; (8002aa0 <UART_SetConfig+0x384>)
 800278c:	429a      	cmp	r2, r3
 800278e:	d004      	beq.n	800279a <UART_SetConfig+0x7e>
 8002790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4bc3      	ldr	r3, [pc, #780]	; (8002aa4 <UART_SetConfig+0x388>)
 8002796:	429a      	cmp	r2, r3
 8002798:	d103      	bne.n	80027a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800279a:	f7fe ff2d 	bl	80015f8 <HAL_RCC_GetPCLK2Freq>
 800279e:	6778      	str	r0, [r7, #116]	; 0x74
 80027a0:	e002      	b.n	80027a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027a2:	f7fe ff15 	bl	80015d0 <HAL_RCC_GetPCLK1Freq>
 80027a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b0:	f040 80b6 	bne.w	8002920 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027b6:	461c      	mov	r4, r3
 80027b8:	f04f 0500 	mov.w	r5, #0
 80027bc:	4622      	mov	r2, r4
 80027be:	462b      	mov	r3, r5
 80027c0:	1891      	adds	r1, r2, r2
 80027c2:	6439      	str	r1, [r7, #64]	; 0x40
 80027c4:	415b      	adcs	r3, r3
 80027c6:	647b      	str	r3, [r7, #68]	; 0x44
 80027c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027cc:	1912      	adds	r2, r2, r4
 80027ce:	eb45 0303 	adc.w	r3, r5, r3
 80027d2:	f04f 0000 	mov.w	r0, #0
 80027d6:	f04f 0100 	mov.w	r1, #0
 80027da:	00d9      	lsls	r1, r3, #3
 80027dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027e0:	00d0      	lsls	r0, r2, #3
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	1911      	adds	r1, r2, r4
 80027e8:	6639      	str	r1, [r7, #96]	; 0x60
 80027ea:	416b      	adcs	r3, r5
 80027ec:	667b      	str	r3, [r7, #100]	; 0x64
 80027ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	1891      	adds	r1, r2, r2
 80027fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80027fc:	415b      	adcs	r3, r3
 80027fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002800:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002804:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002808:	f7fd fcfc 	bl	8000204 <__aeabi_uldivmod>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4ba5      	ldr	r3, [pc, #660]	; (8002aa8 <UART_SetConfig+0x38c>)
 8002812:	fba3 2302 	umull	r2, r3, r3, r2
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	011e      	lsls	r6, r3, #4
 800281a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800281c:	461c      	mov	r4, r3
 800281e:	f04f 0500 	mov.w	r5, #0
 8002822:	4622      	mov	r2, r4
 8002824:	462b      	mov	r3, r5
 8002826:	1891      	adds	r1, r2, r2
 8002828:	6339      	str	r1, [r7, #48]	; 0x30
 800282a:	415b      	adcs	r3, r3
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
 800282e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002832:	1912      	adds	r2, r2, r4
 8002834:	eb45 0303 	adc.w	r3, r5, r3
 8002838:	f04f 0000 	mov.w	r0, #0
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	00d9      	lsls	r1, r3, #3
 8002842:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002846:	00d0      	lsls	r0, r2, #3
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	1911      	adds	r1, r2, r4
 800284e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002850:	416b      	adcs	r3, r5
 8002852:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	461a      	mov	r2, r3
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	1891      	adds	r1, r2, r2
 8002860:	62b9      	str	r1, [r7, #40]	; 0x28
 8002862:	415b      	adcs	r3, r3
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002866:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800286a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800286e:	f7fd fcc9 	bl	8000204 <__aeabi_uldivmod>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4b8c      	ldr	r3, [pc, #560]	; (8002aa8 <UART_SetConfig+0x38c>)
 8002878:	fba3 1302 	umull	r1, r3, r3, r2
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	2164      	movs	r1, #100	; 0x64
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	3332      	adds	r3, #50	; 0x32
 800288a:	4a87      	ldr	r2, [pc, #540]	; (8002aa8 <UART_SetConfig+0x38c>)
 800288c:	fba2 2303 	umull	r2, r3, r2, r3
 8002890:	095b      	lsrs	r3, r3, #5
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002898:	441e      	add	r6, r3
 800289a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800289c:	4618      	mov	r0, r3
 800289e:	f04f 0100 	mov.w	r1, #0
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	1894      	adds	r4, r2, r2
 80028a8:	623c      	str	r4, [r7, #32]
 80028aa:	415b      	adcs	r3, r3
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
 80028ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028b2:	1812      	adds	r2, r2, r0
 80028b4:	eb41 0303 	adc.w	r3, r1, r3
 80028b8:	f04f 0400 	mov.w	r4, #0
 80028bc:	f04f 0500 	mov.w	r5, #0
 80028c0:	00dd      	lsls	r5, r3, #3
 80028c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80028c6:	00d4      	lsls	r4, r2, #3
 80028c8:	4622      	mov	r2, r4
 80028ca:	462b      	mov	r3, r5
 80028cc:	1814      	adds	r4, r2, r0
 80028ce:	653c      	str	r4, [r7, #80]	; 0x50
 80028d0:	414b      	adcs	r3, r1
 80028d2:	657b      	str	r3, [r7, #84]	; 0x54
 80028d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	461a      	mov	r2, r3
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	1891      	adds	r1, r2, r2
 80028e0:	61b9      	str	r1, [r7, #24]
 80028e2:	415b      	adcs	r3, r3
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80028ee:	f7fd fc89 	bl	8000204 <__aeabi_uldivmod>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4b6c      	ldr	r3, [pc, #432]	; (8002aa8 <UART_SetConfig+0x38c>)
 80028f8:	fba3 1302 	umull	r1, r3, r3, r2
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	2164      	movs	r1, #100	; 0x64
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	3332      	adds	r3, #50	; 0x32
 800290a:	4a67      	ldr	r2, [pc, #412]	; (8002aa8 <UART_SetConfig+0x38c>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	f003 0207 	and.w	r2, r3, #7
 8002916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4432      	add	r2, r6
 800291c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800291e:	e0b9      	b.n	8002a94 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002922:	461c      	mov	r4, r3
 8002924:	f04f 0500 	mov.w	r5, #0
 8002928:	4622      	mov	r2, r4
 800292a:	462b      	mov	r3, r5
 800292c:	1891      	adds	r1, r2, r2
 800292e:	6139      	str	r1, [r7, #16]
 8002930:	415b      	adcs	r3, r3
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002938:	1912      	adds	r2, r2, r4
 800293a:	eb45 0303 	adc.w	r3, r5, r3
 800293e:	f04f 0000 	mov.w	r0, #0
 8002942:	f04f 0100 	mov.w	r1, #0
 8002946:	00d9      	lsls	r1, r3, #3
 8002948:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800294c:	00d0      	lsls	r0, r2, #3
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	eb12 0804 	adds.w	r8, r2, r4
 8002956:	eb43 0905 	adc.w	r9, r3, r5
 800295a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4618      	mov	r0, r3
 8002960:	f04f 0100 	mov.w	r1, #0
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	008b      	lsls	r3, r1, #2
 800296e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002972:	0082      	lsls	r2, r0, #2
 8002974:	4640      	mov	r0, r8
 8002976:	4649      	mov	r1, r9
 8002978:	f7fd fc44 	bl	8000204 <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4b49      	ldr	r3, [pc, #292]	; (8002aa8 <UART_SetConfig+0x38c>)
 8002982:	fba3 2302 	umull	r2, r3, r3, r2
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	011e      	lsls	r6, r3, #4
 800298a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800298c:	4618      	mov	r0, r3
 800298e:	f04f 0100 	mov.w	r1, #0
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	1894      	adds	r4, r2, r2
 8002998:	60bc      	str	r4, [r7, #8]
 800299a:	415b      	adcs	r3, r3
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029a2:	1812      	adds	r2, r2, r0
 80029a4:	eb41 0303 	adc.w	r3, r1, r3
 80029a8:	f04f 0400 	mov.w	r4, #0
 80029ac:	f04f 0500 	mov.w	r5, #0
 80029b0:	00dd      	lsls	r5, r3, #3
 80029b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029b6:	00d4      	lsls	r4, r2, #3
 80029b8:	4622      	mov	r2, r4
 80029ba:	462b      	mov	r3, r5
 80029bc:	1814      	adds	r4, r2, r0
 80029be:	64bc      	str	r4, [r7, #72]	; 0x48
 80029c0:	414b      	adcs	r3, r1
 80029c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f04f 0100 	mov.w	r1, #0
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	008b      	lsls	r3, r1, #2
 80029d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029dc:	0082      	lsls	r2, r0, #2
 80029de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80029e2:	f7fd fc0f 	bl	8000204 <__aeabi_uldivmod>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <UART_SetConfig+0x38c>)
 80029ec:	fba3 1302 	umull	r1, r3, r3, r2
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	2164      	movs	r1, #100	; 0x64
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	3332      	adds	r3, #50	; 0x32
 80029fe:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <UART_SetConfig+0x38c>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a0a:	441e      	add	r6, r3
 8002a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f04f 0100 	mov.w	r1, #0
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	1894      	adds	r4, r2, r2
 8002a1a:	603c      	str	r4, [r7, #0]
 8002a1c:	415b      	adcs	r3, r3
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a24:	1812      	adds	r2, r2, r0
 8002a26:	eb41 0303 	adc.w	r3, r1, r3
 8002a2a:	f04f 0400 	mov.w	r4, #0
 8002a2e:	f04f 0500 	mov.w	r5, #0
 8002a32:	00dd      	lsls	r5, r3, #3
 8002a34:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a38:	00d4      	lsls	r4, r2, #3
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	eb12 0a00 	adds.w	sl, r2, r0
 8002a42:	eb43 0b01 	adc.w	fp, r3, r1
 8002a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f04f 0100 	mov.w	r1, #0
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	008b      	lsls	r3, r1, #2
 8002a5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a5e:	0082      	lsls	r2, r0, #2
 8002a60:	4650      	mov	r0, sl
 8002a62:	4659      	mov	r1, fp
 8002a64:	f7fd fbce 	bl	8000204 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <UART_SetConfig+0x38c>)
 8002a6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2164      	movs	r1, #100	; 0x64
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	3332      	adds	r3, #50	; 0x32
 8002a80:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <UART_SetConfig+0x38c>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	f003 020f 	and.w	r2, r3, #15
 8002a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4432      	add	r2, r6
 8002a92:	609a      	str	r2, [r3, #8]
}
 8002a94:	bf00      	nop
 8002a96:	377c      	adds	r7, #124	; 0x7c
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40011000 	.word	0x40011000
 8002aa4:	40011400 	.word	0x40011400
 8002aa8:	51eb851f 	.word	0x51eb851f

08002aac <__libc_init_array>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	4d0d      	ldr	r5, [pc, #52]	; (8002ae4 <__libc_init_array+0x38>)
 8002ab0:	4c0d      	ldr	r4, [pc, #52]	; (8002ae8 <__libc_init_array+0x3c>)
 8002ab2:	1b64      	subs	r4, r4, r5
 8002ab4:	10a4      	asrs	r4, r4, #2
 8002ab6:	2600      	movs	r6, #0
 8002ab8:	42a6      	cmp	r6, r4
 8002aba:	d109      	bne.n	8002ad0 <__libc_init_array+0x24>
 8002abc:	4d0b      	ldr	r5, [pc, #44]	; (8002aec <__libc_init_array+0x40>)
 8002abe:	4c0c      	ldr	r4, [pc, #48]	; (8002af0 <__libc_init_array+0x44>)
 8002ac0:	f000 f820 	bl	8002b04 <_init>
 8002ac4:	1b64      	subs	r4, r4, r5
 8002ac6:	10a4      	asrs	r4, r4, #2
 8002ac8:	2600      	movs	r6, #0
 8002aca:	42a6      	cmp	r6, r4
 8002acc:	d105      	bne.n	8002ada <__libc_init_array+0x2e>
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
 8002ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad4:	4798      	blx	r3
 8002ad6:	3601      	adds	r6, #1
 8002ad8:	e7ee      	b.n	8002ab8 <__libc_init_array+0xc>
 8002ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ade:	4798      	blx	r3
 8002ae0:	3601      	adds	r6, #1
 8002ae2:	e7f2      	b.n	8002aca <__libc_init_array+0x1e>
 8002ae4:	08002b74 	.word	0x08002b74
 8002ae8:	08002b74 	.word	0x08002b74
 8002aec:	08002b74 	.word	0x08002b74
 8002af0:	08002b78 	.word	0x08002b78

08002af4 <memset>:
 8002af4:	4402      	add	r2, r0
 8002af6:	4603      	mov	r3, r0
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d100      	bne.n	8002afe <memset+0xa>
 8002afc:	4770      	bx	lr
 8002afe:	f803 1b01 	strb.w	r1, [r3], #1
 8002b02:	e7f9      	b.n	8002af8 <memset+0x4>

08002b04 <_init>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr

08002b10 <_fini>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr
