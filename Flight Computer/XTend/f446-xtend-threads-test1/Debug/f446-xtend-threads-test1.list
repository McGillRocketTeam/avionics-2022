
f446-xtend-threads-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adf8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  0800afc8  0800afc8  0001afc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5cc  0800b5cc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5cc  0800b5cc  0001b5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5d4  0800b5d4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5d4  0800b5d4  0001b5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5d8  0800b5d8  0001b5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004df4  200001e4  0800b7c0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004fd8  0800b7c0  00024fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020207  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a92  00000000  00000000  0004041b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00043eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  00045648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000048ff  00000000  00000000  00046cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae5c  00000000  00000000  0004b5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dedd4  00000000  00000000  0006641b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001451ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a18  00000000  00000000  00145244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800afb0 	.word	0x0800afb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800afb0 	.word	0x0800afb0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b5b0      	push	{r4, r5, r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f000 fd17 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f84b 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f000 f937 	bl	80012ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800103e:	f000 f8e1 	bl	8001204 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001042:	f000 f909 	bl	8001258 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001046:	f000 f8af 	bl	80011a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // XTend Code
  uint8_t Start[] = "Starting XTend\r\n";
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <main+0x7c>)
 800104c:	1d3c      	adds	r4, r7, #4
 800104e:	461d      	mov	r5, r3
 8001050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001054:	682b      	ldr	r3, [r5, #0]
 8001056:	7023      	strb	r3, [r4, #0]
  XTend_Transmit(Start); // Transmit to XTend
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f95c 	bl	8001318 <XTend_Transmit>
  HAL_UART_Transmit(&huart3, Start, 16, HAL_MAX_DELAY); // Transmit to Serial Monitor
 8001060:	1d39      	adds	r1, r7, #4
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	2210      	movs	r2, #16
 8001068:	4810      	ldr	r0, [pc, #64]	; (80010ac <main+0x80>)
 800106a:	f002 f9b2 	bl	80033d2 <HAL_UART_Transmit>

  // Wait for Launch
  HAL_UART_Receive(&huart2, UART2_rxBuffer, 8, HAL_MAX_DELAY);
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	2208      	movs	r2, #8
 8001074:	490e      	ldr	r1, [pc, #56]	; (80010b0 <main+0x84>)
 8001076:	480f      	ldr	r0, [pc, #60]	; (80010b4 <main+0x88>)
 8001078:	f002 fa3d 	bl	80034f6 <HAL_UART_Receive>
  // Code Continues after receiving 8 characters

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800107c:	f002 fd58 	bl	8003b30 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SDCard */
  SDCardHandle = osThreadNew(SDCardStart, NULL, &SDCard_attributes);
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <main+0x8c>)
 8001082:	2100      	movs	r1, #0
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <main+0x90>)
 8001086:	f002 fd9d 	bl	8003bc4 <osThreadNew>
 800108a:	4603      	mov	r3, r0
 800108c:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <main+0x94>)
 800108e:	6013      	str	r3, [r2, #0]

  /* creation of XTend */
  XTendHandle = osThreadNew(XTendStart, NULL, &XTend_attributes);
 8001090:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <main+0x98>)
 8001092:	2100      	movs	r1, #0
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <main+0x9c>)
 8001096:	f002 fd95 	bl	8003bc4 <osThreadNew>
 800109a:	4603      	mov	r3, r0
 800109c:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <main+0xa0>)
 800109e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010a0:	f002 fd6a 	bl	8003b78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <main+0x78>
 80010a6:	bf00      	nop
 80010a8:	0800afd8 	.word	0x0800afd8
 80010ac:	20004c24 	.word	0x20004c24
 80010b0:	20000200 	.word	0x20000200
 80010b4:	20004ee8 	.word	0x20004ee8
 80010b8:	0800b0b8 	.word	0x0800b0b8
 80010bc:	08001345 	.word	0x08001345
 80010c0:	20004cbc 	.word	0x20004cbc
 80010c4:	0800b0dc 	.word	0x0800b0dc
 80010c8:	08001355 	.word	0x08001355
 80010cc:	20004f2c 	.word	0x20004f2c

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b094      	sub	sp, #80	; 0x50
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	2234      	movs	r2, #52	; 0x34
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f005 fbd5 	bl	800688e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <SystemClock_Config+0xd0>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <SystemClock_Config+0xd0>)
 80010fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001102:	6413      	str	r3, [r2, #64]	; 0x40
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <SystemClock_Config+0xd0>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001110:	2300      	movs	r3, #0
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <SystemClock_Config+0xd4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <SystemClock_Config+0xd4>)
 800111a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <SystemClock_Config+0xd4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800112c:	2302      	movs	r3, #2
 800112e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001130:	2301      	movs	r3, #1
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001134:	2310      	movs	r3, #16
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001138:	2302      	movs	r3, #2
 800113a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800113c:	2300      	movs	r3, #0
 800113e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001140:	2308      	movs	r3, #8
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001144:	23a8      	movs	r3, #168	; 0xa8
 8001146:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800114c:	2307      	movs	r3, #7
 800114e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4618      	mov	r0, r3
 800115a:	f001 fba1 	bl	80028a0 <HAL_RCC_OscConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001164:	f000 fa0c 	bl	8001580 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001168:	230f      	movs	r3, #15
 800116a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116c:	2302      	movs	r3, #2
 800116e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001174:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001178:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800117a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	2105      	movs	r1, #5
 8001186:	4618      	mov	r0, r3
 8001188:	f001 f88c 	bl	80022a4 <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001192:	f000 f9f5 	bl	8001580 <Error_Handler>
  }
}
 8001196:	bf00      	nop
 8001198:	3750      	adds	r7, #80	; 0x50
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40007000 	.word	0x40007000

080011a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011ae:	4a13      	ldr	r2, [pc, #76]	; (80011fc <MX_I2C1_Init+0x54>)
 80011b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011b4:	4a12      	ldr	r2, [pc, #72]	; (8001200 <MX_I2C1_Init+0x58>)
 80011b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011e6:	f000 ff19 	bl	800201c <HAL_I2C_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011f0:	f000 f9c6 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20004c68 	.word	0x20004c68
 80011fc:	40005400 	.word	0x40005400
 8001200:	000186a0 	.word	0x000186a0

08001204 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <MX_USART2_UART_Init+0x50>)
 800120c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001210:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001214:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800122a:	220c      	movs	r2, #12
 800122c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_CTS;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001234:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800123e:	f002 f87b 	bl	8003338 <HAL_UART_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001248:	f000 f99a 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20004ee8 	.word	0x20004ee8
 8001254:	40004400 	.word	0x40004400

08001258 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <MX_USART3_UART_Init+0x50>)
 8001260:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 8001264:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001268:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 8001290:	f002 f852 	bl	8003338 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800129a:	f000 f971 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20004c24 	.word	0x20004c24
 80012a8:	40004800 	.word	0x40004800

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_GPIO_Init+0x68>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a16      	ldr	r2, [pc, #88]	; (8001314 <MX_GPIO_Init+0x68>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_GPIO_Init+0x68>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <MX_GPIO_Init+0x68>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <MX_GPIO_Init+0x68>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <MX_GPIO_Init+0x68>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_GPIO_Init+0x68>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <MX_GPIO_Init+0x68>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_GPIO_Init+0x68>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800

08001318 <XTend_Transmit>:
/* USER CODE BEGIN 4 */
/**
 * @brief   Function to transmit message to XTend
 * @param  Msg : char array (range 1-800)
 */
static void XTend_Transmit(char *Msg){
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, Msg, strlen(Msg), HAL_Delay);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7fe ff75 	bl	8000210 <strlen>
 8001326:	4603      	mov	r3, r0
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <XTend_Transmit+0x24>)
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4804      	ldr	r0, [pc, #16]	; (8001340 <XTend_Transmit+0x28>)
 8001330:	f002 f84f 	bl	80033d2 <HAL_UART_Transmit>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	08001ae9 	.word	0x08001ae9
 8001340:	20004ee8 	.word	0x20004ee8

08001344 <SDCardStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SDCardStart */
void SDCardStart(void *argument)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f002 fccb 	bl	8003ce8 <osDelay>
 8001352:	e7fb      	b.n	800134c <SDCardStart+0x8>

08001354 <XTendStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_XTendStart */
void XTendStart(void *argument)
{
 8001354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001358:	b0b4      	sub	sp, #208	; 0xd0
 800135a:	af1c      	add	r7, sp, #112	; 0x70
 800135c:	65f8      	str	r0, [r7, #92]	; 0x5c
  /* USER CODE BEGIN XTendStart */
  /* Infinite loop */
  for(;;)
  {
	  S = 0.22;
 800135e:	4b6d      	ldr	r3, [pc, #436]	; (8001514 <XTendStart+0x1c0>)
 8001360:	4a6d      	ldr	r2, [pc, #436]	; (8001518 <XTendStart+0x1c4>)
 8001362:	601a      	str	r2, [r3, #0]
	  ACCx = 0.22;
 8001364:	4b6d      	ldr	r3, [pc, #436]	; (800151c <XTendStart+0x1c8>)
 8001366:	4a6c      	ldr	r2, [pc, #432]	; (8001518 <XTendStart+0x1c4>)
 8001368:	601a      	str	r2, [r3, #0]
	  ACCy = 0.22;
 800136a:	4b6d      	ldr	r3, [pc, #436]	; (8001520 <XTendStart+0x1cc>)
 800136c:	4a6a      	ldr	r2, [pc, #424]	; (8001518 <XTendStart+0x1c4>)
 800136e:	601a      	str	r2, [r3, #0]
	  ACCz = 0.22;
 8001370:	4b6c      	ldr	r3, [pc, #432]	; (8001524 <XTendStart+0x1d0>)
 8001372:	4a69      	ldr	r2, [pc, #420]	; (8001518 <XTendStart+0x1c4>)
 8001374:	601a      	str	r2, [r3, #0]
	  PITCH = 0.22;
 8001376:	4b6c      	ldr	r3, [pc, #432]	; (8001528 <XTendStart+0x1d4>)
 8001378:	4a67      	ldr	r2, [pc, #412]	; (8001518 <XTendStart+0x1c4>)
 800137a:	601a      	str	r2, [r3, #0]
	  ROLL = 0.22;
 800137c:	4b6b      	ldr	r3, [pc, #428]	; (800152c <XTendStart+0x1d8>)
 800137e:	4a66      	ldr	r2, [pc, #408]	; (8001518 <XTendStart+0x1c4>)
 8001380:	601a      	str	r2, [r3, #0]
	  YAW = 0.22;
 8001382:	4b6b      	ldr	r3, [pc, #428]	; (8001530 <XTendStart+0x1dc>)
 8001384:	4a64      	ldr	r2, [pc, #400]	; (8001518 <XTendStart+0x1c4>)
 8001386:	601a      	str	r2, [r3, #0]
	  PRESSURE = 0.22;
 8001388:	4b6a      	ldr	r3, [pc, #424]	; (8001534 <XTendStart+0x1e0>)
 800138a:	4a63      	ldr	r2, [pc, #396]	; (8001518 <XTendStart+0x1c4>)
 800138c:	601a      	str	r2, [r3, #0]
	  LAT = 0.22;
 800138e:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <XTendStart+0x1e4>)
 8001390:	4a61      	ldr	r2, [pc, #388]	; (8001518 <XTendStart+0x1c4>)
 8001392:	601a      	str	r2, [r3, #0]
	  LONG = 0.22;
 8001394:	4b69      	ldr	r3, [pc, #420]	; (800153c <XTendStart+0x1e8>)
 8001396:	4a60      	ldr	r2, [pc, #384]	; (8001518 <XTendStart+0x1c4>)
 8001398:	601a      	str	r2, [r3, #0]
	  HOUR = 0.22;
 800139a:	4b69      	ldr	r3, [pc, #420]	; (8001540 <XTendStart+0x1ec>)
 800139c:	4a5e      	ldr	r2, [pc, #376]	; (8001518 <XTendStart+0x1c4>)
 800139e:	601a      	str	r2, [r3, #0]
	  MIN = 0.22;
 80013a0:	4b68      	ldr	r3, [pc, #416]	; (8001544 <XTendStart+0x1f0>)
 80013a2:	4a5d      	ldr	r2, [pc, #372]	; (8001518 <XTendStart+0x1c4>)
 80013a4:	601a      	str	r2, [r3, #0]
	  SEC = 0.22;
 80013a6:	4b68      	ldr	r3, [pc, #416]	; (8001548 <XTendStart+0x1f4>)
 80013a8:	4a5b      	ldr	r2, [pc, #364]	; (8001518 <XTendStart+0x1c4>)
 80013aa:	601a      	str	r2, [r3, #0]
	  STATE = 0.22;
 80013ac:	4b67      	ldr	r3, [pc, #412]	; (800154c <XTendStart+0x1f8>)
 80013ae:	4a5a      	ldr	r2, [pc, #360]	; (8001518 <XTendStart+0x1c4>)
 80013b0:	601a      	str	r2, [r3, #0]
	  E = 0.22;
 80013b2:	4b67      	ldr	r3, [pc, #412]	; (8001550 <XTendStart+0x1fc>)
 80013b4:	4a58      	ldr	r2, [pc, #352]	; (8001518 <XTendStart+0x1c4>)
 80013b6:	601a      	str	r2, [r3, #0]

	  //TODO: format the float part 'cause I'm getting a memory-related hard fault
	  memset (UART2_txBuffer,0,512);
 80013b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013bc:	2100      	movs	r1, #0
 80013be:	4865      	ldr	r0, [pc, #404]	; (8001554 <XTendStart+0x200>)
 80013c0:	f005 fa65 	bl	800688e <memset>
	  sprintf(UART2_txBuffer,
 80013c4:	4b53      	ldr	r3, [pc, #332]	; (8001514 <XTendStart+0x1c0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8dd 	bl	8000588 <__aeabi_f2d>
 80013ce:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 80013d2:	4b52      	ldr	r3, [pc, #328]	; (800151c <XTendStart+0x1c8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f8d6 	bl	8000588 <__aeabi_f2d>
 80013dc:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 80013e0:	4b4f      	ldr	r3, [pc, #316]	; (8001520 <XTendStart+0x1cc>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f8cf 	bl	8000588 <__aeabi_f2d>
 80013ea:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 80013ee:	4b4d      	ldr	r3, [pc, #308]	; (8001524 <XTendStart+0x1d0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f8c8 	bl	8000588 <__aeabi_f2d>
 80013f8:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 80013fc:	4b4a      	ldr	r3, [pc, #296]	; (8001528 <XTendStart+0x1d4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8c1 	bl	8000588 <__aeabi_f2d>
 8001406:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 800140a:	4b48      	ldr	r3, [pc, #288]	; (800152c <XTendStart+0x1d8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f8ba 	bl	8000588 <__aeabi_f2d>
 8001414:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001418:	4b45      	ldr	r3, [pc, #276]	; (8001530 <XTendStart+0x1dc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f8b3 	bl	8000588 <__aeabi_f2d>
 8001422:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001426:	4b43      	ldr	r3, [pc, #268]	; (8001534 <XTendStart+0x1e0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f8ac 	bl	8000588 <__aeabi_f2d>
 8001430:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001434:	4b40      	ldr	r3, [pc, #256]	; (8001538 <XTendStart+0x1e4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f8a5 	bl	8000588 <__aeabi_f2d>
 800143e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001442:	4b3e      	ldr	r3, [pc, #248]	; (800153c <XTendStart+0x1e8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f89e 	bl	8000588 <__aeabi_f2d>
 800144c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001450:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <XTendStart+0x1ec>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f897 	bl	8000588 <__aeabi_f2d>
 800145a:	e9c7 0100 	strd	r0, r1, [r7]
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <XTendStart+0x1f0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f890 	bl	8000588 <__aeabi_f2d>
 8001468:	4682      	mov	sl, r0
 800146a:	468b      	mov	fp, r1
 800146c:	4b36      	ldr	r3, [pc, #216]	; (8001548 <XTendStart+0x1f4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f889 	bl	8000588 <__aeabi_f2d>
 8001476:	4680      	mov	r8, r0
 8001478:	4689      	mov	r9, r1
 800147a:	4b34      	ldr	r3, [pc, #208]	; (800154c <XTendStart+0x1f8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f882 	bl	8000588 <__aeabi_f2d>
 8001484:	4604      	mov	r4, r0
 8001486:	460d      	mov	r5, r1
 8001488:	4b31      	ldr	r3, [pc, #196]	; (8001550 <XTendStart+0x1fc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f87b 	bl	8000588 <__aeabi_f2d>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 800149a:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 800149e:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 80014a2:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 80014a6:	ed97 7b00 	vldr	d7, [r7]
 80014aa:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80014ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80014b2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80014b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80014ba:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80014be:	ed97 7b06 	vldr	d7, [r7, #24]
 80014c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80014c6:	ed97 7b08 	vldr	d7, [r7, #32]
 80014ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80014ce:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80014d2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80014d6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80014da:	ed8d 7b06 	vstr	d7, [sp, #24]
 80014de:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80014e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80014e6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80014ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 80014ee:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80014f2:	ed8d 7b00 	vstr	d7, [sp]
 80014f6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80014fa:	4917      	ldr	r1, [pc, #92]	; (8001558 <XTendStart+0x204>)
 80014fc:	4815      	ldr	r0, [pc, #84]	; (8001554 <XTendStart+0x200>)
 80014fe:	f006 f923 	bl	8007748 <siprintf>
			  "S: %.2f\r\nACCx:%.2f \r\nACCy: %.2f\r\nACCz: %.2f\r\nPITCH: %.2f\r\nROLL: %.2f\r\nYAW: %.2f\r\nPRESSURE: %.2f\r\nLAT: %.2f\r\nLONG: %.2f\r\nHOUR: %.2f\r\nMIN: %.2f\r\nSEC: %.2f\r\nSTATE: %.2f\r\nE: %.2f\r\n",
			  S,ACCx,ACCy,ACCz,PITCH,ROLL,YAW,PRESSURE,LAT,LONG,HOUR,MIN,SEC,STATE,E);
	  XTend_Transmit((uint8_t*) UART2_txBuffer);
 8001502:	4814      	ldr	r0, [pc, #80]	; (8001554 <XTendStart+0x200>)
 8001504:	f7ff ff08 	bl	8001318 <XTend_Transmit>
    osDelay(1000);
 8001508:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800150c:	f002 fbec 	bl	8003ce8 <osDelay>
  {
 8001510:	e725      	b.n	800135e <XTendStart+0xa>
 8001512:	bf00      	nop
 8001514:	20004cc4 	.word	0x20004cc4
 8001518:	3e6147ae 	.word	0x3e6147ae
 800151c:	20004cdc 	.word	0x20004cdc
 8001520:	20004ce0 	.word	0x20004ce0
 8001524:	20004ccc 	.word	0x20004ccc
 8001528:	20004cd8 	.word	0x20004cd8
 800152c:	20004c1c 	.word	0x20004c1c
 8001530:	20004f34 	.word	0x20004f34
 8001534:	20004cc0 	.word	0x20004cc0
 8001538:	20004f38 	.word	0x20004f38
 800153c:	20004c20 	.word	0x20004c20
 8001540:	20004cd4 	.word	0x20004cd4
 8001544:	20004f30 	.word	0x20004f30
 8001548:	20004cc8 	.word	0x20004cc8
 800154c:	20004cd0 	.word	0x20004cd0
 8001550:	20004ce4 	.word	0x20004ce4
 8001554:	20004ce8 	.word	0x20004ce8
 8001558:	0800afec 	.word	0x0800afec

0800155c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800156e:	f000 fa9b 	bl	8001aa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40002000 	.word	0x40002000

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	e7fe      	b.n	8001588 <Error_Handler+0x8>
	...

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_MspInit+0x54>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <HAL_MspInit+0x54>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_MspInit+0x54>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_MspInit+0x54>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <HAL_MspInit+0x54>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_MspInit+0x54>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	210f      	movs	r1, #15
 80015ce:	f06f 0001 	mvn.w	r0, #1
 80015d2:	f000 fb65 	bl	8001ca0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a19      	ldr	r2, [pc, #100]	; (8001668 <HAL_I2C_MspInit+0x84>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d12b      	bne.n	800165e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_I2C_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a17      	ldr	r2, [pc, #92]	; (800166c <HAL_I2C_MspInit+0x88>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_I2C_MspInit+0x88>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001622:	23c0      	movs	r3, #192	; 0xc0
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001626:	2312      	movs	r3, #18
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001632:	2304      	movs	r3, #4
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <HAL_I2C_MspInit+0x8c>)
 800163e:	f000 fb59 	bl	8001cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_I2C_MspInit+0x88>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_I2C_MspInit+0x88>)
 800164c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_I2C_MspInit+0x88>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	; 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40005400 	.word	0x40005400
 800166c:	40023800 	.word	0x40023800
 8001670:	40020400 	.word	0x40020400

08001674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a32      	ldr	r2, [pc, #200]	; (800175c <HAL_UART_MspInit+0xe8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d12c      	bne.n	80016f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	4b31      	ldr	r3, [pc, #196]	; (8001760 <HAL_UART_MspInit+0xec>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a30      	ldr	r2, [pc, #192]	; (8001760 <HAL_UART_MspInit+0xec>)
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <HAL_UART_MspInit+0xec>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <HAL_UART_MspInit+0xec>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a29      	ldr	r2, [pc, #164]	; (8001760 <HAL_UART_MspInit+0xec>)
 80016bc:	f043 0308 	orr.w	r3, r3, #8
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b27      	ldr	r3, [pc, #156]	; (8001760 <HAL_UART_MspInit+0xec>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD3     ------> USART2_CTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 80016ce:	2368      	movs	r3, #104	; 0x68
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016de:	2307      	movs	r3, #7
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	4619      	mov	r1, r3
 80016e8:	481e      	ldr	r0, [pc, #120]	; (8001764 <HAL_UART_MspInit+0xf0>)
 80016ea:	f000 fb03 	bl	8001cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016ee:	e031      	b.n	8001754 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <HAL_UART_MspInit+0xf4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d12c      	bne.n	8001754 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <HAL_UART_MspInit+0xec>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a17      	ldr	r2, [pc, #92]	; (8001760 <HAL_UART_MspInit+0xec>)
 8001704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_UART_MspInit+0xec>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_UART_MspInit+0xec>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a10      	ldr	r2, [pc, #64]	; (8001760 <HAL_UART_MspInit+0xec>)
 8001720:	f043 0308 	orr.w	r3, r3, #8
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_UART_MspInit+0xec>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001732:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001744:	2307      	movs	r3, #7
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <HAL_UART_MspInit+0xf0>)
 8001750:	f000 fad0 	bl	8001cf4 <HAL_GPIO_Init>
}
 8001754:	bf00      	nop
 8001756:	3730      	adds	r7, #48	; 0x30
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40004400 	.word	0x40004400
 8001760:	40023800 	.word	0x40023800
 8001764:	40020c00 	.word	0x40020c00
 8001768:	40004800 	.word	0x40004800

0800176c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	202d      	movs	r0, #45	; 0x2d
 8001782:	f000 fa8d 	bl	8001ca0 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001786:	202d      	movs	r0, #45	; 0x2d
 8001788:	f000 faa6 	bl	8001cd8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <HAL_InitTick+0xa4>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <HAL_InitTick+0xa4>)
 8001796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179a:	6413      	str	r3, [r2, #64]	; 0x40
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_InitTick+0xa4>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a8:	f107 0210 	add.w	r2, r7, #16
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 fe90 	bl	80024d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80017b8:	f000 fe66 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 80017bc:	4603      	mov	r3, r0
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c4:	4a13      	ldr	r2, [pc, #76]	; (8001814 <HAL_InitTick+0xa8>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	0c9b      	lsrs	r3, r3, #18
 80017cc:	3b01      	subs	r3, #1
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_InitTick+0xac>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <HAL_InitTick+0xb0>)
 80017d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_InitTick+0xac>)
 80017d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017dc:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80017de:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <HAL_InitTick+0xac>)
 80017e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e2:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_InitTick+0xac>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_InitTick+0xac>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80017f0:	4809      	ldr	r0, [pc, #36]	; (8001818 <HAL_InitTick+0xac>)
 80017f2:	f001 faf3 	bl	8002ddc <HAL_TIM_Base_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d104      	bne.n	8001806 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80017fc:	4806      	ldr	r0, [pc, #24]	; (8001818 <HAL_InitTick+0xac>)
 80017fe:	f001 fb47 	bl	8002e90 <HAL_TIM_Base_Start_IT>
 8001802:	4603      	mov	r3, r0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3730      	adds	r7, #48	; 0x30
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40023800 	.word	0x40023800
 8001814:	431bde83 	.word	0x431bde83
 8001818:	20004f3c 	.word	0x20004f3c
 800181c:	40002000 	.word	0x40002000

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <NMI_Handler+0x4>

08001826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <MemManage_Handler+0x4>

08001832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <BusFault_Handler+0x4>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <UsageFault_Handler+0x4>

0800183e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001852:	f001 fb8d 	bl	8002f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20004f3c 	.word	0x20004f3c

08001860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	return 1;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_kill>:

int _kill(int pid, int sig)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800187a:	f004 fed7 	bl	800662c <__errno>
 800187e:	4603      	mov	r3, r0
 8001880:	2216      	movs	r2, #22
 8001882:	601a      	str	r2, [r3, #0]
	return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_exit>:

void _exit (int status)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffe7 	bl	8001870 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018a2:	e7fe      	b.n	80018a2 <_exit+0x12>

080018a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	e00a      	b.n	80018cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018b6:	f3af 8000 	nop.w
 80018ba:	4601      	mov	r1, r0
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	60ba      	str	r2, [r7, #8]
 80018c2:	b2ca      	uxtb	r2, r1
 80018c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf0      	blt.n	80018b6 <_read+0x12>
	}

return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e009      	b.n	8001904 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbf1      	blt.n	80018f0 <_write+0x12>
	}
	return len;
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_close>:

int _close(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
	return -1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193e:	605a      	str	r2, [r3, #4]
	return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_isatty>:

int _isatty(int file)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
	return 1;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
	return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001988:	4a14      	ldr	r2, [pc, #80]	; (80019dc <_sbrk+0x5c>)
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <_sbrk+0x60>)
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <_sbrk+0x64>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <_sbrk+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d207      	bcs.n	80019c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b0:	f004 fe3c 	bl	800662c <__errno>
 80019b4:	4603      	mov	r3, r0
 80019b6:	220c      	movs	r2, #12
 80019b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	e009      	b.n	80019d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <_sbrk+0x64>)
 80019d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20020000 	.word	0x20020000
 80019e0:	00000400 	.word	0x00000400
 80019e4:	20000240 	.word	0x20000240
 80019e8:	20004fd8 	.word	0x20004fd8

080019ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <SystemInit+0x20>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <SystemInit+0x20>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a16:	490e      	ldr	r1, [pc, #56]	; (8001a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a18:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a2c:	4c0b      	ldr	r4, [pc, #44]	; (8001a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a3a:	f7ff ffd7 	bl	80019ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f004 fef1 	bl	8006824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a42:	f7ff faf3 	bl	800102c <main>
  bx  lr    
 8001a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a50:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001a54:	0800b5dc 	.word	0x0800b5dc
  ldr r2, =_sbss
 8001a58:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001a5c:	20004fd8 	.word	0x20004fd8

08001a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_Init+0x40>)
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_Init+0x40>)
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_Init+0x40>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f8fc 	bl	8001c8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	200f      	movs	r0, #15
 8001a94:	f7ff fe6a 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff fd78 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	20004f84 	.word	0x20004f84

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20004f84 	.word	0x20004f84

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000008 	.word	0x20000008

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	; (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	; (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	; (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ff4c 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb2:	f7ff ff61 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	6978      	ldr	r0, [r7, #20]
 8001cbe:	f7ff ffb1 	bl	8001c24 <NVIC_EncodePriority>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff80 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001cd0:	bf00      	nop
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff54 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	e165      	b.n	8001fdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d10:	2201      	movs	r2, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	f040 8154 	bne.w	8001fd6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d005      	beq.n	8001d46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d130      	bne.n	8001da8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	2203      	movs	r2, #3
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 0201 	and.w	r2, r3, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d017      	beq.n	8001de4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d123      	bne.n	8001e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	08da      	lsrs	r2, r3, #3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3208      	adds	r2, #8
 8001df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	220f      	movs	r2, #15
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	08da      	lsrs	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3208      	adds	r2, #8
 8001e32:	69b9      	ldr	r1, [r7, #24]
 8001e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0203 	and.w	r2, r3, #3
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80ae 	beq.w	8001fd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ff4 <HAL_GPIO_Init+0x300>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	4a5c      	ldr	r2, [pc, #368]	; (8001ff4 <HAL_GPIO_Init+0x300>)
 8001e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e88:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8a:	4b5a      	ldr	r3, [pc, #360]	; (8001ff4 <HAL_GPIO_Init+0x300>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e96:	4a58      	ldr	r2, [pc, #352]	; (8001ff8 <HAL_GPIO_Init+0x304>)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	220f      	movs	r2, #15
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4f      	ldr	r2, [pc, #316]	; (8001ffc <HAL_GPIO_Init+0x308>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d025      	beq.n	8001f0e <HAL_GPIO_Init+0x21a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4e      	ldr	r2, [pc, #312]	; (8002000 <HAL_GPIO_Init+0x30c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d01f      	beq.n	8001f0a <HAL_GPIO_Init+0x216>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4d      	ldr	r2, [pc, #308]	; (8002004 <HAL_GPIO_Init+0x310>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d019      	beq.n	8001f06 <HAL_GPIO_Init+0x212>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4c      	ldr	r2, [pc, #304]	; (8002008 <HAL_GPIO_Init+0x314>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d013      	beq.n	8001f02 <HAL_GPIO_Init+0x20e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4b      	ldr	r2, [pc, #300]	; (800200c <HAL_GPIO_Init+0x318>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00d      	beq.n	8001efe <HAL_GPIO_Init+0x20a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4a      	ldr	r2, [pc, #296]	; (8002010 <HAL_GPIO_Init+0x31c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d007      	beq.n	8001efa <HAL_GPIO_Init+0x206>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a49      	ldr	r2, [pc, #292]	; (8002014 <HAL_GPIO_Init+0x320>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d101      	bne.n	8001ef6 <HAL_GPIO_Init+0x202>
 8001ef2:	2306      	movs	r3, #6
 8001ef4:	e00c      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	e00a      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001efa:	2305      	movs	r3, #5
 8001efc:	e008      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001efe:	2304      	movs	r3, #4
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001f02:	2303      	movs	r3, #3
 8001f04:	e004      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e002      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	f002 0203 	and.w	r2, r2, #3
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	4093      	lsls	r3, r2
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f20:	4935      	ldr	r1, [pc, #212]	; (8001ff8 <HAL_GPIO_Init+0x304>)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3302      	adds	r3, #2
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f2e:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <HAL_GPIO_Init+0x324>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f52:	4a31      	ldr	r2, [pc, #196]	; (8002018 <HAL_GPIO_Init+0x324>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f58:	4b2f      	ldr	r3, [pc, #188]	; (8002018 <HAL_GPIO_Init+0x324>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f7c:	4a26      	ldr	r2, [pc, #152]	; (8002018 <HAL_GPIO_Init+0x324>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f82:	4b25      	ldr	r3, [pc, #148]	; (8002018 <HAL_GPIO_Init+0x324>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <HAL_GPIO_Init+0x324>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_GPIO_Init+0x324>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd0:	4a11      	ldr	r2, [pc, #68]	; (8002018 <HAL_GPIO_Init+0x324>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	2b0f      	cmp	r3, #15
 8001fe0:	f67f ae96 	bls.w	8001d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3724      	adds	r7, #36	; 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40013800 	.word	0x40013800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40020400 	.word	0x40020400
 8002004:	40020800 	.word	0x40020800
 8002008:	40020c00 	.word	0x40020c00
 800200c:	40021000 	.word	0x40021000
 8002010:	40021400 	.word	0x40021400
 8002014:	40021800 	.word	0x40021800
 8002018:	40013c00 	.word	0x40013c00

0800201c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e12b      	b.n	8002286 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff face 	bl	80015e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2224      	movs	r2, #36	; 0x24
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800206e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800207e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002080:	f000 fa02 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 8002084:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4a81      	ldr	r2, [pc, #516]	; (8002290 <HAL_I2C_Init+0x274>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d807      	bhi.n	80020a0 <HAL_I2C_Init+0x84>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4a80      	ldr	r2, [pc, #512]	; (8002294 <HAL_I2C_Init+0x278>)
 8002094:	4293      	cmp	r3, r2
 8002096:	bf94      	ite	ls
 8002098:	2301      	movls	r3, #1
 800209a:	2300      	movhi	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	e006      	b.n	80020ae <HAL_I2C_Init+0x92>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4a7d      	ldr	r2, [pc, #500]	; (8002298 <HAL_I2C_Init+0x27c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	bf94      	ite	ls
 80020a8:	2301      	movls	r3, #1
 80020aa:	2300      	movhi	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0e7      	b.n	8002286 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4a78      	ldr	r2, [pc, #480]	; (800229c <HAL_I2C_Init+0x280>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	0c9b      	lsrs	r3, r3, #18
 80020c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a6a      	ldr	r2, [pc, #424]	; (8002290 <HAL_I2C_Init+0x274>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d802      	bhi.n	80020f0 <HAL_I2C_Init+0xd4>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	3301      	adds	r3, #1
 80020ee:	e009      	b.n	8002104 <HAL_I2C_Init+0xe8>
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	4a69      	ldr	r2, [pc, #420]	; (80022a0 <HAL_I2C_Init+0x284>)
 80020fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002100:	099b      	lsrs	r3, r3, #6
 8002102:	3301      	adds	r3, #1
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	430b      	orrs	r3, r1
 800210a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002116:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	495c      	ldr	r1, [pc, #368]	; (8002290 <HAL_I2C_Init+0x274>)
 8002120:	428b      	cmp	r3, r1
 8002122:	d819      	bhi.n	8002158 <HAL_I2C_Init+0x13c>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1e59      	subs	r1, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002132:	1c59      	adds	r1, r3, #1
 8002134:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002138:	400b      	ands	r3, r1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_I2C_Init+0x138>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1e59      	subs	r1, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fbb1 f3f3 	udiv	r3, r1, r3
 800214c:	3301      	adds	r3, #1
 800214e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002152:	e051      	b.n	80021f8 <HAL_I2C_Init+0x1dc>
 8002154:	2304      	movs	r3, #4
 8002156:	e04f      	b.n	80021f8 <HAL_I2C_Init+0x1dc>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d111      	bne.n	8002184 <HAL_I2C_Init+0x168>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1e58      	subs	r0, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	440b      	add	r3, r1
 800216e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002172:	3301      	adds	r3, #1
 8002174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	e012      	b.n	80021aa <HAL_I2C_Init+0x18e>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1e58      	subs	r0, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	0099      	lsls	r1, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	fbb0 f3f3 	udiv	r3, r0, r3
 800219a:	3301      	adds	r3, #1
 800219c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf0c      	ite	eq
 80021a4:	2301      	moveq	r3, #1
 80021a6:	2300      	movne	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_I2C_Init+0x196>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e022      	b.n	80021f8 <HAL_I2C_Init+0x1dc>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10e      	bne.n	80021d8 <HAL_I2C_Init+0x1bc>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1e58      	subs	r0, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6859      	ldr	r1, [r3, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	440b      	add	r3, r1
 80021c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d6:	e00f      	b.n	80021f8 <HAL_I2C_Init+0x1dc>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1e58      	subs	r0, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6859      	ldr	r1, [r3, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	0099      	lsls	r1, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ee:	3301      	adds	r3, #1
 80021f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	6809      	ldr	r1, [r1, #0]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69da      	ldr	r2, [r3, #28]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002226:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6911      	ldr	r1, [r2, #16]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68d2      	ldr	r2, [r2, #12]
 8002232:	4311      	orrs	r1, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	430b      	orrs	r3, r1
 800223a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2220      	movs	r2, #32
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	000186a0 	.word	0x000186a0
 8002294:	001e847f 	.word	0x001e847f
 8002298:	003d08ff 	.word	0x003d08ff
 800229c:	431bde83 	.word	0x431bde83
 80022a0:	10624dd3 	.word	0x10624dd3

080022a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0cc      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b8:	4b68      	ldr	r3, [pc, #416]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d90c      	bls.n	80022e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b65      	ldr	r3, [pc, #404]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b63      	ldr	r3, [pc, #396]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0b8      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f8:	4b59      	ldr	r3, [pc, #356]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a58      	ldr	r2, [pc, #352]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002302:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002310:	4b53      	ldr	r3, [pc, #332]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4a52      	ldr	r2, [pc, #328]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800231a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231c:	4b50      	ldr	r3, [pc, #320]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	494d      	ldr	r1, [pc, #308]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d044      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d119      	bne.n	8002382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e07f      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d003      	beq.n	8002362 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800235e:	2b03      	cmp	r3, #3
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002362:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e06f      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002372:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e067      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002382:	4b37      	ldr	r3, [pc, #220]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 0203 	bic.w	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4934      	ldr	r1, [pc, #208]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	4313      	orrs	r3, r2
 8002392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002394:	f7ff fb9c 	bl	8001ad0 <HAL_GetTick>
 8002398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239c:	f7ff fb98 	bl	8001ad0 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e04f      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 020c 	and.w	r2, r3, #12
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d1eb      	bne.n	800239c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023c4:	4b25      	ldr	r3, [pc, #148]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d20c      	bcs.n	80023ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b22      	ldr	r3, [pc, #136]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e032      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4916      	ldr	r1, [pc, #88]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	490e      	ldr	r1, [pc, #56]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800242a:	f000 f887 	bl	800253c <HAL_RCC_GetSysClockFreq>
 800242e:	4602      	mov	r2, r0
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	490a      	ldr	r1, [pc, #40]	; (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	5ccb      	ldrb	r3, [r1, r3]
 800243e:	fa22 f303 	lsr.w	r3, r2, r3
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff f98e 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40023c00 	.word	0x40023c00
 8002460:	40023800 	.word	0x40023800
 8002464:	0800b100 	.word	0x0800b100
 8002468:	20000000 	.word	0x20000000
 800246c:	20000004 	.word	0x20000004

08002470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <HAL_RCC_GetHCLKFreq+0x14>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000000 	.word	0x20000000

08002488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800248c:	f7ff fff0 	bl	8002470 <HAL_RCC_GetHCLKFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	0a9b      	lsrs	r3, r3, #10
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	4903      	ldr	r1, [pc, #12]	; (80024ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40023800 	.word	0x40023800
 80024ac:	0800b110 	.word	0x0800b110

080024b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024b4:	f7ff ffdc 	bl	8002470 <HAL_RCC_GetHCLKFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	0b5b      	lsrs	r3, r3, #13
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	4903      	ldr	r1, [pc, #12]	; (80024d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40023800 	.word	0x40023800
 80024d4:	0800b110 	.word	0x0800b110

080024d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	220f      	movs	r2, #15
 80024e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_RCC_GetClockConfig+0x5c>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0203 	and.w	r2, r3, #3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <HAL_RCC_GetClockConfig+0x5c>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_RCC_GetClockConfig+0x5c>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_RCC_GetClockConfig+0x5c>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	08db      	lsrs	r3, r3, #3
 8002512:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <HAL_RCC_GetClockConfig+0x60>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 020f 	and.w	r2, r3, #15
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	601a      	str	r2, [r3, #0]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40023c00 	.word	0x40023c00

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002540:	b088      	sub	sp, #32
 8002542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002558:	4bce      	ldr	r3, [pc, #824]	; (8002894 <HAL_RCC_GetSysClockFreq+0x358>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b0c      	cmp	r3, #12
 8002562:	f200 818d 	bhi.w	8002880 <HAL_RCC_GetSysClockFreq+0x344>
 8002566:	a201      	add	r2, pc, #4	; (adr r2, 800256c <HAL_RCC_GetSysClockFreq+0x30>)
 8002568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256c:	080025a1 	.word	0x080025a1
 8002570:	08002881 	.word	0x08002881
 8002574:	08002881 	.word	0x08002881
 8002578:	08002881 	.word	0x08002881
 800257c:	080025a7 	.word	0x080025a7
 8002580:	08002881 	.word	0x08002881
 8002584:	08002881 	.word	0x08002881
 8002588:	08002881 	.word	0x08002881
 800258c:	080025ad 	.word	0x080025ad
 8002590:	08002881 	.word	0x08002881
 8002594:	08002881 	.word	0x08002881
 8002598:	08002881 	.word	0x08002881
 800259c:	08002721 	.word	0x08002721
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a0:	4bbd      	ldr	r3, [pc, #756]	; (8002898 <HAL_RCC_GetSysClockFreq+0x35c>)
 80025a2:	61bb      	str	r3, [r7, #24]
       break;
 80025a4:	e16f      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025a6:	4bbd      	ldr	r3, [pc, #756]	; (800289c <HAL_RCC_GetSysClockFreq+0x360>)
 80025a8:	61bb      	str	r3, [r7, #24]
      break;
 80025aa:	e16c      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ac:	4bb9      	ldr	r3, [pc, #740]	; (8002894 <HAL_RCC_GetSysClockFreq+0x358>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025b4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025b6:	4bb7      	ldr	r3, [pc, #732]	; (8002894 <HAL_RCC_GetSysClockFreq+0x358>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d053      	beq.n	800266a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c2:	4bb4      	ldr	r3, [pc, #720]	; (8002894 <HAL_RCC_GetSysClockFreq+0x358>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	099b      	lsrs	r3, r3, #6
 80025c8:	461a      	mov	r2, r3
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	ea02 0400 	and.w	r4, r2, r0
 80025da:	603c      	str	r4, [r7, #0]
 80025dc:	400b      	ands	r3, r1
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025e4:	4620      	mov	r0, r4
 80025e6:	4629      	mov	r1, r5
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	014b      	lsls	r3, r1, #5
 80025f2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025f6:	0142      	lsls	r2, r0, #5
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	4623      	mov	r3, r4
 80025fe:	1ac0      	subs	r0, r0, r3
 8002600:	462b      	mov	r3, r5
 8002602:	eb61 0103 	sbc.w	r1, r1, r3
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	018b      	lsls	r3, r1, #6
 8002610:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002614:	0182      	lsls	r2, r0, #6
 8002616:	1a12      	subs	r2, r2, r0
 8002618:	eb63 0301 	sbc.w	r3, r3, r1
 800261c:	f04f 0000 	mov.w	r0, #0
 8002620:	f04f 0100 	mov.w	r1, #0
 8002624:	00d9      	lsls	r1, r3, #3
 8002626:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800262a:	00d0      	lsls	r0, r2, #3
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4621      	mov	r1, r4
 8002632:	1852      	adds	r2, r2, r1
 8002634:	4629      	mov	r1, r5
 8002636:	eb43 0101 	adc.w	r1, r3, r1
 800263a:	460b      	mov	r3, r1
 800263c:	f04f 0000 	mov.w	r0, #0
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	0259      	lsls	r1, r3, #9
 8002646:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800264a:	0250      	lsls	r0, r2, #9
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	461a      	mov	r2, r3
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	f7fe fb34 	bl	8000cc8 <__aeabi_uldivmod>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4613      	mov	r3, r2
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	e04c      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266a:	4b8a      	ldr	r3, [pc, #552]	; (8002894 <HAL_RCC_GetSysClockFreq+0x358>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	099b      	lsrs	r3, r3, #6
 8002670:	461a      	mov	r2, r3
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	f240 10ff 	movw	r0, #511	; 0x1ff
 800267a:	f04f 0100 	mov.w	r1, #0
 800267e:	ea02 0a00 	and.w	sl, r2, r0
 8002682:	ea03 0b01 	and.w	fp, r3, r1
 8002686:	4650      	mov	r0, sl
 8002688:	4659      	mov	r1, fp
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	014b      	lsls	r3, r1, #5
 8002694:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002698:	0142      	lsls	r2, r0, #5
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	ebb0 000a 	subs.w	r0, r0, sl
 80026a2:	eb61 010b 	sbc.w	r1, r1, fp
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	018b      	lsls	r3, r1, #6
 80026b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026b4:	0182      	lsls	r2, r0, #6
 80026b6:	1a12      	subs	r2, r2, r0
 80026b8:	eb63 0301 	sbc.w	r3, r3, r1
 80026bc:	f04f 0000 	mov.w	r0, #0
 80026c0:	f04f 0100 	mov.w	r1, #0
 80026c4:	00d9      	lsls	r1, r3, #3
 80026c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026ca:	00d0      	lsls	r0, r2, #3
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	eb12 020a 	adds.w	r2, r2, sl
 80026d4:	eb43 030b 	adc.w	r3, r3, fp
 80026d8:	f04f 0000 	mov.w	r0, #0
 80026dc:	f04f 0100 	mov.w	r1, #0
 80026e0:	0299      	lsls	r1, r3, #10
 80026e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026e6:	0290      	lsls	r0, r2, #10
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4610      	mov	r0, r2
 80026ee:	4619      	mov	r1, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	461a      	mov	r2, r3
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	f7fe fae6 	bl	8000cc8 <__aeabi_uldivmod>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4613      	mov	r3, r2
 8002702:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002704:	4b63      	ldr	r3, [pc, #396]	; (8002894 <HAL_RCC_GetSysClockFreq+0x358>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	3301      	adds	r3, #1
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	fbb2 f3f3 	udiv	r3, r2, r3
 800271c:	61bb      	str	r3, [r7, #24]
      break;
 800271e:	e0b2      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002720:	4b5c      	ldr	r3, [pc, #368]	; (8002894 <HAL_RCC_GetSysClockFreq+0x358>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002728:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800272a:	4b5a      	ldr	r3, [pc, #360]	; (8002894 <HAL_RCC_GetSysClockFreq+0x358>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d04d      	beq.n	80027d2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002736:	4b57      	ldr	r3, [pc, #348]	; (8002894 <HAL_RCC_GetSysClockFreq+0x358>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	099b      	lsrs	r3, r3, #6
 800273c:	461a      	mov	r2, r3
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002746:	f04f 0100 	mov.w	r1, #0
 800274a:	ea02 0800 	and.w	r8, r2, r0
 800274e:	ea03 0901 	and.w	r9, r3, r1
 8002752:	4640      	mov	r0, r8
 8002754:	4649      	mov	r1, r9
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	014b      	lsls	r3, r1, #5
 8002760:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002764:	0142      	lsls	r2, r0, #5
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	ebb0 0008 	subs.w	r0, r0, r8
 800276e:	eb61 0109 	sbc.w	r1, r1, r9
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	018b      	lsls	r3, r1, #6
 800277c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002780:	0182      	lsls	r2, r0, #6
 8002782:	1a12      	subs	r2, r2, r0
 8002784:	eb63 0301 	sbc.w	r3, r3, r1
 8002788:	f04f 0000 	mov.w	r0, #0
 800278c:	f04f 0100 	mov.w	r1, #0
 8002790:	00d9      	lsls	r1, r3, #3
 8002792:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002796:	00d0      	lsls	r0, r2, #3
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	eb12 0208 	adds.w	r2, r2, r8
 80027a0:	eb43 0309 	adc.w	r3, r3, r9
 80027a4:	f04f 0000 	mov.w	r0, #0
 80027a8:	f04f 0100 	mov.w	r1, #0
 80027ac:	0259      	lsls	r1, r3, #9
 80027ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80027b2:	0250      	lsls	r0, r2, #9
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	461a      	mov	r2, r3
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	f7fe fa80 	bl	8000cc8 <__aeabi_uldivmod>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4613      	mov	r3, r2
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	e04a      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d2:	4b30      	ldr	r3, [pc, #192]	; (8002894 <HAL_RCC_GetSysClockFreq+0x358>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	099b      	lsrs	r3, r3, #6
 80027d8:	461a      	mov	r2, r3
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	ea02 0400 	and.w	r4, r2, r0
 80027ea:	ea03 0501 	and.w	r5, r3, r1
 80027ee:	4620      	mov	r0, r4
 80027f0:	4629      	mov	r1, r5
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	014b      	lsls	r3, r1, #5
 80027fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002800:	0142      	lsls	r2, r0, #5
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	1b00      	subs	r0, r0, r4
 8002808:	eb61 0105 	sbc.w	r1, r1, r5
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	018b      	lsls	r3, r1, #6
 8002816:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800281a:	0182      	lsls	r2, r0, #6
 800281c:	1a12      	subs	r2, r2, r0
 800281e:	eb63 0301 	sbc.w	r3, r3, r1
 8002822:	f04f 0000 	mov.w	r0, #0
 8002826:	f04f 0100 	mov.w	r1, #0
 800282a:	00d9      	lsls	r1, r3, #3
 800282c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002830:	00d0      	lsls	r0, r2, #3
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	1912      	adds	r2, r2, r4
 8002838:	eb45 0303 	adc.w	r3, r5, r3
 800283c:	f04f 0000 	mov.w	r0, #0
 8002840:	f04f 0100 	mov.w	r1, #0
 8002844:	0299      	lsls	r1, r3, #10
 8002846:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800284a:	0290      	lsls	r0, r2, #10
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	461a      	mov	r2, r3
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	f7fe fa34 	bl	8000cc8 <__aeabi_uldivmod>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4613      	mov	r3, r2
 8002866:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_RCC_GetSysClockFreq+0x358>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	0f1b      	lsrs	r3, r3, #28
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	61bb      	str	r3, [r7, #24]
      break;
 800287e:	e002      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002882:	61bb      	str	r3, [r7, #24]
      break;
 8002884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002886:	69bb      	ldr	r3, [r7, #24]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3720      	adds	r7, #32
 800288c:	46bd      	mov	sp, r7
 800288e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	00f42400 	.word	0x00f42400
 800289c:	007a1200 	.word	0x007a1200

080028a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e28d      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8083 	beq.w	80029c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028c0:	4b94      	ldr	r3, [pc, #592]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d019      	beq.n	8002900 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028cc:	4b91      	ldr	r3, [pc, #580]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d106      	bne.n	80028e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028d8:	4b8e      	ldr	r3, [pc, #568]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e4:	d00c      	beq.n	8002900 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e6:	4b8b      	ldr	r3, [pc, #556]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d112      	bne.n	8002918 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f2:	4b88      	ldr	r3, [pc, #544]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028fe:	d10b      	bne.n	8002918 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	4b84      	ldr	r3, [pc, #528]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d05b      	beq.n	80029c4 <HAL_RCC_OscConfig+0x124>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d157      	bne.n	80029c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e25a      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002920:	d106      	bne.n	8002930 <HAL_RCC_OscConfig+0x90>
 8002922:	4b7c      	ldr	r3, [pc, #496]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a7b      	ldr	r2, [pc, #492]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e01d      	b.n	800296c <HAL_RCC_OscConfig+0xcc>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0xb4>
 800293a:	4b76      	ldr	r3, [pc, #472]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a75      	ldr	r2, [pc, #468]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b73      	ldr	r3, [pc, #460]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a72      	ldr	r2, [pc, #456]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0xcc>
 8002954:	4b6f      	ldr	r3, [pc, #444]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a6e      	ldr	r2, [pc, #440]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 800295a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b6c      	ldr	r3, [pc, #432]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a6b      	ldr	r2, [pc, #428]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d013      	beq.n	800299c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7ff f8ac 	bl	8001ad0 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800297c:	f7ff f8a8 	bl	8001ad0 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e21f      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b61      	ldr	r3, [pc, #388]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0xdc>
 800299a:	e014      	b.n	80029c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7ff f898 	bl	8001ad0 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a4:	f7ff f894 	bl	8001ad0 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e20b      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b6:	4b57      	ldr	r3, [pc, #348]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x104>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d06f      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029d2:	4b50      	ldr	r3, [pc, #320]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d017      	beq.n	8002a0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029de:	4b4d      	ldr	r3, [pc, #308]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d105      	bne.n	80029f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029ea:	4b4a      	ldr	r3, [pc, #296]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f6:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029fe:	2b0c      	cmp	r3, #12
 8002a00:	d11c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a02:	4b44      	ldr	r3, [pc, #272]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d116      	bne.n	8002a3c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_RCC_OscConfig+0x186>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d001      	beq.n	8002a26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e1d3      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a26:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4937      	ldr	r1, [pc, #220]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	e03a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a44:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <HAL_RCC_OscConfig+0x278>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7ff f841 	bl	8001ad0 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a52:	f7ff f83d 	bl	8001ad0 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1b4      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a70:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4925      	ldr	r1, [pc, #148]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a86:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <HAL_RCC_OscConfig+0x278>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7ff f820 	bl	8001ad0 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a94:	f7ff f81c 	bl	8001ad0 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e193      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d036      	beq.n	8002b2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d016      	beq.n	8002af4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <HAL_RCC_OscConfig+0x27c>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7ff f800 	bl	8001ad0 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7fe fffc 	bl	8001ad0 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e173      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x234>
 8002af2:	e01b      	b.n	8002b2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_RCC_OscConfig+0x27c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afa:	f7fe ffe9 	bl	8001ad0 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b00:	e00e      	b.n	8002b20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b02:	f7fe ffe5 	bl	8001ad0 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d907      	bls.n	8002b20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e15c      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
 8002b14:	40023800 	.word	0x40023800
 8002b18:	42470000 	.word	0x42470000
 8002b1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b20:	4b8a      	ldr	r3, [pc, #552]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1ea      	bne.n	8002b02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8097 	beq.w	8002c68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3e:	4b83      	ldr	r3, [pc, #524]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10f      	bne.n	8002b6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	4b7f      	ldr	r3, [pc, #508]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a7e      	ldr	r2, [pc, #504]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5a:	4b7c      	ldr	r3, [pc, #496]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b66:	2301      	movs	r3, #1
 8002b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	4b79      	ldr	r3, [pc, #484]	; (8002d50 <HAL_RCC_OscConfig+0x4b0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d118      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b76:	4b76      	ldr	r3, [pc, #472]	; (8002d50 <HAL_RCC_OscConfig+0x4b0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a75      	ldr	r2, [pc, #468]	; (8002d50 <HAL_RCC_OscConfig+0x4b0>)
 8002b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b82:	f7fe ffa5 	bl	8001ad0 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8a:	f7fe ffa1 	bl	8001ad0 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e118      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	4b6c      	ldr	r3, [pc, #432]	; (8002d50 <HAL_RCC_OscConfig+0x4b0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x31e>
 8002bb0:	4b66      	ldr	r3, [pc, #408]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	4a65      	ldr	r2, [pc, #404]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6713      	str	r3, [r2, #112]	; 0x70
 8002bbc:	e01c      	b.n	8002bf8 <HAL_RCC_OscConfig+0x358>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b05      	cmp	r3, #5
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x340>
 8002bc6:	4b61      	ldr	r3, [pc, #388]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a60      	ldr	r2, [pc, #384]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd2:	4b5e      	ldr	r3, [pc, #376]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a5d      	ldr	r2, [pc, #372]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bde:	e00b      	b.n	8002bf8 <HAL_RCC_OscConfig+0x358>
 8002be0:	4b5a      	ldr	r3, [pc, #360]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	4a59      	ldr	r2, [pc, #356]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	6713      	str	r3, [r2, #112]	; 0x70
 8002bec:	4b57      	ldr	r3, [pc, #348]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4a56      	ldr	r2, [pc, #344]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bf2:	f023 0304 	bic.w	r3, r3, #4
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d015      	beq.n	8002c2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7fe ff66 	bl	8001ad0 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7fe ff62 	bl	8001ad0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0d7      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1e:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0ee      	beq.n	8002c08 <HAL_RCC_OscConfig+0x368>
 8002c2a:	e014      	b.n	8002c56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7fe ff50 	bl	8001ad0 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c34:	f7fe ff4c 	bl	8001ad0 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e0c1      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c4a:	4b40      	ldr	r3, [pc, #256]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1ee      	bne.n	8002c34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d105      	bne.n	8002c68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5c:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	4a3a      	ldr	r2, [pc, #232]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80ad 	beq.w	8002dcc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c72:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d060      	beq.n	8002d40 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d145      	bne.n	8002d12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c86:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <HAL_RCC_OscConfig+0x4b4>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe ff20 	bl	8001ad0 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fe ff1c 	bl	8001ad0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e093      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca6:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69da      	ldr	r2, [r3, #28]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	019b      	lsls	r3, r3, #6
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	041b      	lsls	r3, r3, #16
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	061b      	lsls	r3, r3, #24
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	071b      	lsls	r3, r3, #28
 8002cde:	491b      	ldr	r1, [pc, #108]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_OscConfig+0x4b4>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cea:	f7fe fef1 	bl	8001ad0 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7fe feed 	bl	8001ad0 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e064      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x452>
 8002d10:	e05c      	b.n	8002dcc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_RCC_OscConfig+0x4b4>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe feda 	bl	8001ad0 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe fed6 	bl	8001ad0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e04d      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x480>
 8002d3e:	e045      	b.n	8002dcc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e040      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40007000 	.word	0x40007000
 8002d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d58:	4b1f      	ldr	r3, [pc, #124]	; (8002dd8 <HAL_RCC_OscConfig+0x538>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d030      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d129      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d122      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d88:	4013      	ands	r3, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d119      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	3b01      	subs	r3, #1
 8002da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d10f      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800

08002ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e041      	b.n	8002e72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f839 	bl	8002e7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3304      	adds	r3, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f000 f9d8 	bl	80031d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d001      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e04e      	b.n	8002f46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a23      	ldr	r2, [pc, #140]	; (8002f54 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d022      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed2:	d01d      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1f      	ldr	r2, [pc, #124]	; (8002f58 <HAL_TIM_Base_Start_IT+0xc8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d018      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d013      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <HAL_TIM_Base_Start_IT+0xd0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00e      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d009      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d004      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x80>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <HAL_TIM_Base_Start_IT+0xdc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d111      	bne.n	8002f34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b06      	cmp	r3, #6
 8002f20:	d010      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f32:	e007      	b.n	8002f44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800
 8002f60:	40000c00 	.word	0x40000c00
 8002f64:	40010400 	.word	0x40010400
 8002f68:	40014000 	.word	0x40014000
 8002f6c:	40001800 	.word	0x40001800

08002f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0202 	mvn.w	r2, #2
 8002f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f8ee 	bl	8003194 <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f8e0 	bl	8003180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f8f1 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0204 	mvn.w	r2, #4
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f8c4 	bl	8003194 <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8b6 	bl	8003180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f8c7 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b08      	cmp	r3, #8
 800302c:	d122      	bne.n	8003074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b08      	cmp	r3, #8
 800303a:	d11b      	bne.n	8003074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0208 	mvn.w	r2, #8
 8003044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2204      	movs	r2, #4
 800304a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f89a 	bl	8003194 <HAL_TIM_IC_CaptureCallback>
 8003060:	e005      	b.n	800306e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f88c 	bl	8003180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f89d 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b10      	cmp	r3, #16
 8003080:	d122      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b10      	cmp	r3, #16
 800308e:	d11b      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0210 	mvn.w	r2, #16
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2208      	movs	r2, #8
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f870 	bl	8003194 <HAL_TIM_IC_CaptureCallback>
 80030b4:	e005      	b.n	80030c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f862 	bl	8003180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f873 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d10e      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d107      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0201 	mvn.w	r2, #1
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe fa34 	bl	800155c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	2b80      	cmp	r3, #128	; 0x80
 8003100:	d10e      	bne.n	8003120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310c:	2b80      	cmp	r3, #128	; 0x80
 800310e:	d107      	bne.n	8003120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f902 	bl	8003324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d10e      	bne.n	800314c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d107      	bne.n	800314c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f838 	bl	80031bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b20      	cmp	r3, #32
 8003158:	d10e      	bne.n	8003178 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b20      	cmp	r3, #32
 8003166:	d107      	bne.n	8003178 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0220 	mvn.w	r2, #32
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f8cc 	bl	8003310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a40      	ldr	r2, [pc, #256]	; (80032e4 <TIM_Base_SetConfig+0x114>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d013      	beq.n	8003210 <TIM_Base_SetConfig+0x40>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ee:	d00f      	beq.n	8003210 <TIM_Base_SetConfig+0x40>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a3d      	ldr	r2, [pc, #244]	; (80032e8 <TIM_Base_SetConfig+0x118>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00b      	beq.n	8003210 <TIM_Base_SetConfig+0x40>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a3c      	ldr	r2, [pc, #240]	; (80032ec <TIM_Base_SetConfig+0x11c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d007      	beq.n	8003210 <TIM_Base_SetConfig+0x40>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a3b      	ldr	r2, [pc, #236]	; (80032f0 <TIM_Base_SetConfig+0x120>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_Base_SetConfig+0x40>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a3a      	ldr	r2, [pc, #232]	; (80032f4 <TIM_Base_SetConfig+0x124>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d108      	bne.n	8003222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a2f      	ldr	r2, [pc, #188]	; (80032e4 <TIM_Base_SetConfig+0x114>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d02b      	beq.n	8003282 <TIM_Base_SetConfig+0xb2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003230:	d027      	beq.n	8003282 <TIM_Base_SetConfig+0xb2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a2c      	ldr	r2, [pc, #176]	; (80032e8 <TIM_Base_SetConfig+0x118>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d023      	beq.n	8003282 <TIM_Base_SetConfig+0xb2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a2b      	ldr	r2, [pc, #172]	; (80032ec <TIM_Base_SetConfig+0x11c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d01f      	beq.n	8003282 <TIM_Base_SetConfig+0xb2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a2a      	ldr	r2, [pc, #168]	; (80032f0 <TIM_Base_SetConfig+0x120>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d01b      	beq.n	8003282 <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a29      	ldr	r2, [pc, #164]	; (80032f4 <TIM_Base_SetConfig+0x124>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d017      	beq.n	8003282 <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a28      	ldr	r2, [pc, #160]	; (80032f8 <TIM_Base_SetConfig+0x128>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d013      	beq.n	8003282 <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a27      	ldr	r2, [pc, #156]	; (80032fc <TIM_Base_SetConfig+0x12c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00f      	beq.n	8003282 <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a26      	ldr	r2, [pc, #152]	; (8003300 <TIM_Base_SetConfig+0x130>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00b      	beq.n	8003282 <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a25      	ldr	r2, [pc, #148]	; (8003304 <TIM_Base_SetConfig+0x134>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d007      	beq.n	8003282 <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a24      	ldr	r2, [pc, #144]	; (8003308 <TIM_Base_SetConfig+0x138>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d003      	beq.n	8003282 <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a23      	ldr	r2, [pc, #140]	; (800330c <TIM_Base_SetConfig+0x13c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d108      	bne.n	8003294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <TIM_Base_SetConfig+0x114>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_Base_SetConfig+0xf8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <TIM_Base_SetConfig+0x124>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d103      	bne.n	80032d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	615a      	str	r2, [r3, #20]
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800
 80032f0:	40000c00 	.word	0x40000c00
 80032f4:	40010400 	.word	0x40010400
 80032f8:	40014000 	.word	0x40014000
 80032fc:	40014400 	.word	0x40014400
 8003300:	40014800 	.word	0x40014800
 8003304:	40001800 	.word	0x40001800
 8003308:	40001c00 	.word	0x40001c00
 800330c:	40002000 	.word	0x40002000

08003310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e03f      	b.n	80033ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fe f988 	bl	8001674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2224      	movs	r2, #36	; 0x24
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800337a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f9cb 	bl	8003718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b08a      	sub	sp, #40	; 0x28
 80033d6:	af02      	add	r7, sp, #8
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d17c      	bne.n	80034ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_UART_Transmit+0x2c>
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e075      	b.n	80034ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_UART_Transmit+0x3e>
 800340c:	2302      	movs	r3, #2
 800340e:	e06e      	b.n	80034ee <HAL_UART_Transmit+0x11c>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2221      	movs	r2, #33	; 0x21
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003426:	f7fe fb53 	bl	8001ad0 <HAL_GetTick>
 800342a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	88fa      	ldrh	r2, [r7, #6]
 8003430:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	88fa      	ldrh	r2, [r7, #6]
 8003436:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003440:	d108      	bne.n	8003454 <HAL_UART_Transmit+0x82>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d104      	bne.n	8003454 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	e003      	b.n	800345c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003464:	e02a      	b.n	80034bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2200      	movs	r2, #0
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f8e2 	bl	800363a <UART_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e036      	b.n	80034ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3302      	adds	r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	e007      	b.n	80034ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	3301      	adds	r3, #1
 80034ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1cf      	bne.n	8003466 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2200      	movs	r2, #0
 80034ce:	2140      	movs	r1, #64	; 0x40
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f8b2 	bl	800363a <UART_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e006      	b.n	80034ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b08a      	sub	sp, #40	; 0x28
 80034fa:	af02      	add	r7, sp, #8
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b20      	cmp	r3, #32
 8003514:	f040 808c 	bne.w	8003630 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_UART_Receive+0x2e>
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e084      	b.n	8003632 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_UART_Receive+0x40>
 8003532:	2302      	movs	r3, #2
 8003534:	e07d      	b.n	8003632 <HAL_UART_Receive+0x13c>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2222      	movs	r2, #34	; 0x22
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003552:	f7fe fabd 	bl	8001ad0 <HAL_GetTick>
 8003556:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	88fa      	ldrh	r2, [r7, #6]
 8003562:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356c:	d108      	bne.n	8003580 <HAL_UART_Receive+0x8a>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d104      	bne.n	8003580 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	e003      	b.n	8003588 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003590:	e043      	b.n	800361a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2200      	movs	r2, #0
 800359a:	2120      	movs	r1, #32
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f84c 	bl	800363a <UART_WaitOnFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e042      	b.n	8003632 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10c      	bne.n	80035cc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035be:	b29a      	uxth	r2, r3
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	3302      	adds	r3, #2
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	e01f      	b.n	800360c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d4:	d007      	beq.n	80035e6 <HAL_UART_Receive+0xf0>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10a      	bne.n	80035f4 <HAL_UART_Receive+0xfe>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	e008      	b.n	8003606 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003600:	b2da      	uxtb	r2, r3
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3301      	adds	r3, #1
 800360a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1b6      	bne.n	8003592 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	e000      	b.n	8003632 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003630:	2302      	movs	r3, #2
  }
}
 8003632:	4618      	mov	r0, r3
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b090      	sub	sp, #64	; 0x40
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	4613      	mov	r3, r2
 8003648:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364a:	e050      	b.n	80036ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003652:	d04c      	beq.n	80036ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <UART_WaitOnFlagUntilTimeout+0x30>
 800365a:	f7fe fa39 	bl	8001ad0 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003666:	429a      	cmp	r2, r3
 8003668:	d241      	bcs.n	80036ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	330c      	adds	r3, #12
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800368a:	637a      	str	r2, [r7, #52]	; 0x34
 800368c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e5      	bne.n	800366a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3314      	adds	r3, #20
 80036a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	613b      	str	r3, [r7, #16]
   return(result);
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3314      	adds	r3, #20
 80036bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036be:	623a      	str	r2, [r7, #32]
 80036c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	69f9      	ldr	r1, [r7, #28]
 80036c4:	6a3a      	ldr	r2, [r7, #32]
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e5      	bne.n	800369e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e00f      	b.n	800370e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4013      	ands	r3, r2
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	bf0c      	ite	eq
 80036fe:	2301      	moveq	r3, #1
 8003700:	2300      	movne	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	429a      	cmp	r2, r3
 800370a:	d09f      	beq.n	800364c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3740      	adds	r7, #64	; 0x40
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371c:	b09f      	sub	sp, #124	; 0x7c
 800371e:	af00      	add	r7, sp, #0
 8003720:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800372c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372e:	68d9      	ldr	r1, [r3, #12]
 8003730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	ea40 0301 	orr.w	r3, r0, r1
 8003738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800373a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	431a      	orrs	r2, r3
 8003744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	431a      	orrs	r2, r3
 800374a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	4313      	orrs	r3, r2
 8003750:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800375c:	f021 010c 	bic.w	r1, r1, #12
 8003760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003766:	430b      	orrs	r3, r1
 8003768:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800376a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003776:	6999      	ldr	r1, [r3, #24]
 8003778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	ea40 0301 	orr.w	r3, r0, r1
 8003780:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	4bc5      	ldr	r3, [pc, #788]	; (8003a9c <UART_SetConfig+0x384>)
 8003788:	429a      	cmp	r2, r3
 800378a:	d004      	beq.n	8003796 <UART_SetConfig+0x7e>
 800378c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4bc3      	ldr	r3, [pc, #780]	; (8003aa0 <UART_SetConfig+0x388>)
 8003792:	429a      	cmp	r2, r3
 8003794:	d103      	bne.n	800379e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003796:	f7fe fe8b 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 800379a:	6778      	str	r0, [r7, #116]	; 0x74
 800379c:	e002      	b.n	80037a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800379e:	f7fe fe73 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 80037a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ac:	f040 80b6 	bne.w	800391c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b2:	461c      	mov	r4, r3
 80037b4:	f04f 0500 	mov.w	r5, #0
 80037b8:	4622      	mov	r2, r4
 80037ba:	462b      	mov	r3, r5
 80037bc:	1891      	adds	r1, r2, r2
 80037be:	6439      	str	r1, [r7, #64]	; 0x40
 80037c0:	415b      	adcs	r3, r3
 80037c2:	647b      	str	r3, [r7, #68]	; 0x44
 80037c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037c8:	1912      	adds	r2, r2, r4
 80037ca:	eb45 0303 	adc.w	r3, r5, r3
 80037ce:	f04f 0000 	mov.w	r0, #0
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	00d9      	lsls	r1, r3, #3
 80037d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037dc:	00d0      	lsls	r0, r2, #3
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	1911      	adds	r1, r2, r4
 80037e4:	6639      	str	r1, [r7, #96]	; 0x60
 80037e6:	416b      	adcs	r3, r5
 80037e8:	667b      	str	r3, [r7, #100]	; 0x64
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	1891      	adds	r1, r2, r2
 80037f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80037f8:	415b      	adcs	r3, r3
 80037fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003800:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003804:	f7fd fa60 	bl	8000cc8 <__aeabi_uldivmod>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4ba5      	ldr	r3, [pc, #660]	; (8003aa4 <UART_SetConfig+0x38c>)
 800380e:	fba3 2302 	umull	r2, r3, r3, r2
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	011e      	lsls	r6, r3, #4
 8003816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003818:	461c      	mov	r4, r3
 800381a:	f04f 0500 	mov.w	r5, #0
 800381e:	4622      	mov	r2, r4
 8003820:	462b      	mov	r3, r5
 8003822:	1891      	adds	r1, r2, r2
 8003824:	6339      	str	r1, [r7, #48]	; 0x30
 8003826:	415b      	adcs	r3, r3
 8003828:	637b      	str	r3, [r7, #52]	; 0x34
 800382a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800382e:	1912      	adds	r2, r2, r4
 8003830:	eb45 0303 	adc.w	r3, r5, r3
 8003834:	f04f 0000 	mov.w	r0, #0
 8003838:	f04f 0100 	mov.w	r1, #0
 800383c:	00d9      	lsls	r1, r3, #3
 800383e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003842:	00d0      	lsls	r0, r2, #3
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	1911      	adds	r1, r2, r4
 800384a:	65b9      	str	r1, [r7, #88]	; 0x58
 800384c:	416b      	adcs	r3, r5
 800384e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	461a      	mov	r2, r3
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	1891      	adds	r1, r2, r2
 800385c:	62b9      	str	r1, [r7, #40]	; 0x28
 800385e:	415b      	adcs	r3, r3
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003866:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800386a:	f7fd fa2d 	bl	8000cc8 <__aeabi_uldivmod>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4b8c      	ldr	r3, [pc, #560]	; (8003aa4 <UART_SetConfig+0x38c>)
 8003874:	fba3 1302 	umull	r1, r3, r3, r2
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	2164      	movs	r1, #100	; 0x64
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	3332      	adds	r3, #50	; 0x32
 8003886:	4a87      	ldr	r2, [pc, #540]	; (8003aa4 <UART_SetConfig+0x38c>)
 8003888:	fba2 2303 	umull	r2, r3, r2, r3
 800388c:	095b      	lsrs	r3, r3, #5
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003894:	441e      	add	r6, r3
 8003896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003898:	4618      	mov	r0, r3
 800389a:	f04f 0100 	mov.w	r1, #0
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	1894      	adds	r4, r2, r2
 80038a4:	623c      	str	r4, [r7, #32]
 80038a6:	415b      	adcs	r3, r3
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
 80038aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038ae:	1812      	adds	r2, r2, r0
 80038b0:	eb41 0303 	adc.w	r3, r1, r3
 80038b4:	f04f 0400 	mov.w	r4, #0
 80038b8:	f04f 0500 	mov.w	r5, #0
 80038bc:	00dd      	lsls	r5, r3, #3
 80038be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038c2:	00d4      	lsls	r4, r2, #3
 80038c4:	4622      	mov	r2, r4
 80038c6:	462b      	mov	r3, r5
 80038c8:	1814      	adds	r4, r2, r0
 80038ca:	653c      	str	r4, [r7, #80]	; 0x50
 80038cc:	414b      	adcs	r3, r1
 80038ce:	657b      	str	r3, [r7, #84]	; 0x54
 80038d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	461a      	mov	r2, r3
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	1891      	adds	r1, r2, r2
 80038dc:	61b9      	str	r1, [r7, #24]
 80038de:	415b      	adcs	r3, r3
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80038ea:	f7fd f9ed 	bl	8000cc8 <__aeabi_uldivmod>
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	4b6c      	ldr	r3, [pc, #432]	; (8003aa4 <UART_SetConfig+0x38c>)
 80038f4:	fba3 1302 	umull	r1, r3, r3, r2
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	2164      	movs	r1, #100	; 0x64
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	3332      	adds	r3, #50	; 0x32
 8003906:	4a67      	ldr	r2, [pc, #412]	; (8003aa4 <UART_SetConfig+0x38c>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	f003 0207 	and.w	r2, r3, #7
 8003912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4432      	add	r2, r6
 8003918:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800391a:	e0b9      	b.n	8003a90 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800391c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800391e:	461c      	mov	r4, r3
 8003920:	f04f 0500 	mov.w	r5, #0
 8003924:	4622      	mov	r2, r4
 8003926:	462b      	mov	r3, r5
 8003928:	1891      	adds	r1, r2, r2
 800392a:	6139      	str	r1, [r7, #16]
 800392c:	415b      	adcs	r3, r3
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003934:	1912      	adds	r2, r2, r4
 8003936:	eb45 0303 	adc.w	r3, r5, r3
 800393a:	f04f 0000 	mov.w	r0, #0
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	00d9      	lsls	r1, r3, #3
 8003944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003948:	00d0      	lsls	r0, r2, #3
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	eb12 0804 	adds.w	r8, r2, r4
 8003952:	eb43 0905 	adc.w	r9, r3, r5
 8003956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4618      	mov	r0, r3
 800395c:	f04f 0100 	mov.w	r1, #0
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	008b      	lsls	r3, r1, #2
 800396a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800396e:	0082      	lsls	r2, r0, #2
 8003970:	4640      	mov	r0, r8
 8003972:	4649      	mov	r1, r9
 8003974:	f7fd f9a8 	bl	8000cc8 <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <UART_SetConfig+0x38c>)
 800397e:	fba3 2302 	umull	r2, r3, r3, r2
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	011e      	lsls	r6, r3, #4
 8003986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003988:	4618      	mov	r0, r3
 800398a:	f04f 0100 	mov.w	r1, #0
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	1894      	adds	r4, r2, r2
 8003994:	60bc      	str	r4, [r7, #8]
 8003996:	415b      	adcs	r3, r3
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800399e:	1812      	adds	r2, r2, r0
 80039a0:	eb41 0303 	adc.w	r3, r1, r3
 80039a4:	f04f 0400 	mov.w	r4, #0
 80039a8:	f04f 0500 	mov.w	r5, #0
 80039ac:	00dd      	lsls	r5, r3, #3
 80039ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039b2:	00d4      	lsls	r4, r2, #3
 80039b4:	4622      	mov	r2, r4
 80039b6:	462b      	mov	r3, r5
 80039b8:	1814      	adds	r4, r2, r0
 80039ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80039bc:	414b      	adcs	r3, r1
 80039be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f04f 0100 	mov.w	r1, #0
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	008b      	lsls	r3, r1, #2
 80039d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039d8:	0082      	lsls	r2, r0, #2
 80039da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80039de:	f7fd f973 	bl	8000cc8 <__aeabi_uldivmod>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <UART_SetConfig+0x38c>)
 80039e8:	fba3 1302 	umull	r1, r3, r3, r2
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	2164      	movs	r1, #100	; 0x64
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	3332      	adds	r3, #50	; 0x32
 80039fa:	4a2a      	ldr	r2, [pc, #168]	; (8003aa4 <UART_SetConfig+0x38c>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a06:	441e      	add	r6, r3
 8003a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f04f 0100 	mov.w	r1, #0
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	1894      	adds	r4, r2, r2
 8003a16:	603c      	str	r4, [r7, #0]
 8003a18:	415b      	adcs	r3, r3
 8003a1a:	607b      	str	r3, [r7, #4]
 8003a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a20:	1812      	adds	r2, r2, r0
 8003a22:	eb41 0303 	adc.w	r3, r1, r3
 8003a26:	f04f 0400 	mov.w	r4, #0
 8003a2a:	f04f 0500 	mov.w	r5, #0
 8003a2e:	00dd      	lsls	r5, r3, #3
 8003a30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a34:	00d4      	lsls	r4, r2, #3
 8003a36:	4622      	mov	r2, r4
 8003a38:	462b      	mov	r3, r5
 8003a3a:	eb12 0a00 	adds.w	sl, r2, r0
 8003a3e:	eb43 0b01 	adc.w	fp, r3, r1
 8003a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f04f 0100 	mov.w	r1, #0
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	008b      	lsls	r3, r1, #2
 8003a56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a5a:	0082      	lsls	r2, r0, #2
 8003a5c:	4650      	mov	r0, sl
 8003a5e:	4659      	mov	r1, fp
 8003a60:	f7fd f932 	bl	8000cc8 <__aeabi_uldivmod>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <UART_SetConfig+0x38c>)
 8003a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	2164      	movs	r1, #100	; 0x64
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	3332      	adds	r3, #50	; 0x32
 8003a7c:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <UART_SetConfig+0x38c>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	f003 020f 	and.w	r2, r3, #15
 8003a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4432      	add	r2, r6
 8003a8e:	609a      	str	r2, [r3, #8]
}
 8003a90:	bf00      	nop
 8003a92:	377c      	adds	r7, #124	; 0x7c
 8003a94:	46bd      	mov	sp, r7
 8003a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40011000 	.word	0x40011000
 8003aa0:	40011400 	.word	0x40011400
 8003aa4:	51eb851f 	.word	0x51eb851f

08003aa8 <__NVIC_SetPriority>:
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	6039      	str	r1, [r7, #0]
 8003ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	db0a      	blt.n	8003ad2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	490c      	ldr	r1, [pc, #48]	; (8003af4 <__NVIC_SetPriority+0x4c>)
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	0112      	lsls	r2, r2, #4
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	440b      	add	r3, r1
 8003acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ad0:	e00a      	b.n	8003ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	4908      	ldr	r1, [pc, #32]	; (8003af8 <__NVIC_SetPriority+0x50>)
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	3b04      	subs	r3, #4
 8003ae0:	0112      	lsls	r2, r2, #4
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	761a      	strb	r2, [r3, #24]
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	e000e100 	.word	0xe000e100
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <SysTick_Handler+0x1c>)
 8003b02:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003b04:	f001 fd28 	bl	8005558 <xTaskGetSchedulerState>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d001      	beq.n	8003b12 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003b0e:	f002 fb13 	bl	8006138 <xPortSysTickHandler>
  }
}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	e000e010 	.word	0xe000e010

08003b1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b20:	2100      	movs	r1, #0
 8003b22:	f06f 0004 	mvn.w	r0, #4
 8003b26:	f7ff ffbf 	bl	8003aa8 <__NVIC_SetPriority>
#endif
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b36:	f3ef 8305 	mrs	r3, IPSR
 8003b3a:	603b      	str	r3, [r7, #0]
  return(result);
 8003b3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b42:	f06f 0305 	mvn.w	r3, #5
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	e00c      	b.n	8003b64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <osKernelInitialize+0x44>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d105      	bne.n	8003b5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b52:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <osKernelInitialize+0x44>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	607b      	str	r3, [r7, #4]
 8003b5c:	e002      	b.n	8003b64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b64:	687b      	ldr	r3, [r7, #4]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000244 	.word	0x20000244

08003b78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b7e:	f3ef 8305 	mrs	r3, IPSR
 8003b82:	603b      	str	r3, [r7, #0]
  return(result);
 8003b84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003b8a:	f06f 0305 	mvn.w	r3, #5
 8003b8e:	607b      	str	r3, [r7, #4]
 8003b90:	e010      	b.n	8003bb4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <osKernelStart+0x48>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d109      	bne.n	8003bae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b9a:	f7ff ffbf 	bl	8003b1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <osKernelStart+0x48>)
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ba4:	f001 f87c 	bl	8004ca0 <vTaskStartScheduler>
      stat = osOK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	e002      	b.n	8003bb4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003bb4:	687b      	ldr	r3, [r7, #4]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000244 	.word	0x20000244

08003bc4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08e      	sub	sp, #56	; 0x38
 8003bc8:	af04      	add	r7, sp, #16
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bd4:	f3ef 8305 	mrs	r3, IPSR
 8003bd8:	617b      	str	r3, [r7, #20]
  return(result);
 8003bda:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d17e      	bne.n	8003cde <osThreadNew+0x11a>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d07b      	beq.n	8003cde <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003bea:	2318      	movs	r3, #24
 8003bec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d045      	beq.n	8003c8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <osThreadNew+0x48>
        name = attr->name;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <osThreadNew+0x6e>
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	2b38      	cmp	r3, #56	; 0x38
 8003c24:	d805      	bhi.n	8003c32 <osThreadNew+0x6e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <osThreadNew+0x72>
        return (NULL);
 8003c32:	2300      	movs	r3, #0
 8003c34:	e054      	b.n	8003ce0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	089b      	lsrs	r3, r3, #2
 8003c44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00e      	beq.n	8003c6c <osThreadNew+0xa8>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	2bbb      	cmp	r3, #187	; 0xbb
 8003c54:	d90a      	bls.n	8003c6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <osThreadNew+0xa8>
        mem = 1;
 8003c66:	2301      	movs	r3, #1
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	e010      	b.n	8003c8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10c      	bne.n	8003c8e <osThreadNew+0xca>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d108      	bne.n	8003c8e <osThreadNew+0xca>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <osThreadNew+0xca>
          mem = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	e001      	b.n	8003c8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d110      	bne.n	8003cb6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c9c:	9202      	str	r2, [sp, #8]
 8003c9e:	9301      	str	r3, [sp, #4]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	6a3a      	ldr	r2, [r7, #32]
 8003ca8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fe0c 	bl	80048c8 <xTaskCreateStatic>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	e013      	b.n	8003cde <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d110      	bne.n	8003cde <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	f107 0310 	add.w	r3, r7, #16
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fe57 	bl	8004982 <xTaskCreate>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d001      	beq.n	8003cde <osThreadNew+0x11a>
            hTask = NULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003cde:	693b      	ldr	r3, [r7, #16]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3728      	adds	r7, #40	; 0x28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cf0:	f3ef 8305 	mrs	r3, IPSR
 8003cf4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <osDelay+0x1c>
    stat = osErrorISR;
 8003cfc:	f06f 0305 	mvn.w	r3, #5
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	e007      	b.n	8003d14 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 ff92 	bl	8004c38 <vTaskDelay>
    }
  }

  return (stat);
 8003d14:	68fb      	ldr	r3, [r7, #12]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <vApplicationGetIdleTaskMemory+0x2c>)
 8003d30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4a06      	ldr	r2, [pc, #24]	; (8003d50 <vApplicationGetIdleTaskMemory+0x30>)
 8003d36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2280      	movs	r2, #128	; 0x80
 8003d3c:	601a      	str	r2, [r3, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	20000248 	.word	0x20000248
 8003d50:	20000304 	.word	0x20000304

08003d54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a07      	ldr	r2, [pc, #28]	; (8003d80 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4a06      	ldr	r2, [pc, #24]	; (8003d84 <vApplicationGetTimerTaskMemory+0x30>)
 8003d6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d72:	601a      	str	r2, [r3, #0]
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	20000504 	.word	0x20000504
 8003d84:	200005c0 	.word	0x200005c0

08003d88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f103 0208 	add.w	r2, r3, #8
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003da0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f103 0208 	add.w	r2, r3, #8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f103 0208 	add.w	r2, r3, #8
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003de2:	b480      	push	{r7}
 8003de4:	b085      	sub	sp, #20
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	601a      	str	r2, [r3, #0]
}
 8003e1e:	bf00      	nop
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d103      	bne.n	8003e4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	e00c      	b.n	8003e64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	e002      	b.n	8003e58 <vListInsert+0x2e>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d2f6      	bcs.n	8003e52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	601a      	str	r2, [r3, #0]
}
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6892      	ldr	r2, [r2, #8]
 8003eb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6852      	ldr	r2, [r2, #4]
 8003ebc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d103      	bne.n	8003ed0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	1e5a      	subs	r2, r3, #1
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f16:	bf00      	nop
 8003f18:	e7fe      	b.n	8003f18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f1a:	f002 f87b 	bl	8006014 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f26:	68f9      	ldr	r1, [r7, #12]
 8003f28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f2a:	fb01 f303 	mul.w	r3, r1, r3
 8003f2e:	441a      	add	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	68f9      	ldr	r1, [r7, #12]
 8003f4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	441a      	add	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	22ff      	movs	r2, #255	; 0xff
 8003f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	22ff      	movs	r2, #255	; 0xff
 8003f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d114      	bne.n	8003f9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01a      	beq.n	8003fae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3310      	adds	r3, #16
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 f929 	bl	80051d4 <xTaskRemoveFromEventList>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d012      	beq.n	8003fae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <xQueueGenericReset+0xcc>)
 8003f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	e009      	b.n	8003fae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3310      	adds	r3, #16
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fef2 	bl	8003d88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3324      	adds	r3, #36	; 0x24
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff feed 	bl	8003d88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fae:	f002 f861 	bl	8006074 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fb2:	2301      	movs	r3, #1
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	e000ed04 	.word	0xe000ed04

08003fc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08e      	sub	sp, #56	; 0x38
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10a      	bne.n	8003fea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fe6:	bf00      	nop
 8003fe8:	e7fe      	b.n	8003fe8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <xQueueGenericCreateStatic+0x52>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <xQueueGenericCreateStatic+0x56>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <xQueueGenericCreateStatic+0x58>
 8004016:	2300      	movs	r3, #0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	623b      	str	r3, [r7, #32]
}
 800402e:	bf00      	nop
 8004030:	e7fe      	b.n	8004030 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <xQueueGenericCreateStatic+0x7e>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <xQueueGenericCreateStatic+0x82>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <xQueueGenericCreateStatic+0x84>
 8004042:	2300      	movs	r3, #0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	61fb      	str	r3, [r7, #28]
}
 800405a:	bf00      	nop
 800405c:	e7fe      	b.n	800405c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800405e:	2350      	movs	r3, #80	; 0x50
 8004060:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b50      	cmp	r3, #80	; 0x50
 8004066:	d00a      	beq.n	800407e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	61bb      	str	r3, [r7, #24]
}
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800407e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004092:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	4613      	mov	r3, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f805 	bl	80040b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3730      	adds	r7, #48	; 0x30
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d103      	bne.n	80040cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e002      	b.n	80040d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040de:	2101      	movs	r1, #1
 80040e0:	69b8      	ldr	r0, [r7, #24]
 80040e2:	f7ff ff05 	bl	8003ef0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	78fa      	ldrb	r2, [r7, #3]
 80040ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80040ee:	bf00      	nop
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08e      	sub	sp, #56	; 0x38
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004106:	2300      	movs	r3, #0
 8004108:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <xQueueGenericSend+0x32>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d103      	bne.n	8004138 <xQueueGenericSend+0x40>
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <xQueueGenericSend+0x44>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <xQueueGenericSend+0x46>
 800413c:	2300      	movs	r3, #0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10a      	bne.n	8004158 <xQueueGenericSend+0x60>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004154:	bf00      	nop
 8004156:	e7fe      	b.n	8004156 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d103      	bne.n	8004166 <xQueueGenericSend+0x6e>
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <xQueueGenericSend+0x72>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <xQueueGenericSend+0x74>
 800416a:	2300      	movs	r3, #0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <xQueueGenericSend+0x8e>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	623b      	str	r3, [r7, #32]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004186:	f001 f9e7 	bl	8005558 <xTaskGetSchedulerState>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <xQueueGenericSend+0x9e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <xQueueGenericSend+0xa2>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <xQueueGenericSend+0xa4>
 800419a:	2300      	movs	r3, #0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	61fb      	str	r3, [r7, #28]
}
 80041b2:	bf00      	nop
 80041b4:	e7fe      	b.n	80041b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041b6:	f001 ff2d 	bl	8006014 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d302      	bcc.n	80041cc <xQueueGenericSend+0xd4>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d129      	bne.n	8004220 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041d2:	f000 fa0b 	bl	80045ec <prvCopyDataToQueue>
 80041d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d010      	beq.n	8004202 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	3324      	adds	r3, #36	; 0x24
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fff5 	bl	80051d4 <xTaskRemoveFromEventList>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d013      	beq.n	8004218 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80041f0:	4b3f      	ldr	r3, [pc, #252]	; (80042f0 <xQueueGenericSend+0x1f8>)
 80041f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	e00a      	b.n	8004218 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004208:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <xQueueGenericSend+0x1f8>)
 800420a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004218:	f001 ff2c 	bl	8006074 <vPortExitCritical>
				return pdPASS;
 800421c:	2301      	movs	r3, #1
 800421e:	e063      	b.n	80042e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004226:	f001 ff25 	bl	8006074 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800422a:	2300      	movs	r3, #0
 800422c:	e05c      	b.n	80042e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800422e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004230:	2b00      	cmp	r3, #0
 8004232:	d106      	bne.n	8004242 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004234:	f107 0314 	add.w	r3, r7, #20
 8004238:	4618      	mov	r0, r3
 800423a:	f001 f82f 	bl	800529c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800423e:	2301      	movs	r3, #1
 8004240:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004242:	f001 ff17 	bl	8006074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004246:	f000 fd9b 	bl	8004d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800424a:	f001 fee3 	bl	8006014 <vPortEnterCritical>
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004254:	b25b      	sxtb	r3, r3
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d103      	bne.n	8004264 <xQueueGenericSend+0x16c>
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800426a:	b25b      	sxtb	r3, r3
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d103      	bne.n	800427a <xQueueGenericSend+0x182>
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800427a:	f001 fefb 	bl	8006074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800427e:	1d3a      	adds	r2, r7, #4
 8004280:	f107 0314 	add.w	r3, r7, #20
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f001 f81e 	bl	80052c8 <xTaskCheckForTimeOut>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d124      	bne.n	80042dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004294:	f000 faa2 	bl	80047dc <prvIsQueueFull>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d018      	beq.n	80042d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	3310      	adds	r3, #16
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4611      	mov	r1, r2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 ff44 	bl	8005134 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ae:	f000 fa2d 	bl	800470c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042b2:	f000 fd73 	bl	8004d9c <xTaskResumeAll>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f47f af7c 	bne.w	80041b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <xQueueGenericSend+0x1f8>)
 80042c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	e772      	b.n	80041b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042d2:	f000 fa1b 	bl	800470c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042d6:	f000 fd61 	bl	8004d9c <xTaskResumeAll>
 80042da:	e76c      	b.n	80041b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042de:	f000 fa15 	bl	800470c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042e2:	f000 fd5b 	bl	8004d9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3738      	adds	r7, #56	; 0x38
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	e000ed04 	.word	0xe000ed04

080042f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b090      	sub	sp, #64	; 0x40
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800431e:	bf00      	nop
 8004320:	e7fe      	b.n	8004320 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d103      	bne.n	8004330 <xQueueGenericSendFromISR+0x3c>
 8004328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <xQueueGenericSendFromISR+0x40>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <xQueueGenericSendFromISR+0x42>
 8004334:	2300      	movs	r3, #0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800434c:	bf00      	nop
 800434e:	e7fe      	b.n	800434e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d103      	bne.n	800435e <xQueueGenericSendFromISR+0x6a>
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <xQueueGenericSendFromISR+0x6e>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <xQueueGenericSendFromISR+0x70>
 8004362:	2300      	movs	r3, #0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	623b      	str	r3, [r7, #32]
}
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800437e:	f001 ff2b 	bl	80061d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004382:	f3ef 8211 	mrs	r2, BASEPRI
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	61fa      	str	r2, [r7, #28]
 8004398:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800439a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800439c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <xQueueGenericSendFromISR+0xbc>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d12f      	bne.n	8004410 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043c6:	f000 f911 	bl	80045ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80043ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d2:	d112      	bne.n	80043fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d016      	beq.n	800440a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043de:	3324      	adds	r3, #36	; 0x24
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fef7 	bl	80051d4 <xTaskRemoveFromEventList>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00e      	beq.n	800440a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00b      	beq.n	800440a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	e007      	b.n	800440a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043fe:	3301      	adds	r3, #1
 8004400:	b2db      	uxtb	r3, r3
 8004402:	b25a      	sxtb	r2, r3
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800440a:	2301      	movs	r3, #1
 800440c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800440e:	e001      	b.n	8004414 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004410:	2300      	movs	r3, #0
 8004412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004416:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800441e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004422:	4618      	mov	r0, r3
 8004424:	3740      	adds	r7, #64	; 0x40
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08c      	sub	sp, #48	; 0x30
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004438:	2300      	movs	r3, #0
 800443a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <xQueueReceive+0x30>
	__asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	623b      	str	r3, [r7, #32]
}
 8004458:	bf00      	nop
 800445a:	e7fe      	b.n	800445a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d103      	bne.n	800446a <xQueueReceive+0x3e>
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <xQueueReceive+0x42>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <xQueueReceive+0x44>
 800446e:	2300      	movs	r3, #0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <xQueueReceive+0x5e>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	61fb      	str	r3, [r7, #28]
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800448a:	f001 f865 	bl	8005558 <xTaskGetSchedulerState>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d102      	bne.n	800449a <xQueueReceive+0x6e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <xQueueReceive+0x72>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <xQueueReceive+0x74>
 800449e:	2300      	movs	r3, #0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <xQueueReceive+0x8e>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	61bb      	str	r3, [r7, #24]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044ba:	f001 fdab 	bl	8006014 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d01f      	beq.n	800450a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ce:	f000 f8f7 	bl	80046c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	1e5a      	subs	r2, r3, #1
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00f      	beq.n	8004502 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	3310      	adds	r3, #16
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fe74 	bl	80051d4 <xTaskRemoveFromEventList>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d007      	beq.n	8004502 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80044f2:	4b3d      	ldr	r3, [pc, #244]	; (80045e8 <xQueueReceive+0x1bc>)
 80044f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004502:	f001 fdb7 	bl	8006074 <vPortExitCritical>
				return pdPASS;
 8004506:	2301      	movs	r3, #1
 8004508:	e069      	b.n	80045de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d103      	bne.n	8004518 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004510:	f001 fdb0 	bl	8006074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004514:	2300      	movs	r3, #0
 8004516:	e062      	b.n	80045de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800451e:	f107 0310 	add.w	r3, r7, #16
 8004522:	4618      	mov	r0, r3
 8004524:	f000 feba 	bl	800529c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004528:	2301      	movs	r3, #1
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800452c:	f001 fda2 	bl	8006074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004530:	f000 fc26 	bl	8004d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004534:	f001 fd6e 	bl	8006014 <vPortEnterCritical>
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800453e:	b25b      	sxtb	r3, r3
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d103      	bne.n	800454e <xQueueReceive+0x122>
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004550:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004554:	b25b      	sxtb	r3, r3
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d103      	bne.n	8004564 <xQueueReceive+0x138>
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004564:	f001 fd86 	bl	8006074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004568:	1d3a      	adds	r2, r7, #4
 800456a:	f107 0310 	add.w	r3, r7, #16
 800456e:	4611      	mov	r1, r2
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fea9 	bl	80052c8 <xTaskCheckForTimeOut>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d123      	bne.n	80045c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800457c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800457e:	f000 f917 	bl	80047b0 <prvIsQueueEmpty>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d017      	beq.n	80045b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458a:	3324      	adds	r3, #36	; 0x24
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fdcf 	bl	8005134 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004598:	f000 f8b8 	bl	800470c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800459c:	f000 fbfe 	bl	8004d9c <xTaskResumeAll>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d189      	bne.n	80044ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80045a6:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <xQueueReceive+0x1bc>)
 80045a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	e780      	b.n	80044ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ba:	f000 f8a7 	bl	800470c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045be:	f000 fbed 	bl	8004d9c <xTaskResumeAll>
 80045c2:	e77a      	b.n	80044ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045c6:	f000 f8a1 	bl	800470c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045ca:	f000 fbe7 	bl	8004d9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d0:	f000 f8ee 	bl	80047b0 <prvIsQueueEmpty>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f43f af6f 	beq.w	80044ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3730      	adds	r7, #48	; 0x30
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10d      	bne.n	8004626 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d14d      	bne.n	80046ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 ffbc 	bl	8005594 <xTaskPriorityDisinherit>
 800461c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	609a      	str	r2, [r3, #8]
 8004624:	e043      	b.n	80046ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d119      	bne.n	8004660 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6858      	ldr	r0, [r3, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	461a      	mov	r2, r3
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	f002 f91b 	bl	8006872 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	441a      	add	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	d32b      	bcc.n	80046ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	e026      	b.n	80046ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68d8      	ldr	r0, [r3, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	461a      	mov	r2, r3
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	f002 f901 	bl	8006872 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	425b      	negs	r3, r3
 800467a:	441a      	add	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d207      	bcs.n	800469c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	425b      	negs	r3, r3
 8004696:	441a      	add	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d105      	bne.n	80046ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046b6:	697b      	ldr	r3, [r7, #20]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d018      	beq.n	8004704 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	441a      	add	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d303      	bcc.n	80046f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68d9      	ldr	r1, [r3, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	461a      	mov	r2, r3
 80046fe:	6838      	ldr	r0, [r7, #0]
 8004700:	f002 f8b7 	bl	8006872 <memcpy>
	}
}
 8004704:	bf00      	nop
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004714:	f001 fc7e 	bl	8006014 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800471e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004720:	e011      	b.n	8004746 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	2b00      	cmp	r3, #0
 8004728:	d012      	beq.n	8004750 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3324      	adds	r3, #36	; 0x24
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fd50 	bl	80051d4 <xTaskRemoveFromEventList>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800473a:	f000 fe27 	bl	800538c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	3b01      	subs	r3, #1
 8004742:	b2db      	uxtb	r3, r3
 8004744:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800474a:	2b00      	cmp	r3, #0
 800474c:	dce9      	bgt.n	8004722 <prvUnlockQueue+0x16>
 800474e:	e000      	b.n	8004752 <prvUnlockQueue+0x46>
					break;
 8004750:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	22ff      	movs	r2, #255	; 0xff
 8004756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800475a:	f001 fc8b 	bl	8006074 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800475e:	f001 fc59 	bl	8006014 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004768:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800476a:	e011      	b.n	8004790 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d012      	beq.n	800479a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3310      	adds	r3, #16
 8004778:	4618      	mov	r0, r3
 800477a:	f000 fd2b 	bl	80051d4 <xTaskRemoveFromEventList>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004784:	f000 fe02 	bl	800538c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004788:	7bbb      	ldrb	r3, [r7, #14]
 800478a:	3b01      	subs	r3, #1
 800478c:	b2db      	uxtb	r3, r3
 800478e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004794:	2b00      	cmp	r3, #0
 8004796:	dce9      	bgt.n	800476c <prvUnlockQueue+0x60>
 8004798:	e000      	b.n	800479c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800479a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	22ff      	movs	r2, #255	; 0xff
 80047a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047a4:	f001 fc66 	bl	8006074 <vPortExitCritical>
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047b8:	f001 fc2c 	bl	8006014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d102      	bne.n	80047ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047c4:	2301      	movs	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	e001      	b.n	80047ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047ce:	f001 fc51 	bl	8006074 <vPortExitCritical>

	return xReturn;
 80047d2:	68fb      	ldr	r3, [r7, #12]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047e4:	f001 fc16 	bl	8006014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d102      	bne.n	80047fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047f4:	2301      	movs	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e001      	b.n	80047fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047fe:	f001 fc39 	bl	8006074 <vPortExitCritical>

	return xReturn;
 8004802:	68fb      	ldr	r3, [r7, #12]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	e014      	b.n	8004846 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800481c:	4a0f      	ldr	r2, [pc, #60]	; (800485c <vQueueAddToRegistry+0x50>)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10b      	bne.n	8004840 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004828:	490c      	ldr	r1, [pc, #48]	; (800485c <vQueueAddToRegistry+0x50>)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004832:	4a0a      	ldr	r2, [pc, #40]	; (800485c <vQueueAddToRegistry+0x50>)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	4413      	add	r3, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800483e:	e006      	b.n	800484e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3301      	adds	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b07      	cmp	r3, #7
 800484a:	d9e7      	bls.n	800481c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800484c:	bf00      	nop
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	20004f88 	.word	0x20004f88

08004860 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004870:	f001 fbd0 	bl	8006014 <vPortEnterCritical>
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800487a:	b25b      	sxtb	r3, r3
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004880:	d103      	bne.n	800488a <vQueueWaitForMessageRestricted+0x2a>
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004890:	b25b      	sxtb	r3, r3
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d103      	bne.n	80048a0 <vQueueWaitForMessageRestricted+0x40>
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048a0:	f001 fbe8 	bl	8006074 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	3324      	adds	r3, #36	; 0x24
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fc61 	bl	800517c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048ba:	6978      	ldr	r0, [r7, #20]
 80048bc:	f7ff ff26 	bl	800470c <prvUnlockQueue>
	}
 80048c0:	bf00      	nop
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08e      	sub	sp, #56	; 0x38
 80048cc:	af04      	add	r7, sp, #16
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	623b      	str	r3, [r7, #32]
}
 80048ee:	bf00      	nop
 80048f0:	e7fe      	b.n	80048f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <xTaskCreateStatic+0x46>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	61fb      	str	r3, [r7, #28]
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800490e:	23bc      	movs	r3, #188	; 0xbc
 8004910:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2bbc      	cmp	r3, #188	; 0xbc
 8004916:	d00a      	beq.n	800492e <xTaskCreateStatic+0x66>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	61bb      	str	r3, [r7, #24]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800492e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004932:	2b00      	cmp	r3, #0
 8004934:	d01e      	beq.n	8004974 <xTaskCreateStatic+0xac>
 8004936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01b      	beq.n	8004974 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800493c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004944:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	2202      	movs	r2, #2
 800494a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800494e:	2300      	movs	r3, #0
 8004950:	9303      	str	r3, [sp, #12]
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	9302      	str	r3, [sp, #8]
 8004956:	f107 0314 	add.w	r3, r7, #20
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f850 	bl	8004a0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800496c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800496e:	f000 f8f3 	bl	8004b58 <prvAddNewTaskToReadyList>
 8004972:	e001      	b.n	8004978 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004978:	697b      	ldr	r3, [r7, #20]
	}
 800497a:	4618      	mov	r0, r3
 800497c:	3728      	adds	r7, #40	; 0x28
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004982:	b580      	push	{r7, lr}
 8004984:	b08c      	sub	sp, #48	; 0x30
 8004986:	af04      	add	r7, sp, #16
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4618      	mov	r0, r3
 8004998:	f001 fc5e 	bl	8006258 <pvPortMalloc>
 800499c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00e      	beq.n	80049c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049a4:	20bc      	movs	r0, #188	; 0xbc
 80049a6:	f001 fc57 	bl	8006258 <pvPortMalloc>
 80049aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	631a      	str	r2, [r3, #48]	; 0x30
 80049b8:	e005      	b.n	80049c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049ba:	6978      	ldr	r0, [r7, #20]
 80049bc:	f001 fd18 	bl	80063f0 <vPortFree>
 80049c0:	e001      	b.n	80049c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d017      	beq.n	80049fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049d4:	88fa      	ldrh	r2, [r7, #6]
 80049d6:	2300      	movs	r3, #0
 80049d8:	9303      	str	r3, [sp, #12]
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	9302      	str	r3, [sp, #8]
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e0:	9301      	str	r3, [sp, #4]
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68b9      	ldr	r1, [r7, #8]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f80e 	bl	8004a0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049f0:	69f8      	ldr	r0, [r7, #28]
 80049f2:	f000 f8b1 	bl	8004b58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049f6:	2301      	movs	r3, #1
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e002      	b.n	8004a02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004a00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a02:	69bb      	ldr	r3, [r7, #24]
	}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	461a      	mov	r2, r3
 8004a24:	21a5      	movs	r1, #165	; 0xa5
 8004a26:	f001 ff32 	bl	800688e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a34:	3b01      	subs	r3, #1
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	f023 0307 	bic.w	r3, r3, #7
 8004a42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	617b      	str	r3, [r7, #20]
}
 8004a60:	bf00      	nop
 8004a62:	e7fe      	b.n	8004a62 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d01f      	beq.n	8004aaa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	e012      	b.n	8004a96 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	4413      	add	r3, r2
 8004a76:	7819      	ldrb	r1, [r3, #0]
 8004a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3334      	adds	r3, #52	; 0x34
 8004a80:	460a      	mov	r2, r1
 8004a82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d006      	beq.n	8004a9e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	3301      	adds	r3, #1
 8004a94:	61fb      	str	r3, [r7, #28]
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	2b0f      	cmp	r3, #15
 8004a9a:	d9e9      	bls.n	8004a70 <prvInitialiseNewTask+0x64>
 8004a9c:	e000      	b.n	8004aa0 <prvInitialiseNewTask+0x94>
			{
				break;
 8004a9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aa8:	e003      	b.n	8004ab2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	2b37      	cmp	r3, #55	; 0x37
 8004ab6:	d901      	bls.n	8004abc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ab8:	2337      	movs	r3, #55	; 0x37
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ac0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ac6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	2200      	movs	r2, #0
 8004acc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff f978 	bl	8003dc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	3318      	adds	r3, #24
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff f973 	bl	8003dc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	3354      	adds	r3, #84	; 0x54
 8004b0c:	2260      	movs	r2, #96	; 0x60
 8004b0e:	2100      	movs	r1, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 febc 	bl	800688e <memset>
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	4a0c      	ldr	r2, [pc, #48]	; (8004b4c <prvInitialiseNewTask+0x140>)
 8004b1a:	659a      	str	r2, [r3, #88]	; 0x58
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	4a0c      	ldr	r2, [pc, #48]	; (8004b50 <prvInitialiseNewTask+0x144>)
 8004b20:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	4a0b      	ldr	r2, [pc, #44]	; (8004b54 <prvInitialiseNewTask+0x148>)
 8004b26:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	69b8      	ldr	r0, [r7, #24]
 8004b2e:	f001 f941 	bl	8005db4 <pxPortInitialiseStack>
 8004b32:	4602      	mov	r2, r0
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b44:	bf00      	nop
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	0800b138 	.word	0x0800b138
 8004b50:	0800b158 	.word	0x0800b158
 8004b54:	0800b118 	.word	0x0800b118

08004b58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b60:	f001 fa58 	bl	8006014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b64:	4b2d      	ldr	r3, [pc, #180]	; (8004c1c <prvAddNewTaskToReadyList+0xc4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	4a2c      	ldr	r2, [pc, #176]	; (8004c1c <prvAddNewTaskToReadyList+0xc4>)
 8004b6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b6e:	4b2c      	ldr	r3, [pc, #176]	; (8004c20 <prvAddNewTaskToReadyList+0xc8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d109      	bne.n	8004b8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b76:	4a2a      	ldr	r2, [pc, #168]	; (8004c20 <prvAddNewTaskToReadyList+0xc8>)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b7c:	4b27      	ldr	r3, [pc, #156]	; (8004c1c <prvAddNewTaskToReadyList+0xc4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d110      	bne.n	8004ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b84:	f000 fc26 	bl	80053d4 <prvInitialiseTaskLists>
 8004b88:	e00d      	b.n	8004ba6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b8a:	4b26      	ldr	r3, [pc, #152]	; (8004c24 <prvAddNewTaskToReadyList+0xcc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b92:	4b23      	ldr	r3, [pc, #140]	; (8004c20 <prvAddNewTaskToReadyList+0xc8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d802      	bhi.n	8004ba6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ba0:	4a1f      	ldr	r2, [pc, #124]	; (8004c20 <prvAddNewTaskToReadyList+0xc8>)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ba6:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <prvAddNewTaskToReadyList+0xd0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3301      	adds	r3, #1
 8004bac:	4a1e      	ldr	r2, [pc, #120]	; (8004c28 <prvAddNewTaskToReadyList+0xd0>)
 8004bae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bb0:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <prvAddNewTaskToReadyList+0xd0>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbc:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <prvAddNewTaskToReadyList+0xd4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d903      	bls.n	8004bcc <prvAddNewTaskToReadyList+0x74>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	4a18      	ldr	r2, [pc, #96]	; (8004c2c <prvAddNewTaskToReadyList+0xd4>)
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <prvAddNewTaskToReadyList+0xd8>)
 8004bda:	441a      	add	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4619      	mov	r1, r3
 8004be2:	4610      	mov	r0, r2
 8004be4:	f7ff f8fd 	bl	8003de2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004be8:	f001 fa44 	bl	8006074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bec:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <prvAddNewTaskToReadyList+0xcc>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00e      	beq.n	8004c12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <prvAddNewTaskToReadyList+0xc8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d207      	bcs.n	8004c12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c02:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <prvAddNewTaskToReadyList+0xdc>)
 8004c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000e94 	.word	0x20000e94
 8004c20:	200009c0 	.word	0x200009c0
 8004c24:	20000ea0 	.word	0x20000ea0
 8004c28:	20000eb0 	.word	0x20000eb0
 8004c2c:	20000e9c 	.word	0x20000e9c
 8004c30:	200009c4 	.word	0x200009c4
 8004c34:	e000ed04 	.word	0xe000ed04

08004c38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d017      	beq.n	8004c7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c4a:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <vTaskDelay+0x60>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <vTaskDelay+0x30>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	60bb      	str	r3, [r7, #8]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c68:	f000 f88a 	bl	8004d80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fcfe 	bl	8005670 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c74:	f000 f892 	bl	8004d9c <xTaskResumeAll>
 8004c78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d107      	bne.n	8004c90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <vTaskDelay+0x64>)
 8004c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c90:	bf00      	nop
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20000ebc 	.word	0x20000ebc
 8004c9c:	e000ed04 	.word	0xe000ed04

08004ca0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	; 0x28
 8004ca4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cae:	463a      	mov	r2, r7
 8004cb0:	1d39      	adds	r1, r7, #4
 8004cb2:	f107 0308 	add.w	r3, r7, #8
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff f832 	bl	8003d20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004cbc:	6839      	ldr	r1, [r7, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	9202      	str	r2, [sp, #8]
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	460a      	mov	r2, r1
 8004cce:	4924      	ldr	r1, [pc, #144]	; (8004d60 <vTaskStartScheduler+0xc0>)
 8004cd0:	4824      	ldr	r0, [pc, #144]	; (8004d64 <vTaskStartScheduler+0xc4>)
 8004cd2:	f7ff fdf9 	bl	80048c8 <xTaskCreateStatic>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4a23      	ldr	r2, [pc, #140]	; (8004d68 <vTaskStartScheduler+0xc8>)
 8004cda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cdc:	4b22      	ldr	r3, [pc, #136]	; (8004d68 <vTaskStartScheduler+0xc8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	e001      	b.n	8004cee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d102      	bne.n	8004cfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004cf4:	f000 fd10 	bl	8005718 <xTimerCreateTimerTask>
 8004cf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d11b      	bne.n	8004d38 <vTaskStartScheduler+0x98>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	613b      	str	r3, [r7, #16]
}
 8004d12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d14:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <vTaskStartScheduler+0xcc>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3354      	adds	r3, #84	; 0x54
 8004d1a:	4a15      	ldr	r2, [pc, #84]	; (8004d70 <vTaskStartScheduler+0xd0>)
 8004d1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d1e:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <vTaskStartScheduler+0xd4>)
 8004d20:	f04f 32ff 	mov.w	r2, #4294967295
 8004d24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d26:	4b14      	ldr	r3, [pc, #80]	; (8004d78 <vTaskStartScheduler+0xd8>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d2c:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <vTaskStartScheduler+0xdc>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d32:	f001 f8cd 	bl	8005ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d36:	e00e      	b.n	8004d56 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3e:	d10a      	bne.n	8004d56 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	60fb      	str	r3, [r7, #12]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <vTaskStartScheduler+0xb4>
}
 8004d56:	bf00      	nop
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	0800b0a0 	.word	0x0800b0a0
 8004d64:	080053a5 	.word	0x080053a5
 8004d68:	20000eb8 	.word	0x20000eb8
 8004d6c:	200009c0 	.word	0x200009c0
 8004d70:	20000010 	.word	0x20000010
 8004d74:	20000eb4 	.word	0x20000eb4
 8004d78:	20000ea0 	.word	0x20000ea0
 8004d7c:	20000e98 	.word	0x20000e98

08004d80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d84:	4b04      	ldr	r3, [pc, #16]	; (8004d98 <vTaskSuspendAll+0x18>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	4a03      	ldr	r2, [pc, #12]	; (8004d98 <vTaskSuspendAll+0x18>)
 8004d8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d8e:	bf00      	nop
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	20000ebc 	.word	0x20000ebc

08004d9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004daa:	4b42      	ldr	r3, [pc, #264]	; (8004eb4 <xTaskResumeAll+0x118>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	603b      	str	r3, [r7, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	e7fe      	b.n	8004dc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004dc8:	f001 f924 	bl	8006014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004dcc:	4b39      	ldr	r3, [pc, #228]	; (8004eb4 <xTaskResumeAll+0x118>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	4a38      	ldr	r2, [pc, #224]	; (8004eb4 <xTaskResumeAll+0x118>)
 8004dd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dd6:	4b37      	ldr	r3, [pc, #220]	; (8004eb4 <xTaskResumeAll+0x118>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d162      	bne.n	8004ea4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dde:	4b36      	ldr	r3, [pc, #216]	; (8004eb8 <xTaskResumeAll+0x11c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d05e      	beq.n	8004ea4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004de6:	e02f      	b.n	8004e48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004de8:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <xTaskResumeAll+0x120>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3318      	adds	r3, #24
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff f851 	bl	8003e9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff f84c 	bl	8003e9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e08:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <xTaskResumeAll+0x124>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d903      	bls.n	8004e18 <xTaskResumeAll+0x7c>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	4a2a      	ldr	r2, [pc, #168]	; (8004ec0 <xTaskResumeAll+0x124>)
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4a27      	ldr	r2, [pc, #156]	; (8004ec4 <xTaskResumeAll+0x128>)
 8004e26:	441a      	add	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	f7fe ffd7 	bl	8003de2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e38:	4b23      	ldr	r3, [pc, #140]	; (8004ec8 <xTaskResumeAll+0x12c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d302      	bcc.n	8004e48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004e42:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <xTaskResumeAll+0x130>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e48:	4b1c      	ldr	r3, [pc, #112]	; (8004ebc <xTaskResumeAll+0x120>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1cb      	bne.n	8004de8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e56:	f000 fb5f 	bl	8005518 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <xTaskResumeAll+0x134>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d010      	beq.n	8004e88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e66:	f000 f847 	bl	8004ef8 <xTaskIncrementTick>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e70:	4b16      	ldr	r3, [pc, #88]	; (8004ecc <xTaskResumeAll+0x130>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f1      	bne.n	8004e66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <xTaskResumeAll+0x134>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e88:	4b10      	ldr	r3, [pc, #64]	; (8004ecc <xTaskResumeAll+0x130>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d009      	beq.n	8004ea4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e94:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <xTaskResumeAll+0x138>)
 8004e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ea4:	f001 f8e6 	bl	8006074 <vPortExitCritical>

	return xAlreadyYielded;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000ebc 	.word	0x20000ebc
 8004eb8:	20000e94 	.word	0x20000e94
 8004ebc:	20000e54 	.word	0x20000e54
 8004ec0:	20000e9c 	.word	0x20000e9c
 8004ec4:	200009c4 	.word	0x200009c4
 8004ec8:	200009c0 	.word	0x200009c0
 8004ecc:	20000ea8 	.word	0x20000ea8
 8004ed0:	20000ea4 	.word	0x20000ea4
 8004ed4:	e000ed04 	.word	0xe000ed04

08004ed8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004ede:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <xTaskGetTickCount+0x1c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ee4:	687b      	ldr	r3, [r7, #4]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20000e98 	.word	0x20000e98

08004ef8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f02:	4b4f      	ldr	r3, [pc, #316]	; (8005040 <xTaskIncrementTick+0x148>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f040 808f 	bne.w	800502a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f0c:	4b4d      	ldr	r3, [pc, #308]	; (8005044 <xTaskIncrementTick+0x14c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3301      	adds	r3, #1
 8004f12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f14:	4a4b      	ldr	r2, [pc, #300]	; (8005044 <xTaskIncrementTick+0x14c>)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d120      	bne.n	8004f62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f20:	4b49      	ldr	r3, [pc, #292]	; (8005048 <xTaskIncrementTick+0x150>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <xTaskIncrementTick+0x48>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	603b      	str	r3, [r7, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <xTaskIncrementTick+0x46>
 8004f40:	4b41      	ldr	r3, [pc, #260]	; (8005048 <xTaskIncrementTick+0x150>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	4b41      	ldr	r3, [pc, #260]	; (800504c <xTaskIncrementTick+0x154>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a3f      	ldr	r2, [pc, #252]	; (8005048 <xTaskIncrementTick+0x150>)
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	4a3f      	ldr	r2, [pc, #252]	; (800504c <xTaskIncrementTick+0x154>)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	4b3e      	ldr	r3, [pc, #248]	; (8005050 <xTaskIncrementTick+0x158>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	4a3d      	ldr	r2, [pc, #244]	; (8005050 <xTaskIncrementTick+0x158>)
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	f000 fadb 	bl	8005518 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f62:	4b3c      	ldr	r3, [pc, #240]	; (8005054 <xTaskIncrementTick+0x15c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d349      	bcc.n	8005000 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f6c:	4b36      	ldr	r3, [pc, #216]	; (8005048 <xTaskIncrementTick+0x150>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d104      	bne.n	8004f80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f76:	4b37      	ldr	r3, [pc, #220]	; (8005054 <xTaskIncrementTick+0x15c>)
 8004f78:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7c:	601a      	str	r2, [r3, #0]
					break;
 8004f7e:	e03f      	b.n	8005000 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f80:	4b31      	ldr	r3, [pc, #196]	; (8005048 <xTaskIncrementTick+0x150>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d203      	bcs.n	8004fa0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f98:	4a2e      	ldr	r2, [pc, #184]	; (8005054 <xTaskIncrementTick+0x15c>)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f9e:	e02f      	b.n	8005000 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fe ff79 	bl	8003e9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d004      	beq.n	8004fbc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	3318      	adds	r3, #24
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fe ff70 	bl	8003e9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc0:	4b25      	ldr	r3, [pc, #148]	; (8005058 <xTaskIncrementTick+0x160>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d903      	bls.n	8004fd0 <xTaskIncrementTick+0xd8>
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	4a22      	ldr	r2, [pc, #136]	; (8005058 <xTaskIncrementTick+0x160>)
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4a1f      	ldr	r2, [pc, #124]	; (800505c <xTaskIncrementTick+0x164>)
 8004fde:	441a      	add	r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f7fe fefb 	bl	8003de2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff0:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <xTaskIncrementTick+0x168>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d3b8      	bcc.n	8004f6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ffe:	e7b5      	b.n	8004f6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005000:	4b17      	ldr	r3, [pc, #92]	; (8005060 <xTaskIncrementTick+0x168>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005006:	4915      	ldr	r1, [pc, #84]	; (800505c <xTaskIncrementTick+0x164>)
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d901      	bls.n	800501c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005018:	2301      	movs	r3, #1
 800501a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800501c:	4b11      	ldr	r3, [pc, #68]	; (8005064 <xTaskIncrementTick+0x16c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d007      	beq.n	8005034 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005024:	2301      	movs	r3, #1
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	e004      	b.n	8005034 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800502a:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <xTaskIncrementTick+0x170>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3301      	adds	r3, #1
 8005030:	4a0d      	ldr	r2, [pc, #52]	; (8005068 <xTaskIncrementTick+0x170>)
 8005032:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005034:	697b      	ldr	r3, [r7, #20]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000ebc 	.word	0x20000ebc
 8005044:	20000e98 	.word	0x20000e98
 8005048:	20000e4c 	.word	0x20000e4c
 800504c:	20000e50 	.word	0x20000e50
 8005050:	20000eac 	.word	0x20000eac
 8005054:	20000eb4 	.word	0x20000eb4
 8005058:	20000e9c 	.word	0x20000e9c
 800505c:	200009c4 	.word	0x200009c4
 8005060:	200009c0 	.word	0x200009c0
 8005064:	20000ea8 	.word	0x20000ea8
 8005068:	20000ea4 	.word	0x20000ea4

0800506c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005072:	4b2a      	ldr	r3, [pc, #168]	; (800511c <vTaskSwitchContext+0xb0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800507a:	4b29      	ldr	r3, [pc, #164]	; (8005120 <vTaskSwitchContext+0xb4>)
 800507c:	2201      	movs	r2, #1
 800507e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005080:	e046      	b.n	8005110 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005082:	4b27      	ldr	r3, [pc, #156]	; (8005120 <vTaskSwitchContext+0xb4>)
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005088:	4b26      	ldr	r3, [pc, #152]	; (8005124 <vTaskSwitchContext+0xb8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	e010      	b.n	80050b2 <vTaskSwitchContext+0x46>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <vTaskSwitchContext+0x40>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	607b      	str	r3, [r7, #4]
}
 80050a8:	bf00      	nop
 80050aa:	e7fe      	b.n	80050aa <vTaskSwitchContext+0x3e>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	491d      	ldr	r1, [pc, #116]	; (8005128 <vTaskSwitchContext+0xbc>)
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0e4      	beq.n	8005090 <vTaskSwitchContext+0x24>
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4a15      	ldr	r2, [pc, #84]	; (8005128 <vTaskSwitchContext+0xbc>)
 80050d2:	4413      	add	r3, r2
 80050d4:	60bb      	str	r3, [r7, #8]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	605a      	str	r2, [r3, #4]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	3308      	adds	r3, #8
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d104      	bne.n	80050f6 <vTaskSwitchContext+0x8a>
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4a0b      	ldr	r2, [pc, #44]	; (800512c <vTaskSwitchContext+0xc0>)
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	4a08      	ldr	r2, [pc, #32]	; (8005124 <vTaskSwitchContext+0xb8>)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005106:	4b09      	ldr	r3, [pc, #36]	; (800512c <vTaskSwitchContext+0xc0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3354      	adds	r3, #84	; 0x54
 800510c:	4a08      	ldr	r2, [pc, #32]	; (8005130 <vTaskSwitchContext+0xc4>)
 800510e:	6013      	str	r3, [r2, #0]
}
 8005110:	bf00      	nop
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	20000ebc 	.word	0x20000ebc
 8005120:	20000ea8 	.word	0x20000ea8
 8005124:	20000e9c 	.word	0x20000e9c
 8005128:	200009c4 	.word	0x200009c4
 800512c:	200009c0 	.word	0x200009c0
 8005130:	20000010 	.word	0x20000010

08005134 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10a      	bne.n	800515a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	60fb      	str	r3, [r7, #12]
}
 8005156:	bf00      	nop
 8005158:	e7fe      	b.n	8005158 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800515a:	4b07      	ldr	r3, [pc, #28]	; (8005178 <vTaskPlaceOnEventList+0x44>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3318      	adds	r3, #24
 8005160:	4619      	mov	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7fe fe61 	bl	8003e2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005168:	2101      	movs	r1, #1
 800516a:	6838      	ldr	r0, [r7, #0]
 800516c:	f000 fa80 	bl	8005670 <prvAddCurrentTaskToDelayedList>
}
 8005170:	bf00      	nop
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	200009c0 	.word	0x200009c0

0800517c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10a      	bne.n	80051a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	617b      	str	r3, [r7, #20]
}
 80051a0:	bf00      	nop
 80051a2:	e7fe      	b.n	80051a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051a4:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3318      	adds	r3, #24
 80051aa:	4619      	mov	r1, r3
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7fe fe18 	bl	8003de2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80051b8:	f04f 33ff 	mov.w	r3, #4294967295
 80051bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	68b8      	ldr	r0, [r7, #8]
 80051c2:	f000 fa55 	bl	8005670 <prvAddCurrentTaskToDelayedList>
	}
 80051c6:	bf00      	nop
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	200009c0 	.word	0x200009c0

080051d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	60fb      	str	r3, [r7, #12]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	3318      	adds	r3, #24
 8005204:	4618      	mov	r0, r3
 8005206:	f7fe fe49 	bl	8003e9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800520a:	4b1e      	ldr	r3, [pc, #120]	; (8005284 <xTaskRemoveFromEventList+0xb0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d11d      	bne.n	800524e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	3304      	adds	r3, #4
 8005216:	4618      	mov	r0, r3
 8005218:	f7fe fe40 	bl	8003e9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005220:	4b19      	ldr	r3, [pc, #100]	; (8005288 <xTaskRemoveFromEventList+0xb4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d903      	bls.n	8005230 <xTaskRemoveFromEventList+0x5c>
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	4a16      	ldr	r2, [pc, #88]	; (8005288 <xTaskRemoveFromEventList+0xb4>)
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4a13      	ldr	r2, [pc, #76]	; (800528c <xTaskRemoveFromEventList+0xb8>)
 800523e:	441a      	add	r2, r3
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	3304      	adds	r3, #4
 8005244:	4619      	mov	r1, r3
 8005246:	4610      	mov	r0, r2
 8005248:	f7fe fdcb 	bl	8003de2 <vListInsertEnd>
 800524c:	e005      	b.n	800525a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	3318      	adds	r3, #24
 8005252:	4619      	mov	r1, r3
 8005254:	480e      	ldr	r0, [pc, #56]	; (8005290 <xTaskRemoveFromEventList+0xbc>)
 8005256:	f7fe fdc4 	bl	8003de2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525e:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <xTaskRemoveFromEventList+0xc0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	429a      	cmp	r2, r3
 8005266:	d905      	bls.n	8005274 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005268:	2301      	movs	r3, #1
 800526a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <xTaskRemoveFromEventList+0xc4>)
 800526e:	2201      	movs	r2, #1
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	e001      	b.n	8005278 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005274:	2300      	movs	r3, #0
 8005276:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005278:	697b      	ldr	r3, [r7, #20]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000ebc 	.word	0x20000ebc
 8005288:	20000e9c 	.word	0x20000e9c
 800528c:	200009c4 	.word	0x200009c4
 8005290:	20000e54 	.word	0x20000e54
 8005294:	200009c0 	.word	0x200009c0
 8005298:	20000ea8 	.word	0x20000ea8

0800529c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052a4:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <vTaskInternalSetTimeOutState+0x24>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052ac:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <vTaskInternalSetTimeOutState+0x28>)
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	605a      	str	r2, [r3, #4]
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	20000eac 	.word	0x20000eac
 80052c4:	20000e98 	.word	0x20000e98

080052c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	613b      	str	r3, [r7, #16]
}
 80052ea:	bf00      	nop
 80052ec:	e7fe      	b.n	80052ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	60fb      	str	r3, [r7, #12]
}
 8005306:	bf00      	nop
 8005308:	e7fe      	b.n	8005308 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800530a:	f000 fe83 	bl	8006014 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800530e:	4b1d      	ldr	r3, [pc, #116]	; (8005384 <xTaskCheckForTimeOut+0xbc>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005326:	d102      	bne.n	800532e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005328:	2300      	movs	r3, #0
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	e023      	b.n	8005376 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b15      	ldr	r3, [pc, #84]	; (8005388 <xTaskCheckForTimeOut+0xc0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d007      	beq.n	800534a <xTaskCheckForTimeOut+0x82>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	429a      	cmp	r2, r3
 8005342:	d302      	bcc.n	800534a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005344:	2301      	movs	r3, #1
 8005346:	61fb      	str	r3, [r7, #28]
 8005348:	e015      	b.n	8005376 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	429a      	cmp	r2, r3
 8005352:	d20b      	bcs.n	800536c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	1ad2      	subs	r2, r2, r3
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff ff9b 	bl	800529c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005366:	2300      	movs	r3, #0
 8005368:	61fb      	str	r3, [r7, #28]
 800536a:	e004      	b.n	8005376 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005372:	2301      	movs	r3, #1
 8005374:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005376:	f000 fe7d 	bl	8006074 <vPortExitCritical>

	return xReturn;
 800537a:	69fb      	ldr	r3, [r7, #28]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3720      	adds	r7, #32
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	20000e98 	.word	0x20000e98
 8005388:	20000eac 	.word	0x20000eac

0800538c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005390:	4b03      	ldr	r3, [pc, #12]	; (80053a0 <vTaskMissedYield+0x14>)
 8005392:	2201      	movs	r2, #1
 8005394:	601a      	str	r2, [r3, #0]
}
 8005396:	bf00      	nop
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	20000ea8 	.word	0x20000ea8

080053a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053ac:	f000 f852 	bl	8005454 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053b0:	4b06      	ldr	r3, [pc, #24]	; (80053cc <prvIdleTask+0x28>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d9f9      	bls.n	80053ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80053b8:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <prvIdleTask+0x2c>)
 80053ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053c8:	e7f0      	b.n	80053ac <prvIdleTask+0x8>
 80053ca:	bf00      	nop
 80053cc:	200009c4 	.word	0x200009c4
 80053d0:	e000ed04 	.word	0xe000ed04

080053d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053da:	2300      	movs	r3, #0
 80053dc:	607b      	str	r3, [r7, #4]
 80053de:	e00c      	b.n	80053fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4a12      	ldr	r2, [pc, #72]	; (8005434 <prvInitialiseTaskLists+0x60>)
 80053ec:	4413      	add	r3, r2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fe fcca 	bl	8003d88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3301      	adds	r3, #1
 80053f8:	607b      	str	r3, [r7, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b37      	cmp	r3, #55	; 0x37
 80053fe:	d9ef      	bls.n	80053e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005400:	480d      	ldr	r0, [pc, #52]	; (8005438 <prvInitialiseTaskLists+0x64>)
 8005402:	f7fe fcc1 	bl	8003d88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005406:	480d      	ldr	r0, [pc, #52]	; (800543c <prvInitialiseTaskLists+0x68>)
 8005408:	f7fe fcbe 	bl	8003d88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800540c:	480c      	ldr	r0, [pc, #48]	; (8005440 <prvInitialiseTaskLists+0x6c>)
 800540e:	f7fe fcbb 	bl	8003d88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005412:	480c      	ldr	r0, [pc, #48]	; (8005444 <prvInitialiseTaskLists+0x70>)
 8005414:	f7fe fcb8 	bl	8003d88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005418:	480b      	ldr	r0, [pc, #44]	; (8005448 <prvInitialiseTaskLists+0x74>)
 800541a:	f7fe fcb5 	bl	8003d88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <prvInitialiseTaskLists+0x78>)
 8005420:	4a05      	ldr	r2, [pc, #20]	; (8005438 <prvInitialiseTaskLists+0x64>)
 8005422:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005424:	4b0a      	ldr	r3, [pc, #40]	; (8005450 <prvInitialiseTaskLists+0x7c>)
 8005426:	4a05      	ldr	r2, [pc, #20]	; (800543c <prvInitialiseTaskLists+0x68>)
 8005428:	601a      	str	r2, [r3, #0]
}
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	200009c4 	.word	0x200009c4
 8005438:	20000e24 	.word	0x20000e24
 800543c:	20000e38 	.word	0x20000e38
 8005440:	20000e54 	.word	0x20000e54
 8005444:	20000e68 	.word	0x20000e68
 8005448:	20000e80 	.word	0x20000e80
 800544c:	20000e4c 	.word	0x20000e4c
 8005450:	20000e50 	.word	0x20000e50

08005454 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800545a:	e019      	b.n	8005490 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800545c:	f000 fdda 	bl	8006014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005460:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <prvCheckTasksWaitingTermination+0x50>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3304      	adds	r3, #4
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe fd15 	bl	8003e9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005472:	4b0d      	ldr	r3, [pc, #52]	; (80054a8 <prvCheckTasksWaitingTermination+0x54>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3b01      	subs	r3, #1
 8005478:	4a0b      	ldr	r2, [pc, #44]	; (80054a8 <prvCheckTasksWaitingTermination+0x54>)
 800547a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800547c:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <prvCheckTasksWaitingTermination+0x58>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3b01      	subs	r3, #1
 8005482:	4a0a      	ldr	r2, [pc, #40]	; (80054ac <prvCheckTasksWaitingTermination+0x58>)
 8005484:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005486:	f000 fdf5 	bl	8006074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f810 	bl	80054b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005490:	4b06      	ldr	r3, [pc, #24]	; (80054ac <prvCheckTasksWaitingTermination+0x58>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e1      	bne.n	800545c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005498:	bf00      	nop
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000e68 	.word	0x20000e68
 80054a8:	20000e94 	.word	0x20000e94
 80054ac:	20000e7c 	.word	0x20000e7c

080054b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3354      	adds	r3, #84	; 0x54
 80054bc:	4618      	mov	r0, r3
 80054be:	f002 f8d1 	bl	8007664 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d108      	bne.n	80054de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 ff8d 	bl	80063f0 <vPortFree>
				vPortFree( pxTCB );
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 ff8a 	bl	80063f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054dc:	e018      	b.n	8005510 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d103      	bne.n	80054f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 ff81 	bl	80063f0 <vPortFree>
	}
 80054ee:	e00f      	b.n	8005510 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d00a      	beq.n	8005510 <prvDeleteTCB+0x60>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	60fb      	str	r3, [r7, #12]
}
 800550c:	bf00      	nop
 800550e:	e7fe      	b.n	800550e <prvDeleteTCB+0x5e>
	}
 8005510:	bf00      	nop
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800551e:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <prvResetNextTaskUnblockTime+0x38>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005528:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <prvResetNextTaskUnblockTime+0x3c>)
 800552a:	f04f 32ff 	mov.w	r2, #4294967295
 800552e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005530:	e008      	b.n	8005544 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005532:	4b07      	ldr	r3, [pc, #28]	; (8005550 <prvResetNextTaskUnblockTime+0x38>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4a04      	ldr	r2, [pc, #16]	; (8005554 <prvResetNextTaskUnblockTime+0x3c>)
 8005542:	6013      	str	r3, [r2, #0]
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	20000e4c 	.word	0x20000e4c
 8005554:	20000eb4 	.word	0x20000eb4

08005558 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800555e:	4b0b      	ldr	r3, [pc, #44]	; (800558c <xTaskGetSchedulerState+0x34>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d102      	bne.n	800556c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005566:	2301      	movs	r3, #1
 8005568:	607b      	str	r3, [r7, #4]
 800556a:	e008      	b.n	800557e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800556c:	4b08      	ldr	r3, [pc, #32]	; (8005590 <xTaskGetSchedulerState+0x38>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005574:	2302      	movs	r3, #2
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	e001      	b.n	800557e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800557a:	2300      	movs	r3, #0
 800557c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800557e:	687b      	ldr	r3, [r7, #4]
	}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	20000ea0 	.word	0x20000ea0
 8005590:	20000ebc 	.word	0x20000ebc

08005594 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d056      	beq.n	8005658 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055aa:	4b2e      	ldr	r3, [pc, #184]	; (8005664 <xTaskPriorityDisinherit+0xd0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d00a      	beq.n	80055ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	60fb      	str	r3, [r7, #12]
}
 80055c6:	bf00      	nop
 80055c8:	e7fe      	b.n	80055c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	60bb      	str	r3, [r7, #8]
}
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ec:	1e5a      	subs	r2, r3, #1
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d02c      	beq.n	8005658 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005602:	2b00      	cmp	r3, #0
 8005604:	d128      	bne.n	8005658 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	3304      	adds	r3, #4
 800560a:	4618      	mov	r0, r3
 800560c:	f7fe fc46 	bl	8003e9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005628:	4b0f      	ldr	r3, [pc, #60]	; (8005668 <xTaskPriorityDisinherit+0xd4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d903      	bls.n	8005638 <xTaskPriorityDisinherit+0xa4>
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	4a0c      	ldr	r2, [pc, #48]	; (8005668 <xTaskPriorityDisinherit+0xd4>)
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4a09      	ldr	r2, [pc, #36]	; (800566c <xTaskPriorityDisinherit+0xd8>)
 8005646:	441a      	add	r2, r3
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	3304      	adds	r3, #4
 800564c:	4619      	mov	r1, r3
 800564e:	4610      	mov	r0, r2
 8005650:	f7fe fbc7 	bl	8003de2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005654:	2301      	movs	r3, #1
 8005656:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005658:	697b      	ldr	r3, [r7, #20]
	}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	200009c0 	.word	0x200009c0
 8005668:	20000e9c 	.word	0x20000e9c
 800566c:	200009c4 	.word	0x200009c4

08005670 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800567a:	4b21      	ldr	r3, [pc, #132]	; (8005700 <prvAddCurrentTaskToDelayedList+0x90>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005680:	4b20      	ldr	r3, [pc, #128]	; (8005704 <prvAddCurrentTaskToDelayedList+0x94>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3304      	adds	r3, #4
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe fc08 	bl	8003e9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005692:	d10a      	bne.n	80056aa <prvAddCurrentTaskToDelayedList+0x3a>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d007      	beq.n	80056aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800569a:	4b1a      	ldr	r3, [pc, #104]	; (8005704 <prvAddCurrentTaskToDelayedList+0x94>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3304      	adds	r3, #4
 80056a0:	4619      	mov	r1, r3
 80056a2:	4819      	ldr	r0, [pc, #100]	; (8005708 <prvAddCurrentTaskToDelayedList+0x98>)
 80056a4:	f7fe fb9d 	bl	8003de2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80056a8:	e026      	b.n	80056f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4413      	add	r3, r2
 80056b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056b2:	4b14      	ldr	r3, [pc, #80]	; (8005704 <prvAddCurrentTaskToDelayedList+0x94>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d209      	bcs.n	80056d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056c2:	4b12      	ldr	r3, [pc, #72]	; (800570c <prvAddCurrentTaskToDelayedList+0x9c>)
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	4b0f      	ldr	r3, [pc, #60]	; (8005704 <prvAddCurrentTaskToDelayedList+0x94>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3304      	adds	r3, #4
 80056cc:	4619      	mov	r1, r3
 80056ce:	4610      	mov	r0, r2
 80056d0:	f7fe fbab 	bl	8003e2a <vListInsert>
}
 80056d4:	e010      	b.n	80056f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056d6:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <prvAddCurrentTaskToDelayedList+0xa0>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <prvAddCurrentTaskToDelayedList+0x94>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3304      	adds	r3, #4
 80056e0:	4619      	mov	r1, r3
 80056e2:	4610      	mov	r0, r2
 80056e4:	f7fe fba1 	bl	8003e2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80056e8:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <prvAddCurrentTaskToDelayedList+0xa4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d202      	bcs.n	80056f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80056f2:	4a08      	ldr	r2, [pc, #32]	; (8005714 <prvAddCurrentTaskToDelayedList+0xa4>)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	6013      	str	r3, [r2, #0]
}
 80056f8:	bf00      	nop
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20000e98 	.word	0x20000e98
 8005704:	200009c0 	.word	0x200009c0
 8005708:	20000e80 	.word	0x20000e80
 800570c:	20000e50 	.word	0x20000e50
 8005710:	20000e4c 	.word	0x20000e4c
 8005714:	20000eb4 	.word	0x20000eb4

08005718 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	; 0x28
 800571c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005722:	f000 fb07 	bl	8005d34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005726:	4b1c      	ldr	r3, [pc, #112]	; (8005798 <xTimerCreateTimerTask+0x80>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d021      	beq.n	8005772 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005732:	2300      	movs	r3, #0
 8005734:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005736:	1d3a      	adds	r2, r7, #4
 8005738:	f107 0108 	add.w	r1, r7, #8
 800573c:	f107 030c 	add.w	r3, r7, #12
 8005740:	4618      	mov	r0, r3
 8005742:	f7fe fb07 	bl	8003d54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	9202      	str	r2, [sp, #8]
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	2302      	movs	r3, #2
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	2300      	movs	r3, #0
 8005756:	460a      	mov	r2, r1
 8005758:	4910      	ldr	r1, [pc, #64]	; (800579c <xTimerCreateTimerTask+0x84>)
 800575a:	4811      	ldr	r0, [pc, #68]	; (80057a0 <xTimerCreateTimerTask+0x88>)
 800575c:	f7ff f8b4 	bl	80048c8 <xTaskCreateStatic>
 8005760:	4603      	mov	r3, r0
 8005762:	4a10      	ldr	r2, [pc, #64]	; (80057a4 <xTimerCreateTimerTask+0x8c>)
 8005764:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005766:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <xTimerCreateTimerTask+0x8c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800576e:	2301      	movs	r3, #1
 8005770:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10a      	bne.n	800578e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	613b      	str	r3, [r7, #16]
}
 800578a:	bf00      	nop
 800578c:	e7fe      	b.n	800578c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800578e:	697b      	ldr	r3, [r7, #20]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000ef0 	.word	0x20000ef0
 800579c:	0800b0a8 	.word	0x0800b0a8
 80057a0:	080058dd 	.word	0x080058dd
 80057a4:	20000ef4 	.word	0x20000ef4

080057a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	; 0x28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	623b      	str	r3, [r7, #32]
}
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80057d6:	4b1a      	ldr	r3, [pc, #104]	; (8005840 <xTimerGenericCommand+0x98>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d02a      	beq.n	8005834 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b05      	cmp	r3, #5
 80057ee:	dc18      	bgt.n	8005822 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80057f0:	f7ff feb2 	bl	8005558 <xTaskGetSchedulerState>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d109      	bne.n	800580e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80057fa:	4b11      	ldr	r3, [pc, #68]	; (8005840 <xTimerGenericCommand+0x98>)
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	f107 0110 	add.w	r1, r7, #16
 8005802:	2300      	movs	r3, #0
 8005804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005806:	f7fe fc77 	bl	80040f8 <xQueueGenericSend>
 800580a:	6278      	str	r0, [r7, #36]	; 0x24
 800580c:	e012      	b.n	8005834 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800580e:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <xTimerGenericCommand+0x98>)
 8005810:	6818      	ldr	r0, [r3, #0]
 8005812:	f107 0110 	add.w	r1, r7, #16
 8005816:	2300      	movs	r3, #0
 8005818:	2200      	movs	r2, #0
 800581a:	f7fe fc6d 	bl	80040f8 <xQueueGenericSend>
 800581e:	6278      	str	r0, [r7, #36]	; 0x24
 8005820:	e008      	b.n	8005834 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <xTimerGenericCommand+0x98>)
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	f107 0110 	add.w	r1, r7, #16
 800582a:	2300      	movs	r3, #0
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	f7fe fd61 	bl	80042f4 <xQueueGenericSendFromISR>
 8005832:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005836:	4618      	mov	r0, r3
 8005838:	3728      	adds	r7, #40	; 0x28
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000ef0 	.word	0x20000ef0

08005844 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af02      	add	r7, sp, #8
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800584e:	4b22      	ldr	r3, [pc, #136]	; (80058d8 <prvProcessExpiredTimer+0x94>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	3304      	adds	r3, #4
 800585c:	4618      	mov	r0, r3
 800585e:	f7fe fb1d 	bl	8003e9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d022      	beq.n	80058b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	699a      	ldr	r2, [r3, #24]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	18d1      	adds	r1, r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	6978      	ldr	r0, [r7, #20]
 800587e:	f000 f8d1 	bl	8005a24 <prvInsertTimerInActiveList>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01f      	beq.n	80058c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005888:	2300      	movs	r3, #0
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	2300      	movs	r3, #0
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	2100      	movs	r1, #0
 8005892:	6978      	ldr	r0, [r7, #20]
 8005894:	f7ff ff88 	bl	80057a8 <xTimerGenericCommand>
 8005898:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d113      	bne.n	80058c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	60fb      	str	r3, [r7, #12]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	6978      	ldr	r0, [r7, #20]
 80058ce:	4798      	blx	r3
}
 80058d0:	bf00      	nop
 80058d2:	3718      	adds	r7, #24
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20000ee8 	.word	0x20000ee8

080058dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058e4:	f107 0308 	add.w	r3, r7, #8
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 f857 	bl	800599c <prvGetNextExpireTime>
 80058ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4619      	mov	r1, r3
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f803 	bl	8005900 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80058fa:	f000 f8d5 	bl	8005aa8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058fe:	e7f1      	b.n	80058e4 <prvTimerTask+0x8>

08005900 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800590a:	f7ff fa39 	bl	8004d80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800590e:	f107 0308 	add.w	r3, r7, #8
 8005912:	4618      	mov	r0, r3
 8005914:	f000 f866 	bl	80059e4 <prvSampleTimeNow>
 8005918:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d130      	bne.n	8005982 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <prvProcessTimerOrBlockTask+0x3c>
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	429a      	cmp	r2, r3
 800592c:	d806      	bhi.n	800593c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800592e:	f7ff fa35 	bl	8004d9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005932:	68f9      	ldr	r1, [r7, #12]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff ff85 	bl	8005844 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800593a:	e024      	b.n	8005986 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d008      	beq.n	8005954 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005942:	4b13      	ldr	r3, [pc, #76]	; (8005990 <prvProcessTimerOrBlockTask+0x90>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <prvProcessTimerOrBlockTask+0x50>
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <prvProcessTimerOrBlockTask+0x52>
 8005950:	2300      	movs	r3, #0
 8005952:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005954:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <prvProcessTimerOrBlockTask+0x94>)
 8005956:	6818      	ldr	r0, [r3, #0]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	4619      	mov	r1, r3
 8005962:	f7fe ff7d 	bl	8004860 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005966:	f7ff fa19 	bl	8004d9c <xTaskResumeAll>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10a      	bne.n	8005986 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005970:	4b09      	ldr	r3, [pc, #36]	; (8005998 <prvProcessTimerOrBlockTask+0x98>)
 8005972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	f3bf 8f6f 	isb	sy
}
 8005980:	e001      	b.n	8005986 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005982:	f7ff fa0b 	bl	8004d9c <xTaskResumeAll>
}
 8005986:	bf00      	nop
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20000eec 	.word	0x20000eec
 8005994:	20000ef0 	.word	0x20000ef0
 8005998:	e000ed04 	.word	0xe000ed04

0800599c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059a4:	4b0e      	ldr	r3, [pc, #56]	; (80059e0 <prvGetNextExpireTime+0x44>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <prvGetNextExpireTime+0x16>
 80059ae:	2201      	movs	r2, #1
 80059b0:	e000      	b.n	80059b4 <prvGetNextExpireTime+0x18>
 80059b2:	2200      	movs	r2, #0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d105      	bne.n	80059cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059c0:	4b07      	ldr	r3, [pc, #28]	; (80059e0 <prvGetNextExpireTime+0x44>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	e001      	b.n	80059d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80059d0:	68fb      	ldr	r3, [r7, #12]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20000ee8 	.word	0x20000ee8

080059e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80059ec:	f7ff fa74 	bl	8004ed8 <xTaskGetTickCount>
 80059f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80059f2:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <prvSampleTimeNow+0x3c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d205      	bcs.n	8005a08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80059fc:	f000 f936 	bl	8005c6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	e002      	b.n	8005a0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a0e:	4a04      	ldr	r2, [pc, #16]	; (8005a20 <prvSampleTimeNow+0x3c>)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a14:	68fb      	ldr	r3, [r7, #12]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000ef8 	.word	0x20000ef8

08005a24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d812      	bhi.n	8005a70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	1ad2      	subs	r2, r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d302      	bcc.n	8005a5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e01b      	b.n	8005a96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a5e:	4b10      	ldr	r3, [pc, #64]	; (8005aa0 <prvInsertTimerInActiveList+0x7c>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3304      	adds	r3, #4
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f7fe f9de 	bl	8003e2a <vListInsert>
 8005a6e:	e012      	b.n	8005a96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d206      	bcs.n	8005a86 <prvInsertTimerInActiveList+0x62>
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d302      	bcc.n	8005a86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e007      	b.n	8005a96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a86:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <prvInsertTimerInActiveList+0x80>)
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4610      	mov	r0, r2
 8005a92:	f7fe f9ca 	bl	8003e2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a96:	697b      	ldr	r3, [r7, #20]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20000eec 	.word	0x20000eec
 8005aa4:	20000ee8 	.word	0x20000ee8

08005aa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08e      	sub	sp, #56	; 0x38
 8005aac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005aae:	e0ca      	b.n	8005c46 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	da18      	bge.n	8005ae8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ab6:	1d3b      	adds	r3, r7, #4
 8005ab8:	3304      	adds	r3, #4
 8005aba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	61fb      	str	r3, [r7, #28]
}
 8005ad4:	bf00      	nop
 8005ad6:	e7fe      	b.n	8005ad6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ade:	6850      	ldr	r0, [r2, #4]
 8005ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ae2:	6892      	ldr	r2, [r2, #8]
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f2c0 80aa 	blt.w	8005c44 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	3304      	adds	r3, #4
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe f9cb 	bl	8003e9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b06:	463b      	mov	r3, r7
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff ff6b 	bl	80059e4 <prvSampleTimeNow>
 8005b0e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b09      	cmp	r3, #9
 8005b14:	f200 8097 	bhi.w	8005c46 <prvProcessReceivedCommands+0x19e>
 8005b18:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <prvProcessReceivedCommands+0x78>)
 8005b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005b49 	.word	0x08005b49
 8005b24:	08005b49 	.word	0x08005b49
 8005b28:	08005b49 	.word	0x08005b49
 8005b2c:	08005bbd 	.word	0x08005bbd
 8005b30:	08005bd1 	.word	0x08005bd1
 8005b34:	08005c1b 	.word	0x08005c1b
 8005b38:	08005b49 	.word	0x08005b49
 8005b3c:	08005b49 	.word	0x08005b49
 8005b40:	08005bbd 	.word	0x08005bbd
 8005b44:	08005bd1 	.word	0x08005bd1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	18d1      	adds	r1, r2, r3
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b68:	f7ff ff5c 	bl	8005a24 <prvInsertTimerInActiveList>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d069      	beq.n	8005c46 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d05e      	beq.n	8005c46 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	441a      	add	r2, r3
 8005b90:	2300      	movs	r3, #0
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	2300      	movs	r3, #0
 8005b96:	2100      	movs	r1, #0
 8005b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b9a:	f7ff fe05 	bl	80057a8 <xTimerGenericCommand>
 8005b9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d14f      	bne.n	8005c46 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	61bb      	str	r3, [r7, #24]
}
 8005bb8:	bf00      	nop
 8005bba:	e7fe      	b.n	8005bba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bc2:	f023 0301 	bic.w	r3, r3, #1
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005bce:	e03a      	b.n	8005c46 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bd6:	f043 0301 	orr.w	r3, r3, #1
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	617b      	str	r3, [r7, #20]
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	18d1      	adds	r1, r2, r3
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c14:	f7ff ff06 	bl	8005a24 <prvInsertTimerInActiveList>
					break;
 8005c18:	e015      	b.n	8005c46 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d103      	bne.n	8005c30 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c2a:	f000 fbe1 	bl	80063f0 <vPortFree>
 8005c2e:	e00a      	b.n	8005c46 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c36:	f023 0301 	bic.w	r3, r3, #1
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c42:	e000      	b.n	8005c46 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005c44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c46:	4b08      	ldr	r3, [pc, #32]	; (8005c68 <prvProcessReceivedCommands+0x1c0>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	1d39      	adds	r1, r7, #4
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fe fbec 	bl	800442c <xQueueReceive>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f47f af2a 	bne.w	8005ab0 <prvProcessReceivedCommands+0x8>
	}
}
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
 8005c60:	3730      	adds	r7, #48	; 0x30
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	20000ef0 	.word	0x20000ef0

08005c6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c72:	e048      	b.n	8005d06 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c74:	4b2d      	ldr	r3, [pc, #180]	; (8005d2c <prvSwitchTimerLists+0xc0>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c7e:	4b2b      	ldr	r3, [pc, #172]	; (8005d2c <prvSwitchTimerLists+0xc0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fe f905 	bl	8003e9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d02e      	beq.n	8005d06 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4413      	add	r3, r2
 8005cb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d90e      	bls.n	8005cd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cc6:	4b19      	ldr	r3, [pc, #100]	; (8005d2c <prvSwitchTimerLists+0xc0>)
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f7fe f8aa 	bl	8003e2a <vListInsert>
 8005cd6:	e016      	b.n	8005d06 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cd8:	2300      	movs	r3, #0
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff fd60 	bl	80057a8 <xTimerGenericCommand>
 8005ce8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	603b      	str	r3, [r7, #0]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d06:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <prvSwitchTimerLists+0xc0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1b1      	bne.n	8005c74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d10:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <prvSwitchTimerLists+0xc0>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d16:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <prvSwitchTimerLists+0xc4>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a04      	ldr	r2, [pc, #16]	; (8005d2c <prvSwitchTimerLists+0xc0>)
 8005d1c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d1e:	4a04      	ldr	r2, [pc, #16]	; (8005d30 <prvSwitchTimerLists+0xc4>)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	6013      	str	r3, [r2, #0]
}
 8005d24:	bf00      	nop
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20000ee8 	.word	0x20000ee8
 8005d30:	20000eec 	.word	0x20000eec

08005d34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d3a:	f000 f96b 	bl	8006014 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d3e:	4b15      	ldr	r3, [pc, #84]	; (8005d94 <prvCheckForValidListAndQueue+0x60>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d120      	bne.n	8005d88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d46:	4814      	ldr	r0, [pc, #80]	; (8005d98 <prvCheckForValidListAndQueue+0x64>)
 8005d48:	f7fe f81e 	bl	8003d88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d4c:	4813      	ldr	r0, [pc, #76]	; (8005d9c <prvCheckForValidListAndQueue+0x68>)
 8005d4e:	f7fe f81b 	bl	8003d88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d52:	4b13      	ldr	r3, [pc, #76]	; (8005da0 <prvCheckForValidListAndQueue+0x6c>)
 8005d54:	4a10      	ldr	r2, [pc, #64]	; (8005d98 <prvCheckForValidListAndQueue+0x64>)
 8005d56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d58:	4b12      	ldr	r3, [pc, #72]	; (8005da4 <prvCheckForValidListAndQueue+0x70>)
 8005d5a:	4a10      	ldr	r2, [pc, #64]	; (8005d9c <prvCheckForValidListAndQueue+0x68>)
 8005d5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d5e:	2300      	movs	r3, #0
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <prvCheckForValidListAndQueue+0x74>)
 8005d64:	4a11      	ldr	r2, [pc, #68]	; (8005dac <prvCheckForValidListAndQueue+0x78>)
 8005d66:	2110      	movs	r1, #16
 8005d68:	200a      	movs	r0, #10
 8005d6a:	f7fe f929 	bl	8003fc0 <xQueueGenericCreateStatic>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	4a08      	ldr	r2, [pc, #32]	; (8005d94 <prvCheckForValidListAndQueue+0x60>)
 8005d72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d74:	4b07      	ldr	r3, [pc, #28]	; (8005d94 <prvCheckForValidListAndQueue+0x60>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d7c:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <prvCheckForValidListAndQueue+0x60>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	490b      	ldr	r1, [pc, #44]	; (8005db0 <prvCheckForValidListAndQueue+0x7c>)
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fd42 	bl	800480c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d88:	f000 f974 	bl	8006074 <vPortExitCritical>
}
 8005d8c:	bf00      	nop
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000ef0 	.word	0x20000ef0
 8005d98:	20000ec0 	.word	0x20000ec0
 8005d9c:	20000ed4 	.word	0x20000ed4
 8005da0:	20000ee8 	.word	0x20000ee8
 8005da4:	20000eec 	.word	0x20000eec
 8005da8:	20000f9c 	.word	0x20000f9c
 8005dac:	20000efc 	.word	0x20000efc
 8005db0:	0800b0b0 	.word	0x0800b0b0

08005db4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3b04      	subs	r3, #4
 8005dc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005dcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3b04      	subs	r3, #4
 8005dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f023 0201 	bic.w	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	3b04      	subs	r3, #4
 8005de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005de4:	4a0c      	ldr	r2, [pc, #48]	; (8005e18 <pxPortInitialiseStack+0x64>)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3b14      	subs	r3, #20
 8005dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3b04      	subs	r3, #4
 8005dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f06f 0202 	mvn.w	r2, #2
 8005e02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3b20      	subs	r3, #32
 8005e08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	08005e1d 	.word	0x08005e1d

08005e1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e22:	2300      	movs	r3, #0
 8005e24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e26:	4b12      	ldr	r3, [pc, #72]	; (8005e70 <prvTaskExitError+0x54>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2e:	d00a      	beq.n	8005e46 <prvTaskExitError+0x2a>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	60fb      	str	r3, [r7, #12]
}
 8005e42:	bf00      	nop
 8005e44:	e7fe      	b.n	8005e44 <prvTaskExitError+0x28>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	60bb      	str	r3, [r7, #8]
}
 8005e58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e5a:	bf00      	nop
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0fc      	beq.n	8005e5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	2000000c 	.word	0x2000000c
	...

08005e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e80:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <pxCurrentTCBConst2>)
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	6808      	ldr	r0, [r1, #0]
 8005e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8a:	f380 8809 	msr	PSP, r0
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f04f 0000 	mov.w	r0, #0
 8005e96:	f380 8811 	msr	BASEPRI, r0
 8005e9a:	4770      	bx	lr
 8005e9c:	f3af 8000 	nop.w

08005ea0 <pxCurrentTCBConst2>:
 8005ea0:	200009c0 	.word	0x200009c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop

08005ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ea8:	4808      	ldr	r0, [pc, #32]	; (8005ecc <prvPortStartFirstTask+0x24>)
 8005eaa:	6800      	ldr	r0, [r0, #0]
 8005eac:	6800      	ldr	r0, [r0, #0]
 8005eae:	f380 8808 	msr	MSP, r0
 8005eb2:	f04f 0000 	mov.w	r0, #0
 8005eb6:	f380 8814 	msr	CONTROL, r0
 8005eba:	b662      	cpsie	i
 8005ebc:	b661      	cpsie	f
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	df00      	svc	0
 8005ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005eca:	bf00      	nop
 8005ecc:	e000ed08 	.word	0xe000ed08

08005ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ed6:	4b46      	ldr	r3, [pc, #280]	; (8005ff0 <xPortStartScheduler+0x120>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a46      	ldr	r2, [pc, #280]	; (8005ff4 <xPortStartScheduler+0x124>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10a      	bne.n	8005ef6 <xPortStartScheduler+0x26>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	613b      	str	r3, [r7, #16]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ef6:	4b3e      	ldr	r3, [pc, #248]	; (8005ff0 <xPortStartScheduler+0x120>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a3f      	ldr	r2, [pc, #252]	; (8005ff8 <xPortStartScheduler+0x128>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d10a      	bne.n	8005f16 <xPortStartScheduler+0x46>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	60fb      	str	r3, [r7, #12]
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f16:	4b39      	ldr	r3, [pc, #228]	; (8005ffc <xPortStartScheduler+0x12c>)
 8005f18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	4b31      	ldr	r3, [pc, #196]	; (8006000 <xPortStartScheduler+0x130>)
 8005f3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f3e:	4b31      	ldr	r3, [pc, #196]	; (8006004 <xPortStartScheduler+0x134>)
 8005f40:	2207      	movs	r2, #7
 8005f42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f44:	e009      	b.n	8005f5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005f46:	4b2f      	ldr	r3, [pc, #188]	; (8006004 <xPortStartScheduler+0x134>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	4a2d      	ldr	r2, [pc, #180]	; (8006004 <xPortStartScheduler+0x134>)
 8005f4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	2b80      	cmp	r3, #128	; 0x80
 8005f64:	d0ef      	beq.n	8005f46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f66:	4b27      	ldr	r3, [pc, #156]	; (8006004 <xPortStartScheduler+0x134>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f1c3 0307 	rsb	r3, r3, #7
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d00a      	beq.n	8005f88 <xPortStartScheduler+0xb8>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	60bb      	str	r3, [r7, #8]
}
 8005f84:	bf00      	nop
 8005f86:	e7fe      	b.n	8005f86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f88:	4b1e      	ldr	r3, [pc, #120]	; (8006004 <xPortStartScheduler+0x134>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <xPortStartScheduler+0x134>)
 8005f90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f92:	4b1c      	ldr	r3, [pc, #112]	; (8006004 <xPortStartScheduler+0x134>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f9a:	4a1a      	ldr	r2, [pc, #104]	; (8006004 <xPortStartScheduler+0x134>)
 8005f9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fa6:	4b18      	ldr	r3, [pc, #96]	; (8006008 <xPortStartScheduler+0x138>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a17      	ldr	r2, [pc, #92]	; (8006008 <xPortStartScheduler+0x138>)
 8005fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <xPortStartScheduler+0x138>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a14      	ldr	r2, [pc, #80]	; (8006008 <xPortStartScheduler+0x138>)
 8005fb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005fbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fbe:	f000 f8dd 	bl	800617c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005fc2:	4b12      	ldr	r3, [pc, #72]	; (800600c <xPortStartScheduler+0x13c>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005fc8:	f000 f8fc 	bl	80061c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005fcc:	4b10      	ldr	r3, [pc, #64]	; (8006010 <xPortStartScheduler+0x140>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a0f      	ldr	r2, [pc, #60]	; (8006010 <xPortStartScheduler+0x140>)
 8005fd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005fd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005fd8:	f7ff ff66 	bl	8005ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fdc:	f7ff f846 	bl	800506c <vTaskSwitchContext>
	prvTaskExitError();
 8005fe0:	f7ff ff1c 	bl	8005e1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	e000ed00 	.word	0xe000ed00
 8005ff4:	410fc271 	.word	0x410fc271
 8005ff8:	410fc270 	.word	0x410fc270
 8005ffc:	e000e400 	.word	0xe000e400
 8006000:	20000fec 	.word	0x20000fec
 8006004:	20000ff0 	.word	0x20000ff0
 8006008:	e000ed20 	.word	0xe000ed20
 800600c:	2000000c 	.word	0x2000000c
 8006010:	e000ef34 	.word	0xe000ef34

08006014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	607b      	str	r3, [r7, #4]
}
 800602c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800602e:	4b0f      	ldr	r3, [pc, #60]	; (800606c <vPortEnterCritical+0x58>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	4a0d      	ldr	r2, [pc, #52]	; (800606c <vPortEnterCritical+0x58>)
 8006036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <vPortEnterCritical+0x58>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d10f      	bne.n	8006060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006040:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <vPortEnterCritical+0x5c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <vPortEnterCritical+0x4c>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	603b      	str	r3, [r7, #0]
}
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <vPortEnterCritical+0x4a>
	}
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	2000000c 	.word	0x2000000c
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800607a:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <vPortExitCritical+0x50>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <vPortExitCritical+0x24>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	607b      	str	r3, [r7, #4]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006098:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <vPortExitCritical+0x50>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3b01      	subs	r3, #1
 800609e:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <vPortExitCritical+0x50>)
 80060a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060a2:	4b08      	ldr	r3, [pc, #32]	; (80060c4 <vPortExitCritical+0x50>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d105      	bne.n	80060b6 <vPortExitCritical+0x42>
 80060aa:	2300      	movs	r3, #0
 80060ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	f383 8811 	msr	BASEPRI, r3
}
 80060b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	2000000c 	.word	0x2000000c
	...

080060d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060d0:	f3ef 8009 	mrs	r0, PSP
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	4b15      	ldr	r3, [pc, #84]	; (8006130 <pxCurrentTCBConst>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	f01e 0f10 	tst.w	lr, #16
 80060e0:	bf08      	it	eq
 80060e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	6010      	str	r0, [r2, #0]
 80060ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060f4:	f380 8811 	msr	BASEPRI, r0
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f7fe ffb4 	bl	800506c <vTaskSwitchContext>
 8006104:	f04f 0000 	mov.w	r0, #0
 8006108:	f380 8811 	msr	BASEPRI, r0
 800610c:	bc09      	pop	{r0, r3}
 800610e:	6819      	ldr	r1, [r3, #0]
 8006110:	6808      	ldr	r0, [r1, #0]
 8006112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006116:	f01e 0f10 	tst.w	lr, #16
 800611a:	bf08      	it	eq
 800611c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006120:	f380 8809 	msr	PSP, r0
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	f3af 8000 	nop.w

08006130 <pxCurrentTCBConst>:
 8006130:	200009c0 	.word	0x200009c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop

08006138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	607b      	str	r3, [r7, #4]
}
 8006150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006152:	f7fe fed1 	bl	8004ef8 <xTaskIncrementTick>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <xPortSysTickHandler+0x40>)
 800615e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	2300      	movs	r3, #0
 8006166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	f383 8811 	msr	BASEPRI, r3
}
 800616e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006180:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <vPortSetupTimerInterrupt+0x34>)
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <vPortSetupTimerInterrupt+0x38>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800618c:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <vPortSetupTimerInterrupt+0x3c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <vPortSetupTimerInterrupt+0x40>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	099b      	lsrs	r3, r3, #6
 8006198:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <vPortSetupTimerInterrupt+0x44>)
 800619a:	3b01      	subs	r3, #1
 800619c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800619e:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <vPortSetupTimerInterrupt+0x34>)
 80061a0:	2207      	movs	r2, #7
 80061a2:	601a      	str	r2, [r3, #0]
}
 80061a4:	bf00      	nop
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	e000e010 	.word	0xe000e010
 80061b4:	e000e018 	.word	0xe000e018
 80061b8:	20000000 	.word	0x20000000
 80061bc:	10624dd3 	.word	0x10624dd3
 80061c0:	e000e014 	.word	0xe000e014

080061c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80061c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80061d4 <vPortEnableVFP+0x10>
 80061c8:	6801      	ldr	r1, [r0, #0]
 80061ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80061ce:	6001      	str	r1, [r0, #0]
 80061d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80061d2:	bf00      	nop
 80061d4:	e000ed88 	.word	0xe000ed88

080061d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80061de:	f3ef 8305 	mrs	r3, IPSR
 80061e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b0f      	cmp	r3, #15
 80061e8:	d914      	bls.n	8006214 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061ea:	4a17      	ldr	r2, [pc, #92]	; (8006248 <vPortValidateInterruptPriority+0x70>)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061f4:	4b15      	ldr	r3, [pc, #84]	; (800624c <vPortValidateInterruptPriority+0x74>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	7afa      	ldrb	r2, [r7, #11]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d20a      	bcs.n	8006214 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	607b      	str	r3, [r7, #4]
}
 8006210:	bf00      	nop
 8006212:	e7fe      	b.n	8006212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006214:	4b0e      	ldr	r3, [pc, #56]	; (8006250 <vPortValidateInterruptPriority+0x78>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800621c:	4b0d      	ldr	r3, [pc, #52]	; (8006254 <vPortValidateInterruptPriority+0x7c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d90a      	bls.n	800623a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	603b      	str	r3, [r7, #0]
}
 8006236:	bf00      	nop
 8006238:	e7fe      	b.n	8006238 <vPortValidateInterruptPriority+0x60>
	}
 800623a:	bf00      	nop
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	e000e3f0 	.word	0xe000e3f0
 800624c:	20000fec 	.word	0x20000fec
 8006250:	e000ed0c 	.word	0xe000ed0c
 8006254:	20000ff0 	.word	0x20000ff0

08006258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006260:	2300      	movs	r3, #0
 8006262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006264:	f7fe fd8c 	bl	8004d80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006268:	4b5b      	ldr	r3, [pc, #364]	; (80063d8 <pvPortMalloc+0x180>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006270:	f000 f920 	bl	80064b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006274:	4b59      	ldr	r3, [pc, #356]	; (80063dc <pvPortMalloc+0x184>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4013      	ands	r3, r2
 800627c:	2b00      	cmp	r3, #0
 800627e:	f040 8093 	bne.w	80063a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01d      	beq.n	80062c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006288:	2208      	movs	r2, #8
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4413      	add	r3, r2
 800628e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	2b00      	cmp	r3, #0
 8006298:	d014      	beq.n	80062c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f023 0307 	bic.w	r3, r3, #7
 80062a0:	3308      	adds	r3, #8
 80062a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <pvPortMalloc+0x6c>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	617b      	str	r3, [r7, #20]
}
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d06e      	beq.n	80063a8 <pvPortMalloc+0x150>
 80062ca:	4b45      	ldr	r3, [pc, #276]	; (80063e0 <pvPortMalloc+0x188>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d869      	bhi.n	80063a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062d4:	4b43      	ldr	r3, [pc, #268]	; (80063e4 <pvPortMalloc+0x18c>)
 80062d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062d8:	4b42      	ldr	r3, [pc, #264]	; (80063e4 <pvPortMalloc+0x18c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062de:	e004      	b.n	80062ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d903      	bls.n	80062fc <pvPortMalloc+0xa4>
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1f1      	bne.n	80062e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062fc:	4b36      	ldr	r3, [pc, #216]	; (80063d8 <pvPortMalloc+0x180>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006302:	429a      	cmp	r2, r3
 8006304:	d050      	beq.n	80063a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2208      	movs	r2, #8
 800630c:	4413      	add	r3, r2
 800630e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	1ad2      	subs	r2, r2, r3
 8006320:	2308      	movs	r3, #8
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	429a      	cmp	r2, r3
 8006326:	d91f      	bls.n	8006368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4413      	add	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <pvPortMalloc+0xf8>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	613b      	str	r3, [r7, #16]
}
 800634c:	bf00      	nop
 800634e:	e7fe      	b.n	800634e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	1ad2      	subs	r2, r2, r3
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006362:	69b8      	ldr	r0, [r7, #24]
 8006364:	f000 f908 	bl	8006578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006368:	4b1d      	ldr	r3, [pc, #116]	; (80063e0 <pvPortMalloc+0x188>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	4a1b      	ldr	r2, [pc, #108]	; (80063e0 <pvPortMalloc+0x188>)
 8006374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006376:	4b1a      	ldr	r3, [pc, #104]	; (80063e0 <pvPortMalloc+0x188>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <pvPortMalloc+0x190>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d203      	bcs.n	800638a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006382:	4b17      	ldr	r3, [pc, #92]	; (80063e0 <pvPortMalloc+0x188>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a18      	ldr	r2, [pc, #96]	; (80063e8 <pvPortMalloc+0x190>)
 8006388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	4b13      	ldr	r3, [pc, #76]	; (80063dc <pvPortMalloc+0x184>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	431a      	orrs	r2, r3
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800639e:	4b13      	ldr	r3, [pc, #76]	; (80063ec <pvPortMalloc+0x194>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3301      	adds	r3, #1
 80063a4:	4a11      	ldr	r2, [pc, #68]	; (80063ec <pvPortMalloc+0x194>)
 80063a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063a8:	f7fe fcf8 	bl	8004d9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <pvPortMalloc+0x174>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	60fb      	str	r3, [r7, #12]
}
 80063c8:	bf00      	nop
 80063ca:	e7fe      	b.n	80063ca <pvPortMalloc+0x172>
	return pvReturn;
 80063cc:	69fb      	ldr	r3, [r7, #28]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3728      	adds	r7, #40	; 0x28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20004bfc 	.word	0x20004bfc
 80063dc:	20004c10 	.word	0x20004c10
 80063e0:	20004c00 	.word	0x20004c00
 80063e4:	20004bf4 	.word	0x20004bf4
 80063e8:	20004c04 	.word	0x20004c04
 80063ec:	20004c08 	.word	0x20004c08

080063f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d04d      	beq.n	800649e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006402:	2308      	movs	r3, #8
 8006404:	425b      	negs	r3, r3
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4413      	add	r3, r2
 800640a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	4b24      	ldr	r3, [pc, #144]	; (80064a8 <vPortFree+0xb8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4013      	ands	r3, r2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10a      	bne.n	8006434 <vPortFree+0x44>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	60fb      	str	r3, [r7, #12]
}
 8006430:	bf00      	nop
 8006432:	e7fe      	b.n	8006432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <vPortFree+0x62>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	60bb      	str	r3, [r7, #8]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <vPortFree+0xb8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4013      	ands	r3, r2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01e      	beq.n	800649e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d11a      	bne.n	800649e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	4b0e      	ldr	r3, [pc, #56]	; (80064a8 <vPortFree+0xb8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	43db      	mvns	r3, r3
 8006472:	401a      	ands	r2, r3
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006478:	f7fe fc82 	bl	8004d80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	4b0a      	ldr	r3, [pc, #40]	; (80064ac <vPortFree+0xbc>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4413      	add	r3, r2
 8006486:	4a09      	ldr	r2, [pc, #36]	; (80064ac <vPortFree+0xbc>)
 8006488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800648a:	6938      	ldr	r0, [r7, #16]
 800648c:	f000 f874 	bl	8006578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <vPortFree+0xc0>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3301      	adds	r3, #1
 8006496:	4a06      	ldr	r2, [pc, #24]	; (80064b0 <vPortFree+0xc0>)
 8006498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800649a:	f7fe fc7f 	bl	8004d9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800649e:	bf00      	nop
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20004c10 	.word	0x20004c10
 80064ac:	20004c00 	.word	0x20004c00
 80064b0:	20004c0c 	.word	0x20004c0c

080064b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80064be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064c0:	4b27      	ldr	r3, [pc, #156]	; (8006560 <prvHeapInit+0xac>)
 80064c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00c      	beq.n	80064e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3307      	adds	r3, #7
 80064d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0307 	bic.w	r3, r3, #7
 80064da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	4a1f      	ldr	r2, [pc, #124]	; (8006560 <prvHeapInit+0xac>)
 80064e4:	4413      	add	r3, r2
 80064e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064ec:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <prvHeapInit+0xb0>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064f2:	4b1c      	ldr	r3, [pc, #112]	; (8006564 <prvHeapInit+0xb0>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	4413      	add	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006500:	2208      	movs	r2, #8
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	1a9b      	subs	r3, r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0307 	bic.w	r3, r3, #7
 800650e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4a15      	ldr	r2, [pc, #84]	; (8006568 <prvHeapInit+0xb4>)
 8006514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <prvHeapInit+0xb4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2200      	movs	r2, #0
 800651c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800651e:	4b12      	ldr	r3, [pc, #72]	; (8006568 <prvHeapInit+0xb4>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006534:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <prvHeapInit+0xb4>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	4a0a      	ldr	r2, [pc, #40]	; (800656c <prvHeapInit+0xb8>)
 8006542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	4a09      	ldr	r2, [pc, #36]	; (8006570 <prvHeapInit+0xbc>)
 800654a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800654c:	4b09      	ldr	r3, [pc, #36]	; (8006574 <prvHeapInit+0xc0>)
 800654e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006552:	601a      	str	r2, [r3, #0]
}
 8006554:	bf00      	nop
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	20000ff4 	.word	0x20000ff4
 8006564:	20004bf4 	.word	0x20004bf4
 8006568:	20004bfc 	.word	0x20004bfc
 800656c:	20004c04 	.word	0x20004c04
 8006570:	20004c00 	.word	0x20004c00
 8006574:	20004c10 	.word	0x20004c10

08006578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006580:	4b28      	ldr	r3, [pc, #160]	; (8006624 <prvInsertBlockIntoFreeList+0xac>)
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	e002      	b.n	800658c <prvInsertBlockIntoFreeList+0x14>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	429a      	cmp	r2, r3
 8006594:	d8f7      	bhi.n	8006586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	4413      	add	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d108      	bne.n	80065ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	441a      	add	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	441a      	add	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d118      	bne.n	8006600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	4b15      	ldr	r3, [pc, #84]	; (8006628 <prvInsertBlockIntoFreeList+0xb0>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d00d      	beq.n	80065f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	441a      	add	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	e008      	b.n	8006608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065f6:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <prvInsertBlockIntoFreeList+0xb0>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	e003      	b.n	8006608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	429a      	cmp	r2, r3
 800660e:	d002      	beq.n	8006616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	20004bf4 	.word	0x20004bf4
 8006628:	20004bfc 	.word	0x20004bfc

0800662c <__errno>:
 800662c:	4b01      	ldr	r3, [pc, #4]	; (8006634 <__errno+0x8>)
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	20000010 	.word	0x20000010

08006638 <std>:
 8006638:	2300      	movs	r3, #0
 800663a:	b510      	push	{r4, lr}
 800663c:	4604      	mov	r4, r0
 800663e:	e9c0 3300 	strd	r3, r3, [r0]
 8006642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006646:	6083      	str	r3, [r0, #8]
 8006648:	8181      	strh	r1, [r0, #12]
 800664a:	6643      	str	r3, [r0, #100]	; 0x64
 800664c:	81c2      	strh	r2, [r0, #14]
 800664e:	6183      	str	r3, [r0, #24]
 8006650:	4619      	mov	r1, r3
 8006652:	2208      	movs	r2, #8
 8006654:	305c      	adds	r0, #92	; 0x5c
 8006656:	f000 f91a 	bl	800688e <memset>
 800665a:	4b05      	ldr	r3, [pc, #20]	; (8006670 <std+0x38>)
 800665c:	6263      	str	r3, [r4, #36]	; 0x24
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <std+0x3c>)
 8006660:	62a3      	str	r3, [r4, #40]	; 0x28
 8006662:	4b05      	ldr	r3, [pc, #20]	; (8006678 <std+0x40>)
 8006664:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006666:	4b05      	ldr	r3, [pc, #20]	; (800667c <std+0x44>)
 8006668:	6224      	str	r4, [r4, #32]
 800666a:	6323      	str	r3, [r4, #48]	; 0x30
 800666c:	bd10      	pop	{r4, pc}
 800666e:	bf00      	nop
 8006670:	08007789 	.word	0x08007789
 8006674:	080077ab 	.word	0x080077ab
 8006678:	080077e3 	.word	0x080077e3
 800667c:	08007807 	.word	0x08007807

08006680 <_cleanup_r>:
 8006680:	4901      	ldr	r1, [pc, #4]	; (8006688 <_cleanup_r+0x8>)
 8006682:	f000 b8af 	b.w	80067e4 <_fwalk_reent>
 8006686:	bf00      	nop
 8006688:	080093b5 	.word	0x080093b5

0800668c <__sfmoreglue>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	1e4a      	subs	r2, r1, #1
 8006690:	2568      	movs	r5, #104	; 0x68
 8006692:	4355      	muls	r5, r2
 8006694:	460e      	mov	r6, r1
 8006696:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800669a:	f000 f901 	bl	80068a0 <_malloc_r>
 800669e:	4604      	mov	r4, r0
 80066a0:	b140      	cbz	r0, 80066b4 <__sfmoreglue+0x28>
 80066a2:	2100      	movs	r1, #0
 80066a4:	e9c0 1600 	strd	r1, r6, [r0]
 80066a8:	300c      	adds	r0, #12
 80066aa:	60a0      	str	r0, [r4, #8]
 80066ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066b0:	f000 f8ed 	bl	800688e <memset>
 80066b4:	4620      	mov	r0, r4
 80066b6:	bd70      	pop	{r4, r5, r6, pc}

080066b8 <__sfp_lock_acquire>:
 80066b8:	4801      	ldr	r0, [pc, #4]	; (80066c0 <__sfp_lock_acquire+0x8>)
 80066ba:	f000 b8d8 	b.w	800686e <__retarget_lock_acquire_recursive>
 80066be:	bf00      	nop
 80066c0:	20004fd0 	.word	0x20004fd0

080066c4 <__sfp_lock_release>:
 80066c4:	4801      	ldr	r0, [pc, #4]	; (80066cc <__sfp_lock_release+0x8>)
 80066c6:	f000 b8d3 	b.w	8006870 <__retarget_lock_release_recursive>
 80066ca:	bf00      	nop
 80066cc:	20004fd0 	.word	0x20004fd0

080066d0 <__sinit_lock_acquire>:
 80066d0:	4801      	ldr	r0, [pc, #4]	; (80066d8 <__sinit_lock_acquire+0x8>)
 80066d2:	f000 b8cc 	b.w	800686e <__retarget_lock_acquire_recursive>
 80066d6:	bf00      	nop
 80066d8:	20004fcb 	.word	0x20004fcb

080066dc <__sinit_lock_release>:
 80066dc:	4801      	ldr	r0, [pc, #4]	; (80066e4 <__sinit_lock_release+0x8>)
 80066de:	f000 b8c7 	b.w	8006870 <__retarget_lock_release_recursive>
 80066e2:	bf00      	nop
 80066e4:	20004fcb 	.word	0x20004fcb

080066e8 <__sinit>:
 80066e8:	b510      	push	{r4, lr}
 80066ea:	4604      	mov	r4, r0
 80066ec:	f7ff fff0 	bl	80066d0 <__sinit_lock_acquire>
 80066f0:	69a3      	ldr	r3, [r4, #24]
 80066f2:	b11b      	cbz	r3, 80066fc <__sinit+0x14>
 80066f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066f8:	f7ff bff0 	b.w	80066dc <__sinit_lock_release>
 80066fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006700:	6523      	str	r3, [r4, #80]	; 0x50
 8006702:	4b13      	ldr	r3, [pc, #76]	; (8006750 <__sinit+0x68>)
 8006704:	4a13      	ldr	r2, [pc, #76]	; (8006754 <__sinit+0x6c>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	62a2      	str	r2, [r4, #40]	; 0x28
 800670a:	42a3      	cmp	r3, r4
 800670c:	bf04      	itt	eq
 800670e:	2301      	moveq	r3, #1
 8006710:	61a3      	streq	r3, [r4, #24]
 8006712:	4620      	mov	r0, r4
 8006714:	f000 f820 	bl	8006758 <__sfp>
 8006718:	6060      	str	r0, [r4, #4]
 800671a:	4620      	mov	r0, r4
 800671c:	f000 f81c 	bl	8006758 <__sfp>
 8006720:	60a0      	str	r0, [r4, #8]
 8006722:	4620      	mov	r0, r4
 8006724:	f000 f818 	bl	8006758 <__sfp>
 8006728:	2200      	movs	r2, #0
 800672a:	60e0      	str	r0, [r4, #12]
 800672c:	2104      	movs	r1, #4
 800672e:	6860      	ldr	r0, [r4, #4]
 8006730:	f7ff ff82 	bl	8006638 <std>
 8006734:	68a0      	ldr	r0, [r4, #8]
 8006736:	2201      	movs	r2, #1
 8006738:	2109      	movs	r1, #9
 800673a:	f7ff ff7d 	bl	8006638 <std>
 800673e:	68e0      	ldr	r0, [r4, #12]
 8006740:	2202      	movs	r2, #2
 8006742:	2112      	movs	r1, #18
 8006744:	f7ff ff78 	bl	8006638 <std>
 8006748:	2301      	movs	r3, #1
 800674a:	61a3      	str	r3, [r4, #24]
 800674c:	e7d2      	b.n	80066f4 <__sinit+0xc>
 800674e:	bf00      	nop
 8006750:	0800b178 	.word	0x0800b178
 8006754:	08006681 	.word	0x08006681

08006758 <__sfp>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	4607      	mov	r7, r0
 800675c:	f7ff ffac 	bl	80066b8 <__sfp_lock_acquire>
 8006760:	4b1e      	ldr	r3, [pc, #120]	; (80067dc <__sfp+0x84>)
 8006762:	681e      	ldr	r6, [r3, #0]
 8006764:	69b3      	ldr	r3, [r6, #24]
 8006766:	b913      	cbnz	r3, 800676e <__sfp+0x16>
 8006768:	4630      	mov	r0, r6
 800676a:	f7ff ffbd 	bl	80066e8 <__sinit>
 800676e:	3648      	adds	r6, #72	; 0x48
 8006770:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006774:	3b01      	subs	r3, #1
 8006776:	d503      	bpl.n	8006780 <__sfp+0x28>
 8006778:	6833      	ldr	r3, [r6, #0]
 800677a:	b30b      	cbz	r3, 80067c0 <__sfp+0x68>
 800677c:	6836      	ldr	r6, [r6, #0]
 800677e:	e7f7      	b.n	8006770 <__sfp+0x18>
 8006780:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006784:	b9d5      	cbnz	r5, 80067bc <__sfp+0x64>
 8006786:	4b16      	ldr	r3, [pc, #88]	; (80067e0 <__sfp+0x88>)
 8006788:	60e3      	str	r3, [r4, #12]
 800678a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800678e:	6665      	str	r5, [r4, #100]	; 0x64
 8006790:	f000 f86c 	bl	800686c <__retarget_lock_init_recursive>
 8006794:	f7ff ff96 	bl	80066c4 <__sfp_lock_release>
 8006798:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800679c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067a0:	6025      	str	r5, [r4, #0]
 80067a2:	61a5      	str	r5, [r4, #24]
 80067a4:	2208      	movs	r2, #8
 80067a6:	4629      	mov	r1, r5
 80067a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067ac:	f000 f86f 	bl	800688e <memset>
 80067b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067b8:	4620      	mov	r0, r4
 80067ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067bc:	3468      	adds	r4, #104	; 0x68
 80067be:	e7d9      	b.n	8006774 <__sfp+0x1c>
 80067c0:	2104      	movs	r1, #4
 80067c2:	4638      	mov	r0, r7
 80067c4:	f7ff ff62 	bl	800668c <__sfmoreglue>
 80067c8:	4604      	mov	r4, r0
 80067ca:	6030      	str	r0, [r6, #0]
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d1d5      	bne.n	800677c <__sfp+0x24>
 80067d0:	f7ff ff78 	bl	80066c4 <__sfp_lock_release>
 80067d4:	230c      	movs	r3, #12
 80067d6:	603b      	str	r3, [r7, #0]
 80067d8:	e7ee      	b.n	80067b8 <__sfp+0x60>
 80067da:	bf00      	nop
 80067dc:	0800b178 	.word	0x0800b178
 80067e0:	ffff0001 	.word	0xffff0001

080067e4 <_fwalk_reent>:
 80067e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e8:	4606      	mov	r6, r0
 80067ea:	4688      	mov	r8, r1
 80067ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067f0:	2700      	movs	r7, #0
 80067f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067f6:	f1b9 0901 	subs.w	r9, r9, #1
 80067fa:	d505      	bpl.n	8006808 <_fwalk_reent+0x24>
 80067fc:	6824      	ldr	r4, [r4, #0]
 80067fe:	2c00      	cmp	r4, #0
 8006800:	d1f7      	bne.n	80067f2 <_fwalk_reent+0xe>
 8006802:	4638      	mov	r0, r7
 8006804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006808:	89ab      	ldrh	r3, [r5, #12]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d907      	bls.n	800681e <_fwalk_reent+0x3a>
 800680e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006812:	3301      	adds	r3, #1
 8006814:	d003      	beq.n	800681e <_fwalk_reent+0x3a>
 8006816:	4629      	mov	r1, r5
 8006818:	4630      	mov	r0, r6
 800681a:	47c0      	blx	r8
 800681c:	4307      	orrs	r7, r0
 800681e:	3568      	adds	r5, #104	; 0x68
 8006820:	e7e9      	b.n	80067f6 <_fwalk_reent+0x12>
	...

08006824 <__libc_init_array>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	4d0d      	ldr	r5, [pc, #52]	; (800685c <__libc_init_array+0x38>)
 8006828:	4c0d      	ldr	r4, [pc, #52]	; (8006860 <__libc_init_array+0x3c>)
 800682a:	1b64      	subs	r4, r4, r5
 800682c:	10a4      	asrs	r4, r4, #2
 800682e:	2600      	movs	r6, #0
 8006830:	42a6      	cmp	r6, r4
 8006832:	d109      	bne.n	8006848 <__libc_init_array+0x24>
 8006834:	4d0b      	ldr	r5, [pc, #44]	; (8006864 <__libc_init_array+0x40>)
 8006836:	4c0c      	ldr	r4, [pc, #48]	; (8006868 <__libc_init_array+0x44>)
 8006838:	f004 fbba 	bl	800afb0 <_init>
 800683c:	1b64      	subs	r4, r4, r5
 800683e:	10a4      	asrs	r4, r4, #2
 8006840:	2600      	movs	r6, #0
 8006842:	42a6      	cmp	r6, r4
 8006844:	d105      	bne.n	8006852 <__libc_init_array+0x2e>
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	f855 3b04 	ldr.w	r3, [r5], #4
 800684c:	4798      	blx	r3
 800684e:	3601      	adds	r6, #1
 8006850:	e7ee      	b.n	8006830 <__libc_init_array+0xc>
 8006852:	f855 3b04 	ldr.w	r3, [r5], #4
 8006856:	4798      	blx	r3
 8006858:	3601      	adds	r6, #1
 800685a:	e7f2      	b.n	8006842 <__libc_init_array+0x1e>
 800685c:	0800b5d4 	.word	0x0800b5d4
 8006860:	0800b5d4 	.word	0x0800b5d4
 8006864:	0800b5d4 	.word	0x0800b5d4
 8006868:	0800b5d8 	.word	0x0800b5d8

0800686c <__retarget_lock_init_recursive>:
 800686c:	4770      	bx	lr

0800686e <__retarget_lock_acquire_recursive>:
 800686e:	4770      	bx	lr

08006870 <__retarget_lock_release_recursive>:
 8006870:	4770      	bx	lr

08006872 <memcpy>:
 8006872:	440a      	add	r2, r1
 8006874:	4291      	cmp	r1, r2
 8006876:	f100 33ff 	add.w	r3, r0, #4294967295
 800687a:	d100      	bne.n	800687e <memcpy+0xc>
 800687c:	4770      	bx	lr
 800687e:	b510      	push	{r4, lr}
 8006880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006888:	4291      	cmp	r1, r2
 800688a:	d1f9      	bne.n	8006880 <memcpy+0xe>
 800688c:	bd10      	pop	{r4, pc}

0800688e <memset>:
 800688e:	4402      	add	r2, r0
 8006890:	4603      	mov	r3, r0
 8006892:	4293      	cmp	r3, r2
 8006894:	d100      	bne.n	8006898 <memset+0xa>
 8006896:	4770      	bx	lr
 8006898:	f803 1b01 	strb.w	r1, [r3], #1
 800689c:	e7f9      	b.n	8006892 <memset+0x4>
	...

080068a0 <_malloc_r>:
 80068a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a2:	1ccd      	adds	r5, r1, #3
 80068a4:	f025 0503 	bic.w	r5, r5, #3
 80068a8:	3508      	adds	r5, #8
 80068aa:	2d0c      	cmp	r5, #12
 80068ac:	bf38      	it	cc
 80068ae:	250c      	movcc	r5, #12
 80068b0:	2d00      	cmp	r5, #0
 80068b2:	4606      	mov	r6, r0
 80068b4:	db01      	blt.n	80068ba <_malloc_r+0x1a>
 80068b6:	42a9      	cmp	r1, r5
 80068b8:	d903      	bls.n	80068c2 <_malloc_r+0x22>
 80068ba:	230c      	movs	r3, #12
 80068bc:	6033      	str	r3, [r6, #0]
 80068be:	2000      	movs	r0, #0
 80068c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c2:	f003 f953 	bl	8009b6c <__malloc_lock>
 80068c6:	4921      	ldr	r1, [pc, #132]	; (800694c <_malloc_r+0xac>)
 80068c8:	680a      	ldr	r2, [r1, #0]
 80068ca:	4614      	mov	r4, r2
 80068cc:	b99c      	cbnz	r4, 80068f6 <_malloc_r+0x56>
 80068ce:	4f20      	ldr	r7, [pc, #128]	; (8006950 <_malloc_r+0xb0>)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	b923      	cbnz	r3, 80068de <_malloc_r+0x3e>
 80068d4:	4621      	mov	r1, r4
 80068d6:	4630      	mov	r0, r6
 80068d8:	f000 ff20 	bl	800771c <_sbrk_r>
 80068dc:	6038      	str	r0, [r7, #0]
 80068de:	4629      	mov	r1, r5
 80068e0:	4630      	mov	r0, r6
 80068e2:	f000 ff1b 	bl	800771c <_sbrk_r>
 80068e6:	1c43      	adds	r3, r0, #1
 80068e8:	d123      	bne.n	8006932 <_malloc_r+0x92>
 80068ea:	230c      	movs	r3, #12
 80068ec:	6033      	str	r3, [r6, #0]
 80068ee:	4630      	mov	r0, r6
 80068f0:	f003 f942 	bl	8009b78 <__malloc_unlock>
 80068f4:	e7e3      	b.n	80068be <_malloc_r+0x1e>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	1b5b      	subs	r3, r3, r5
 80068fa:	d417      	bmi.n	800692c <_malloc_r+0x8c>
 80068fc:	2b0b      	cmp	r3, #11
 80068fe:	d903      	bls.n	8006908 <_malloc_r+0x68>
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	441c      	add	r4, r3
 8006904:	6025      	str	r5, [r4, #0]
 8006906:	e004      	b.n	8006912 <_malloc_r+0x72>
 8006908:	6863      	ldr	r3, [r4, #4]
 800690a:	42a2      	cmp	r2, r4
 800690c:	bf0c      	ite	eq
 800690e:	600b      	streq	r3, [r1, #0]
 8006910:	6053      	strne	r3, [r2, #4]
 8006912:	4630      	mov	r0, r6
 8006914:	f003 f930 	bl	8009b78 <__malloc_unlock>
 8006918:	f104 000b 	add.w	r0, r4, #11
 800691c:	1d23      	adds	r3, r4, #4
 800691e:	f020 0007 	bic.w	r0, r0, #7
 8006922:	1ac2      	subs	r2, r0, r3
 8006924:	d0cc      	beq.n	80068c0 <_malloc_r+0x20>
 8006926:	1a1b      	subs	r3, r3, r0
 8006928:	50a3      	str	r3, [r4, r2]
 800692a:	e7c9      	b.n	80068c0 <_malloc_r+0x20>
 800692c:	4622      	mov	r2, r4
 800692e:	6864      	ldr	r4, [r4, #4]
 8006930:	e7cc      	b.n	80068cc <_malloc_r+0x2c>
 8006932:	1cc4      	adds	r4, r0, #3
 8006934:	f024 0403 	bic.w	r4, r4, #3
 8006938:	42a0      	cmp	r0, r4
 800693a:	d0e3      	beq.n	8006904 <_malloc_r+0x64>
 800693c:	1a21      	subs	r1, r4, r0
 800693e:	4630      	mov	r0, r6
 8006940:	f000 feec 	bl	800771c <_sbrk_r>
 8006944:	3001      	adds	r0, #1
 8006946:	d1dd      	bne.n	8006904 <_malloc_r+0x64>
 8006948:	e7cf      	b.n	80068ea <_malloc_r+0x4a>
 800694a:	bf00      	nop
 800694c:	20004c14 	.word	0x20004c14
 8006950:	20004c18 	.word	0x20004c18

08006954 <__cvt>:
 8006954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006958:	ec55 4b10 	vmov	r4, r5, d0
 800695c:	2d00      	cmp	r5, #0
 800695e:	460e      	mov	r6, r1
 8006960:	4619      	mov	r1, r3
 8006962:	462b      	mov	r3, r5
 8006964:	bfbb      	ittet	lt
 8006966:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800696a:	461d      	movlt	r5, r3
 800696c:	2300      	movge	r3, #0
 800696e:	232d      	movlt	r3, #45	; 0x2d
 8006970:	700b      	strb	r3, [r1, #0]
 8006972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006974:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006978:	4691      	mov	r9, r2
 800697a:	f023 0820 	bic.w	r8, r3, #32
 800697e:	bfbc      	itt	lt
 8006980:	4622      	movlt	r2, r4
 8006982:	4614      	movlt	r4, r2
 8006984:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006988:	d005      	beq.n	8006996 <__cvt+0x42>
 800698a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800698e:	d100      	bne.n	8006992 <__cvt+0x3e>
 8006990:	3601      	adds	r6, #1
 8006992:	2102      	movs	r1, #2
 8006994:	e000      	b.n	8006998 <__cvt+0x44>
 8006996:	2103      	movs	r1, #3
 8006998:	ab03      	add	r3, sp, #12
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	ab02      	add	r3, sp, #8
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	ec45 4b10 	vmov	d0, r4, r5
 80069a4:	4653      	mov	r3, sl
 80069a6:	4632      	mov	r2, r6
 80069a8:	f001 fe92 	bl	80086d0 <_dtoa_r>
 80069ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80069b0:	4607      	mov	r7, r0
 80069b2:	d102      	bne.n	80069ba <__cvt+0x66>
 80069b4:	f019 0f01 	tst.w	r9, #1
 80069b8:	d022      	beq.n	8006a00 <__cvt+0xac>
 80069ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069be:	eb07 0906 	add.w	r9, r7, r6
 80069c2:	d110      	bne.n	80069e6 <__cvt+0x92>
 80069c4:	783b      	ldrb	r3, [r7, #0]
 80069c6:	2b30      	cmp	r3, #48	; 0x30
 80069c8:	d10a      	bne.n	80069e0 <__cvt+0x8c>
 80069ca:	2200      	movs	r2, #0
 80069cc:	2300      	movs	r3, #0
 80069ce:	4620      	mov	r0, r4
 80069d0:	4629      	mov	r1, r5
 80069d2:	f7fa f899 	bl	8000b08 <__aeabi_dcmpeq>
 80069d6:	b918      	cbnz	r0, 80069e0 <__cvt+0x8c>
 80069d8:	f1c6 0601 	rsb	r6, r6, #1
 80069dc:	f8ca 6000 	str.w	r6, [sl]
 80069e0:	f8da 3000 	ldr.w	r3, [sl]
 80069e4:	4499      	add	r9, r3
 80069e6:	2200      	movs	r2, #0
 80069e8:	2300      	movs	r3, #0
 80069ea:	4620      	mov	r0, r4
 80069ec:	4629      	mov	r1, r5
 80069ee:	f7fa f88b 	bl	8000b08 <__aeabi_dcmpeq>
 80069f2:	b108      	cbz	r0, 80069f8 <__cvt+0xa4>
 80069f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80069f8:	2230      	movs	r2, #48	; 0x30
 80069fa:	9b03      	ldr	r3, [sp, #12]
 80069fc:	454b      	cmp	r3, r9
 80069fe:	d307      	bcc.n	8006a10 <__cvt+0xbc>
 8006a00:	9b03      	ldr	r3, [sp, #12]
 8006a02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a04:	1bdb      	subs	r3, r3, r7
 8006a06:	4638      	mov	r0, r7
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	b004      	add	sp, #16
 8006a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a10:	1c59      	adds	r1, r3, #1
 8006a12:	9103      	str	r1, [sp, #12]
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	e7f0      	b.n	80069fa <__cvt+0xa6>

08006a18 <__exponent>:
 8006a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	bfb8      	it	lt
 8006a20:	4249      	neglt	r1, r1
 8006a22:	f803 2b02 	strb.w	r2, [r3], #2
 8006a26:	bfb4      	ite	lt
 8006a28:	222d      	movlt	r2, #45	; 0x2d
 8006a2a:	222b      	movge	r2, #43	; 0x2b
 8006a2c:	2909      	cmp	r1, #9
 8006a2e:	7042      	strb	r2, [r0, #1]
 8006a30:	dd2a      	ble.n	8006a88 <__exponent+0x70>
 8006a32:	f10d 0407 	add.w	r4, sp, #7
 8006a36:	46a4      	mov	ip, r4
 8006a38:	270a      	movs	r7, #10
 8006a3a:	46a6      	mov	lr, r4
 8006a3c:	460a      	mov	r2, r1
 8006a3e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a42:	fb07 1516 	mls	r5, r7, r6, r1
 8006a46:	3530      	adds	r5, #48	; 0x30
 8006a48:	2a63      	cmp	r2, #99	; 0x63
 8006a4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006a4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006a52:	4631      	mov	r1, r6
 8006a54:	dcf1      	bgt.n	8006a3a <__exponent+0x22>
 8006a56:	3130      	adds	r1, #48	; 0x30
 8006a58:	f1ae 0502 	sub.w	r5, lr, #2
 8006a5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a60:	1c44      	adds	r4, r0, #1
 8006a62:	4629      	mov	r1, r5
 8006a64:	4561      	cmp	r1, ip
 8006a66:	d30a      	bcc.n	8006a7e <__exponent+0x66>
 8006a68:	f10d 0209 	add.w	r2, sp, #9
 8006a6c:	eba2 020e 	sub.w	r2, r2, lr
 8006a70:	4565      	cmp	r5, ip
 8006a72:	bf88      	it	hi
 8006a74:	2200      	movhi	r2, #0
 8006a76:	4413      	add	r3, r2
 8006a78:	1a18      	subs	r0, r3, r0
 8006a7a:	b003      	add	sp, #12
 8006a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a82:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a86:	e7ed      	b.n	8006a64 <__exponent+0x4c>
 8006a88:	2330      	movs	r3, #48	; 0x30
 8006a8a:	3130      	adds	r1, #48	; 0x30
 8006a8c:	7083      	strb	r3, [r0, #2]
 8006a8e:	70c1      	strb	r1, [r0, #3]
 8006a90:	1d03      	adds	r3, r0, #4
 8006a92:	e7f1      	b.n	8006a78 <__exponent+0x60>

08006a94 <_printf_float>:
 8006a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	ed2d 8b02 	vpush	{d8}
 8006a9c:	b08d      	sub	sp, #52	; 0x34
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006aa4:	4616      	mov	r6, r2
 8006aa6:	461f      	mov	r7, r3
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	f003 f82f 	bl	8009b0c <_localeconv_r>
 8006aae:	f8d0 a000 	ldr.w	sl, [r0]
 8006ab2:	4650      	mov	r0, sl
 8006ab4:	f7f9 fbac 	bl	8000210 <strlen>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	930a      	str	r3, [sp, #40]	; 0x28
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	9305      	str	r3, [sp, #20]
 8006ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ac4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ac8:	3307      	adds	r3, #7
 8006aca:	f023 0307 	bic.w	r3, r3, #7
 8006ace:	f103 0208 	add.w	r2, r3, #8
 8006ad2:	f8c8 2000 	str.w	r2, [r8]
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ade:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006ae2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ae6:	9307      	str	r3, [sp, #28]
 8006ae8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006aec:	ee08 0a10 	vmov	s16, r0
 8006af0:	4b9f      	ldr	r3, [pc, #636]	; (8006d70 <_printf_float+0x2dc>)
 8006af2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006af6:	f04f 32ff 	mov.w	r2, #4294967295
 8006afa:	f7fa f837 	bl	8000b6c <__aeabi_dcmpun>
 8006afe:	bb88      	cbnz	r0, 8006b64 <_printf_float+0xd0>
 8006b00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b04:	4b9a      	ldr	r3, [pc, #616]	; (8006d70 <_printf_float+0x2dc>)
 8006b06:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0a:	f7fa f811 	bl	8000b30 <__aeabi_dcmple>
 8006b0e:	bb48      	cbnz	r0, 8006b64 <_printf_float+0xd0>
 8006b10:	2200      	movs	r2, #0
 8006b12:	2300      	movs	r3, #0
 8006b14:	4640      	mov	r0, r8
 8006b16:	4649      	mov	r1, r9
 8006b18:	f7fa f800 	bl	8000b1c <__aeabi_dcmplt>
 8006b1c:	b110      	cbz	r0, 8006b24 <_printf_float+0x90>
 8006b1e:	232d      	movs	r3, #45	; 0x2d
 8006b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b24:	4b93      	ldr	r3, [pc, #588]	; (8006d74 <_printf_float+0x2e0>)
 8006b26:	4894      	ldr	r0, [pc, #592]	; (8006d78 <_printf_float+0x2e4>)
 8006b28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b2c:	bf94      	ite	ls
 8006b2e:	4698      	movls	r8, r3
 8006b30:	4680      	movhi	r8, r0
 8006b32:	2303      	movs	r3, #3
 8006b34:	6123      	str	r3, [r4, #16]
 8006b36:	9b05      	ldr	r3, [sp, #20]
 8006b38:	f023 0204 	bic.w	r2, r3, #4
 8006b3c:	6022      	str	r2, [r4, #0]
 8006b3e:	f04f 0900 	mov.w	r9, #0
 8006b42:	9700      	str	r7, [sp, #0]
 8006b44:	4633      	mov	r3, r6
 8006b46:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f000 f9d8 	bl	8006f00 <_printf_common>
 8006b50:	3001      	adds	r0, #1
 8006b52:	f040 8090 	bne.w	8006c76 <_printf_float+0x1e2>
 8006b56:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5a:	b00d      	add	sp, #52	; 0x34
 8006b5c:	ecbd 8b02 	vpop	{d8}
 8006b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b64:	4642      	mov	r2, r8
 8006b66:	464b      	mov	r3, r9
 8006b68:	4640      	mov	r0, r8
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	f7f9 fffe 	bl	8000b6c <__aeabi_dcmpun>
 8006b70:	b140      	cbz	r0, 8006b84 <_printf_float+0xf0>
 8006b72:	464b      	mov	r3, r9
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	bfbc      	itt	lt
 8006b78:	232d      	movlt	r3, #45	; 0x2d
 8006b7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b7e:	487f      	ldr	r0, [pc, #508]	; (8006d7c <_printf_float+0x2e8>)
 8006b80:	4b7f      	ldr	r3, [pc, #508]	; (8006d80 <_printf_float+0x2ec>)
 8006b82:	e7d1      	b.n	8006b28 <_printf_float+0x94>
 8006b84:	6863      	ldr	r3, [r4, #4]
 8006b86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b8a:	9206      	str	r2, [sp, #24]
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	d13f      	bne.n	8006c10 <_printf_float+0x17c>
 8006b90:	2306      	movs	r3, #6
 8006b92:	6063      	str	r3, [r4, #4]
 8006b94:	9b05      	ldr	r3, [sp, #20]
 8006b96:	6861      	ldr	r1, [r4, #4]
 8006b98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	9303      	str	r3, [sp, #12]
 8006ba0:	ab0a      	add	r3, sp, #40	; 0x28
 8006ba2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ba6:	ab09      	add	r3, sp, #36	; 0x24
 8006ba8:	ec49 8b10 	vmov	d0, r8, r9
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	6022      	str	r2, [r4, #0]
 8006bb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f7ff fecd 	bl	8006954 <__cvt>
 8006bba:	9b06      	ldr	r3, [sp, #24]
 8006bbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bbe:	2b47      	cmp	r3, #71	; 0x47
 8006bc0:	4680      	mov	r8, r0
 8006bc2:	d108      	bne.n	8006bd6 <_printf_float+0x142>
 8006bc4:	1cc8      	adds	r0, r1, #3
 8006bc6:	db02      	blt.n	8006bce <_printf_float+0x13a>
 8006bc8:	6863      	ldr	r3, [r4, #4]
 8006bca:	4299      	cmp	r1, r3
 8006bcc:	dd41      	ble.n	8006c52 <_printf_float+0x1be>
 8006bce:	f1ab 0b02 	sub.w	fp, fp, #2
 8006bd2:	fa5f fb8b 	uxtb.w	fp, fp
 8006bd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006bda:	d820      	bhi.n	8006c1e <_printf_float+0x18a>
 8006bdc:	3901      	subs	r1, #1
 8006bde:	465a      	mov	r2, fp
 8006be0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006be4:	9109      	str	r1, [sp, #36]	; 0x24
 8006be6:	f7ff ff17 	bl	8006a18 <__exponent>
 8006bea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bec:	1813      	adds	r3, r2, r0
 8006bee:	2a01      	cmp	r2, #1
 8006bf0:	4681      	mov	r9, r0
 8006bf2:	6123      	str	r3, [r4, #16]
 8006bf4:	dc02      	bgt.n	8006bfc <_printf_float+0x168>
 8006bf6:	6822      	ldr	r2, [r4, #0]
 8006bf8:	07d2      	lsls	r2, r2, #31
 8006bfa:	d501      	bpl.n	8006c00 <_printf_float+0x16c>
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	6123      	str	r3, [r4, #16]
 8006c00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d09c      	beq.n	8006b42 <_printf_float+0xae>
 8006c08:	232d      	movs	r3, #45	; 0x2d
 8006c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c0e:	e798      	b.n	8006b42 <_printf_float+0xae>
 8006c10:	9a06      	ldr	r2, [sp, #24]
 8006c12:	2a47      	cmp	r2, #71	; 0x47
 8006c14:	d1be      	bne.n	8006b94 <_printf_float+0x100>
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1bc      	bne.n	8006b94 <_printf_float+0x100>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e7b9      	b.n	8006b92 <_printf_float+0xfe>
 8006c1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c22:	d118      	bne.n	8006c56 <_printf_float+0x1c2>
 8006c24:	2900      	cmp	r1, #0
 8006c26:	6863      	ldr	r3, [r4, #4]
 8006c28:	dd0b      	ble.n	8006c42 <_printf_float+0x1ae>
 8006c2a:	6121      	str	r1, [r4, #16]
 8006c2c:	b913      	cbnz	r3, 8006c34 <_printf_float+0x1a0>
 8006c2e:	6822      	ldr	r2, [r4, #0]
 8006c30:	07d0      	lsls	r0, r2, #31
 8006c32:	d502      	bpl.n	8006c3a <_printf_float+0x1a6>
 8006c34:	3301      	adds	r3, #1
 8006c36:	440b      	add	r3, r1
 8006c38:	6123      	str	r3, [r4, #16]
 8006c3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c3c:	f04f 0900 	mov.w	r9, #0
 8006c40:	e7de      	b.n	8006c00 <_printf_float+0x16c>
 8006c42:	b913      	cbnz	r3, 8006c4a <_printf_float+0x1b6>
 8006c44:	6822      	ldr	r2, [r4, #0]
 8006c46:	07d2      	lsls	r2, r2, #31
 8006c48:	d501      	bpl.n	8006c4e <_printf_float+0x1ba>
 8006c4a:	3302      	adds	r3, #2
 8006c4c:	e7f4      	b.n	8006c38 <_printf_float+0x1a4>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e7f2      	b.n	8006c38 <_printf_float+0x1a4>
 8006c52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c58:	4299      	cmp	r1, r3
 8006c5a:	db05      	blt.n	8006c68 <_printf_float+0x1d4>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	6121      	str	r1, [r4, #16]
 8006c60:	07d8      	lsls	r0, r3, #31
 8006c62:	d5ea      	bpl.n	8006c3a <_printf_float+0x1a6>
 8006c64:	1c4b      	adds	r3, r1, #1
 8006c66:	e7e7      	b.n	8006c38 <_printf_float+0x1a4>
 8006c68:	2900      	cmp	r1, #0
 8006c6a:	bfd4      	ite	le
 8006c6c:	f1c1 0202 	rsble	r2, r1, #2
 8006c70:	2201      	movgt	r2, #1
 8006c72:	4413      	add	r3, r2
 8006c74:	e7e0      	b.n	8006c38 <_printf_float+0x1a4>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	055a      	lsls	r2, r3, #21
 8006c7a:	d407      	bmi.n	8006c8c <_printf_float+0x1f8>
 8006c7c:	6923      	ldr	r3, [r4, #16]
 8006c7e:	4642      	mov	r2, r8
 8006c80:	4631      	mov	r1, r6
 8006c82:	4628      	mov	r0, r5
 8006c84:	47b8      	blx	r7
 8006c86:	3001      	adds	r0, #1
 8006c88:	d12c      	bne.n	8006ce4 <_printf_float+0x250>
 8006c8a:	e764      	b.n	8006b56 <_printf_float+0xc2>
 8006c8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c90:	f240 80e0 	bls.w	8006e54 <_printf_float+0x3c0>
 8006c94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f7f9 ff34 	bl	8000b08 <__aeabi_dcmpeq>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d034      	beq.n	8006d0e <_printf_float+0x27a>
 8006ca4:	4a37      	ldr	r2, [pc, #220]	; (8006d84 <_printf_float+0x2f0>)
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4631      	mov	r1, r6
 8006caa:	4628      	mov	r0, r5
 8006cac:	47b8      	blx	r7
 8006cae:	3001      	adds	r0, #1
 8006cb0:	f43f af51 	beq.w	8006b56 <_printf_float+0xc2>
 8006cb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	db02      	blt.n	8006cc2 <_printf_float+0x22e>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	07d8      	lsls	r0, r3, #31
 8006cc0:	d510      	bpl.n	8006ce4 <_printf_float+0x250>
 8006cc2:	ee18 3a10 	vmov	r3, s16
 8006cc6:	4652      	mov	r2, sl
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f43f af41 	beq.w	8006b56 <_printf_float+0xc2>
 8006cd4:	f04f 0800 	mov.w	r8, #0
 8006cd8:	f104 091a 	add.w	r9, r4, #26
 8006cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	4543      	cmp	r3, r8
 8006ce2:	dc09      	bgt.n	8006cf8 <_printf_float+0x264>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	079b      	lsls	r3, r3, #30
 8006ce8:	f100 8105 	bmi.w	8006ef6 <_printf_float+0x462>
 8006cec:	68e0      	ldr	r0, [r4, #12]
 8006cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cf0:	4298      	cmp	r0, r3
 8006cf2:	bfb8      	it	lt
 8006cf4:	4618      	movlt	r0, r3
 8006cf6:	e730      	b.n	8006b5a <_printf_float+0xc6>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	464a      	mov	r2, r9
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	4628      	mov	r0, r5
 8006d00:	47b8      	blx	r7
 8006d02:	3001      	adds	r0, #1
 8006d04:	f43f af27 	beq.w	8006b56 <_printf_float+0xc2>
 8006d08:	f108 0801 	add.w	r8, r8, #1
 8006d0c:	e7e6      	b.n	8006cdc <_printf_float+0x248>
 8006d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	dc39      	bgt.n	8006d88 <_printf_float+0x2f4>
 8006d14:	4a1b      	ldr	r2, [pc, #108]	; (8006d84 <_printf_float+0x2f0>)
 8006d16:	2301      	movs	r3, #1
 8006d18:	4631      	mov	r1, r6
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	47b8      	blx	r7
 8006d1e:	3001      	adds	r0, #1
 8006d20:	f43f af19 	beq.w	8006b56 <_printf_float+0xc2>
 8006d24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	d102      	bne.n	8006d32 <_printf_float+0x29e>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	07d9      	lsls	r1, r3, #31
 8006d30:	d5d8      	bpl.n	8006ce4 <_printf_float+0x250>
 8006d32:	ee18 3a10 	vmov	r3, s16
 8006d36:	4652      	mov	r2, sl
 8006d38:	4631      	mov	r1, r6
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	47b8      	blx	r7
 8006d3e:	3001      	adds	r0, #1
 8006d40:	f43f af09 	beq.w	8006b56 <_printf_float+0xc2>
 8006d44:	f04f 0900 	mov.w	r9, #0
 8006d48:	f104 0a1a 	add.w	sl, r4, #26
 8006d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d4e:	425b      	negs	r3, r3
 8006d50:	454b      	cmp	r3, r9
 8006d52:	dc01      	bgt.n	8006d58 <_printf_float+0x2c4>
 8006d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d56:	e792      	b.n	8006c7e <_printf_float+0x1ea>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	4652      	mov	r2, sl
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	4628      	mov	r0, r5
 8006d60:	47b8      	blx	r7
 8006d62:	3001      	adds	r0, #1
 8006d64:	f43f aef7 	beq.w	8006b56 <_printf_float+0xc2>
 8006d68:	f109 0901 	add.w	r9, r9, #1
 8006d6c:	e7ee      	b.n	8006d4c <_printf_float+0x2b8>
 8006d6e:	bf00      	nop
 8006d70:	7fefffff 	.word	0x7fefffff
 8006d74:	0800b17c 	.word	0x0800b17c
 8006d78:	0800b180 	.word	0x0800b180
 8006d7c:	0800b188 	.word	0x0800b188
 8006d80:	0800b184 	.word	0x0800b184
 8006d84:	0800b18c 	.word	0x0800b18c
 8006d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	bfa8      	it	ge
 8006d90:	461a      	movge	r2, r3
 8006d92:	2a00      	cmp	r2, #0
 8006d94:	4691      	mov	r9, r2
 8006d96:	dc37      	bgt.n	8006e08 <_printf_float+0x374>
 8006d98:	f04f 0b00 	mov.w	fp, #0
 8006d9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006da0:	f104 021a 	add.w	r2, r4, #26
 8006da4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006da6:	9305      	str	r3, [sp, #20]
 8006da8:	eba3 0309 	sub.w	r3, r3, r9
 8006dac:	455b      	cmp	r3, fp
 8006dae:	dc33      	bgt.n	8006e18 <_printf_float+0x384>
 8006db0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006db4:	429a      	cmp	r2, r3
 8006db6:	db3b      	blt.n	8006e30 <_printf_float+0x39c>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	07da      	lsls	r2, r3, #31
 8006dbc:	d438      	bmi.n	8006e30 <_printf_float+0x39c>
 8006dbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dc0:	9b05      	ldr	r3, [sp, #20]
 8006dc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	eba2 0901 	sub.w	r9, r2, r1
 8006dca:	4599      	cmp	r9, r3
 8006dcc:	bfa8      	it	ge
 8006dce:	4699      	movge	r9, r3
 8006dd0:	f1b9 0f00 	cmp.w	r9, #0
 8006dd4:	dc35      	bgt.n	8006e42 <_printf_float+0x3ae>
 8006dd6:	f04f 0800 	mov.w	r8, #0
 8006dda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dde:	f104 0a1a 	add.w	sl, r4, #26
 8006de2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006de6:	1a9b      	subs	r3, r3, r2
 8006de8:	eba3 0309 	sub.w	r3, r3, r9
 8006dec:	4543      	cmp	r3, r8
 8006dee:	f77f af79 	ble.w	8006ce4 <_printf_float+0x250>
 8006df2:	2301      	movs	r3, #1
 8006df4:	4652      	mov	r2, sl
 8006df6:	4631      	mov	r1, r6
 8006df8:	4628      	mov	r0, r5
 8006dfa:	47b8      	blx	r7
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	f43f aeaa 	beq.w	8006b56 <_printf_float+0xc2>
 8006e02:	f108 0801 	add.w	r8, r8, #1
 8006e06:	e7ec      	b.n	8006de2 <_printf_float+0x34e>
 8006e08:	4613      	mov	r3, r2
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4642      	mov	r2, r8
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b8      	blx	r7
 8006e12:	3001      	adds	r0, #1
 8006e14:	d1c0      	bne.n	8006d98 <_printf_float+0x304>
 8006e16:	e69e      	b.n	8006b56 <_printf_float+0xc2>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	9205      	str	r2, [sp, #20]
 8006e20:	47b8      	blx	r7
 8006e22:	3001      	adds	r0, #1
 8006e24:	f43f ae97 	beq.w	8006b56 <_printf_float+0xc2>
 8006e28:	9a05      	ldr	r2, [sp, #20]
 8006e2a:	f10b 0b01 	add.w	fp, fp, #1
 8006e2e:	e7b9      	b.n	8006da4 <_printf_float+0x310>
 8006e30:	ee18 3a10 	vmov	r3, s16
 8006e34:	4652      	mov	r2, sl
 8006e36:	4631      	mov	r1, r6
 8006e38:	4628      	mov	r0, r5
 8006e3a:	47b8      	blx	r7
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d1be      	bne.n	8006dbe <_printf_float+0x32a>
 8006e40:	e689      	b.n	8006b56 <_printf_float+0xc2>
 8006e42:	9a05      	ldr	r2, [sp, #20]
 8006e44:	464b      	mov	r3, r9
 8006e46:	4442      	add	r2, r8
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b8      	blx	r7
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d1c1      	bne.n	8006dd6 <_printf_float+0x342>
 8006e52:	e680      	b.n	8006b56 <_printf_float+0xc2>
 8006e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e56:	2a01      	cmp	r2, #1
 8006e58:	dc01      	bgt.n	8006e5e <_printf_float+0x3ca>
 8006e5a:	07db      	lsls	r3, r3, #31
 8006e5c:	d538      	bpl.n	8006ed0 <_printf_float+0x43c>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	4642      	mov	r2, r8
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b8      	blx	r7
 8006e68:	3001      	adds	r0, #1
 8006e6a:	f43f ae74 	beq.w	8006b56 <_printf_float+0xc2>
 8006e6e:	ee18 3a10 	vmov	r3, s16
 8006e72:	4652      	mov	r2, sl
 8006e74:	4631      	mov	r1, r6
 8006e76:	4628      	mov	r0, r5
 8006e78:	47b8      	blx	r7
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	f43f ae6b 	beq.w	8006b56 <_printf_float+0xc2>
 8006e80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e84:	2200      	movs	r2, #0
 8006e86:	2300      	movs	r3, #0
 8006e88:	f7f9 fe3e 	bl	8000b08 <__aeabi_dcmpeq>
 8006e8c:	b9d8      	cbnz	r0, 8006ec6 <_printf_float+0x432>
 8006e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e90:	f108 0201 	add.w	r2, r8, #1
 8006e94:	3b01      	subs	r3, #1
 8006e96:	4631      	mov	r1, r6
 8006e98:	4628      	mov	r0, r5
 8006e9a:	47b8      	blx	r7
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	d10e      	bne.n	8006ebe <_printf_float+0x42a>
 8006ea0:	e659      	b.n	8006b56 <_printf_float+0xc2>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	4652      	mov	r2, sl
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b8      	blx	r7
 8006eac:	3001      	adds	r0, #1
 8006eae:	f43f ae52 	beq.w	8006b56 <_printf_float+0xc2>
 8006eb2:	f108 0801 	add.w	r8, r8, #1
 8006eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	4543      	cmp	r3, r8
 8006ebc:	dcf1      	bgt.n	8006ea2 <_printf_float+0x40e>
 8006ebe:	464b      	mov	r3, r9
 8006ec0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ec4:	e6dc      	b.n	8006c80 <_printf_float+0x1ec>
 8006ec6:	f04f 0800 	mov.w	r8, #0
 8006eca:	f104 0a1a 	add.w	sl, r4, #26
 8006ece:	e7f2      	b.n	8006eb6 <_printf_float+0x422>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	4642      	mov	r2, r8
 8006ed4:	e7df      	b.n	8006e96 <_printf_float+0x402>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	464a      	mov	r2, r9
 8006eda:	4631      	mov	r1, r6
 8006edc:	4628      	mov	r0, r5
 8006ede:	47b8      	blx	r7
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	f43f ae38 	beq.w	8006b56 <_printf_float+0xc2>
 8006ee6:	f108 0801 	add.w	r8, r8, #1
 8006eea:	68e3      	ldr	r3, [r4, #12]
 8006eec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006eee:	1a5b      	subs	r3, r3, r1
 8006ef0:	4543      	cmp	r3, r8
 8006ef2:	dcf0      	bgt.n	8006ed6 <_printf_float+0x442>
 8006ef4:	e6fa      	b.n	8006cec <_printf_float+0x258>
 8006ef6:	f04f 0800 	mov.w	r8, #0
 8006efa:	f104 0919 	add.w	r9, r4, #25
 8006efe:	e7f4      	b.n	8006eea <_printf_float+0x456>

08006f00 <_printf_common>:
 8006f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f04:	4616      	mov	r6, r2
 8006f06:	4699      	mov	r9, r3
 8006f08:	688a      	ldr	r2, [r1, #8]
 8006f0a:	690b      	ldr	r3, [r1, #16]
 8006f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f10:	4293      	cmp	r3, r2
 8006f12:	bfb8      	it	lt
 8006f14:	4613      	movlt	r3, r2
 8006f16:	6033      	str	r3, [r6, #0]
 8006f18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f1c:	4607      	mov	r7, r0
 8006f1e:	460c      	mov	r4, r1
 8006f20:	b10a      	cbz	r2, 8006f26 <_printf_common+0x26>
 8006f22:	3301      	adds	r3, #1
 8006f24:	6033      	str	r3, [r6, #0]
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	0699      	lsls	r1, r3, #26
 8006f2a:	bf42      	ittt	mi
 8006f2c:	6833      	ldrmi	r3, [r6, #0]
 8006f2e:	3302      	addmi	r3, #2
 8006f30:	6033      	strmi	r3, [r6, #0]
 8006f32:	6825      	ldr	r5, [r4, #0]
 8006f34:	f015 0506 	ands.w	r5, r5, #6
 8006f38:	d106      	bne.n	8006f48 <_printf_common+0x48>
 8006f3a:	f104 0a19 	add.w	sl, r4, #25
 8006f3e:	68e3      	ldr	r3, [r4, #12]
 8006f40:	6832      	ldr	r2, [r6, #0]
 8006f42:	1a9b      	subs	r3, r3, r2
 8006f44:	42ab      	cmp	r3, r5
 8006f46:	dc26      	bgt.n	8006f96 <_printf_common+0x96>
 8006f48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f4c:	1e13      	subs	r3, r2, #0
 8006f4e:	6822      	ldr	r2, [r4, #0]
 8006f50:	bf18      	it	ne
 8006f52:	2301      	movne	r3, #1
 8006f54:	0692      	lsls	r2, r2, #26
 8006f56:	d42b      	bmi.n	8006fb0 <_printf_common+0xb0>
 8006f58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	4638      	mov	r0, r7
 8006f60:	47c0      	blx	r8
 8006f62:	3001      	adds	r0, #1
 8006f64:	d01e      	beq.n	8006fa4 <_printf_common+0xa4>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	68e5      	ldr	r5, [r4, #12]
 8006f6a:	6832      	ldr	r2, [r6, #0]
 8006f6c:	f003 0306 	and.w	r3, r3, #6
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	bf08      	it	eq
 8006f74:	1aad      	subeq	r5, r5, r2
 8006f76:	68a3      	ldr	r3, [r4, #8]
 8006f78:	6922      	ldr	r2, [r4, #16]
 8006f7a:	bf0c      	ite	eq
 8006f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f80:	2500      	movne	r5, #0
 8006f82:	4293      	cmp	r3, r2
 8006f84:	bfc4      	itt	gt
 8006f86:	1a9b      	subgt	r3, r3, r2
 8006f88:	18ed      	addgt	r5, r5, r3
 8006f8a:	2600      	movs	r6, #0
 8006f8c:	341a      	adds	r4, #26
 8006f8e:	42b5      	cmp	r5, r6
 8006f90:	d11a      	bne.n	8006fc8 <_printf_common+0xc8>
 8006f92:	2000      	movs	r0, #0
 8006f94:	e008      	b.n	8006fa8 <_printf_common+0xa8>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4652      	mov	r2, sl
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	4638      	mov	r0, r7
 8006f9e:	47c0      	blx	r8
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d103      	bne.n	8006fac <_printf_common+0xac>
 8006fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fac:	3501      	adds	r5, #1
 8006fae:	e7c6      	b.n	8006f3e <_printf_common+0x3e>
 8006fb0:	18e1      	adds	r1, r4, r3
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	2030      	movs	r0, #48	; 0x30
 8006fb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fba:	4422      	add	r2, r4
 8006fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	e7c7      	b.n	8006f58 <_printf_common+0x58>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	4622      	mov	r2, r4
 8006fcc:	4649      	mov	r1, r9
 8006fce:	4638      	mov	r0, r7
 8006fd0:	47c0      	blx	r8
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	d0e6      	beq.n	8006fa4 <_printf_common+0xa4>
 8006fd6:	3601      	adds	r6, #1
 8006fd8:	e7d9      	b.n	8006f8e <_printf_common+0x8e>
	...

08006fdc <_printf_i>:
 8006fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	4691      	mov	r9, r2
 8006fe4:	7e27      	ldrb	r7, [r4, #24]
 8006fe6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006fe8:	2f78      	cmp	r7, #120	; 0x78
 8006fea:	4680      	mov	r8, r0
 8006fec:	469a      	mov	sl, r3
 8006fee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ff2:	d807      	bhi.n	8007004 <_printf_i+0x28>
 8006ff4:	2f62      	cmp	r7, #98	; 0x62
 8006ff6:	d80a      	bhi.n	800700e <_printf_i+0x32>
 8006ff8:	2f00      	cmp	r7, #0
 8006ffa:	f000 80d8 	beq.w	80071ae <_printf_i+0x1d2>
 8006ffe:	2f58      	cmp	r7, #88	; 0x58
 8007000:	f000 80a3 	beq.w	800714a <_printf_i+0x16e>
 8007004:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800700c:	e03a      	b.n	8007084 <_printf_i+0xa8>
 800700e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007012:	2b15      	cmp	r3, #21
 8007014:	d8f6      	bhi.n	8007004 <_printf_i+0x28>
 8007016:	a001      	add	r0, pc, #4	; (adr r0, 800701c <_printf_i+0x40>)
 8007018:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800701c:	08007075 	.word	0x08007075
 8007020:	08007089 	.word	0x08007089
 8007024:	08007005 	.word	0x08007005
 8007028:	08007005 	.word	0x08007005
 800702c:	08007005 	.word	0x08007005
 8007030:	08007005 	.word	0x08007005
 8007034:	08007089 	.word	0x08007089
 8007038:	08007005 	.word	0x08007005
 800703c:	08007005 	.word	0x08007005
 8007040:	08007005 	.word	0x08007005
 8007044:	08007005 	.word	0x08007005
 8007048:	08007195 	.word	0x08007195
 800704c:	080070b9 	.word	0x080070b9
 8007050:	08007177 	.word	0x08007177
 8007054:	08007005 	.word	0x08007005
 8007058:	08007005 	.word	0x08007005
 800705c:	080071b7 	.word	0x080071b7
 8007060:	08007005 	.word	0x08007005
 8007064:	080070b9 	.word	0x080070b9
 8007068:	08007005 	.word	0x08007005
 800706c:	08007005 	.word	0x08007005
 8007070:	0800717f 	.word	0x0800717f
 8007074:	680b      	ldr	r3, [r1, #0]
 8007076:	1d1a      	adds	r2, r3, #4
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	600a      	str	r2, [r1, #0]
 800707c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007084:	2301      	movs	r3, #1
 8007086:	e0a3      	b.n	80071d0 <_printf_i+0x1f4>
 8007088:	6825      	ldr	r5, [r4, #0]
 800708a:	6808      	ldr	r0, [r1, #0]
 800708c:	062e      	lsls	r6, r5, #24
 800708e:	f100 0304 	add.w	r3, r0, #4
 8007092:	d50a      	bpl.n	80070aa <_printf_i+0xce>
 8007094:	6805      	ldr	r5, [r0, #0]
 8007096:	600b      	str	r3, [r1, #0]
 8007098:	2d00      	cmp	r5, #0
 800709a:	da03      	bge.n	80070a4 <_printf_i+0xc8>
 800709c:	232d      	movs	r3, #45	; 0x2d
 800709e:	426d      	negs	r5, r5
 80070a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070a4:	485e      	ldr	r0, [pc, #376]	; (8007220 <_printf_i+0x244>)
 80070a6:	230a      	movs	r3, #10
 80070a8:	e019      	b.n	80070de <_printf_i+0x102>
 80070aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80070ae:	6805      	ldr	r5, [r0, #0]
 80070b0:	600b      	str	r3, [r1, #0]
 80070b2:	bf18      	it	ne
 80070b4:	b22d      	sxthne	r5, r5
 80070b6:	e7ef      	b.n	8007098 <_printf_i+0xbc>
 80070b8:	680b      	ldr	r3, [r1, #0]
 80070ba:	6825      	ldr	r5, [r4, #0]
 80070bc:	1d18      	adds	r0, r3, #4
 80070be:	6008      	str	r0, [r1, #0]
 80070c0:	0628      	lsls	r0, r5, #24
 80070c2:	d501      	bpl.n	80070c8 <_printf_i+0xec>
 80070c4:	681d      	ldr	r5, [r3, #0]
 80070c6:	e002      	b.n	80070ce <_printf_i+0xf2>
 80070c8:	0669      	lsls	r1, r5, #25
 80070ca:	d5fb      	bpl.n	80070c4 <_printf_i+0xe8>
 80070cc:	881d      	ldrh	r5, [r3, #0]
 80070ce:	4854      	ldr	r0, [pc, #336]	; (8007220 <_printf_i+0x244>)
 80070d0:	2f6f      	cmp	r7, #111	; 0x6f
 80070d2:	bf0c      	ite	eq
 80070d4:	2308      	moveq	r3, #8
 80070d6:	230a      	movne	r3, #10
 80070d8:	2100      	movs	r1, #0
 80070da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070de:	6866      	ldr	r6, [r4, #4]
 80070e0:	60a6      	str	r6, [r4, #8]
 80070e2:	2e00      	cmp	r6, #0
 80070e4:	bfa2      	ittt	ge
 80070e6:	6821      	ldrge	r1, [r4, #0]
 80070e8:	f021 0104 	bicge.w	r1, r1, #4
 80070ec:	6021      	strge	r1, [r4, #0]
 80070ee:	b90d      	cbnz	r5, 80070f4 <_printf_i+0x118>
 80070f0:	2e00      	cmp	r6, #0
 80070f2:	d04d      	beq.n	8007190 <_printf_i+0x1b4>
 80070f4:	4616      	mov	r6, r2
 80070f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80070fa:	fb03 5711 	mls	r7, r3, r1, r5
 80070fe:	5dc7      	ldrb	r7, [r0, r7]
 8007100:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007104:	462f      	mov	r7, r5
 8007106:	42bb      	cmp	r3, r7
 8007108:	460d      	mov	r5, r1
 800710a:	d9f4      	bls.n	80070f6 <_printf_i+0x11a>
 800710c:	2b08      	cmp	r3, #8
 800710e:	d10b      	bne.n	8007128 <_printf_i+0x14c>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	07df      	lsls	r7, r3, #31
 8007114:	d508      	bpl.n	8007128 <_printf_i+0x14c>
 8007116:	6923      	ldr	r3, [r4, #16]
 8007118:	6861      	ldr	r1, [r4, #4]
 800711a:	4299      	cmp	r1, r3
 800711c:	bfde      	ittt	le
 800711e:	2330      	movle	r3, #48	; 0x30
 8007120:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007124:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007128:	1b92      	subs	r2, r2, r6
 800712a:	6122      	str	r2, [r4, #16]
 800712c:	f8cd a000 	str.w	sl, [sp]
 8007130:	464b      	mov	r3, r9
 8007132:	aa03      	add	r2, sp, #12
 8007134:	4621      	mov	r1, r4
 8007136:	4640      	mov	r0, r8
 8007138:	f7ff fee2 	bl	8006f00 <_printf_common>
 800713c:	3001      	adds	r0, #1
 800713e:	d14c      	bne.n	80071da <_printf_i+0x1fe>
 8007140:	f04f 30ff 	mov.w	r0, #4294967295
 8007144:	b004      	add	sp, #16
 8007146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714a:	4835      	ldr	r0, [pc, #212]	; (8007220 <_printf_i+0x244>)
 800714c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	680e      	ldr	r6, [r1, #0]
 8007154:	061f      	lsls	r7, r3, #24
 8007156:	f856 5b04 	ldr.w	r5, [r6], #4
 800715a:	600e      	str	r6, [r1, #0]
 800715c:	d514      	bpl.n	8007188 <_printf_i+0x1ac>
 800715e:	07d9      	lsls	r1, r3, #31
 8007160:	bf44      	itt	mi
 8007162:	f043 0320 	orrmi.w	r3, r3, #32
 8007166:	6023      	strmi	r3, [r4, #0]
 8007168:	b91d      	cbnz	r5, 8007172 <_printf_i+0x196>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	f023 0320 	bic.w	r3, r3, #32
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	2310      	movs	r3, #16
 8007174:	e7b0      	b.n	80070d8 <_printf_i+0xfc>
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	f043 0320 	orr.w	r3, r3, #32
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	2378      	movs	r3, #120	; 0x78
 8007180:	4828      	ldr	r0, [pc, #160]	; (8007224 <_printf_i+0x248>)
 8007182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007186:	e7e3      	b.n	8007150 <_printf_i+0x174>
 8007188:	065e      	lsls	r6, r3, #25
 800718a:	bf48      	it	mi
 800718c:	b2ad      	uxthmi	r5, r5
 800718e:	e7e6      	b.n	800715e <_printf_i+0x182>
 8007190:	4616      	mov	r6, r2
 8007192:	e7bb      	b.n	800710c <_printf_i+0x130>
 8007194:	680b      	ldr	r3, [r1, #0]
 8007196:	6826      	ldr	r6, [r4, #0]
 8007198:	6960      	ldr	r0, [r4, #20]
 800719a:	1d1d      	adds	r5, r3, #4
 800719c:	600d      	str	r5, [r1, #0]
 800719e:	0635      	lsls	r5, r6, #24
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	d501      	bpl.n	80071a8 <_printf_i+0x1cc>
 80071a4:	6018      	str	r0, [r3, #0]
 80071a6:	e002      	b.n	80071ae <_printf_i+0x1d2>
 80071a8:	0671      	lsls	r1, r6, #25
 80071aa:	d5fb      	bpl.n	80071a4 <_printf_i+0x1c8>
 80071ac:	8018      	strh	r0, [r3, #0]
 80071ae:	2300      	movs	r3, #0
 80071b0:	6123      	str	r3, [r4, #16]
 80071b2:	4616      	mov	r6, r2
 80071b4:	e7ba      	b.n	800712c <_printf_i+0x150>
 80071b6:	680b      	ldr	r3, [r1, #0]
 80071b8:	1d1a      	adds	r2, r3, #4
 80071ba:	600a      	str	r2, [r1, #0]
 80071bc:	681e      	ldr	r6, [r3, #0]
 80071be:	6862      	ldr	r2, [r4, #4]
 80071c0:	2100      	movs	r1, #0
 80071c2:	4630      	mov	r0, r6
 80071c4:	f7f9 f82c 	bl	8000220 <memchr>
 80071c8:	b108      	cbz	r0, 80071ce <_printf_i+0x1f2>
 80071ca:	1b80      	subs	r0, r0, r6
 80071cc:	6060      	str	r0, [r4, #4]
 80071ce:	6863      	ldr	r3, [r4, #4]
 80071d0:	6123      	str	r3, [r4, #16]
 80071d2:	2300      	movs	r3, #0
 80071d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071d8:	e7a8      	b.n	800712c <_printf_i+0x150>
 80071da:	6923      	ldr	r3, [r4, #16]
 80071dc:	4632      	mov	r2, r6
 80071de:	4649      	mov	r1, r9
 80071e0:	4640      	mov	r0, r8
 80071e2:	47d0      	blx	sl
 80071e4:	3001      	adds	r0, #1
 80071e6:	d0ab      	beq.n	8007140 <_printf_i+0x164>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	079b      	lsls	r3, r3, #30
 80071ec:	d413      	bmi.n	8007216 <_printf_i+0x23a>
 80071ee:	68e0      	ldr	r0, [r4, #12]
 80071f0:	9b03      	ldr	r3, [sp, #12]
 80071f2:	4298      	cmp	r0, r3
 80071f4:	bfb8      	it	lt
 80071f6:	4618      	movlt	r0, r3
 80071f8:	e7a4      	b.n	8007144 <_printf_i+0x168>
 80071fa:	2301      	movs	r3, #1
 80071fc:	4632      	mov	r2, r6
 80071fe:	4649      	mov	r1, r9
 8007200:	4640      	mov	r0, r8
 8007202:	47d0      	blx	sl
 8007204:	3001      	adds	r0, #1
 8007206:	d09b      	beq.n	8007140 <_printf_i+0x164>
 8007208:	3501      	adds	r5, #1
 800720a:	68e3      	ldr	r3, [r4, #12]
 800720c:	9903      	ldr	r1, [sp, #12]
 800720e:	1a5b      	subs	r3, r3, r1
 8007210:	42ab      	cmp	r3, r5
 8007212:	dcf2      	bgt.n	80071fa <_printf_i+0x21e>
 8007214:	e7eb      	b.n	80071ee <_printf_i+0x212>
 8007216:	2500      	movs	r5, #0
 8007218:	f104 0619 	add.w	r6, r4, #25
 800721c:	e7f5      	b.n	800720a <_printf_i+0x22e>
 800721e:	bf00      	nop
 8007220:	0800b18e 	.word	0x0800b18e
 8007224:	0800b19f 	.word	0x0800b19f

08007228 <_scanf_float>:
 8007228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	b087      	sub	sp, #28
 800722e:	4617      	mov	r7, r2
 8007230:	9303      	str	r3, [sp, #12]
 8007232:	688b      	ldr	r3, [r1, #8]
 8007234:	1e5a      	subs	r2, r3, #1
 8007236:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800723a:	bf83      	ittte	hi
 800723c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007240:	195b      	addhi	r3, r3, r5
 8007242:	9302      	strhi	r3, [sp, #8]
 8007244:	2300      	movls	r3, #0
 8007246:	bf86      	itte	hi
 8007248:	f240 135d 	movwhi	r3, #349	; 0x15d
 800724c:	608b      	strhi	r3, [r1, #8]
 800724e:	9302      	strls	r3, [sp, #8]
 8007250:	680b      	ldr	r3, [r1, #0]
 8007252:	468b      	mov	fp, r1
 8007254:	2500      	movs	r5, #0
 8007256:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800725a:	f84b 3b1c 	str.w	r3, [fp], #28
 800725e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007262:	4680      	mov	r8, r0
 8007264:	460c      	mov	r4, r1
 8007266:	465e      	mov	r6, fp
 8007268:	46aa      	mov	sl, r5
 800726a:	46a9      	mov	r9, r5
 800726c:	9501      	str	r5, [sp, #4]
 800726e:	68a2      	ldr	r2, [r4, #8]
 8007270:	b152      	cbz	r2, 8007288 <_scanf_float+0x60>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b4e      	cmp	r3, #78	; 0x4e
 8007278:	d864      	bhi.n	8007344 <_scanf_float+0x11c>
 800727a:	2b40      	cmp	r3, #64	; 0x40
 800727c:	d83c      	bhi.n	80072f8 <_scanf_float+0xd0>
 800727e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007282:	b2c8      	uxtb	r0, r1
 8007284:	280e      	cmp	r0, #14
 8007286:	d93a      	bls.n	80072fe <_scanf_float+0xd6>
 8007288:	f1b9 0f00 	cmp.w	r9, #0
 800728c:	d003      	beq.n	8007296 <_scanf_float+0x6e>
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007294:	6023      	str	r3, [r4, #0]
 8007296:	f10a 3aff 	add.w	sl, sl, #4294967295
 800729a:	f1ba 0f01 	cmp.w	sl, #1
 800729e:	f200 8113 	bhi.w	80074c8 <_scanf_float+0x2a0>
 80072a2:	455e      	cmp	r6, fp
 80072a4:	f200 8105 	bhi.w	80074b2 <_scanf_float+0x28a>
 80072a8:	2501      	movs	r5, #1
 80072aa:	4628      	mov	r0, r5
 80072ac:	b007      	add	sp, #28
 80072ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80072b6:	2a0d      	cmp	r2, #13
 80072b8:	d8e6      	bhi.n	8007288 <_scanf_float+0x60>
 80072ba:	a101      	add	r1, pc, #4	; (adr r1, 80072c0 <_scanf_float+0x98>)
 80072bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80072c0:	080073ff 	.word	0x080073ff
 80072c4:	08007289 	.word	0x08007289
 80072c8:	08007289 	.word	0x08007289
 80072cc:	08007289 	.word	0x08007289
 80072d0:	0800745f 	.word	0x0800745f
 80072d4:	08007437 	.word	0x08007437
 80072d8:	08007289 	.word	0x08007289
 80072dc:	08007289 	.word	0x08007289
 80072e0:	0800740d 	.word	0x0800740d
 80072e4:	08007289 	.word	0x08007289
 80072e8:	08007289 	.word	0x08007289
 80072ec:	08007289 	.word	0x08007289
 80072f0:	08007289 	.word	0x08007289
 80072f4:	080073c5 	.word	0x080073c5
 80072f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80072fc:	e7db      	b.n	80072b6 <_scanf_float+0x8e>
 80072fe:	290e      	cmp	r1, #14
 8007300:	d8c2      	bhi.n	8007288 <_scanf_float+0x60>
 8007302:	a001      	add	r0, pc, #4	; (adr r0, 8007308 <_scanf_float+0xe0>)
 8007304:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007308:	080073b7 	.word	0x080073b7
 800730c:	08007289 	.word	0x08007289
 8007310:	080073b7 	.word	0x080073b7
 8007314:	0800744b 	.word	0x0800744b
 8007318:	08007289 	.word	0x08007289
 800731c:	08007365 	.word	0x08007365
 8007320:	080073a1 	.word	0x080073a1
 8007324:	080073a1 	.word	0x080073a1
 8007328:	080073a1 	.word	0x080073a1
 800732c:	080073a1 	.word	0x080073a1
 8007330:	080073a1 	.word	0x080073a1
 8007334:	080073a1 	.word	0x080073a1
 8007338:	080073a1 	.word	0x080073a1
 800733c:	080073a1 	.word	0x080073a1
 8007340:	080073a1 	.word	0x080073a1
 8007344:	2b6e      	cmp	r3, #110	; 0x6e
 8007346:	d809      	bhi.n	800735c <_scanf_float+0x134>
 8007348:	2b60      	cmp	r3, #96	; 0x60
 800734a:	d8b2      	bhi.n	80072b2 <_scanf_float+0x8a>
 800734c:	2b54      	cmp	r3, #84	; 0x54
 800734e:	d077      	beq.n	8007440 <_scanf_float+0x218>
 8007350:	2b59      	cmp	r3, #89	; 0x59
 8007352:	d199      	bne.n	8007288 <_scanf_float+0x60>
 8007354:	2d07      	cmp	r5, #7
 8007356:	d197      	bne.n	8007288 <_scanf_float+0x60>
 8007358:	2508      	movs	r5, #8
 800735a:	e029      	b.n	80073b0 <_scanf_float+0x188>
 800735c:	2b74      	cmp	r3, #116	; 0x74
 800735e:	d06f      	beq.n	8007440 <_scanf_float+0x218>
 8007360:	2b79      	cmp	r3, #121	; 0x79
 8007362:	e7f6      	b.n	8007352 <_scanf_float+0x12a>
 8007364:	6821      	ldr	r1, [r4, #0]
 8007366:	05c8      	lsls	r0, r1, #23
 8007368:	d51a      	bpl.n	80073a0 <_scanf_float+0x178>
 800736a:	9b02      	ldr	r3, [sp, #8]
 800736c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007370:	6021      	str	r1, [r4, #0]
 8007372:	f109 0901 	add.w	r9, r9, #1
 8007376:	b11b      	cbz	r3, 8007380 <_scanf_float+0x158>
 8007378:	3b01      	subs	r3, #1
 800737a:	3201      	adds	r2, #1
 800737c:	9302      	str	r3, [sp, #8]
 800737e:	60a2      	str	r2, [r4, #8]
 8007380:	68a3      	ldr	r3, [r4, #8]
 8007382:	3b01      	subs	r3, #1
 8007384:	60a3      	str	r3, [r4, #8]
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	3301      	adds	r3, #1
 800738a:	6123      	str	r3, [r4, #16]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3b01      	subs	r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	607b      	str	r3, [r7, #4]
 8007394:	f340 8084 	ble.w	80074a0 <_scanf_float+0x278>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	3301      	adds	r3, #1
 800739c:	603b      	str	r3, [r7, #0]
 800739e:	e766      	b.n	800726e <_scanf_float+0x46>
 80073a0:	eb1a 0f05 	cmn.w	sl, r5
 80073a4:	f47f af70 	bne.w	8007288 <_scanf_float+0x60>
 80073a8:	6822      	ldr	r2, [r4, #0]
 80073aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80073ae:	6022      	str	r2, [r4, #0]
 80073b0:	f806 3b01 	strb.w	r3, [r6], #1
 80073b4:	e7e4      	b.n	8007380 <_scanf_float+0x158>
 80073b6:	6822      	ldr	r2, [r4, #0]
 80073b8:	0610      	lsls	r0, r2, #24
 80073ba:	f57f af65 	bpl.w	8007288 <_scanf_float+0x60>
 80073be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073c2:	e7f4      	b.n	80073ae <_scanf_float+0x186>
 80073c4:	f1ba 0f00 	cmp.w	sl, #0
 80073c8:	d10e      	bne.n	80073e8 <_scanf_float+0x1c0>
 80073ca:	f1b9 0f00 	cmp.w	r9, #0
 80073ce:	d10e      	bne.n	80073ee <_scanf_float+0x1c6>
 80073d0:	6822      	ldr	r2, [r4, #0]
 80073d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80073d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80073da:	d108      	bne.n	80073ee <_scanf_float+0x1c6>
 80073dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80073e0:	6022      	str	r2, [r4, #0]
 80073e2:	f04f 0a01 	mov.w	sl, #1
 80073e6:	e7e3      	b.n	80073b0 <_scanf_float+0x188>
 80073e8:	f1ba 0f02 	cmp.w	sl, #2
 80073ec:	d055      	beq.n	800749a <_scanf_float+0x272>
 80073ee:	2d01      	cmp	r5, #1
 80073f0:	d002      	beq.n	80073f8 <_scanf_float+0x1d0>
 80073f2:	2d04      	cmp	r5, #4
 80073f4:	f47f af48 	bne.w	8007288 <_scanf_float+0x60>
 80073f8:	3501      	adds	r5, #1
 80073fa:	b2ed      	uxtb	r5, r5
 80073fc:	e7d8      	b.n	80073b0 <_scanf_float+0x188>
 80073fe:	f1ba 0f01 	cmp.w	sl, #1
 8007402:	f47f af41 	bne.w	8007288 <_scanf_float+0x60>
 8007406:	f04f 0a02 	mov.w	sl, #2
 800740a:	e7d1      	b.n	80073b0 <_scanf_float+0x188>
 800740c:	b97d      	cbnz	r5, 800742e <_scanf_float+0x206>
 800740e:	f1b9 0f00 	cmp.w	r9, #0
 8007412:	f47f af3c 	bne.w	800728e <_scanf_float+0x66>
 8007416:	6822      	ldr	r2, [r4, #0]
 8007418:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800741c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007420:	f47f af39 	bne.w	8007296 <_scanf_float+0x6e>
 8007424:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007428:	6022      	str	r2, [r4, #0]
 800742a:	2501      	movs	r5, #1
 800742c:	e7c0      	b.n	80073b0 <_scanf_float+0x188>
 800742e:	2d03      	cmp	r5, #3
 8007430:	d0e2      	beq.n	80073f8 <_scanf_float+0x1d0>
 8007432:	2d05      	cmp	r5, #5
 8007434:	e7de      	b.n	80073f4 <_scanf_float+0x1cc>
 8007436:	2d02      	cmp	r5, #2
 8007438:	f47f af26 	bne.w	8007288 <_scanf_float+0x60>
 800743c:	2503      	movs	r5, #3
 800743e:	e7b7      	b.n	80073b0 <_scanf_float+0x188>
 8007440:	2d06      	cmp	r5, #6
 8007442:	f47f af21 	bne.w	8007288 <_scanf_float+0x60>
 8007446:	2507      	movs	r5, #7
 8007448:	e7b2      	b.n	80073b0 <_scanf_float+0x188>
 800744a:	6822      	ldr	r2, [r4, #0]
 800744c:	0591      	lsls	r1, r2, #22
 800744e:	f57f af1b 	bpl.w	8007288 <_scanf_float+0x60>
 8007452:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007456:	6022      	str	r2, [r4, #0]
 8007458:	f8cd 9004 	str.w	r9, [sp, #4]
 800745c:	e7a8      	b.n	80073b0 <_scanf_float+0x188>
 800745e:	6822      	ldr	r2, [r4, #0]
 8007460:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007464:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007468:	d006      	beq.n	8007478 <_scanf_float+0x250>
 800746a:	0550      	lsls	r0, r2, #21
 800746c:	f57f af0c 	bpl.w	8007288 <_scanf_float+0x60>
 8007470:	f1b9 0f00 	cmp.w	r9, #0
 8007474:	f43f af0f 	beq.w	8007296 <_scanf_float+0x6e>
 8007478:	0591      	lsls	r1, r2, #22
 800747a:	bf58      	it	pl
 800747c:	9901      	ldrpl	r1, [sp, #4]
 800747e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007482:	bf58      	it	pl
 8007484:	eba9 0101 	subpl.w	r1, r9, r1
 8007488:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800748c:	bf58      	it	pl
 800748e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007492:	6022      	str	r2, [r4, #0]
 8007494:	f04f 0900 	mov.w	r9, #0
 8007498:	e78a      	b.n	80073b0 <_scanf_float+0x188>
 800749a:	f04f 0a03 	mov.w	sl, #3
 800749e:	e787      	b.n	80073b0 <_scanf_float+0x188>
 80074a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80074a4:	4639      	mov	r1, r7
 80074a6:	4640      	mov	r0, r8
 80074a8:	4798      	blx	r3
 80074aa:	2800      	cmp	r0, #0
 80074ac:	f43f aedf 	beq.w	800726e <_scanf_float+0x46>
 80074b0:	e6ea      	b.n	8007288 <_scanf_float+0x60>
 80074b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074ba:	463a      	mov	r2, r7
 80074bc:	4640      	mov	r0, r8
 80074be:	4798      	blx	r3
 80074c0:	6923      	ldr	r3, [r4, #16]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	6123      	str	r3, [r4, #16]
 80074c6:	e6ec      	b.n	80072a2 <_scanf_float+0x7a>
 80074c8:	1e6b      	subs	r3, r5, #1
 80074ca:	2b06      	cmp	r3, #6
 80074cc:	d825      	bhi.n	800751a <_scanf_float+0x2f2>
 80074ce:	2d02      	cmp	r5, #2
 80074d0:	d836      	bhi.n	8007540 <_scanf_float+0x318>
 80074d2:	455e      	cmp	r6, fp
 80074d4:	f67f aee8 	bls.w	80072a8 <_scanf_float+0x80>
 80074d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074e0:	463a      	mov	r2, r7
 80074e2:	4640      	mov	r0, r8
 80074e4:	4798      	blx	r3
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	6123      	str	r3, [r4, #16]
 80074ec:	e7f1      	b.n	80074d2 <_scanf_float+0x2aa>
 80074ee:	9802      	ldr	r0, [sp, #8]
 80074f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80074f8:	9002      	str	r0, [sp, #8]
 80074fa:	463a      	mov	r2, r7
 80074fc:	4640      	mov	r0, r8
 80074fe:	4798      	blx	r3
 8007500:	6923      	ldr	r3, [r4, #16]
 8007502:	3b01      	subs	r3, #1
 8007504:	6123      	str	r3, [r4, #16]
 8007506:	f10a 3aff 	add.w	sl, sl, #4294967295
 800750a:	fa5f fa8a 	uxtb.w	sl, sl
 800750e:	f1ba 0f02 	cmp.w	sl, #2
 8007512:	d1ec      	bne.n	80074ee <_scanf_float+0x2c6>
 8007514:	3d03      	subs	r5, #3
 8007516:	b2ed      	uxtb	r5, r5
 8007518:	1b76      	subs	r6, r6, r5
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	05da      	lsls	r2, r3, #23
 800751e:	d52f      	bpl.n	8007580 <_scanf_float+0x358>
 8007520:	055b      	lsls	r3, r3, #21
 8007522:	d510      	bpl.n	8007546 <_scanf_float+0x31e>
 8007524:	455e      	cmp	r6, fp
 8007526:	f67f aebf 	bls.w	80072a8 <_scanf_float+0x80>
 800752a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800752e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007532:	463a      	mov	r2, r7
 8007534:	4640      	mov	r0, r8
 8007536:	4798      	blx	r3
 8007538:	6923      	ldr	r3, [r4, #16]
 800753a:	3b01      	subs	r3, #1
 800753c:	6123      	str	r3, [r4, #16]
 800753e:	e7f1      	b.n	8007524 <_scanf_float+0x2fc>
 8007540:	46aa      	mov	sl, r5
 8007542:	9602      	str	r6, [sp, #8]
 8007544:	e7df      	b.n	8007506 <_scanf_float+0x2de>
 8007546:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	2965      	cmp	r1, #101	; 0x65
 800754e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007552:	f106 35ff 	add.w	r5, r6, #4294967295
 8007556:	6123      	str	r3, [r4, #16]
 8007558:	d00c      	beq.n	8007574 <_scanf_float+0x34c>
 800755a:	2945      	cmp	r1, #69	; 0x45
 800755c:	d00a      	beq.n	8007574 <_scanf_float+0x34c>
 800755e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007562:	463a      	mov	r2, r7
 8007564:	4640      	mov	r0, r8
 8007566:	4798      	blx	r3
 8007568:	6923      	ldr	r3, [r4, #16]
 800756a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800756e:	3b01      	subs	r3, #1
 8007570:	1eb5      	subs	r5, r6, #2
 8007572:	6123      	str	r3, [r4, #16]
 8007574:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007578:	463a      	mov	r2, r7
 800757a:	4640      	mov	r0, r8
 800757c:	4798      	blx	r3
 800757e:	462e      	mov	r6, r5
 8007580:	6825      	ldr	r5, [r4, #0]
 8007582:	f015 0510 	ands.w	r5, r5, #16
 8007586:	d158      	bne.n	800763a <_scanf_float+0x412>
 8007588:	7035      	strb	r5, [r6, #0]
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007594:	d11c      	bne.n	80075d0 <_scanf_float+0x3a8>
 8007596:	9b01      	ldr	r3, [sp, #4]
 8007598:	454b      	cmp	r3, r9
 800759a:	eba3 0209 	sub.w	r2, r3, r9
 800759e:	d124      	bne.n	80075ea <_scanf_float+0x3c2>
 80075a0:	2200      	movs	r2, #0
 80075a2:	4659      	mov	r1, fp
 80075a4:	4640      	mov	r0, r8
 80075a6:	f000 ff59 	bl	800845c <_strtod_r>
 80075aa:	9b03      	ldr	r3, [sp, #12]
 80075ac:	6821      	ldr	r1, [r4, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f011 0f02 	tst.w	r1, #2
 80075b4:	ec57 6b10 	vmov	r6, r7, d0
 80075b8:	f103 0204 	add.w	r2, r3, #4
 80075bc:	d020      	beq.n	8007600 <_scanf_float+0x3d8>
 80075be:	9903      	ldr	r1, [sp, #12]
 80075c0:	600a      	str	r2, [r1, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	e9c3 6700 	strd	r6, r7, [r3]
 80075c8:	68e3      	ldr	r3, [r4, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60e3      	str	r3, [r4, #12]
 80075ce:	e66c      	b.n	80072aa <_scanf_float+0x82>
 80075d0:	9b04      	ldr	r3, [sp, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d0e4      	beq.n	80075a0 <_scanf_float+0x378>
 80075d6:	9905      	ldr	r1, [sp, #20]
 80075d8:	230a      	movs	r3, #10
 80075da:	462a      	mov	r2, r5
 80075dc:	3101      	adds	r1, #1
 80075de:	4640      	mov	r0, r8
 80075e0:	f000 ffc6 	bl	8008570 <_strtol_r>
 80075e4:	9b04      	ldr	r3, [sp, #16]
 80075e6:	9e05      	ldr	r6, [sp, #20]
 80075e8:	1ac2      	subs	r2, r0, r3
 80075ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80075ee:	429e      	cmp	r6, r3
 80075f0:	bf28      	it	cs
 80075f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80075f6:	4912      	ldr	r1, [pc, #72]	; (8007640 <_scanf_float+0x418>)
 80075f8:	4630      	mov	r0, r6
 80075fa:	f000 f8a5 	bl	8007748 <siprintf>
 80075fe:	e7cf      	b.n	80075a0 <_scanf_float+0x378>
 8007600:	f011 0f04 	tst.w	r1, #4
 8007604:	9903      	ldr	r1, [sp, #12]
 8007606:	600a      	str	r2, [r1, #0]
 8007608:	d1db      	bne.n	80075c2 <_scanf_float+0x39a>
 800760a:	f8d3 8000 	ldr.w	r8, [r3]
 800760e:	ee10 2a10 	vmov	r2, s0
 8007612:	ee10 0a10 	vmov	r0, s0
 8007616:	463b      	mov	r3, r7
 8007618:	4639      	mov	r1, r7
 800761a:	f7f9 faa7 	bl	8000b6c <__aeabi_dcmpun>
 800761e:	b128      	cbz	r0, 800762c <_scanf_float+0x404>
 8007620:	4808      	ldr	r0, [pc, #32]	; (8007644 <_scanf_float+0x41c>)
 8007622:	f000 f88b 	bl	800773c <nanf>
 8007626:	ed88 0a00 	vstr	s0, [r8]
 800762a:	e7cd      	b.n	80075c8 <_scanf_float+0x3a0>
 800762c:	4630      	mov	r0, r6
 800762e:	4639      	mov	r1, r7
 8007630:	f7f9 fafa 	bl	8000c28 <__aeabi_d2f>
 8007634:	f8c8 0000 	str.w	r0, [r8]
 8007638:	e7c6      	b.n	80075c8 <_scanf_float+0x3a0>
 800763a:	2500      	movs	r5, #0
 800763c:	e635      	b.n	80072aa <_scanf_float+0x82>
 800763e:	bf00      	nop
 8007640:	0800b1b0 	.word	0x0800b1b0
 8007644:	0800b5c8 	.word	0x0800b5c8

08007648 <cleanup_glue>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	460c      	mov	r4, r1
 800764c:	6809      	ldr	r1, [r1, #0]
 800764e:	4605      	mov	r5, r0
 8007650:	b109      	cbz	r1, 8007656 <cleanup_glue+0xe>
 8007652:	f7ff fff9 	bl	8007648 <cleanup_glue>
 8007656:	4621      	mov	r1, r4
 8007658:	4628      	mov	r0, r5
 800765a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800765e:	f002 bf5b 	b.w	800a518 <_free_r>
	...

08007664 <_reclaim_reent>:
 8007664:	4b2c      	ldr	r3, [pc, #176]	; (8007718 <_reclaim_reent+0xb4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4283      	cmp	r3, r0
 800766a:	b570      	push	{r4, r5, r6, lr}
 800766c:	4604      	mov	r4, r0
 800766e:	d051      	beq.n	8007714 <_reclaim_reent+0xb0>
 8007670:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007672:	b143      	cbz	r3, 8007686 <_reclaim_reent+0x22>
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d14a      	bne.n	8007710 <_reclaim_reent+0xac>
 800767a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800767c:	6819      	ldr	r1, [r3, #0]
 800767e:	b111      	cbz	r1, 8007686 <_reclaim_reent+0x22>
 8007680:	4620      	mov	r0, r4
 8007682:	f002 ff49 	bl	800a518 <_free_r>
 8007686:	6961      	ldr	r1, [r4, #20]
 8007688:	b111      	cbz	r1, 8007690 <_reclaim_reent+0x2c>
 800768a:	4620      	mov	r0, r4
 800768c:	f002 ff44 	bl	800a518 <_free_r>
 8007690:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007692:	b111      	cbz	r1, 800769a <_reclaim_reent+0x36>
 8007694:	4620      	mov	r0, r4
 8007696:	f002 ff3f 	bl	800a518 <_free_r>
 800769a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800769c:	b111      	cbz	r1, 80076a4 <_reclaim_reent+0x40>
 800769e:	4620      	mov	r0, r4
 80076a0:	f002 ff3a 	bl	800a518 <_free_r>
 80076a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80076a6:	b111      	cbz	r1, 80076ae <_reclaim_reent+0x4a>
 80076a8:	4620      	mov	r0, r4
 80076aa:	f002 ff35 	bl	800a518 <_free_r>
 80076ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80076b0:	b111      	cbz	r1, 80076b8 <_reclaim_reent+0x54>
 80076b2:	4620      	mov	r0, r4
 80076b4:	f002 ff30 	bl	800a518 <_free_r>
 80076b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80076ba:	b111      	cbz	r1, 80076c2 <_reclaim_reent+0x5e>
 80076bc:	4620      	mov	r0, r4
 80076be:	f002 ff2b 	bl	800a518 <_free_r>
 80076c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80076c4:	b111      	cbz	r1, 80076cc <_reclaim_reent+0x68>
 80076c6:	4620      	mov	r0, r4
 80076c8:	f002 ff26 	bl	800a518 <_free_r>
 80076cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076ce:	b111      	cbz	r1, 80076d6 <_reclaim_reent+0x72>
 80076d0:	4620      	mov	r0, r4
 80076d2:	f002 ff21 	bl	800a518 <_free_r>
 80076d6:	69a3      	ldr	r3, [r4, #24]
 80076d8:	b1e3      	cbz	r3, 8007714 <_reclaim_reent+0xb0>
 80076da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076dc:	4620      	mov	r0, r4
 80076de:	4798      	blx	r3
 80076e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80076e2:	b1b9      	cbz	r1, 8007714 <_reclaim_reent+0xb0>
 80076e4:	4620      	mov	r0, r4
 80076e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80076ea:	f7ff bfad 	b.w	8007648 <cleanup_glue>
 80076ee:	5949      	ldr	r1, [r1, r5]
 80076f0:	b941      	cbnz	r1, 8007704 <_reclaim_reent+0xa0>
 80076f2:	3504      	adds	r5, #4
 80076f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076f6:	2d80      	cmp	r5, #128	; 0x80
 80076f8:	68d9      	ldr	r1, [r3, #12]
 80076fa:	d1f8      	bne.n	80076ee <_reclaim_reent+0x8a>
 80076fc:	4620      	mov	r0, r4
 80076fe:	f002 ff0b 	bl	800a518 <_free_r>
 8007702:	e7ba      	b.n	800767a <_reclaim_reent+0x16>
 8007704:	680e      	ldr	r6, [r1, #0]
 8007706:	4620      	mov	r0, r4
 8007708:	f002 ff06 	bl	800a518 <_free_r>
 800770c:	4631      	mov	r1, r6
 800770e:	e7ef      	b.n	80076f0 <_reclaim_reent+0x8c>
 8007710:	2500      	movs	r5, #0
 8007712:	e7ef      	b.n	80076f4 <_reclaim_reent+0x90>
 8007714:	bd70      	pop	{r4, r5, r6, pc}
 8007716:	bf00      	nop
 8007718:	20000010 	.word	0x20000010

0800771c <_sbrk_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d06      	ldr	r5, [pc, #24]	; (8007738 <_sbrk_r+0x1c>)
 8007720:	2300      	movs	r3, #0
 8007722:	4604      	mov	r4, r0
 8007724:	4608      	mov	r0, r1
 8007726:	602b      	str	r3, [r5, #0]
 8007728:	f7fa f92a 	bl	8001980 <_sbrk>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d102      	bne.n	8007736 <_sbrk_r+0x1a>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	b103      	cbz	r3, 8007736 <_sbrk_r+0x1a>
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	20004fd4 	.word	0x20004fd4

0800773c <nanf>:
 800773c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007744 <nanf+0x8>
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	7fc00000 	.word	0x7fc00000

08007748 <siprintf>:
 8007748:	b40e      	push	{r1, r2, r3}
 800774a:	b500      	push	{lr}
 800774c:	b09c      	sub	sp, #112	; 0x70
 800774e:	ab1d      	add	r3, sp, #116	; 0x74
 8007750:	9002      	str	r0, [sp, #8]
 8007752:	9006      	str	r0, [sp, #24]
 8007754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007758:	4809      	ldr	r0, [pc, #36]	; (8007780 <siprintf+0x38>)
 800775a:	9107      	str	r1, [sp, #28]
 800775c:	9104      	str	r1, [sp, #16]
 800775e:	4909      	ldr	r1, [pc, #36]	; (8007784 <siprintf+0x3c>)
 8007760:	f853 2b04 	ldr.w	r2, [r3], #4
 8007764:	9105      	str	r1, [sp, #20]
 8007766:	6800      	ldr	r0, [r0, #0]
 8007768:	9301      	str	r3, [sp, #4]
 800776a:	a902      	add	r1, sp, #8
 800776c:	f002 ff80 	bl	800a670 <_svfiprintf_r>
 8007770:	9b02      	ldr	r3, [sp, #8]
 8007772:	2200      	movs	r2, #0
 8007774:	701a      	strb	r2, [r3, #0]
 8007776:	b01c      	add	sp, #112	; 0x70
 8007778:	f85d eb04 	ldr.w	lr, [sp], #4
 800777c:	b003      	add	sp, #12
 800777e:	4770      	bx	lr
 8007780:	20000010 	.word	0x20000010
 8007784:	ffff0208 	.word	0xffff0208

08007788 <__sread>:
 8007788:	b510      	push	{r4, lr}
 800778a:	460c      	mov	r4, r1
 800778c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007790:	f003 f86e 	bl	800a870 <_read_r>
 8007794:	2800      	cmp	r0, #0
 8007796:	bfab      	itete	ge
 8007798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800779a:	89a3      	ldrhlt	r3, [r4, #12]
 800779c:	181b      	addge	r3, r3, r0
 800779e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077a2:	bfac      	ite	ge
 80077a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80077a6:	81a3      	strhlt	r3, [r4, #12]
 80077a8:	bd10      	pop	{r4, pc}

080077aa <__swrite>:
 80077aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ae:	461f      	mov	r7, r3
 80077b0:	898b      	ldrh	r3, [r1, #12]
 80077b2:	05db      	lsls	r3, r3, #23
 80077b4:	4605      	mov	r5, r0
 80077b6:	460c      	mov	r4, r1
 80077b8:	4616      	mov	r6, r2
 80077ba:	d505      	bpl.n	80077c8 <__swrite+0x1e>
 80077bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c0:	2302      	movs	r3, #2
 80077c2:	2200      	movs	r2, #0
 80077c4:	f002 f9a6 	bl	8009b14 <_lseek_r>
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077d2:	81a3      	strh	r3, [r4, #12]
 80077d4:	4632      	mov	r2, r6
 80077d6:	463b      	mov	r3, r7
 80077d8:	4628      	mov	r0, r5
 80077da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077de:	f000 bec9 	b.w	8008574 <_write_r>

080077e2 <__sseek>:
 80077e2:	b510      	push	{r4, lr}
 80077e4:	460c      	mov	r4, r1
 80077e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ea:	f002 f993 	bl	8009b14 <_lseek_r>
 80077ee:	1c43      	adds	r3, r0, #1
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	bf15      	itete	ne
 80077f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80077f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077fe:	81a3      	strheq	r3, [r4, #12]
 8007800:	bf18      	it	ne
 8007802:	81a3      	strhne	r3, [r4, #12]
 8007804:	bd10      	pop	{r4, pc}

08007806 <__sclose>:
 8007806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800780a:	f000 bec5 	b.w	8008598 <_close_r>

0800780e <sulp>:
 800780e:	b570      	push	{r4, r5, r6, lr}
 8007810:	4604      	mov	r4, r0
 8007812:	460d      	mov	r5, r1
 8007814:	ec45 4b10 	vmov	d0, r4, r5
 8007818:	4616      	mov	r6, r2
 800781a:	f002 fd1f 	bl	800a25c <__ulp>
 800781e:	ec51 0b10 	vmov	r0, r1, d0
 8007822:	b17e      	cbz	r6, 8007844 <sulp+0x36>
 8007824:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007828:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800782c:	2b00      	cmp	r3, #0
 800782e:	dd09      	ble.n	8007844 <sulp+0x36>
 8007830:	051b      	lsls	r3, r3, #20
 8007832:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007836:	2400      	movs	r4, #0
 8007838:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800783c:	4622      	mov	r2, r4
 800783e:	462b      	mov	r3, r5
 8007840:	f7f8 fefa 	bl	8000638 <__aeabi_dmul>
 8007844:	bd70      	pop	{r4, r5, r6, pc}
	...

08007848 <_strtod_l>:
 8007848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	b0a3      	sub	sp, #140	; 0x8c
 800784e:	461f      	mov	r7, r3
 8007850:	2300      	movs	r3, #0
 8007852:	931e      	str	r3, [sp, #120]	; 0x78
 8007854:	4ba4      	ldr	r3, [pc, #656]	; (8007ae8 <_strtod_l+0x2a0>)
 8007856:	9219      	str	r2, [sp, #100]	; 0x64
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	9307      	str	r3, [sp, #28]
 800785c:	4604      	mov	r4, r0
 800785e:	4618      	mov	r0, r3
 8007860:	4688      	mov	r8, r1
 8007862:	f7f8 fcd5 	bl	8000210 <strlen>
 8007866:	f04f 0a00 	mov.w	sl, #0
 800786a:	4605      	mov	r5, r0
 800786c:	f04f 0b00 	mov.w	fp, #0
 8007870:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007874:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007876:	781a      	ldrb	r2, [r3, #0]
 8007878:	2a2b      	cmp	r2, #43	; 0x2b
 800787a:	d04c      	beq.n	8007916 <_strtod_l+0xce>
 800787c:	d839      	bhi.n	80078f2 <_strtod_l+0xaa>
 800787e:	2a0d      	cmp	r2, #13
 8007880:	d832      	bhi.n	80078e8 <_strtod_l+0xa0>
 8007882:	2a08      	cmp	r2, #8
 8007884:	d832      	bhi.n	80078ec <_strtod_l+0xa4>
 8007886:	2a00      	cmp	r2, #0
 8007888:	d03c      	beq.n	8007904 <_strtod_l+0xbc>
 800788a:	2300      	movs	r3, #0
 800788c:	930e      	str	r3, [sp, #56]	; 0x38
 800788e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007890:	7833      	ldrb	r3, [r6, #0]
 8007892:	2b30      	cmp	r3, #48	; 0x30
 8007894:	f040 80b4 	bne.w	8007a00 <_strtod_l+0x1b8>
 8007898:	7873      	ldrb	r3, [r6, #1]
 800789a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800789e:	2b58      	cmp	r3, #88	; 0x58
 80078a0:	d16c      	bne.n	800797c <_strtod_l+0x134>
 80078a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078a4:	9301      	str	r3, [sp, #4]
 80078a6:	ab1e      	add	r3, sp, #120	; 0x78
 80078a8:	9702      	str	r7, [sp, #8]
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	4a8f      	ldr	r2, [pc, #572]	; (8007aec <_strtod_l+0x2a4>)
 80078ae:	ab1f      	add	r3, sp, #124	; 0x7c
 80078b0:	a91d      	add	r1, sp, #116	; 0x74
 80078b2:	4620      	mov	r0, r4
 80078b4:	f001 fe22 	bl	80094fc <__gethex>
 80078b8:	f010 0707 	ands.w	r7, r0, #7
 80078bc:	4605      	mov	r5, r0
 80078be:	d005      	beq.n	80078cc <_strtod_l+0x84>
 80078c0:	2f06      	cmp	r7, #6
 80078c2:	d12a      	bne.n	800791a <_strtod_l+0xd2>
 80078c4:	3601      	adds	r6, #1
 80078c6:	2300      	movs	r3, #0
 80078c8:	961d      	str	r6, [sp, #116]	; 0x74
 80078ca:	930e      	str	r3, [sp, #56]	; 0x38
 80078cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f040 8596 	bne.w	8008400 <_strtod_l+0xbb8>
 80078d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078d6:	b1db      	cbz	r3, 8007910 <_strtod_l+0xc8>
 80078d8:	4652      	mov	r2, sl
 80078da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80078de:	ec43 2b10 	vmov	d0, r2, r3
 80078e2:	b023      	add	sp, #140	; 0x8c
 80078e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e8:	2a20      	cmp	r2, #32
 80078ea:	d1ce      	bne.n	800788a <_strtod_l+0x42>
 80078ec:	3301      	adds	r3, #1
 80078ee:	931d      	str	r3, [sp, #116]	; 0x74
 80078f0:	e7c0      	b.n	8007874 <_strtod_l+0x2c>
 80078f2:	2a2d      	cmp	r2, #45	; 0x2d
 80078f4:	d1c9      	bne.n	800788a <_strtod_l+0x42>
 80078f6:	2201      	movs	r2, #1
 80078f8:	920e      	str	r2, [sp, #56]	; 0x38
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	921d      	str	r2, [sp, #116]	; 0x74
 80078fe:	785b      	ldrb	r3, [r3, #1]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1c4      	bne.n	800788e <_strtod_l+0x46>
 8007904:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007906:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800790a:	2b00      	cmp	r3, #0
 800790c:	f040 8576 	bne.w	80083fc <_strtod_l+0xbb4>
 8007910:	4652      	mov	r2, sl
 8007912:	465b      	mov	r3, fp
 8007914:	e7e3      	b.n	80078de <_strtod_l+0x96>
 8007916:	2200      	movs	r2, #0
 8007918:	e7ee      	b.n	80078f8 <_strtod_l+0xb0>
 800791a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800791c:	b13a      	cbz	r2, 800792e <_strtod_l+0xe6>
 800791e:	2135      	movs	r1, #53	; 0x35
 8007920:	a820      	add	r0, sp, #128	; 0x80
 8007922:	f002 fda6 	bl	800a472 <__copybits>
 8007926:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007928:	4620      	mov	r0, r4
 800792a:	f002 f96b 	bl	8009c04 <_Bfree>
 800792e:	3f01      	subs	r7, #1
 8007930:	2f05      	cmp	r7, #5
 8007932:	d807      	bhi.n	8007944 <_strtod_l+0xfc>
 8007934:	e8df f007 	tbb	[pc, r7]
 8007938:	1d180b0e 	.word	0x1d180b0e
 800793c:	030e      	.short	0x030e
 800793e:	f04f 0b00 	mov.w	fp, #0
 8007942:	46da      	mov	sl, fp
 8007944:	0728      	lsls	r0, r5, #28
 8007946:	d5c1      	bpl.n	80078cc <_strtod_l+0x84>
 8007948:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800794c:	e7be      	b.n	80078cc <_strtod_l+0x84>
 800794e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007952:	e7f7      	b.n	8007944 <_strtod_l+0xfc>
 8007954:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007958:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800795a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800795e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007962:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007966:	e7ed      	b.n	8007944 <_strtod_l+0xfc>
 8007968:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007af0 <_strtod_l+0x2a8>
 800796c:	f04f 0a00 	mov.w	sl, #0
 8007970:	e7e8      	b.n	8007944 <_strtod_l+0xfc>
 8007972:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007976:	f04f 3aff 	mov.w	sl, #4294967295
 800797a:	e7e3      	b.n	8007944 <_strtod_l+0xfc>
 800797c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	921d      	str	r2, [sp, #116]	; 0x74
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	2b30      	cmp	r3, #48	; 0x30
 8007986:	d0f9      	beq.n	800797c <_strtod_l+0x134>
 8007988:	2b00      	cmp	r3, #0
 800798a:	d09f      	beq.n	80078cc <_strtod_l+0x84>
 800798c:	2301      	movs	r3, #1
 800798e:	f04f 0900 	mov.w	r9, #0
 8007992:	9304      	str	r3, [sp, #16]
 8007994:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007996:	930a      	str	r3, [sp, #40]	; 0x28
 8007998:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800799c:	464f      	mov	r7, r9
 800799e:	220a      	movs	r2, #10
 80079a0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80079a2:	7806      	ldrb	r6, [r0, #0]
 80079a4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80079a8:	b2d9      	uxtb	r1, r3
 80079aa:	2909      	cmp	r1, #9
 80079ac:	d92a      	bls.n	8007a04 <_strtod_l+0x1bc>
 80079ae:	9907      	ldr	r1, [sp, #28]
 80079b0:	462a      	mov	r2, r5
 80079b2:	f002 ff79 	bl	800a8a8 <strncmp>
 80079b6:	b398      	cbz	r0, 8007a20 <_strtod_l+0x1d8>
 80079b8:	2000      	movs	r0, #0
 80079ba:	4633      	mov	r3, r6
 80079bc:	463d      	mov	r5, r7
 80079be:	9007      	str	r0, [sp, #28]
 80079c0:	4602      	mov	r2, r0
 80079c2:	2b65      	cmp	r3, #101	; 0x65
 80079c4:	d001      	beq.n	80079ca <_strtod_l+0x182>
 80079c6:	2b45      	cmp	r3, #69	; 0x45
 80079c8:	d118      	bne.n	80079fc <_strtod_l+0x1b4>
 80079ca:	b91d      	cbnz	r5, 80079d4 <_strtod_l+0x18c>
 80079cc:	9b04      	ldr	r3, [sp, #16]
 80079ce:	4303      	orrs	r3, r0
 80079d0:	d098      	beq.n	8007904 <_strtod_l+0xbc>
 80079d2:	2500      	movs	r5, #0
 80079d4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80079d8:	f108 0301 	add.w	r3, r8, #1
 80079dc:	931d      	str	r3, [sp, #116]	; 0x74
 80079de:	f898 3001 	ldrb.w	r3, [r8, #1]
 80079e2:	2b2b      	cmp	r3, #43	; 0x2b
 80079e4:	d075      	beq.n	8007ad2 <_strtod_l+0x28a>
 80079e6:	2b2d      	cmp	r3, #45	; 0x2d
 80079e8:	d07b      	beq.n	8007ae2 <_strtod_l+0x29a>
 80079ea:	f04f 0c00 	mov.w	ip, #0
 80079ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80079f2:	2909      	cmp	r1, #9
 80079f4:	f240 8082 	bls.w	8007afc <_strtod_l+0x2b4>
 80079f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80079fc:	2600      	movs	r6, #0
 80079fe:	e09d      	b.n	8007b3c <_strtod_l+0x2f4>
 8007a00:	2300      	movs	r3, #0
 8007a02:	e7c4      	b.n	800798e <_strtod_l+0x146>
 8007a04:	2f08      	cmp	r7, #8
 8007a06:	bfd8      	it	le
 8007a08:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007a0a:	f100 0001 	add.w	r0, r0, #1
 8007a0e:	bfda      	itte	le
 8007a10:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a14:	9309      	strle	r3, [sp, #36]	; 0x24
 8007a16:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007a1a:	3701      	adds	r7, #1
 8007a1c:	901d      	str	r0, [sp, #116]	; 0x74
 8007a1e:	e7bf      	b.n	80079a0 <_strtod_l+0x158>
 8007a20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a22:	195a      	adds	r2, r3, r5
 8007a24:	921d      	str	r2, [sp, #116]	; 0x74
 8007a26:	5d5b      	ldrb	r3, [r3, r5]
 8007a28:	2f00      	cmp	r7, #0
 8007a2a:	d037      	beq.n	8007a9c <_strtod_l+0x254>
 8007a2c:	9007      	str	r0, [sp, #28]
 8007a2e:	463d      	mov	r5, r7
 8007a30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007a34:	2a09      	cmp	r2, #9
 8007a36:	d912      	bls.n	8007a5e <_strtod_l+0x216>
 8007a38:	2201      	movs	r2, #1
 8007a3a:	e7c2      	b.n	80079c2 <_strtod_l+0x17a>
 8007a3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	921d      	str	r2, [sp, #116]	; 0x74
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	3001      	adds	r0, #1
 8007a46:	2b30      	cmp	r3, #48	; 0x30
 8007a48:	d0f8      	beq.n	8007a3c <_strtod_l+0x1f4>
 8007a4a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007a4e:	2a08      	cmp	r2, #8
 8007a50:	f200 84db 	bhi.w	800840a <_strtod_l+0xbc2>
 8007a54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007a56:	9007      	str	r0, [sp, #28]
 8007a58:	2000      	movs	r0, #0
 8007a5a:	920a      	str	r2, [sp, #40]	; 0x28
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	3b30      	subs	r3, #48	; 0x30
 8007a60:	f100 0201 	add.w	r2, r0, #1
 8007a64:	d014      	beq.n	8007a90 <_strtod_l+0x248>
 8007a66:	9907      	ldr	r1, [sp, #28]
 8007a68:	4411      	add	r1, r2
 8007a6a:	9107      	str	r1, [sp, #28]
 8007a6c:	462a      	mov	r2, r5
 8007a6e:	eb00 0e05 	add.w	lr, r0, r5
 8007a72:	210a      	movs	r1, #10
 8007a74:	4572      	cmp	r2, lr
 8007a76:	d113      	bne.n	8007aa0 <_strtod_l+0x258>
 8007a78:	182a      	adds	r2, r5, r0
 8007a7a:	2a08      	cmp	r2, #8
 8007a7c:	f105 0501 	add.w	r5, r5, #1
 8007a80:	4405      	add	r5, r0
 8007a82:	dc1c      	bgt.n	8007abe <_strtod_l+0x276>
 8007a84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a86:	220a      	movs	r2, #10
 8007a88:	fb02 3301 	mla	r3, r2, r1, r3
 8007a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a8e:	2200      	movs	r2, #0
 8007a90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a92:	1c59      	adds	r1, r3, #1
 8007a94:	911d      	str	r1, [sp, #116]	; 0x74
 8007a96:	785b      	ldrb	r3, [r3, #1]
 8007a98:	4610      	mov	r0, r2
 8007a9a:	e7c9      	b.n	8007a30 <_strtod_l+0x1e8>
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	e7d2      	b.n	8007a46 <_strtod_l+0x1fe>
 8007aa0:	2a08      	cmp	r2, #8
 8007aa2:	dc04      	bgt.n	8007aae <_strtod_l+0x266>
 8007aa4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007aa6:	434e      	muls	r6, r1
 8007aa8:	9609      	str	r6, [sp, #36]	; 0x24
 8007aaa:	3201      	adds	r2, #1
 8007aac:	e7e2      	b.n	8007a74 <_strtod_l+0x22c>
 8007aae:	f102 0c01 	add.w	ip, r2, #1
 8007ab2:	f1bc 0f10 	cmp.w	ip, #16
 8007ab6:	bfd8      	it	le
 8007ab8:	fb01 f909 	mulle.w	r9, r1, r9
 8007abc:	e7f5      	b.n	8007aaa <_strtod_l+0x262>
 8007abe:	2d10      	cmp	r5, #16
 8007ac0:	bfdc      	itt	le
 8007ac2:	220a      	movle	r2, #10
 8007ac4:	fb02 3909 	mlale	r9, r2, r9, r3
 8007ac8:	e7e1      	b.n	8007a8e <_strtod_l+0x246>
 8007aca:	2300      	movs	r3, #0
 8007acc:	9307      	str	r3, [sp, #28]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	e77c      	b.n	80079cc <_strtod_l+0x184>
 8007ad2:	f04f 0c00 	mov.w	ip, #0
 8007ad6:	f108 0302 	add.w	r3, r8, #2
 8007ada:	931d      	str	r3, [sp, #116]	; 0x74
 8007adc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007ae0:	e785      	b.n	80079ee <_strtod_l+0x1a6>
 8007ae2:	f04f 0c01 	mov.w	ip, #1
 8007ae6:	e7f6      	b.n	8007ad6 <_strtod_l+0x28e>
 8007ae8:	0800b408 	.word	0x0800b408
 8007aec:	0800b1b8 	.word	0x0800b1b8
 8007af0:	7ff00000 	.word	0x7ff00000
 8007af4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007af6:	1c59      	adds	r1, r3, #1
 8007af8:	911d      	str	r1, [sp, #116]	; 0x74
 8007afa:	785b      	ldrb	r3, [r3, #1]
 8007afc:	2b30      	cmp	r3, #48	; 0x30
 8007afe:	d0f9      	beq.n	8007af4 <_strtod_l+0x2ac>
 8007b00:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007b04:	2908      	cmp	r1, #8
 8007b06:	f63f af79 	bhi.w	80079fc <_strtod_l+0x1b4>
 8007b0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007b0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b10:	9308      	str	r3, [sp, #32]
 8007b12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b14:	1c59      	adds	r1, r3, #1
 8007b16:	911d      	str	r1, [sp, #116]	; 0x74
 8007b18:	785b      	ldrb	r3, [r3, #1]
 8007b1a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007b1e:	2e09      	cmp	r6, #9
 8007b20:	d937      	bls.n	8007b92 <_strtod_l+0x34a>
 8007b22:	9e08      	ldr	r6, [sp, #32]
 8007b24:	1b89      	subs	r1, r1, r6
 8007b26:	2908      	cmp	r1, #8
 8007b28:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007b2c:	dc02      	bgt.n	8007b34 <_strtod_l+0x2ec>
 8007b2e:	4576      	cmp	r6, lr
 8007b30:	bfa8      	it	ge
 8007b32:	4676      	movge	r6, lr
 8007b34:	f1bc 0f00 	cmp.w	ip, #0
 8007b38:	d000      	beq.n	8007b3c <_strtod_l+0x2f4>
 8007b3a:	4276      	negs	r6, r6
 8007b3c:	2d00      	cmp	r5, #0
 8007b3e:	d14f      	bne.n	8007be0 <_strtod_l+0x398>
 8007b40:	9904      	ldr	r1, [sp, #16]
 8007b42:	4301      	orrs	r1, r0
 8007b44:	f47f aec2 	bne.w	80078cc <_strtod_l+0x84>
 8007b48:	2a00      	cmp	r2, #0
 8007b4a:	f47f aedb 	bne.w	8007904 <_strtod_l+0xbc>
 8007b4e:	2b69      	cmp	r3, #105	; 0x69
 8007b50:	d027      	beq.n	8007ba2 <_strtod_l+0x35a>
 8007b52:	dc24      	bgt.n	8007b9e <_strtod_l+0x356>
 8007b54:	2b49      	cmp	r3, #73	; 0x49
 8007b56:	d024      	beq.n	8007ba2 <_strtod_l+0x35a>
 8007b58:	2b4e      	cmp	r3, #78	; 0x4e
 8007b5a:	f47f aed3 	bne.w	8007904 <_strtod_l+0xbc>
 8007b5e:	499e      	ldr	r1, [pc, #632]	; (8007dd8 <_strtod_l+0x590>)
 8007b60:	a81d      	add	r0, sp, #116	; 0x74
 8007b62:	f001 ff23 	bl	80099ac <__match>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	f43f aecc 	beq.w	8007904 <_strtod_l+0xbc>
 8007b6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	2b28      	cmp	r3, #40	; 0x28
 8007b72:	d12d      	bne.n	8007bd0 <_strtod_l+0x388>
 8007b74:	4999      	ldr	r1, [pc, #612]	; (8007ddc <_strtod_l+0x594>)
 8007b76:	aa20      	add	r2, sp, #128	; 0x80
 8007b78:	a81d      	add	r0, sp, #116	; 0x74
 8007b7a:	f001 ff2b 	bl	80099d4 <__hexnan>
 8007b7e:	2805      	cmp	r0, #5
 8007b80:	d126      	bne.n	8007bd0 <_strtod_l+0x388>
 8007b82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b84:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007b88:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007b8c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007b90:	e69c      	b.n	80078cc <_strtod_l+0x84>
 8007b92:	210a      	movs	r1, #10
 8007b94:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007b98:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007b9c:	e7b9      	b.n	8007b12 <_strtod_l+0x2ca>
 8007b9e:	2b6e      	cmp	r3, #110	; 0x6e
 8007ba0:	e7db      	b.n	8007b5a <_strtod_l+0x312>
 8007ba2:	498f      	ldr	r1, [pc, #572]	; (8007de0 <_strtod_l+0x598>)
 8007ba4:	a81d      	add	r0, sp, #116	; 0x74
 8007ba6:	f001 ff01 	bl	80099ac <__match>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	f43f aeaa 	beq.w	8007904 <_strtod_l+0xbc>
 8007bb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bb2:	498c      	ldr	r1, [pc, #560]	; (8007de4 <_strtod_l+0x59c>)
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	a81d      	add	r0, sp, #116	; 0x74
 8007bb8:	931d      	str	r3, [sp, #116]	; 0x74
 8007bba:	f001 fef7 	bl	80099ac <__match>
 8007bbe:	b910      	cbnz	r0, 8007bc6 <_strtod_l+0x37e>
 8007bc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	931d      	str	r3, [sp, #116]	; 0x74
 8007bc6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007df4 <_strtod_l+0x5ac>
 8007bca:	f04f 0a00 	mov.w	sl, #0
 8007bce:	e67d      	b.n	80078cc <_strtod_l+0x84>
 8007bd0:	4885      	ldr	r0, [pc, #532]	; (8007de8 <_strtod_l+0x5a0>)
 8007bd2:	f002 fe61 	bl	800a898 <nan>
 8007bd6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007bda:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007bde:	e675      	b.n	80078cc <_strtod_l+0x84>
 8007be0:	9b07      	ldr	r3, [sp, #28]
 8007be2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007be4:	1af3      	subs	r3, r6, r3
 8007be6:	2f00      	cmp	r7, #0
 8007be8:	bf08      	it	eq
 8007bea:	462f      	moveq	r7, r5
 8007bec:	2d10      	cmp	r5, #16
 8007bee:	9308      	str	r3, [sp, #32]
 8007bf0:	46a8      	mov	r8, r5
 8007bf2:	bfa8      	it	ge
 8007bf4:	f04f 0810 	movge.w	r8, #16
 8007bf8:	f7f8 fca4 	bl	8000544 <__aeabi_ui2d>
 8007bfc:	2d09      	cmp	r5, #9
 8007bfe:	4682      	mov	sl, r0
 8007c00:	468b      	mov	fp, r1
 8007c02:	dd13      	ble.n	8007c2c <_strtod_l+0x3e4>
 8007c04:	4b79      	ldr	r3, [pc, #484]	; (8007dec <_strtod_l+0x5a4>)
 8007c06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007c0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c0e:	f7f8 fd13 	bl	8000638 <__aeabi_dmul>
 8007c12:	4682      	mov	sl, r0
 8007c14:	4648      	mov	r0, r9
 8007c16:	468b      	mov	fp, r1
 8007c18:	f7f8 fc94 	bl	8000544 <__aeabi_ui2d>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4650      	mov	r0, sl
 8007c22:	4659      	mov	r1, fp
 8007c24:	f7f8 fb52 	bl	80002cc <__adddf3>
 8007c28:	4682      	mov	sl, r0
 8007c2a:	468b      	mov	fp, r1
 8007c2c:	2d0f      	cmp	r5, #15
 8007c2e:	dc38      	bgt.n	8007ca2 <_strtod_l+0x45a>
 8007c30:	9b08      	ldr	r3, [sp, #32]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f43f ae4a 	beq.w	80078cc <_strtod_l+0x84>
 8007c38:	dd24      	ble.n	8007c84 <_strtod_l+0x43c>
 8007c3a:	2b16      	cmp	r3, #22
 8007c3c:	dc0b      	bgt.n	8007c56 <_strtod_l+0x40e>
 8007c3e:	4d6b      	ldr	r5, [pc, #428]	; (8007dec <_strtod_l+0x5a4>)
 8007c40:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007c44:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007c48:	4652      	mov	r2, sl
 8007c4a:	465b      	mov	r3, fp
 8007c4c:	f7f8 fcf4 	bl	8000638 <__aeabi_dmul>
 8007c50:	4682      	mov	sl, r0
 8007c52:	468b      	mov	fp, r1
 8007c54:	e63a      	b.n	80078cc <_strtod_l+0x84>
 8007c56:	9a08      	ldr	r2, [sp, #32]
 8007c58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	db20      	blt.n	8007ca2 <_strtod_l+0x45a>
 8007c60:	4c62      	ldr	r4, [pc, #392]	; (8007dec <_strtod_l+0x5a4>)
 8007c62:	f1c5 050f 	rsb	r5, r5, #15
 8007c66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007c6a:	4652      	mov	r2, sl
 8007c6c:	465b      	mov	r3, fp
 8007c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c72:	f7f8 fce1 	bl	8000638 <__aeabi_dmul>
 8007c76:	9b08      	ldr	r3, [sp, #32]
 8007c78:	1b5d      	subs	r5, r3, r5
 8007c7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007c7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c82:	e7e3      	b.n	8007c4c <_strtod_l+0x404>
 8007c84:	9b08      	ldr	r3, [sp, #32]
 8007c86:	3316      	adds	r3, #22
 8007c88:	db0b      	blt.n	8007ca2 <_strtod_l+0x45a>
 8007c8a:	9b07      	ldr	r3, [sp, #28]
 8007c8c:	4a57      	ldr	r2, [pc, #348]	; (8007dec <_strtod_l+0x5a4>)
 8007c8e:	1b9e      	subs	r6, r3, r6
 8007c90:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007c94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c98:	4650      	mov	r0, sl
 8007c9a:	4659      	mov	r1, fp
 8007c9c:	f7f8 fdf6 	bl	800088c <__aeabi_ddiv>
 8007ca0:	e7d6      	b.n	8007c50 <_strtod_l+0x408>
 8007ca2:	9b08      	ldr	r3, [sp, #32]
 8007ca4:	eba5 0808 	sub.w	r8, r5, r8
 8007ca8:	4498      	add	r8, r3
 8007caa:	f1b8 0f00 	cmp.w	r8, #0
 8007cae:	dd71      	ble.n	8007d94 <_strtod_l+0x54c>
 8007cb0:	f018 030f 	ands.w	r3, r8, #15
 8007cb4:	d00a      	beq.n	8007ccc <_strtod_l+0x484>
 8007cb6:	494d      	ldr	r1, [pc, #308]	; (8007dec <_strtod_l+0x5a4>)
 8007cb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cbc:	4652      	mov	r2, sl
 8007cbe:	465b      	mov	r3, fp
 8007cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cc4:	f7f8 fcb8 	bl	8000638 <__aeabi_dmul>
 8007cc8:	4682      	mov	sl, r0
 8007cca:	468b      	mov	fp, r1
 8007ccc:	f038 080f 	bics.w	r8, r8, #15
 8007cd0:	d04d      	beq.n	8007d6e <_strtod_l+0x526>
 8007cd2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007cd6:	dd22      	ble.n	8007d1e <_strtod_l+0x4d6>
 8007cd8:	2500      	movs	r5, #0
 8007cda:	462e      	mov	r6, r5
 8007cdc:	9509      	str	r5, [sp, #36]	; 0x24
 8007cde:	9507      	str	r5, [sp, #28]
 8007ce0:	2322      	movs	r3, #34	; 0x22
 8007ce2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007df4 <_strtod_l+0x5ac>
 8007ce6:	6023      	str	r3, [r4, #0]
 8007ce8:	f04f 0a00 	mov.w	sl, #0
 8007cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f43f adec 	beq.w	80078cc <_strtod_l+0x84>
 8007cf4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f001 ff84 	bl	8009c04 <_Bfree>
 8007cfc:	9907      	ldr	r1, [sp, #28]
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f001 ff80 	bl	8009c04 <_Bfree>
 8007d04:	4631      	mov	r1, r6
 8007d06:	4620      	mov	r0, r4
 8007d08:	f001 ff7c 	bl	8009c04 <_Bfree>
 8007d0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f001 ff78 	bl	8009c04 <_Bfree>
 8007d14:	4629      	mov	r1, r5
 8007d16:	4620      	mov	r0, r4
 8007d18:	f001 ff74 	bl	8009c04 <_Bfree>
 8007d1c:	e5d6      	b.n	80078cc <_strtod_l+0x84>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007d24:	4650      	mov	r0, sl
 8007d26:	4659      	mov	r1, fp
 8007d28:	4699      	mov	r9, r3
 8007d2a:	f1b8 0f01 	cmp.w	r8, #1
 8007d2e:	dc21      	bgt.n	8007d74 <_strtod_l+0x52c>
 8007d30:	b10b      	cbz	r3, 8007d36 <_strtod_l+0x4ee>
 8007d32:	4682      	mov	sl, r0
 8007d34:	468b      	mov	fp, r1
 8007d36:	4b2e      	ldr	r3, [pc, #184]	; (8007df0 <_strtod_l+0x5a8>)
 8007d38:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007d3c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007d40:	4652      	mov	r2, sl
 8007d42:	465b      	mov	r3, fp
 8007d44:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007d48:	f7f8 fc76 	bl	8000638 <__aeabi_dmul>
 8007d4c:	4b29      	ldr	r3, [pc, #164]	; (8007df4 <_strtod_l+0x5ac>)
 8007d4e:	460a      	mov	r2, r1
 8007d50:	400b      	ands	r3, r1
 8007d52:	4929      	ldr	r1, [pc, #164]	; (8007df8 <_strtod_l+0x5b0>)
 8007d54:	428b      	cmp	r3, r1
 8007d56:	4682      	mov	sl, r0
 8007d58:	d8be      	bhi.n	8007cd8 <_strtod_l+0x490>
 8007d5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007d5e:	428b      	cmp	r3, r1
 8007d60:	bf86      	itte	hi
 8007d62:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007dfc <_strtod_l+0x5b4>
 8007d66:	f04f 3aff 	movhi.w	sl, #4294967295
 8007d6a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007d6e:	2300      	movs	r3, #0
 8007d70:	9304      	str	r3, [sp, #16]
 8007d72:	e081      	b.n	8007e78 <_strtod_l+0x630>
 8007d74:	f018 0f01 	tst.w	r8, #1
 8007d78:	d007      	beq.n	8007d8a <_strtod_l+0x542>
 8007d7a:	4b1d      	ldr	r3, [pc, #116]	; (8007df0 <_strtod_l+0x5a8>)
 8007d7c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f7f8 fc58 	bl	8000638 <__aeabi_dmul>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f109 0901 	add.w	r9, r9, #1
 8007d8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d92:	e7ca      	b.n	8007d2a <_strtod_l+0x4e2>
 8007d94:	d0eb      	beq.n	8007d6e <_strtod_l+0x526>
 8007d96:	f1c8 0800 	rsb	r8, r8, #0
 8007d9a:	f018 020f 	ands.w	r2, r8, #15
 8007d9e:	d00a      	beq.n	8007db6 <_strtod_l+0x56e>
 8007da0:	4b12      	ldr	r3, [pc, #72]	; (8007dec <_strtod_l+0x5a4>)
 8007da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007da6:	4650      	mov	r0, sl
 8007da8:	4659      	mov	r1, fp
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	f7f8 fd6d 	bl	800088c <__aeabi_ddiv>
 8007db2:	4682      	mov	sl, r0
 8007db4:	468b      	mov	fp, r1
 8007db6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007dba:	d0d8      	beq.n	8007d6e <_strtod_l+0x526>
 8007dbc:	f1b8 0f1f 	cmp.w	r8, #31
 8007dc0:	dd1e      	ble.n	8007e00 <_strtod_l+0x5b8>
 8007dc2:	2500      	movs	r5, #0
 8007dc4:	462e      	mov	r6, r5
 8007dc6:	9509      	str	r5, [sp, #36]	; 0x24
 8007dc8:	9507      	str	r5, [sp, #28]
 8007dca:	2322      	movs	r3, #34	; 0x22
 8007dcc:	f04f 0a00 	mov.w	sl, #0
 8007dd0:	f04f 0b00 	mov.w	fp, #0
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	e789      	b.n	8007cec <_strtod_l+0x4a4>
 8007dd8:	0800b189 	.word	0x0800b189
 8007ddc:	0800b1cc 	.word	0x0800b1cc
 8007de0:	0800b181 	.word	0x0800b181
 8007de4:	0800b30c 	.word	0x0800b30c
 8007de8:	0800b5c8 	.word	0x0800b5c8
 8007dec:	0800b4a8 	.word	0x0800b4a8
 8007df0:	0800b480 	.word	0x0800b480
 8007df4:	7ff00000 	.word	0x7ff00000
 8007df8:	7ca00000 	.word	0x7ca00000
 8007dfc:	7fefffff 	.word	0x7fefffff
 8007e00:	f018 0310 	ands.w	r3, r8, #16
 8007e04:	bf18      	it	ne
 8007e06:	236a      	movne	r3, #106	; 0x6a
 8007e08:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80081c0 <_strtod_l+0x978>
 8007e0c:	9304      	str	r3, [sp, #16]
 8007e0e:	4650      	mov	r0, sl
 8007e10:	4659      	mov	r1, fp
 8007e12:	2300      	movs	r3, #0
 8007e14:	f018 0f01 	tst.w	r8, #1
 8007e18:	d004      	beq.n	8007e24 <_strtod_l+0x5dc>
 8007e1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007e1e:	f7f8 fc0b 	bl	8000638 <__aeabi_dmul>
 8007e22:	2301      	movs	r3, #1
 8007e24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007e28:	f109 0908 	add.w	r9, r9, #8
 8007e2c:	d1f2      	bne.n	8007e14 <_strtod_l+0x5cc>
 8007e2e:	b10b      	cbz	r3, 8007e34 <_strtod_l+0x5ec>
 8007e30:	4682      	mov	sl, r0
 8007e32:	468b      	mov	fp, r1
 8007e34:	9b04      	ldr	r3, [sp, #16]
 8007e36:	b1bb      	cbz	r3, 8007e68 <_strtod_l+0x620>
 8007e38:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007e3c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	4659      	mov	r1, fp
 8007e44:	dd10      	ble.n	8007e68 <_strtod_l+0x620>
 8007e46:	2b1f      	cmp	r3, #31
 8007e48:	f340 8128 	ble.w	800809c <_strtod_l+0x854>
 8007e4c:	2b34      	cmp	r3, #52	; 0x34
 8007e4e:	bfde      	ittt	le
 8007e50:	3b20      	suble	r3, #32
 8007e52:	f04f 32ff 	movle.w	r2, #4294967295
 8007e56:	fa02 f303 	lslle.w	r3, r2, r3
 8007e5a:	f04f 0a00 	mov.w	sl, #0
 8007e5e:	bfcc      	ite	gt
 8007e60:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007e64:	ea03 0b01 	andle.w	fp, r3, r1
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	4650      	mov	r0, sl
 8007e6e:	4659      	mov	r1, fp
 8007e70:	f7f8 fe4a 	bl	8000b08 <__aeabi_dcmpeq>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d1a4      	bne.n	8007dc2 <_strtod_l+0x57a>
 8007e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e7e:	462b      	mov	r3, r5
 8007e80:	463a      	mov	r2, r7
 8007e82:	4620      	mov	r0, r4
 8007e84:	f001 ff2a 	bl	8009cdc <__s2b>
 8007e88:	9009      	str	r0, [sp, #36]	; 0x24
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	f43f af24 	beq.w	8007cd8 <_strtod_l+0x490>
 8007e90:	9b07      	ldr	r3, [sp, #28]
 8007e92:	1b9e      	subs	r6, r3, r6
 8007e94:	9b08      	ldr	r3, [sp, #32]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	bfb4      	ite	lt
 8007e9a:	4633      	movlt	r3, r6
 8007e9c:	2300      	movge	r3, #0
 8007e9e:	9310      	str	r3, [sp, #64]	; 0x40
 8007ea0:	9b08      	ldr	r3, [sp, #32]
 8007ea2:	2500      	movs	r5, #0
 8007ea4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007ea8:	9318      	str	r3, [sp, #96]	; 0x60
 8007eaa:	462e      	mov	r6, r5
 8007eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eae:	4620      	mov	r0, r4
 8007eb0:	6859      	ldr	r1, [r3, #4]
 8007eb2:	f001 fe67 	bl	8009b84 <_Balloc>
 8007eb6:	9007      	str	r0, [sp, #28]
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	f43f af11 	beq.w	8007ce0 <_strtod_l+0x498>
 8007ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec0:	691a      	ldr	r2, [r3, #16]
 8007ec2:	3202      	adds	r2, #2
 8007ec4:	f103 010c 	add.w	r1, r3, #12
 8007ec8:	0092      	lsls	r2, r2, #2
 8007eca:	300c      	adds	r0, #12
 8007ecc:	f7fe fcd1 	bl	8006872 <memcpy>
 8007ed0:	ec4b ab10 	vmov	d0, sl, fp
 8007ed4:	aa20      	add	r2, sp, #128	; 0x80
 8007ed6:	a91f      	add	r1, sp, #124	; 0x7c
 8007ed8:	4620      	mov	r0, r4
 8007eda:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007ede:	f002 fa39 	bl	800a354 <__d2b>
 8007ee2:	901e      	str	r0, [sp, #120]	; 0x78
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	f43f aefb 	beq.w	8007ce0 <_strtod_l+0x498>
 8007eea:	2101      	movs	r1, #1
 8007eec:	4620      	mov	r0, r4
 8007eee:	f001 ff8f 	bl	8009e10 <__i2b>
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	f43f aef3 	beq.w	8007ce0 <_strtod_l+0x498>
 8007efa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007efc:	9904      	ldr	r1, [sp, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	bfab      	itete	ge
 8007f02:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007f04:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007f06:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007f08:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8007f0c:	bfac      	ite	ge
 8007f0e:	eb03 0902 	addge.w	r9, r3, r2
 8007f12:	1ad7      	sublt	r7, r2, r3
 8007f14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f16:	eba3 0801 	sub.w	r8, r3, r1
 8007f1a:	4490      	add	r8, r2
 8007f1c:	4ba3      	ldr	r3, [pc, #652]	; (80081ac <_strtod_l+0x964>)
 8007f1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f22:	4598      	cmp	r8, r3
 8007f24:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f28:	f280 80cc 	bge.w	80080c4 <_strtod_l+0x87c>
 8007f2c:	eba3 0308 	sub.w	r3, r3, r8
 8007f30:	2b1f      	cmp	r3, #31
 8007f32:	eba2 0203 	sub.w	r2, r2, r3
 8007f36:	f04f 0101 	mov.w	r1, #1
 8007f3a:	f300 80b6 	bgt.w	80080aa <_strtod_l+0x862>
 8007f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f42:	9311      	str	r3, [sp, #68]	; 0x44
 8007f44:	2300      	movs	r3, #0
 8007f46:	930c      	str	r3, [sp, #48]	; 0x30
 8007f48:	eb09 0802 	add.w	r8, r9, r2
 8007f4c:	9b04      	ldr	r3, [sp, #16]
 8007f4e:	45c1      	cmp	r9, r8
 8007f50:	4417      	add	r7, r2
 8007f52:	441f      	add	r7, r3
 8007f54:	464b      	mov	r3, r9
 8007f56:	bfa8      	it	ge
 8007f58:	4643      	movge	r3, r8
 8007f5a:	42bb      	cmp	r3, r7
 8007f5c:	bfa8      	it	ge
 8007f5e:	463b      	movge	r3, r7
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	bfc2      	ittt	gt
 8007f64:	eba8 0803 	subgt.w	r8, r8, r3
 8007f68:	1aff      	subgt	r7, r7, r3
 8007f6a:	eba9 0903 	subgt.w	r9, r9, r3
 8007f6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	dd17      	ble.n	8007fa4 <_strtod_l+0x75c>
 8007f74:	4631      	mov	r1, r6
 8007f76:	461a      	mov	r2, r3
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f002 f805 	bl	8009f88 <__pow5mult>
 8007f7e:	4606      	mov	r6, r0
 8007f80:	2800      	cmp	r0, #0
 8007f82:	f43f aead 	beq.w	8007ce0 <_strtod_l+0x498>
 8007f86:	4601      	mov	r1, r0
 8007f88:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f001 ff56 	bl	8009e3c <__multiply>
 8007f90:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f92:	2800      	cmp	r0, #0
 8007f94:	f43f aea4 	beq.w	8007ce0 <_strtod_l+0x498>
 8007f98:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f001 fe32 	bl	8009c04 <_Bfree>
 8007fa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fa2:	931e      	str	r3, [sp, #120]	; 0x78
 8007fa4:	f1b8 0f00 	cmp.w	r8, #0
 8007fa8:	f300 8091 	bgt.w	80080ce <_strtod_l+0x886>
 8007fac:	9b08      	ldr	r3, [sp, #32]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	dd08      	ble.n	8007fc4 <_strtod_l+0x77c>
 8007fb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007fb4:	9907      	ldr	r1, [sp, #28]
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f001 ffe6 	bl	8009f88 <__pow5mult>
 8007fbc:	9007      	str	r0, [sp, #28]
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	f43f ae8e 	beq.w	8007ce0 <_strtod_l+0x498>
 8007fc4:	2f00      	cmp	r7, #0
 8007fc6:	dd08      	ble.n	8007fda <_strtod_l+0x792>
 8007fc8:	9907      	ldr	r1, [sp, #28]
 8007fca:	463a      	mov	r2, r7
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f002 f835 	bl	800a03c <__lshift>
 8007fd2:	9007      	str	r0, [sp, #28]
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f43f ae83 	beq.w	8007ce0 <_strtod_l+0x498>
 8007fda:	f1b9 0f00 	cmp.w	r9, #0
 8007fde:	dd08      	ble.n	8007ff2 <_strtod_l+0x7aa>
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	464a      	mov	r2, r9
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f002 f829 	bl	800a03c <__lshift>
 8007fea:	4606      	mov	r6, r0
 8007fec:	2800      	cmp	r0, #0
 8007fee:	f43f ae77 	beq.w	8007ce0 <_strtod_l+0x498>
 8007ff2:	9a07      	ldr	r2, [sp, #28]
 8007ff4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f002 f8a8 	bl	800a14c <__mdiff>
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	2800      	cmp	r0, #0
 8008000:	f43f ae6e 	beq.w	8007ce0 <_strtod_l+0x498>
 8008004:	68c3      	ldr	r3, [r0, #12]
 8008006:	930f      	str	r3, [sp, #60]	; 0x3c
 8008008:	2300      	movs	r3, #0
 800800a:	60c3      	str	r3, [r0, #12]
 800800c:	4631      	mov	r1, r6
 800800e:	f002 f881 	bl	800a114 <__mcmp>
 8008012:	2800      	cmp	r0, #0
 8008014:	da65      	bge.n	80080e2 <_strtod_l+0x89a>
 8008016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008018:	ea53 030a 	orrs.w	r3, r3, sl
 800801c:	f040 8087 	bne.w	800812e <_strtod_l+0x8e6>
 8008020:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008024:	2b00      	cmp	r3, #0
 8008026:	f040 8082 	bne.w	800812e <_strtod_l+0x8e6>
 800802a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800802e:	0d1b      	lsrs	r3, r3, #20
 8008030:	051b      	lsls	r3, r3, #20
 8008032:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008036:	d97a      	bls.n	800812e <_strtod_l+0x8e6>
 8008038:	696b      	ldr	r3, [r5, #20]
 800803a:	b913      	cbnz	r3, 8008042 <_strtod_l+0x7fa>
 800803c:	692b      	ldr	r3, [r5, #16]
 800803e:	2b01      	cmp	r3, #1
 8008040:	dd75      	ble.n	800812e <_strtod_l+0x8e6>
 8008042:	4629      	mov	r1, r5
 8008044:	2201      	movs	r2, #1
 8008046:	4620      	mov	r0, r4
 8008048:	f001 fff8 	bl	800a03c <__lshift>
 800804c:	4631      	mov	r1, r6
 800804e:	4605      	mov	r5, r0
 8008050:	f002 f860 	bl	800a114 <__mcmp>
 8008054:	2800      	cmp	r0, #0
 8008056:	dd6a      	ble.n	800812e <_strtod_l+0x8e6>
 8008058:	9904      	ldr	r1, [sp, #16]
 800805a:	4a55      	ldr	r2, [pc, #340]	; (80081b0 <_strtod_l+0x968>)
 800805c:	465b      	mov	r3, fp
 800805e:	2900      	cmp	r1, #0
 8008060:	f000 8085 	beq.w	800816e <_strtod_l+0x926>
 8008064:	ea02 010b 	and.w	r1, r2, fp
 8008068:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800806c:	dc7f      	bgt.n	800816e <_strtod_l+0x926>
 800806e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008072:	f77f aeaa 	ble.w	8007dca <_strtod_l+0x582>
 8008076:	4a4f      	ldr	r2, [pc, #316]	; (80081b4 <_strtod_l+0x96c>)
 8008078:	2300      	movs	r3, #0
 800807a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800807e:	4650      	mov	r0, sl
 8008080:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008084:	4659      	mov	r1, fp
 8008086:	f7f8 fad7 	bl	8000638 <__aeabi_dmul>
 800808a:	460b      	mov	r3, r1
 800808c:	4303      	orrs	r3, r0
 800808e:	bf08      	it	eq
 8008090:	2322      	moveq	r3, #34	; 0x22
 8008092:	4682      	mov	sl, r0
 8008094:	468b      	mov	fp, r1
 8008096:	bf08      	it	eq
 8008098:	6023      	streq	r3, [r4, #0]
 800809a:	e62b      	b.n	8007cf4 <_strtod_l+0x4ac>
 800809c:	f04f 32ff 	mov.w	r2, #4294967295
 80080a0:	fa02 f303 	lsl.w	r3, r2, r3
 80080a4:	ea03 0a0a 	and.w	sl, r3, sl
 80080a8:	e6de      	b.n	8007e68 <_strtod_l+0x620>
 80080aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80080ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80080b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80080b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80080ba:	fa01 f308 	lsl.w	r3, r1, r8
 80080be:	930c      	str	r3, [sp, #48]	; 0x30
 80080c0:	9111      	str	r1, [sp, #68]	; 0x44
 80080c2:	e741      	b.n	8007f48 <_strtod_l+0x700>
 80080c4:	2300      	movs	r3, #0
 80080c6:	930c      	str	r3, [sp, #48]	; 0x30
 80080c8:	2301      	movs	r3, #1
 80080ca:	9311      	str	r3, [sp, #68]	; 0x44
 80080cc:	e73c      	b.n	8007f48 <_strtod_l+0x700>
 80080ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80080d0:	4642      	mov	r2, r8
 80080d2:	4620      	mov	r0, r4
 80080d4:	f001 ffb2 	bl	800a03c <__lshift>
 80080d8:	901e      	str	r0, [sp, #120]	; 0x78
 80080da:	2800      	cmp	r0, #0
 80080dc:	f47f af66 	bne.w	8007fac <_strtod_l+0x764>
 80080e0:	e5fe      	b.n	8007ce0 <_strtod_l+0x498>
 80080e2:	465f      	mov	r7, fp
 80080e4:	d16e      	bne.n	80081c4 <_strtod_l+0x97c>
 80080e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080ec:	b342      	cbz	r2, 8008140 <_strtod_l+0x8f8>
 80080ee:	4a32      	ldr	r2, [pc, #200]	; (80081b8 <_strtod_l+0x970>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d128      	bne.n	8008146 <_strtod_l+0x8fe>
 80080f4:	9b04      	ldr	r3, [sp, #16]
 80080f6:	4650      	mov	r0, sl
 80080f8:	b1eb      	cbz	r3, 8008136 <_strtod_l+0x8ee>
 80080fa:	4a2d      	ldr	r2, [pc, #180]	; (80081b0 <_strtod_l+0x968>)
 80080fc:	403a      	ands	r2, r7
 80080fe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008102:	f04f 31ff 	mov.w	r1, #4294967295
 8008106:	d819      	bhi.n	800813c <_strtod_l+0x8f4>
 8008108:	0d12      	lsrs	r2, r2, #20
 800810a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800810e:	fa01 f303 	lsl.w	r3, r1, r3
 8008112:	4298      	cmp	r0, r3
 8008114:	d117      	bne.n	8008146 <_strtod_l+0x8fe>
 8008116:	4b29      	ldr	r3, [pc, #164]	; (80081bc <_strtod_l+0x974>)
 8008118:	429f      	cmp	r7, r3
 800811a:	d102      	bne.n	8008122 <_strtod_l+0x8da>
 800811c:	3001      	adds	r0, #1
 800811e:	f43f addf 	beq.w	8007ce0 <_strtod_l+0x498>
 8008122:	4b23      	ldr	r3, [pc, #140]	; (80081b0 <_strtod_l+0x968>)
 8008124:	403b      	ands	r3, r7
 8008126:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800812a:	f04f 0a00 	mov.w	sl, #0
 800812e:	9b04      	ldr	r3, [sp, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1a0      	bne.n	8008076 <_strtod_l+0x82e>
 8008134:	e5de      	b.n	8007cf4 <_strtod_l+0x4ac>
 8008136:	f04f 33ff 	mov.w	r3, #4294967295
 800813a:	e7ea      	b.n	8008112 <_strtod_l+0x8ca>
 800813c:	460b      	mov	r3, r1
 800813e:	e7e8      	b.n	8008112 <_strtod_l+0x8ca>
 8008140:	ea53 030a 	orrs.w	r3, r3, sl
 8008144:	d088      	beq.n	8008058 <_strtod_l+0x810>
 8008146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008148:	b1db      	cbz	r3, 8008182 <_strtod_l+0x93a>
 800814a:	423b      	tst	r3, r7
 800814c:	d0ef      	beq.n	800812e <_strtod_l+0x8e6>
 800814e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008150:	9a04      	ldr	r2, [sp, #16]
 8008152:	4650      	mov	r0, sl
 8008154:	4659      	mov	r1, fp
 8008156:	b1c3      	cbz	r3, 800818a <_strtod_l+0x942>
 8008158:	f7ff fb59 	bl	800780e <sulp>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008164:	f7f8 f8b2 	bl	80002cc <__adddf3>
 8008168:	4682      	mov	sl, r0
 800816a:	468b      	mov	fp, r1
 800816c:	e7df      	b.n	800812e <_strtod_l+0x8e6>
 800816e:	4013      	ands	r3, r2
 8008170:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008174:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008178:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800817c:	f04f 3aff 	mov.w	sl, #4294967295
 8008180:	e7d5      	b.n	800812e <_strtod_l+0x8e6>
 8008182:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008184:	ea13 0f0a 	tst.w	r3, sl
 8008188:	e7e0      	b.n	800814c <_strtod_l+0x904>
 800818a:	f7ff fb40 	bl	800780e <sulp>
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008196:	f7f8 f897 	bl	80002c8 <__aeabi_dsub>
 800819a:	2200      	movs	r2, #0
 800819c:	2300      	movs	r3, #0
 800819e:	4682      	mov	sl, r0
 80081a0:	468b      	mov	fp, r1
 80081a2:	f7f8 fcb1 	bl	8000b08 <__aeabi_dcmpeq>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d0c1      	beq.n	800812e <_strtod_l+0x8e6>
 80081aa:	e60e      	b.n	8007dca <_strtod_l+0x582>
 80081ac:	fffffc02 	.word	0xfffffc02
 80081b0:	7ff00000 	.word	0x7ff00000
 80081b4:	39500000 	.word	0x39500000
 80081b8:	000fffff 	.word	0x000fffff
 80081bc:	7fefffff 	.word	0x7fefffff
 80081c0:	0800b1e0 	.word	0x0800b1e0
 80081c4:	4631      	mov	r1, r6
 80081c6:	4628      	mov	r0, r5
 80081c8:	f002 f920 	bl	800a40c <__ratio>
 80081cc:	ec59 8b10 	vmov	r8, r9, d0
 80081d0:	ee10 0a10 	vmov	r0, s0
 80081d4:	2200      	movs	r2, #0
 80081d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081da:	4649      	mov	r1, r9
 80081dc:	f7f8 fca8 	bl	8000b30 <__aeabi_dcmple>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d07c      	beq.n	80082de <_strtod_l+0xa96>
 80081e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d04c      	beq.n	8008284 <_strtod_l+0xa3c>
 80081ea:	4b95      	ldr	r3, [pc, #596]	; (8008440 <_strtod_l+0xbf8>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80081f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008440 <_strtod_l+0xbf8>
 80081f6:	f04f 0800 	mov.w	r8, #0
 80081fa:	4b92      	ldr	r3, [pc, #584]	; (8008444 <_strtod_l+0xbfc>)
 80081fc:	403b      	ands	r3, r7
 80081fe:	9311      	str	r3, [sp, #68]	; 0x44
 8008200:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008202:	4b91      	ldr	r3, [pc, #580]	; (8008448 <_strtod_l+0xc00>)
 8008204:	429a      	cmp	r2, r3
 8008206:	f040 80b2 	bne.w	800836e <_strtod_l+0xb26>
 800820a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800820e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008212:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008216:	ec4b ab10 	vmov	d0, sl, fp
 800821a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800821e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008222:	f002 f81b 	bl	800a25c <__ulp>
 8008226:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800822a:	ec53 2b10 	vmov	r2, r3, d0
 800822e:	f7f8 fa03 	bl	8000638 <__aeabi_dmul>
 8008232:	4652      	mov	r2, sl
 8008234:	465b      	mov	r3, fp
 8008236:	f7f8 f849 	bl	80002cc <__adddf3>
 800823a:	460b      	mov	r3, r1
 800823c:	4981      	ldr	r1, [pc, #516]	; (8008444 <_strtod_l+0xbfc>)
 800823e:	4a83      	ldr	r2, [pc, #524]	; (800844c <_strtod_l+0xc04>)
 8008240:	4019      	ands	r1, r3
 8008242:	4291      	cmp	r1, r2
 8008244:	4682      	mov	sl, r0
 8008246:	d95e      	bls.n	8008306 <_strtod_l+0xabe>
 8008248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800824a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800824e:	4293      	cmp	r3, r2
 8008250:	d103      	bne.n	800825a <_strtod_l+0xa12>
 8008252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008254:	3301      	adds	r3, #1
 8008256:	f43f ad43 	beq.w	8007ce0 <_strtod_l+0x498>
 800825a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008458 <_strtod_l+0xc10>
 800825e:	f04f 3aff 	mov.w	sl, #4294967295
 8008262:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008264:	4620      	mov	r0, r4
 8008266:	f001 fccd 	bl	8009c04 <_Bfree>
 800826a:	9907      	ldr	r1, [sp, #28]
 800826c:	4620      	mov	r0, r4
 800826e:	f001 fcc9 	bl	8009c04 <_Bfree>
 8008272:	4631      	mov	r1, r6
 8008274:	4620      	mov	r0, r4
 8008276:	f001 fcc5 	bl	8009c04 <_Bfree>
 800827a:	4629      	mov	r1, r5
 800827c:	4620      	mov	r0, r4
 800827e:	f001 fcc1 	bl	8009c04 <_Bfree>
 8008282:	e613      	b.n	8007eac <_strtod_l+0x664>
 8008284:	f1ba 0f00 	cmp.w	sl, #0
 8008288:	d11b      	bne.n	80082c2 <_strtod_l+0xa7a>
 800828a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800828e:	b9f3      	cbnz	r3, 80082ce <_strtod_l+0xa86>
 8008290:	4b6b      	ldr	r3, [pc, #428]	; (8008440 <_strtod_l+0xbf8>)
 8008292:	2200      	movs	r2, #0
 8008294:	4640      	mov	r0, r8
 8008296:	4649      	mov	r1, r9
 8008298:	f7f8 fc40 	bl	8000b1c <__aeabi_dcmplt>
 800829c:	b9d0      	cbnz	r0, 80082d4 <_strtod_l+0xa8c>
 800829e:	4640      	mov	r0, r8
 80082a0:	4649      	mov	r1, r9
 80082a2:	4b6b      	ldr	r3, [pc, #428]	; (8008450 <_strtod_l+0xc08>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	f7f8 f9c7 	bl	8000638 <__aeabi_dmul>
 80082aa:	4680      	mov	r8, r0
 80082ac:	4689      	mov	r9, r1
 80082ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80082b2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80082b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80082b8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80082bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80082c0:	e79b      	b.n	80081fa <_strtod_l+0x9b2>
 80082c2:	f1ba 0f01 	cmp.w	sl, #1
 80082c6:	d102      	bne.n	80082ce <_strtod_l+0xa86>
 80082c8:	2f00      	cmp	r7, #0
 80082ca:	f43f ad7e 	beq.w	8007dca <_strtod_l+0x582>
 80082ce:	4b61      	ldr	r3, [pc, #388]	; (8008454 <_strtod_l+0xc0c>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	e78c      	b.n	80081ee <_strtod_l+0x9a6>
 80082d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008450 <_strtod_l+0xc08>
 80082d8:	f04f 0800 	mov.w	r8, #0
 80082dc:	e7e7      	b.n	80082ae <_strtod_l+0xa66>
 80082de:	4b5c      	ldr	r3, [pc, #368]	; (8008450 <_strtod_l+0xc08>)
 80082e0:	4640      	mov	r0, r8
 80082e2:	4649      	mov	r1, r9
 80082e4:	2200      	movs	r2, #0
 80082e6:	f7f8 f9a7 	bl	8000638 <__aeabi_dmul>
 80082ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082ec:	4680      	mov	r8, r0
 80082ee:	4689      	mov	r9, r1
 80082f0:	b933      	cbnz	r3, 8008300 <_strtod_l+0xab8>
 80082f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082f6:	9012      	str	r0, [sp, #72]	; 0x48
 80082f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80082fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80082fe:	e7dd      	b.n	80082bc <_strtod_l+0xa74>
 8008300:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008304:	e7f9      	b.n	80082fa <_strtod_l+0xab2>
 8008306:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800830a:	9b04      	ldr	r3, [sp, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1a8      	bne.n	8008262 <_strtod_l+0xa1a>
 8008310:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008314:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008316:	0d1b      	lsrs	r3, r3, #20
 8008318:	051b      	lsls	r3, r3, #20
 800831a:	429a      	cmp	r2, r3
 800831c:	d1a1      	bne.n	8008262 <_strtod_l+0xa1a>
 800831e:	4640      	mov	r0, r8
 8008320:	4649      	mov	r1, r9
 8008322:	f7f8 fce9 	bl	8000cf8 <__aeabi_d2lz>
 8008326:	f7f8 f959 	bl	80005dc <__aeabi_l2d>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	4640      	mov	r0, r8
 8008330:	4649      	mov	r1, r9
 8008332:	f7f7 ffc9 	bl	80002c8 <__aeabi_dsub>
 8008336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008338:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800833c:	ea43 030a 	orr.w	r3, r3, sl
 8008340:	4313      	orrs	r3, r2
 8008342:	4680      	mov	r8, r0
 8008344:	4689      	mov	r9, r1
 8008346:	d053      	beq.n	80083f0 <_strtod_l+0xba8>
 8008348:	a335      	add	r3, pc, #212	; (adr r3, 8008420 <_strtod_l+0xbd8>)
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	f7f8 fbe5 	bl	8000b1c <__aeabi_dcmplt>
 8008352:	2800      	cmp	r0, #0
 8008354:	f47f acce 	bne.w	8007cf4 <_strtod_l+0x4ac>
 8008358:	a333      	add	r3, pc, #204	; (adr r3, 8008428 <_strtod_l+0xbe0>)
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	4640      	mov	r0, r8
 8008360:	4649      	mov	r1, r9
 8008362:	f7f8 fbf9 	bl	8000b58 <__aeabi_dcmpgt>
 8008366:	2800      	cmp	r0, #0
 8008368:	f43f af7b 	beq.w	8008262 <_strtod_l+0xa1a>
 800836c:	e4c2      	b.n	8007cf4 <_strtod_l+0x4ac>
 800836e:	9b04      	ldr	r3, [sp, #16]
 8008370:	b333      	cbz	r3, 80083c0 <_strtod_l+0xb78>
 8008372:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008374:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008378:	d822      	bhi.n	80083c0 <_strtod_l+0xb78>
 800837a:	a32d      	add	r3, pc, #180	; (adr r3, 8008430 <_strtod_l+0xbe8>)
 800837c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008380:	4640      	mov	r0, r8
 8008382:	4649      	mov	r1, r9
 8008384:	f7f8 fbd4 	bl	8000b30 <__aeabi_dcmple>
 8008388:	b1a0      	cbz	r0, 80083b4 <_strtod_l+0xb6c>
 800838a:	4649      	mov	r1, r9
 800838c:	4640      	mov	r0, r8
 800838e:	f7f8 fc2b 	bl	8000be8 <__aeabi_d2uiz>
 8008392:	2801      	cmp	r0, #1
 8008394:	bf38      	it	cc
 8008396:	2001      	movcc	r0, #1
 8008398:	f7f8 f8d4 	bl	8000544 <__aeabi_ui2d>
 800839c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800839e:	4680      	mov	r8, r0
 80083a0:	4689      	mov	r9, r1
 80083a2:	bb13      	cbnz	r3, 80083ea <_strtod_l+0xba2>
 80083a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083a8:	9014      	str	r0, [sp, #80]	; 0x50
 80083aa:	9315      	str	r3, [sp, #84]	; 0x54
 80083ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80083b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80083b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80083b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80083bc:	1a9b      	subs	r3, r3, r2
 80083be:	930d      	str	r3, [sp, #52]	; 0x34
 80083c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083c4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80083c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80083cc:	f001 ff46 	bl	800a25c <__ulp>
 80083d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083d4:	ec53 2b10 	vmov	r2, r3, d0
 80083d8:	f7f8 f92e 	bl	8000638 <__aeabi_dmul>
 80083dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80083e0:	f7f7 ff74 	bl	80002cc <__adddf3>
 80083e4:	4682      	mov	sl, r0
 80083e6:	468b      	mov	fp, r1
 80083e8:	e78f      	b.n	800830a <_strtod_l+0xac2>
 80083ea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80083ee:	e7dd      	b.n	80083ac <_strtod_l+0xb64>
 80083f0:	a311      	add	r3, pc, #68	; (adr r3, 8008438 <_strtod_l+0xbf0>)
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	f7f8 fb91 	bl	8000b1c <__aeabi_dcmplt>
 80083fa:	e7b4      	b.n	8008366 <_strtod_l+0xb1e>
 80083fc:	2300      	movs	r3, #0
 80083fe:	930e      	str	r3, [sp, #56]	; 0x38
 8008400:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008402:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	f7ff ba65 	b.w	80078d4 <_strtod_l+0x8c>
 800840a:	2b65      	cmp	r3, #101	; 0x65
 800840c:	f43f ab5d 	beq.w	8007aca <_strtod_l+0x282>
 8008410:	2b45      	cmp	r3, #69	; 0x45
 8008412:	f43f ab5a 	beq.w	8007aca <_strtod_l+0x282>
 8008416:	2201      	movs	r2, #1
 8008418:	f7ff bb92 	b.w	8007b40 <_strtod_l+0x2f8>
 800841c:	f3af 8000 	nop.w
 8008420:	94a03595 	.word	0x94a03595
 8008424:	3fdfffff 	.word	0x3fdfffff
 8008428:	35afe535 	.word	0x35afe535
 800842c:	3fe00000 	.word	0x3fe00000
 8008430:	ffc00000 	.word	0xffc00000
 8008434:	41dfffff 	.word	0x41dfffff
 8008438:	94a03595 	.word	0x94a03595
 800843c:	3fcfffff 	.word	0x3fcfffff
 8008440:	3ff00000 	.word	0x3ff00000
 8008444:	7ff00000 	.word	0x7ff00000
 8008448:	7fe00000 	.word	0x7fe00000
 800844c:	7c9fffff 	.word	0x7c9fffff
 8008450:	3fe00000 	.word	0x3fe00000
 8008454:	bff00000 	.word	0xbff00000
 8008458:	7fefffff 	.word	0x7fefffff

0800845c <_strtod_r>:
 800845c:	4b01      	ldr	r3, [pc, #4]	; (8008464 <_strtod_r+0x8>)
 800845e:	f7ff b9f3 	b.w	8007848 <_strtod_l>
 8008462:	bf00      	nop
 8008464:	20000078 	.word	0x20000078

08008468 <_strtol_l.isra.0>:
 8008468:	2b01      	cmp	r3, #1
 800846a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800846e:	d001      	beq.n	8008474 <_strtol_l.isra.0+0xc>
 8008470:	2b24      	cmp	r3, #36	; 0x24
 8008472:	d906      	bls.n	8008482 <_strtol_l.isra.0+0x1a>
 8008474:	f7fe f8da 	bl	800662c <__errno>
 8008478:	2316      	movs	r3, #22
 800847a:	6003      	str	r3, [r0, #0]
 800847c:	2000      	movs	r0, #0
 800847e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008482:	4f3a      	ldr	r7, [pc, #232]	; (800856c <_strtol_l.isra.0+0x104>)
 8008484:	468e      	mov	lr, r1
 8008486:	4676      	mov	r6, lr
 8008488:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800848c:	5de5      	ldrb	r5, [r4, r7]
 800848e:	f015 0508 	ands.w	r5, r5, #8
 8008492:	d1f8      	bne.n	8008486 <_strtol_l.isra.0+0x1e>
 8008494:	2c2d      	cmp	r4, #45	; 0x2d
 8008496:	d134      	bne.n	8008502 <_strtol_l.isra.0+0x9a>
 8008498:	f89e 4000 	ldrb.w	r4, [lr]
 800849c:	f04f 0801 	mov.w	r8, #1
 80084a0:	f106 0e02 	add.w	lr, r6, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d05c      	beq.n	8008562 <_strtol_l.isra.0+0xfa>
 80084a8:	2b10      	cmp	r3, #16
 80084aa:	d10c      	bne.n	80084c6 <_strtol_l.isra.0+0x5e>
 80084ac:	2c30      	cmp	r4, #48	; 0x30
 80084ae:	d10a      	bne.n	80084c6 <_strtol_l.isra.0+0x5e>
 80084b0:	f89e 4000 	ldrb.w	r4, [lr]
 80084b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80084b8:	2c58      	cmp	r4, #88	; 0x58
 80084ba:	d14d      	bne.n	8008558 <_strtol_l.isra.0+0xf0>
 80084bc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80084c0:	2310      	movs	r3, #16
 80084c2:	f10e 0e02 	add.w	lr, lr, #2
 80084c6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80084ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 80084ce:	2600      	movs	r6, #0
 80084d0:	fbbc f9f3 	udiv	r9, ip, r3
 80084d4:	4635      	mov	r5, r6
 80084d6:	fb03 ca19 	mls	sl, r3, r9, ip
 80084da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80084de:	2f09      	cmp	r7, #9
 80084e0:	d818      	bhi.n	8008514 <_strtol_l.isra.0+0xac>
 80084e2:	463c      	mov	r4, r7
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	dd24      	ble.n	8008532 <_strtol_l.isra.0+0xca>
 80084e8:	2e00      	cmp	r6, #0
 80084ea:	db1f      	blt.n	800852c <_strtol_l.isra.0+0xc4>
 80084ec:	45a9      	cmp	r9, r5
 80084ee:	d31d      	bcc.n	800852c <_strtol_l.isra.0+0xc4>
 80084f0:	d101      	bne.n	80084f6 <_strtol_l.isra.0+0x8e>
 80084f2:	45a2      	cmp	sl, r4
 80084f4:	db1a      	blt.n	800852c <_strtol_l.isra.0+0xc4>
 80084f6:	fb05 4503 	mla	r5, r5, r3, r4
 80084fa:	2601      	movs	r6, #1
 80084fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008500:	e7eb      	b.n	80084da <_strtol_l.isra.0+0x72>
 8008502:	2c2b      	cmp	r4, #43	; 0x2b
 8008504:	bf08      	it	eq
 8008506:	f89e 4000 	ldrbeq.w	r4, [lr]
 800850a:	46a8      	mov	r8, r5
 800850c:	bf08      	it	eq
 800850e:	f106 0e02 	addeq.w	lr, r6, #2
 8008512:	e7c7      	b.n	80084a4 <_strtol_l.isra.0+0x3c>
 8008514:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008518:	2f19      	cmp	r7, #25
 800851a:	d801      	bhi.n	8008520 <_strtol_l.isra.0+0xb8>
 800851c:	3c37      	subs	r4, #55	; 0x37
 800851e:	e7e1      	b.n	80084e4 <_strtol_l.isra.0+0x7c>
 8008520:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008524:	2f19      	cmp	r7, #25
 8008526:	d804      	bhi.n	8008532 <_strtol_l.isra.0+0xca>
 8008528:	3c57      	subs	r4, #87	; 0x57
 800852a:	e7db      	b.n	80084e4 <_strtol_l.isra.0+0x7c>
 800852c:	f04f 36ff 	mov.w	r6, #4294967295
 8008530:	e7e4      	b.n	80084fc <_strtol_l.isra.0+0x94>
 8008532:	2e00      	cmp	r6, #0
 8008534:	da05      	bge.n	8008542 <_strtol_l.isra.0+0xda>
 8008536:	2322      	movs	r3, #34	; 0x22
 8008538:	6003      	str	r3, [r0, #0]
 800853a:	4665      	mov	r5, ip
 800853c:	b942      	cbnz	r2, 8008550 <_strtol_l.isra.0+0xe8>
 800853e:	4628      	mov	r0, r5
 8008540:	e79d      	b.n	800847e <_strtol_l.isra.0+0x16>
 8008542:	f1b8 0f00 	cmp.w	r8, #0
 8008546:	d000      	beq.n	800854a <_strtol_l.isra.0+0xe2>
 8008548:	426d      	negs	r5, r5
 800854a:	2a00      	cmp	r2, #0
 800854c:	d0f7      	beq.n	800853e <_strtol_l.isra.0+0xd6>
 800854e:	b10e      	cbz	r6, 8008554 <_strtol_l.isra.0+0xec>
 8008550:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008554:	6011      	str	r1, [r2, #0]
 8008556:	e7f2      	b.n	800853e <_strtol_l.isra.0+0xd6>
 8008558:	2430      	movs	r4, #48	; 0x30
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1b3      	bne.n	80084c6 <_strtol_l.isra.0+0x5e>
 800855e:	2308      	movs	r3, #8
 8008560:	e7b1      	b.n	80084c6 <_strtol_l.isra.0+0x5e>
 8008562:	2c30      	cmp	r4, #48	; 0x30
 8008564:	d0a4      	beq.n	80084b0 <_strtol_l.isra.0+0x48>
 8008566:	230a      	movs	r3, #10
 8008568:	e7ad      	b.n	80084c6 <_strtol_l.isra.0+0x5e>
 800856a:	bf00      	nop
 800856c:	0800b209 	.word	0x0800b209

08008570 <_strtol_r>:
 8008570:	f7ff bf7a 	b.w	8008468 <_strtol_l.isra.0>

08008574 <_write_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4d07      	ldr	r5, [pc, #28]	; (8008594 <_write_r+0x20>)
 8008578:	4604      	mov	r4, r0
 800857a:	4608      	mov	r0, r1
 800857c:	4611      	mov	r1, r2
 800857e:	2200      	movs	r2, #0
 8008580:	602a      	str	r2, [r5, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	f7f9 f9ab 	bl	80018de <_write>
 8008588:	1c43      	adds	r3, r0, #1
 800858a:	d102      	bne.n	8008592 <_write_r+0x1e>
 800858c:	682b      	ldr	r3, [r5, #0]
 800858e:	b103      	cbz	r3, 8008592 <_write_r+0x1e>
 8008590:	6023      	str	r3, [r4, #0]
 8008592:	bd38      	pop	{r3, r4, r5, pc}
 8008594:	20004fd4 	.word	0x20004fd4

08008598 <_close_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	4d06      	ldr	r5, [pc, #24]	; (80085b4 <_close_r+0x1c>)
 800859c:	2300      	movs	r3, #0
 800859e:	4604      	mov	r4, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	602b      	str	r3, [r5, #0]
 80085a4:	f7f9 f9b7 	bl	8001916 <_close>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_close_r+0x1a>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_close_r+0x1a>
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	20004fd4 	.word	0x20004fd4

080085b8 <quorem>:
 80085b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	6903      	ldr	r3, [r0, #16]
 80085be:	690c      	ldr	r4, [r1, #16]
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	4607      	mov	r7, r0
 80085c4:	f2c0 8081 	blt.w	80086ca <quorem+0x112>
 80085c8:	3c01      	subs	r4, #1
 80085ca:	f101 0814 	add.w	r8, r1, #20
 80085ce:	f100 0514 	add.w	r5, r0, #20
 80085d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085e0:	3301      	adds	r3, #1
 80085e2:	429a      	cmp	r2, r3
 80085e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80085e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80085f0:	d331      	bcc.n	8008656 <quorem+0x9e>
 80085f2:	f04f 0e00 	mov.w	lr, #0
 80085f6:	4640      	mov	r0, r8
 80085f8:	46ac      	mov	ip, r5
 80085fa:	46f2      	mov	sl, lr
 80085fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008600:	b293      	uxth	r3, r2
 8008602:	fb06 e303 	mla	r3, r6, r3, lr
 8008606:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800860a:	b29b      	uxth	r3, r3
 800860c:	ebaa 0303 	sub.w	r3, sl, r3
 8008610:	0c12      	lsrs	r2, r2, #16
 8008612:	f8dc a000 	ldr.w	sl, [ip]
 8008616:	fb06 e202 	mla	r2, r6, r2, lr
 800861a:	fa13 f38a 	uxtah	r3, r3, sl
 800861e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008622:	fa1f fa82 	uxth.w	sl, r2
 8008626:	f8dc 2000 	ldr.w	r2, [ip]
 800862a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800862e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008632:	b29b      	uxth	r3, r3
 8008634:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008638:	4581      	cmp	r9, r0
 800863a:	f84c 3b04 	str.w	r3, [ip], #4
 800863e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008642:	d2db      	bcs.n	80085fc <quorem+0x44>
 8008644:	f855 300b 	ldr.w	r3, [r5, fp]
 8008648:	b92b      	cbnz	r3, 8008656 <quorem+0x9e>
 800864a:	9b01      	ldr	r3, [sp, #4]
 800864c:	3b04      	subs	r3, #4
 800864e:	429d      	cmp	r5, r3
 8008650:	461a      	mov	r2, r3
 8008652:	d32e      	bcc.n	80086b2 <quorem+0xfa>
 8008654:	613c      	str	r4, [r7, #16]
 8008656:	4638      	mov	r0, r7
 8008658:	f001 fd5c 	bl	800a114 <__mcmp>
 800865c:	2800      	cmp	r0, #0
 800865e:	db24      	blt.n	80086aa <quorem+0xf2>
 8008660:	3601      	adds	r6, #1
 8008662:	4628      	mov	r0, r5
 8008664:	f04f 0c00 	mov.w	ip, #0
 8008668:	f858 2b04 	ldr.w	r2, [r8], #4
 800866c:	f8d0 e000 	ldr.w	lr, [r0]
 8008670:	b293      	uxth	r3, r2
 8008672:	ebac 0303 	sub.w	r3, ip, r3
 8008676:	0c12      	lsrs	r2, r2, #16
 8008678:	fa13 f38e 	uxtah	r3, r3, lr
 800867c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008680:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008684:	b29b      	uxth	r3, r3
 8008686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800868a:	45c1      	cmp	r9, r8
 800868c:	f840 3b04 	str.w	r3, [r0], #4
 8008690:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008694:	d2e8      	bcs.n	8008668 <quorem+0xb0>
 8008696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800869a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800869e:	b922      	cbnz	r2, 80086aa <quorem+0xf2>
 80086a0:	3b04      	subs	r3, #4
 80086a2:	429d      	cmp	r5, r3
 80086a4:	461a      	mov	r2, r3
 80086a6:	d30a      	bcc.n	80086be <quorem+0x106>
 80086a8:	613c      	str	r4, [r7, #16]
 80086aa:	4630      	mov	r0, r6
 80086ac:	b003      	add	sp, #12
 80086ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b2:	6812      	ldr	r2, [r2, #0]
 80086b4:	3b04      	subs	r3, #4
 80086b6:	2a00      	cmp	r2, #0
 80086b8:	d1cc      	bne.n	8008654 <quorem+0x9c>
 80086ba:	3c01      	subs	r4, #1
 80086bc:	e7c7      	b.n	800864e <quorem+0x96>
 80086be:	6812      	ldr	r2, [r2, #0]
 80086c0:	3b04      	subs	r3, #4
 80086c2:	2a00      	cmp	r2, #0
 80086c4:	d1f0      	bne.n	80086a8 <quorem+0xf0>
 80086c6:	3c01      	subs	r4, #1
 80086c8:	e7eb      	b.n	80086a2 <quorem+0xea>
 80086ca:	2000      	movs	r0, #0
 80086cc:	e7ee      	b.n	80086ac <quorem+0xf4>
	...

080086d0 <_dtoa_r>:
 80086d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	ed2d 8b02 	vpush	{d8}
 80086d8:	ec57 6b10 	vmov	r6, r7, d0
 80086dc:	b095      	sub	sp, #84	; 0x54
 80086de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80086e4:	9105      	str	r1, [sp, #20]
 80086e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80086ea:	4604      	mov	r4, r0
 80086ec:	9209      	str	r2, [sp, #36]	; 0x24
 80086ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80086f0:	b975      	cbnz	r5, 8008710 <_dtoa_r+0x40>
 80086f2:	2010      	movs	r0, #16
 80086f4:	f001 fa20 	bl	8009b38 <malloc>
 80086f8:	4602      	mov	r2, r0
 80086fa:	6260      	str	r0, [r4, #36]	; 0x24
 80086fc:	b920      	cbnz	r0, 8008708 <_dtoa_r+0x38>
 80086fe:	4bb2      	ldr	r3, [pc, #712]	; (80089c8 <_dtoa_r+0x2f8>)
 8008700:	21ea      	movs	r1, #234	; 0xea
 8008702:	48b2      	ldr	r0, [pc, #712]	; (80089cc <_dtoa_r+0x2fc>)
 8008704:	f002 f8f0 	bl	800a8e8 <__assert_func>
 8008708:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800870c:	6005      	str	r5, [r0, #0]
 800870e:	60c5      	str	r5, [r0, #12]
 8008710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008712:	6819      	ldr	r1, [r3, #0]
 8008714:	b151      	cbz	r1, 800872c <_dtoa_r+0x5c>
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	604a      	str	r2, [r1, #4]
 800871a:	2301      	movs	r3, #1
 800871c:	4093      	lsls	r3, r2
 800871e:	608b      	str	r3, [r1, #8]
 8008720:	4620      	mov	r0, r4
 8008722:	f001 fa6f 	bl	8009c04 <_Bfree>
 8008726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]
 800872c:	1e3b      	subs	r3, r7, #0
 800872e:	bfb9      	ittee	lt
 8008730:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008734:	9303      	strlt	r3, [sp, #12]
 8008736:	2300      	movge	r3, #0
 8008738:	f8c8 3000 	strge.w	r3, [r8]
 800873c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008740:	4ba3      	ldr	r3, [pc, #652]	; (80089d0 <_dtoa_r+0x300>)
 8008742:	bfbc      	itt	lt
 8008744:	2201      	movlt	r2, #1
 8008746:	f8c8 2000 	strlt.w	r2, [r8]
 800874a:	ea33 0309 	bics.w	r3, r3, r9
 800874e:	d11b      	bne.n	8008788 <_dtoa_r+0xb8>
 8008750:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008752:	f242 730f 	movw	r3, #9999	; 0x270f
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800875c:	4333      	orrs	r3, r6
 800875e:	f000 857a 	beq.w	8009256 <_dtoa_r+0xb86>
 8008762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008764:	b963      	cbnz	r3, 8008780 <_dtoa_r+0xb0>
 8008766:	4b9b      	ldr	r3, [pc, #620]	; (80089d4 <_dtoa_r+0x304>)
 8008768:	e024      	b.n	80087b4 <_dtoa_r+0xe4>
 800876a:	4b9b      	ldr	r3, [pc, #620]	; (80089d8 <_dtoa_r+0x308>)
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	3308      	adds	r3, #8
 8008770:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	9800      	ldr	r0, [sp, #0]
 8008776:	b015      	add	sp, #84	; 0x54
 8008778:	ecbd 8b02 	vpop	{d8}
 800877c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008780:	4b94      	ldr	r3, [pc, #592]	; (80089d4 <_dtoa_r+0x304>)
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	3303      	adds	r3, #3
 8008786:	e7f3      	b.n	8008770 <_dtoa_r+0xa0>
 8008788:	ed9d 7b02 	vldr	d7, [sp, #8]
 800878c:	2200      	movs	r2, #0
 800878e:	ec51 0b17 	vmov	r0, r1, d7
 8008792:	2300      	movs	r3, #0
 8008794:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008798:	f7f8 f9b6 	bl	8000b08 <__aeabi_dcmpeq>
 800879c:	4680      	mov	r8, r0
 800879e:	b158      	cbz	r0, 80087b8 <_dtoa_r+0xe8>
 80087a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087a2:	2301      	movs	r3, #1
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 8551 	beq.w	8009250 <_dtoa_r+0xb80>
 80087ae:	488b      	ldr	r0, [pc, #556]	; (80089dc <_dtoa_r+0x30c>)
 80087b0:	6018      	str	r0, [r3, #0]
 80087b2:	1e43      	subs	r3, r0, #1
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	e7dd      	b.n	8008774 <_dtoa_r+0xa4>
 80087b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80087bc:	aa12      	add	r2, sp, #72	; 0x48
 80087be:	a913      	add	r1, sp, #76	; 0x4c
 80087c0:	4620      	mov	r0, r4
 80087c2:	f001 fdc7 	bl	800a354 <__d2b>
 80087c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087ca:	4683      	mov	fp, r0
 80087cc:	2d00      	cmp	r5, #0
 80087ce:	d07c      	beq.n	80088ca <_dtoa_r+0x1fa>
 80087d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80087d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80087de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80087e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80087e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80087ea:	4b7d      	ldr	r3, [pc, #500]	; (80089e0 <_dtoa_r+0x310>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	4630      	mov	r0, r6
 80087f0:	4639      	mov	r1, r7
 80087f2:	f7f7 fd69 	bl	80002c8 <__aeabi_dsub>
 80087f6:	a36e      	add	r3, pc, #440	; (adr r3, 80089b0 <_dtoa_r+0x2e0>)
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	f7f7 ff1c 	bl	8000638 <__aeabi_dmul>
 8008800:	a36d      	add	r3, pc, #436	; (adr r3, 80089b8 <_dtoa_r+0x2e8>)
 8008802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008806:	f7f7 fd61 	bl	80002cc <__adddf3>
 800880a:	4606      	mov	r6, r0
 800880c:	4628      	mov	r0, r5
 800880e:	460f      	mov	r7, r1
 8008810:	f7f7 fea8 	bl	8000564 <__aeabi_i2d>
 8008814:	a36a      	add	r3, pc, #424	; (adr r3, 80089c0 <_dtoa_r+0x2f0>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	f7f7 ff0d 	bl	8000638 <__aeabi_dmul>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	4630      	mov	r0, r6
 8008824:	4639      	mov	r1, r7
 8008826:	f7f7 fd51 	bl	80002cc <__adddf3>
 800882a:	4606      	mov	r6, r0
 800882c:	460f      	mov	r7, r1
 800882e:	f7f8 f9b3 	bl	8000b98 <__aeabi_d2iz>
 8008832:	2200      	movs	r2, #0
 8008834:	4682      	mov	sl, r0
 8008836:	2300      	movs	r3, #0
 8008838:	4630      	mov	r0, r6
 800883a:	4639      	mov	r1, r7
 800883c:	f7f8 f96e 	bl	8000b1c <__aeabi_dcmplt>
 8008840:	b148      	cbz	r0, 8008856 <_dtoa_r+0x186>
 8008842:	4650      	mov	r0, sl
 8008844:	f7f7 fe8e 	bl	8000564 <__aeabi_i2d>
 8008848:	4632      	mov	r2, r6
 800884a:	463b      	mov	r3, r7
 800884c:	f7f8 f95c 	bl	8000b08 <__aeabi_dcmpeq>
 8008850:	b908      	cbnz	r0, 8008856 <_dtoa_r+0x186>
 8008852:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008856:	f1ba 0f16 	cmp.w	sl, #22
 800885a:	d854      	bhi.n	8008906 <_dtoa_r+0x236>
 800885c:	4b61      	ldr	r3, [pc, #388]	; (80089e4 <_dtoa_r+0x314>)
 800885e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008866:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800886a:	f7f8 f957 	bl	8000b1c <__aeabi_dcmplt>
 800886e:	2800      	cmp	r0, #0
 8008870:	d04b      	beq.n	800890a <_dtoa_r+0x23a>
 8008872:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008876:	2300      	movs	r3, #0
 8008878:	930e      	str	r3, [sp, #56]	; 0x38
 800887a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800887c:	1b5d      	subs	r5, r3, r5
 800887e:	1e6b      	subs	r3, r5, #1
 8008880:	9304      	str	r3, [sp, #16]
 8008882:	bf43      	ittte	mi
 8008884:	2300      	movmi	r3, #0
 8008886:	f1c5 0801 	rsbmi	r8, r5, #1
 800888a:	9304      	strmi	r3, [sp, #16]
 800888c:	f04f 0800 	movpl.w	r8, #0
 8008890:	f1ba 0f00 	cmp.w	sl, #0
 8008894:	db3b      	blt.n	800890e <_dtoa_r+0x23e>
 8008896:	9b04      	ldr	r3, [sp, #16]
 8008898:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800889c:	4453      	add	r3, sl
 800889e:	9304      	str	r3, [sp, #16]
 80088a0:	2300      	movs	r3, #0
 80088a2:	9306      	str	r3, [sp, #24]
 80088a4:	9b05      	ldr	r3, [sp, #20]
 80088a6:	2b09      	cmp	r3, #9
 80088a8:	d869      	bhi.n	800897e <_dtoa_r+0x2ae>
 80088aa:	2b05      	cmp	r3, #5
 80088ac:	bfc4      	itt	gt
 80088ae:	3b04      	subgt	r3, #4
 80088b0:	9305      	strgt	r3, [sp, #20]
 80088b2:	9b05      	ldr	r3, [sp, #20]
 80088b4:	f1a3 0302 	sub.w	r3, r3, #2
 80088b8:	bfcc      	ite	gt
 80088ba:	2500      	movgt	r5, #0
 80088bc:	2501      	movle	r5, #1
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d869      	bhi.n	8008996 <_dtoa_r+0x2c6>
 80088c2:	e8df f003 	tbb	[pc, r3]
 80088c6:	4e2c      	.short	0x4e2c
 80088c8:	5a4c      	.short	0x5a4c
 80088ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80088ce:	441d      	add	r5, r3
 80088d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80088d4:	2b20      	cmp	r3, #32
 80088d6:	bfc1      	itttt	gt
 80088d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80088dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80088e0:	fa09 f303 	lslgt.w	r3, r9, r3
 80088e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80088e8:	bfda      	itte	le
 80088ea:	f1c3 0320 	rsble	r3, r3, #32
 80088ee:	fa06 f003 	lslle.w	r0, r6, r3
 80088f2:	4318      	orrgt	r0, r3
 80088f4:	f7f7 fe26 	bl	8000544 <__aeabi_ui2d>
 80088f8:	2301      	movs	r3, #1
 80088fa:	4606      	mov	r6, r0
 80088fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008900:	3d01      	subs	r5, #1
 8008902:	9310      	str	r3, [sp, #64]	; 0x40
 8008904:	e771      	b.n	80087ea <_dtoa_r+0x11a>
 8008906:	2301      	movs	r3, #1
 8008908:	e7b6      	b.n	8008878 <_dtoa_r+0x1a8>
 800890a:	900e      	str	r0, [sp, #56]	; 0x38
 800890c:	e7b5      	b.n	800887a <_dtoa_r+0x1aa>
 800890e:	f1ca 0300 	rsb	r3, sl, #0
 8008912:	9306      	str	r3, [sp, #24]
 8008914:	2300      	movs	r3, #0
 8008916:	eba8 080a 	sub.w	r8, r8, sl
 800891a:	930d      	str	r3, [sp, #52]	; 0x34
 800891c:	e7c2      	b.n	80088a4 <_dtoa_r+0x1d4>
 800891e:	2300      	movs	r3, #0
 8008920:	9308      	str	r3, [sp, #32]
 8008922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008924:	2b00      	cmp	r3, #0
 8008926:	dc39      	bgt.n	800899c <_dtoa_r+0x2cc>
 8008928:	f04f 0901 	mov.w	r9, #1
 800892c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008930:	464b      	mov	r3, r9
 8008932:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008936:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008938:	2200      	movs	r2, #0
 800893a:	6042      	str	r2, [r0, #4]
 800893c:	2204      	movs	r2, #4
 800893e:	f102 0614 	add.w	r6, r2, #20
 8008942:	429e      	cmp	r6, r3
 8008944:	6841      	ldr	r1, [r0, #4]
 8008946:	d92f      	bls.n	80089a8 <_dtoa_r+0x2d8>
 8008948:	4620      	mov	r0, r4
 800894a:	f001 f91b 	bl	8009b84 <_Balloc>
 800894e:	9000      	str	r0, [sp, #0]
 8008950:	2800      	cmp	r0, #0
 8008952:	d14b      	bne.n	80089ec <_dtoa_r+0x31c>
 8008954:	4b24      	ldr	r3, [pc, #144]	; (80089e8 <_dtoa_r+0x318>)
 8008956:	4602      	mov	r2, r0
 8008958:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800895c:	e6d1      	b.n	8008702 <_dtoa_r+0x32>
 800895e:	2301      	movs	r3, #1
 8008960:	e7de      	b.n	8008920 <_dtoa_r+0x250>
 8008962:	2300      	movs	r3, #0
 8008964:	9308      	str	r3, [sp, #32]
 8008966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008968:	eb0a 0903 	add.w	r9, sl, r3
 800896c:	f109 0301 	add.w	r3, r9, #1
 8008970:	2b01      	cmp	r3, #1
 8008972:	9301      	str	r3, [sp, #4]
 8008974:	bfb8      	it	lt
 8008976:	2301      	movlt	r3, #1
 8008978:	e7dd      	b.n	8008936 <_dtoa_r+0x266>
 800897a:	2301      	movs	r3, #1
 800897c:	e7f2      	b.n	8008964 <_dtoa_r+0x294>
 800897e:	2501      	movs	r5, #1
 8008980:	2300      	movs	r3, #0
 8008982:	9305      	str	r3, [sp, #20]
 8008984:	9508      	str	r5, [sp, #32]
 8008986:	f04f 39ff 	mov.w	r9, #4294967295
 800898a:	2200      	movs	r2, #0
 800898c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008990:	2312      	movs	r3, #18
 8008992:	9209      	str	r2, [sp, #36]	; 0x24
 8008994:	e7cf      	b.n	8008936 <_dtoa_r+0x266>
 8008996:	2301      	movs	r3, #1
 8008998:	9308      	str	r3, [sp, #32]
 800899a:	e7f4      	b.n	8008986 <_dtoa_r+0x2b6>
 800899c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80089a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80089a4:	464b      	mov	r3, r9
 80089a6:	e7c6      	b.n	8008936 <_dtoa_r+0x266>
 80089a8:	3101      	adds	r1, #1
 80089aa:	6041      	str	r1, [r0, #4]
 80089ac:	0052      	lsls	r2, r2, #1
 80089ae:	e7c6      	b.n	800893e <_dtoa_r+0x26e>
 80089b0:	636f4361 	.word	0x636f4361
 80089b4:	3fd287a7 	.word	0x3fd287a7
 80089b8:	8b60c8b3 	.word	0x8b60c8b3
 80089bc:	3fc68a28 	.word	0x3fc68a28
 80089c0:	509f79fb 	.word	0x509f79fb
 80089c4:	3fd34413 	.word	0x3fd34413
 80089c8:	0800b316 	.word	0x0800b316
 80089cc:	0800b32d 	.word	0x0800b32d
 80089d0:	7ff00000 	.word	0x7ff00000
 80089d4:	0800b312 	.word	0x0800b312
 80089d8:	0800b309 	.word	0x0800b309
 80089dc:	0800b18d 	.word	0x0800b18d
 80089e0:	3ff80000 	.word	0x3ff80000
 80089e4:	0800b4a8 	.word	0x0800b4a8
 80089e8:	0800b38c 	.word	0x0800b38c
 80089ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089ee:	9a00      	ldr	r2, [sp, #0]
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	9b01      	ldr	r3, [sp, #4]
 80089f4:	2b0e      	cmp	r3, #14
 80089f6:	f200 80ad 	bhi.w	8008b54 <_dtoa_r+0x484>
 80089fa:	2d00      	cmp	r5, #0
 80089fc:	f000 80aa 	beq.w	8008b54 <_dtoa_r+0x484>
 8008a00:	f1ba 0f00 	cmp.w	sl, #0
 8008a04:	dd36      	ble.n	8008a74 <_dtoa_r+0x3a4>
 8008a06:	4ac3      	ldr	r2, [pc, #780]	; (8008d14 <_dtoa_r+0x644>)
 8008a08:	f00a 030f 	and.w	r3, sl, #15
 8008a0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a10:	ed93 7b00 	vldr	d7, [r3]
 8008a14:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008a18:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008a1c:	eeb0 8a47 	vmov.f32	s16, s14
 8008a20:	eef0 8a67 	vmov.f32	s17, s15
 8008a24:	d016      	beq.n	8008a54 <_dtoa_r+0x384>
 8008a26:	4bbc      	ldr	r3, [pc, #752]	; (8008d18 <_dtoa_r+0x648>)
 8008a28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a30:	f7f7 ff2c 	bl	800088c <__aeabi_ddiv>
 8008a34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a38:	f007 070f 	and.w	r7, r7, #15
 8008a3c:	2503      	movs	r5, #3
 8008a3e:	4eb6      	ldr	r6, [pc, #728]	; (8008d18 <_dtoa_r+0x648>)
 8008a40:	b957      	cbnz	r7, 8008a58 <_dtoa_r+0x388>
 8008a42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a46:	ec53 2b18 	vmov	r2, r3, d8
 8008a4a:	f7f7 ff1f 	bl	800088c <__aeabi_ddiv>
 8008a4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a52:	e029      	b.n	8008aa8 <_dtoa_r+0x3d8>
 8008a54:	2502      	movs	r5, #2
 8008a56:	e7f2      	b.n	8008a3e <_dtoa_r+0x36e>
 8008a58:	07f9      	lsls	r1, r7, #31
 8008a5a:	d508      	bpl.n	8008a6e <_dtoa_r+0x39e>
 8008a5c:	ec51 0b18 	vmov	r0, r1, d8
 8008a60:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a64:	f7f7 fde8 	bl	8000638 <__aeabi_dmul>
 8008a68:	ec41 0b18 	vmov	d8, r0, r1
 8008a6c:	3501      	adds	r5, #1
 8008a6e:	107f      	asrs	r7, r7, #1
 8008a70:	3608      	adds	r6, #8
 8008a72:	e7e5      	b.n	8008a40 <_dtoa_r+0x370>
 8008a74:	f000 80a6 	beq.w	8008bc4 <_dtoa_r+0x4f4>
 8008a78:	f1ca 0600 	rsb	r6, sl, #0
 8008a7c:	4ba5      	ldr	r3, [pc, #660]	; (8008d14 <_dtoa_r+0x644>)
 8008a7e:	4fa6      	ldr	r7, [pc, #664]	; (8008d18 <_dtoa_r+0x648>)
 8008a80:	f006 020f 	and.w	r2, r6, #15
 8008a84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a90:	f7f7 fdd2 	bl	8000638 <__aeabi_dmul>
 8008a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a98:	1136      	asrs	r6, r6, #4
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	2502      	movs	r5, #2
 8008a9e:	2e00      	cmp	r6, #0
 8008aa0:	f040 8085 	bne.w	8008bae <_dtoa_r+0x4de>
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1d2      	bne.n	8008a4e <_dtoa_r+0x37e>
 8008aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 808c 	beq.w	8008bc8 <_dtoa_r+0x4f8>
 8008ab0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ab4:	4b99      	ldr	r3, [pc, #612]	; (8008d1c <_dtoa_r+0x64c>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	4630      	mov	r0, r6
 8008aba:	4639      	mov	r1, r7
 8008abc:	f7f8 f82e 	bl	8000b1c <__aeabi_dcmplt>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	f000 8081 	beq.w	8008bc8 <_dtoa_r+0x4f8>
 8008ac6:	9b01      	ldr	r3, [sp, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d07d      	beq.n	8008bc8 <_dtoa_r+0x4f8>
 8008acc:	f1b9 0f00 	cmp.w	r9, #0
 8008ad0:	dd3c      	ble.n	8008b4c <_dtoa_r+0x47c>
 8008ad2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008ad6:	9307      	str	r3, [sp, #28]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	4b91      	ldr	r3, [pc, #580]	; (8008d20 <_dtoa_r+0x650>)
 8008adc:	4630      	mov	r0, r6
 8008ade:	4639      	mov	r1, r7
 8008ae0:	f7f7 fdaa 	bl	8000638 <__aeabi_dmul>
 8008ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ae8:	3501      	adds	r5, #1
 8008aea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008aee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008af2:	4628      	mov	r0, r5
 8008af4:	f7f7 fd36 	bl	8000564 <__aeabi_i2d>
 8008af8:	4632      	mov	r2, r6
 8008afa:	463b      	mov	r3, r7
 8008afc:	f7f7 fd9c 	bl	8000638 <__aeabi_dmul>
 8008b00:	4b88      	ldr	r3, [pc, #544]	; (8008d24 <_dtoa_r+0x654>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	f7f7 fbe2 	bl	80002cc <__adddf3>
 8008b08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b10:	9303      	str	r3, [sp, #12]
 8008b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d15c      	bne.n	8008bd2 <_dtoa_r+0x502>
 8008b18:	4b83      	ldr	r3, [pc, #524]	; (8008d28 <_dtoa_r+0x658>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	4639      	mov	r1, r7
 8008b20:	f7f7 fbd2 	bl	80002c8 <__aeabi_dsub>
 8008b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b28:	4606      	mov	r6, r0
 8008b2a:	460f      	mov	r7, r1
 8008b2c:	f7f8 f814 	bl	8000b58 <__aeabi_dcmpgt>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	f040 8296 	bne.w	8009062 <_dtoa_r+0x992>
 8008b36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b40:	4639      	mov	r1, r7
 8008b42:	f7f7 ffeb 	bl	8000b1c <__aeabi_dcmplt>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	f040 8288 	bne.w	800905c <_dtoa_r+0x98c>
 8008b4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008b50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f2c0 8158 	blt.w	8008e0c <_dtoa_r+0x73c>
 8008b5c:	f1ba 0f0e 	cmp.w	sl, #14
 8008b60:	f300 8154 	bgt.w	8008e0c <_dtoa_r+0x73c>
 8008b64:	4b6b      	ldr	r3, [pc, #428]	; (8008d14 <_dtoa_r+0x644>)
 8008b66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f280 80e3 	bge.w	8008d3c <_dtoa_r+0x66c>
 8008b76:	9b01      	ldr	r3, [sp, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f300 80df 	bgt.w	8008d3c <_dtoa_r+0x66c>
 8008b7e:	f040 826d 	bne.w	800905c <_dtoa_r+0x98c>
 8008b82:	4b69      	ldr	r3, [pc, #420]	; (8008d28 <_dtoa_r+0x658>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	4640      	mov	r0, r8
 8008b88:	4649      	mov	r1, r9
 8008b8a:	f7f7 fd55 	bl	8000638 <__aeabi_dmul>
 8008b8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b92:	f7f7 ffd7 	bl	8000b44 <__aeabi_dcmpge>
 8008b96:	9e01      	ldr	r6, [sp, #4]
 8008b98:	4637      	mov	r7, r6
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	f040 8243 	bne.w	8009026 <_dtoa_r+0x956>
 8008ba0:	9d00      	ldr	r5, [sp, #0]
 8008ba2:	2331      	movs	r3, #49	; 0x31
 8008ba4:	f805 3b01 	strb.w	r3, [r5], #1
 8008ba8:	f10a 0a01 	add.w	sl, sl, #1
 8008bac:	e23f      	b.n	800902e <_dtoa_r+0x95e>
 8008bae:	07f2      	lsls	r2, r6, #31
 8008bb0:	d505      	bpl.n	8008bbe <_dtoa_r+0x4ee>
 8008bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bb6:	f7f7 fd3f 	bl	8000638 <__aeabi_dmul>
 8008bba:	3501      	adds	r5, #1
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	1076      	asrs	r6, r6, #1
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	e76c      	b.n	8008a9e <_dtoa_r+0x3ce>
 8008bc4:	2502      	movs	r5, #2
 8008bc6:	e76f      	b.n	8008aa8 <_dtoa_r+0x3d8>
 8008bc8:	9b01      	ldr	r3, [sp, #4]
 8008bca:	f8cd a01c 	str.w	sl, [sp, #28]
 8008bce:	930c      	str	r3, [sp, #48]	; 0x30
 8008bd0:	e78d      	b.n	8008aee <_dtoa_r+0x41e>
 8008bd2:	9900      	ldr	r1, [sp, #0]
 8008bd4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008bd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bd8:	4b4e      	ldr	r3, [pc, #312]	; (8008d14 <_dtoa_r+0x644>)
 8008bda:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bde:	4401      	add	r1, r0
 8008be0:	9102      	str	r1, [sp, #8]
 8008be2:	9908      	ldr	r1, [sp, #32]
 8008be4:	eeb0 8a47 	vmov.f32	s16, s14
 8008be8:	eef0 8a67 	vmov.f32	s17, s15
 8008bec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bf4:	2900      	cmp	r1, #0
 8008bf6:	d045      	beq.n	8008c84 <_dtoa_r+0x5b4>
 8008bf8:	494c      	ldr	r1, [pc, #304]	; (8008d2c <_dtoa_r+0x65c>)
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	f7f7 fe46 	bl	800088c <__aeabi_ddiv>
 8008c00:	ec53 2b18 	vmov	r2, r3, d8
 8008c04:	f7f7 fb60 	bl	80002c8 <__aeabi_dsub>
 8008c08:	9d00      	ldr	r5, [sp, #0]
 8008c0a:	ec41 0b18 	vmov	d8, r0, r1
 8008c0e:	4639      	mov	r1, r7
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7f7 ffc1 	bl	8000b98 <__aeabi_d2iz>
 8008c16:	900c      	str	r0, [sp, #48]	; 0x30
 8008c18:	f7f7 fca4 	bl	8000564 <__aeabi_i2d>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4630      	mov	r0, r6
 8008c22:	4639      	mov	r1, r7
 8008c24:	f7f7 fb50 	bl	80002c8 <__aeabi_dsub>
 8008c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c2a:	3330      	adds	r3, #48	; 0x30
 8008c2c:	f805 3b01 	strb.w	r3, [r5], #1
 8008c30:	ec53 2b18 	vmov	r2, r3, d8
 8008c34:	4606      	mov	r6, r0
 8008c36:	460f      	mov	r7, r1
 8008c38:	f7f7 ff70 	bl	8000b1c <__aeabi_dcmplt>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	d165      	bne.n	8008d0c <_dtoa_r+0x63c>
 8008c40:	4632      	mov	r2, r6
 8008c42:	463b      	mov	r3, r7
 8008c44:	4935      	ldr	r1, [pc, #212]	; (8008d1c <_dtoa_r+0x64c>)
 8008c46:	2000      	movs	r0, #0
 8008c48:	f7f7 fb3e 	bl	80002c8 <__aeabi_dsub>
 8008c4c:	ec53 2b18 	vmov	r2, r3, d8
 8008c50:	f7f7 ff64 	bl	8000b1c <__aeabi_dcmplt>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	f040 80b9 	bne.w	8008dcc <_dtoa_r+0x6fc>
 8008c5a:	9b02      	ldr	r3, [sp, #8]
 8008c5c:	429d      	cmp	r5, r3
 8008c5e:	f43f af75 	beq.w	8008b4c <_dtoa_r+0x47c>
 8008c62:	4b2f      	ldr	r3, [pc, #188]	; (8008d20 <_dtoa_r+0x650>)
 8008c64:	ec51 0b18 	vmov	r0, r1, d8
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f7f7 fce5 	bl	8000638 <__aeabi_dmul>
 8008c6e:	4b2c      	ldr	r3, [pc, #176]	; (8008d20 <_dtoa_r+0x650>)
 8008c70:	ec41 0b18 	vmov	d8, r0, r1
 8008c74:	2200      	movs	r2, #0
 8008c76:	4630      	mov	r0, r6
 8008c78:	4639      	mov	r1, r7
 8008c7a:	f7f7 fcdd 	bl	8000638 <__aeabi_dmul>
 8008c7e:	4606      	mov	r6, r0
 8008c80:	460f      	mov	r7, r1
 8008c82:	e7c4      	b.n	8008c0e <_dtoa_r+0x53e>
 8008c84:	ec51 0b17 	vmov	r0, r1, d7
 8008c88:	f7f7 fcd6 	bl	8000638 <__aeabi_dmul>
 8008c8c:	9b02      	ldr	r3, [sp, #8]
 8008c8e:	9d00      	ldr	r5, [sp, #0]
 8008c90:	930c      	str	r3, [sp, #48]	; 0x30
 8008c92:	ec41 0b18 	vmov	d8, r0, r1
 8008c96:	4639      	mov	r1, r7
 8008c98:	4630      	mov	r0, r6
 8008c9a:	f7f7 ff7d 	bl	8000b98 <__aeabi_d2iz>
 8008c9e:	9011      	str	r0, [sp, #68]	; 0x44
 8008ca0:	f7f7 fc60 	bl	8000564 <__aeabi_i2d>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	4630      	mov	r0, r6
 8008caa:	4639      	mov	r1, r7
 8008cac:	f7f7 fb0c 	bl	80002c8 <__aeabi_dsub>
 8008cb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cb2:	3330      	adds	r3, #48	; 0x30
 8008cb4:	f805 3b01 	strb.w	r3, [r5], #1
 8008cb8:	9b02      	ldr	r3, [sp, #8]
 8008cba:	429d      	cmp	r5, r3
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	460f      	mov	r7, r1
 8008cc0:	f04f 0200 	mov.w	r2, #0
 8008cc4:	d134      	bne.n	8008d30 <_dtoa_r+0x660>
 8008cc6:	4b19      	ldr	r3, [pc, #100]	; (8008d2c <_dtoa_r+0x65c>)
 8008cc8:	ec51 0b18 	vmov	r0, r1, d8
 8008ccc:	f7f7 fafe 	bl	80002cc <__adddf3>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	4639      	mov	r1, r7
 8008cd8:	f7f7 ff3e 	bl	8000b58 <__aeabi_dcmpgt>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d175      	bne.n	8008dcc <_dtoa_r+0x6fc>
 8008ce0:	ec53 2b18 	vmov	r2, r3, d8
 8008ce4:	4911      	ldr	r1, [pc, #68]	; (8008d2c <_dtoa_r+0x65c>)
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	f7f7 faee 	bl	80002c8 <__aeabi_dsub>
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	f7f7 ff12 	bl	8000b1c <__aeabi_dcmplt>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	f43f af27 	beq.w	8008b4c <_dtoa_r+0x47c>
 8008cfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d00:	1e6b      	subs	r3, r5, #1
 8008d02:	930c      	str	r3, [sp, #48]	; 0x30
 8008d04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d08:	2b30      	cmp	r3, #48	; 0x30
 8008d0a:	d0f8      	beq.n	8008cfe <_dtoa_r+0x62e>
 8008d0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008d10:	e04a      	b.n	8008da8 <_dtoa_r+0x6d8>
 8008d12:	bf00      	nop
 8008d14:	0800b4a8 	.word	0x0800b4a8
 8008d18:	0800b480 	.word	0x0800b480
 8008d1c:	3ff00000 	.word	0x3ff00000
 8008d20:	40240000 	.word	0x40240000
 8008d24:	401c0000 	.word	0x401c0000
 8008d28:	40140000 	.word	0x40140000
 8008d2c:	3fe00000 	.word	0x3fe00000
 8008d30:	4baf      	ldr	r3, [pc, #700]	; (8008ff0 <_dtoa_r+0x920>)
 8008d32:	f7f7 fc81 	bl	8000638 <__aeabi_dmul>
 8008d36:	4606      	mov	r6, r0
 8008d38:	460f      	mov	r7, r1
 8008d3a:	e7ac      	b.n	8008c96 <_dtoa_r+0x5c6>
 8008d3c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d40:	9d00      	ldr	r5, [sp, #0]
 8008d42:	4642      	mov	r2, r8
 8008d44:	464b      	mov	r3, r9
 8008d46:	4630      	mov	r0, r6
 8008d48:	4639      	mov	r1, r7
 8008d4a:	f7f7 fd9f 	bl	800088c <__aeabi_ddiv>
 8008d4e:	f7f7 ff23 	bl	8000b98 <__aeabi_d2iz>
 8008d52:	9002      	str	r0, [sp, #8]
 8008d54:	f7f7 fc06 	bl	8000564 <__aeabi_i2d>
 8008d58:	4642      	mov	r2, r8
 8008d5a:	464b      	mov	r3, r9
 8008d5c:	f7f7 fc6c 	bl	8000638 <__aeabi_dmul>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	4630      	mov	r0, r6
 8008d66:	4639      	mov	r1, r7
 8008d68:	f7f7 faae 	bl	80002c8 <__aeabi_dsub>
 8008d6c:	9e02      	ldr	r6, [sp, #8]
 8008d6e:	9f01      	ldr	r7, [sp, #4]
 8008d70:	3630      	adds	r6, #48	; 0x30
 8008d72:	f805 6b01 	strb.w	r6, [r5], #1
 8008d76:	9e00      	ldr	r6, [sp, #0]
 8008d78:	1bae      	subs	r6, r5, r6
 8008d7a:	42b7      	cmp	r7, r6
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	d137      	bne.n	8008df2 <_dtoa_r+0x722>
 8008d82:	f7f7 faa3 	bl	80002cc <__adddf3>
 8008d86:	4642      	mov	r2, r8
 8008d88:	464b      	mov	r3, r9
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	460f      	mov	r7, r1
 8008d8e:	f7f7 fee3 	bl	8000b58 <__aeabi_dcmpgt>
 8008d92:	b9c8      	cbnz	r0, 8008dc8 <_dtoa_r+0x6f8>
 8008d94:	4642      	mov	r2, r8
 8008d96:	464b      	mov	r3, r9
 8008d98:	4630      	mov	r0, r6
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 feb4 	bl	8000b08 <__aeabi_dcmpeq>
 8008da0:	b110      	cbz	r0, 8008da8 <_dtoa_r+0x6d8>
 8008da2:	9b02      	ldr	r3, [sp, #8]
 8008da4:	07d9      	lsls	r1, r3, #31
 8008da6:	d40f      	bmi.n	8008dc8 <_dtoa_r+0x6f8>
 8008da8:	4620      	mov	r0, r4
 8008daa:	4659      	mov	r1, fp
 8008dac:	f000 ff2a 	bl	8009c04 <_Bfree>
 8008db0:	2300      	movs	r3, #0
 8008db2:	702b      	strb	r3, [r5, #0]
 8008db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008db6:	f10a 0001 	add.w	r0, sl, #1
 8008dba:	6018      	str	r0, [r3, #0]
 8008dbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f43f acd8 	beq.w	8008774 <_dtoa_r+0xa4>
 8008dc4:	601d      	str	r5, [r3, #0]
 8008dc6:	e4d5      	b.n	8008774 <_dtoa_r+0xa4>
 8008dc8:	f8cd a01c 	str.w	sl, [sp, #28]
 8008dcc:	462b      	mov	r3, r5
 8008dce:	461d      	mov	r5, r3
 8008dd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dd4:	2a39      	cmp	r2, #57	; 0x39
 8008dd6:	d108      	bne.n	8008dea <_dtoa_r+0x71a>
 8008dd8:	9a00      	ldr	r2, [sp, #0]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d1f7      	bne.n	8008dce <_dtoa_r+0x6fe>
 8008dde:	9a07      	ldr	r2, [sp, #28]
 8008de0:	9900      	ldr	r1, [sp, #0]
 8008de2:	3201      	adds	r2, #1
 8008de4:	9207      	str	r2, [sp, #28]
 8008de6:	2230      	movs	r2, #48	; 0x30
 8008de8:	700a      	strb	r2, [r1, #0]
 8008dea:	781a      	ldrb	r2, [r3, #0]
 8008dec:	3201      	adds	r2, #1
 8008dee:	701a      	strb	r2, [r3, #0]
 8008df0:	e78c      	b.n	8008d0c <_dtoa_r+0x63c>
 8008df2:	4b7f      	ldr	r3, [pc, #508]	; (8008ff0 <_dtoa_r+0x920>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	f7f7 fc1f 	bl	8000638 <__aeabi_dmul>
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4606      	mov	r6, r0
 8008e00:	460f      	mov	r7, r1
 8008e02:	f7f7 fe81 	bl	8000b08 <__aeabi_dcmpeq>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	d09b      	beq.n	8008d42 <_dtoa_r+0x672>
 8008e0a:	e7cd      	b.n	8008da8 <_dtoa_r+0x6d8>
 8008e0c:	9a08      	ldr	r2, [sp, #32]
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	f000 80c4 	beq.w	8008f9c <_dtoa_r+0x8cc>
 8008e14:	9a05      	ldr	r2, [sp, #20]
 8008e16:	2a01      	cmp	r2, #1
 8008e18:	f300 80a8 	bgt.w	8008f6c <_dtoa_r+0x89c>
 8008e1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e1e:	2a00      	cmp	r2, #0
 8008e20:	f000 80a0 	beq.w	8008f64 <_dtoa_r+0x894>
 8008e24:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e28:	9e06      	ldr	r6, [sp, #24]
 8008e2a:	4645      	mov	r5, r8
 8008e2c:	9a04      	ldr	r2, [sp, #16]
 8008e2e:	2101      	movs	r1, #1
 8008e30:	441a      	add	r2, r3
 8008e32:	4620      	mov	r0, r4
 8008e34:	4498      	add	r8, r3
 8008e36:	9204      	str	r2, [sp, #16]
 8008e38:	f000 ffea 	bl	8009e10 <__i2b>
 8008e3c:	4607      	mov	r7, r0
 8008e3e:	2d00      	cmp	r5, #0
 8008e40:	dd0b      	ble.n	8008e5a <_dtoa_r+0x78a>
 8008e42:	9b04      	ldr	r3, [sp, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	dd08      	ble.n	8008e5a <_dtoa_r+0x78a>
 8008e48:	42ab      	cmp	r3, r5
 8008e4a:	9a04      	ldr	r2, [sp, #16]
 8008e4c:	bfa8      	it	ge
 8008e4e:	462b      	movge	r3, r5
 8008e50:	eba8 0803 	sub.w	r8, r8, r3
 8008e54:	1aed      	subs	r5, r5, r3
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	9304      	str	r3, [sp, #16]
 8008e5a:	9b06      	ldr	r3, [sp, #24]
 8008e5c:	b1fb      	cbz	r3, 8008e9e <_dtoa_r+0x7ce>
 8008e5e:	9b08      	ldr	r3, [sp, #32]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 809f 	beq.w	8008fa4 <_dtoa_r+0x8d4>
 8008e66:	2e00      	cmp	r6, #0
 8008e68:	dd11      	ble.n	8008e8e <_dtoa_r+0x7be>
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	4632      	mov	r2, r6
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f001 f88a 	bl	8009f88 <__pow5mult>
 8008e74:	465a      	mov	r2, fp
 8008e76:	4601      	mov	r1, r0
 8008e78:	4607      	mov	r7, r0
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 ffde 	bl	8009e3c <__multiply>
 8008e80:	4659      	mov	r1, fp
 8008e82:	9007      	str	r0, [sp, #28]
 8008e84:	4620      	mov	r0, r4
 8008e86:	f000 febd 	bl	8009c04 <_Bfree>
 8008e8a:	9b07      	ldr	r3, [sp, #28]
 8008e8c:	469b      	mov	fp, r3
 8008e8e:	9b06      	ldr	r3, [sp, #24]
 8008e90:	1b9a      	subs	r2, r3, r6
 8008e92:	d004      	beq.n	8008e9e <_dtoa_r+0x7ce>
 8008e94:	4659      	mov	r1, fp
 8008e96:	4620      	mov	r0, r4
 8008e98:	f001 f876 	bl	8009f88 <__pow5mult>
 8008e9c:	4683      	mov	fp, r0
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 ffb5 	bl	8009e10 <__i2b>
 8008ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	4606      	mov	r6, r0
 8008eac:	dd7c      	ble.n	8008fa8 <_dtoa_r+0x8d8>
 8008eae:	461a      	mov	r2, r3
 8008eb0:	4601      	mov	r1, r0
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f001 f868 	bl	8009f88 <__pow5mult>
 8008eb8:	9b05      	ldr	r3, [sp, #20]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	dd76      	ble.n	8008fae <_dtoa_r+0x8de>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	9306      	str	r3, [sp, #24]
 8008ec4:	6933      	ldr	r3, [r6, #16]
 8008ec6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008eca:	6918      	ldr	r0, [r3, #16]
 8008ecc:	f000 ff50 	bl	8009d70 <__hi0bits>
 8008ed0:	f1c0 0020 	rsb	r0, r0, #32
 8008ed4:	9b04      	ldr	r3, [sp, #16]
 8008ed6:	4418      	add	r0, r3
 8008ed8:	f010 001f 	ands.w	r0, r0, #31
 8008edc:	f000 8086 	beq.w	8008fec <_dtoa_r+0x91c>
 8008ee0:	f1c0 0320 	rsb	r3, r0, #32
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	dd7f      	ble.n	8008fe8 <_dtoa_r+0x918>
 8008ee8:	f1c0 001c 	rsb	r0, r0, #28
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	4403      	add	r3, r0
 8008ef0:	4480      	add	r8, r0
 8008ef2:	4405      	add	r5, r0
 8008ef4:	9304      	str	r3, [sp, #16]
 8008ef6:	f1b8 0f00 	cmp.w	r8, #0
 8008efa:	dd05      	ble.n	8008f08 <_dtoa_r+0x838>
 8008efc:	4659      	mov	r1, fp
 8008efe:	4642      	mov	r2, r8
 8008f00:	4620      	mov	r0, r4
 8008f02:	f001 f89b 	bl	800a03c <__lshift>
 8008f06:	4683      	mov	fp, r0
 8008f08:	9b04      	ldr	r3, [sp, #16]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	dd05      	ble.n	8008f1a <_dtoa_r+0x84a>
 8008f0e:	4631      	mov	r1, r6
 8008f10:	461a      	mov	r2, r3
 8008f12:	4620      	mov	r0, r4
 8008f14:	f001 f892 	bl	800a03c <__lshift>
 8008f18:	4606      	mov	r6, r0
 8008f1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d069      	beq.n	8008ff4 <_dtoa_r+0x924>
 8008f20:	4631      	mov	r1, r6
 8008f22:	4658      	mov	r0, fp
 8008f24:	f001 f8f6 	bl	800a114 <__mcmp>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	da63      	bge.n	8008ff4 <_dtoa_r+0x924>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4659      	mov	r1, fp
 8008f30:	220a      	movs	r2, #10
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 fe88 	bl	8009c48 <__multadd>
 8008f38:	9b08      	ldr	r3, [sp, #32]
 8008f3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f3e:	4683      	mov	fp, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 818f 	beq.w	8009264 <_dtoa_r+0xb94>
 8008f46:	4639      	mov	r1, r7
 8008f48:	2300      	movs	r3, #0
 8008f4a:	220a      	movs	r2, #10
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f000 fe7b 	bl	8009c48 <__multadd>
 8008f52:	f1b9 0f00 	cmp.w	r9, #0
 8008f56:	4607      	mov	r7, r0
 8008f58:	f300 808e 	bgt.w	8009078 <_dtoa_r+0x9a8>
 8008f5c:	9b05      	ldr	r3, [sp, #20]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	dc50      	bgt.n	8009004 <_dtoa_r+0x934>
 8008f62:	e089      	b.n	8009078 <_dtoa_r+0x9a8>
 8008f64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f6a:	e75d      	b.n	8008e28 <_dtoa_r+0x758>
 8008f6c:	9b01      	ldr	r3, [sp, #4]
 8008f6e:	1e5e      	subs	r6, r3, #1
 8008f70:	9b06      	ldr	r3, [sp, #24]
 8008f72:	42b3      	cmp	r3, r6
 8008f74:	bfbf      	itttt	lt
 8008f76:	9b06      	ldrlt	r3, [sp, #24]
 8008f78:	9606      	strlt	r6, [sp, #24]
 8008f7a:	1af2      	sublt	r2, r6, r3
 8008f7c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008f7e:	bfb6      	itet	lt
 8008f80:	189b      	addlt	r3, r3, r2
 8008f82:	1b9e      	subge	r6, r3, r6
 8008f84:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008f86:	9b01      	ldr	r3, [sp, #4]
 8008f88:	bfb8      	it	lt
 8008f8a:	2600      	movlt	r6, #0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	bfb5      	itete	lt
 8008f90:	eba8 0503 	sublt.w	r5, r8, r3
 8008f94:	9b01      	ldrge	r3, [sp, #4]
 8008f96:	2300      	movlt	r3, #0
 8008f98:	4645      	movge	r5, r8
 8008f9a:	e747      	b.n	8008e2c <_dtoa_r+0x75c>
 8008f9c:	9e06      	ldr	r6, [sp, #24]
 8008f9e:	9f08      	ldr	r7, [sp, #32]
 8008fa0:	4645      	mov	r5, r8
 8008fa2:	e74c      	b.n	8008e3e <_dtoa_r+0x76e>
 8008fa4:	9a06      	ldr	r2, [sp, #24]
 8008fa6:	e775      	b.n	8008e94 <_dtoa_r+0x7c4>
 8008fa8:	9b05      	ldr	r3, [sp, #20]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	dc18      	bgt.n	8008fe0 <_dtoa_r+0x910>
 8008fae:	9b02      	ldr	r3, [sp, #8]
 8008fb0:	b9b3      	cbnz	r3, 8008fe0 <_dtoa_r+0x910>
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fb8:	b9a3      	cbnz	r3, 8008fe4 <_dtoa_r+0x914>
 8008fba:	9b03      	ldr	r3, [sp, #12]
 8008fbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fc0:	0d1b      	lsrs	r3, r3, #20
 8008fc2:	051b      	lsls	r3, r3, #20
 8008fc4:	b12b      	cbz	r3, 8008fd2 <_dtoa_r+0x902>
 8008fc6:	9b04      	ldr	r3, [sp, #16]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	f108 0801 	add.w	r8, r8, #1
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	9306      	str	r3, [sp, #24]
 8008fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f47f af74 	bne.w	8008ec4 <_dtoa_r+0x7f4>
 8008fdc:	2001      	movs	r0, #1
 8008fde:	e779      	b.n	8008ed4 <_dtoa_r+0x804>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	e7f6      	b.n	8008fd2 <_dtoa_r+0x902>
 8008fe4:	9b02      	ldr	r3, [sp, #8]
 8008fe6:	e7f4      	b.n	8008fd2 <_dtoa_r+0x902>
 8008fe8:	d085      	beq.n	8008ef6 <_dtoa_r+0x826>
 8008fea:	4618      	mov	r0, r3
 8008fec:	301c      	adds	r0, #28
 8008fee:	e77d      	b.n	8008eec <_dtoa_r+0x81c>
 8008ff0:	40240000 	.word	0x40240000
 8008ff4:	9b01      	ldr	r3, [sp, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	dc38      	bgt.n	800906c <_dtoa_r+0x99c>
 8008ffa:	9b05      	ldr	r3, [sp, #20]
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	dd35      	ble.n	800906c <_dtoa_r+0x99c>
 8009000:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009004:	f1b9 0f00 	cmp.w	r9, #0
 8009008:	d10d      	bne.n	8009026 <_dtoa_r+0x956>
 800900a:	4631      	mov	r1, r6
 800900c:	464b      	mov	r3, r9
 800900e:	2205      	movs	r2, #5
 8009010:	4620      	mov	r0, r4
 8009012:	f000 fe19 	bl	8009c48 <__multadd>
 8009016:	4601      	mov	r1, r0
 8009018:	4606      	mov	r6, r0
 800901a:	4658      	mov	r0, fp
 800901c:	f001 f87a 	bl	800a114 <__mcmp>
 8009020:	2800      	cmp	r0, #0
 8009022:	f73f adbd 	bgt.w	8008ba0 <_dtoa_r+0x4d0>
 8009026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009028:	9d00      	ldr	r5, [sp, #0]
 800902a:	ea6f 0a03 	mvn.w	sl, r3
 800902e:	f04f 0800 	mov.w	r8, #0
 8009032:	4631      	mov	r1, r6
 8009034:	4620      	mov	r0, r4
 8009036:	f000 fde5 	bl	8009c04 <_Bfree>
 800903a:	2f00      	cmp	r7, #0
 800903c:	f43f aeb4 	beq.w	8008da8 <_dtoa_r+0x6d8>
 8009040:	f1b8 0f00 	cmp.w	r8, #0
 8009044:	d005      	beq.n	8009052 <_dtoa_r+0x982>
 8009046:	45b8      	cmp	r8, r7
 8009048:	d003      	beq.n	8009052 <_dtoa_r+0x982>
 800904a:	4641      	mov	r1, r8
 800904c:	4620      	mov	r0, r4
 800904e:	f000 fdd9 	bl	8009c04 <_Bfree>
 8009052:	4639      	mov	r1, r7
 8009054:	4620      	mov	r0, r4
 8009056:	f000 fdd5 	bl	8009c04 <_Bfree>
 800905a:	e6a5      	b.n	8008da8 <_dtoa_r+0x6d8>
 800905c:	2600      	movs	r6, #0
 800905e:	4637      	mov	r7, r6
 8009060:	e7e1      	b.n	8009026 <_dtoa_r+0x956>
 8009062:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009064:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009068:	4637      	mov	r7, r6
 800906a:	e599      	b.n	8008ba0 <_dtoa_r+0x4d0>
 800906c:	9b08      	ldr	r3, [sp, #32]
 800906e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	f000 80fd 	beq.w	8009272 <_dtoa_r+0xba2>
 8009078:	2d00      	cmp	r5, #0
 800907a:	dd05      	ble.n	8009088 <_dtoa_r+0x9b8>
 800907c:	4639      	mov	r1, r7
 800907e:	462a      	mov	r2, r5
 8009080:	4620      	mov	r0, r4
 8009082:	f000 ffdb 	bl	800a03c <__lshift>
 8009086:	4607      	mov	r7, r0
 8009088:	9b06      	ldr	r3, [sp, #24]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d05c      	beq.n	8009148 <_dtoa_r+0xa78>
 800908e:	6879      	ldr	r1, [r7, #4]
 8009090:	4620      	mov	r0, r4
 8009092:	f000 fd77 	bl	8009b84 <_Balloc>
 8009096:	4605      	mov	r5, r0
 8009098:	b928      	cbnz	r0, 80090a6 <_dtoa_r+0x9d6>
 800909a:	4b80      	ldr	r3, [pc, #512]	; (800929c <_dtoa_r+0xbcc>)
 800909c:	4602      	mov	r2, r0
 800909e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80090a2:	f7ff bb2e 	b.w	8008702 <_dtoa_r+0x32>
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	3202      	adds	r2, #2
 80090aa:	0092      	lsls	r2, r2, #2
 80090ac:	f107 010c 	add.w	r1, r7, #12
 80090b0:	300c      	adds	r0, #12
 80090b2:	f7fd fbde 	bl	8006872 <memcpy>
 80090b6:	2201      	movs	r2, #1
 80090b8:	4629      	mov	r1, r5
 80090ba:	4620      	mov	r0, r4
 80090bc:	f000 ffbe 	bl	800a03c <__lshift>
 80090c0:	9b00      	ldr	r3, [sp, #0]
 80090c2:	3301      	adds	r3, #1
 80090c4:	9301      	str	r3, [sp, #4]
 80090c6:	9b00      	ldr	r3, [sp, #0]
 80090c8:	444b      	add	r3, r9
 80090ca:	9307      	str	r3, [sp, #28]
 80090cc:	9b02      	ldr	r3, [sp, #8]
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	46b8      	mov	r8, r7
 80090d4:	9306      	str	r3, [sp, #24]
 80090d6:	4607      	mov	r7, r0
 80090d8:	9b01      	ldr	r3, [sp, #4]
 80090da:	4631      	mov	r1, r6
 80090dc:	3b01      	subs	r3, #1
 80090de:	4658      	mov	r0, fp
 80090e0:	9302      	str	r3, [sp, #8]
 80090e2:	f7ff fa69 	bl	80085b8 <quorem>
 80090e6:	4603      	mov	r3, r0
 80090e8:	3330      	adds	r3, #48	; 0x30
 80090ea:	9004      	str	r0, [sp, #16]
 80090ec:	4641      	mov	r1, r8
 80090ee:	4658      	mov	r0, fp
 80090f0:	9308      	str	r3, [sp, #32]
 80090f2:	f001 f80f 	bl	800a114 <__mcmp>
 80090f6:	463a      	mov	r2, r7
 80090f8:	4681      	mov	r9, r0
 80090fa:	4631      	mov	r1, r6
 80090fc:	4620      	mov	r0, r4
 80090fe:	f001 f825 	bl	800a14c <__mdiff>
 8009102:	68c2      	ldr	r2, [r0, #12]
 8009104:	9b08      	ldr	r3, [sp, #32]
 8009106:	4605      	mov	r5, r0
 8009108:	bb02      	cbnz	r2, 800914c <_dtoa_r+0xa7c>
 800910a:	4601      	mov	r1, r0
 800910c:	4658      	mov	r0, fp
 800910e:	f001 f801 	bl	800a114 <__mcmp>
 8009112:	9b08      	ldr	r3, [sp, #32]
 8009114:	4602      	mov	r2, r0
 8009116:	4629      	mov	r1, r5
 8009118:	4620      	mov	r0, r4
 800911a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800911e:	f000 fd71 	bl	8009c04 <_Bfree>
 8009122:	9b05      	ldr	r3, [sp, #20]
 8009124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009126:	9d01      	ldr	r5, [sp, #4]
 8009128:	ea43 0102 	orr.w	r1, r3, r2
 800912c:	9b06      	ldr	r3, [sp, #24]
 800912e:	430b      	orrs	r3, r1
 8009130:	9b08      	ldr	r3, [sp, #32]
 8009132:	d10d      	bne.n	8009150 <_dtoa_r+0xa80>
 8009134:	2b39      	cmp	r3, #57	; 0x39
 8009136:	d029      	beq.n	800918c <_dtoa_r+0xabc>
 8009138:	f1b9 0f00 	cmp.w	r9, #0
 800913c:	dd01      	ble.n	8009142 <_dtoa_r+0xa72>
 800913e:	9b04      	ldr	r3, [sp, #16]
 8009140:	3331      	adds	r3, #49	; 0x31
 8009142:	9a02      	ldr	r2, [sp, #8]
 8009144:	7013      	strb	r3, [r2, #0]
 8009146:	e774      	b.n	8009032 <_dtoa_r+0x962>
 8009148:	4638      	mov	r0, r7
 800914a:	e7b9      	b.n	80090c0 <_dtoa_r+0x9f0>
 800914c:	2201      	movs	r2, #1
 800914e:	e7e2      	b.n	8009116 <_dtoa_r+0xa46>
 8009150:	f1b9 0f00 	cmp.w	r9, #0
 8009154:	db06      	blt.n	8009164 <_dtoa_r+0xa94>
 8009156:	9905      	ldr	r1, [sp, #20]
 8009158:	ea41 0909 	orr.w	r9, r1, r9
 800915c:	9906      	ldr	r1, [sp, #24]
 800915e:	ea59 0101 	orrs.w	r1, r9, r1
 8009162:	d120      	bne.n	80091a6 <_dtoa_r+0xad6>
 8009164:	2a00      	cmp	r2, #0
 8009166:	ddec      	ble.n	8009142 <_dtoa_r+0xa72>
 8009168:	4659      	mov	r1, fp
 800916a:	2201      	movs	r2, #1
 800916c:	4620      	mov	r0, r4
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	f000 ff64 	bl	800a03c <__lshift>
 8009174:	4631      	mov	r1, r6
 8009176:	4683      	mov	fp, r0
 8009178:	f000 ffcc 	bl	800a114 <__mcmp>
 800917c:	2800      	cmp	r0, #0
 800917e:	9b01      	ldr	r3, [sp, #4]
 8009180:	dc02      	bgt.n	8009188 <_dtoa_r+0xab8>
 8009182:	d1de      	bne.n	8009142 <_dtoa_r+0xa72>
 8009184:	07da      	lsls	r2, r3, #31
 8009186:	d5dc      	bpl.n	8009142 <_dtoa_r+0xa72>
 8009188:	2b39      	cmp	r3, #57	; 0x39
 800918a:	d1d8      	bne.n	800913e <_dtoa_r+0xa6e>
 800918c:	9a02      	ldr	r2, [sp, #8]
 800918e:	2339      	movs	r3, #57	; 0x39
 8009190:	7013      	strb	r3, [r2, #0]
 8009192:	462b      	mov	r3, r5
 8009194:	461d      	mov	r5, r3
 8009196:	3b01      	subs	r3, #1
 8009198:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800919c:	2a39      	cmp	r2, #57	; 0x39
 800919e:	d050      	beq.n	8009242 <_dtoa_r+0xb72>
 80091a0:	3201      	adds	r2, #1
 80091a2:	701a      	strb	r2, [r3, #0]
 80091a4:	e745      	b.n	8009032 <_dtoa_r+0x962>
 80091a6:	2a00      	cmp	r2, #0
 80091a8:	dd03      	ble.n	80091b2 <_dtoa_r+0xae2>
 80091aa:	2b39      	cmp	r3, #57	; 0x39
 80091ac:	d0ee      	beq.n	800918c <_dtoa_r+0xabc>
 80091ae:	3301      	adds	r3, #1
 80091b0:	e7c7      	b.n	8009142 <_dtoa_r+0xa72>
 80091b2:	9a01      	ldr	r2, [sp, #4]
 80091b4:	9907      	ldr	r1, [sp, #28]
 80091b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80091ba:	428a      	cmp	r2, r1
 80091bc:	d02a      	beq.n	8009214 <_dtoa_r+0xb44>
 80091be:	4659      	mov	r1, fp
 80091c0:	2300      	movs	r3, #0
 80091c2:	220a      	movs	r2, #10
 80091c4:	4620      	mov	r0, r4
 80091c6:	f000 fd3f 	bl	8009c48 <__multadd>
 80091ca:	45b8      	cmp	r8, r7
 80091cc:	4683      	mov	fp, r0
 80091ce:	f04f 0300 	mov.w	r3, #0
 80091d2:	f04f 020a 	mov.w	r2, #10
 80091d6:	4641      	mov	r1, r8
 80091d8:	4620      	mov	r0, r4
 80091da:	d107      	bne.n	80091ec <_dtoa_r+0xb1c>
 80091dc:	f000 fd34 	bl	8009c48 <__multadd>
 80091e0:	4680      	mov	r8, r0
 80091e2:	4607      	mov	r7, r0
 80091e4:	9b01      	ldr	r3, [sp, #4]
 80091e6:	3301      	adds	r3, #1
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	e775      	b.n	80090d8 <_dtoa_r+0xa08>
 80091ec:	f000 fd2c 	bl	8009c48 <__multadd>
 80091f0:	4639      	mov	r1, r7
 80091f2:	4680      	mov	r8, r0
 80091f4:	2300      	movs	r3, #0
 80091f6:	220a      	movs	r2, #10
 80091f8:	4620      	mov	r0, r4
 80091fa:	f000 fd25 	bl	8009c48 <__multadd>
 80091fe:	4607      	mov	r7, r0
 8009200:	e7f0      	b.n	80091e4 <_dtoa_r+0xb14>
 8009202:	f1b9 0f00 	cmp.w	r9, #0
 8009206:	9a00      	ldr	r2, [sp, #0]
 8009208:	bfcc      	ite	gt
 800920a:	464d      	movgt	r5, r9
 800920c:	2501      	movle	r5, #1
 800920e:	4415      	add	r5, r2
 8009210:	f04f 0800 	mov.w	r8, #0
 8009214:	4659      	mov	r1, fp
 8009216:	2201      	movs	r2, #1
 8009218:	4620      	mov	r0, r4
 800921a:	9301      	str	r3, [sp, #4]
 800921c:	f000 ff0e 	bl	800a03c <__lshift>
 8009220:	4631      	mov	r1, r6
 8009222:	4683      	mov	fp, r0
 8009224:	f000 ff76 	bl	800a114 <__mcmp>
 8009228:	2800      	cmp	r0, #0
 800922a:	dcb2      	bgt.n	8009192 <_dtoa_r+0xac2>
 800922c:	d102      	bne.n	8009234 <_dtoa_r+0xb64>
 800922e:	9b01      	ldr	r3, [sp, #4]
 8009230:	07db      	lsls	r3, r3, #31
 8009232:	d4ae      	bmi.n	8009192 <_dtoa_r+0xac2>
 8009234:	462b      	mov	r3, r5
 8009236:	461d      	mov	r5, r3
 8009238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800923c:	2a30      	cmp	r2, #48	; 0x30
 800923e:	d0fa      	beq.n	8009236 <_dtoa_r+0xb66>
 8009240:	e6f7      	b.n	8009032 <_dtoa_r+0x962>
 8009242:	9a00      	ldr	r2, [sp, #0]
 8009244:	429a      	cmp	r2, r3
 8009246:	d1a5      	bne.n	8009194 <_dtoa_r+0xac4>
 8009248:	f10a 0a01 	add.w	sl, sl, #1
 800924c:	2331      	movs	r3, #49	; 0x31
 800924e:	e779      	b.n	8009144 <_dtoa_r+0xa74>
 8009250:	4b13      	ldr	r3, [pc, #76]	; (80092a0 <_dtoa_r+0xbd0>)
 8009252:	f7ff baaf 	b.w	80087b4 <_dtoa_r+0xe4>
 8009256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009258:	2b00      	cmp	r3, #0
 800925a:	f47f aa86 	bne.w	800876a <_dtoa_r+0x9a>
 800925e:	4b11      	ldr	r3, [pc, #68]	; (80092a4 <_dtoa_r+0xbd4>)
 8009260:	f7ff baa8 	b.w	80087b4 <_dtoa_r+0xe4>
 8009264:	f1b9 0f00 	cmp.w	r9, #0
 8009268:	dc03      	bgt.n	8009272 <_dtoa_r+0xba2>
 800926a:	9b05      	ldr	r3, [sp, #20]
 800926c:	2b02      	cmp	r3, #2
 800926e:	f73f aec9 	bgt.w	8009004 <_dtoa_r+0x934>
 8009272:	9d00      	ldr	r5, [sp, #0]
 8009274:	4631      	mov	r1, r6
 8009276:	4658      	mov	r0, fp
 8009278:	f7ff f99e 	bl	80085b8 <quorem>
 800927c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009280:	f805 3b01 	strb.w	r3, [r5], #1
 8009284:	9a00      	ldr	r2, [sp, #0]
 8009286:	1aaa      	subs	r2, r5, r2
 8009288:	4591      	cmp	r9, r2
 800928a:	ddba      	ble.n	8009202 <_dtoa_r+0xb32>
 800928c:	4659      	mov	r1, fp
 800928e:	2300      	movs	r3, #0
 8009290:	220a      	movs	r2, #10
 8009292:	4620      	mov	r0, r4
 8009294:	f000 fcd8 	bl	8009c48 <__multadd>
 8009298:	4683      	mov	fp, r0
 800929a:	e7eb      	b.n	8009274 <_dtoa_r+0xba4>
 800929c:	0800b38c 	.word	0x0800b38c
 80092a0:	0800b18c 	.word	0x0800b18c
 80092a4:	0800b309 	.word	0x0800b309

080092a8 <__sflush_r>:
 80092a8:	898a      	ldrh	r2, [r1, #12]
 80092aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ae:	4605      	mov	r5, r0
 80092b0:	0710      	lsls	r0, r2, #28
 80092b2:	460c      	mov	r4, r1
 80092b4:	d458      	bmi.n	8009368 <__sflush_r+0xc0>
 80092b6:	684b      	ldr	r3, [r1, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	dc05      	bgt.n	80092c8 <__sflush_r+0x20>
 80092bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092be:	2b00      	cmp	r3, #0
 80092c0:	dc02      	bgt.n	80092c8 <__sflush_r+0x20>
 80092c2:	2000      	movs	r0, #0
 80092c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092ca:	2e00      	cmp	r6, #0
 80092cc:	d0f9      	beq.n	80092c2 <__sflush_r+0x1a>
 80092ce:	2300      	movs	r3, #0
 80092d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092d4:	682f      	ldr	r7, [r5, #0]
 80092d6:	602b      	str	r3, [r5, #0]
 80092d8:	d032      	beq.n	8009340 <__sflush_r+0x98>
 80092da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092dc:	89a3      	ldrh	r3, [r4, #12]
 80092de:	075a      	lsls	r2, r3, #29
 80092e0:	d505      	bpl.n	80092ee <__sflush_r+0x46>
 80092e2:	6863      	ldr	r3, [r4, #4]
 80092e4:	1ac0      	subs	r0, r0, r3
 80092e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092e8:	b10b      	cbz	r3, 80092ee <__sflush_r+0x46>
 80092ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092ec:	1ac0      	subs	r0, r0, r3
 80092ee:	2300      	movs	r3, #0
 80092f0:	4602      	mov	r2, r0
 80092f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092f4:	6a21      	ldr	r1, [r4, #32]
 80092f6:	4628      	mov	r0, r5
 80092f8:	47b0      	blx	r6
 80092fa:	1c43      	adds	r3, r0, #1
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	d106      	bne.n	800930e <__sflush_r+0x66>
 8009300:	6829      	ldr	r1, [r5, #0]
 8009302:	291d      	cmp	r1, #29
 8009304:	d82c      	bhi.n	8009360 <__sflush_r+0xb8>
 8009306:	4a2a      	ldr	r2, [pc, #168]	; (80093b0 <__sflush_r+0x108>)
 8009308:	40ca      	lsrs	r2, r1
 800930a:	07d6      	lsls	r6, r2, #31
 800930c:	d528      	bpl.n	8009360 <__sflush_r+0xb8>
 800930e:	2200      	movs	r2, #0
 8009310:	6062      	str	r2, [r4, #4]
 8009312:	04d9      	lsls	r1, r3, #19
 8009314:	6922      	ldr	r2, [r4, #16]
 8009316:	6022      	str	r2, [r4, #0]
 8009318:	d504      	bpl.n	8009324 <__sflush_r+0x7c>
 800931a:	1c42      	adds	r2, r0, #1
 800931c:	d101      	bne.n	8009322 <__sflush_r+0x7a>
 800931e:	682b      	ldr	r3, [r5, #0]
 8009320:	b903      	cbnz	r3, 8009324 <__sflush_r+0x7c>
 8009322:	6560      	str	r0, [r4, #84]	; 0x54
 8009324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009326:	602f      	str	r7, [r5, #0]
 8009328:	2900      	cmp	r1, #0
 800932a:	d0ca      	beq.n	80092c2 <__sflush_r+0x1a>
 800932c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009330:	4299      	cmp	r1, r3
 8009332:	d002      	beq.n	800933a <__sflush_r+0x92>
 8009334:	4628      	mov	r0, r5
 8009336:	f001 f8ef 	bl	800a518 <_free_r>
 800933a:	2000      	movs	r0, #0
 800933c:	6360      	str	r0, [r4, #52]	; 0x34
 800933e:	e7c1      	b.n	80092c4 <__sflush_r+0x1c>
 8009340:	6a21      	ldr	r1, [r4, #32]
 8009342:	2301      	movs	r3, #1
 8009344:	4628      	mov	r0, r5
 8009346:	47b0      	blx	r6
 8009348:	1c41      	adds	r1, r0, #1
 800934a:	d1c7      	bne.n	80092dc <__sflush_r+0x34>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0c4      	beq.n	80092dc <__sflush_r+0x34>
 8009352:	2b1d      	cmp	r3, #29
 8009354:	d001      	beq.n	800935a <__sflush_r+0xb2>
 8009356:	2b16      	cmp	r3, #22
 8009358:	d101      	bne.n	800935e <__sflush_r+0xb6>
 800935a:	602f      	str	r7, [r5, #0]
 800935c:	e7b1      	b.n	80092c2 <__sflush_r+0x1a>
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009364:	81a3      	strh	r3, [r4, #12]
 8009366:	e7ad      	b.n	80092c4 <__sflush_r+0x1c>
 8009368:	690f      	ldr	r7, [r1, #16]
 800936a:	2f00      	cmp	r7, #0
 800936c:	d0a9      	beq.n	80092c2 <__sflush_r+0x1a>
 800936e:	0793      	lsls	r3, r2, #30
 8009370:	680e      	ldr	r6, [r1, #0]
 8009372:	bf08      	it	eq
 8009374:	694b      	ldreq	r3, [r1, #20]
 8009376:	600f      	str	r7, [r1, #0]
 8009378:	bf18      	it	ne
 800937a:	2300      	movne	r3, #0
 800937c:	eba6 0807 	sub.w	r8, r6, r7
 8009380:	608b      	str	r3, [r1, #8]
 8009382:	f1b8 0f00 	cmp.w	r8, #0
 8009386:	dd9c      	ble.n	80092c2 <__sflush_r+0x1a>
 8009388:	6a21      	ldr	r1, [r4, #32]
 800938a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800938c:	4643      	mov	r3, r8
 800938e:	463a      	mov	r2, r7
 8009390:	4628      	mov	r0, r5
 8009392:	47b0      	blx	r6
 8009394:	2800      	cmp	r0, #0
 8009396:	dc06      	bgt.n	80093a6 <__sflush_r+0xfe>
 8009398:	89a3      	ldrh	r3, [r4, #12]
 800939a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800939e:	81a3      	strh	r3, [r4, #12]
 80093a0:	f04f 30ff 	mov.w	r0, #4294967295
 80093a4:	e78e      	b.n	80092c4 <__sflush_r+0x1c>
 80093a6:	4407      	add	r7, r0
 80093a8:	eba8 0800 	sub.w	r8, r8, r0
 80093ac:	e7e9      	b.n	8009382 <__sflush_r+0xda>
 80093ae:	bf00      	nop
 80093b0:	20400001 	.word	0x20400001

080093b4 <_fflush_r>:
 80093b4:	b538      	push	{r3, r4, r5, lr}
 80093b6:	690b      	ldr	r3, [r1, #16]
 80093b8:	4605      	mov	r5, r0
 80093ba:	460c      	mov	r4, r1
 80093bc:	b913      	cbnz	r3, 80093c4 <_fflush_r+0x10>
 80093be:	2500      	movs	r5, #0
 80093c0:	4628      	mov	r0, r5
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	b118      	cbz	r0, 80093ce <_fflush_r+0x1a>
 80093c6:	6983      	ldr	r3, [r0, #24]
 80093c8:	b90b      	cbnz	r3, 80093ce <_fflush_r+0x1a>
 80093ca:	f7fd f98d 	bl	80066e8 <__sinit>
 80093ce:	4b14      	ldr	r3, [pc, #80]	; (8009420 <_fflush_r+0x6c>)
 80093d0:	429c      	cmp	r4, r3
 80093d2:	d11b      	bne.n	800940c <_fflush_r+0x58>
 80093d4:	686c      	ldr	r4, [r5, #4]
 80093d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0ef      	beq.n	80093be <_fflush_r+0xa>
 80093de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093e0:	07d0      	lsls	r0, r2, #31
 80093e2:	d404      	bmi.n	80093ee <_fflush_r+0x3a>
 80093e4:	0599      	lsls	r1, r3, #22
 80093e6:	d402      	bmi.n	80093ee <_fflush_r+0x3a>
 80093e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ea:	f7fd fa40 	bl	800686e <__retarget_lock_acquire_recursive>
 80093ee:	4628      	mov	r0, r5
 80093f0:	4621      	mov	r1, r4
 80093f2:	f7ff ff59 	bl	80092a8 <__sflush_r>
 80093f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093f8:	07da      	lsls	r2, r3, #31
 80093fa:	4605      	mov	r5, r0
 80093fc:	d4e0      	bmi.n	80093c0 <_fflush_r+0xc>
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	059b      	lsls	r3, r3, #22
 8009402:	d4dd      	bmi.n	80093c0 <_fflush_r+0xc>
 8009404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009406:	f7fd fa33 	bl	8006870 <__retarget_lock_release_recursive>
 800940a:	e7d9      	b.n	80093c0 <_fflush_r+0xc>
 800940c:	4b05      	ldr	r3, [pc, #20]	; (8009424 <_fflush_r+0x70>)
 800940e:	429c      	cmp	r4, r3
 8009410:	d101      	bne.n	8009416 <_fflush_r+0x62>
 8009412:	68ac      	ldr	r4, [r5, #8]
 8009414:	e7df      	b.n	80093d6 <_fflush_r+0x22>
 8009416:	4b04      	ldr	r3, [pc, #16]	; (8009428 <_fflush_r+0x74>)
 8009418:	429c      	cmp	r4, r3
 800941a:	bf08      	it	eq
 800941c:	68ec      	ldreq	r4, [r5, #12]
 800941e:	e7da      	b.n	80093d6 <_fflush_r+0x22>
 8009420:	0800b138 	.word	0x0800b138
 8009424:	0800b158 	.word	0x0800b158
 8009428:	0800b118 	.word	0x0800b118

0800942c <rshift>:
 800942c:	6903      	ldr	r3, [r0, #16]
 800942e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009432:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009436:	ea4f 1261 	mov.w	r2, r1, asr #5
 800943a:	f100 0414 	add.w	r4, r0, #20
 800943e:	dd45      	ble.n	80094cc <rshift+0xa0>
 8009440:	f011 011f 	ands.w	r1, r1, #31
 8009444:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009448:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800944c:	d10c      	bne.n	8009468 <rshift+0x3c>
 800944e:	f100 0710 	add.w	r7, r0, #16
 8009452:	4629      	mov	r1, r5
 8009454:	42b1      	cmp	r1, r6
 8009456:	d334      	bcc.n	80094c2 <rshift+0x96>
 8009458:	1a9b      	subs	r3, r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	1eea      	subs	r2, r5, #3
 800945e:	4296      	cmp	r6, r2
 8009460:	bf38      	it	cc
 8009462:	2300      	movcc	r3, #0
 8009464:	4423      	add	r3, r4
 8009466:	e015      	b.n	8009494 <rshift+0x68>
 8009468:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800946c:	f1c1 0820 	rsb	r8, r1, #32
 8009470:	40cf      	lsrs	r7, r1
 8009472:	f105 0e04 	add.w	lr, r5, #4
 8009476:	46a1      	mov	r9, r4
 8009478:	4576      	cmp	r6, lr
 800947a:	46f4      	mov	ip, lr
 800947c:	d815      	bhi.n	80094aa <rshift+0x7e>
 800947e:	1a9b      	subs	r3, r3, r2
 8009480:	009a      	lsls	r2, r3, #2
 8009482:	3a04      	subs	r2, #4
 8009484:	3501      	adds	r5, #1
 8009486:	42ae      	cmp	r6, r5
 8009488:	bf38      	it	cc
 800948a:	2200      	movcc	r2, #0
 800948c:	18a3      	adds	r3, r4, r2
 800948e:	50a7      	str	r7, [r4, r2]
 8009490:	b107      	cbz	r7, 8009494 <rshift+0x68>
 8009492:	3304      	adds	r3, #4
 8009494:	1b1a      	subs	r2, r3, r4
 8009496:	42a3      	cmp	r3, r4
 8009498:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800949c:	bf08      	it	eq
 800949e:	2300      	moveq	r3, #0
 80094a0:	6102      	str	r2, [r0, #16]
 80094a2:	bf08      	it	eq
 80094a4:	6143      	streq	r3, [r0, #20]
 80094a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094aa:	f8dc c000 	ldr.w	ip, [ip]
 80094ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80094b2:	ea4c 0707 	orr.w	r7, ip, r7
 80094b6:	f849 7b04 	str.w	r7, [r9], #4
 80094ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094be:	40cf      	lsrs	r7, r1
 80094c0:	e7da      	b.n	8009478 <rshift+0x4c>
 80094c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80094c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80094ca:	e7c3      	b.n	8009454 <rshift+0x28>
 80094cc:	4623      	mov	r3, r4
 80094ce:	e7e1      	b.n	8009494 <rshift+0x68>

080094d0 <__hexdig_fun>:
 80094d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80094d4:	2b09      	cmp	r3, #9
 80094d6:	d802      	bhi.n	80094de <__hexdig_fun+0xe>
 80094d8:	3820      	subs	r0, #32
 80094da:	b2c0      	uxtb	r0, r0
 80094dc:	4770      	bx	lr
 80094de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80094e2:	2b05      	cmp	r3, #5
 80094e4:	d801      	bhi.n	80094ea <__hexdig_fun+0x1a>
 80094e6:	3847      	subs	r0, #71	; 0x47
 80094e8:	e7f7      	b.n	80094da <__hexdig_fun+0xa>
 80094ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80094ee:	2b05      	cmp	r3, #5
 80094f0:	d801      	bhi.n	80094f6 <__hexdig_fun+0x26>
 80094f2:	3827      	subs	r0, #39	; 0x27
 80094f4:	e7f1      	b.n	80094da <__hexdig_fun+0xa>
 80094f6:	2000      	movs	r0, #0
 80094f8:	4770      	bx	lr
	...

080094fc <__gethex>:
 80094fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009500:	ed2d 8b02 	vpush	{d8}
 8009504:	b089      	sub	sp, #36	; 0x24
 8009506:	ee08 0a10 	vmov	s16, r0
 800950a:	9304      	str	r3, [sp, #16]
 800950c:	4bbc      	ldr	r3, [pc, #752]	; (8009800 <__gethex+0x304>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	9301      	str	r3, [sp, #4]
 8009512:	4618      	mov	r0, r3
 8009514:	468b      	mov	fp, r1
 8009516:	4690      	mov	r8, r2
 8009518:	f7f6 fe7a 	bl	8000210 <strlen>
 800951c:	9b01      	ldr	r3, [sp, #4]
 800951e:	f8db 2000 	ldr.w	r2, [fp]
 8009522:	4403      	add	r3, r0
 8009524:	4682      	mov	sl, r0
 8009526:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800952a:	9305      	str	r3, [sp, #20]
 800952c:	1c93      	adds	r3, r2, #2
 800952e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009532:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009536:	32fe      	adds	r2, #254	; 0xfe
 8009538:	18d1      	adds	r1, r2, r3
 800953a:	461f      	mov	r7, r3
 800953c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009540:	9100      	str	r1, [sp, #0]
 8009542:	2830      	cmp	r0, #48	; 0x30
 8009544:	d0f8      	beq.n	8009538 <__gethex+0x3c>
 8009546:	f7ff ffc3 	bl	80094d0 <__hexdig_fun>
 800954a:	4604      	mov	r4, r0
 800954c:	2800      	cmp	r0, #0
 800954e:	d13a      	bne.n	80095c6 <__gethex+0xca>
 8009550:	9901      	ldr	r1, [sp, #4]
 8009552:	4652      	mov	r2, sl
 8009554:	4638      	mov	r0, r7
 8009556:	f001 f9a7 	bl	800a8a8 <strncmp>
 800955a:	4605      	mov	r5, r0
 800955c:	2800      	cmp	r0, #0
 800955e:	d168      	bne.n	8009632 <__gethex+0x136>
 8009560:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009564:	eb07 060a 	add.w	r6, r7, sl
 8009568:	f7ff ffb2 	bl	80094d0 <__hexdig_fun>
 800956c:	2800      	cmp	r0, #0
 800956e:	d062      	beq.n	8009636 <__gethex+0x13a>
 8009570:	4633      	mov	r3, r6
 8009572:	7818      	ldrb	r0, [r3, #0]
 8009574:	2830      	cmp	r0, #48	; 0x30
 8009576:	461f      	mov	r7, r3
 8009578:	f103 0301 	add.w	r3, r3, #1
 800957c:	d0f9      	beq.n	8009572 <__gethex+0x76>
 800957e:	f7ff ffa7 	bl	80094d0 <__hexdig_fun>
 8009582:	2301      	movs	r3, #1
 8009584:	fab0 f480 	clz	r4, r0
 8009588:	0964      	lsrs	r4, r4, #5
 800958a:	4635      	mov	r5, r6
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	463a      	mov	r2, r7
 8009590:	4616      	mov	r6, r2
 8009592:	3201      	adds	r2, #1
 8009594:	7830      	ldrb	r0, [r6, #0]
 8009596:	f7ff ff9b 	bl	80094d0 <__hexdig_fun>
 800959a:	2800      	cmp	r0, #0
 800959c:	d1f8      	bne.n	8009590 <__gethex+0x94>
 800959e:	9901      	ldr	r1, [sp, #4]
 80095a0:	4652      	mov	r2, sl
 80095a2:	4630      	mov	r0, r6
 80095a4:	f001 f980 	bl	800a8a8 <strncmp>
 80095a8:	b980      	cbnz	r0, 80095cc <__gethex+0xd0>
 80095aa:	b94d      	cbnz	r5, 80095c0 <__gethex+0xc4>
 80095ac:	eb06 050a 	add.w	r5, r6, sl
 80095b0:	462a      	mov	r2, r5
 80095b2:	4616      	mov	r6, r2
 80095b4:	3201      	adds	r2, #1
 80095b6:	7830      	ldrb	r0, [r6, #0]
 80095b8:	f7ff ff8a 	bl	80094d0 <__hexdig_fun>
 80095bc:	2800      	cmp	r0, #0
 80095be:	d1f8      	bne.n	80095b2 <__gethex+0xb6>
 80095c0:	1bad      	subs	r5, r5, r6
 80095c2:	00ad      	lsls	r5, r5, #2
 80095c4:	e004      	b.n	80095d0 <__gethex+0xd4>
 80095c6:	2400      	movs	r4, #0
 80095c8:	4625      	mov	r5, r4
 80095ca:	e7e0      	b.n	800958e <__gethex+0x92>
 80095cc:	2d00      	cmp	r5, #0
 80095ce:	d1f7      	bne.n	80095c0 <__gethex+0xc4>
 80095d0:	7833      	ldrb	r3, [r6, #0]
 80095d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095d6:	2b50      	cmp	r3, #80	; 0x50
 80095d8:	d13b      	bne.n	8009652 <__gethex+0x156>
 80095da:	7873      	ldrb	r3, [r6, #1]
 80095dc:	2b2b      	cmp	r3, #43	; 0x2b
 80095de:	d02c      	beq.n	800963a <__gethex+0x13e>
 80095e0:	2b2d      	cmp	r3, #45	; 0x2d
 80095e2:	d02e      	beq.n	8009642 <__gethex+0x146>
 80095e4:	1c71      	adds	r1, r6, #1
 80095e6:	f04f 0900 	mov.w	r9, #0
 80095ea:	7808      	ldrb	r0, [r1, #0]
 80095ec:	f7ff ff70 	bl	80094d0 <__hexdig_fun>
 80095f0:	1e43      	subs	r3, r0, #1
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b18      	cmp	r3, #24
 80095f6:	d82c      	bhi.n	8009652 <__gethex+0x156>
 80095f8:	f1a0 0210 	sub.w	r2, r0, #16
 80095fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009600:	f7ff ff66 	bl	80094d0 <__hexdig_fun>
 8009604:	1e43      	subs	r3, r0, #1
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b18      	cmp	r3, #24
 800960a:	d91d      	bls.n	8009648 <__gethex+0x14c>
 800960c:	f1b9 0f00 	cmp.w	r9, #0
 8009610:	d000      	beq.n	8009614 <__gethex+0x118>
 8009612:	4252      	negs	r2, r2
 8009614:	4415      	add	r5, r2
 8009616:	f8cb 1000 	str.w	r1, [fp]
 800961a:	b1e4      	cbz	r4, 8009656 <__gethex+0x15a>
 800961c:	9b00      	ldr	r3, [sp, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	bf14      	ite	ne
 8009622:	2700      	movne	r7, #0
 8009624:	2706      	moveq	r7, #6
 8009626:	4638      	mov	r0, r7
 8009628:	b009      	add	sp, #36	; 0x24
 800962a:	ecbd 8b02 	vpop	{d8}
 800962e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009632:	463e      	mov	r6, r7
 8009634:	4625      	mov	r5, r4
 8009636:	2401      	movs	r4, #1
 8009638:	e7ca      	b.n	80095d0 <__gethex+0xd4>
 800963a:	f04f 0900 	mov.w	r9, #0
 800963e:	1cb1      	adds	r1, r6, #2
 8009640:	e7d3      	b.n	80095ea <__gethex+0xee>
 8009642:	f04f 0901 	mov.w	r9, #1
 8009646:	e7fa      	b.n	800963e <__gethex+0x142>
 8009648:	230a      	movs	r3, #10
 800964a:	fb03 0202 	mla	r2, r3, r2, r0
 800964e:	3a10      	subs	r2, #16
 8009650:	e7d4      	b.n	80095fc <__gethex+0x100>
 8009652:	4631      	mov	r1, r6
 8009654:	e7df      	b.n	8009616 <__gethex+0x11a>
 8009656:	1bf3      	subs	r3, r6, r7
 8009658:	3b01      	subs	r3, #1
 800965a:	4621      	mov	r1, r4
 800965c:	2b07      	cmp	r3, #7
 800965e:	dc0b      	bgt.n	8009678 <__gethex+0x17c>
 8009660:	ee18 0a10 	vmov	r0, s16
 8009664:	f000 fa8e 	bl	8009b84 <_Balloc>
 8009668:	4604      	mov	r4, r0
 800966a:	b940      	cbnz	r0, 800967e <__gethex+0x182>
 800966c:	4b65      	ldr	r3, [pc, #404]	; (8009804 <__gethex+0x308>)
 800966e:	4602      	mov	r2, r0
 8009670:	21de      	movs	r1, #222	; 0xde
 8009672:	4865      	ldr	r0, [pc, #404]	; (8009808 <__gethex+0x30c>)
 8009674:	f001 f938 	bl	800a8e8 <__assert_func>
 8009678:	3101      	adds	r1, #1
 800967a:	105b      	asrs	r3, r3, #1
 800967c:	e7ee      	b.n	800965c <__gethex+0x160>
 800967e:	f100 0914 	add.w	r9, r0, #20
 8009682:	f04f 0b00 	mov.w	fp, #0
 8009686:	f1ca 0301 	rsb	r3, sl, #1
 800968a:	f8cd 9008 	str.w	r9, [sp, #8]
 800968e:	f8cd b000 	str.w	fp, [sp]
 8009692:	9306      	str	r3, [sp, #24]
 8009694:	42b7      	cmp	r7, r6
 8009696:	d340      	bcc.n	800971a <__gethex+0x21e>
 8009698:	9802      	ldr	r0, [sp, #8]
 800969a:	9b00      	ldr	r3, [sp, #0]
 800969c:	f840 3b04 	str.w	r3, [r0], #4
 80096a0:	eba0 0009 	sub.w	r0, r0, r9
 80096a4:	1080      	asrs	r0, r0, #2
 80096a6:	0146      	lsls	r6, r0, #5
 80096a8:	6120      	str	r0, [r4, #16]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 fb60 	bl	8009d70 <__hi0bits>
 80096b0:	1a30      	subs	r0, r6, r0
 80096b2:	f8d8 6000 	ldr.w	r6, [r8]
 80096b6:	42b0      	cmp	r0, r6
 80096b8:	dd63      	ble.n	8009782 <__gethex+0x286>
 80096ba:	1b87      	subs	r7, r0, r6
 80096bc:	4639      	mov	r1, r7
 80096be:	4620      	mov	r0, r4
 80096c0:	f000 fefa 	bl	800a4b8 <__any_on>
 80096c4:	4682      	mov	sl, r0
 80096c6:	b1a8      	cbz	r0, 80096f4 <__gethex+0x1f8>
 80096c8:	1e7b      	subs	r3, r7, #1
 80096ca:	1159      	asrs	r1, r3, #5
 80096cc:	f003 021f 	and.w	r2, r3, #31
 80096d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80096d4:	f04f 0a01 	mov.w	sl, #1
 80096d8:	fa0a f202 	lsl.w	r2, sl, r2
 80096dc:	420a      	tst	r2, r1
 80096de:	d009      	beq.n	80096f4 <__gethex+0x1f8>
 80096e0:	4553      	cmp	r3, sl
 80096e2:	dd05      	ble.n	80096f0 <__gethex+0x1f4>
 80096e4:	1eb9      	subs	r1, r7, #2
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 fee6 	bl	800a4b8 <__any_on>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d145      	bne.n	800977c <__gethex+0x280>
 80096f0:	f04f 0a02 	mov.w	sl, #2
 80096f4:	4639      	mov	r1, r7
 80096f6:	4620      	mov	r0, r4
 80096f8:	f7ff fe98 	bl	800942c <rshift>
 80096fc:	443d      	add	r5, r7
 80096fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009702:	42ab      	cmp	r3, r5
 8009704:	da4c      	bge.n	80097a0 <__gethex+0x2a4>
 8009706:	ee18 0a10 	vmov	r0, s16
 800970a:	4621      	mov	r1, r4
 800970c:	f000 fa7a 	bl	8009c04 <_Bfree>
 8009710:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009712:	2300      	movs	r3, #0
 8009714:	6013      	str	r3, [r2, #0]
 8009716:	27a3      	movs	r7, #163	; 0xa3
 8009718:	e785      	b.n	8009626 <__gethex+0x12a>
 800971a:	1e73      	subs	r3, r6, #1
 800971c:	9a05      	ldr	r2, [sp, #20]
 800971e:	9303      	str	r3, [sp, #12]
 8009720:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009724:	4293      	cmp	r3, r2
 8009726:	d019      	beq.n	800975c <__gethex+0x260>
 8009728:	f1bb 0f20 	cmp.w	fp, #32
 800972c:	d107      	bne.n	800973e <__gethex+0x242>
 800972e:	9b02      	ldr	r3, [sp, #8]
 8009730:	9a00      	ldr	r2, [sp, #0]
 8009732:	f843 2b04 	str.w	r2, [r3], #4
 8009736:	9302      	str	r3, [sp, #8]
 8009738:	2300      	movs	r3, #0
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	469b      	mov	fp, r3
 800973e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009742:	f7ff fec5 	bl	80094d0 <__hexdig_fun>
 8009746:	9b00      	ldr	r3, [sp, #0]
 8009748:	f000 000f 	and.w	r0, r0, #15
 800974c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009750:	4303      	orrs	r3, r0
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	f10b 0b04 	add.w	fp, fp, #4
 8009758:	9b03      	ldr	r3, [sp, #12]
 800975a:	e00d      	b.n	8009778 <__gethex+0x27c>
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	9a06      	ldr	r2, [sp, #24]
 8009760:	4413      	add	r3, r2
 8009762:	42bb      	cmp	r3, r7
 8009764:	d3e0      	bcc.n	8009728 <__gethex+0x22c>
 8009766:	4618      	mov	r0, r3
 8009768:	9901      	ldr	r1, [sp, #4]
 800976a:	9307      	str	r3, [sp, #28]
 800976c:	4652      	mov	r2, sl
 800976e:	f001 f89b 	bl	800a8a8 <strncmp>
 8009772:	9b07      	ldr	r3, [sp, #28]
 8009774:	2800      	cmp	r0, #0
 8009776:	d1d7      	bne.n	8009728 <__gethex+0x22c>
 8009778:	461e      	mov	r6, r3
 800977a:	e78b      	b.n	8009694 <__gethex+0x198>
 800977c:	f04f 0a03 	mov.w	sl, #3
 8009780:	e7b8      	b.n	80096f4 <__gethex+0x1f8>
 8009782:	da0a      	bge.n	800979a <__gethex+0x29e>
 8009784:	1a37      	subs	r7, r6, r0
 8009786:	4621      	mov	r1, r4
 8009788:	ee18 0a10 	vmov	r0, s16
 800978c:	463a      	mov	r2, r7
 800978e:	f000 fc55 	bl	800a03c <__lshift>
 8009792:	1bed      	subs	r5, r5, r7
 8009794:	4604      	mov	r4, r0
 8009796:	f100 0914 	add.w	r9, r0, #20
 800979a:	f04f 0a00 	mov.w	sl, #0
 800979e:	e7ae      	b.n	80096fe <__gethex+0x202>
 80097a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80097a4:	42a8      	cmp	r0, r5
 80097a6:	dd72      	ble.n	800988e <__gethex+0x392>
 80097a8:	1b45      	subs	r5, r0, r5
 80097aa:	42ae      	cmp	r6, r5
 80097ac:	dc36      	bgt.n	800981c <__gethex+0x320>
 80097ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d02a      	beq.n	800980c <__gethex+0x310>
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d02c      	beq.n	8009814 <__gethex+0x318>
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d115      	bne.n	80097ea <__gethex+0x2ee>
 80097be:	42ae      	cmp	r6, r5
 80097c0:	d113      	bne.n	80097ea <__gethex+0x2ee>
 80097c2:	2e01      	cmp	r6, #1
 80097c4:	d10b      	bne.n	80097de <__gethex+0x2e2>
 80097c6:	9a04      	ldr	r2, [sp, #16]
 80097c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80097cc:	6013      	str	r3, [r2, #0]
 80097ce:	2301      	movs	r3, #1
 80097d0:	6123      	str	r3, [r4, #16]
 80097d2:	f8c9 3000 	str.w	r3, [r9]
 80097d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097d8:	2762      	movs	r7, #98	; 0x62
 80097da:	601c      	str	r4, [r3, #0]
 80097dc:	e723      	b.n	8009626 <__gethex+0x12a>
 80097de:	1e71      	subs	r1, r6, #1
 80097e0:	4620      	mov	r0, r4
 80097e2:	f000 fe69 	bl	800a4b8 <__any_on>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d1ed      	bne.n	80097c6 <__gethex+0x2ca>
 80097ea:	ee18 0a10 	vmov	r0, s16
 80097ee:	4621      	mov	r1, r4
 80097f0:	f000 fa08 	bl	8009c04 <_Bfree>
 80097f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097f6:	2300      	movs	r3, #0
 80097f8:	6013      	str	r3, [r2, #0]
 80097fa:	2750      	movs	r7, #80	; 0x50
 80097fc:	e713      	b.n	8009626 <__gethex+0x12a>
 80097fe:	bf00      	nop
 8009800:	0800b408 	.word	0x0800b408
 8009804:	0800b38c 	.word	0x0800b38c
 8009808:	0800b39d 	.word	0x0800b39d
 800980c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1eb      	bne.n	80097ea <__gethex+0x2ee>
 8009812:	e7d8      	b.n	80097c6 <__gethex+0x2ca>
 8009814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1d5      	bne.n	80097c6 <__gethex+0x2ca>
 800981a:	e7e6      	b.n	80097ea <__gethex+0x2ee>
 800981c:	1e6f      	subs	r7, r5, #1
 800981e:	f1ba 0f00 	cmp.w	sl, #0
 8009822:	d131      	bne.n	8009888 <__gethex+0x38c>
 8009824:	b127      	cbz	r7, 8009830 <__gethex+0x334>
 8009826:	4639      	mov	r1, r7
 8009828:	4620      	mov	r0, r4
 800982a:	f000 fe45 	bl	800a4b8 <__any_on>
 800982e:	4682      	mov	sl, r0
 8009830:	117b      	asrs	r3, r7, #5
 8009832:	2101      	movs	r1, #1
 8009834:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009838:	f007 071f 	and.w	r7, r7, #31
 800983c:	fa01 f707 	lsl.w	r7, r1, r7
 8009840:	421f      	tst	r7, r3
 8009842:	4629      	mov	r1, r5
 8009844:	4620      	mov	r0, r4
 8009846:	bf18      	it	ne
 8009848:	f04a 0a02 	orrne.w	sl, sl, #2
 800984c:	1b76      	subs	r6, r6, r5
 800984e:	f7ff fded 	bl	800942c <rshift>
 8009852:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009856:	2702      	movs	r7, #2
 8009858:	f1ba 0f00 	cmp.w	sl, #0
 800985c:	d048      	beq.n	80098f0 <__gethex+0x3f4>
 800985e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009862:	2b02      	cmp	r3, #2
 8009864:	d015      	beq.n	8009892 <__gethex+0x396>
 8009866:	2b03      	cmp	r3, #3
 8009868:	d017      	beq.n	800989a <__gethex+0x39e>
 800986a:	2b01      	cmp	r3, #1
 800986c:	d109      	bne.n	8009882 <__gethex+0x386>
 800986e:	f01a 0f02 	tst.w	sl, #2
 8009872:	d006      	beq.n	8009882 <__gethex+0x386>
 8009874:	f8d9 0000 	ldr.w	r0, [r9]
 8009878:	ea4a 0a00 	orr.w	sl, sl, r0
 800987c:	f01a 0f01 	tst.w	sl, #1
 8009880:	d10e      	bne.n	80098a0 <__gethex+0x3a4>
 8009882:	f047 0710 	orr.w	r7, r7, #16
 8009886:	e033      	b.n	80098f0 <__gethex+0x3f4>
 8009888:	f04f 0a01 	mov.w	sl, #1
 800988c:	e7d0      	b.n	8009830 <__gethex+0x334>
 800988e:	2701      	movs	r7, #1
 8009890:	e7e2      	b.n	8009858 <__gethex+0x35c>
 8009892:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009894:	f1c3 0301 	rsb	r3, r3, #1
 8009898:	9315      	str	r3, [sp, #84]	; 0x54
 800989a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800989c:	2b00      	cmp	r3, #0
 800989e:	d0f0      	beq.n	8009882 <__gethex+0x386>
 80098a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80098a4:	f104 0314 	add.w	r3, r4, #20
 80098a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80098ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80098b0:	f04f 0c00 	mov.w	ip, #0
 80098b4:	4618      	mov	r0, r3
 80098b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 80098be:	d01c      	beq.n	80098fa <__gethex+0x3fe>
 80098c0:	3201      	adds	r2, #1
 80098c2:	6002      	str	r2, [r0, #0]
 80098c4:	2f02      	cmp	r7, #2
 80098c6:	f104 0314 	add.w	r3, r4, #20
 80098ca:	d13f      	bne.n	800994c <__gethex+0x450>
 80098cc:	f8d8 2000 	ldr.w	r2, [r8]
 80098d0:	3a01      	subs	r2, #1
 80098d2:	42b2      	cmp	r2, r6
 80098d4:	d10a      	bne.n	80098ec <__gethex+0x3f0>
 80098d6:	1171      	asrs	r1, r6, #5
 80098d8:	2201      	movs	r2, #1
 80098da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80098de:	f006 061f 	and.w	r6, r6, #31
 80098e2:	fa02 f606 	lsl.w	r6, r2, r6
 80098e6:	421e      	tst	r6, r3
 80098e8:	bf18      	it	ne
 80098ea:	4617      	movne	r7, r2
 80098ec:	f047 0720 	orr.w	r7, r7, #32
 80098f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098f2:	601c      	str	r4, [r3, #0]
 80098f4:	9b04      	ldr	r3, [sp, #16]
 80098f6:	601d      	str	r5, [r3, #0]
 80098f8:	e695      	b.n	8009626 <__gethex+0x12a>
 80098fa:	4299      	cmp	r1, r3
 80098fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8009900:	d8d8      	bhi.n	80098b4 <__gethex+0x3b8>
 8009902:	68a3      	ldr	r3, [r4, #8]
 8009904:	459b      	cmp	fp, r3
 8009906:	db19      	blt.n	800993c <__gethex+0x440>
 8009908:	6861      	ldr	r1, [r4, #4]
 800990a:	ee18 0a10 	vmov	r0, s16
 800990e:	3101      	adds	r1, #1
 8009910:	f000 f938 	bl	8009b84 <_Balloc>
 8009914:	4681      	mov	r9, r0
 8009916:	b918      	cbnz	r0, 8009920 <__gethex+0x424>
 8009918:	4b1a      	ldr	r3, [pc, #104]	; (8009984 <__gethex+0x488>)
 800991a:	4602      	mov	r2, r0
 800991c:	2184      	movs	r1, #132	; 0x84
 800991e:	e6a8      	b.n	8009672 <__gethex+0x176>
 8009920:	6922      	ldr	r2, [r4, #16]
 8009922:	3202      	adds	r2, #2
 8009924:	f104 010c 	add.w	r1, r4, #12
 8009928:	0092      	lsls	r2, r2, #2
 800992a:	300c      	adds	r0, #12
 800992c:	f7fc ffa1 	bl	8006872 <memcpy>
 8009930:	4621      	mov	r1, r4
 8009932:	ee18 0a10 	vmov	r0, s16
 8009936:	f000 f965 	bl	8009c04 <_Bfree>
 800993a:	464c      	mov	r4, r9
 800993c:	6923      	ldr	r3, [r4, #16]
 800993e:	1c5a      	adds	r2, r3, #1
 8009940:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009944:	6122      	str	r2, [r4, #16]
 8009946:	2201      	movs	r2, #1
 8009948:	615a      	str	r2, [r3, #20]
 800994a:	e7bb      	b.n	80098c4 <__gethex+0x3c8>
 800994c:	6922      	ldr	r2, [r4, #16]
 800994e:	455a      	cmp	r2, fp
 8009950:	dd0b      	ble.n	800996a <__gethex+0x46e>
 8009952:	2101      	movs	r1, #1
 8009954:	4620      	mov	r0, r4
 8009956:	f7ff fd69 	bl	800942c <rshift>
 800995a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800995e:	3501      	adds	r5, #1
 8009960:	42ab      	cmp	r3, r5
 8009962:	f6ff aed0 	blt.w	8009706 <__gethex+0x20a>
 8009966:	2701      	movs	r7, #1
 8009968:	e7c0      	b.n	80098ec <__gethex+0x3f0>
 800996a:	f016 061f 	ands.w	r6, r6, #31
 800996e:	d0fa      	beq.n	8009966 <__gethex+0x46a>
 8009970:	449a      	add	sl, r3
 8009972:	f1c6 0620 	rsb	r6, r6, #32
 8009976:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800997a:	f000 f9f9 	bl	8009d70 <__hi0bits>
 800997e:	42b0      	cmp	r0, r6
 8009980:	dbe7      	blt.n	8009952 <__gethex+0x456>
 8009982:	e7f0      	b.n	8009966 <__gethex+0x46a>
 8009984:	0800b38c 	.word	0x0800b38c

08009988 <L_shift>:
 8009988:	f1c2 0208 	rsb	r2, r2, #8
 800998c:	0092      	lsls	r2, r2, #2
 800998e:	b570      	push	{r4, r5, r6, lr}
 8009990:	f1c2 0620 	rsb	r6, r2, #32
 8009994:	6843      	ldr	r3, [r0, #4]
 8009996:	6804      	ldr	r4, [r0, #0]
 8009998:	fa03 f506 	lsl.w	r5, r3, r6
 800999c:	432c      	orrs	r4, r5
 800999e:	40d3      	lsrs	r3, r2
 80099a0:	6004      	str	r4, [r0, #0]
 80099a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80099a6:	4288      	cmp	r0, r1
 80099a8:	d3f4      	bcc.n	8009994 <L_shift+0xc>
 80099aa:	bd70      	pop	{r4, r5, r6, pc}

080099ac <__match>:
 80099ac:	b530      	push	{r4, r5, lr}
 80099ae:	6803      	ldr	r3, [r0, #0]
 80099b0:	3301      	adds	r3, #1
 80099b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099b6:	b914      	cbnz	r4, 80099be <__match+0x12>
 80099b8:	6003      	str	r3, [r0, #0]
 80099ba:	2001      	movs	r0, #1
 80099bc:	bd30      	pop	{r4, r5, pc}
 80099be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80099c6:	2d19      	cmp	r5, #25
 80099c8:	bf98      	it	ls
 80099ca:	3220      	addls	r2, #32
 80099cc:	42a2      	cmp	r2, r4
 80099ce:	d0f0      	beq.n	80099b2 <__match+0x6>
 80099d0:	2000      	movs	r0, #0
 80099d2:	e7f3      	b.n	80099bc <__match+0x10>

080099d4 <__hexnan>:
 80099d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d8:	680b      	ldr	r3, [r1, #0]
 80099da:	6801      	ldr	r1, [r0, #0]
 80099dc:	115e      	asrs	r6, r3, #5
 80099de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80099e2:	f013 031f 	ands.w	r3, r3, #31
 80099e6:	b087      	sub	sp, #28
 80099e8:	bf18      	it	ne
 80099ea:	3604      	addne	r6, #4
 80099ec:	2500      	movs	r5, #0
 80099ee:	1f37      	subs	r7, r6, #4
 80099f0:	4682      	mov	sl, r0
 80099f2:	4690      	mov	r8, r2
 80099f4:	9301      	str	r3, [sp, #4]
 80099f6:	f846 5c04 	str.w	r5, [r6, #-4]
 80099fa:	46b9      	mov	r9, r7
 80099fc:	463c      	mov	r4, r7
 80099fe:	9502      	str	r5, [sp, #8]
 8009a00:	46ab      	mov	fp, r5
 8009a02:	784a      	ldrb	r2, [r1, #1]
 8009a04:	1c4b      	adds	r3, r1, #1
 8009a06:	9303      	str	r3, [sp, #12]
 8009a08:	b342      	cbz	r2, 8009a5c <__hexnan+0x88>
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	9105      	str	r1, [sp, #20]
 8009a0e:	9204      	str	r2, [sp, #16]
 8009a10:	f7ff fd5e 	bl	80094d0 <__hexdig_fun>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d14f      	bne.n	8009ab8 <__hexnan+0xe4>
 8009a18:	9a04      	ldr	r2, [sp, #16]
 8009a1a:	9905      	ldr	r1, [sp, #20]
 8009a1c:	2a20      	cmp	r2, #32
 8009a1e:	d818      	bhi.n	8009a52 <__hexnan+0x7e>
 8009a20:	9b02      	ldr	r3, [sp, #8]
 8009a22:	459b      	cmp	fp, r3
 8009a24:	dd13      	ble.n	8009a4e <__hexnan+0x7a>
 8009a26:	454c      	cmp	r4, r9
 8009a28:	d206      	bcs.n	8009a38 <__hexnan+0x64>
 8009a2a:	2d07      	cmp	r5, #7
 8009a2c:	dc04      	bgt.n	8009a38 <__hexnan+0x64>
 8009a2e:	462a      	mov	r2, r5
 8009a30:	4649      	mov	r1, r9
 8009a32:	4620      	mov	r0, r4
 8009a34:	f7ff ffa8 	bl	8009988 <L_shift>
 8009a38:	4544      	cmp	r4, r8
 8009a3a:	d950      	bls.n	8009ade <__hexnan+0x10a>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f1a4 0904 	sub.w	r9, r4, #4
 8009a42:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a46:	f8cd b008 	str.w	fp, [sp, #8]
 8009a4a:	464c      	mov	r4, r9
 8009a4c:	461d      	mov	r5, r3
 8009a4e:	9903      	ldr	r1, [sp, #12]
 8009a50:	e7d7      	b.n	8009a02 <__hexnan+0x2e>
 8009a52:	2a29      	cmp	r2, #41	; 0x29
 8009a54:	d156      	bne.n	8009b04 <__hexnan+0x130>
 8009a56:	3102      	adds	r1, #2
 8009a58:	f8ca 1000 	str.w	r1, [sl]
 8009a5c:	f1bb 0f00 	cmp.w	fp, #0
 8009a60:	d050      	beq.n	8009b04 <__hexnan+0x130>
 8009a62:	454c      	cmp	r4, r9
 8009a64:	d206      	bcs.n	8009a74 <__hexnan+0xa0>
 8009a66:	2d07      	cmp	r5, #7
 8009a68:	dc04      	bgt.n	8009a74 <__hexnan+0xa0>
 8009a6a:	462a      	mov	r2, r5
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f7ff ff8a 	bl	8009988 <L_shift>
 8009a74:	4544      	cmp	r4, r8
 8009a76:	d934      	bls.n	8009ae2 <__hexnan+0x10e>
 8009a78:	f1a8 0204 	sub.w	r2, r8, #4
 8009a7c:	4623      	mov	r3, r4
 8009a7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a82:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a86:	429f      	cmp	r7, r3
 8009a88:	d2f9      	bcs.n	8009a7e <__hexnan+0xaa>
 8009a8a:	1b3b      	subs	r3, r7, r4
 8009a8c:	f023 0303 	bic.w	r3, r3, #3
 8009a90:	3304      	adds	r3, #4
 8009a92:	3401      	adds	r4, #1
 8009a94:	3e03      	subs	r6, #3
 8009a96:	42b4      	cmp	r4, r6
 8009a98:	bf88      	it	hi
 8009a9a:	2304      	movhi	r3, #4
 8009a9c:	4443      	add	r3, r8
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f843 2b04 	str.w	r2, [r3], #4
 8009aa4:	429f      	cmp	r7, r3
 8009aa6:	d2fb      	bcs.n	8009aa0 <__hexnan+0xcc>
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	b91b      	cbnz	r3, 8009ab4 <__hexnan+0xe0>
 8009aac:	4547      	cmp	r7, r8
 8009aae:	d127      	bne.n	8009b00 <__hexnan+0x12c>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	603b      	str	r3, [r7, #0]
 8009ab4:	2005      	movs	r0, #5
 8009ab6:	e026      	b.n	8009b06 <__hexnan+0x132>
 8009ab8:	3501      	adds	r5, #1
 8009aba:	2d08      	cmp	r5, #8
 8009abc:	f10b 0b01 	add.w	fp, fp, #1
 8009ac0:	dd06      	ble.n	8009ad0 <__hexnan+0xfc>
 8009ac2:	4544      	cmp	r4, r8
 8009ac4:	d9c3      	bls.n	8009a4e <__hexnan+0x7a>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009acc:	2501      	movs	r5, #1
 8009ace:	3c04      	subs	r4, #4
 8009ad0:	6822      	ldr	r2, [r4, #0]
 8009ad2:	f000 000f 	and.w	r0, r0, #15
 8009ad6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009ada:	6022      	str	r2, [r4, #0]
 8009adc:	e7b7      	b.n	8009a4e <__hexnan+0x7a>
 8009ade:	2508      	movs	r5, #8
 8009ae0:	e7b5      	b.n	8009a4e <__hexnan+0x7a>
 8009ae2:	9b01      	ldr	r3, [sp, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d0df      	beq.n	8009aa8 <__hexnan+0xd4>
 8009ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8009aec:	f1c3 0320 	rsb	r3, r3, #32
 8009af0:	fa22 f303 	lsr.w	r3, r2, r3
 8009af4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009af8:	401a      	ands	r2, r3
 8009afa:	f846 2c04 	str.w	r2, [r6, #-4]
 8009afe:	e7d3      	b.n	8009aa8 <__hexnan+0xd4>
 8009b00:	3f04      	subs	r7, #4
 8009b02:	e7d1      	b.n	8009aa8 <__hexnan+0xd4>
 8009b04:	2004      	movs	r0, #4
 8009b06:	b007      	add	sp, #28
 8009b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b0c <_localeconv_r>:
 8009b0c:	4800      	ldr	r0, [pc, #0]	; (8009b10 <_localeconv_r+0x4>)
 8009b0e:	4770      	bx	lr
 8009b10:	20000168 	.word	0x20000168

08009b14 <_lseek_r>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	4d07      	ldr	r5, [pc, #28]	; (8009b34 <_lseek_r+0x20>)
 8009b18:	4604      	mov	r4, r0
 8009b1a:	4608      	mov	r0, r1
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	2200      	movs	r2, #0
 8009b20:	602a      	str	r2, [r5, #0]
 8009b22:	461a      	mov	r2, r3
 8009b24:	f7f7 ff1e 	bl	8001964 <_lseek>
 8009b28:	1c43      	adds	r3, r0, #1
 8009b2a:	d102      	bne.n	8009b32 <_lseek_r+0x1e>
 8009b2c:	682b      	ldr	r3, [r5, #0]
 8009b2e:	b103      	cbz	r3, 8009b32 <_lseek_r+0x1e>
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	bd38      	pop	{r3, r4, r5, pc}
 8009b34:	20004fd4 	.word	0x20004fd4

08009b38 <malloc>:
 8009b38:	4b02      	ldr	r3, [pc, #8]	; (8009b44 <malloc+0xc>)
 8009b3a:	4601      	mov	r1, r0
 8009b3c:	6818      	ldr	r0, [r3, #0]
 8009b3e:	f7fc beaf 	b.w	80068a0 <_malloc_r>
 8009b42:	bf00      	nop
 8009b44:	20000010 	.word	0x20000010

08009b48 <__ascii_mbtowc>:
 8009b48:	b082      	sub	sp, #8
 8009b4a:	b901      	cbnz	r1, 8009b4e <__ascii_mbtowc+0x6>
 8009b4c:	a901      	add	r1, sp, #4
 8009b4e:	b142      	cbz	r2, 8009b62 <__ascii_mbtowc+0x1a>
 8009b50:	b14b      	cbz	r3, 8009b66 <__ascii_mbtowc+0x1e>
 8009b52:	7813      	ldrb	r3, [r2, #0]
 8009b54:	600b      	str	r3, [r1, #0]
 8009b56:	7812      	ldrb	r2, [r2, #0]
 8009b58:	1e10      	subs	r0, r2, #0
 8009b5a:	bf18      	it	ne
 8009b5c:	2001      	movne	r0, #1
 8009b5e:	b002      	add	sp, #8
 8009b60:	4770      	bx	lr
 8009b62:	4610      	mov	r0, r2
 8009b64:	e7fb      	b.n	8009b5e <__ascii_mbtowc+0x16>
 8009b66:	f06f 0001 	mvn.w	r0, #1
 8009b6a:	e7f8      	b.n	8009b5e <__ascii_mbtowc+0x16>

08009b6c <__malloc_lock>:
 8009b6c:	4801      	ldr	r0, [pc, #4]	; (8009b74 <__malloc_lock+0x8>)
 8009b6e:	f7fc be7e 	b.w	800686e <__retarget_lock_acquire_recursive>
 8009b72:	bf00      	nop
 8009b74:	20004fcc 	.word	0x20004fcc

08009b78 <__malloc_unlock>:
 8009b78:	4801      	ldr	r0, [pc, #4]	; (8009b80 <__malloc_unlock+0x8>)
 8009b7a:	f7fc be79 	b.w	8006870 <__retarget_lock_release_recursive>
 8009b7e:	bf00      	nop
 8009b80:	20004fcc 	.word	0x20004fcc

08009b84 <_Balloc>:
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b88:	4604      	mov	r4, r0
 8009b8a:	460d      	mov	r5, r1
 8009b8c:	b976      	cbnz	r6, 8009bac <_Balloc+0x28>
 8009b8e:	2010      	movs	r0, #16
 8009b90:	f7ff ffd2 	bl	8009b38 <malloc>
 8009b94:	4602      	mov	r2, r0
 8009b96:	6260      	str	r0, [r4, #36]	; 0x24
 8009b98:	b920      	cbnz	r0, 8009ba4 <_Balloc+0x20>
 8009b9a:	4b18      	ldr	r3, [pc, #96]	; (8009bfc <_Balloc+0x78>)
 8009b9c:	4818      	ldr	r0, [pc, #96]	; (8009c00 <_Balloc+0x7c>)
 8009b9e:	2166      	movs	r1, #102	; 0x66
 8009ba0:	f000 fea2 	bl	800a8e8 <__assert_func>
 8009ba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ba8:	6006      	str	r6, [r0, #0]
 8009baa:	60c6      	str	r6, [r0, #12]
 8009bac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009bae:	68f3      	ldr	r3, [r6, #12]
 8009bb0:	b183      	cbz	r3, 8009bd4 <_Balloc+0x50>
 8009bb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009bba:	b9b8      	cbnz	r0, 8009bec <_Balloc+0x68>
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	fa01 f605 	lsl.w	r6, r1, r5
 8009bc2:	1d72      	adds	r2, r6, #5
 8009bc4:	0092      	lsls	r2, r2, #2
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f000 fc97 	bl	800a4fa <_calloc_r>
 8009bcc:	b160      	cbz	r0, 8009be8 <_Balloc+0x64>
 8009bce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009bd2:	e00e      	b.n	8009bf2 <_Balloc+0x6e>
 8009bd4:	2221      	movs	r2, #33	; 0x21
 8009bd6:	2104      	movs	r1, #4
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f000 fc8e 	bl	800a4fa <_calloc_r>
 8009bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009be0:	60f0      	str	r0, [r6, #12]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1e4      	bne.n	8009bb2 <_Balloc+0x2e>
 8009be8:	2000      	movs	r0, #0
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	6802      	ldr	r2, [r0, #0]
 8009bee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bf8:	e7f7      	b.n	8009bea <_Balloc+0x66>
 8009bfa:	bf00      	nop
 8009bfc:	0800b316 	.word	0x0800b316
 8009c00:	0800b41c 	.word	0x0800b41c

08009c04 <_Bfree>:
 8009c04:	b570      	push	{r4, r5, r6, lr}
 8009c06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c08:	4605      	mov	r5, r0
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	b976      	cbnz	r6, 8009c2c <_Bfree+0x28>
 8009c0e:	2010      	movs	r0, #16
 8009c10:	f7ff ff92 	bl	8009b38 <malloc>
 8009c14:	4602      	mov	r2, r0
 8009c16:	6268      	str	r0, [r5, #36]	; 0x24
 8009c18:	b920      	cbnz	r0, 8009c24 <_Bfree+0x20>
 8009c1a:	4b09      	ldr	r3, [pc, #36]	; (8009c40 <_Bfree+0x3c>)
 8009c1c:	4809      	ldr	r0, [pc, #36]	; (8009c44 <_Bfree+0x40>)
 8009c1e:	218a      	movs	r1, #138	; 0x8a
 8009c20:	f000 fe62 	bl	800a8e8 <__assert_func>
 8009c24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c28:	6006      	str	r6, [r0, #0]
 8009c2a:	60c6      	str	r6, [r0, #12]
 8009c2c:	b13c      	cbz	r4, 8009c3e <_Bfree+0x3a>
 8009c2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c30:	6862      	ldr	r2, [r4, #4]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c38:	6021      	str	r1, [r4, #0]
 8009c3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
 8009c40:	0800b316 	.word	0x0800b316
 8009c44:	0800b41c 	.word	0x0800b41c

08009c48 <__multadd>:
 8009c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c4c:	690e      	ldr	r6, [r1, #16]
 8009c4e:	4607      	mov	r7, r0
 8009c50:	4698      	mov	r8, r3
 8009c52:	460c      	mov	r4, r1
 8009c54:	f101 0014 	add.w	r0, r1, #20
 8009c58:	2300      	movs	r3, #0
 8009c5a:	6805      	ldr	r5, [r0, #0]
 8009c5c:	b2a9      	uxth	r1, r5
 8009c5e:	fb02 8101 	mla	r1, r2, r1, r8
 8009c62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009c66:	0c2d      	lsrs	r5, r5, #16
 8009c68:	fb02 c505 	mla	r5, r2, r5, ip
 8009c6c:	b289      	uxth	r1, r1
 8009c6e:	3301      	adds	r3, #1
 8009c70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009c74:	429e      	cmp	r6, r3
 8009c76:	f840 1b04 	str.w	r1, [r0], #4
 8009c7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009c7e:	dcec      	bgt.n	8009c5a <__multadd+0x12>
 8009c80:	f1b8 0f00 	cmp.w	r8, #0
 8009c84:	d022      	beq.n	8009ccc <__multadd+0x84>
 8009c86:	68a3      	ldr	r3, [r4, #8]
 8009c88:	42b3      	cmp	r3, r6
 8009c8a:	dc19      	bgt.n	8009cc0 <__multadd+0x78>
 8009c8c:	6861      	ldr	r1, [r4, #4]
 8009c8e:	4638      	mov	r0, r7
 8009c90:	3101      	adds	r1, #1
 8009c92:	f7ff ff77 	bl	8009b84 <_Balloc>
 8009c96:	4605      	mov	r5, r0
 8009c98:	b928      	cbnz	r0, 8009ca6 <__multadd+0x5e>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	4b0d      	ldr	r3, [pc, #52]	; (8009cd4 <__multadd+0x8c>)
 8009c9e:	480e      	ldr	r0, [pc, #56]	; (8009cd8 <__multadd+0x90>)
 8009ca0:	21b5      	movs	r1, #181	; 0xb5
 8009ca2:	f000 fe21 	bl	800a8e8 <__assert_func>
 8009ca6:	6922      	ldr	r2, [r4, #16]
 8009ca8:	3202      	adds	r2, #2
 8009caa:	f104 010c 	add.w	r1, r4, #12
 8009cae:	0092      	lsls	r2, r2, #2
 8009cb0:	300c      	adds	r0, #12
 8009cb2:	f7fc fdde 	bl	8006872 <memcpy>
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	4638      	mov	r0, r7
 8009cba:	f7ff ffa3 	bl	8009c04 <_Bfree>
 8009cbe:	462c      	mov	r4, r5
 8009cc0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009cc4:	3601      	adds	r6, #1
 8009cc6:	f8c3 8014 	str.w	r8, [r3, #20]
 8009cca:	6126      	str	r6, [r4, #16]
 8009ccc:	4620      	mov	r0, r4
 8009cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd2:	bf00      	nop
 8009cd4:	0800b38c 	.word	0x0800b38c
 8009cd8:	0800b41c 	.word	0x0800b41c

08009cdc <__s2b>:
 8009cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	4615      	mov	r5, r2
 8009ce4:	461f      	mov	r7, r3
 8009ce6:	2209      	movs	r2, #9
 8009ce8:	3308      	adds	r3, #8
 8009cea:	4606      	mov	r6, r0
 8009cec:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	db09      	blt.n	8009d0c <__s2b+0x30>
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f7ff ff43 	bl	8009b84 <_Balloc>
 8009cfe:	b940      	cbnz	r0, 8009d12 <__s2b+0x36>
 8009d00:	4602      	mov	r2, r0
 8009d02:	4b19      	ldr	r3, [pc, #100]	; (8009d68 <__s2b+0x8c>)
 8009d04:	4819      	ldr	r0, [pc, #100]	; (8009d6c <__s2b+0x90>)
 8009d06:	21ce      	movs	r1, #206	; 0xce
 8009d08:	f000 fdee 	bl	800a8e8 <__assert_func>
 8009d0c:	0052      	lsls	r2, r2, #1
 8009d0e:	3101      	adds	r1, #1
 8009d10:	e7f0      	b.n	8009cf4 <__s2b+0x18>
 8009d12:	9b08      	ldr	r3, [sp, #32]
 8009d14:	6143      	str	r3, [r0, #20]
 8009d16:	2d09      	cmp	r5, #9
 8009d18:	f04f 0301 	mov.w	r3, #1
 8009d1c:	6103      	str	r3, [r0, #16]
 8009d1e:	dd16      	ble.n	8009d4e <__s2b+0x72>
 8009d20:	f104 0909 	add.w	r9, r4, #9
 8009d24:	46c8      	mov	r8, r9
 8009d26:	442c      	add	r4, r5
 8009d28:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009d2c:	4601      	mov	r1, r0
 8009d2e:	3b30      	subs	r3, #48	; 0x30
 8009d30:	220a      	movs	r2, #10
 8009d32:	4630      	mov	r0, r6
 8009d34:	f7ff ff88 	bl	8009c48 <__multadd>
 8009d38:	45a0      	cmp	r8, r4
 8009d3a:	d1f5      	bne.n	8009d28 <__s2b+0x4c>
 8009d3c:	f1a5 0408 	sub.w	r4, r5, #8
 8009d40:	444c      	add	r4, r9
 8009d42:	1b2d      	subs	r5, r5, r4
 8009d44:	1963      	adds	r3, r4, r5
 8009d46:	42bb      	cmp	r3, r7
 8009d48:	db04      	blt.n	8009d54 <__s2b+0x78>
 8009d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d4e:	340a      	adds	r4, #10
 8009d50:	2509      	movs	r5, #9
 8009d52:	e7f6      	b.n	8009d42 <__s2b+0x66>
 8009d54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d58:	4601      	mov	r1, r0
 8009d5a:	3b30      	subs	r3, #48	; 0x30
 8009d5c:	220a      	movs	r2, #10
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f7ff ff72 	bl	8009c48 <__multadd>
 8009d64:	e7ee      	b.n	8009d44 <__s2b+0x68>
 8009d66:	bf00      	nop
 8009d68:	0800b38c 	.word	0x0800b38c
 8009d6c:	0800b41c 	.word	0x0800b41c

08009d70 <__hi0bits>:
 8009d70:	0c03      	lsrs	r3, r0, #16
 8009d72:	041b      	lsls	r3, r3, #16
 8009d74:	b9d3      	cbnz	r3, 8009dac <__hi0bits+0x3c>
 8009d76:	0400      	lsls	r0, r0, #16
 8009d78:	2310      	movs	r3, #16
 8009d7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d7e:	bf04      	itt	eq
 8009d80:	0200      	lsleq	r0, r0, #8
 8009d82:	3308      	addeq	r3, #8
 8009d84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d88:	bf04      	itt	eq
 8009d8a:	0100      	lsleq	r0, r0, #4
 8009d8c:	3304      	addeq	r3, #4
 8009d8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d92:	bf04      	itt	eq
 8009d94:	0080      	lsleq	r0, r0, #2
 8009d96:	3302      	addeq	r3, #2
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	db05      	blt.n	8009da8 <__hi0bits+0x38>
 8009d9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009da0:	f103 0301 	add.w	r3, r3, #1
 8009da4:	bf08      	it	eq
 8009da6:	2320      	moveq	r3, #32
 8009da8:	4618      	mov	r0, r3
 8009daa:	4770      	bx	lr
 8009dac:	2300      	movs	r3, #0
 8009dae:	e7e4      	b.n	8009d7a <__hi0bits+0xa>

08009db0 <__lo0bits>:
 8009db0:	6803      	ldr	r3, [r0, #0]
 8009db2:	f013 0207 	ands.w	r2, r3, #7
 8009db6:	4601      	mov	r1, r0
 8009db8:	d00b      	beq.n	8009dd2 <__lo0bits+0x22>
 8009dba:	07da      	lsls	r2, r3, #31
 8009dbc:	d424      	bmi.n	8009e08 <__lo0bits+0x58>
 8009dbe:	0798      	lsls	r0, r3, #30
 8009dc0:	bf49      	itett	mi
 8009dc2:	085b      	lsrmi	r3, r3, #1
 8009dc4:	089b      	lsrpl	r3, r3, #2
 8009dc6:	2001      	movmi	r0, #1
 8009dc8:	600b      	strmi	r3, [r1, #0]
 8009dca:	bf5c      	itt	pl
 8009dcc:	600b      	strpl	r3, [r1, #0]
 8009dce:	2002      	movpl	r0, #2
 8009dd0:	4770      	bx	lr
 8009dd2:	b298      	uxth	r0, r3
 8009dd4:	b9b0      	cbnz	r0, 8009e04 <__lo0bits+0x54>
 8009dd6:	0c1b      	lsrs	r3, r3, #16
 8009dd8:	2010      	movs	r0, #16
 8009dda:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009dde:	bf04      	itt	eq
 8009de0:	0a1b      	lsreq	r3, r3, #8
 8009de2:	3008      	addeq	r0, #8
 8009de4:	071a      	lsls	r2, r3, #28
 8009de6:	bf04      	itt	eq
 8009de8:	091b      	lsreq	r3, r3, #4
 8009dea:	3004      	addeq	r0, #4
 8009dec:	079a      	lsls	r2, r3, #30
 8009dee:	bf04      	itt	eq
 8009df0:	089b      	lsreq	r3, r3, #2
 8009df2:	3002      	addeq	r0, #2
 8009df4:	07da      	lsls	r2, r3, #31
 8009df6:	d403      	bmi.n	8009e00 <__lo0bits+0x50>
 8009df8:	085b      	lsrs	r3, r3, #1
 8009dfa:	f100 0001 	add.w	r0, r0, #1
 8009dfe:	d005      	beq.n	8009e0c <__lo0bits+0x5c>
 8009e00:	600b      	str	r3, [r1, #0]
 8009e02:	4770      	bx	lr
 8009e04:	4610      	mov	r0, r2
 8009e06:	e7e8      	b.n	8009dda <__lo0bits+0x2a>
 8009e08:	2000      	movs	r0, #0
 8009e0a:	4770      	bx	lr
 8009e0c:	2020      	movs	r0, #32
 8009e0e:	4770      	bx	lr

08009e10 <__i2b>:
 8009e10:	b510      	push	{r4, lr}
 8009e12:	460c      	mov	r4, r1
 8009e14:	2101      	movs	r1, #1
 8009e16:	f7ff feb5 	bl	8009b84 <_Balloc>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	b928      	cbnz	r0, 8009e2a <__i2b+0x1a>
 8009e1e:	4b05      	ldr	r3, [pc, #20]	; (8009e34 <__i2b+0x24>)
 8009e20:	4805      	ldr	r0, [pc, #20]	; (8009e38 <__i2b+0x28>)
 8009e22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e26:	f000 fd5f 	bl	800a8e8 <__assert_func>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	6144      	str	r4, [r0, #20]
 8009e2e:	6103      	str	r3, [r0, #16]
 8009e30:	bd10      	pop	{r4, pc}
 8009e32:	bf00      	nop
 8009e34:	0800b38c 	.word	0x0800b38c
 8009e38:	0800b41c 	.word	0x0800b41c

08009e3c <__multiply>:
 8009e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e40:	4614      	mov	r4, r2
 8009e42:	690a      	ldr	r2, [r1, #16]
 8009e44:	6923      	ldr	r3, [r4, #16]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	bfb8      	it	lt
 8009e4a:	460b      	movlt	r3, r1
 8009e4c:	460d      	mov	r5, r1
 8009e4e:	bfbc      	itt	lt
 8009e50:	4625      	movlt	r5, r4
 8009e52:	461c      	movlt	r4, r3
 8009e54:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009e58:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009e5c:	68ab      	ldr	r3, [r5, #8]
 8009e5e:	6869      	ldr	r1, [r5, #4]
 8009e60:	eb0a 0709 	add.w	r7, sl, r9
 8009e64:	42bb      	cmp	r3, r7
 8009e66:	b085      	sub	sp, #20
 8009e68:	bfb8      	it	lt
 8009e6a:	3101      	addlt	r1, #1
 8009e6c:	f7ff fe8a 	bl	8009b84 <_Balloc>
 8009e70:	b930      	cbnz	r0, 8009e80 <__multiply+0x44>
 8009e72:	4602      	mov	r2, r0
 8009e74:	4b42      	ldr	r3, [pc, #264]	; (8009f80 <__multiply+0x144>)
 8009e76:	4843      	ldr	r0, [pc, #268]	; (8009f84 <__multiply+0x148>)
 8009e78:	f240 115d 	movw	r1, #349	; 0x15d
 8009e7c:	f000 fd34 	bl	800a8e8 <__assert_func>
 8009e80:	f100 0614 	add.w	r6, r0, #20
 8009e84:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009e88:	4633      	mov	r3, r6
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	4543      	cmp	r3, r8
 8009e8e:	d31e      	bcc.n	8009ece <__multiply+0x92>
 8009e90:	f105 0c14 	add.w	ip, r5, #20
 8009e94:	f104 0314 	add.w	r3, r4, #20
 8009e98:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009e9c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009ea0:	9202      	str	r2, [sp, #8]
 8009ea2:	ebac 0205 	sub.w	r2, ip, r5
 8009ea6:	3a15      	subs	r2, #21
 8009ea8:	f022 0203 	bic.w	r2, r2, #3
 8009eac:	3204      	adds	r2, #4
 8009eae:	f105 0115 	add.w	r1, r5, #21
 8009eb2:	458c      	cmp	ip, r1
 8009eb4:	bf38      	it	cc
 8009eb6:	2204      	movcc	r2, #4
 8009eb8:	9201      	str	r2, [sp, #4]
 8009eba:	9a02      	ldr	r2, [sp, #8]
 8009ebc:	9303      	str	r3, [sp, #12]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d808      	bhi.n	8009ed4 <__multiply+0x98>
 8009ec2:	2f00      	cmp	r7, #0
 8009ec4:	dc55      	bgt.n	8009f72 <__multiply+0x136>
 8009ec6:	6107      	str	r7, [r0, #16]
 8009ec8:	b005      	add	sp, #20
 8009eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ece:	f843 2b04 	str.w	r2, [r3], #4
 8009ed2:	e7db      	b.n	8009e8c <__multiply+0x50>
 8009ed4:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ed8:	f1ba 0f00 	cmp.w	sl, #0
 8009edc:	d020      	beq.n	8009f20 <__multiply+0xe4>
 8009ede:	f105 0e14 	add.w	lr, r5, #20
 8009ee2:	46b1      	mov	r9, r6
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009eea:	f8d9 b000 	ldr.w	fp, [r9]
 8009eee:	b2a1      	uxth	r1, r4
 8009ef0:	fa1f fb8b 	uxth.w	fp, fp
 8009ef4:	fb0a b101 	mla	r1, sl, r1, fp
 8009ef8:	4411      	add	r1, r2
 8009efa:	f8d9 2000 	ldr.w	r2, [r9]
 8009efe:	0c24      	lsrs	r4, r4, #16
 8009f00:	0c12      	lsrs	r2, r2, #16
 8009f02:	fb0a 2404 	mla	r4, sl, r4, r2
 8009f06:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009f0a:	b289      	uxth	r1, r1
 8009f0c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009f10:	45f4      	cmp	ip, lr
 8009f12:	f849 1b04 	str.w	r1, [r9], #4
 8009f16:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009f1a:	d8e4      	bhi.n	8009ee6 <__multiply+0xaa>
 8009f1c:	9901      	ldr	r1, [sp, #4]
 8009f1e:	5072      	str	r2, [r6, r1]
 8009f20:	9a03      	ldr	r2, [sp, #12]
 8009f22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f26:	3304      	adds	r3, #4
 8009f28:	f1b9 0f00 	cmp.w	r9, #0
 8009f2c:	d01f      	beq.n	8009f6e <__multiply+0x132>
 8009f2e:	6834      	ldr	r4, [r6, #0]
 8009f30:	f105 0114 	add.w	r1, r5, #20
 8009f34:	46b6      	mov	lr, r6
 8009f36:	f04f 0a00 	mov.w	sl, #0
 8009f3a:	880a      	ldrh	r2, [r1, #0]
 8009f3c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009f40:	fb09 b202 	mla	r2, r9, r2, fp
 8009f44:	4492      	add	sl, r2
 8009f46:	b2a4      	uxth	r4, r4
 8009f48:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009f4c:	f84e 4b04 	str.w	r4, [lr], #4
 8009f50:	f851 4b04 	ldr.w	r4, [r1], #4
 8009f54:	f8be 2000 	ldrh.w	r2, [lr]
 8009f58:	0c24      	lsrs	r4, r4, #16
 8009f5a:	fb09 2404 	mla	r4, r9, r4, r2
 8009f5e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009f62:	458c      	cmp	ip, r1
 8009f64:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009f68:	d8e7      	bhi.n	8009f3a <__multiply+0xfe>
 8009f6a:	9a01      	ldr	r2, [sp, #4]
 8009f6c:	50b4      	str	r4, [r6, r2]
 8009f6e:	3604      	adds	r6, #4
 8009f70:	e7a3      	b.n	8009eba <__multiply+0x7e>
 8009f72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1a5      	bne.n	8009ec6 <__multiply+0x8a>
 8009f7a:	3f01      	subs	r7, #1
 8009f7c:	e7a1      	b.n	8009ec2 <__multiply+0x86>
 8009f7e:	bf00      	nop
 8009f80:	0800b38c 	.word	0x0800b38c
 8009f84:	0800b41c 	.word	0x0800b41c

08009f88 <__pow5mult>:
 8009f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f8c:	4615      	mov	r5, r2
 8009f8e:	f012 0203 	ands.w	r2, r2, #3
 8009f92:	4606      	mov	r6, r0
 8009f94:	460f      	mov	r7, r1
 8009f96:	d007      	beq.n	8009fa8 <__pow5mult+0x20>
 8009f98:	4c25      	ldr	r4, [pc, #148]	; (800a030 <__pow5mult+0xa8>)
 8009f9a:	3a01      	subs	r2, #1
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fa2:	f7ff fe51 	bl	8009c48 <__multadd>
 8009fa6:	4607      	mov	r7, r0
 8009fa8:	10ad      	asrs	r5, r5, #2
 8009faa:	d03d      	beq.n	800a028 <__pow5mult+0xa0>
 8009fac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009fae:	b97c      	cbnz	r4, 8009fd0 <__pow5mult+0x48>
 8009fb0:	2010      	movs	r0, #16
 8009fb2:	f7ff fdc1 	bl	8009b38 <malloc>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	6270      	str	r0, [r6, #36]	; 0x24
 8009fba:	b928      	cbnz	r0, 8009fc8 <__pow5mult+0x40>
 8009fbc:	4b1d      	ldr	r3, [pc, #116]	; (800a034 <__pow5mult+0xac>)
 8009fbe:	481e      	ldr	r0, [pc, #120]	; (800a038 <__pow5mult+0xb0>)
 8009fc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009fc4:	f000 fc90 	bl	800a8e8 <__assert_func>
 8009fc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fcc:	6004      	str	r4, [r0, #0]
 8009fce:	60c4      	str	r4, [r0, #12]
 8009fd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009fd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009fd8:	b94c      	cbnz	r4, 8009fee <__pow5mult+0x66>
 8009fda:	f240 2171 	movw	r1, #625	; 0x271
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f7ff ff16 	bl	8009e10 <__i2b>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fea:	4604      	mov	r4, r0
 8009fec:	6003      	str	r3, [r0, #0]
 8009fee:	f04f 0900 	mov.w	r9, #0
 8009ff2:	07eb      	lsls	r3, r5, #31
 8009ff4:	d50a      	bpl.n	800a00c <__pow5mult+0x84>
 8009ff6:	4639      	mov	r1, r7
 8009ff8:	4622      	mov	r2, r4
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f7ff ff1e 	bl	8009e3c <__multiply>
 800a000:	4639      	mov	r1, r7
 800a002:	4680      	mov	r8, r0
 800a004:	4630      	mov	r0, r6
 800a006:	f7ff fdfd 	bl	8009c04 <_Bfree>
 800a00a:	4647      	mov	r7, r8
 800a00c:	106d      	asrs	r5, r5, #1
 800a00e:	d00b      	beq.n	800a028 <__pow5mult+0xa0>
 800a010:	6820      	ldr	r0, [r4, #0]
 800a012:	b938      	cbnz	r0, 800a024 <__pow5mult+0x9c>
 800a014:	4622      	mov	r2, r4
 800a016:	4621      	mov	r1, r4
 800a018:	4630      	mov	r0, r6
 800a01a:	f7ff ff0f 	bl	8009e3c <__multiply>
 800a01e:	6020      	str	r0, [r4, #0]
 800a020:	f8c0 9000 	str.w	r9, [r0]
 800a024:	4604      	mov	r4, r0
 800a026:	e7e4      	b.n	8009ff2 <__pow5mult+0x6a>
 800a028:	4638      	mov	r0, r7
 800a02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a02e:	bf00      	nop
 800a030:	0800b570 	.word	0x0800b570
 800a034:	0800b316 	.word	0x0800b316
 800a038:	0800b41c 	.word	0x0800b41c

0800a03c <__lshift>:
 800a03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a040:	460c      	mov	r4, r1
 800a042:	6849      	ldr	r1, [r1, #4]
 800a044:	6923      	ldr	r3, [r4, #16]
 800a046:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a04a:	68a3      	ldr	r3, [r4, #8]
 800a04c:	4607      	mov	r7, r0
 800a04e:	4691      	mov	r9, r2
 800a050:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a054:	f108 0601 	add.w	r6, r8, #1
 800a058:	42b3      	cmp	r3, r6
 800a05a:	db0b      	blt.n	800a074 <__lshift+0x38>
 800a05c:	4638      	mov	r0, r7
 800a05e:	f7ff fd91 	bl	8009b84 <_Balloc>
 800a062:	4605      	mov	r5, r0
 800a064:	b948      	cbnz	r0, 800a07a <__lshift+0x3e>
 800a066:	4602      	mov	r2, r0
 800a068:	4b28      	ldr	r3, [pc, #160]	; (800a10c <__lshift+0xd0>)
 800a06a:	4829      	ldr	r0, [pc, #164]	; (800a110 <__lshift+0xd4>)
 800a06c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a070:	f000 fc3a 	bl	800a8e8 <__assert_func>
 800a074:	3101      	adds	r1, #1
 800a076:	005b      	lsls	r3, r3, #1
 800a078:	e7ee      	b.n	800a058 <__lshift+0x1c>
 800a07a:	2300      	movs	r3, #0
 800a07c:	f100 0114 	add.w	r1, r0, #20
 800a080:	f100 0210 	add.w	r2, r0, #16
 800a084:	4618      	mov	r0, r3
 800a086:	4553      	cmp	r3, sl
 800a088:	db33      	blt.n	800a0f2 <__lshift+0xb6>
 800a08a:	6920      	ldr	r0, [r4, #16]
 800a08c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a090:	f104 0314 	add.w	r3, r4, #20
 800a094:	f019 091f 	ands.w	r9, r9, #31
 800a098:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a09c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a0a0:	d02b      	beq.n	800a0fa <__lshift+0xbe>
 800a0a2:	f1c9 0e20 	rsb	lr, r9, #32
 800a0a6:	468a      	mov	sl, r1
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	6818      	ldr	r0, [r3, #0]
 800a0ac:	fa00 f009 	lsl.w	r0, r0, r9
 800a0b0:	4302      	orrs	r2, r0
 800a0b2:	f84a 2b04 	str.w	r2, [sl], #4
 800a0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ba:	459c      	cmp	ip, r3
 800a0bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a0c0:	d8f3      	bhi.n	800a0aa <__lshift+0x6e>
 800a0c2:	ebac 0304 	sub.w	r3, ip, r4
 800a0c6:	3b15      	subs	r3, #21
 800a0c8:	f023 0303 	bic.w	r3, r3, #3
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	f104 0015 	add.w	r0, r4, #21
 800a0d2:	4584      	cmp	ip, r0
 800a0d4:	bf38      	it	cc
 800a0d6:	2304      	movcc	r3, #4
 800a0d8:	50ca      	str	r2, [r1, r3]
 800a0da:	b10a      	cbz	r2, 800a0e0 <__lshift+0xa4>
 800a0dc:	f108 0602 	add.w	r6, r8, #2
 800a0e0:	3e01      	subs	r6, #1
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	612e      	str	r6, [r5, #16]
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	f7ff fd8c 	bl	8009c04 <_Bfree>
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	e7c5      	b.n	800a086 <__lshift+0x4a>
 800a0fa:	3904      	subs	r1, #4
 800a0fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a100:	f841 2f04 	str.w	r2, [r1, #4]!
 800a104:	459c      	cmp	ip, r3
 800a106:	d8f9      	bhi.n	800a0fc <__lshift+0xc0>
 800a108:	e7ea      	b.n	800a0e0 <__lshift+0xa4>
 800a10a:	bf00      	nop
 800a10c:	0800b38c 	.word	0x0800b38c
 800a110:	0800b41c 	.word	0x0800b41c

0800a114 <__mcmp>:
 800a114:	b530      	push	{r4, r5, lr}
 800a116:	6902      	ldr	r2, [r0, #16]
 800a118:	690c      	ldr	r4, [r1, #16]
 800a11a:	1b12      	subs	r2, r2, r4
 800a11c:	d10e      	bne.n	800a13c <__mcmp+0x28>
 800a11e:	f100 0314 	add.w	r3, r0, #20
 800a122:	3114      	adds	r1, #20
 800a124:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a128:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a12c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a130:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a134:	42a5      	cmp	r5, r4
 800a136:	d003      	beq.n	800a140 <__mcmp+0x2c>
 800a138:	d305      	bcc.n	800a146 <__mcmp+0x32>
 800a13a:	2201      	movs	r2, #1
 800a13c:	4610      	mov	r0, r2
 800a13e:	bd30      	pop	{r4, r5, pc}
 800a140:	4283      	cmp	r3, r0
 800a142:	d3f3      	bcc.n	800a12c <__mcmp+0x18>
 800a144:	e7fa      	b.n	800a13c <__mcmp+0x28>
 800a146:	f04f 32ff 	mov.w	r2, #4294967295
 800a14a:	e7f7      	b.n	800a13c <__mcmp+0x28>

0800a14c <__mdiff>:
 800a14c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a150:	460c      	mov	r4, r1
 800a152:	4606      	mov	r6, r0
 800a154:	4611      	mov	r1, r2
 800a156:	4620      	mov	r0, r4
 800a158:	4617      	mov	r7, r2
 800a15a:	f7ff ffdb 	bl	800a114 <__mcmp>
 800a15e:	1e05      	subs	r5, r0, #0
 800a160:	d110      	bne.n	800a184 <__mdiff+0x38>
 800a162:	4629      	mov	r1, r5
 800a164:	4630      	mov	r0, r6
 800a166:	f7ff fd0d 	bl	8009b84 <_Balloc>
 800a16a:	b930      	cbnz	r0, 800a17a <__mdiff+0x2e>
 800a16c:	4b39      	ldr	r3, [pc, #228]	; (800a254 <__mdiff+0x108>)
 800a16e:	4602      	mov	r2, r0
 800a170:	f240 2132 	movw	r1, #562	; 0x232
 800a174:	4838      	ldr	r0, [pc, #224]	; (800a258 <__mdiff+0x10c>)
 800a176:	f000 fbb7 	bl	800a8e8 <__assert_func>
 800a17a:	2301      	movs	r3, #1
 800a17c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a184:	bfa4      	itt	ge
 800a186:	463b      	movge	r3, r7
 800a188:	4627      	movge	r7, r4
 800a18a:	4630      	mov	r0, r6
 800a18c:	6879      	ldr	r1, [r7, #4]
 800a18e:	bfa6      	itte	ge
 800a190:	461c      	movge	r4, r3
 800a192:	2500      	movge	r5, #0
 800a194:	2501      	movlt	r5, #1
 800a196:	f7ff fcf5 	bl	8009b84 <_Balloc>
 800a19a:	b920      	cbnz	r0, 800a1a6 <__mdiff+0x5a>
 800a19c:	4b2d      	ldr	r3, [pc, #180]	; (800a254 <__mdiff+0x108>)
 800a19e:	4602      	mov	r2, r0
 800a1a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a1a4:	e7e6      	b.n	800a174 <__mdiff+0x28>
 800a1a6:	693e      	ldr	r6, [r7, #16]
 800a1a8:	60c5      	str	r5, [r0, #12]
 800a1aa:	6925      	ldr	r5, [r4, #16]
 800a1ac:	f107 0114 	add.w	r1, r7, #20
 800a1b0:	f104 0914 	add.w	r9, r4, #20
 800a1b4:	f100 0e14 	add.w	lr, r0, #20
 800a1b8:	f107 0210 	add.w	r2, r7, #16
 800a1bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a1c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a1c4:	46f2      	mov	sl, lr
 800a1c6:	2700      	movs	r7, #0
 800a1c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a1cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a1d0:	fa1f f883 	uxth.w	r8, r3
 800a1d4:	fa17 f78b 	uxtah	r7, r7, fp
 800a1d8:	0c1b      	lsrs	r3, r3, #16
 800a1da:	eba7 0808 	sub.w	r8, r7, r8
 800a1de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a1e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a1e6:	fa1f f888 	uxth.w	r8, r8
 800a1ea:	141f      	asrs	r7, r3, #16
 800a1ec:	454d      	cmp	r5, r9
 800a1ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a1f2:	f84a 3b04 	str.w	r3, [sl], #4
 800a1f6:	d8e7      	bhi.n	800a1c8 <__mdiff+0x7c>
 800a1f8:	1b2b      	subs	r3, r5, r4
 800a1fa:	3b15      	subs	r3, #21
 800a1fc:	f023 0303 	bic.w	r3, r3, #3
 800a200:	3304      	adds	r3, #4
 800a202:	3415      	adds	r4, #21
 800a204:	42a5      	cmp	r5, r4
 800a206:	bf38      	it	cc
 800a208:	2304      	movcc	r3, #4
 800a20a:	4419      	add	r1, r3
 800a20c:	4473      	add	r3, lr
 800a20e:	469e      	mov	lr, r3
 800a210:	460d      	mov	r5, r1
 800a212:	4565      	cmp	r5, ip
 800a214:	d30e      	bcc.n	800a234 <__mdiff+0xe8>
 800a216:	f10c 0203 	add.w	r2, ip, #3
 800a21a:	1a52      	subs	r2, r2, r1
 800a21c:	f022 0203 	bic.w	r2, r2, #3
 800a220:	3903      	subs	r1, #3
 800a222:	458c      	cmp	ip, r1
 800a224:	bf38      	it	cc
 800a226:	2200      	movcc	r2, #0
 800a228:	441a      	add	r2, r3
 800a22a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a22e:	b17b      	cbz	r3, 800a250 <__mdiff+0x104>
 800a230:	6106      	str	r6, [r0, #16]
 800a232:	e7a5      	b.n	800a180 <__mdiff+0x34>
 800a234:	f855 8b04 	ldr.w	r8, [r5], #4
 800a238:	fa17 f488 	uxtah	r4, r7, r8
 800a23c:	1422      	asrs	r2, r4, #16
 800a23e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a242:	b2a4      	uxth	r4, r4
 800a244:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a248:	f84e 4b04 	str.w	r4, [lr], #4
 800a24c:	1417      	asrs	r7, r2, #16
 800a24e:	e7e0      	b.n	800a212 <__mdiff+0xc6>
 800a250:	3e01      	subs	r6, #1
 800a252:	e7ea      	b.n	800a22a <__mdiff+0xde>
 800a254:	0800b38c 	.word	0x0800b38c
 800a258:	0800b41c 	.word	0x0800b41c

0800a25c <__ulp>:
 800a25c:	b082      	sub	sp, #8
 800a25e:	ed8d 0b00 	vstr	d0, [sp]
 800a262:	9b01      	ldr	r3, [sp, #4]
 800a264:	4912      	ldr	r1, [pc, #72]	; (800a2b0 <__ulp+0x54>)
 800a266:	4019      	ands	r1, r3
 800a268:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a26c:	2900      	cmp	r1, #0
 800a26e:	dd05      	ble.n	800a27c <__ulp+0x20>
 800a270:	2200      	movs	r2, #0
 800a272:	460b      	mov	r3, r1
 800a274:	ec43 2b10 	vmov	d0, r2, r3
 800a278:	b002      	add	sp, #8
 800a27a:	4770      	bx	lr
 800a27c:	4249      	negs	r1, r1
 800a27e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a282:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a286:	f04f 0200 	mov.w	r2, #0
 800a28a:	f04f 0300 	mov.w	r3, #0
 800a28e:	da04      	bge.n	800a29a <__ulp+0x3e>
 800a290:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a294:	fa41 f300 	asr.w	r3, r1, r0
 800a298:	e7ec      	b.n	800a274 <__ulp+0x18>
 800a29a:	f1a0 0114 	sub.w	r1, r0, #20
 800a29e:	291e      	cmp	r1, #30
 800a2a0:	bfda      	itte	le
 800a2a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a2a6:	fa20 f101 	lsrle.w	r1, r0, r1
 800a2aa:	2101      	movgt	r1, #1
 800a2ac:	460a      	mov	r2, r1
 800a2ae:	e7e1      	b.n	800a274 <__ulp+0x18>
 800a2b0:	7ff00000 	.word	0x7ff00000

0800a2b4 <__b2d>:
 800a2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b6:	6905      	ldr	r5, [r0, #16]
 800a2b8:	f100 0714 	add.w	r7, r0, #20
 800a2bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a2c0:	1f2e      	subs	r6, r5, #4
 800a2c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f7ff fd52 	bl	8009d70 <__hi0bits>
 800a2cc:	f1c0 0320 	rsb	r3, r0, #32
 800a2d0:	280a      	cmp	r0, #10
 800a2d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a350 <__b2d+0x9c>
 800a2d6:	600b      	str	r3, [r1, #0]
 800a2d8:	dc14      	bgt.n	800a304 <__b2d+0x50>
 800a2da:	f1c0 0e0b 	rsb	lr, r0, #11
 800a2de:	fa24 f10e 	lsr.w	r1, r4, lr
 800a2e2:	42b7      	cmp	r7, r6
 800a2e4:	ea41 030c 	orr.w	r3, r1, ip
 800a2e8:	bf34      	ite	cc
 800a2ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a2ee:	2100      	movcs	r1, #0
 800a2f0:	3015      	adds	r0, #21
 800a2f2:	fa04 f000 	lsl.w	r0, r4, r0
 800a2f6:	fa21 f10e 	lsr.w	r1, r1, lr
 800a2fa:	ea40 0201 	orr.w	r2, r0, r1
 800a2fe:	ec43 2b10 	vmov	d0, r2, r3
 800a302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a304:	42b7      	cmp	r7, r6
 800a306:	bf3a      	itte	cc
 800a308:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a30c:	f1a5 0608 	subcc.w	r6, r5, #8
 800a310:	2100      	movcs	r1, #0
 800a312:	380b      	subs	r0, #11
 800a314:	d017      	beq.n	800a346 <__b2d+0x92>
 800a316:	f1c0 0c20 	rsb	ip, r0, #32
 800a31a:	fa04 f500 	lsl.w	r5, r4, r0
 800a31e:	42be      	cmp	r6, r7
 800a320:	fa21 f40c 	lsr.w	r4, r1, ip
 800a324:	ea45 0504 	orr.w	r5, r5, r4
 800a328:	bf8c      	ite	hi
 800a32a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a32e:	2400      	movls	r4, #0
 800a330:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a334:	fa01 f000 	lsl.w	r0, r1, r0
 800a338:	fa24 f40c 	lsr.w	r4, r4, ip
 800a33c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a340:	ea40 0204 	orr.w	r2, r0, r4
 800a344:	e7db      	b.n	800a2fe <__b2d+0x4a>
 800a346:	ea44 030c 	orr.w	r3, r4, ip
 800a34a:	460a      	mov	r2, r1
 800a34c:	e7d7      	b.n	800a2fe <__b2d+0x4a>
 800a34e:	bf00      	nop
 800a350:	3ff00000 	.word	0x3ff00000

0800a354 <__d2b>:
 800a354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a358:	4689      	mov	r9, r1
 800a35a:	2101      	movs	r1, #1
 800a35c:	ec57 6b10 	vmov	r6, r7, d0
 800a360:	4690      	mov	r8, r2
 800a362:	f7ff fc0f 	bl	8009b84 <_Balloc>
 800a366:	4604      	mov	r4, r0
 800a368:	b930      	cbnz	r0, 800a378 <__d2b+0x24>
 800a36a:	4602      	mov	r2, r0
 800a36c:	4b25      	ldr	r3, [pc, #148]	; (800a404 <__d2b+0xb0>)
 800a36e:	4826      	ldr	r0, [pc, #152]	; (800a408 <__d2b+0xb4>)
 800a370:	f240 310a 	movw	r1, #778	; 0x30a
 800a374:	f000 fab8 	bl	800a8e8 <__assert_func>
 800a378:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a37c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a380:	bb35      	cbnz	r5, 800a3d0 <__d2b+0x7c>
 800a382:	2e00      	cmp	r6, #0
 800a384:	9301      	str	r3, [sp, #4]
 800a386:	d028      	beq.n	800a3da <__d2b+0x86>
 800a388:	4668      	mov	r0, sp
 800a38a:	9600      	str	r6, [sp, #0]
 800a38c:	f7ff fd10 	bl	8009db0 <__lo0bits>
 800a390:	9900      	ldr	r1, [sp, #0]
 800a392:	b300      	cbz	r0, 800a3d6 <__d2b+0x82>
 800a394:	9a01      	ldr	r2, [sp, #4]
 800a396:	f1c0 0320 	rsb	r3, r0, #32
 800a39a:	fa02 f303 	lsl.w	r3, r2, r3
 800a39e:	430b      	orrs	r3, r1
 800a3a0:	40c2      	lsrs	r2, r0
 800a3a2:	6163      	str	r3, [r4, #20]
 800a3a4:	9201      	str	r2, [sp, #4]
 800a3a6:	9b01      	ldr	r3, [sp, #4]
 800a3a8:	61a3      	str	r3, [r4, #24]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	bf14      	ite	ne
 800a3ae:	2202      	movne	r2, #2
 800a3b0:	2201      	moveq	r2, #1
 800a3b2:	6122      	str	r2, [r4, #16]
 800a3b4:	b1d5      	cbz	r5, 800a3ec <__d2b+0x98>
 800a3b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a3ba:	4405      	add	r5, r0
 800a3bc:	f8c9 5000 	str.w	r5, [r9]
 800a3c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a3c4:	f8c8 0000 	str.w	r0, [r8]
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	b003      	add	sp, #12
 800a3cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3d4:	e7d5      	b.n	800a382 <__d2b+0x2e>
 800a3d6:	6161      	str	r1, [r4, #20]
 800a3d8:	e7e5      	b.n	800a3a6 <__d2b+0x52>
 800a3da:	a801      	add	r0, sp, #4
 800a3dc:	f7ff fce8 	bl	8009db0 <__lo0bits>
 800a3e0:	9b01      	ldr	r3, [sp, #4]
 800a3e2:	6163      	str	r3, [r4, #20]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	6122      	str	r2, [r4, #16]
 800a3e8:	3020      	adds	r0, #32
 800a3ea:	e7e3      	b.n	800a3b4 <__d2b+0x60>
 800a3ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3f4:	f8c9 0000 	str.w	r0, [r9]
 800a3f8:	6918      	ldr	r0, [r3, #16]
 800a3fa:	f7ff fcb9 	bl	8009d70 <__hi0bits>
 800a3fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a402:	e7df      	b.n	800a3c4 <__d2b+0x70>
 800a404:	0800b38c 	.word	0x0800b38c
 800a408:	0800b41c 	.word	0x0800b41c

0800a40c <__ratio>:
 800a40c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a410:	4688      	mov	r8, r1
 800a412:	4669      	mov	r1, sp
 800a414:	4681      	mov	r9, r0
 800a416:	f7ff ff4d 	bl	800a2b4 <__b2d>
 800a41a:	a901      	add	r1, sp, #4
 800a41c:	4640      	mov	r0, r8
 800a41e:	ec55 4b10 	vmov	r4, r5, d0
 800a422:	f7ff ff47 	bl	800a2b4 <__b2d>
 800a426:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a42a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a42e:	eba3 0c02 	sub.w	ip, r3, r2
 800a432:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a436:	1a9b      	subs	r3, r3, r2
 800a438:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a43c:	ec51 0b10 	vmov	r0, r1, d0
 800a440:	2b00      	cmp	r3, #0
 800a442:	bfd6      	itet	le
 800a444:	460a      	movle	r2, r1
 800a446:	462a      	movgt	r2, r5
 800a448:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a44c:	468b      	mov	fp, r1
 800a44e:	462f      	mov	r7, r5
 800a450:	bfd4      	ite	le
 800a452:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a456:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a45a:	4620      	mov	r0, r4
 800a45c:	ee10 2a10 	vmov	r2, s0
 800a460:	465b      	mov	r3, fp
 800a462:	4639      	mov	r1, r7
 800a464:	f7f6 fa12 	bl	800088c <__aeabi_ddiv>
 800a468:	ec41 0b10 	vmov	d0, r0, r1
 800a46c:	b003      	add	sp, #12
 800a46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a472 <__copybits>:
 800a472:	3901      	subs	r1, #1
 800a474:	b570      	push	{r4, r5, r6, lr}
 800a476:	1149      	asrs	r1, r1, #5
 800a478:	6914      	ldr	r4, [r2, #16]
 800a47a:	3101      	adds	r1, #1
 800a47c:	f102 0314 	add.w	r3, r2, #20
 800a480:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a484:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a488:	1f05      	subs	r5, r0, #4
 800a48a:	42a3      	cmp	r3, r4
 800a48c:	d30c      	bcc.n	800a4a8 <__copybits+0x36>
 800a48e:	1aa3      	subs	r3, r4, r2
 800a490:	3b11      	subs	r3, #17
 800a492:	f023 0303 	bic.w	r3, r3, #3
 800a496:	3211      	adds	r2, #17
 800a498:	42a2      	cmp	r2, r4
 800a49a:	bf88      	it	hi
 800a49c:	2300      	movhi	r3, #0
 800a49e:	4418      	add	r0, r3
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	4288      	cmp	r0, r1
 800a4a4:	d305      	bcc.n	800a4b2 <__copybits+0x40>
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
 800a4a8:	f853 6b04 	ldr.w	r6, [r3], #4
 800a4ac:	f845 6f04 	str.w	r6, [r5, #4]!
 800a4b0:	e7eb      	b.n	800a48a <__copybits+0x18>
 800a4b2:	f840 3b04 	str.w	r3, [r0], #4
 800a4b6:	e7f4      	b.n	800a4a2 <__copybits+0x30>

0800a4b8 <__any_on>:
 800a4b8:	f100 0214 	add.w	r2, r0, #20
 800a4bc:	6900      	ldr	r0, [r0, #16]
 800a4be:	114b      	asrs	r3, r1, #5
 800a4c0:	4298      	cmp	r0, r3
 800a4c2:	b510      	push	{r4, lr}
 800a4c4:	db11      	blt.n	800a4ea <__any_on+0x32>
 800a4c6:	dd0a      	ble.n	800a4de <__any_on+0x26>
 800a4c8:	f011 011f 	ands.w	r1, r1, #31
 800a4cc:	d007      	beq.n	800a4de <__any_on+0x26>
 800a4ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a4d2:	fa24 f001 	lsr.w	r0, r4, r1
 800a4d6:	fa00 f101 	lsl.w	r1, r0, r1
 800a4da:	428c      	cmp	r4, r1
 800a4dc:	d10b      	bne.n	800a4f6 <__any_on+0x3e>
 800a4de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d803      	bhi.n	800a4ee <__any_on+0x36>
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	bd10      	pop	{r4, pc}
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	e7f7      	b.n	800a4de <__any_on+0x26>
 800a4ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a4f2:	2900      	cmp	r1, #0
 800a4f4:	d0f5      	beq.n	800a4e2 <__any_on+0x2a>
 800a4f6:	2001      	movs	r0, #1
 800a4f8:	e7f6      	b.n	800a4e8 <__any_on+0x30>

0800a4fa <_calloc_r>:
 800a4fa:	b513      	push	{r0, r1, r4, lr}
 800a4fc:	434a      	muls	r2, r1
 800a4fe:	4611      	mov	r1, r2
 800a500:	9201      	str	r2, [sp, #4]
 800a502:	f7fc f9cd 	bl	80068a0 <_malloc_r>
 800a506:	4604      	mov	r4, r0
 800a508:	b118      	cbz	r0, 800a512 <_calloc_r+0x18>
 800a50a:	9a01      	ldr	r2, [sp, #4]
 800a50c:	2100      	movs	r1, #0
 800a50e:	f7fc f9be 	bl	800688e <memset>
 800a512:	4620      	mov	r0, r4
 800a514:	b002      	add	sp, #8
 800a516:	bd10      	pop	{r4, pc}

0800a518 <_free_r>:
 800a518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a51a:	2900      	cmp	r1, #0
 800a51c:	d048      	beq.n	800a5b0 <_free_r+0x98>
 800a51e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a522:	9001      	str	r0, [sp, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	f1a1 0404 	sub.w	r4, r1, #4
 800a52a:	bfb8      	it	lt
 800a52c:	18e4      	addlt	r4, r4, r3
 800a52e:	f7ff fb1d 	bl	8009b6c <__malloc_lock>
 800a532:	4a20      	ldr	r2, [pc, #128]	; (800a5b4 <_free_r+0x9c>)
 800a534:	9801      	ldr	r0, [sp, #4]
 800a536:	6813      	ldr	r3, [r2, #0]
 800a538:	4615      	mov	r5, r2
 800a53a:	b933      	cbnz	r3, 800a54a <_free_r+0x32>
 800a53c:	6063      	str	r3, [r4, #4]
 800a53e:	6014      	str	r4, [r2, #0]
 800a540:	b003      	add	sp, #12
 800a542:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a546:	f7ff bb17 	b.w	8009b78 <__malloc_unlock>
 800a54a:	42a3      	cmp	r3, r4
 800a54c:	d90b      	bls.n	800a566 <_free_r+0x4e>
 800a54e:	6821      	ldr	r1, [r4, #0]
 800a550:	1862      	adds	r2, r4, r1
 800a552:	4293      	cmp	r3, r2
 800a554:	bf04      	itt	eq
 800a556:	681a      	ldreq	r2, [r3, #0]
 800a558:	685b      	ldreq	r3, [r3, #4]
 800a55a:	6063      	str	r3, [r4, #4]
 800a55c:	bf04      	itt	eq
 800a55e:	1852      	addeq	r2, r2, r1
 800a560:	6022      	streq	r2, [r4, #0]
 800a562:	602c      	str	r4, [r5, #0]
 800a564:	e7ec      	b.n	800a540 <_free_r+0x28>
 800a566:	461a      	mov	r2, r3
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	b10b      	cbz	r3, 800a570 <_free_r+0x58>
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	d9fa      	bls.n	800a566 <_free_r+0x4e>
 800a570:	6811      	ldr	r1, [r2, #0]
 800a572:	1855      	adds	r5, r2, r1
 800a574:	42a5      	cmp	r5, r4
 800a576:	d10b      	bne.n	800a590 <_free_r+0x78>
 800a578:	6824      	ldr	r4, [r4, #0]
 800a57a:	4421      	add	r1, r4
 800a57c:	1854      	adds	r4, r2, r1
 800a57e:	42a3      	cmp	r3, r4
 800a580:	6011      	str	r1, [r2, #0]
 800a582:	d1dd      	bne.n	800a540 <_free_r+0x28>
 800a584:	681c      	ldr	r4, [r3, #0]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	6053      	str	r3, [r2, #4]
 800a58a:	4421      	add	r1, r4
 800a58c:	6011      	str	r1, [r2, #0]
 800a58e:	e7d7      	b.n	800a540 <_free_r+0x28>
 800a590:	d902      	bls.n	800a598 <_free_r+0x80>
 800a592:	230c      	movs	r3, #12
 800a594:	6003      	str	r3, [r0, #0]
 800a596:	e7d3      	b.n	800a540 <_free_r+0x28>
 800a598:	6825      	ldr	r5, [r4, #0]
 800a59a:	1961      	adds	r1, r4, r5
 800a59c:	428b      	cmp	r3, r1
 800a59e:	bf04      	itt	eq
 800a5a0:	6819      	ldreq	r1, [r3, #0]
 800a5a2:	685b      	ldreq	r3, [r3, #4]
 800a5a4:	6063      	str	r3, [r4, #4]
 800a5a6:	bf04      	itt	eq
 800a5a8:	1949      	addeq	r1, r1, r5
 800a5aa:	6021      	streq	r1, [r4, #0]
 800a5ac:	6054      	str	r4, [r2, #4]
 800a5ae:	e7c7      	b.n	800a540 <_free_r+0x28>
 800a5b0:	b003      	add	sp, #12
 800a5b2:	bd30      	pop	{r4, r5, pc}
 800a5b4:	20004c14 	.word	0x20004c14

0800a5b8 <__ssputs_r>:
 800a5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5bc:	688e      	ldr	r6, [r1, #8]
 800a5be:	429e      	cmp	r6, r3
 800a5c0:	4682      	mov	sl, r0
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	4690      	mov	r8, r2
 800a5c6:	461f      	mov	r7, r3
 800a5c8:	d838      	bhi.n	800a63c <__ssputs_r+0x84>
 800a5ca:	898a      	ldrh	r2, [r1, #12]
 800a5cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5d0:	d032      	beq.n	800a638 <__ssputs_r+0x80>
 800a5d2:	6825      	ldr	r5, [r4, #0]
 800a5d4:	6909      	ldr	r1, [r1, #16]
 800a5d6:	eba5 0901 	sub.w	r9, r5, r1
 800a5da:	6965      	ldr	r5, [r4, #20]
 800a5dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	444b      	add	r3, r9
 800a5e8:	106d      	asrs	r5, r5, #1
 800a5ea:	429d      	cmp	r5, r3
 800a5ec:	bf38      	it	cc
 800a5ee:	461d      	movcc	r5, r3
 800a5f0:	0553      	lsls	r3, r2, #21
 800a5f2:	d531      	bpl.n	800a658 <__ssputs_r+0xa0>
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	f7fc f953 	bl	80068a0 <_malloc_r>
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	b950      	cbnz	r0, 800a614 <__ssputs_r+0x5c>
 800a5fe:	230c      	movs	r3, #12
 800a600:	f8ca 3000 	str.w	r3, [sl]
 800a604:	89a3      	ldrh	r3, [r4, #12]
 800a606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a60a:	81a3      	strh	r3, [r4, #12]
 800a60c:	f04f 30ff 	mov.w	r0, #4294967295
 800a610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a614:	6921      	ldr	r1, [r4, #16]
 800a616:	464a      	mov	r2, r9
 800a618:	f7fc f92b 	bl	8006872 <memcpy>
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a626:	81a3      	strh	r3, [r4, #12]
 800a628:	6126      	str	r6, [r4, #16]
 800a62a:	6165      	str	r5, [r4, #20]
 800a62c:	444e      	add	r6, r9
 800a62e:	eba5 0509 	sub.w	r5, r5, r9
 800a632:	6026      	str	r6, [r4, #0]
 800a634:	60a5      	str	r5, [r4, #8]
 800a636:	463e      	mov	r6, r7
 800a638:	42be      	cmp	r6, r7
 800a63a:	d900      	bls.n	800a63e <__ssputs_r+0x86>
 800a63c:	463e      	mov	r6, r7
 800a63e:	4632      	mov	r2, r6
 800a640:	6820      	ldr	r0, [r4, #0]
 800a642:	4641      	mov	r1, r8
 800a644:	f000 f980 	bl	800a948 <memmove>
 800a648:	68a3      	ldr	r3, [r4, #8]
 800a64a:	6822      	ldr	r2, [r4, #0]
 800a64c:	1b9b      	subs	r3, r3, r6
 800a64e:	4432      	add	r2, r6
 800a650:	60a3      	str	r3, [r4, #8]
 800a652:	6022      	str	r2, [r4, #0]
 800a654:	2000      	movs	r0, #0
 800a656:	e7db      	b.n	800a610 <__ssputs_r+0x58>
 800a658:	462a      	mov	r2, r5
 800a65a:	f000 f98f 	bl	800a97c <_realloc_r>
 800a65e:	4606      	mov	r6, r0
 800a660:	2800      	cmp	r0, #0
 800a662:	d1e1      	bne.n	800a628 <__ssputs_r+0x70>
 800a664:	6921      	ldr	r1, [r4, #16]
 800a666:	4650      	mov	r0, sl
 800a668:	f7ff ff56 	bl	800a518 <_free_r>
 800a66c:	e7c7      	b.n	800a5fe <__ssputs_r+0x46>
	...

0800a670 <_svfiprintf_r>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	4698      	mov	r8, r3
 800a676:	898b      	ldrh	r3, [r1, #12]
 800a678:	061b      	lsls	r3, r3, #24
 800a67a:	b09d      	sub	sp, #116	; 0x74
 800a67c:	4607      	mov	r7, r0
 800a67e:	460d      	mov	r5, r1
 800a680:	4614      	mov	r4, r2
 800a682:	d50e      	bpl.n	800a6a2 <_svfiprintf_r+0x32>
 800a684:	690b      	ldr	r3, [r1, #16]
 800a686:	b963      	cbnz	r3, 800a6a2 <_svfiprintf_r+0x32>
 800a688:	2140      	movs	r1, #64	; 0x40
 800a68a:	f7fc f909 	bl	80068a0 <_malloc_r>
 800a68e:	6028      	str	r0, [r5, #0]
 800a690:	6128      	str	r0, [r5, #16]
 800a692:	b920      	cbnz	r0, 800a69e <_svfiprintf_r+0x2e>
 800a694:	230c      	movs	r3, #12
 800a696:	603b      	str	r3, [r7, #0]
 800a698:	f04f 30ff 	mov.w	r0, #4294967295
 800a69c:	e0d1      	b.n	800a842 <_svfiprintf_r+0x1d2>
 800a69e:	2340      	movs	r3, #64	; 0x40
 800a6a0:	616b      	str	r3, [r5, #20]
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6a6:	2320      	movs	r3, #32
 800a6a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6b0:	2330      	movs	r3, #48	; 0x30
 800a6b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a85c <_svfiprintf_r+0x1ec>
 800a6b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6ba:	f04f 0901 	mov.w	r9, #1
 800a6be:	4623      	mov	r3, r4
 800a6c0:	469a      	mov	sl, r3
 800a6c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6c6:	b10a      	cbz	r2, 800a6cc <_svfiprintf_r+0x5c>
 800a6c8:	2a25      	cmp	r2, #37	; 0x25
 800a6ca:	d1f9      	bne.n	800a6c0 <_svfiprintf_r+0x50>
 800a6cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a6d0:	d00b      	beq.n	800a6ea <_svfiprintf_r+0x7a>
 800a6d2:	465b      	mov	r3, fp
 800a6d4:	4622      	mov	r2, r4
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	4638      	mov	r0, r7
 800a6da:	f7ff ff6d 	bl	800a5b8 <__ssputs_r>
 800a6de:	3001      	adds	r0, #1
 800a6e0:	f000 80aa 	beq.w	800a838 <_svfiprintf_r+0x1c8>
 800a6e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6e6:	445a      	add	r2, fp
 800a6e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f000 80a2 	beq.w	800a838 <_svfiprintf_r+0x1c8>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6fe:	f10a 0a01 	add.w	sl, sl, #1
 800a702:	9304      	str	r3, [sp, #16]
 800a704:	9307      	str	r3, [sp, #28]
 800a706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a70a:	931a      	str	r3, [sp, #104]	; 0x68
 800a70c:	4654      	mov	r4, sl
 800a70e:	2205      	movs	r2, #5
 800a710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a714:	4851      	ldr	r0, [pc, #324]	; (800a85c <_svfiprintf_r+0x1ec>)
 800a716:	f7f5 fd83 	bl	8000220 <memchr>
 800a71a:	9a04      	ldr	r2, [sp, #16]
 800a71c:	b9d8      	cbnz	r0, 800a756 <_svfiprintf_r+0xe6>
 800a71e:	06d0      	lsls	r0, r2, #27
 800a720:	bf44      	itt	mi
 800a722:	2320      	movmi	r3, #32
 800a724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a728:	0711      	lsls	r1, r2, #28
 800a72a:	bf44      	itt	mi
 800a72c:	232b      	movmi	r3, #43	; 0x2b
 800a72e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a732:	f89a 3000 	ldrb.w	r3, [sl]
 800a736:	2b2a      	cmp	r3, #42	; 0x2a
 800a738:	d015      	beq.n	800a766 <_svfiprintf_r+0xf6>
 800a73a:	9a07      	ldr	r2, [sp, #28]
 800a73c:	4654      	mov	r4, sl
 800a73e:	2000      	movs	r0, #0
 800a740:	f04f 0c0a 	mov.w	ip, #10
 800a744:	4621      	mov	r1, r4
 800a746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a74a:	3b30      	subs	r3, #48	; 0x30
 800a74c:	2b09      	cmp	r3, #9
 800a74e:	d94e      	bls.n	800a7ee <_svfiprintf_r+0x17e>
 800a750:	b1b0      	cbz	r0, 800a780 <_svfiprintf_r+0x110>
 800a752:	9207      	str	r2, [sp, #28]
 800a754:	e014      	b.n	800a780 <_svfiprintf_r+0x110>
 800a756:	eba0 0308 	sub.w	r3, r0, r8
 800a75a:	fa09 f303 	lsl.w	r3, r9, r3
 800a75e:	4313      	orrs	r3, r2
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	46a2      	mov	sl, r4
 800a764:	e7d2      	b.n	800a70c <_svfiprintf_r+0x9c>
 800a766:	9b03      	ldr	r3, [sp, #12]
 800a768:	1d19      	adds	r1, r3, #4
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	9103      	str	r1, [sp, #12]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	bfbb      	ittet	lt
 800a772:	425b      	neglt	r3, r3
 800a774:	f042 0202 	orrlt.w	r2, r2, #2
 800a778:	9307      	strge	r3, [sp, #28]
 800a77a:	9307      	strlt	r3, [sp, #28]
 800a77c:	bfb8      	it	lt
 800a77e:	9204      	strlt	r2, [sp, #16]
 800a780:	7823      	ldrb	r3, [r4, #0]
 800a782:	2b2e      	cmp	r3, #46	; 0x2e
 800a784:	d10c      	bne.n	800a7a0 <_svfiprintf_r+0x130>
 800a786:	7863      	ldrb	r3, [r4, #1]
 800a788:	2b2a      	cmp	r3, #42	; 0x2a
 800a78a:	d135      	bne.n	800a7f8 <_svfiprintf_r+0x188>
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	1d1a      	adds	r2, r3, #4
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	9203      	str	r2, [sp, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	bfb8      	it	lt
 800a798:	f04f 33ff 	movlt.w	r3, #4294967295
 800a79c:	3402      	adds	r4, #2
 800a79e:	9305      	str	r3, [sp, #20]
 800a7a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a86c <_svfiprintf_r+0x1fc>
 800a7a4:	7821      	ldrb	r1, [r4, #0]
 800a7a6:	2203      	movs	r2, #3
 800a7a8:	4650      	mov	r0, sl
 800a7aa:	f7f5 fd39 	bl	8000220 <memchr>
 800a7ae:	b140      	cbz	r0, 800a7c2 <_svfiprintf_r+0x152>
 800a7b0:	2340      	movs	r3, #64	; 0x40
 800a7b2:	eba0 000a 	sub.w	r0, r0, sl
 800a7b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a7ba:	9b04      	ldr	r3, [sp, #16]
 800a7bc:	4303      	orrs	r3, r0
 800a7be:	3401      	adds	r4, #1
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c6:	4826      	ldr	r0, [pc, #152]	; (800a860 <_svfiprintf_r+0x1f0>)
 800a7c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7cc:	2206      	movs	r2, #6
 800a7ce:	f7f5 fd27 	bl	8000220 <memchr>
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d038      	beq.n	800a848 <_svfiprintf_r+0x1d8>
 800a7d6:	4b23      	ldr	r3, [pc, #140]	; (800a864 <_svfiprintf_r+0x1f4>)
 800a7d8:	bb1b      	cbnz	r3, 800a822 <_svfiprintf_r+0x1b2>
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	3307      	adds	r3, #7
 800a7de:	f023 0307 	bic.w	r3, r3, #7
 800a7e2:	3308      	adds	r3, #8
 800a7e4:	9303      	str	r3, [sp, #12]
 800a7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e8:	4433      	add	r3, r6
 800a7ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ec:	e767      	b.n	800a6be <_svfiprintf_r+0x4e>
 800a7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	2001      	movs	r0, #1
 800a7f6:	e7a5      	b.n	800a744 <_svfiprintf_r+0xd4>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	3401      	adds	r4, #1
 800a7fc:	9305      	str	r3, [sp, #20]
 800a7fe:	4619      	mov	r1, r3
 800a800:	f04f 0c0a 	mov.w	ip, #10
 800a804:	4620      	mov	r0, r4
 800a806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a80a:	3a30      	subs	r2, #48	; 0x30
 800a80c:	2a09      	cmp	r2, #9
 800a80e:	d903      	bls.n	800a818 <_svfiprintf_r+0x1a8>
 800a810:	2b00      	cmp	r3, #0
 800a812:	d0c5      	beq.n	800a7a0 <_svfiprintf_r+0x130>
 800a814:	9105      	str	r1, [sp, #20]
 800a816:	e7c3      	b.n	800a7a0 <_svfiprintf_r+0x130>
 800a818:	fb0c 2101 	mla	r1, ip, r1, r2
 800a81c:	4604      	mov	r4, r0
 800a81e:	2301      	movs	r3, #1
 800a820:	e7f0      	b.n	800a804 <_svfiprintf_r+0x194>
 800a822:	ab03      	add	r3, sp, #12
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	462a      	mov	r2, r5
 800a828:	4b0f      	ldr	r3, [pc, #60]	; (800a868 <_svfiprintf_r+0x1f8>)
 800a82a:	a904      	add	r1, sp, #16
 800a82c:	4638      	mov	r0, r7
 800a82e:	f7fc f931 	bl	8006a94 <_printf_float>
 800a832:	1c42      	adds	r2, r0, #1
 800a834:	4606      	mov	r6, r0
 800a836:	d1d6      	bne.n	800a7e6 <_svfiprintf_r+0x176>
 800a838:	89ab      	ldrh	r3, [r5, #12]
 800a83a:	065b      	lsls	r3, r3, #25
 800a83c:	f53f af2c 	bmi.w	800a698 <_svfiprintf_r+0x28>
 800a840:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a842:	b01d      	add	sp, #116	; 0x74
 800a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a848:	ab03      	add	r3, sp, #12
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	462a      	mov	r2, r5
 800a84e:	4b06      	ldr	r3, [pc, #24]	; (800a868 <_svfiprintf_r+0x1f8>)
 800a850:	a904      	add	r1, sp, #16
 800a852:	4638      	mov	r0, r7
 800a854:	f7fc fbc2 	bl	8006fdc <_printf_i>
 800a858:	e7eb      	b.n	800a832 <_svfiprintf_r+0x1c2>
 800a85a:	bf00      	nop
 800a85c:	0800b57c 	.word	0x0800b57c
 800a860:	0800b586 	.word	0x0800b586
 800a864:	08006a95 	.word	0x08006a95
 800a868:	0800a5b9 	.word	0x0800a5b9
 800a86c:	0800b582 	.word	0x0800b582

0800a870 <_read_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4d07      	ldr	r5, [pc, #28]	; (800a890 <_read_r+0x20>)
 800a874:	4604      	mov	r4, r0
 800a876:	4608      	mov	r0, r1
 800a878:	4611      	mov	r1, r2
 800a87a:	2200      	movs	r2, #0
 800a87c:	602a      	str	r2, [r5, #0]
 800a87e:	461a      	mov	r2, r3
 800a880:	f7f7 f810 	bl	80018a4 <_read>
 800a884:	1c43      	adds	r3, r0, #1
 800a886:	d102      	bne.n	800a88e <_read_r+0x1e>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	b103      	cbz	r3, 800a88e <_read_r+0x1e>
 800a88c:	6023      	str	r3, [r4, #0]
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	20004fd4 	.word	0x20004fd4
 800a894:	00000000 	.word	0x00000000

0800a898 <nan>:
 800a898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a8a0 <nan+0x8>
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	00000000 	.word	0x00000000
 800a8a4:	7ff80000 	.word	0x7ff80000

0800a8a8 <strncmp>:
 800a8a8:	b510      	push	{r4, lr}
 800a8aa:	b16a      	cbz	r2, 800a8c8 <strncmp+0x20>
 800a8ac:	3901      	subs	r1, #1
 800a8ae:	1884      	adds	r4, r0, r2
 800a8b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a8b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d103      	bne.n	800a8c4 <strncmp+0x1c>
 800a8bc:	42a0      	cmp	r0, r4
 800a8be:	d001      	beq.n	800a8c4 <strncmp+0x1c>
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1f5      	bne.n	800a8b0 <strncmp+0x8>
 800a8c4:	1a98      	subs	r0, r3, r2
 800a8c6:	bd10      	pop	{r4, pc}
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	e7fc      	b.n	800a8c6 <strncmp+0x1e>

0800a8cc <__ascii_wctomb>:
 800a8cc:	b149      	cbz	r1, 800a8e2 <__ascii_wctomb+0x16>
 800a8ce:	2aff      	cmp	r2, #255	; 0xff
 800a8d0:	bf85      	ittet	hi
 800a8d2:	238a      	movhi	r3, #138	; 0x8a
 800a8d4:	6003      	strhi	r3, [r0, #0]
 800a8d6:	700a      	strbls	r2, [r1, #0]
 800a8d8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a8dc:	bf98      	it	ls
 800a8de:	2001      	movls	r0, #1
 800a8e0:	4770      	bx	lr
 800a8e2:	4608      	mov	r0, r1
 800a8e4:	4770      	bx	lr
	...

0800a8e8 <__assert_func>:
 800a8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8ea:	4614      	mov	r4, r2
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	4b09      	ldr	r3, [pc, #36]	; (800a914 <__assert_func+0x2c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	68d8      	ldr	r0, [r3, #12]
 800a8f6:	b14c      	cbz	r4, 800a90c <__assert_func+0x24>
 800a8f8:	4b07      	ldr	r3, [pc, #28]	; (800a918 <__assert_func+0x30>)
 800a8fa:	9100      	str	r1, [sp, #0]
 800a8fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a900:	4906      	ldr	r1, [pc, #24]	; (800a91c <__assert_func+0x34>)
 800a902:	462b      	mov	r3, r5
 800a904:	f000 f80e 	bl	800a924 <fiprintf>
 800a908:	f000 fa78 	bl	800adfc <abort>
 800a90c:	4b04      	ldr	r3, [pc, #16]	; (800a920 <__assert_func+0x38>)
 800a90e:	461c      	mov	r4, r3
 800a910:	e7f3      	b.n	800a8fa <__assert_func+0x12>
 800a912:	bf00      	nop
 800a914:	20000010 	.word	0x20000010
 800a918:	0800b58d 	.word	0x0800b58d
 800a91c:	0800b59a 	.word	0x0800b59a
 800a920:	0800b5c8 	.word	0x0800b5c8

0800a924 <fiprintf>:
 800a924:	b40e      	push	{r1, r2, r3}
 800a926:	b503      	push	{r0, r1, lr}
 800a928:	4601      	mov	r1, r0
 800a92a:	ab03      	add	r3, sp, #12
 800a92c:	4805      	ldr	r0, [pc, #20]	; (800a944 <fiprintf+0x20>)
 800a92e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a932:	6800      	ldr	r0, [r0, #0]
 800a934:	9301      	str	r3, [sp, #4]
 800a936:	f000 f871 	bl	800aa1c <_vfiprintf_r>
 800a93a:	b002      	add	sp, #8
 800a93c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a940:	b003      	add	sp, #12
 800a942:	4770      	bx	lr
 800a944:	20000010 	.word	0x20000010

0800a948 <memmove>:
 800a948:	4288      	cmp	r0, r1
 800a94a:	b510      	push	{r4, lr}
 800a94c:	eb01 0402 	add.w	r4, r1, r2
 800a950:	d902      	bls.n	800a958 <memmove+0x10>
 800a952:	4284      	cmp	r4, r0
 800a954:	4623      	mov	r3, r4
 800a956:	d807      	bhi.n	800a968 <memmove+0x20>
 800a958:	1e43      	subs	r3, r0, #1
 800a95a:	42a1      	cmp	r1, r4
 800a95c:	d008      	beq.n	800a970 <memmove+0x28>
 800a95e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a962:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a966:	e7f8      	b.n	800a95a <memmove+0x12>
 800a968:	4402      	add	r2, r0
 800a96a:	4601      	mov	r1, r0
 800a96c:	428a      	cmp	r2, r1
 800a96e:	d100      	bne.n	800a972 <memmove+0x2a>
 800a970:	bd10      	pop	{r4, pc}
 800a972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a976:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a97a:	e7f7      	b.n	800a96c <memmove+0x24>

0800a97c <_realloc_r>:
 800a97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97e:	4607      	mov	r7, r0
 800a980:	4614      	mov	r4, r2
 800a982:	460e      	mov	r6, r1
 800a984:	b921      	cbnz	r1, 800a990 <_realloc_r+0x14>
 800a986:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a98a:	4611      	mov	r1, r2
 800a98c:	f7fb bf88 	b.w	80068a0 <_malloc_r>
 800a990:	b922      	cbnz	r2, 800a99c <_realloc_r+0x20>
 800a992:	f7ff fdc1 	bl	800a518 <_free_r>
 800a996:	4625      	mov	r5, r4
 800a998:	4628      	mov	r0, r5
 800a99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a99c:	f000 fa9a 	bl	800aed4 <_malloc_usable_size_r>
 800a9a0:	42a0      	cmp	r0, r4
 800a9a2:	d20f      	bcs.n	800a9c4 <_realloc_r+0x48>
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	f7fb ff7a 	bl	80068a0 <_malloc_r>
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d0f2      	beq.n	800a998 <_realloc_r+0x1c>
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	4622      	mov	r2, r4
 800a9b6:	f7fb ff5c 	bl	8006872 <memcpy>
 800a9ba:	4631      	mov	r1, r6
 800a9bc:	4638      	mov	r0, r7
 800a9be:	f7ff fdab 	bl	800a518 <_free_r>
 800a9c2:	e7e9      	b.n	800a998 <_realloc_r+0x1c>
 800a9c4:	4635      	mov	r5, r6
 800a9c6:	e7e7      	b.n	800a998 <_realloc_r+0x1c>

0800a9c8 <__sfputc_r>:
 800a9c8:	6893      	ldr	r3, [r2, #8]
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	b410      	push	{r4}
 800a9d0:	6093      	str	r3, [r2, #8]
 800a9d2:	da08      	bge.n	800a9e6 <__sfputc_r+0x1e>
 800a9d4:	6994      	ldr	r4, [r2, #24]
 800a9d6:	42a3      	cmp	r3, r4
 800a9d8:	db01      	blt.n	800a9de <__sfputc_r+0x16>
 800a9da:	290a      	cmp	r1, #10
 800a9dc:	d103      	bne.n	800a9e6 <__sfputc_r+0x1e>
 800a9de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9e2:	f000 b94b 	b.w	800ac7c <__swbuf_r>
 800a9e6:	6813      	ldr	r3, [r2, #0]
 800a9e8:	1c58      	adds	r0, r3, #1
 800a9ea:	6010      	str	r0, [r2, #0]
 800a9ec:	7019      	strb	r1, [r3, #0]
 800a9ee:	4608      	mov	r0, r1
 800a9f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <__sfputs_r>:
 800a9f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f8:	4606      	mov	r6, r0
 800a9fa:	460f      	mov	r7, r1
 800a9fc:	4614      	mov	r4, r2
 800a9fe:	18d5      	adds	r5, r2, r3
 800aa00:	42ac      	cmp	r4, r5
 800aa02:	d101      	bne.n	800aa08 <__sfputs_r+0x12>
 800aa04:	2000      	movs	r0, #0
 800aa06:	e007      	b.n	800aa18 <__sfputs_r+0x22>
 800aa08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa0c:	463a      	mov	r2, r7
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f7ff ffda 	bl	800a9c8 <__sfputc_r>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	d1f3      	bne.n	800aa00 <__sfputs_r+0xa>
 800aa18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa1c <_vfiprintf_r>:
 800aa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa20:	460d      	mov	r5, r1
 800aa22:	b09d      	sub	sp, #116	; 0x74
 800aa24:	4614      	mov	r4, r2
 800aa26:	4698      	mov	r8, r3
 800aa28:	4606      	mov	r6, r0
 800aa2a:	b118      	cbz	r0, 800aa34 <_vfiprintf_r+0x18>
 800aa2c:	6983      	ldr	r3, [r0, #24]
 800aa2e:	b90b      	cbnz	r3, 800aa34 <_vfiprintf_r+0x18>
 800aa30:	f7fb fe5a 	bl	80066e8 <__sinit>
 800aa34:	4b89      	ldr	r3, [pc, #548]	; (800ac5c <_vfiprintf_r+0x240>)
 800aa36:	429d      	cmp	r5, r3
 800aa38:	d11b      	bne.n	800aa72 <_vfiprintf_r+0x56>
 800aa3a:	6875      	ldr	r5, [r6, #4]
 800aa3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa3e:	07d9      	lsls	r1, r3, #31
 800aa40:	d405      	bmi.n	800aa4e <_vfiprintf_r+0x32>
 800aa42:	89ab      	ldrh	r3, [r5, #12]
 800aa44:	059a      	lsls	r2, r3, #22
 800aa46:	d402      	bmi.n	800aa4e <_vfiprintf_r+0x32>
 800aa48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa4a:	f7fb ff10 	bl	800686e <__retarget_lock_acquire_recursive>
 800aa4e:	89ab      	ldrh	r3, [r5, #12]
 800aa50:	071b      	lsls	r3, r3, #28
 800aa52:	d501      	bpl.n	800aa58 <_vfiprintf_r+0x3c>
 800aa54:	692b      	ldr	r3, [r5, #16]
 800aa56:	b9eb      	cbnz	r3, 800aa94 <_vfiprintf_r+0x78>
 800aa58:	4629      	mov	r1, r5
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	f000 f960 	bl	800ad20 <__swsetup_r>
 800aa60:	b1c0      	cbz	r0, 800aa94 <_vfiprintf_r+0x78>
 800aa62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa64:	07dc      	lsls	r4, r3, #31
 800aa66:	d50e      	bpl.n	800aa86 <_vfiprintf_r+0x6a>
 800aa68:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6c:	b01d      	add	sp, #116	; 0x74
 800aa6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa72:	4b7b      	ldr	r3, [pc, #492]	; (800ac60 <_vfiprintf_r+0x244>)
 800aa74:	429d      	cmp	r5, r3
 800aa76:	d101      	bne.n	800aa7c <_vfiprintf_r+0x60>
 800aa78:	68b5      	ldr	r5, [r6, #8]
 800aa7a:	e7df      	b.n	800aa3c <_vfiprintf_r+0x20>
 800aa7c:	4b79      	ldr	r3, [pc, #484]	; (800ac64 <_vfiprintf_r+0x248>)
 800aa7e:	429d      	cmp	r5, r3
 800aa80:	bf08      	it	eq
 800aa82:	68f5      	ldreq	r5, [r6, #12]
 800aa84:	e7da      	b.n	800aa3c <_vfiprintf_r+0x20>
 800aa86:	89ab      	ldrh	r3, [r5, #12]
 800aa88:	0598      	lsls	r0, r3, #22
 800aa8a:	d4ed      	bmi.n	800aa68 <_vfiprintf_r+0x4c>
 800aa8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa8e:	f7fb feef 	bl	8006870 <__retarget_lock_release_recursive>
 800aa92:	e7e9      	b.n	800aa68 <_vfiprintf_r+0x4c>
 800aa94:	2300      	movs	r3, #0
 800aa96:	9309      	str	r3, [sp, #36]	; 0x24
 800aa98:	2320      	movs	r3, #32
 800aa9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaa2:	2330      	movs	r3, #48	; 0x30
 800aaa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac68 <_vfiprintf_r+0x24c>
 800aaa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aaac:	f04f 0901 	mov.w	r9, #1
 800aab0:	4623      	mov	r3, r4
 800aab2:	469a      	mov	sl, r3
 800aab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aab8:	b10a      	cbz	r2, 800aabe <_vfiprintf_r+0xa2>
 800aaba:	2a25      	cmp	r2, #37	; 0x25
 800aabc:	d1f9      	bne.n	800aab2 <_vfiprintf_r+0x96>
 800aabe:	ebba 0b04 	subs.w	fp, sl, r4
 800aac2:	d00b      	beq.n	800aadc <_vfiprintf_r+0xc0>
 800aac4:	465b      	mov	r3, fp
 800aac6:	4622      	mov	r2, r4
 800aac8:	4629      	mov	r1, r5
 800aaca:	4630      	mov	r0, r6
 800aacc:	f7ff ff93 	bl	800a9f6 <__sfputs_r>
 800aad0:	3001      	adds	r0, #1
 800aad2:	f000 80aa 	beq.w	800ac2a <_vfiprintf_r+0x20e>
 800aad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aad8:	445a      	add	r2, fp
 800aada:	9209      	str	r2, [sp, #36]	; 0x24
 800aadc:	f89a 3000 	ldrb.w	r3, [sl]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 80a2 	beq.w	800ac2a <_vfiprintf_r+0x20e>
 800aae6:	2300      	movs	r3, #0
 800aae8:	f04f 32ff 	mov.w	r2, #4294967295
 800aaec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaf0:	f10a 0a01 	add.w	sl, sl, #1
 800aaf4:	9304      	str	r3, [sp, #16]
 800aaf6:	9307      	str	r3, [sp, #28]
 800aaf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aafc:	931a      	str	r3, [sp, #104]	; 0x68
 800aafe:	4654      	mov	r4, sl
 800ab00:	2205      	movs	r2, #5
 800ab02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab06:	4858      	ldr	r0, [pc, #352]	; (800ac68 <_vfiprintf_r+0x24c>)
 800ab08:	f7f5 fb8a 	bl	8000220 <memchr>
 800ab0c:	9a04      	ldr	r2, [sp, #16]
 800ab0e:	b9d8      	cbnz	r0, 800ab48 <_vfiprintf_r+0x12c>
 800ab10:	06d1      	lsls	r1, r2, #27
 800ab12:	bf44      	itt	mi
 800ab14:	2320      	movmi	r3, #32
 800ab16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab1a:	0713      	lsls	r3, r2, #28
 800ab1c:	bf44      	itt	mi
 800ab1e:	232b      	movmi	r3, #43	; 0x2b
 800ab20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab24:	f89a 3000 	ldrb.w	r3, [sl]
 800ab28:	2b2a      	cmp	r3, #42	; 0x2a
 800ab2a:	d015      	beq.n	800ab58 <_vfiprintf_r+0x13c>
 800ab2c:	9a07      	ldr	r2, [sp, #28]
 800ab2e:	4654      	mov	r4, sl
 800ab30:	2000      	movs	r0, #0
 800ab32:	f04f 0c0a 	mov.w	ip, #10
 800ab36:	4621      	mov	r1, r4
 800ab38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab3c:	3b30      	subs	r3, #48	; 0x30
 800ab3e:	2b09      	cmp	r3, #9
 800ab40:	d94e      	bls.n	800abe0 <_vfiprintf_r+0x1c4>
 800ab42:	b1b0      	cbz	r0, 800ab72 <_vfiprintf_r+0x156>
 800ab44:	9207      	str	r2, [sp, #28]
 800ab46:	e014      	b.n	800ab72 <_vfiprintf_r+0x156>
 800ab48:	eba0 0308 	sub.w	r3, r0, r8
 800ab4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ab50:	4313      	orrs	r3, r2
 800ab52:	9304      	str	r3, [sp, #16]
 800ab54:	46a2      	mov	sl, r4
 800ab56:	e7d2      	b.n	800aafe <_vfiprintf_r+0xe2>
 800ab58:	9b03      	ldr	r3, [sp, #12]
 800ab5a:	1d19      	adds	r1, r3, #4
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	9103      	str	r1, [sp, #12]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	bfbb      	ittet	lt
 800ab64:	425b      	neglt	r3, r3
 800ab66:	f042 0202 	orrlt.w	r2, r2, #2
 800ab6a:	9307      	strge	r3, [sp, #28]
 800ab6c:	9307      	strlt	r3, [sp, #28]
 800ab6e:	bfb8      	it	lt
 800ab70:	9204      	strlt	r2, [sp, #16]
 800ab72:	7823      	ldrb	r3, [r4, #0]
 800ab74:	2b2e      	cmp	r3, #46	; 0x2e
 800ab76:	d10c      	bne.n	800ab92 <_vfiprintf_r+0x176>
 800ab78:	7863      	ldrb	r3, [r4, #1]
 800ab7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab7c:	d135      	bne.n	800abea <_vfiprintf_r+0x1ce>
 800ab7e:	9b03      	ldr	r3, [sp, #12]
 800ab80:	1d1a      	adds	r2, r3, #4
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	9203      	str	r2, [sp, #12]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	bfb8      	it	lt
 800ab8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab8e:	3402      	adds	r4, #2
 800ab90:	9305      	str	r3, [sp, #20]
 800ab92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac78 <_vfiprintf_r+0x25c>
 800ab96:	7821      	ldrb	r1, [r4, #0]
 800ab98:	2203      	movs	r2, #3
 800ab9a:	4650      	mov	r0, sl
 800ab9c:	f7f5 fb40 	bl	8000220 <memchr>
 800aba0:	b140      	cbz	r0, 800abb4 <_vfiprintf_r+0x198>
 800aba2:	2340      	movs	r3, #64	; 0x40
 800aba4:	eba0 000a 	sub.w	r0, r0, sl
 800aba8:	fa03 f000 	lsl.w	r0, r3, r0
 800abac:	9b04      	ldr	r3, [sp, #16]
 800abae:	4303      	orrs	r3, r0
 800abb0:	3401      	adds	r4, #1
 800abb2:	9304      	str	r3, [sp, #16]
 800abb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb8:	482c      	ldr	r0, [pc, #176]	; (800ac6c <_vfiprintf_r+0x250>)
 800abba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abbe:	2206      	movs	r2, #6
 800abc0:	f7f5 fb2e 	bl	8000220 <memchr>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d03f      	beq.n	800ac48 <_vfiprintf_r+0x22c>
 800abc8:	4b29      	ldr	r3, [pc, #164]	; (800ac70 <_vfiprintf_r+0x254>)
 800abca:	bb1b      	cbnz	r3, 800ac14 <_vfiprintf_r+0x1f8>
 800abcc:	9b03      	ldr	r3, [sp, #12]
 800abce:	3307      	adds	r3, #7
 800abd0:	f023 0307 	bic.w	r3, r3, #7
 800abd4:	3308      	adds	r3, #8
 800abd6:	9303      	str	r3, [sp, #12]
 800abd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abda:	443b      	add	r3, r7
 800abdc:	9309      	str	r3, [sp, #36]	; 0x24
 800abde:	e767      	b.n	800aab0 <_vfiprintf_r+0x94>
 800abe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800abe4:	460c      	mov	r4, r1
 800abe6:	2001      	movs	r0, #1
 800abe8:	e7a5      	b.n	800ab36 <_vfiprintf_r+0x11a>
 800abea:	2300      	movs	r3, #0
 800abec:	3401      	adds	r4, #1
 800abee:	9305      	str	r3, [sp, #20]
 800abf0:	4619      	mov	r1, r3
 800abf2:	f04f 0c0a 	mov.w	ip, #10
 800abf6:	4620      	mov	r0, r4
 800abf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abfc:	3a30      	subs	r2, #48	; 0x30
 800abfe:	2a09      	cmp	r2, #9
 800ac00:	d903      	bls.n	800ac0a <_vfiprintf_r+0x1ee>
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d0c5      	beq.n	800ab92 <_vfiprintf_r+0x176>
 800ac06:	9105      	str	r1, [sp, #20]
 800ac08:	e7c3      	b.n	800ab92 <_vfiprintf_r+0x176>
 800ac0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac0e:	4604      	mov	r4, r0
 800ac10:	2301      	movs	r3, #1
 800ac12:	e7f0      	b.n	800abf6 <_vfiprintf_r+0x1da>
 800ac14:	ab03      	add	r3, sp, #12
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	462a      	mov	r2, r5
 800ac1a:	4b16      	ldr	r3, [pc, #88]	; (800ac74 <_vfiprintf_r+0x258>)
 800ac1c:	a904      	add	r1, sp, #16
 800ac1e:	4630      	mov	r0, r6
 800ac20:	f7fb ff38 	bl	8006a94 <_printf_float>
 800ac24:	4607      	mov	r7, r0
 800ac26:	1c78      	adds	r0, r7, #1
 800ac28:	d1d6      	bne.n	800abd8 <_vfiprintf_r+0x1bc>
 800ac2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac2c:	07d9      	lsls	r1, r3, #31
 800ac2e:	d405      	bmi.n	800ac3c <_vfiprintf_r+0x220>
 800ac30:	89ab      	ldrh	r3, [r5, #12]
 800ac32:	059a      	lsls	r2, r3, #22
 800ac34:	d402      	bmi.n	800ac3c <_vfiprintf_r+0x220>
 800ac36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac38:	f7fb fe1a 	bl	8006870 <__retarget_lock_release_recursive>
 800ac3c:	89ab      	ldrh	r3, [r5, #12]
 800ac3e:	065b      	lsls	r3, r3, #25
 800ac40:	f53f af12 	bmi.w	800aa68 <_vfiprintf_r+0x4c>
 800ac44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac46:	e711      	b.n	800aa6c <_vfiprintf_r+0x50>
 800ac48:	ab03      	add	r3, sp, #12
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	462a      	mov	r2, r5
 800ac4e:	4b09      	ldr	r3, [pc, #36]	; (800ac74 <_vfiprintf_r+0x258>)
 800ac50:	a904      	add	r1, sp, #16
 800ac52:	4630      	mov	r0, r6
 800ac54:	f7fc f9c2 	bl	8006fdc <_printf_i>
 800ac58:	e7e4      	b.n	800ac24 <_vfiprintf_r+0x208>
 800ac5a:	bf00      	nop
 800ac5c:	0800b138 	.word	0x0800b138
 800ac60:	0800b158 	.word	0x0800b158
 800ac64:	0800b118 	.word	0x0800b118
 800ac68:	0800b57c 	.word	0x0800b57c
 800ac6c:	0800b586 	.word	0x0800b586
 800ac70:	08006a95 	.word	0x08006a95
 800ac74:	0800a9f7 	.word	0x0800a9f7
 800ac78:	0800b582 	.word	0x0800b582

0800ac7c <__swbuf_r>:
 800ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7e:	460e      	mov	r6, r1
 800ac80:	4614      	mov	r4, r2
 800ac82:	4605      	mov	r5, r0
 800ac84:	b118      	cbz	r0, 800ac8e <__swbuf_r+0x12>
 800ac86:	6983      	ldr	r3, [r0, #24]
 800ac88:	b90b      	cbnz	r3, 800ac8e <__swbuf_r+0x12>
 800ac8a:	f7fb fd2d 	bl	80066e8 <__sinit>
 800ac8e:	4b21      	ldr	r3, [pc, #132]	; (800ad14 <__swbuf_r+0x98>)
 800ac90:	429c      	cmp	r4, r3
 800ac92:	d12b      	bne.n	800acec <__swbuf_r+0x70>
 800ac94:	686c      	ldr	r4, [r5, #4]
 800ac96:	69a3      	ldr	r3, [r4, #24]
 800ac98:	60a3      	str	r3, [r4, #8]
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	071a      	lsls	r2, r3, #28
 800ac9e:	d52f      	bpl.n	800ad00 <__swbuf_r+0x84>
 800aca0:	6923      	ldr	r3, [r4, #16]
 800aca2:	b36b      	cbz	r3, 800ad00 <__swbuf_r+0x84>
 800aca4:	6923      	ldr	r3, [r4, #16]
 800aca6:	6820      	ldr	r0, [r4, #0]
 800aca8:	1ac0      	subs	r0, r0, r3
 800acaa:	6963      	ldr	r3, [r4, #20]
 800acac:	b2f6      	uxtb	r6, r6
 800acae:	4283      	cmp	r3, r0
 800acb0:	4637      	mov	r7, r6
 800acb2:	dc04      	bgt.n	800acbe <__swbuf_r+0x42>
 800acb4:	4621      	mov	r1, r4
 800acb6:	4628      	mov	r0, r5
 800acb8:	f7fe fb7c 	bl	80093b4 <_fflush_r>
 800acbc:	bb30      	cbnz	r0, 800ad0c <__swbuf_r+0x90>
 800acbe:	68a3      	ldr	r3, [r4, #8]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	60a3      	str	r3, [r4, #8]
 800acc4:	6823      	ldr	r3, [r4, #0]
 800acc6:	1c5a      	adds	r2, r3, #1
 800acc8:	6022      	str	r2, [r4, #0]
 800acca:	701e      	strb	r6, [r3, #0]
 800accc:	6963      	ldr	r3, [r4, #20]
 800acce:	3001      	adds	r0, #1
 800acd0:	4283      	cmp	r3, r0
 800acd2:	d004      	beq.n	800acde <__swbuf_r+0x62>
 800acd4:	89a3      	ldrh	r3, [r4, #12]
 800acd6:	07db      	lsls	r3, r3, #31
 800acd8:	d506      	bpl.n	800ace8 <__swbuf_r+0x6c>
 800acda:	2e0a      	cmp	r6, #10
 800acdc:	d104      	bne.n	800ace8 <__swbuf_r+0x6c>
 800acde:	4621      	mov	r1, r4
 800ace0:	4628      	mov	r0, r5
 800ace2:	f7fe fb67 	bl	80093b4 <_fflush_r>
 800ace6:	b988      	cbnz	r0, 800ad0c <__swbuf_r+0x90>
 800ace8:	4638      	mov	r0, r7
 800acea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acec:	4b0a      	ldr	r3, [pc, #40]	; (800ad18 <__swbuf_r+0x9c>)
 800acee:	429c      	cmp	r4, r3
 800acf0:	d101      	bne.n	800acf6 <__swbuf_r+0x7a>
 800acf2:	68ac      	ldr	r4, [r5, #8]
 800acf4:	e7cf      	b.n	800ac96 <__swbuf_r+0x1a>
 800acf6:	4b09      	ldr	r3, [pc, #36]	; (800ad1c <__swbuf_r+0xa0>)
 800acf8:	429c      	cmp	r4, r3
 800acfa:	bf08      	it	eq
 800acfc:	68ec      	ldreq	r4, [r5, #12]
 800acfe:	e7ca      	b.n	800ac96 <__swbuf_r+0x1a>
 800ad00:	4621      	mov	r1, r4
 800ad02:	4628      	mov	r0, r5
 800ad04:	f000 f80c 	bl	800ad20 <__swsetup_r>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d0cb      	beq.n	800aca4 <__swbuf_r+0x28>
 800ad0c:	f04f 37ff 	mov.w	r7, #4294967295
 800ad10:	e7ea      	b.n	800ace8 <__swbuf_r+0x6c>
 800ad12:	bf00      	nop
 800ad14:	0800b138 	.word	0x0800b138
 800ad18:	0800b158 	.word	0x0800b158
 800ad1c:	0800b118 	.word	0x0800b118

0800ad20 <__swsetup_r>:
 800ad20:	4b32      	ldr	r3, [pc, #200]	; (800adec <__swsetup_r+0xcc>)
 800ad22:	b570      	push	{r4, r5, r6, lr}
 800ad24:	681d      	ldr	r5, [r3, #0]
 800ad26:	4606      	mov	r6, r0
 800ad28:	460c      	mov	r4, r1
 800ad2a:	b125      	cbz	r5, 800ad36 <__swsetup_r+0x16>
 800ad2c:	69ab      	ldr	r3, [r5, #24]
 800ad2e:	b913      	cbnz	r3, 800ad36 <__swsetup_r+0x16>
 800ad30:	4628      	mov	r0, r5
 800ad32:	f7fb fcd9 	bl	80066e8 <__sinit>
 800ad36:	4b2e      	ldr	r3, [pc, #184]	; (800adf0 <__swsetup_r+0xd0>)
 800ad38:	429c      	cmp	r4, r3
 800ad3a:	d10f      	bne.n	800ad5c <__swsetup_r+0x3c>
 800ad3c:	686c      	ldr	r4, [r5, #4]
 800ad3e:	89a3      	ldrh	r3, [r4, #12]
 800ad40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad44:	0719      	lsls	r1, r3, #28
 800ad46:	d42c      	bmi.n	800ada2 <__swsetup_r+0x82>
 800ad48:	06dd      	lsls	r5, r3, #27
 800ad4a:	d411      	bmi.n	800ad70 <__swsetup_r+0x50>
 800ad4c:	2309      	movs	r3, #9
 800ad4e:	6033      	str	r3, [r6, #0]
 800ad50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad54:	81a3      	strh	r3, [r4, #12]
 800ad56:	f04f 30ff 	mov.w	r0, #4294967295
 800ad5a:	e03e      	b.n	800adda <__swsetup_r+0xba>
 800ad5c:	4b25      	ldr	r3, [pc, #148]	; (800adf4 <__swsetup_r+0xd4>)
 800ad5e:	429c      	cmp	r4, r3
 800ad60:	d101      	bne.n	800ad66 <__swsetup_r+0x46>
 800ad62:	68ac      	ldr	r4, [r5, #8]
 800ad64:	e7eb      	b.n	800ad3e <__swsetup_r+0x1e>
 800ad66:	4b24      	ldr	r3, [pc, #144]	; (800adf8 <__swsetup_r+0xd8>)
 800ad68:	429c      	cmp	r4, r3
 800ad6a:	bf08      	it	eq
 800ad6c:	68ec      	ldreq	r4, [r5, #12]
 800ad6e:	e7e6      	b.n	800ad3e <__swsetup_r+0x1e>
 800ad70:	0758      	lsls	r0, r3, #29
 800ad72:	d512      	bpl.n	800ad9a <__swsetup_r+0x7a>
 800ad74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad76:	b141      	cbz	r1, 800ad8a <__swsetup_r+0x6a>
 800ad78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad7c:	4299      	cmp	r1, r3
 800ad7e:	d002      	beq.n	800ad86 <__swsetup_r+0x66>
 800ad80:	4630      	mov	r0, r6
 800ad82:	f7ff fbc9 	bl	800a518 <_free_r>
 800ad86:	2300      	movs	r3, #0
 800ad88:	6363      	str	r3, [r4, #52]	; 0x34
 800ad8a:	89a3      	ldrh	r3, [r4, #12]
 800ad8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad90:	81a3      	strh	r3, [r4, #12]
 800ad92:	2300      	movs	r3, #0
 800ad94:	6063      	str	r3, [r4, #4]
 800ad96:	6923      	ldr	r3, [r4, #16]
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	f043 0308 	orr.w	r3, r3, #8
 800ada0:	81a3      	strh	r3, [r4, #12]
 800ada2:	6923      	ldr	r3, [r4, #16]
 800ada4:	b94b      	cbnz	r3, 800adba <__swsetup_r+0x9a>
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800adac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adb0:	d003      	beq.n	800adba <__swsetup_r+0x9a>
 800adb2:	4621      	mov	r1, r4
 800adb4:	4630      	mov	r0, r6
 800adb6:	f000 f84d 	bl	800ae54 <__smakebuf_r>
 800adba:	89a0      	ldrh	r0, [r4, #12]
 800adbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adc0:	f010 0301 	ands.w	r3, r0, #1
 800adc4:	d00a      	beq.n	800addc <__swsetup_r+0xbc>
 800adc6:	2300      	movs	r3, #0
 800adc8:	60a3      	str	r3, [r4, #8]
 800adca:	6963      	ldr	r3, [r4, #20]
 800adcc:	425b      	negs	r3, r3
 800adce:	61a3      	str	r3, [r4, #24]
 800add0:	6923      	ldr	r3, [r4, #16]
 800add2:	b943      	cbnz	r3, 800ade6 <__swsetup_r+0xc6>
 800add4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800add8:	d1ba      	bne.n	800ad50 <__swsetup_r+0x30>
 800adda:	bd70      	pop	{r4, r5, r6, pc}
 800addc:	0781      	lsls	r1, r0, #30
 800adde:	bf58      	it	pl
 800ade0:	6963      	ldrpl	r3, [r4, #20]
 800ade2:	60a3      	str	r3, [r4, #8]
 800ade4:	e7f4      	b.n	800add0 <__swsetup_r+0xb0>
 800ade6:	2000      	movs	r0, #0
 800ade8:	e7f7      	b.n	800adda <__swsetup_r+0xba>
 800adea:	bf00      	nop
 800adec:	20000010 	.word	0x20000010
 800adf0:	0800b138 	.word	0x0800b138
 800adf4:	0800b158 	.word	0x0800b158
 800adf8:	0800b118 	.word	0x0800b118

0800adfc <abort>:
 800adfc:	b508      	push	{r3, lr}
 800adfe:	2006      	movs	r0, #6
 800ae00:	f000 f898 	bl	800af34 <raise>
 800ae04:	2001      	movs	r0, #1
 800ae06:	f7f6 fd43 	bl	8001890 <_exit>

0800ae0a <__swhatbuf_r>:
 800ae0a:	b570      	push	{r4, r5, r6, lr}
 800ae0c:	460e      	mov	r6, r1
 800ae0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae12:	2900      	cmp	r1, #0
 800ae14:	b096      	sub	sp, #88	; 0x58
 800ae16:	4614      	mov	r4, r2
 800ae18:	461d      	mov	r5, r3
 800ae1a:	da07      	bge.n	800ae2c <__swhatbuf_r+0x22>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	602b      	str	r3, [r5, #0]
 800ae20:	89b3      	ldrh	r3, [r6, #12]
 800ae22:	061a      	lsls	r2, r3, #24
 800ae24:	d410      	bmi.n	800ae48 <__swhatbuf_r+0x3e>
 800ae26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae2a:	e00e      	b.n	800ae4a <__swhatbuf_r+0x40>
 800ae2c:	466a      	mov	r2, sp
 800ae2e:	f000 f89d 	bl	800af6c <_fstat_r>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	dbf2      	blt.n	800ae1c <__swhatbuf_r+0x12>
 800ae36:	9a01      	ldr	r2, [sp, #4]
 800ae38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae40:	425a      	negs	r2, r3
 800ae42:	415a      	adcs	r2, r3
 800ae44:	602a      	str	r2, [r5, #0]
 800ae46:	e7ee      	b.n	800ae26 <__swhatbuf_r+0x1c>
 800ae48:	2340      	movs	r3, #64	; 0x40
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	6023      	str	r3, [r4, #0]
 800ae4e:	b016      	add	sp, #88	; 0x58
 800ae50:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae54 <__smakebuf_r>:
 800ae54:	898b      	ldrh	r3, [r1, #12]
 800ae56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae58:	079d      	lsls	r5, r3, #30
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	460c      	mov	r4, r1
 800ae5e:	d507      	bpl.n	800ae70 <__smakebuf_r+0x1c>
 800ae60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	6123      	str	r3, [r4, #16]
 800ae68:	2301      	movs	r3, #1
 800ae6a:	6163      	str	r3, [r4, #20]
 800ae6c:	b002      	add	sp, #8
 800ae6e:	bd70      	pop	{r4, r5, r6, pc}
 800ae70:	ab01      	add	r3, sp, #4
 800ae72:	466a      	mov	r2, sp
 800ae74:	f7ff ffc9 	bl	800ae0a <__swhatbuf_r>
 800ae78:	9900      	ldr	r1, [sp, #0]
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f7fb fd0f 	bl	80068a0 <_malloc_r>
 800ae82:	b948      	cbnz	r0, 800ae98 <__smakebuf_r+0x44>
 800ae84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae88:	059a      	lsls	r2, r3, #22
 800ae8a:	d4ef      	bmi.n	800ae6c <__smakebuf_r+0x18>
 800ae8c:	f023 0303 	bic.w	r3, r3, #3
 800ae90:	f043 0302 	orr.w	r3, r3, #2
 800ae94:	81a3      	strh	r3, [r4, #12]
 800ae96:	e7e3      	b.n	800ae60 <__smakebuf_r+0xc>
 800ae98:	4b0d      	ldr	r3, [pc, #52]	; (800aed0 <__smakebuf_r+0x7c>)
 800ae9a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae9c:	89a3      	ldrh	r3, [r4, #12]
 800ae9e:	6020      	str	r0, [r4, #0]
 800aea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aea4:	81a3      	strh	r3, [r4, #12]
 800aea6:	9b00      	ldr	r3, [sp, #0]
 800aea8:	6163      	str	r3, [r4, #20]
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	6120      	str	r0, [r4, #16]
 800aeae:	b15b      	cbz	r3, 800aec8 <__smakebuf_r+0x74>
 800aeb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	f000 f86b 	bl	800af90 <_isatty_r>
 800aeba:	b128      	cbz	r0, 800aec8 <__smakebuf_r+0x74>
 800aebc:	89a3      	ldrh	r3, [r4, #12]
 800aebe:	f023 0303 	bic.w	r3, r3, #3
 800aec2:	f043 0301 	orr.w	r3, r3, #1
 800aec6:	81a3      	strh	r3, [r4, #12]
 800aec8:	89a0      	ldrh	r0, [r4, #12]
 800aeca:	4305      	orrs	r5, r0
 800aecc:	81a5      	strh	r5, [r4, #12]
 800aece:	e7cd      	b.n	800ae6c <__smakebuf_r+0x18>
 800aed0:	08006681 	.word	0x08006681

0800aed4 <_malloc_usable_size_r>:
 800aed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aed8:	1f18      	subs	r0, r3, #4
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	bfbc      	itt	lt
 800aede:	580b      	ldrlt	r3, [r1, r0]
 800aee0:	18c0      	addlt	r0, r0, r3
 800aee2:	4770      	bx	lr

0800aee4 <_raise_r>:
 800aee4:	291f      	cmp	r1, #31
 800aee6:	b538      	push	{r3, r4, r5, lr}
 800aee8:	4604      	mov	r4, r0
 800aeea:	460d      	mov	r5, r1
 800aeec:	d904      	bls.n	800aef8 <_raise_r+0x14>
 800aeee:	2316      	movs	r3, #22
 800aef0:	6003      	str	r3, [r0, #0]
 800aef2:	f04f 30ff 	mov.w	r0, #4294967295
 800aef6:	bd38      	pop	{r3, r4, r5, pc}
 800aef8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aefa:	b112      	cbz	r2, 800af02 <_raise_r+0x1e>
 800aefc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af00:	b94b      	cbnz	r3, 800af16 <_raise_r+0x32>
 800af02:	4620      	mov	r0, r4
 800af04:	f000 f830 	bl	800af68 <_getpid_r>
 800af08:	462a      	mov	r2, r5
 800af0a:	4601      	mov	r1, r0
 800af0c:	4620      	mov	r0, r4
 800af0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af12:	f000 b817 	b.w	800af44 <_kill_r>
 800af16:	2b01      	cmp	r3, #1
 800af18:	d00a      	beq.n	800af30 <_raise_r+0x4c>
 800af1a:	1c59      	adds	r1, r3, #1
 800af1c:	d103      	bne.n	800af26 <_raise_r+0x42>
 800af1e:	2316      	movs	r3, #22
 800af20:	6003      	str	r3, [r0, #0]
 800af22:	2001      	movs	r0, #1
 800af24:	e7e7      	b.n	800aef6 <_raise_r+0x12>
 800af26:	2400      	movs	r4, #0
 800af28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af2c:	4628      	mov	r0, r5
 800af2e:	4798      	blx	r3
 800af30:	2000      	movs	r0, #0
 800af32:	e7e0      	b.n	800aef6 <_raise_r+0x12>

0800af34 <raise>:
 800af34:	4b02      	ldr	r3, [pc, #8]	; (800af40 <raise+0xc>)
 800af36:	4601      	mov	r1, r0
 800af38:	6818      	ldr	r0, [r3, #0]
 800af3a:	f7ff bfd3 	b.w	800aee4 <_raise_r>
 800af3e:	bf00      	nop
 800af40:	20000010 	.word	0x20000010

0800af44 <_kill_r>:
 800af44:	b538      	push	{r3, r4, r5, lr}
 800af46:	4d07      	ldr	r5, [pc, #28]	; (800af64 <_kill_r+0x20>)
 800af48:	2300      	movs	r3, #0
 800af4a:	4604      	mov	r4, r0
 800af4c:	4608      	mov	r0, r1
 800af4e:	4611      	mov	r1, r2
 800af50:	602b      	str	r3, [r5, #0]
 800af52:	f7f6 fc8d 	bl	8001870 <_kill>
 800af56:	1c43      	adds	r3, r0, #1
 800af58:	d102      	bne.n	800af60 <_kill_r+0x1c>
 800af5a:	682b      	ldr	r3, [r5, #0]
 800af5c:	b103      	cbz	r3, 800af60 <_kill_r+0x1c>
 800af5e:	6023      	str	r3, [r4, #0]
 800af60:	bd38      	pop	{r3, r4, r5, pc}
 800af62:	bf00      	nop
 800af64:	20004fd4 	.word	0x20004fd4

0800af68 <_getpid_r>:
 800af68:	f7f6 bc7a 	b.w	8001860 <_getpid>

0800af6c <_fstat_r>:
 800af6c:	b538      	push	{r3, r4, r5, lr}
 800af6e:	4d07      	ldr	r5, [pc, #28]	; (800af8c <_fstat_r+0x20>)
 800af70:	2300      	movs	r3, #0
 800af72:	4604      	mov	r4, r0
 800af74:	4608      	mov	r0, r1
 800af76:	4611      	mov	r1, r2
 800af78:	602b      	str	r3, [r5, #0]
 800af7a:	f7f6 fcd8 	bl	800192e <_fstat>
 800af7e:	1c43      	adds	r3, r0, #1
 800af80:	d102      	bne.n	800af88 <_fstat_r+0x1c>
 800af82:	682b      	ldr	r3, [r5, #0]
 800af84:	b103      	cbz	r3, 800af88 <_fstat_r+0x1c>
 800af86:	6023      	str	r3, [r4, #0]
 800af88:	bd38      	pop	{r3, r4, r5, pc}
 800af8a:	bf00      	nop
 800af8c:	20004fd4 	.word	0x20004fd4

0800af90 <_isatty_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	4d06      	ldr	r5, [pc, #24]	; (800afac <_isatty_r+0x1c>)
 800af94:	2300      	movs	r3, #0
 800af96:	4604      	mov	r4, r0
 800af98:	4608      	mov	r0, r1
 800af9a:	602b      	str	r3, [r5, #0]
 800af9c:	f7f6 fcd7 	bl	800194e <_isatty>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	d102      	bne.n	800afaa <_isatty_r+0x1a>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	b103      	cbz	r3, 800afaa <_isatty_r+0x1a>
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	bd38      	pop	{r3, r4, r5, pc}
 800afac:	20004fd4 	.word	0x20004fd4

0800afb0 <_init>:
 800afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb2:	bf00      	nop
 800afb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afb6:	bc08      	pop	{r3}
 800afb8:	469e      	mov	lr, r3
 800afba:	4770      	bx	lr

0800afbc <_fini>:
 800afbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afbe:	bf00      	nop
 800afc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afc2:	bc08      	pop	{r3}
 800afc4:	469e      	mov	lr, r3
 800afc6:	4770      	bx	lr
