
fc4_3_only_sradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b5c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df4  08004df4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08004df4  08004df4  00014df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dfc  08004dfc  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dfc  08004dfc  00014dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00000220  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ac  200002ac  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014260  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020df  00000000  00000000  0003431c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  00036400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd0  00000000  00000000  00037488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024663  00000000  00000000  00038458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a6f  00000000  00000000  0005cabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df763  00000000  00000000  0006d52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014cc8d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b18  00000000  00000000  0014cce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004cf4 	.word	0x08004cf4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	08004cf4 	.word	0x08004cf4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b093      	sub	sp, #76	; 0x4c
 800058c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f001 fa1b 	bl	80019c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f83f 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f97d 	bl	8000894 <MX_GPIO_Init>
  MX_SPI2_Init();
 800059a:	f000 f8a5 	bl	80006e8 <MX_SPI2_Init>
  MX_UART8_Init();
 800059e:	f000 f94f 	bl	8000840 <MX_UART8_Init>
  MX_TIM2_Init();
 80005a2:	f000 f8d7 	bl	8000754 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  set_hspi(hspi2);
 80005a6:	4c16      	ldr	r4, [pc, #88]	; (8000600 <main+0x78>)
 80005a8:	4668      	mov	r0, sp
 80005aa:	f104 0310 	add.w	r3, r4, #16
 80005ae:	2248      	movs	r2, #72	; 0x48
 80005b0:	4619      	mov	r1, r3
 80005b2:	f003 ff69 	bl	8004488 <memcpy>
 80005b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005ba:	f000 fc57 	bl	8000e6c <set_hspi>
  set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 80005be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c2:	4810      	ldr	r0, [pc, #64]	; (8000604 <main+0x7c>)
 80005c4:	f000 fbfa 	bl	8000dbc <set_NSS_pin>
  set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 80005c8:	2108      	movs	r1, #8
 80005ca:	480f      	ldr	r0, [pc, #60]	; (8000608 <main+0x80>)
 80005cc:	f000 fc0c 	bl	8000de8 <set_BUSY_pin>
  set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 80005d0:	2104      	movs	r1, #4
 80005d2:	480d      	ldr	r0, [pc, #52]	; (8000608 <main+0x80>)
 80005d4:	f000 fc1e 	bl	8000e14 <set_NRESET_pin>
  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 80005d8:	2110      	movs	r1, #16
 80005da:	480b      	ldr	r0, [pc, #44]	; (8000608 <main+0x80>)
 80005dc:	f000 fc30 	bl	8000e40 <set_DIO1_pin>
  Tx_setup();
 80005e0:	f000 fc5c 	bl	8000e9c <Tx_setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf((char *)tx_buffer, "0123456789");
 80005e4:	4909      	ldr	r1, [pc, #36]	; (800060c <main+0x84>)
 80005e6:	480a      	ldr	r0, [pc, #40]	; (8000610 <main+0x88>)
 80005e8:	f004 f81e 	bl	8004628 <siprintf>
	  TxProtocol(tx_buffer, 10);
 80005ec:	210a      	movs	r1, #10
 80005ee:	4808      	ldr	r0, [pc, #32]	; (8000610 <main+0x88>)
 80005f0:	f000 fd68 	bl	80010c4 <TxProtocol>
	  HAL_Delay(500);
 80005f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f8:	f001 fa58 	bl	8001aac <HAL_Delay>
	  sprintf((char *)tx_buffer, "0123456789");
 80005fc:	e7f2      	b.n	80005e4 <main+0x5c>
 80005fe:	bf00      	nop
 8000600:	20000138 	.word	0x20000138
 8000604:	40020400 	.word	0x40020400
 8000608:	40021800 	.word	0x40021800
 800060c:	08004d0c 	.word	0x08004d0c
 8000610:	20000200 	.word	0x20000200

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 ff3e 	bl	80044a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <SystemClock_Config+0xcc>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000660:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <SystemClock_Config+0xd0>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000688:	2308      	movs	r3, #8
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800068c:	2348      	movs	r3, #72	; 0x48
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fd19 	bl	80020d4 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a8:	f000 f9a6 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2102      	movs	r1, #2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 ff7b 	bl	80025c4 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006d4:	f000 f990 	bl	80009f8 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	; 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_SPI2_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_SPI2_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_SPI2_Init+0x64>)
 80006f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_SPI2_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_SPI2_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_SPI2_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_SPI2_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_SPI2_Init+0x64>)
 8000714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000718:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_SPI2_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_SPI2_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_SPI2_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_SPI2_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_SPI2_Init+0x64>)
 8000734:	220a      	movs	r2, #10
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_SPI2_Init+0x64>)
 800073a:	f002 f93d 	bl	80029b8 <HAL_SPI_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 f958 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000138 	.word	0x20000138
 8000750:	40003800 	.word	0x40003800

08000754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
 8000780:	615a      	str	r2, [r3, #20]
 8000782:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000784:	4b2d      	ldr	r3, [pc, #180]	; (800083c <MX_TIM2_Init+0xe8>)
 8000786:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50;
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <MX_TIM2_Init+0xe8>)
 800078e:	2232      	movs	r2, #50	; 0x32
 8000790:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_TIM2_Init+0xe8>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <MX_TIM2_Init+0xe8>)
 800079a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800079e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a0:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_TIM2_Init+0xe8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a6:	4b25      	ldr	r3, [pc, #148]	; (800083c <MX_TIM2_Init+0xe8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ac:	4823      	ldr	r0, [pc, #140]	; (800083c <MX_TIM2_Init+0xe8>)
 80007ae:	f002 fd35 	bl	800321c <HAL_TIM_Base_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007b8:	f000 f91e 	bl	80009f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c6:	4619      	mov	r1, r3
 80007c8:	481c      	ldr	r0, [pc, #112]	; (800083c <MX_TIM2_Init+0xe8>)
 80007ca:	f002 ff99 	bl	8003700 <HAL_TIM_ConfigClockSource>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007d4:	f000 f910 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007d8:	4818      	ldr	r0, [pc, #96]	; (800083c <MX_TIM2_Init+0xe8>)
 80007da:	f002 fd6e 	bl	80032ba <HAL_TIM_PWM_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007e4:	f000 f908 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007e8:	2320      	movs	r3, #32
 80007ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4619      	mov	r1, r3
 80007f6:	4811      	ldr	r0, [pc, #68]	; (800083c <MX_TIM2_Init+0xe8>)
 80007f8:	f003 fb66 	bl	8003ec8 <HAL_TIMEx_MasterConfigSynchronization>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000802:	f000 f8f9 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000806:	2360      	movs	r3, #96	; 0x60
 8000808:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800080a:	2364      	movs	r3, #100	; 0x64
 800080c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2208      	movs	r2, #8
 800081a:	4619      	mov	r1, r3
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <MX_TIM2_Init+0xe8>)
 800081e:	f002 fead 	bl	800357c <HAL_TIM_PWM_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000828:	f000 f8e6 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <MX_TIM2_Init+0xe8>)
 800082e:	f000 f97f 	bl	8000b30 <HAL_TIM_MspPostInit>

}
 8000832:	bf00      	nop
 8000834:	3738      	adds	r7, #56	; 0x38
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000250 	.word	0x20000250

08000840 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_UART8_Init+0x4c>)
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <MX_UART8_Init+0x50>)
 8000848:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_UART8_Init+0x4c>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_UART8_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_UART8_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_UART8_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_UART8_Init+0x4c>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_UART8_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_UART8_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_UART8_Init+0x4c>)
 8000878:	f003 fbb6 	bl	8003fe8 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8000882:	f000 f8b9 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000020c 	.word	0x2000020c
 8000890:	40007c00 	.word	0x40007c00

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	4b4e      	ldr	r3, [pc, #312]	; (80009e8 <MX_GPIO_Init+0x154>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a4d      	ldr	r2, [pc, #308]	; (80009e8 <MX_GPIO_Init+0x154>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b4b      	ldr	r3, [pc, #300]	; (80009e8 <MX_GPIO_Init+0x154>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	61bb      	str	r3, [r7, #24]
 80008c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	4b47      	ldr	r3, [pc, #284]	; (80009e8 <MX_GPIO_Init+0x154>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a46      	ldr	r2, [pc, #280]	; (80009e8 <MX_GPIO_Init+0x154>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b44      	ldr	r3, [pc, #272]	; (80009e8 <MX_GPIO_Init+0x154>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b40      	ldr	r3, [pc, #256]	; (80009e8 <MX_GPIO_Init+0x154>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a3f      	ldr	r2, [pc, #252]	; (80009e8 <MX_GPIO_Init+0x154>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b3d      	ldr	r3, [pc, #244]	; (80009e8 <MX_GPIO_Init+0x154>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b39      	ldr	r3, [pc, #228]	; (80009e8 <MX_GPIO_Init+0x154>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a38      	ldr	r2, [pc, #224]	; (80009e8 <MX_GPIO_Init+0x154>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b36      	ldr	r3, [pc, #216]	; (80009e8 <MX_GPIO_Init+0x154>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b32      	ldr	r3, [pc, #200]	; (80009e8 <MX_GPIO_Init+0x154>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a31      	ldr	r2, [pc, #196]	; (80009e8 <MX_GPIO_Init+0x154>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <MX_GPIO_Init+0x154>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <MX_GPIO_Init+0x154>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a2a      	ldr	r2, [pc, #168]	; (80009e8 <MX_GPIO_Init+0x154>)
 8000940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <MX_GPIO_Init+0x154>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <MX_GPIO_Init+0x154>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <MX_GPIO_Init+0x154>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <MX_GPIO_Init+0x154>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000974:	481d      	ldr	r0, [pc, #116]	; (80009ec <MX_GPIO_Init+0x158>)
 8000976:	f001 fb93 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin|SX_RF_SW_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	213c      	movs	r1, #60	; 0x3c
 800097e:	481c      	ldr	r0, [pc, #112]	; (80009f0 <MX_GPIO_Init+0x15c>)
 8000980:	f001 fb8e 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8000984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <MX_GPIO_Init+0x158>)
 800099e:	f001 f9bb 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RX_XTend_Pin */
  GPIO_InitStruct.Pin = USART3_RX_XTend_Pin;
 80009a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009b4:	2307      	movs	r3, #7
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USART3_RX_XTend_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	480d      	ldr	r0, [pc, #52]	; (80009f4 <MX_GPIO_Init+0x160>)
 80009c0:	f001 f9aa 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin SX_RF_SW_Pin */
  GPIO_InitStruct.Pin = SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin|SX_RF_SW_Pin;
 80009c4:	233c      	movs	r3, #60	; 0x3c
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_GPIO_Init+0x15c>)
 80009dc:	f001 f99c 	bl	8001d18 <HAL_GPIO_Init>

}
 80009e0:	bf00      	nop
 80009e2:	3730      	adds	r7, #48	; 0x30
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020400 	.word	0x40020400
 80009f0:	40021800 	.word	0x40021800
 80009f4:	40020c00 	.word	0x40020c00

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <HAL_SPI_MspInit+0x84>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12c      	bne.n	8000ad0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <HAL_SPI_MspInit+0x88>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <HAL_SPI_MspInit+0x88>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_SPI_MspInit+0x88>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_SPI_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <HAL_SPI_MspInit+0x88>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_SPI_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000aae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ac0:	2305      	movs	r3, #5
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <HAL_SPI_MspInit+0x8c>)
 8000acc:	f001 f924 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40003800 	.word	0x40003800
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af4:	d115      	bne.n	8000b22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_TIM_Base_MspInit+0x48>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <HAL_TIM_Base_MspInit+0x48>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_TIM_Base_MspInit+0x48>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	201c      	movs	r0, #28
 8000b18:	f001 f8c7 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b1c:	201c      	movs	r0, #28
 8000b1e:	f001 f8e0 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b50:	d11d      	bne.n	8000b8e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_TIM_MspPostInit+0x68>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <HAL_TIM_MspPostInit+0x68>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <HAL_TIM_MspPostInit+0x68>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	4619      	mov	r1, r3
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <HAL_TIM_MspPostInit+0x6c>)
 8000b8a:	f001 f8c5 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3720      	adds	r7, #32
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <HAL_UART_MspInit+0x84>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d12b      	bne.n	8000c1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_UART_MspInit+0x88>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <HAL_UART_MspInit+0x88>)
 8000bcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_UART_MspInit+0x88>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_UART_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <HAL_UART_MspInit+0x88>)
 8000be8:	f043 0310 	orr.w	r3, r3, #16
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_UART_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0310 	and.w	r3, r3, #16
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <HAL_UART_MspInit+0x8c>)
 8000c16:	f001 f87f 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40007c00 	.word	0x40007c00
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40021000 	.word	0x40021000

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <NMI_Handler+0x4>

08000c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler+0x4>

08000c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7c:	f000 fef6 	bl	8001a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <TIM2_IRQHandler+0x10>)
 8000c8a:	f002 fb6f 	bl	800336c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000250 	.word	0x20000250

08000c98 <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 8000ca8:	bf00      	nop
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <sx126x_hal_write+0x78>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <sx126x_hal_write+0x7c>)
 8000cb0:	8812      	ldrh	r2, [r2, #0]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 f9db 	bl	8002070 <HAL_GPIO_ReadPin>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d0f4      	beq.n	8000caa <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <sx126x_hal_write+0x80>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a15      	ldr	r2, [pc, #84]	; (8000d1c <sx126x_hal_write+0x84>)
 8000cc6:	8811      	ldrh	r1, [r2, #0]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 f9e8 	bl	80020a0 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 8000cd0:	88fa      	ldrh	r2, [r7, #6]
 8000cd2:	2364      	movs	r3, #100	; 0x64
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f001 fef7 	bl	8002aca <HAL_SPI_Transmit>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	75fb      	strb	r3, [r7, #23]
    if (data_length != 0) {
 8000ce0:	8c3b      	ldrh	r3, [r7, #32]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d007      	beq.n	8000cf6 <sx126x_hal_write+0x5e>
        status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 8000ce6:	8c3a      	ldrh	r2, [r7, #32]
 8000ce8:	2364      	movs	r3, #100	; 0x64
 8000cea:	6839      	ldr	r1, [r7, #0]
 8000cec:	68f8      	ldr	r0, [r7, #12]
 8000cee:	f001 feec 	bl	8002aca <HAL_SPI_Transmit>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	75fb      	strb	r3, [r7, #23]
    }
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <sx126x_hal_write+0x80>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <sx126x_hal_write+0x84>)
 8000cfc:	8811      	ldrh	r1, [r2, #0]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 f9cd 	bl	80020a0 <HAL_GPIO_WritePin>
    return status;
 8000d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200000bc 	.word	0x200000bc
 8000d14:	200000b8 	.word	0x200000b8
 8000d18:	200000ac 	.word	0x200000ac
 8000d1c:	200000a8 	.word	0x200000a8

08000d20 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 8000d30:	bf00      	nop
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <sx126x_hal_read+0x8c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1e      	ldr	r2, [pc, #120]	; (8000db0 <sx126x_hal_read+0x90>)
 8000d38:	8812      	ldrh	r2, [r2, #0]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f001 f997 	bl	8002070 <HAL_GPIO_ReadPin>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d0f4      	beq.n	8000d32 <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <sx126x_hal_read+0x94>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a1a      	ldr	r2, [pc, #104]	; (8000db8 <sx126x_hal_read+0x98>)
 8000d4e:	8811      	ldrh	r1, [r2, #0]
 8000d50:	2200      	movs	r2, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 f9a4 	bl	80020a0 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 8000d58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	2364      	movs	r3, #100	; 0x64
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f001 feb1 	bl	8002aca <HAL_SPI_Transmit>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 8000d6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	18d1      	adds	r1, r2, r3
 8000d74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	88fa      	ldrh	r2, [r7, #6]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	2264      	movs	r2, #100	; 0x64
 8000d82:	9200      	str	r2, [sp, #0]
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	f001 ffdb 	bl	8002d42 <HAL_SPI_TransmitReceive>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <sx126x_hal_read+0x94>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <sx126x_hal_read+0x98>)
 8000d96:	8811      	ldrh	r1, [r2, #0]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 f980 	bl	80020a0 <HAL_GPIO_WritePin>
    return status;
 8000da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200000bc 	.word	0x200000bc
 8000db0:	200000b8 	.word	0x200000b8
 8000db4:	200000ac 	.word	0x200000ac
 8000db8:	200000a8 	.word	0x200000a8

08000dbc <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 8000dc8:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <set_NSS_pin+0x24>)
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <set_NSS_pin+0x28>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	200000a8 	.word	0x200000a8
 8000de4:	200000ac 	.word	0x200000ac

08000de8 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 8000df4:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <set_BUSY_pin+0x24>)
 8000df6:	887b      	ldrh	r3, [r7, #2]
 8000df8:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <set_BUSY_pin+0x28>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	200000b8 	.word	0x200000b8
 8000e10:	200000bc 	.word	0x200000bc

08000e14 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 8000e20:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <set_NRESET_pin+0x24>)
 8000e22:	887b      	ldrh	r3, [r7, #2]
 8000e24:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <set_NRESET_pin+0x28>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	200000b0 	.word	0x200000b0
 8000e3c:	200000b4 	.word	0x200000b4

08000e40 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 8000e4c:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <set_DIO1_pin+0x24>)
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <set_DIO1_pin+0x28>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	200000c0 	.word	0x200000c0
 8000e68:	200000c4 	.word	0x200000c4

08000e6c <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	f107 0c08 	add.w	ip, r7, #8
 8000e76:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <set_hspi+0x2c>)
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	2258      	movs	r2, #88	; 0x58
 8000e84:	4619      	mov	r1, r3
 8000e86:	f003 faff 	bl	8004488 <memcpy>
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e92:	b004      	add	sp, #16
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200000c8 	.word	0x200000c8

08000e9c <Tx_setup>:

void Tx_setup(){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 8000ea2:	4b66      	ldr	r3, [pc, #408]	; (800103c <Tx_setup+0x1a0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a66      	ldr	r2, [pc, #408]	; (8001040 <Tx_setup+0x1a4>)
 8000ea8:	8811      	ldrh	r1, [r2, #0]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 f8f7 	bl	80020a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8000eb2:	4b64      	ldr	r3, [pc, #400]	; (8001044 <Tx_setup+0x1a8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a64      	ldr	r2, [pc, #400]	; (8001048 <Tx_setup+0x1ac>)
 8000eb8:	8811      	ldrh	r1, [r2, #0]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f001 f8ef 	bl	80020a0 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8000ec2:	2032      	movs	r0, #50	; 0x32
 8000ec4:	f000 fdf2 	bl	8001aac <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 8000ec8:	4b5e      	ldr	r3, [pc, #376]	; (8001044 <Tx_setup+0x1a8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a5e      	ldr	r2, [pc, #376]	; (8001048 <Tx_setup+0x1ac>)
 8000ece:	8811      	ldrh	r1, [r2, #0]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 f8e4 	bl	80020a0 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	485c      	ldr	r0, [pc, #368]	; (800104c <Tx_setup+0x1b0>)
 8000edc:	f000 f92c 	bl	8001138 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 8000ee0:	4b5b      	ldr	r3, [pc, #364]	; (8001050 <Tx_setup+0x1b4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4859      	ldr	r0, [pc, #356]	; (800104c <Tx_setup+0x1b0>)
 8000ee8:	f000 fb94 	bl	8001614 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 8000eec:	4b59      	ldr	r3, [pc, #356]	; (8001054 <Tx_setup+0x1b8>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4856      	ldr	r0, [pc, #344]	; (800104c <Tx_setup+0x1b0>)
 8000ef4:	f000 fbc8 	bl	8001688 <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 8000ef8:	4b57      	ldr	r3, [pc, #348]	; (8001058 <Tx_setup+0x1bc>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4853      	ldr	r0, [pc, #332]	; (800104c <Tx_setup+0x1b0>)
 8000f00:	f000 fa1d 	bl	800133e <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 8000f04:	2101      	movs	r1, #1
 8000f06:	4851      	ldr	r0, [pc, #324]	; (800104c <Tx_setup+0x1b0>)
 8000f08:	f000 fb42 	bl	8001590 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 8000f0c:	4b53      	ldr	r3, [pc, #332]	; (800105c <Tx_setup+0x1c0>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2264      	movs	r2, #100	; 0x64
 8000f12:	4619      	mov	r1, r3
 8000f14:	484d      	ldr	r0, [pc, #308]	; (800104c <Tx_setup+0x1b0>)
 8000f16:	f000 fb55 	bl	80015c4 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 8000f1a:	4b51      	ldr	r3, [pc, #324]	; (8001060 <Tx_setup+0x1c4>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	484a      	ldr	r0, [pc, #296]	; (800104c <Tx_setup+0x1b0>)
 8000f22:	f000 f9a9 	bl	8001278 <sx126x_cal>
    HAL_Delay(50);
 8000f26:	2032      	movs	r0, #50	; 0x32
 8000f28:	f000 fdc0 	bl	8001aac <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 8000f2c:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <Tx_setup+0x1c8>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	4846      	ldr	r0, [pc, #280]	; (800104c <Tx_setup+0x1b0>)
 8000f34:	f000 f986 	bl	8001244 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 8000f38:	4b4b      	ldr	r3, [pc, #300]	; (8001068 <Tx_setup+0x1cc>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4a4b      	ldr	r2, [pc, #300]	; (800106c <Tx_setup+0x1d0>)
 8000f3e:	7812      	ldrb	r2, [r2, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4842      	ldr	r0, [pc, #264]	; (800104c <Tx_setup+0x1b0>)
 8000f44:	f000 f9b2 	bl	80012ac <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 8000f48:	2004      	movs	r0, #4
 8000f4a:	f003 fa8d 	bl	8004468 <malloc>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 8000f52:	4b47      	ldr	r3, [pc, #284]	; (8001070 <Tx_setup+0x1d4>)
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 8000f5a:	4b46      	ldr	r3, [pc, #280]	; (8001074 <Tx_setup+0x1d8>)
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 8000f62:	4b45      	ldr	r3, [pc, #276]	; (8001078 <Tx_setup+0x1dc>)
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 8000f6a:	4b44      	ldr	r3, [pc, #272]	; (800107c <Tx_setup+0x1e0>)
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 8000f72:	68f9      	ldr	r1, [r7, #12]
 8000f74:	4835      	ldr	r0, [pc, #212]	; (800104c <Tx_setup+0x1b0>)
 8000f76:	f000 f9bd 	bl	80012f4 <sx126x_set_pa_cfg>
    free(params);
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f003 fa7c 	bl	8004478 <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 8000f80:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <Tx_setup+0x1e4>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b25b      	sxtb	r3, r3
 8000f86:	4a3f      	ldr	r2, [pc, #252]	; (8001084 <Tx_setup+0x1e8>)
 8000f88:	7812      	ldrb	r2, [r2, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482f      	ldr	r0, [pc, #188]	; (800104c <Tx_setup+0x1b0>)
 8000f8e:	f000 fb95 	bl	80016bc <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 8000f92:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <Tx_setup+0x1ec>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	4a3d      	ldr	r2, [pc, #244]	; (800108c <Tx_setup+0x1f0>)
 8000f98:	7812      	ldrb	r2, [r2, #0]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	482b      	ldr	r0, [pc, #172]	; (800104c <Tx_setup+0x1b0>)
 8000f9e:	f000 fc4b 	bl	8001838 <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 8000fa2:	2004      	movs	r0, #4
 8000fa4:	f003 fa60 	bl	8004468 <malloc>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 8000fac:	4b38      	ldr	r3, [pc, #224]	; (8001090 <Tx_setup+0x1f4>)
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 8000fb4:	4b37      	ldr	r3, [pc, #220]	; (8001094 <Tx_setup+0x1f8>)
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 8000fbc:	4b36      	ldr	r3, [pc, #216]	; (8001098 <Tx_setup+0x1fc>)
 8000fbe:	781a      	ldrb	r2, [r3, #0]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 8000fc4:	4b35      	ldr	r3, [pc, #212]	; (800109c <Tx_setup+0x200>)
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	481f      	ldr	r0, [pc, #124]	; (800104c <Tx_setup+0x1b0>)
 8000fd0:	f000 fb98 	bl	8001704 <sx126x_set_lora_mod_params>
    free(mod_params);
 8000fd4:	68b8      	ldr	r0, [r7, #8]
 8000fd6:	f003 fa4f 	bl	8004478 <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8000fda:	2006      	movs	r0, #6
 8000fdc:	f003 fa44 	bl	8004468 <malloc>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <Tx_setup+0x204>)
 8000fe6:	881a      	ldrh	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 8000fec:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <Tx_setup+0x208>)
 8000fee:	781a      	ldrb	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <Tx_setup+0x20c>)
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 8000ffc:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <Tx_setup+0x210>)
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 8001004:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <Tx_setup+0x214>)
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	480f      	ldr	r0, [pc, #60]	; (800104c <Tx_setup+0x1b0>)
 8001010:	f000 fba4 	bl	800175c <sx126x_set_lora_pkt_params>
    free(lora_params);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f003 fa2f 	bl	8004478 <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <Tx_setup+0x218>)
 800101c:	8819      	ldrh	r1, [r3, #0]
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <Tx_setup+0x21c>)
 8001020:	881a      	ldrh	r2, [r3, #0]
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <Tx_setup+0x220>)
 8001024:	8818      	ldrh	r0, [r3, #0]
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <Tx_setup+0x224>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	4603      	mov	r3, r0
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <Tx_setup+0x1b0>)
 8001030:	f000 fa11 	bl	8001456 <sx126x_set_dio_irq_params>

}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200000b4 	.word	0x200000b4
 8001040:	200000b0 	.word	0x200000b0
 8001044:	200000ac 	.word	0x200000ac
 8001048:	200000a8 	.word	0x200000a8
 800104c:	200000c8 	.word	0x200000c8
 8001050:	20000000 	.word	0x20000000
 8001054:	20000004 	.word	0x20000004
 8001058:	20000005 	.word	0x20000005
 800105c:	20000006 	.word	0x20000006
 8001060:	20000008 	.word	0x20000008
 8001064:	20000007 	.word	0x20000007
 8001068:	20000009 	.word	0x20000009
 800106c:	2000000a 	.word	0x2000000a
 8001070:	2000000b 	.word	0x2000000b
 8001074:	2000000c 	.word	0x2000000c
 8001078:	20000120 	.word	0x20000120
 800107c:	2000000d 	.word	0x2000000d
 8001080:	2000000e 	.word	0x2000000e
 8001084:	2000000f 	.word	0x2000000f
 8001088:	20000121 	.word	0x20000121
 800108c:	20000122 	.word	0x20000122
 8001090:	20000010 	.word	0x20000010
 8001094:	20000011 	.word	0x20000011
 8001098:	20000012 	.word	0x20000012
 800109c:	20000123 	.word	0x20000123
 80010a0:	20000014 	.word	0x20000014
 80010a4:	20000124 	.word	0x20000124
 80010a8:	20000016 	.word	0x20000016
 80010ac:	20000017 	.word	0x20000017
 80010b0:	20000125 	.word	0x20000125
 80010b4:	20000018 	.word	0x20000018
 80010b8:	2000001a 	.word	0x2000001a
 80010bc:	20000126 	.word	0x20000126
 80010c0:	20000128 	.word	0x20000128

080010c4 <TxProtocol>:

void TxProtocol(uint8_t* data, uint8_t data_length){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <TxProtocol+0x6c>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	4817      	ldr	r0, [pc, #92]	; (8001134 <TxProtocol+0x70>)
 80010d8:	f000 fa34 	bl	8001544 <sx126x_clear_irq_status>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_write_buffer(&hspi, 0, data, data_length); // 0 is the offset
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	2100      	movs	r1, #0
 80010e6:	4813      	ldr	r0, [pc, #76]	; (8001134 <TxProtocol+0x70>)
 80010e8:	f000 f996 	bl	8001418 <sx126x_write_buffer>
 80010ec:	4603      	mov	r3, r0
 80010ee:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_tx(&hspi, 6000, data_length);
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	461a      	mov	r2, r3
 80010f4:	f241 7170 	movw	r1, #6000	; 0x1770
 80010f8:	480e      	ldr	r0, [pc, #56]	; (8001134 <TxProtocol+0x70>)
 80010fa:	f000 f837 	bl	800116c <sx126x_set_tx>
 80010fe:	4603      	mov	r3, r0
 8001100:	73fb      	strb	r3, [r7, #15]

    sx126x_irq_mask_t irq;
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	4619      	mov	r1, r3
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <TxProtocol+0x70>)
 800110a:	f000 f9e9 	bl	80014e0 <sx126x_get_irq_status>
 800110e:	4603      	mov	r3, r0
 8001110:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_TX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 8001112:	89bb      	ldrh	r3, [r7, #12]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	d104      	bne.n	8001126 <TxProtocol+0x62>
 800111c:	89bb      	ldrh	r3, [r7, #12]
 800111e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0ed      	beq.n	8001102 <TxProtocol+0x3e>
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000001a 	.word	0x2000001a
 8001134:	200000c8 	.word	0x200000c8

08001138 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af02      	add	r7, sp, #8
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 8001144:	2300      	movs	r3, #0
 8001146:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 8001150:	f107 010c 	add.w	r1, r7, #12
 8001154:	2300      	movs	r3, #0
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	2202      	movs	r2, #2
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff fd9b 	bl	8000c98 <sx126x_hal_write>
 8001162:	4603      	mov	r3, r0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms , uint8_t lora_data_length)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	4613      	mov	r3, r2
 8001178:	71fb      	strb	r3, [r7, #7]
    if (packet_type == SX126X_PKT_TYPE_LORA) {
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <sx126x_set_tx+0x7c>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d11e      	bne.n	80011c0 <sx126x_set_tx+0x54>
        struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8001182:	2006      	movs	r0, #6
 8001184:	f003 f970 	bl	8004468 <malloc>
 8001188:	4603      	mov	r3, r0
 800118a:	617b      	str	r3, [r7, #20]
        lora_params->preamble_len_in_symb=pkt_preamble_len;
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <sx126x_set_tx+0x80>)
 800118e:	881a      	ldrh	r2, [r3, #0]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	801a      	strh	r2, [r3, #0]
        lora_params->header_type=header_type;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <sx126x_set_tx+0x84>)
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	709a      	strb	r2, [r3, #2]
        lora_params->pld_len_in_bytes=lora_data_length;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	79fa      	ldrb	r2, [r7, #7]
 80011a0:	70da      	strb	r2, [r3, #3]
        lora_params->crc_is_on=crc_is_on;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <sx126x_set_tx+0x88>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	711a      	strb	r2, [r3, #4]
        lora_params->invert_iq_is_on=invert_iq_is_on;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <sx126x_set_tx+0x8c>)
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	715a      	strb	r2, [r3, #5]
        sx126x_set_lora_pkt_params(&hspi, lora_params);
 80011b2:	6979      	ldr	r1, [r7, #20]
 80011b4:	4811      	ldr	r0, [pc, #68]	; (80011fc <sx126x_set_tx+0x90>)
 80011b6:	f000 fad1 	bl	800175c <sx126x_set_lora_pkt_params>
        free(lora_params);
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f003 f95c 	bl	8004478 <free>
    }

    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80011c6:	d301      	bcc.n	80011cc <sx126x_set_tx+0x60>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 80011c8:	2302      	movs	r3, #2
 80011ca:	e008      	b.n	80011de <sx126x_set_tx+0x72>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 80011cc:	68b8      	ldr	r0, [r7, #8]
 80011ce:	f000 fb7d 	bl	80018cc <sx126x_convert_timeout_in_ms_to_rtc_step>
 80011d2:	6138      	str	r0, [r7, #16]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 80011d4:	6939      	ldr	r1, [r7, #16]
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f000 f812 	bl	8001200 <sx126x_set_tx_with_timeout_in_rtc_step>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000004 	.word	0x20000004
 80011ec:	20000014 	.word	0x20000014
 80011f0:	20000124 	.word	0x20000124
 80011f4:	20000017 	.word	0x20000017
 80011f8:	20000125 	.word	0x20000125
 80011fc:	200000c8 	.word	0x200000c8

08001200 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af02      	add	r7, sp, #8
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_TX] = { 0 };
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_TX;
 800120e:	2383      	movs	r3, #131	; 0x83
 8001210:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	0c1b      	lsrs	r3, r3, #16
 8001216:	b2db      	uxtb	r3, r3
 8001218:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	b2db      	uxtb	r3, r3
 8001220:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 8001228:	f107 010c 	add.w	r1, r7, #12
 800122c:	2300      	movs	r3, #0
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2300      	movs	r3, #0
 8001232:	2204      	movs	r2, #4
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff fd2f 	bl	8000c98 <sx126x_hal_write>
 800123a:	4603      	mov	r3, r0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af02      	add	r7, sp, #8
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 8001250:	2300      	movs	r3, #0
 8001252:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 8001254:	2396      	movs	r3, #150	; 0x96
 8001256:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800125c:	f107 010c 	add.w	r1, r7, #12
 8001260:	2300      	movs	r3, #0
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	2202      	movs	r2, #2
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fd15 	bl	8000c98 <sx126x_hal_write>
 800126e:	4603      	mov	r3, r0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 8001284:	2300      	movs	r3, #0
 8001286:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 8001288:	2389      	movs	r3, #137	; 0x89
 800128a:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 8001290:	f107 010c 	add.w	r1, r7, #12
 8001294:	2300      	movs	r3, #0
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2300      	movs	r3, #0
 800129a:	2202      	movs	r2, #2
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff fcfb 	bl	8000c98 <sx126x_hal_write>
 80012a2:	4603      	mov	r3, r0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
 80012b8:	4613      	mov	r3, r2
 80012ba:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <sx126x_cal_img_hex+0x44>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	81bb      	strh	r3, [r7, #12]
 80012c2:	2300      	movs	r3, #0
 80012c4:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 80012c6:	2398      	movs	r3, #152	; 0x98
 80012c8:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 80012ce:	78bb      	ldrb	r3, [r7, #2]
 80012d0:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 80012d2:	f107 010c 	add.w	r1, r7, #12
 80012d6:	2300      	movs	r3, #0
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2300      	movs	r3, #0
 80012dc:	2203      	movs	r2, #3
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fcda 	bl	8000c98 <sx126x_hal_write>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	08004da4 	.word	0x08004da4

080012f4 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	2300      	movs	r3, #0
 8001304:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 8001306:	2395      	movs	r3, #149	; 0x95
 8001308:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	785b      	ldrb	r3, [r3, #1]
 8001314:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	789b      	ldrb	r3, [r3, #2]
 800131a:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 8001322:	f107 0108 	add.w	r1, r7, #8
 8001326:	2300      	movs	r3, #0
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2300      	movs	r3, #0
 800132c:	2205      	movs	r2, #5
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fcb2 	bl	8000c98 <sx126x_hal_write>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af02      	add	r7, sp, #8
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 800134a:	2300      	movs	r3, #0
 800134c:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 800134e:	2393      	movs	r3, #147	; 0x93
 8001350:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 8001356:	f107 010c 	add.w	r1, r7, #12
 800135a:	2300      	movs	r3, #0
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2300      	movs	r3, #0
 8001360:	2202      	movs	r2, #2
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fc98 	bl	8000c98 <sx126x_hal_write>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af02      	add	r7, sp, #8
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	461a      	mov	r2, r3
 8001380:	460b      	mov	r3, r1
 8001382:	817b      	strh	r3, [r7, #10]
 8001384:	4613      	mov	r3, r2
 8001386:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <sx126x_write_register+0x50>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	82bb      	strh	r3, [r7, #20]
 800138e:	2300      	movs	r3, #0
 8001390:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 8001392:	230d      	movs	r3, #13
 8001394:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 8001396:	897b      	ldrh	r3, [r7, #10]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	b29b      	uxth	r3, r3
 800139c:	b2db      	uxtb	r3, r3
 800139e:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 80013a0:	897b      	ldrh	r3, [r7, #10]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 80013a6:	7a7b      	ldrb	r3, [r7, #9]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	f107 0114 	add.w	r1, r7, #20
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2203      	movs	r2, #3
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f7ff fc6f 	bl	8000c98 <sx126x_hal_write>
 80013ba:	4603      	mov	r3, r0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	08004da4 	.word	0x08004da4

080013c8 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	461a      	mov	r2, r3
 80013d4:	460b      	mov	r3, r1
 80013d6:	817b      	strh	r3, [r7, #10]
 80013d8:	4613      	mov	r3, r2
 80013da:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 80013e0:	2303      	movs	r3, #3
 80013e2:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 80013e4:	231d      	movs	r3, #29
 80013e6:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 80013e8:	897b      	ldrh	r3, [r7, #10]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 80013f2:	897b      	ldrh	r3, [r7, #10]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 80013f8:	f107 0110 	add.w	r1, r7, #16
 80013fc:	7a7b      	ldrb	r3, [r7, #9]
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2204      	movs	r2, #4
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f7ff fc8b 	bl	8000d20 <sx126x_hal_read>
 800140a:	4603      	mov	r3, r0
 800140c:	75fb      	strb	r3, [r7, #23]

    return status;
 800140e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t buffer_offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af02      	add	r7, sp, #8
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	461a      	mov	r2, r3
 8001424:	460b      	mov	r3, r1
 8001426:	72fb      	strb	r3, [r7, #11]
 8001428:	4613      	mov	r3, r2
 800142a:	72bb      	strb	r3, [r7, #10]
    uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = { 0 };
 800142c:	2300      	movs	r3, #0
 800142e:	82bb      	strh	r3, [r7, #20]

    buf[0] = SX126X_WRITE_BUFFER;
 8001430:	230e      	movs	r3, #14
 8001432:	753b      	strb	r3, [r7, #20]

    buf[1] = buffer_offset;
 8001434:	7afb      	ldrb	r3, [r7, #11]
 8001436:	757b      	strb	r3, [r7, #21]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 8001438:	7abb      	ldrb	r3, [r7, #10]
 800143a:	b29b      	uxth	r3, r3
 800143c:	f107 0114 	add.w	r1, r7, #20
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2202      	movs	r2, #2
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff fc26 	bl	8000c98 <sx126x_hal_write>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b08a      	sub	sp, #40	; 0x28
 800145a:	af02      	add	r7, sp, #8
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	4608      	mov	r0, r1
 8001460:	4611      	mov	r1, r2
 8001462:	461a      	mov	r2, r3
 8001464:	4603      	mov	r3, r0
 8001466:	817b      	strh	r3, [r7, #10]
 8001468:	460b      	mov	r3, r1
 800146a:	813b      	strh	r3, [r7, #8]
 800146c:	4613      	mov	r3, r2
 800146e:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	f107 0318 	add.w	r3, r7, #24
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 800147e:	2308      	movs	r3, #8
 8001480:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 8001482:	897b      	ldrh	r3, [r7, #10]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	b29b      	uxth	r3, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800148c:	897b      	ldrh	r3, [r7, #10]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 8001492:	893b      	ldrh	r3, [r7, #8]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	b29b      	uxth	r3, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 800149c:	893b      	ldrh	r3, [r7, #8]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 80014b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 80014bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 80014c2:	f107 0114 	add.w	r1, r7, #20
 80014c6:	2300      	movs	r3, #0
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2300      	movs	r3, #0
 80014cc:	2209      	movs	r2, #9
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7ff fbe2 	bl	8000c98 <sx126x_hal_write>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <sx126x_get_irq_status>:

sx126x_status_t sx126x_get_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_IRQ_STATUS]             = { 0x00 }; //0x00 is no operational, its just so that theyre equal
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
    uint8_t         received_buf[sizeof( sx126x_irq_mask_t )+1] = { 0x00 };
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <sx126x_get_irq_status+0x60>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	81bb      	strh	r3, [r7, #12]
 80014f4:	2300      	movs	r3, #0
 80014f6:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                      = SX126X_STATUS_ERROR;
 80014f8:	2303      	movs	r3, #3
 80014fa:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_IRQ_STATUS;
 80014fc:	2312      	movs	r3, #18
 80014fe:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_IRQ_STATUS, received_buf,
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	f107 0110 	add.w	r1, r7, #16
 8001508:	2201      	movs	r2, #1
 800150a:	9200      	str	r2, [sp, #0]
 800150c:	2204      	movs	r2, #4
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fc06 	bl	8000d20 <sx126x_hal_read>
 8001514:	4603      	mov	r3, r0
 8001516:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_IRQ_STATUS );

    if( status == SX126X_STATUS_OK )
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10b      	bne.n	8001536 <sx126x_get_irq_status+0x56>
    {
        *irq = ( ( sx126x_irq_mask_t ) received_buf[1] << 8 ) | ( ( sx126x_irq_mask_t ) received_buf[2] << 0 );
 800151e:	7b7b      	ldrb	r3, [r7, #13]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21a      	sxth	r2, r3
 8001524:	7bbb      	ldrb	r3, [r7, #14]
 8001526:	b21b      	sxth	r3, r3
 8001528:	4313      	orrs	r3, r2
 800152a:	b21b      	sxth	r3, r3
 800152c:	b29a      	uxth	r2, r3
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	801a      	strh	r2, [r3, #0]
        status = received_buf[0]; //its the status
 8001532:	7b3b      	ldrb	r3, [r7, #12]
 8001534:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 8001536:	7dfb      	ldrb	r3, [r7, #23]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	08004da4 	.word	0x08004da4

08001544 <sx126x_clear_irq_status>:

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af02      	add	r7, sp, #8
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = { 0 };
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <sx126x_clear_irq_status+0x48>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	81bb      	strh	r3, [r7, #12]
 8001556:	2300      	movs	r3, #0
 8001558:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CLR_IRQ_STATUS;
 800155a:	2302      	movs	r3, #2
 800155c:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	b29b      	uxth	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 800156e:	f107 010c 	add.w	r1, r7, #12
 8001572:	2300      	movs	r3, #0
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2300      	movs	r3, #0
 8001578:	2203      	movs	r2, #3
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fb8c 	bl	8000c98 <sx126x_hal_write>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	08004da4 	.word	0x08004da4

08001590 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af02      	add	r7, sp, #8
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 800159c:	2300      	movs	r3, #0
 800159e:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 80015a0:	239d      	movs	r3, #157	; 0x9d
 80015a2:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 80015a8:	f107 010c 	add.w	r1, r7, #12
 80015ac:	2300      	movs	r3, #0
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2300      	movs	r3, #0
 80015b2:	2202      	movs	r2, #2
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fb6f 	bl	8000c98 <sx126x_hal_write>
 80015ba:	4603      	mov	r3, r0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	460b      	mov	r3, r1
 80015ce:	607a      	str	r2, [r7, #4]
 80015d0:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	2300      	movs	r3, #0
 80015d8:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 80015da:	2397      	movs	r3, #151	; 0x97
 80015dc:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 80015de:	7afb      	ldrb	r3, [r7, #11]
 80015e0:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	0c1b      	lsrs	r3, r3, #16
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 80015f8:	f107 0110 	add.w	r1, r7, #16
 80015fc:	2300      	movs	r3, #0
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	2205      	movs	r2, #5
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7ff fb47 	bl	8000c98 <sx126x_hal_write>
 800160a:	4603      	mov	r3, r0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800161e:	6838      	ldr	r0, [r7, #0]
 8001620:	f000 f92e 	bl	8001880 <sx126x_convert_freq_in_hz_to_pll_step>
 8001624:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 8001626:	68f9      	ldr	r1, [r7, #12]
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f805 	bl	8001638 <sx126x_set_rf_freq_in_pll_steps>
 800162e:	4603      	mov	r3, r0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af02      	add	r7, sp, #8
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	2300      	movs	r3, #0
 8001648:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 800164a:	2386      	movs	r3, #134	; 0x86
 800164c:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	0e1b      	lsrs	r3, r3, #24
 8001652:	b2db      	uxtb	r3, r3
 8001654:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	0c1b      	lsrs	r3, r3, #16
 800165a:	b2db      	uxtb	r3, r3
 800165c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	b2db      	uxtb	r3, r3
 8001664:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800166c:	f107 0108 	add.w	r1, r7, #8
 8001670:	2300      	movs	r3, #0
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2300      	movs	r3, #0
 8001676:	2205      	movs	r2, #5
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fb0d 	bl	8000c98 <sx126x_hal_write>
 800167e:	4603      	mov	r3, r0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af02      	add	r7, sp, #8
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 8001694:	2300      	movs	r3, #0
 8001696:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 8001698:	238a      	movs	r3, #138	; 0x8a
 800169a:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 80016a0:	f107 010c 	add.w	r1, r7, #12
 80016a4:	2300      	movs	r3, #0
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2300      	movs	r3, #0
 80016aa:	2202      	movs	r2, #2
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff faf3 	bl	8000c98 <sx126x_hal_write>
 80016b2:	4603      	mov	r3, r0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	70fb      	strb	r3, [r7, #3]
 80016c8:	4613      	mov	r3, r2
 80016ca:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <sx126x_set_tx_params+0x44>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	81bb      	strh	r3, [r7, #12]
 80016d2:	2300      	movs	r3, #0
 80016d4:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 80016d6:	238e      	movs	r3, #142	; 0x8e
 80016d8:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 80016de:	78bb      	ldrb	r3, [r7, #2]
 80016e0:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 80016e2:	f107 010c 	add.w	r1, r7, #12
 80016e6:	2300      	movs	r3, #0
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2300      	movs	r3, #0
 80016ec:	2203      	movs	r2, #3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fad2 	bl	8000c98 <sx126x_hal_write>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	08004da4 	.word	0x08004da4

08001704 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af02      	add	r7, sp, #8
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800170e:	2303      	movs	r3, #3
 8001710:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	2300      	movs	r3, #0
 8001718:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 800171a:	238b      	movs	r3, #139	; 0x8b
 800171c:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	785b      	ldrb	r3, [r3, #1]
 8001728:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	789b      	ldrb	r3, [r3, #2]
 800172e:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	78db      	ldrb	r3, [r3, #3]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800173c:	f107 0108 	add.w	r1, r7, #8
 8001740:	2300      	movs	r3, #0
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2300      	movs	r3, #0
 8001746:	2205      	movs	r2, #5
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff faa5 	bl	8000c98 <sx126x_hal_write>
 800174e:	4603      	mov	r3, r0
 8001750:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af02      	add	r7, sp, #8
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 8001766:	2303      	movs	r3, #3
 8001768:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	2100      	movs	r1, #0
 8001774:	460a      	mov	r2, r1
 8001776:	801a      	strh	r2, [r3, #0]
 8001778:	460a      	mov	r2, r1
 800177a:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 800177c:	238c      	movs	r3, #140	; 0x8c
 800177e:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	b29b      	uxth	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	789b      	ldrb	r3, [r3, #2]
 8001798:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	78db      	ldrb	r3, [r3, #3]
 800179e:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	791b      	ldrb	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <sx126x_set_lora_pkt_params+0x50>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <sx126x_set_lora_pkt_params+0x52>
 80017ac:	2300      	movs	r3, #0
 80017ae:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	795b      	ldrb	r3, [r3, #5]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <sx126x_set_lora_pkt_params+0x60>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <sx126x_set_lora_pkt_params+0x62>
 80017bc:	2300      	movs	r3, #0
 80017be:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 80017c0:	f107 0110 	add.w	r1, r7, #16
 80017c4:	2300      	movs	r3, #0
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2300      	movs	r3, #0
 80017ca:	2207      	movs	r2, #7
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fa63 	bl	8000c98 <sx126x_hal_write>
 80017d2:	4603      	mov	r3, r0
 80017d4:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d127      	bne.n	800182c <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 80017e0:	f107 020f 	add.w	r2, r7, #15
 80017e4:	2301      	movs	r3, #1
 80017e6:	f240 7136 	movw	r1, #1846	; 0x736
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fdec 	bl	80013c8 <sx126x_read_register>
 80017f0:	4603      	mov	r3, r0
 80017f2:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d118      	bne.n	800182c <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	795b      	ldrb	r3, [r3, #5]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	f023 0304 	bic.w	r3, r3, #4
 8001808:	b2db      	uxtb	r3, r3
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e004      	b.n	8001818 <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	b2db      	uxtb	r3, r3
 8001816:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 8001818:	f107 020f 	add.w	r2, r7, #15
 800181c:	2301      	movs	r3, #1
 800181e:	f240 7136 	movw	r1, #1846	; 0x736
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fda6 	bl	8001374 <sx126x_write_register>
 8001828:	4603      	mov	r3, r0
 800182a:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800182c:	7dfb      	ldrb	r3, [r7, #23]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af02      	add	r7, sp, #8
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
 8001844:	4613      	mov	r3, r2
 8001846:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <sx126x_set_buffer_base_address+0x44>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	81bb      	strh	r3, [r7, #12]
 800184e:	2300      	movs	r3, #0
 8001850:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 8001852:	238f      	movs	r3, #143	; 0x8f
 8001854:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 800185a:	78bb      	ldrb	r3, [r7, #2]
 800185c:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800185e:	f107 010c 	add.w	r1, r7, #12
 8001862:	2300      	movs	r3, #0
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	2300      	movs	r3, #0
 8001868:	2203      	movs	r2, #3
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fa14 	bl	8000c98 <sx126x_hal_write>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	08004da4 	.word	0x08004da4

08001880 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	0b1b      	lsrs	r3, r3, #12
 8001892:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f643 5209 	movw	r2, #15625	; 0x3d09
 800189a:	fb02 f303 	mul.w	r3, r2, r3
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	039b      	lsls	r3, r3, #14
 80018ac:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 80018b0:	3304      	adds	r3, #4
 80018b2:	4905      	ldr	r1, [pc, #20]	; (80018c8 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 80018b4:	fba1 1303 	umull	r1, r3, r1, r3
 80018b8:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 80018ba:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	431bde83 	.word	0x431bde83

080018cc <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	019b      	lsls	r3, r3, #6
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <_sbrk+0x5c>)
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <_sbrk+0x60>)
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <_sbrk+0x64>)
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <_sbrk+0x68>)
 8001904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	429a      	cmp	r2, r3
 8001912:	d207      	bcs.n	8001924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001914:	f002 fd7e 	bl	8004414 <__errno>
 8001918:	4603      	mov	r3, r0
 800191a:	220c      	movs	r2, #12
 800191c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	e009      	b.n	8001938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <_sbrk+0x64>)
 8001934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20030000 	.word	0x20030000
 8001944:	00000400 	.word	0x00000400
 8001948:	2000012c 	.word	0x2000012c
 800194c:	200002b0 	.word	0x200002b0

08001950 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <SystemInit+0x20>)
 8001956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <SystemInit+0x20>)
 800195c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800197a:	490e      	ldr	r1, [pc, #56]	; (80019b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800197c:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001990:	4c0b      	ldr	r4, [pc, #44]	; (80019c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800199e:	f7ff ffd7 	bl	8001950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019a2:	f002 fd3d 	bl	8004420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a6:	f7fe fdef 	bl	8000588 <main>
  bx  lr    
 80019aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80019b8:	08004e04 	.word	0x08004e04
  ldr r2, =_sbss
 80019bc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80019c0:	200002ac 	.word	0x200002ac

080019c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c4:	e7fe      	b.n	80019c4 <ADC_IRQHandler>
	...

080019c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <HAL_Init+0x40>)
 80019d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <HAL_Init+0x40>)
 80019de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <HAL_Init+0x40>)
 80019ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f000 f94f 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 f808 	bl	8001a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019fc:	f7ff f802 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023c00 	.word	0x40023c00

08001a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_InitTick+0x54>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_InitTick+0x58>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f967 	bl	8001cfe <HAL_SYSTICK_Config>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00e      	b.n	8001a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d80a      	bhi.n	8001a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a40:	2200      	movs	r2, #0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f000 f92f 	bl	8001caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a4c:	4a06      	ldr	r2, [pc, #24]	; (8001a68 <HAL_InitTick+0x5c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	2000001c 	.word	0x2000001c
 8001a64:	20000024 	.word	0x20000024
 8001a68:	20000020 	.word	0x20000020

08001a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000024 	.word	0x20000024
 8001a90:	20000298 	.word	0x20000298

08001a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000298 	.word	0x20000298

08001aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff ffee 	bl	8001a94 <HAL_GetTick>
 8001ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d005      	beq.n	8001ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_Delay+0x44>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ad2:	bf00      	nop
 8001ad4:	f7ff ffde 	bl	8001a94 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d8f7      	bhi.n	8001ad4 <HAL_Delay+0x28>
  {
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000024 	.word	0x20000024

08001af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b26:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <__NVIC_GetPriorityGrouping+0x18>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0307 	and.w	r3, r3, #7
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0b      	blt.n	8001b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <__NVIC_EnableIRQ+0x38>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2001      	movs	r0, #1
 8001b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000e100 	.word	0xe000e100

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	; (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ff8e 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff29 	bl	8001af4 <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff3e 	bl	8001b3c <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff8e 	bl	8001be8 <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5d 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff31 	bl	8001b58 <__NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffa2 	bl	8001c50 <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	e177      	b.n	8002024 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d34:	2201      	movs	r2, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	f040 8166 	bne.w	800201e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d005      	beq.n	8001d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d130      	bne.n	8001dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da0:	2201      	movs	r2, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 0201 	and.w	r2, r3, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d017      	beq.n	8001e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d123      	bne.n	8001e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	08da      	lsrs	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3208      	adds	r2, #8
 8001e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	08da      	lsrs	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3208      	adds	r2, #8
 8001e56:	69b9      	ldr	r1, [r7, #24]
 8001e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0203 	and.w	r2, r3, #3
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80c0 	beq.w	800201e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b66      	ldr	r3, [pc, #408]	; (800203c <HAL_GPIO_Init+0x324>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a65      	ldr	r2, [pc, #404]	; (800203c <HAL_GPIO_Init+0x324>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_GPIO_Init+0x324>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eba:	4a61      	ldr	r2, [pc, #388]	; (8002040 <HAL_GPIO_Init+0x328>)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a58      	ldr	r2, [pc, #352]	; (8002044 <HAL_GPIO_Init+0x32c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d037      	beq.n	8001f56 <HAL_GPIO_Init+0x23e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a57      	ldr	r2, [pc, #348]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d031      	beq.n	8001f52 <HAL_GPIO_Init+0x23a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a56      	ldr	r2, [pc, #344]	; (800204c <HAL_GPIO_Init+0x334>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d02b      	beq.n	8001f4e <HAL_GPIO_Init+0x236>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a55      	ldr	r2, [pc, #340]	; (8002050 <HAL_GPIO_Init+0x338>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d025      	beq.n	8001f4a <HAL_GPIO_Init+0x232>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a54      	ldr	r2, [pc, #336]	; (8002054 <HAL_GPIO_Init+0x33c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01f      	beq.n	8001f46 <HAL_GPIO_Init+0x22e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a53      	ldr	r2, [pc, #332]	; (8002058 <HAL_GPIO_Init+0x340>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d019      	beq.n	8001f42 <HAL_GPIO_Init+0x22a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a52      	ldr	r2, [pc, #328]	; (800205c <HAL_GPIO_Init+0x344>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a51      	ldr	r2, [pc, #324]	; (8002060 <HAL_GPIO_Init+0x348>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00d      	beq.n	8001f3a <HAL_GPIO_Init+0x222>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a50      	ldr	r2, [pc, #320]	; (8002064 <HAL_GPIO_Init+0x34c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <HAL_GPIO_Init+0x21e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4f      	ldr	r2, [pc, #316]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_GPIO_Init+0x21a>
 8001f2e:	2309      	movs	r3, #9
 8001f30:	e012      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f32:	230a      	movs	r3, #10
 8001f34:	e010      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f36:	2308      	movs	r3, #8
 8001f38:	e00e      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	e00c      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e00a      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f42:	2305      	movs	r3, #5
 8001f44:	e008      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f56:	2300      	movs	r3, #0
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4093      	lsls	r3, r2
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f68:	4935      	ldr	r1, [pc, #212]	; (8002040 <HAL_GPIO_Init+0x328>)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_GPIO_Init+0x354>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f9a:	4a34      	ldr	r2, [pc, #208]	; (800206c <HAL_GPIO_Init+0x354>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fa0:	4b32      	ldr	r3, [pc, #200]	; (800206c <HAL_GPIO_Init+0x354>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc4:	4a29      	ldr	r2, [pc, #164]	; (800206c <HAL_GPIO_Init+0x354>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fca:	4b28      	ldr	r3, [pc, #160]	; (800206c <HAL_GPIO_Init+0x354>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fee:	4a1f      	ldr	r2, [pc, #124]	; (800206c <HAL_GPIO_Init+0x354>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_GPIO_Init+0x354>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_GPIO_Init+0x354>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b0f      	cmp	r3, #15
 8002028:	f67f ae84 	bls.w	8001d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40013800 	.word	0x40013800
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400
 800204c:	40020800 	.word	0x40020800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40021000 	.word	0x40021000
 8002058:	40021400 	.word	0x40021400
 800205c:	40021800 	.word	0x40021800
 8002060:	40021c00 	.word	0x40021c00
 8002064:	40022000 	.word	0x40022000
 8002068:	40022400 	.word	0x40022400
 800206c:	40013c00 	.word	0x40013c00

08002070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e001      	b.n	8002092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
 80020ac:	4613      	mov	r3, r2
 80020ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020b0:	787b      	ldrb	r3, [r7, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b6:	887a      	ldrh	r2, [r7, #2]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020bc:	e003      	b.n	80020c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020be:	887b      	ldrh	r3, [r7, #2]
 80020c0:	041a      	lsls	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	619a      	str	r2, [r3, #24]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e264      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d075      	beq.n	80021de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020f2:	4ba3      	ldr	r3, [pc, #652]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d00c      	beq.n	8002118 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fe:	4ba0      	ldr	r3, [pc, #640]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002106:	2b08      	cmp	r3, #8
 8002108:	d112      	bne.n	8002130 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800210a:	4b9d      	ldr	r3, [pc, #628]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002116:	d10b      	bne.n	8002130 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002118:	4b99      	ldr	r3, [pc, #612]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d05b      	beq.n	80021dc <HAL_RCC_OscConfig+0x108>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d157      	bne.n	80021dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e23f      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002138:	d106      	bne.n	8002148 <HAL_RCC_OscConfig+0x74>
 800213a:	4b91      	ldr	r3, [pc, #580]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a90      	ldr	r2, [pc, #576]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e01d      	b.n	8002184 <HAL_RCC_OscConfig+0xb0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x98>
 8002152:	4b8b      	ldr	r3, [pc, #556]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a8a      	ldr	r2, [pc, #552]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b88      	ldr	r3, [pc, #544]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a87      	ldr	r2, [pc, #540]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e00b      	b.n	8002184 <HAL_RCC_OscConfig+0xb0>
 800216c:	4b84      	ldr	r3, [pc, #528]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a83      	ldr	r2, [pc, #524]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b81      	ldr	r3, [pc, #516]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a80      	ldr	r2, [pc, #512]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7ff fc82 	bl	8001a94 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff fc7e 	bl	8001a94 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e204      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	4b76      	ldr	r3, [pc, #472]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0xc0>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7ff fc6e 	bl	8001a94 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021bc:	f7ff fc6a 	bl	8001a94 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e1f0      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	4b6c      	ldr	r3, [pc, #432]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0xe8>
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d063      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ea:	4b65      	ldr	r3, [pc, #404]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021f6:	4b62      	ldr	r3, [pc, #392]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d11c      	bne.n	800223c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002202:	4b5f      	ldr	r3, [pc, #380]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d116      	bne.n	800223c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220e:	4b5c      	ldr	r3, [pc, #368]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_RCC_OscConfig+0x152>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d001      	beq.n	8002226 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e1c4      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002226:	4b56      	ldr	r3, [pc, #344]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4952      	ldr	r1, [pc, #328]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	e03a      	b.n	80022b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d020      	beq.n	8002286 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002244:	4b4f      	ldr	r3, [pc, #316]	; (8002384 <HAL_RCC_OscConfig+0x2b0>)
 8002246:	2201      	movs	r2, #1
 8002248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224a:	f7ff fc23 	bl	8001a94 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002252:	f7ff fc1f 	bl	8001a94 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e1a5      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	4b46      	ldr	r3, [pc, #280]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002270:	4b43      	ldr	r3, [pc, #268]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4940      	ldr	r1, [pc, #256]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]
 8002284:	e015      	b.n	80022b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002286:	4b3f      	ldr	r3, [pc, #252]	; (8002384 <HAL_RCC_OscConfig+0x2b0>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7ff fc02 	bl	8001a94 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002294:	f7ff fbfe 	bl	8001a94 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e184      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d030      	beq.n	8002320 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d016      	beq.n	80022f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c6:	4b30      	ldr	r3, [pc, #192]	; (8002388 <HAL_RCC_OscConfig+0x2b4>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022cc:	f7ff fbe2 	bl	8001a94 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d4:	f7ff fbde 	bl	8001a94 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e164      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	4b26      	ldr	r3, [pc, #152]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x200>
 80022f2:	e015      	b.n	8002320 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f4:	4b24      	ldr	r3, [pc, #144]	; (8002388 <HAL_RCC_OscConfig+0x2b4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fa:	f7ff fbcb 	bl	8001a94 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002302:	f7ff fbc7 	bl	8001a94 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e14d      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f0      	bne.n	8002302 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80a0 	beq.w	800246e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002332:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10f      	bne.n	800235e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234c:	6413      	str	r3, [r2, #64]	; 0x40
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235a:	2301      	movs	r3, #1
 800235c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_RCC_OscConfig+0x2b8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d121      	bne.n	80023ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_RCC_OscConfig+0x2b8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <HAL_RCC_OscConfig+0x2b8>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002376:	f7ff fb8d 	bl	8001a94 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	e011      	b.n	80023a2 <HAL_RCC_OscConfig+0x2ce>
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	42470000 	.word	0x42470000
 8002388:	42470e80 	.word	0x42470e80
 800238c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002390:	f7ff fb80 	bl	8001a94 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e106      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a2:	4b85      	ldr	r3, [pc, #532]	; (80025b8 <HAL_RCC_OscConfig+0x4e4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d106      	bne.n	80023c4 <HAL_RCC_OscConfig+0x2f0>
 80023b6:	4b81      	ldr	r3, [pc, #516]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	4a80      	ldr	r2, [pc, #512]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6713      	str	r3, [r2, #112]	; 0x70
 80023c2:	e01c      	b.n	80023fe <HAL_RCC_OscConfig+0x32a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d10c      	bne.n	80023e6 <HAL_RCC_OscConfig+0x312>
 80023cc:	4b7b      	ldr	r3, [pc, #492]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	4a7a      	ldr	r2, [pc, #488]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 80023d2:	f043 0304 	orr.w	r3, r3, #4
 80023d6:	6713      	str	r3, [r2, #112]	; 0x70
 80023d8:	4b78      	ldr	r3, [pc, #480]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	4a77      	ldr	r2, [pc, #476]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6713      	str	r3, [r2, #112]	; 0x70
 80023e4:	e00b      	b.n	80023fe <HAL_RCC_OscConfig+0x32a>
 80023e6:	4b75      	ldr	r3, [pc, #468]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ea:	4a74      	ldr	r2, [pc, #464]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6713      	str	r3, [r2, #112]	; 0x70
 80023f2:	4b72      	ldr	r3, [pc, #456]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f6:	4a71      	ldr	r2, [pc, #452]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 80023f8:	f023 0304 	bic.w	r3, r3, #4
 80023fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d015      	beq.n	8002432 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002406:	f7ff fb45 	bl	8001a94 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240c:	e00a      	b.n	8002424 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7ff fb41 	bl	8001a94 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	; 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e0c5      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	4b65      	ldr	r3, [pc, #404]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 8002426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ee      	beq.n	800240e <HAL_RCC_OscConfig+0x33a>
 8002430:	e014      	b.n	800245c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002432:	f7ff fb2f 	bl	8001a94 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7ff fb2b 	bl	8001a94 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	; 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e0af      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002450:	4b5a      	ldr	r3, [pc, #360]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1ee      	bne.n	800243a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800245c:	7dfb      	ldrb	r3, [r7, #23]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d105      	bne.n	800246e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002462:	4b56      	ldr	r3, [pc, #344]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	4a55      	ldr	r2, [pc, #340]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 8002468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 809b 	beq.w	80025ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002478:	4b50      	ldr	r3, [pc, #320]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	2b08      	cmp	r3, #8
 8002482:	d05c      	beq.n	800253e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d141      	bne.n	8002510 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248c:	4b4c      	ldr	r3, [pc, #304]	; (80025c0 <HAL_RCC_OscConfig+0x4ec>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7ff faff 	bl	8001a94 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249a:	f7ff fafb 	bl	8001a94 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e081      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ac:	4b43      	ldr	r3, [pc, #268]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69da      	ldr	r2, [r3, #28]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	019b      	lsls	r3, r3, #6
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	085b      	lsrs	r3, r3, #1
 80024d0:	3b01      	subs	r3, #1
 80024d2:	041b      	lsls	r3, r3, #16
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024da:	061b      	lsls	r3, r3, #24
 80024dc:	4937      	ldr	r1, [pc, #220]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e2:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <HAL_RCC_OscConfig+0x4ec>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7ff fad4 	bl	8001a94 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f0:	f7ff fad0 	bl	8001a94 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e056      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002502:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x41c>
 800250e:	e04e      	b.n	80025ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002510:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <HAL_RCC_OscConfig+0x4ec>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff fabd 	bl	8001a94 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251e:	f7ff fab9 	bl	8001a94 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e03f      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002530:	4b22      	ldr	r3, [pc, #136]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f0      	bne.n	800251e <HAL_RCC_OscConfig+0x44a>
 800253c:	e037      	b.n	80025ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e032      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800254a:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_RCC_OscConfig+0x4e8>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d028      	beq.n	80025aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d121      	bne.n	80025aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002570:	429a      	cmp	r2, r3
 8002572:	d11a      	bne.n	80025aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800257a:	4013      	ands	r3, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002580:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002582:	4293      	cmp	r3, r2
 8002584:	d111      	bne.n	80025aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	085b      	lsrs	r3, r3, #1
 8002592:	3b01      	subs	r3, #1
 8002594:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d107      	bne.n	80025aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40007000 	.word	0x40007000
 80025bc:	40023800 	.word	0x40023800
 80025c0:	42470060 	.word	0x42470060

080025c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0cc      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025d8:	4b68      	ldr	r3, [pc, #416]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d90c      	bls.n	8002600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b65      	ldr	r3, [pc, #404]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b63      	ldr	r3, [pc, #396]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0b8      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002618:	4b59      	ldr	r3, [pc, #356]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a58      	ldr	r2, [pc, #352]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002622:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002630:	4b53      	ldr	r3, [pc, #332]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a52      	ldr	r2, [pc, #328]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800263a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4b50      	ldr	r3, [pc, #320]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	494d      	ldr	r1, [pc, #308]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d044      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b47      	ldr	r3, [pc, #284]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d119      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e07f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d003      	beq.n	8002682 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267e:	2b03      	cmp	r3, #3
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e06f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	4b3b      	ldr	r3, [pc, #236]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e067      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a2:	4b37      	ldr	r3, [pc, #220]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 0203 	bic.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4934      	ldr	r1, [pc, #208]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b4:	f7ff f9ee 	bl	8001a94 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026bc:	f7ff f9ea 	bl	8001a94 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e04f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 020c 	and.w	r2, r3, #12
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d1eb      	bne.n	80026bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d20c      	bcs.n	800270c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b22      	ldr	r3, [pc, #136]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e032      	b.n	8002772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4916      	ldr	r1, [pc, #88]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	490e      	ldr	r1, [pc, #56]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800274a:	f000 f821 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 800274e:	4602      	mov	r2, r0
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	490a      	ldr	r1, [pc, #40]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	5ccb      	ldrb	r3, [r1, r3]
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	4a09      	ldr	r2, [pc, #36]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCC_ClockConfig+0x1c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff f94e 	bl	8001a0c <HAL_InitTick>

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023c00 	.word	0x40023c00
 8002780:	40023800 	.word	0x40023800
 8002784:	08004da8 	.word	0x08004da8
 8002788:	2000001c 	.word	0x2000001c
 800278c:	20000020 	.word	0x20000020

08002790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002790:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002794:	b084      	sub	sp, #16
 8002796:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	2300      	movs	r3, #0
 80027a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027a8:	4b67      	ldr	r3, [pc, #412]	; (8002948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d00d      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x40>
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	f200 80bd 	bhi.w	8002934 <HAL_RCC_GetSysClockFreq+0x1a4>
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x34>
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d003      	beq.n	80027ca <HAL_RCC_GetSysClockFreq+0x3a>
 80027c2:	e0b7      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027c4:	4b61      	ldr	r3, [pc, #388]	; (800294c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027c6:	60bb      	str	r3, [r7, #8]
       break;
 80027c8:	e0b7      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ca:	4b60      	ldr	r3, [pc, #384]	; (800294c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027cc:	60bb      	str	r3, [r7, #8]
      break;
 80027ce:	e0b4      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d0:	4b5d      	ldr	r3, [pc, #372]	; (8002948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027da:	4b5b      	ldr	r3, [pc, #364]	; (8002948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d04d      	beq.n	8002882 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e6:	4b58      	ldr	r3, [pc, #352]	; (8002948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	099b      	lsrs	r3, r3, #6
 80027ec:	461a      	mov	r2, r3
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027f6:	f04f 0100 	mov.w	r1, #0
 80027fa:	ea02 0800 	and.w	r8, r2, r0
 80027fe:	ea03 0901 	and.w	r9, r3, r1
 8002802:	4640      	mov	r0, r8
 8002804:	4649      	mov	r1, r9
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	014b      	lsls	r3, r1, #5
 8002810:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002814:	0142      	lsls	r2, r0, #5
 8002816:	4610      	mov	r0, r2
 8002818:	4619      	mov	r1, r3
 800281a:	ebb0 0008 	subs.w	r0, r0, r8
 800281e:	eb61 0109 	sbc.w	r1, r1, r9
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	018b      	lsls	r3, r1, #6
 800282c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002830:	0182      	lsls	r2, r0, #6
 8002832:	1a12      	subs	r2, r2, r0
 8002834:	eb63 0301 	sbc.w	r3, r3, r1
 8002838:	f04f 0000 	mov.w	r0, #0
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	00d9      	lsls	r1, r3, #3
 8002842:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002846:	00d0      	lsls	r0, r2, #3
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	eb12 0208 	adds.w	r2, r2, r8
 8002850:	eb43 0309 	adc.w	r3, r3, r9
 8002854:	f04f 0000 	mov.w	r0, #0
 8002858:	f04f 0100 	mov.w	r1, #0
 800285c:	0299      	lsls	r1, r3, #10
 800285e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002862:	0290      	lsls	r0, r2, #10
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	461a      	mov	r2, r3
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	f7fd fd0c 	bl	8000290 <__aeabi_uldivmod>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4613      	mov	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e04a      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002882:	4b31      	ldr	r3, [pc, #196]	; (8002948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	099b      	lsrs	r3, r3, #6
 8002888:	461a      	mov	r2, r3
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002892:	f04f 0100 	mov.w	r1, #0
 8002896:	ea02 0400 	and.w	r4, r2, r0
 800289a:	ea03 0501 	and.w	r5, r3, r1
 800289e:	4620      	mov	r0, r4
 80028a0:	4629      	mov	r1, r5
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	014b      	lsls	r3, r1, #5
 80028ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028b0:	0142      	lsls	r2, r0, #5
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	1b00      	subs	r0, r0, r4
 80028b8:	eb61 0105 	sbc.w	r1, r1, r5
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	018b      	lsls	r3, r1, #6
 80028c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028ca:	0182      	lsls	r2, r0, #6
 80028cc:	1a12      	subs	r2, r2, r0
 80028ce:	eb63 0301 	sbc.w	r3, r3, r1
 80028d2:	f04f 0000 	mov.w	r0, #0
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	00d9      	lsls	r1, r3, #3
 80028dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028e0:	00d0      	lsls	r0, r2, #3
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	1912      	adds	r2, r2, r4
 80028e8:	eb45 0303 	adc.w	r3, r5, r3
 80028ec:	f04f 0000 	mov.w	r0, #0
 80028f0:	f04f 0100 	mov.w	r1, #0
 80028f4:	0299      	lsls	r1, r3, #10
 80028f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028fa:	0290      	lsls	r0, r2, #10
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	461a      	mov	r2, r3
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	f7fd fcc0 	bl	8000290 <__aeabi_uldivmod>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4613      	mov	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	3301      	adds	r3, #1
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	60bb      	str	r3, [r7, #8]
      break;
 8002932:	e002      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002936:	60bb      	str	r3, [r7, #8]
      break;
 8002938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800293a:	68bb      	ldr	r3, [r7, #8]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	00f42400 	.word	0x00f42400

08002950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <HAL_RCC_GetHCLKFreq+0x14>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	2000001c 	.word	0x2000001c

08002968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800296c:	f7ff fff0 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	0a9b      	lsrs	r3, r3, #10
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4903      	ldr	r1, [pc, #12]	; (800298c <HAL_RCC_GetPCLK1Freq+0x24>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40023800 	.word	0x40023800
 800298c:	08004db8 	.word	0x08004db8

08002990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002994:	f7ff ffdc 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	0b5b      	lsrs	r3, r3, #13
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4903      	ldr	r1, [pc, #12]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	08004db8 	.word	0x08004db8

080029b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e07b      	b.n	8002ac2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d108      	bne.n	80029e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029da:	d009      	beq.n	80029f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	61da      	str	r2, [r3, #28]
 80029e2:	e005      	b.n	80029f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe f822 	bl	8000a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a74:	ea42 0103 	orr.w	r1, r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	0c1b      	lsrs	r3, r3, #16
 8002a8e:	f003 0104 	and.w	r1, r3, #4
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	f003 0210 	and.w	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	69da      	ldr	r2, [r3, #28]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b088      	sub	sp, #32
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_SPI_Transmit+0x22>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e126      	b.n	8002d3a <HAL_SPI_Transmit+0x270>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002af4:	f7fe ffce 	bl	8001a94 <HAL_GetTick>
 8002af8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d002      	beq.n	8002b10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b0e:	e10b      	b.n	8002d28 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_SPI_Transmit+0x52>
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b20:	e102      	b.n	8002d28 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2203      	movs	r2, #3
 8002b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	88fa      	ldrh	r2, [r7, #6]
 8002b3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	88fa      	ldrh	r2, [r7, #6]
 8002b40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b68:	d10f      	bne.n	8002b8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b94:	2b40      	cmp	r3, #64	; 0x40
 8002b96:	d007      	beq.n	8002ba8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ba6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bb0:	d14b      	bne.n	8002c4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_SPI_Transmit+0xf6>
 8002bba:	8afb      	ldrh	r3, [r7, #22]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d13e      	bne.n	8002c3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	881a      	ldrh	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	1c9a      	adds	r2, r3, #2
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002be4:	e02b      	b.n	8002c3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d112      	bne.n	8002c1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	881a      	ldrh	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	1c9a      	adds	r2, r3, #2
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c18:	e011      	b.n	8002c3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c1a:	f7fe ff3b 	bl	8001a94 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d803      	bhi.n	8002c32 <HAL_SPI_Transmit+0x168>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d102      	bne.n	8002c38 <HAL_SPI_Transmit+0x16e>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c3c:	e074      	b.n	8002d28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1ce      	bne.n	8002be6 <HAL_SPI_Transmit+0x11c>
 8002c48:	e04c      	b.n	8002ce4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_SPI_Transmit+0x18e>
 8002c52:	8afb      	ldrh	r3, [r7, #22]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d140      	bne.n	8002cda <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	330c      	adds	r3, #12
 8002c62:	7812      	ldrb	r2, [r2, #0]
 8002c64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c7e:	e02c      	b.n	8002cda <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d113      	bne.n	8002cb6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	330c      	adds	r3, #12
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cb4:	e011      	b.n	8002cda <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cb6:	f7fe feed 	bl	8001a94 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d803      	bhi.n	8002cce <HAL_SPI_Transmit+0x204>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d102      	bne.n	8002cd4 <HAL_SPI_Transmit+0x20a>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cd8:	e026      	b.n	8002d28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1cd      	bne.n	8002c80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	6839      	ldr	r1, [r7, #0]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fa55 	bl	8003198 <SPI_EndRxTxTransaction>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10a      	bne.n	8002d18 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	77fb      	strb	r3, [r7, #31]
 8002d24:	e000      	b.n	8002d28 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002d26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d38:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b08c      	sub	sp, #48	; 0x30
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d50:	2301      	movs	r3, #1
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_SPI_TransmitReceive+0x26>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e18a      	b.n	800307e <HAL_SPI_TransmitReceive+0x33c>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d70:	f7fe fe90 	bl	8001a94 <HAL_GetTick>
 8002d74:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d86:	887b      	ldrh	r3, [r7, #2]
 8002d88:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d00f      	beq.n	8002db2 <HAL_SPI_TransmitReceive+0x70>
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d98:	d107      	bne.n	8002daa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d103      	bne.n	8002daa <HAL_SPI_TransmitReceive+0x68>
 8002da2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d003      	beq.n	8002db2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
 8002dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002db0:	e15b      	b.n	800306a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_SPI_TransmitReceive+0x82>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_SPI_TransmitReceive+0x82>
 8002dbe:	887b      	ldrh	r3, [r7, #2]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d103      	bne.n	8002dcc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002dca:	e14e      	b.n	800306a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d003      	beq.n	8002de0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2205      	movs	r2, #5
 8002ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	887a      	ldrh	r2, [r7, #2]
 8002df6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	887a      	ldrh	r2, [r7, #2]
 8002e02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b40      	cmp	r3, #64	; 0x40
 8002e22:	d007      	beq.n	8002e34 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e3c:	d178      	bne.n	8002f30 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_SPI_TransmitReceive+0x10a>
 8002e46:	8b7b      	ldrh	r3, [r7, #26]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d166      	bne.n	8002f1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	881a      	ldrh	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	1c9a      	adds	r2, r3, #2
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e70:	e053      	b.n	8002f1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d11b      	bne.n	8002eb8 <HAL_SPI_TransmitReceive+0x176>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <HAL_SPI_TransmitReceive+0x176>
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d113      	bne.n	8002eb8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	881a      	ldrh	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	1c9a      	adds	r2, r3, #2
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d119      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x1b8>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d014      	beq.n	8002efa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	b292      	uxth	r2, r2
 8002edc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	1c9a      	adds	r2, r3, #2
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002efa:	f7fe fdcb 	bl	8001a94 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d807      	bhi.n	8002f1a <HAL_SPI_TransmitReceive+0x1d8>
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d003      	beq.n	8002f1a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f18:	e0a7      	b.n	800306a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1a6      	bne.n	8002e72 <HAL_SPI_TransmitReceive+0x130>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1a1      	bne.n	8002e72 <HAL_SPI_TransmitReceive+0x130>
 8002f2e:	e07c      	b.n	800302a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_SPI_TransmitReceive+0x1fc>
 8002f38:	8b7b      	ldrh	r3, [r7, #26]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d16b      	bne.n	8003016 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	330c      	adds	r3, #12
 8002f48:	7812      	ldrb	r2, [r2, #0]
 8002f4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f64:	e057      	b.n	8003016 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d11c      	bne.n	8002fae <HAL_SPI_TransmitReceive+0x26c>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d017      	beq.n	8002fae <HAL_SPI_TransmitReceive+0x26c>
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d114      	bne.n	8002fae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	7812      	ldrb	r2, [r2, #0]
 8002f90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d119      	bne.n	8002ff0 <HAL_SPI_TransmitReceive+0x2ae>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d014      	beq.n	8002ff0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fec:	2301      	movs	r3, #1
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ff0:	f7fe fd50 	bl	8001a94 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d803      	bhi.n	8003008 <HAL_SPI_TransmitReceive+0x2c6>
 8003000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003006:	d102      	bne.n	800300e <HAL_SPI_TransmitReceive+0x2cc>
 8003008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003014:	e029      	b.n	800306a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1a2      	bne.n	8002f66 <HAL_SPI_TransmitReceive+0x224>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d19d      	bne.n	8002f66 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800302a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f8b2 	bl	8003198 <SPI_EndRxTxTransaction>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d006      	beq.n	8003048 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003046:	e010      	b.n	800306a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	e000      	b.n	800306a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003068:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800307a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800307e:	4618      	mov	r0, r3
 8003080:	3730      	adds	r7, #48	; 0x30
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003098:	f7fe fcfc 	bl	8001a94 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	4413      	add	r3, r2
 80030a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030a8:	f7fe fcf4 	bl	8001a94 <HAL_GetTick>
 80030ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030ae:	4b39      	ldr	r3, [pc, #228]	; (8003194 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	015b      	lsls	r3, r3, #5
 80030b4:	0d1b      	lsrs	r3, r3, #20
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	fb02 f303 	mul.w	r3, r2, r3
 80030bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030be:	e054      	b.n	800316a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d050      	beq.n	800316a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030c8:	f7fe fce4 	bl	8001a94 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d902      	bls.n	80030de <SPI_WaitFlagStateUntilTimeout+0x56>
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d13d      	bne.n	800315a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030f6:	d111      	bne.n	800311c <SPI_WaitFlagStateUntilTimeout+0x94>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003100:	d004      	beq.n	800310c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310a:	d107      	bne.n	800311c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800311a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003124:	d10f      	bne.n	8003146 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003144:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e017      	b.n	800318a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3b01      	subs	r3, #1
 8003168:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4013      	ands	r3, r2
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	429a      	cmp	r2, r3
 8003178:	bf0c      	ite	eq
 800317a:	2301      	moveq	r3, #1
 800317c:	2300      	movne	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	429a      	cmp	r2, r3
 8003186:	d19b      	bne.n	80030c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	2000001c 	.word	0x2000001c

08003198 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80031a4:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <SPI_EndRxTxTransaction+0x7c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1b      	ldr	r2, [pc, #108]	; (8003218 <SPI_EndRxTxTransaction+0x80>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	0d5b      	lsrs	r3, r3, #21
 80031b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031b4:	fb02 f303 	mul.w	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031c2:	d112      	bne.n	80031ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2200      	movs	r2, #0
 80031cc:	2180      	movs	r1, #128	; 0x80
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f7ff ff5a 	bl	8003088 <SPI_WaitFlagStateUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d016      	beq.n	8003208 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	f043 0220 	orr.w	r2, r3, #32
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e00f      	b.n	800320a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003200:	2b80      	cmp	r3, #128	; 0x80
 8003202:	d0f2      	beq.n	80031ea <SPI_EndRxTxTransaction+0x52>
 8003204:	e000      	b.n	8003208 <SPI_EndRxTxTransaction+0x70>
        break;
 8003206:	bf00      	nop
  }

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	2000001c 	.word	0x2000001c
 8003218:	165e9f81 	.word	0x165e9f81

0800321c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e041      	b.n	80032b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd fc4e 	bl	8000ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	4619      	mov	r1, r3
 800325a:	4610      	mov	r0, r2
 800325c:	f000 fb4a 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e041      	b.n	8003350 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f839 	bl	8003358 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	4619      	mov	r1, r3
 80032f8:	4610      	mov	r0, r2
 80032fa:	f000 fafb 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d122      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b02      	cmp	r3, #2
 800338e:	d11b      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0202 	mvn.w	r2, #2
 8003398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa81 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fa73 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fa84 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d122      	bne.n	800341c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d11b      	bne.n	800341c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0204 	mvn.w	r2, #4
 80033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2202      	movs	r2, #2
 80033f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa57 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fa49 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fa5a 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b08      	cmp	r3, #8
 8003428:	d122      	bne.n	8003470 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b08      	cmp	r3, #8
 8003436:	d11b      	bne.n	8003470 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0208 	mvn.w	r2, #8
 8003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2204      	movs	r2, #4
 8003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa2d 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fa1f 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fa30 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b10      	cmp	r3, #16
 800347c:	d122      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b10      	cmp	r3, #16
 800348a:	d11b      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0210 	mvn.w	r2, #16
 8003494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2208      	movs	r2, #8
 800349a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fa03 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f9f5 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fa06 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d10e      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d107      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0201 	mvn.w	r2, #1
 80034e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f9cf 	bl	800388e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b80      	cmp	r3, #128	; 0x80
 80034fc:	d10e      	bne.n	800351c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	2b80      	cmp	r3, #128	; 0x80
 800350a:	d107      	bne.n	800351c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fd5c 	bl	8003fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	d10e      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d107      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9cb 	bl	80038de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b20      	cmp	r3, #32
 8003554:	d10e      	bne.n	8003574 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b20      	cmp	r3, #32
 8003562:	d107      	bne.n	8003574 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0220 	mvn.w	r2, #32
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fd26 	bl	8003fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003596:	2302      	movs	r3, #2
 8003598:	e0ae      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b0c      	cmp	r3, #12
 80035a6:	f200 809f 	bhi.w	80036e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035aa:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	080035e5 	.word	0x080035e5
 80035b4:	080036e9 	.word	0x080036e9
 80035b8:	080036e9 	.word	0x080036e9
 80035bc:	080036e9 	.word	0x080036e9
 80035c0:	08003625 	.word	0x08003625
 80035c4:	080036e9 	.word	0x080036e9
 80035c8:	080036e9 	.word	0x080036e9
 80035cc:	080036e9 	.word	0x080036e9
 80035d0:	08003667 	.word	0x08003667
 80035d4:	080036e9 	.word	0x080036e9
 80035d8:	080036e9 	.word	0x080036e9
 80035dc:	080036e9 	.word	0x080036e9
 80035e0:	080036a7 	.word	0x080036a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fa22 	bl	8003a34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0208 	orr.w	r2, r2, #8
 80035fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0204 	bic.w	r2, r2, #4
 800360e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6999      	ldr	r1, [r3, #24]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	619a      	str	r2, [r3, #24]
      break;
 8003622:	e064      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fa72 	bl	8003b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800363e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6999      	ldr	r1, [r3, #24]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	021a      	lsls	r2, r3, #8
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	619a      	str	r2, [r3, #24]
      break;
 8003664:	e043      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68b9      	ldr	r1, [r7, #8]
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fac7 	bl	8003c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69da      	ldr	r2, [r3, #28]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0208 	orr.w	r2, r2, #8
 8003680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0204 	bic.w	r2, r2, #4
 8003690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69d9      	ldr	r1, [r3, #28]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	61da      	str	r2, [r3, #28]
      break;
 80036a4:	e023      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fb1b 	bl	8003ce8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69d9      	ldr	r1, [r3, #28]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	021a      	lsls	r2, r3, #8
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	61da      	str	r2, [r3, #28]
      break;
 80036e6:	e002      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	75fb      	strb	r3, [r7, #23]
      break;
 80036ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_TIM_ConfigClockSource+0x1c>
 8003718:	2302      	movs	r3, #2
 800371a:	e0b4      	b.n	8003886 <HAL_TIM_ConfigClockSource+0x186>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800373a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003754:	d03e      	beq.n	80037d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375a:	f200 8087 	bhi.w	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800375e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003762:	f000 8086 	beq.w	8003872 <HAL_TIM_ConfigClockSource+0x172>
 8003766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376a:	d87f      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b70      	cmp	r3, #112	; 0x70
 800376e:	d01a      	beq.n	80037a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003770:	2b70      	cmp	r3, #112	; 0x70
 8003772:	d87b      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 8003774:	2b60      	cmp	r3, #96	; 0x60
 8003776:	d050      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x11a>
 8003778:	2b60      	cmp	r3, #96	; 0x60
 800377a:	d877      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800377c:	2b50      	cmp	r3, #80	; 0x50
 800377e:	d03c      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0xfa>
 8003780:	2b50      	cmp	r3, #80	; 0x50
 8003782:	d873      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 8003784:	2b40      	cmp	r3, #64	; 0x40
 8003786:	d058      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x13a>
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	d86f      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800378c:	2b30      	cmp	r3, #48	; 0x30
 800378e:	d064      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 8003790:	2b30      	cmp	r3, #48	; 0x30
 8003792:	d86b      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 8003794:	2b20      	cmp	r3, #32
 8003796:	d060      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 8003798:	2b20      	cmp	r3, #32
 800379a:	d867      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d05c      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d05a      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 80037a4:	e062      	b.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6899      	ldr	r1, [r3, #8]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f000 fb67 	bl	8003e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	609a      	str	r2, [r3, #8]
      break;
 80037d2:	e04f      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	6899      	ldr	r1, [r3, #8]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f000 fb50 	bl	8003e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037f6:	609a      	str	r2, [r3, #8]
      break;
 80037f8:	e03c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6859      	ldr	r1, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	461a      	mov	r2, r3
 8003808:	f000 fac4 	bl	8003d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2150      	movs	r1, #80	; 0x50
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fb1d 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 8003818:	e02c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	461a      	mov	r2, r3
 8003828:	f000 fae3 	bl	8003df2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2160      	movs	r1, #96	; 0x60
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fb0d 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 8003838:	e01c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6859      	ldr	r1, [r3, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	461a      	mov	r2, r3
 8003848:	f000 faa4 	bl	8003d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2140      	movs	r1, #64	; 0x40
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fafd 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 8003858:	e00c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f000 faf4 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 800386a:	e003      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
      break;
 8003870:	e000      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a40      	ldr	r2, [pc, #256]	; (8003a08 <TIM_Base_SetConfig+0x114>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003912:	d00f      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a3d      	ldr	r2, [pc, #244]	; (8003a0c <TIM_Base_SetConfig+0x118>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00b      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a3c      	ldr	r2, [pc, #240]	; (8003a10 <TIM_Base_SetConfig+0x11c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d007      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a3b      	ldr	r2, [pc, #236]	; (8003a14 <TIM_Base_SetConfig+0x120>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a3a      	ldr	r2, [pc, #232]	; (8003a18 <TIM_Base_SetConfig+0x124>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d108      	bne.n	8003946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a2f      	ldr	r2, [pc, #188]	; (8003a08 <TIM_Base_SetConfig+0x114>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d02b      	beq.n	80039a6 <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003954:	d027      	beq.n	80039a6 <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a2c      	ldr	r2, [pc, #176]	; (8003a0c <TIM_Base_SetConfig+0x118>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d023      	beq.n	80039a6 <TIM_Base_SetConfig+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a2b      	ldr	r2, [pc, #172]	; (8003a10 <TIM_Base_SetConfig+0x11c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01f      	beq.n	80039a6 <TIM_Base_SetConfig+0xb2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a2a      	ldr	r2, [pc, #168]	; (8003a14 <TIM_Base_SetConfig+0x120>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01b      	beq.n	80039a6 <TIM_Base_SetConfig+0xb2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a29      	ldr	r2, [pc, #164]	; (8003a18 <TIM_Base_SetConfig+0x124>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d017      	beq.n	80039a6 <TIM_Base_SetConfig+0xb2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a28      	ldr	r2, [pc, #160]	; (8003a1c <TIM_Base_SetConfig+0x128>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a27      	ldr	r2, [pc, #156]	; (8003a20 <TIM_Base_SetConfig+0x12c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00f      	beq.n	80039a6 <TIM_Base_SetConfig+0xb2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a26      	ldr	r2, [pc, #152]	; (8003a24 <TIM_Base_SetConfig+0x130>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00b      	beq.n	80039a6 <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a25      	ldr	r2, [pc, #148]	; (8003a28 <TIM_Base_SetConfig+0x134>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d007      	beq.n	80039a6 <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a24      	ldr	r2, [pc, #144]	; (8003a2c <TIM_Base_SetConfig+0x138>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d003      	beq.n	80039a6 <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a23      	ldr	r2, [pc, #140]	; (8003a30 <TIM_Base_SetConfig+0x13c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d108      	bne.n	80039b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <TIM_Base_SetConfig+0x114>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_Base_SetConfig+0xf8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a0c      	ldr	r2, [pc, #48]	; (8003a18 <TIM_Base_SetConfig+0x124>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d103      	bne.n	80039f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	615a      	str	r2, [r3, #20]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40010000 	.word	0x40010000
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40000800 	.word	0x40000800
 8003a14:	40000c00 	.word	0x40000c00
 8003a18:	40010400 	.word	0x40010400
 8003a1c:	40014000 	.word	0x40014000
 8003a20:	40014400 	.word	0x40014400
 8003a24:	40014800 	.word	0x40014800
 8003a28:	40001800 	.word	0x40001800
 8003a2c:	40001c00 	.word	0x40001c00
 8003a30:	40002000 	.word	0x40002000

08003a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f023 0201 	bic.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f023 0302 	bic.w	r3, r3, #2
 8003a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a20      	ldr	r2, [pc, #128]	; (8003b0c <TIM_OC1_SetConfig+0xd8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_OC1_SetConfig+0x64>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a1f      	ldr	r2, [pc, #124]	; (8003b10 <TIM_OC1_SetConfig+0xdc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d10c      	bne.n	8003ab2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f023 0308 	bic.w	r3, r3, #8
 8003a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f023 0304 	bic.w	r3, r3, #4
 8003ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <TIM_OC1_SetConfig+0xd8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d003      	beq.n	8003ac2 <TIM_OC1_SetConfig+0x8e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <TIM_OC1_SetConfig+0xdc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d111      	bne.n	8003ae6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	621a      	str	r2, [r3, #32]
}
 8003b00:	bf00      	nop
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40010400 	.word	0x40010400

08003b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f023 0210 	bic.w	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 0320 	bic.w	r3, r3, #32
 8003b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a22      	ldr	r2, [pc, #136]	; (8003bf8 <TIM_OC2_SetConfig+0xe4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <TIM_OC2_SetConfig+0x68>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a21      	ldr	r2, [pc, #132]	; (8003bfc <TIM_OC2_SetConfig+0xe8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d10d      	bne.n	8003b98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a17      	ldr	r2, [pc, #92]	; (8003bf8 <TIM_OC2_SetConfig+0xe4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d003      	beq.n	8003ba8 <TIM_OC2_SetConfig+0x94>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a16      	ldr	r2, [pc, #88]	; (8003bfc <TIM_OC2_SetConfig+0xe8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d113      	bne.n	8003bd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40010000 	.word	0x40010000
 8003bfc:	40010400 	.word	0x40010400

08003c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0303 	bic.w	r3, r3, #3
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a21      	ldr	r2, [pc, #132]	; (8003ce0 <TIM_OC3_SetConfig+0xe0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d003      	beq.n	8003c66 <TIM_OC3_SetConfig+0x66>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a20      	ldr	r2, [pc, #128]	; (8003ce4 <TIM_OC3_SetConfig+0xe4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d10d      	bne.n	8003c82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a16      	ldr	r2, [pc, #88]	; (8003ce0 <TIM_OC3_SetConfig+0xe0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d003      	beq.n	8003c92 <TIM_OC3_SetConfig+0x92>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a15      	ldr	r2, [pc, #84]	; (8003ce4 <TIM_OC3_SetConfig+0xe4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d113      	bne.n	8003cba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	621a      	str	r2, [r3, #32]
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	40010400 	.word	0x40010400

08003ce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	021b      	lsls	r3, r3, #8
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	031b      	lsls	r3, r3, #12
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <TIM_OC4_SetConfig+0xa4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_OC4_SetConfig+0x68>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a11      	ldr	r2, [pc, #68]	; (8003d90 <TIM_OC4_SetConfig+0xa8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d109      	bne.n	8003d64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	019b      	lsls	r3, r3, #6
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40010000 	.word	0x40010000
 8003d90:	40010400 	.word	0x40010400

08003d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	f023 0201 	bic.w	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f023 030a 	bic.w	r3, r3, #10
 8003dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b087      	sub	sp, #28
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	f023 0210 	bic.w	r2, r3, #16
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	031b      	lsls	r3, r3, #12
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	621a      	str	r2, [r3, #32]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f043 0307 	orr.w	r3, r3, #7
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	609a      	str	r2, [r3, #8]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	021a      	lsls	r2, r3, #8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	609a      	str	r2, [r3, #8]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e05a      	b.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a21      	ldr	r2, [pc, #132]	; (8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d022      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2c:	d01d      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1d      	ldr	r2, [pc, #116]	; (8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d018      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1b      	ldr	r2, [pc, #108]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d013      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1a      	ldr	r2, [pc, #104]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00e      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d009      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a17      	ldr	r2, [pc, #92]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d004      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d10c      	bne.n	8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800
 8003fb0:	40000c00 	.word	0x40000c00
 8003fb4:	40010400 	.word	0x40010400
 8003fb8:	40014000 	.word	0x40014000
 8003fbc:	40001800 	.word	0x40001800

08003fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e03f      	b.n	800407a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fc fdc6 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2224      	movs	r2, #36	; 0x24
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800402a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f829 	bl	8004084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004050:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004060:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004088:	b09f      	sub	sp, #124	; 0x7c
 800408a:	af00      	add	r7, sp, #0
 800408c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800408e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409a:	68d9      	ldr	r1, [r3, #12]
 800409c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	ea40 0301 	orr.w	r3, r0, r1
 80040a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80040be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040c8:	f021 010c 	bic.w	r1, r1, #12
 80040cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040d2:	430b      	orrs	r3, r1
 80040d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e2:	6999      	ldr	r1, [r3, #24]
 80040e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	ea40 0301 	orr.w	r3, r0, r1
 80040ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4bc5      	ldr	r3, [pc, #788]	; (8004408 <UART_SetConfig+0x384>)
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d004      	beq.n	8004102 <UART_SetConfig+0x7e>
 80040f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4bc3      	ldr	r3, [pc, #780]	; (800440c <UART_SetConfig+0x388>)
 80040fe:	429a      	cmp	r2, r3
 8004100:	d103      	bne.n	800410a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004102:	f7fe fc45 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 8004106:	6778      	str	r0, [r7, #116]	; 0x74
 8004108:	e002      	b.n	8004110 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800410a:	f7fe fc2d 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 800410e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004118:	f040 80b6 	bne.w	8004288 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800411c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800411e:	461c      	mov	r4, r3
 8004120:	f04f 0500 	mov.w	r5, #0
 8004124:	4622      	mov	r2, r4
 8004126:	462b      	mov	r3, r5
 8004128:	1891      	adds	r1, r2, r2
 800412a:	6439      	str	r1, [r7, #64]	; 0x40
 800412c:	415b      	adcs	r3, r3
 800412e:	647b      	str	r3, [r7, #68]	; 0x44
 8004130:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004134:	1912      	adds	r2, r2, r4
 8004136:	eb45 0303 	adc.w	r3, r5, r3
 800413a:	f04f 0000 	mov.w	r0, #0
 800413e:	f04f 0100 	mov.w	r1, #0
 8004142:	00d9      	lsls	r1, r3, #3
 8004144:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004148:	00d0      	lsls	r0, r2, #3
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	1911      	adds	r1, r2, r4
 8004150:	6639      	str	r1, [r7, #96]	; 0x60
 8004152:	416b      	adcs	r3, r5
 8004154:	667b      	str	r3, [r7, #100]	; 0x64
 8004156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	461a      	mov	r2, r3
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	1891      	adds	r1, r2, r2
 8004162:	63b9      	str	r1, [r7, #56]	; 0x38
 8004164:	415b      	adcs	r3, r3
 8004166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004168:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800416c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004170:	f7fc f88e 	bl	8000290 <__aeabi_uldivmod>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4ba5      	ldr	r3, [pc, #660]	; (8004410 <UART_SetConfig+0x38c>)
 800417a:	fba3 2302 	umull	r2, r3, r3, r2
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	011e      	lsls	r6, r3, #4
 8004182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004184:	461c      	mov	r4, r3
 8004186:	f04f 0500 	mov.w	r5, #0
 800418a:	4622      	mov	r2, r4
 800418c:	462b      	mov	r3, r5
 800418e:	1891      	adds	r1, r2, r2
 8004190:	6339      	str	r1, [r7, #48]	; 0x30
 8004192:	415b      	adcs	r3, r3
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
 8004196:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800419a:	1912      	adds	r2, r2, r4
 800419c:	eb45 0303 	adc.w	r3, r5, r3
 80041a0:	f04f 0000 	mov.w	r0, #0
 80041a4:	f04f 0100 	mov.w	r1, #0
 80041a8:	00d9      	lsls	r1, r3, #3
 80041aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041ae:	00d0      	lsls	r0, r2, #3
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	1911      	adds	r1, r2, r4
 80041b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80041b8:	416b      	adcs	r3, r5
 80041ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	461a      	mov	r2, r3
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	1891      	adds	r1, r2, r2
 80041c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80041ca:	415b      	adcs	r3, r3
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80041d6:	f7fc f85b 	bl	8000290 <__aeabi_uldivmod>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4b8c      	ldr	r3, [pc, #560]	; (8004410 <UART_SetConfig+0x38c>)
 80041e0:	fba3 1302 	umull	r1, r3, r3, r2
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	2164      	movs	r1, #100	; 0x64
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	3332      	adds	r3, #50	; 0x32
 80041f2:	4a87      	ldr	r2, [pc, #540]	; (8004410 <UART_SetConfig+0x38c>)
 80041f4:	fba2 2303 	umull	r2, r3, r2, r3
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004200:	441e      	add	r6, r3
 8004202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004204:	4618      	mov	r0, r3
 8004206:	f04f 0100 	mov.w	r1, #0
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	1894      	adds	r4, r2, r2
 8004210:	623c      	str	r4, [r7, #32]
 8004212:	415b      	adcs	r3, r3
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
 8004216:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800421a:	1812      	adds	r2, r2, r0
 800421c:	eb41 0303 	adc.w	r3, r1, r3
 8004220:	f04f 0400 	mov.w	r4, #0
 8004224:	f04f 0500 	mov.w	r5, #0
 8004228:	00dd      	lsls	r5, r3, #3
 800422a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800422e:	00d4      	lsls	r4, r2, #3
 8004230:	4622      	mov	r2, r4
 8004232:	462b      	mov	r3, r5
 8004234:	1814      	adds	r4, r2, r0
 8004236:	653c      	str	r4, [r7, #80]	; 0x50
 8004238:	414b      	adcs	r3, r1
 800423a:	657b      	str	r3, [r7, #84]	; 0x54
 800423c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	461a      	mov	r2, r3
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	1891      	adds	r1, r2, r2
 8004248:	61b9      	str	r1, [r7, #24]
 800424a:	415b      	adcs	r3, r3
 800424c:	61fb      	str	r3, [r7, #28]
 800424e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004252:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004256:	f7fc f81b 	bl	8000290 <__aeabi_uldivmod>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4b6c      	ldr	r3, [pc, #432]	; (8004410 <UART_SetConfig+0x38c>)
 8004260:	fba3 1302 	umull	r1, r3, r3, r2
 8004264:	095b      	lsrs	r3, r3, #5
 8004266:	2164      	movs	r1, #100	; 0x64
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	3332      	adds	r3, #50	; 0x32
 8004272:	4a67      	ldr	r2, [pc, #412]	; (8004410 <UART_SetConfig+0x38c>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	f003 0207 	and.w	r2, r3, #7
 800427e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4432      	add	r2, r6
 8004284:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004286:	e0b9      	b.n	80043fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800428a:	461c      	mov	r4, r3
 800428c:	f04f 0500 	mov.w	r5, #0
 8004290:	4622      	mov	r2, r4
 8004292:	462b      	mov	r3, r5
 8004294:	1891      	adds	r1, r2, r2
 8004296:	6139      	str	r1, [r7, #16]
 8004298:	415b      	adcs	r3, r3
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042a0:	1912      	adds	r2, r2, r4
 80042a2:	eb45 0303 	adc.w	r3, r5, r3
 80042a6:	f04f 0000 	mov.w	r0, #0
 80042aa:	f04f 0100 	mov.w	r1, #0
 80042ae:	00d9      	lsls	r1, r3, #3
 80042b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042b4:	00d0      	lsls	r0, r2, #3
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	eb12 0804 	adds.w	r8, r2, r4
 80042be:	eb43 0905 	adc.w	r9, r3, r5
 80042c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f04f 0100 	mov.w	r1, #0
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	008b      	lsls	r3, r1, #2
 80042d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042da:	0082      	lsls	r2, r0, #2
 80042dc:	4640      	mov	r0, r8
 80042de:	4649      	mov	r1, r9
 80042e0:	f7fb ffd6 	bl	8000290 <__aeabi_uldivmod>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4b49      	ldr	r3, [pc, #292]	; (8004410 <UART_SetConfig+0x38c>)
 80042ea:	fba3 2302 	umull	r2, r3, r3, r2
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	011e      	lsls	r6, r3, #4
 80042f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f4:	4618      	mov	r0, r3
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	1894      	adds	r4, r2, r2
 8004300:	60bc      	str	r4, [r7, #8]
 8004302:	415b      	adcs	r3, r3
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800430a:	1812      	adds	r2, r2, r0
 800430c:	eb41 0303 	adc.w	r3, r1, r3
 8004310:	f04f 0400 	mov.w	r4, #0
 8004314:	f04f 0500 	mov.w	r5, #0
 8004318:	00dd      	lsls	r5, r3, #3
 800431a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800431e:	00d4      	lsls	r4, r2, #3
 8004320:	4622      	mov	r2, r4
 8004322:	462b      	mov	r3, r5
 8004324:	1814      	adds	r4, r2, r0
 8004326:	64bc      	str	r4, [r7, #72]	; 0x48
 8004328:	414b      	adcs	r3, r1
 800432a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800432c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4618      	mov	r0, r3
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	008b      	lsls	r3, r1, #2
 8004340:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004344:	0082      	lsls	r2, r0, #2
 8004346:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800434a:	f7fb ffa1 	bl	8000290 <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4b2f      	ldr	r3, [pc, #188]	; (8004410 <UART_SetConfig+0x38c>)
 8004354:	fba3 1302 	umull	r1, r3, r3, r2
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	2164      	movs	r1, #100	; 0x64
 800435c:	fb01 f303 	mul.w	r3, r1, r3
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	3332      	adds	r3, #50	; 0x32
 8004366:	4a2a      	ldr	r2, [pc, #168]	; (8004410 <UART_SetConfig+0x38c>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004372:	441e      	add	r6, r3
 8004374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004376:	4618      	mov	r0, r3
 8004378:	f04f 0100 	mov.w	r1, #0
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	1894      	adds	r4, r2, r2
 8004382:	603c      	str	r4, [r7, #0]
 8004384:	415b      	adcs	r3, r3
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800438c:	1812      	adds	r2, r2, r0
 800438e:	eb41 0303 	adc.w	r3, r1, r3
 8004392:	f04f 0400 	mov.w	r4, #0
 8004396:	f04f 0500 	mov.w	r5, #0
 800439a:	00dd      	lsls	r5, r3, #3
 800439c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043a0:	00d4      	lsls	r4, r2, #3
 80043a2:	4622      	mov	r2, r4
 80043a4:	462b      	mov	r3, r5
 80043a6:	eb12 0a00 	adds.w	sl, r2, r0
 80043aa:	eb43 0b01 	adc.w	fp, r3, r1
 80043ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f04f 0100 	mov.w	r1, #0
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	008b      	lsls	r3, r1, #2
 80043c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043c6:	0082      	lsls	r2, r0, #2
 80043c8:	4650      	mov	r0, sl
 80043ca:	4659      	mov	r1, fp
 80043cc:	f7fb ff60 	bl	8000290 <__aeabi_uldivmod>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <UART_SetConfig+0x38c>)
 80043d6:	fba3 1302 	umull	r1, r3, r3, r2
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	2164      	movs	r1, #100	; 0x64
 80043de:	fb01 f303 	mul.w	r3, r1, r3
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	3332      	adds	r3, #50	; 0x32
 80043e8:	4a09      	ldr	r2, [pc, #36]	; (8004410 <UART_SetConfig+0x38c>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	f003 020f 	and.w	r2, r3, #15
 80043f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4432      	add	r2, r6
 80043fa:	609a      	str	r2, [r3, #8]
}
 80043fc:	bf00      	nop
 80043fe:	377c      	adds	r7, #124	; 0x7c
 8004400:	46bd      	mov	sp, r7
 8004402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004406:	bf00      	nop
 8004408:	40011000 	.word	0x40011000
 800440c:	40011400 	.word	0x40011400
 8004410:	51eb851f 	.word	0x51eb851f

08004414 <__errno>:
 8004414:	4b01      	ldr	r3, [pc, #4]	; (800441c <__errno+0x8>)
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000028 	.word	0x20000028

08004420 <__libc_init_array>:
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	4d0d      	ldr	r5, [pc, #52]	; (8004458 <__libc_init_array+0x38>)
 8004424:	4c0d      	ldr	r4, [pc, #52]	; (800445c <__libc_init_array+0x3c>)
 8004426:	1b64      	subs	r4, r4, r5
 8004428:	10a4      	asrs	r4, r4, #2
 800442a:	2600      	movs	r6, #0
 800442c:	42a6      	cmp	r6, r4
 800442e:	d109      	bne.n	8004444 <__libc_init_array+0x24>
 8004430:	4d0b      	ldr	r5, [pc, #44]	; (8004460 <__libc_init_array+0x40>)
 8004432:	4c0c      	ldr	r4, [pc, #48]	; (8004464 <__libc_init_array+0x44>)
 8004434:	f000 fc5e 	bl	8004cf4 <_init>
 8004438:	1b64      	subs	r4, r4, r5
 800443a:	10a4      	asrs	r4, r4, #2
 800443c:	2600      	movs	r6, #0
 800443e:	42a6      	cmp	r6, r4
 8004440:	d105      	bne.n	800444e <__libc_init_array+0x2e>
 8004442:	bd70      	pop	{r4, r5, r6, pc}
 8004444:	f855 3b04 	ldr.w	r3, [r5], #4
 8004448:	4798      	blx	r3
 800444a:	3601      	adds	r6, #1
 800444c:	e7ee      	b.n	800442c <__libc_init_array+0xc>
 800444e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004452:	4798      	blx	r3
 8004454:	3601      	adds	r6, #1
 8004456:	e7f2      	b.n	800443e <__libc_init_array+0x1e>
 8004458:	08004dfc 	.word	0x08004dfc
 800445c:	08004dfc 	.word	0x08004dfc
 8004460:	08004dfc 	.word	0x08004dfc
 8004464:	08004e00 	.word	0x08004e00

08004468 <malloc>:
 8004468:	4b02      	ldr	r3, [pc, #8]	; (8004474 <malloc+0xc>)
 800446a:	4601      	mov	r1, r0
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	f000 b871 	b.w	8004554 <_malloc_r>
 8004472:	bf00      	nop
 8004474:	20000028 	.word	0x20000028

08004478 <free>:
 8004478:	4b02      	ldr	r3, [pc, #8]	; (8004484 <free+0xc>)
 800447a:	4601      	mov	r1, r0
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	f000 b819 	b.w	80044b4 <_free_r>
 8004482:	bf00      	nop
 8004484:	20000028 	.word	0x20000028

08004488 <memcpy>:
 8004488:	440a      	add	r2, r1
 800448a:	4291      	cmp	r1, r2
 800448c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004490:	d100      	bne.n	8004494 <memcpy+0xc>
 8004492:	4770      	bx	lr
 8004494:	b510      	push	{r4, lr}
 8004496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800449a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800449e:	4291      	cmp	r1, r2
 80044a0:	d1f9      	bne.n	8004496 <memcpy+0xe>
 80044a2:	bd10      	pop	{r4, pc}

080044a4 <memset>:
 80044a4:	4402      	add	r2, r0
 80044a6:	4603      	mov	r3, r0
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d100      	bne.n	80044ae <memset+0xa>
 80044ac:	4770      	bx	lr
 80044ae:	f803 1b01 	strb.w	r1, [r3], #1
 80044b2:	e7f9      	b.n	80044a8 <memset+0x4>

080044b4 <_free_r>:
 80044b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044b6:	2900      	cmp	r1, #0
 80044b8:	d048      	beq.n	800454c <_free_r+0x98>
 80044ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044be:	9001      	str	r0, [sp, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f1a1 0404 	sub.w	r4, r1, #4
 80044c6:	bfb8      	it	lt
 80044c8:	18e4      	addlt	r4, r4, r3
 80044ca:	f000 f8cd 	bl	8004668 <__malloc_lock>
 80044ce:	4a20      	ldr	r2, [pc, #128]	; (8004550 <_free_r+0x9c>)
 80044d0:	9801      	ldr	r0, [sp, #4]
 80044d2:	6813      	ldr	r3, [r2, #0]
 80044d4:	4615      	mov	r5, r2
 80044d6:	b933      	cbnz	r3, 80044e6 <_free_r+0x32>
 80044d8:	6063      	str	r3, [r4, #4]
 80044da:	6014      	str	r4, [r2, #0]
 80044dc:	b003      	add	sp, #12
 80044de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044e2:	f000 b8c7 	b.w	8004674 <__malloc_unlock>
 80044e6:	42a3      	cmp	r3, r4
 80044e8:	d90b      	bls.n	8004502 <_free_r+0x4e>
 80044ea:	6821      	ldr	r1, [r4, #0]
 80044ec:	1862      	adds	r2, r4, r1
 80044ee:	4293      	cmp	r3, r2
 80044f0:	bf04      	itt	eq
 80044f2:	681a      	ldreq	r2, [r3, #0]
 80044f4:	685b      	ldreq	r3, [r3, #4]
 80044f6:	6063      	str	r3, [r4, #4]
 80044f8:	bf04      	itt	eq
 80044fa:	1852      	addeq	r2, r2, r1
 80044fc:	6022      	streq	r2, [r4, #0]
 80044fe:	602c      	str	r4, [r5, #0]
 8004500:	e7ec      	b.n	80044dc <_free_r+0x28>
 8004502:	461a      	mov	r2, r3
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	b10b      	cbz	r3, 800450c <_free_r+0x58>
 8004508:	42a3      	cmp	r3, r4
 800450a:	d9fa      	bls.n	8004502 <_free_r+0x4e>
 800450c:	6811      	ldr	r1, [r2, #0]
 800450e:	1855      	adds	r5, r2, r1
 8004510:	42a5      	cmp	r5, r4
 8004512:	d10b      	bne.n	800452c <_free_r+0x78>
 8004514:	6824      	ldr	r4, [r4, #0]
 8004516:	4421      	add	r1, r4
 8004518:	1854      	adds	r4, r2, r1
 800451a:	42a3      	cmp	r3, r4
 800451c:	6011      	str	r1, [r2, #0]
 800451e:	d1dd      	bne.n	80044dc <_free_r+0x28>
 8004520:	681c      	ldr	r4, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	6053      	str	r3, [r2, #4]
 8004526:	4421      	add	r1, r4
 8004528:	6011      	str	r1, [r2, #0]
 800452a:	e7d7      	b.n	80044dc <_free_r+0x28>
 800452c:	d902      	bls.n	8004534 <_free_r+0x80>
 800452e:	230c      	movs	r3, #12
 8004530:	6003      	str	r3, [r0, #0]
 8004532:	e7d3      	b.n	80044dc <_free_r+0x28>
 8004534:	6825      	ldr	r5, [r4, #0]
 8004536:	1961      	adds	r1, r4, r5
 8004538:	428b      	cmp	r3, r1
 800453a:	bf04      	itt	eq
 800453c:	6819      	ldreq	r1, [r3, #0]
 800453e:	685b      	ldreq	r3, [r3, #4]
 8004540:	6063      	str	r3, [r4, #4]
 8004542:	bf04      	itt	eq
 8004544:	1949      	addeq	r1, r1, r5
 8004546:	6021      	streq	r1, [r4, #0]
 8004548:	6054      	str	r4, [r2, #4]
 800454a:	e7c7      	b.n	80044dc <_free_r+0x28>
 800454c:	b003      	add	sp, #12
 800454e:	bd30      	pop	{r4, r5, pc}
 8004550:	20000130 	.word	0x20000130

08004554 <_malloc_r>:
 8004554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004556:	1ccd      	adds	r5, r1, #3
 8004558:	f025 0503 	bic.w	r5, r5, #3
 800455c:	3508      	adds	r5, #8
 800455e:	2d0c      	cmp	r5, #12
 8004560:	bf38      	it	cc
 8004562:	250c      	movcc	r5, #12
 8004564:	2d00      	cmp	r5, #0
 8004566:	4606      	mov	r6, r0
 8004568:	db01      	blt.n	800456e <_malloc_r+0x1a>
 800456a:	42a9      	cmp	r1, r5
 800456c:	d903      	bls.n	8004576 <_malloc_r+0x22>
 800456e:	230c      	movs	r3, #12
 8004570:	6033      	str	r3, [r6, #0]
 8004572:	2000      	movs	r0, #0
 8004574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004576:	f000 f877 	bl	8004668 <__malloc_lock>
 800457a:	4921      	ldr	r1, [pc, #132]	; (8004600 <_malloc_r+0xac>)
 800457c:	680a      	ldr	r2, [r1, #0]
 800457e:	4614      	mov	r4, r2
 8004580:	b99c      	cbnz	r4, 80045aa <_malloc_r+0x56>
 8004582:	4f20      	ldr	r7, [pc, #128]	; (8004604 <_malloc_r+0xb0>)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	b923      	cbnz	r3, 8004592 <_malloc_r+0x3e>
 8004588:	4621      	mov	r1, r4
 800458a:	4630      	mov	r0, r6
 800458c:	f000 f83c 	bl	8004608 <_sbrk_r>
 8004590:	6038      	str	r0, [r7, #0]
 8004592:	4629      	mov	r1, r5
 8004594:	4630      	mov	r0, r6
 8004596:	f000 f837 	bl	8004608 <_sbrk_r>
 800459a:	1c43      	adds	r3, r0, #1
 800459c:	d123      	bne.n	80045e6 <_malloc_r+0x92>
 800459e:	230c      	movs	r3, #12
 80045a0:	6033      	str	r3, [r6, #0]
 80045a2:	4630      	mov	r0, r6
 80045a4:	f000 f866 	bl	8004674 <__malloc_unlock>
 80045a8:	e7e3      	b.n	8004572 <_malloc_r+0x1e>
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	1b5b      	subs	r3, r3, r5
 80045ae:	d417      	bmi.n	80045e0 <_malloc_r+0x8c>
 80045b0:	2b0b      	cmp	r3, #11
 80045b2:	d903      	bls.n	80045bc <_malloc_r+0x68>
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	441c      	add	r4, r3
 80045b8:	6025      	str	r5, [r4, #0]
 80045ba:	e004      	b.n	80045c6 <_malloc_r+0x72>
 80045bc:	6863      	ldr	r3, [r4, #4]
 80045be:	42a2      	cmp	r2, r4
 80045c0:	bf0c      	ite	eq
 80045c2:	600b      	streq	r3, [r1, #0]
 80045c4:	6053      	strne	r3, [r2, #4]
 80045c6:	4630      	mov	r0, r6
 80045c8:	f000 f854 	bl	8004674 <__malloc_unlock>
 80045cc:	f104 000b 	add.w	r0, r4, #11
 80045d0:	1d23      	adds	r3, r4, #4
 80045d2:	f020 0007 	bic.w	r0, r0, #7
 80045d6:	1ac2      	subs	r2, r0, r3
 80045d8:	d0cc      	beq.n	8004574 <_malloc_r+0x20>
 80045da:	1a1b      	subs	r3, r3, r0
 80045dc:	50a3      	str	r3, [r4, r2]
 80045de:	e7c9      	b.n	8004574 <_malloc_r+0x20>
 80045e0:	4622      	mov	r2, r4
 80045e2:	6864      	ldr	r4, [r4, #4]
 80045e4:	e7cc      	b.n	8004580 <_malloc_r+0x2c>
 80045e6:	1cc4      	adds	r4, r0, #3
 80045e8:	f024 0403 	bic.w	r4, r4, #3
 80045ec:	42a0      	cmp	r0, r4
 80045ee:	d0e3      	beq.n	80045b8 <_malloc_r+0x64>
 80045f0:	1a21      	subs	r1, r4, r0
 80045f2:	4630      	mov	r0, r6
 80045f4:	f000 f808 	bl	8004608 <_sbrk_r>
 80045f8:	3001      	adds	r0, #1
 80045fa:	d1dd      	bne.n	80045b8 <_malloc_r+0x64>
 80045fc:	e7cf      	b.n	800459e <_malloc_r+0x4a>
 80045fe:	bf00      	nop
 8004600:	20000130 	.word	0x20000130
 8004604:	20000134 	.word	0x20000134

08004608 <_sbrk_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	4d06      	ldr	r5, [pc, #24]	; (8004624 <_sbrk_r+0x1c>)
 800460c:	2300      	movs	r3, #0
 800460e:	4604      	mov	r4, r0
 8004610:	4608      	mov	r0, r1
 8004612:	602b      	str	r3, [r5, #0]
 8004614:	f7fd f966 	bl	80018e4 <_sbrk>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_sbrk_r+0x1a>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_sbrk_r+0x1a>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	2000029c 	.word	0x2000029c

08004628 <siprintf>:
 8004628:	b40e      	push	{r1, r2, r3}
 800462a:	b500      	push	{lr}
 800462c:	b09c      	sub	sp, #112	; 0x70
 800462e:	ab1d      	add	r3, sp, #116	; 0x74
 8004630:	9002      	str	r0, [sp, #8]
 8004632:	9006      	str	r0, [sp, #24]
 8004634:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004638:	4809      	ldr	r0, [pc, #36]	; (8004660 <siprintf+0x38>)
 800463a:	9107      	str	r1, [sp, #28]
 800463c:	9104      	str	r1, [sp, #16]
 800463e:	4909      	ldr	r1, [pc, #36]	; (8004664 <siprintf+0x3c>)
 8004640:	f853 2b04 	ldr.w	r2, [r3], #4
 8004644:	9105      	str	r1, [sp, #20]
 8004646:	6800      	ldr	r0, [r0, #0]
 8004648:	9301      	str	r3, [sp, #4]
 800464a:	a902      	add	r1, sp, #8
 800464c:	f000 f874 	bl	8004738 <_svfiprintf_r>
 8004650:	9b02      	ldr	r3, [sp, #8]
 8004652:	2200      	movs	r2, #0
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	b01c      	add	sp, #112	; 0x70
 8004658:	f85d eb04 	ldr.w	lr, [sp], #4
 800465c:	b003      	add	sp, #12
 800465e:	4770      	bx	lr
 8004660:	20000028 	.word	0x20000028
 8004664:	ffff0208 	.word	0xffff0208

08004668 <__malloc_lock>:
 8004668:	4801      	ldr	r0, [pc, #4]	; (8004670 <__malloc_lock+0x8>)
 800466a:	f000 baf9 	b.w	8004c60 <__retarget_lock_acquire_recursive>
 800466e:	bf00      	nop
 8004670:	200002a4 	.word	0x200002a4

08004674 <__malloc_unlock>:
 8004674:	4801      	ldr	r0, [pc, #4]	; (800467c <__malloc_unlock+0x8>)
 8004676:	f000 baf4 	b.w	8004c62 <__retarget_lock_release_recursive>
 800467a:	bf00      	nop
 800467c:	200002a4 	.word	0x200002a4

08004680 <__ssputs_r>:
 8004680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004684:	688e      	ldr	r6, [r1, #8]
 8004686:	429e      	cmp	r6, r3
 8004688:	4682      	mov	sl, r0
 800468a:	460c      	mov	r4, r1
 800468c:	4690      	mov	r8, r2
 800468e:	461f      	mov	r7, r3
 8004690:	d838      	bhi.n	8004704 <__ssputs_r+0x84>
 8004692:	898a      	ldrh	r2, [r1, #12]
 8004694:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004698:	d032      	beq.n	8004700 <__ssputs_r+0x80>
 800469a:	6825      	ldr	r5, [r4, #0]
 800469c:	6909      	ldr	r1, [r1, #16]
 800469e:	eba5 0901 	sub.w	r9, r5, r1
 80046a2:	6965      	ldr	r5, [r4, #20]
 80046a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046ac:	3301      	adds	r3, #1
 80046ae:	444b      	add	r3, r9
 80046b0:	106d      	asrs	r5, r5, #1
 80046b2:	429d      	cmp	r5, r3
 80046b4:	bf38      	it	cc
 80046b6:	461d      	movcc	r5, r3
 80046b8:	0553      	lsls	r3, r2, #21
 80046ba:	d531      	bpl.n	8004720 <__ssputs_r+0xa0>
 80046bc:	4629      	mov	r1, r5
 80046be:	f7ff ff49 	bl	8004554 <_malloc_r>
 80046c2:	4606      	mov	r6, r0
 80046c4:	b950      	cbnz	r0, 80046dc <__ssputs_r+0x5c>
 80046c6:	230c      	movs	r3, #12
 80046c8:	f8ca 3000 	str.w	r3, [sl]
 80046cc:	89a3      	ldrh	r3, [r4, #12]
 80046ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d2:	81a3      	strh	r3, [r4, #12]
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295
 80046d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046dc:	6921      	ldr	r1, [r4, #16]
 80046de:	464a      	mov	r2, r9
 80046e0:	f7ff fed2 	bl	8004488 <memcpy>
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ee:	81a3      	strh	r3, [r4, #12]
 80046f0:	6126      	str	r6, [r4, #16]
 80046f2:	6165      	str	r5, [r4, #20]
 80046f4:	444e      	add	r6, r9
 80046f6:	eba5 0509 	sub.w	r5, r5, r9
 80046fa:	6026      	str	r6, [r4, #0]
 80046fc:	60a5      	str	r5, [r4, #8]
 80046fe:	463e      	mov	r6, r7
 8004700:	42be      	cmp	r6, r7
 8004702:	d900      	bls.n	8004706 <__ssputs_r+0x86>
 8004704:	463e      	mov	r6, r7
 8004706:	4632      	mov	r2, r6
 8004708:	6820      	ldr	r0, [r4, #0]
 800470a:	4641      	mov	r1, r8
 800470c:	f000 faaa 	bl	8004c64 <memmove>
 8004710:	68a3      	ldr	r3, [r4, #8]
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	1b9b      	subs	r3, r3, r6
 8004716:	4432      	add	r2, r6
 8004718:	60a3      	str	r3, [r4, #8]
 800471a:	6022      	str	r2, [r4, #0]
 800471c:	2000      	movs	r0, #0
 800471e:	e7db      	b.n	80046d8 <__ssputs_r+0x58>
 8004720:	462a      	mov	r2, r5
 8004722:	f000 fab9 	bl	8004c98 <_realloc_r>
 8004726:	4606      	mov	r6, r0
 8004728:	2800      	cmp	r0, #0
 800472a:	d1e1      	bne.n	80046f0 <__ssputs_r+0x70>
 800472c:	6921      	ldr	r1, [r4, #16]
 800472e:	4650      	mov	r0, sl
 8004730:	f7ff fec0 	bl	80044b4 <_free_r>
 8004734:	e7c7      	b.n	80046c6 <__ssputs_r+0x46>
	...

08004738 <_svfiprintf_r>:
 8004738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473c:	4698      	mov	r8, r3
 800473e:	898b      	ldrh	r3, [r1, #12]
 8004740:	061b      	lsls	r3, r3, #24
 8004742:	b09d      	sub	sp, #116	; 0x74
 8004744:	4607      	mov	r7, r0
 8004746:	460d      	mov	r5, r1
 8004748:	4614      	mov	r4, r2
 800474a:	d50e      	bpl.n	800476a <_svfiprintf_r+0x32>
 800474c:	690b      	ldr	r3, [r1, #16]
 800474e:	b963      	cbnz	r3, 800476a <_svfiprintf_r+0x32>
 8004750:	2140      	movs	r1, #64	; 0x40
 8004752:	f7ff feff 	bl	8004554 <_malloc_r>
 8004756:	6028      	str	r0, [r5, #0]
 8004758:	6128      	str	r0, [r5, #16]
 800475a:	b920      	cbnz	r0, 8004766 <_svfiprintf_r+0x2e>
 800475c:	230c      	movs	r3, #12
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	f04f 30ff 	mov.w	r0, #4294967295
 8004764:	e0d1      	b.n	800490a <_svfiprintf_r+0x1d2>
 8004766:	2340      	movs	r3, #64	; 0x40
 8004768:	616b      	str	r3, [r5, #20]
 800476a:	2300      	movs	r3, #0
 800476c:	9309      	str	r3, [sp, #36]	; 0x24
 800476e:	2320      	movs	r3, #32
 8004770:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004774:	f8cd 800c 	str.w	r8, [sp, #12]
 8004778:	2330      	movs	r3, #48	; 0x30
 800477a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004924 <_svfiprintf_r+0x1ec>
 800477e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004782:	f04f 0901 	mov.w	r9, #1
 8004786:	4623      	mov	r3, r4
 8004788:	469a      	mov	sl, r3
 800478a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800478e:	b10a      	cbz	r2, 8004794 <_svfiprintf_r+0x5c>
 8004790:	2a25      	cmp	r2, #37	; 0x25
 8004792:	d1f9      	bne.n	8004788 <_svfiprintf_r+0x50>
 8004794:	ebba 0b04 	subs.w	fp, sl, r4
 8004798:	d00b      	beq.n	80047b2 <_svfiprintf_r+0x7a>
 800479a:	465b      	mov	r3, fp
 800479c:	4622      	mov	r2, r4
 800479e:	4629      	mov	r1, r5
 80047a0:	4638      	mov	r0, r7
 80047a2:	f7ff ff6d 	bl	8004680 <__ssputs_r>
 80047a6:	3001      	adds	r0, #1
 80047a8:	f000 80aa 	beq.w	8004900 <_svfiprintf_r+0x1c8>
 80047ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047ae:	445a      	add	r2, fp
 80047b0:	9209      	str	r2, [sp, #36]	; 0x24
 80047b2:	f89a 3000 	ldrb.w	r3, [sl]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80a2 	beq.w	8004900 <_svfiprintf_r+0x1c8>
 80047bc:	2300      	movs	r3, #0
 80047be:	f04f 32ff 	mov.w	r2, #4294967295
 80047c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047c6:	f10a 0a01 	add.w	sl, sl, #1
 80047ca:	9304      	str	r3, [sp, #16]
 80047cc:	9307      	str	r3, [sp, #28]
 80047ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047d2:	931a      	str	r3, [sp, #104]	; 0x68
 80047d4:	4654      	mov	r4, sl
 80047d6:	2205      	movs	r2, #5
 80047d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047dc:	4851      	ldr	r0, [pc, #324]	; (8004924 <_svfiprintf_r+0x1ec>)
 80047de:	f7fb fd07 	bl	80001f0 <memchr>
 80047e2:	9a04      	ldr	r2, [sp, #16]
 80047e4:	b9d8      	cbnz	r0, 800481e <_svfiprintf_r+0xe6>
 80047e6:	06d0      	lsls	r0, r2, #27
 80047e8:	bf44      	itt	mi
 80047ea:	2320      	movmi	r3, #32
 80047ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047f0:	0711      	lsls	r1, r2, #28
 80047f2:	bf44      	itt	mi
 80047f4:	232b      	movmi	r3, #43	; 0x2b
 80047f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047fa:	f89a 3000 	ldrb.w	r3, [sl]
 80047fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004800:	d015      	beq.n	800482e <_svfiprintf_r+0xf6>
 8004802:	9a07      	ldr	r2, [sp, #28]
 8004804:	4654      	mov	r4, sl
 8004806:	2000      	movs	r0, #0
 8004808:	f04f 0c0a 	mov.w	ip, #10
 800480c:	4621      	mov	r1, r4
 800480e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004812:	3b30      	subs	r3, #48	; 0x30
 8004814:	2b09      	cmp	r3, #9
 8004816:	d94e      	bls.n	80048b6 <_svfiprintf_r+0x17e>
 8004818:	b1b0      	cbz	r0, 8004848 <_svfiprintf_r+0x110>
 800481a:	9207      	str	r2, [sp, #28]
 800481c:	e014      	b.n	8004848 <_svfiprintf_r+0x110>
 800481e:	eba0 0308 	sub.w	r3, r0, r8
 8004822:	fa09 f303 	lsl.w	r3, r9, r3
 8004826:	4313      	orrs	r3, r2
 8004828:	9304      	str	r3, [sp, #16]
 800482a:	46a2      	mov	sl, r4
 800482c:	e7d2      	b.n	80047d4 <_svfiprintf_r+0x9c>
 800482e:	9b03      	ldr	r3, [sp, #12]
 8004830:	1d19      	adds	r1, r3, #4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	9103      	str	r1, [sp, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	bfbb      	ittet	lt
 800483a:	425b      	neglt	r3, r3
 800483c:	f042 0202 	orrlt.w	r2, r2, #2
 8004840:	9307      	strge	r3, [sp, #28]
 8004842:	9307      	strlt	r3, [sp, #28]
 8004844:	bfb8      	it	lt
 8004846:	9204      	strlt	r2, [sp, #16]
 8004848:	7823      	ldrb	r3, [r4, #0]
 800484a:	2b2e      	cmp	r3, #46	; 0x2e
 800484c:	d10c      	bne.n	8004868 <_svfiprintf_r+0x130>
 800484e:	7863      	ldrb	r3, [r4, #1]
 8004850:	2b2a      	cmp	r3, #42	; 0x2a
 8004852:	d135      	bne.n	80048c0 <_svfiprintf_r+0x188>
 8004854:	9b03      	ldr	r3, [sp, #12]
 8004856:	1d1a      	adds	r2, r3, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	9203      	str	r2, [sp, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	bfb8      	it	lt
 8004860:	f04f 33ff 	movlt.w	r3, #4294967295
 8004864:	3402      	adds	r4, #2
 8004866:	9305      	str	r3, [sp, #20]
 8004868:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004934 <_svfiprintf_r+0x1fc>
 800486c:	7821      	ldrb	r1, [r4, #0]
 800486e:	2203      	movs	r2, #3
 8004870:	4650      	mov	r0, sl
 8004872:	f7fb fcbd 	bl	80001f0 <memchr>
 8004876:	b140      	cbz	r0, 800488a <_svfiprintf_r+0x152>
 8004878:	2340      	movs	r3, #64	; 0x40
 800487a:	eba0 000a 	sub.w	r0, r0, sl
 800487e:	fa03 f000 	lsl.w	r0, r3, r0
 8004882:	9b04      	ldr	r3, [sp, #16]
 8004884:	4303      	orrs	r3, r0
 8004886:	3401      	adds	r4, #1
 8004888:	9304      	str	r3, [sp, #16]
 800488a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800488e:	4826      	ldr	r0, [pc, #152]	; (8004928 <_svfiprintf_r+0x1f0>)
 8004890:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004894:	2206      	movs	r2, #6
 8004896:	f7fb fcab 	bl	80001f0 <memchr>
 800489a:	2800      	cmp	r0, #0
 800489c:	d038      	beq.n	8004910 <_svfiprintf_r+0x1d8>
 800489e:	4b23      	ldr	r3, [pc, #140]	; (800492c <_svfiprintf_r+0x1f4>)
 80048a0:	bb1b      	cbnz	r3, 80048ea <_svfiprintf_r+0x1b2>
 80048a2:	9b03      	ldr	r3, [sp, #12]
 80048a4:	3307      	adds	r3, #7
 80048a6:	f023 0307 	bic.w	r3, r3, #7
 80048aa:	3308      	adds	r3, #8
 80048ac:	9303      	str	r3, [sp, #12]
 80048ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048b0:	4433      	add	r3, r6
 80048b2:	9309      	str	r3, [sp, #36]	; 0x24
 80048b4:	e767      	b.n	8004786 <_svfiprintf_r+0x4e>
 80048b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80048ba:	460c      	mov	r4, r1
 80048bc:	2001      	movs	r0, #1
 80048be:	e7a5      	b.n	800480c <_svfiprintf_r+0xd4>
 80048c0:	2300      	movs	r3, #0
 80048c2:	3401      	adds	r4, #1
 80048c4:	9305      	str	r3, [sp, #20]
 80048c6:	4619      	mov	r1, r3
 80048c8:	f04f 0c0a 	mov.w	ip, #10
 80048cc:	4620      	mov	r0, r4
 80048ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048d2:	3a30      	subs	r2, #48	; 0x30
 80048d4:	2a09      	cmp	r2, #9
 80048d6:	d903      	bls.n	80048e0 <_svfiprintf_r+0x1a8>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0c5      	beq.n	8004868 <_svfiprintf_r+0x130>
 80048dc:	9105      	str	r1, [sp, #20]
 80048de:	e7c3      	b.n	8004868 <_svfiprintf_r+0x130>
 80048e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80048e4:	4604      	mov	r4, r0
 80048e6:	2301      	movs	r3, #1
 80048e8:	e7f0      	b.n	80048cc <_svfiprintf_r+0x194>
 80048ea:	ab03      	add	r3, sp, #12
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	462a      	mov	r2, r5
 80048f0:	4b0f      	ldr	r3, [pc, #60]	; (8004930 <_svfiprintf_r+0x1f8>)
 80048f2:	a904      	add	r1, sp, #16
 80048f4:	4638      	mov	r0, r7
 80048f6:	f3af 8000 	nop.w
 80048fa:	1c42      	adds	r2, r0, #1
 80048fc:	4606      	mov	r6, r0
 80048fe:	d1d6      	bne.n	80048ae <_svfiprintf_r+0x176>
 8004900:	89ab      	ldrh	r3, [r5, #12]
 8004902:	065b      	lsls	r3, r3, #25
 8004904:	f53f af2c 	bmi.w	8004760 <_svfiprintf_r+0x28>
 8004908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800490a:	b01d      	add	sp, #116	; 0x74
 800490c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004910:	ab03      	add	r3, sp, #12
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	462a      	mov	r2, r5
 8004916:	4b06      	ldr	r3, [pc, #24]	; (8004930 <_svfiprintf_r+0x1f8>)
 8004918:	a904      	add	r1, sp, #16
 800491a:	4638      	mov	r0, r7
 800491c:	f000 f87a 	bl	8004a14 <_printf_i>
 8004920:	e7eb      	b.n	80048fa <_svfiprintf_r+0x1c2>
 8004922:	bf00      	nop
 8004924:	08004dc0 	.word	0x08004dc0
 8004928:	08004dca 	.word	0x08004dca
 800492c:	00000000 	.word	0x00000000
 8004930:	08004681 	.word	0x08004681
 8004934:	08004dc6 	.word	0x08004dc6

08004938 <_printf_common>:
 8004938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800493c:	4616      	mov	r6, r2
 800493e:	4699      	mov	r9, r3
 8004940:	688a      	ldr	r2, [r1, #8]
 8004942:	690b      	ldr	r3, [r1, #16]
 8004944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004948:	4293      	cmp	r3, r2
 800494a:	bfb8      	it	lt
 800494c:	4613      	movlt	r3, r2
 800494e:	6033      	str	r3, [r6, #0]
 8004950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004954:	4607      	mov	r7, r0
 8004956:	460c      	mov	r4, r1
 8004958:	b10a      	cbz	r2, 800495e <_printf_common+0x26>
 800495a:	3301      	adds	r3, #1
 800495c:	6033      	str	r3, [r6, #0]
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	0699      	lsls	r1, r3, #26
 8004962:	bf42      	ittt	mi
 8004964:	6833      	ldrmi	r3, [r6, #0]
 8004966:	3302      	addmi	r3, #2
 8004968:	6033      	strmi	r3, [r6, #0]
 800496a:	6825      	ldr	r5, [r4, #0]
 800496c:	f015 0506 	ands.w	r5, r5, #6
 8004970:	d106      	bne.n	8004980 <_printf_common+0x48>
 8004972:	f104 0a19 	add.w	sl, r4, #25
 8004976:	68e3      	ldr	r3, [r4, #12]
 8004978:	6832      	ldr	r2, [r6, #0]
 800497a:	1a9b      	subs	r3, r3, r2
 800497c:	42ab      	cmp	r3, r5
 800497e:	dc26      	bgt.n	80049ce <_printf_common+0x96>
 8004980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004984:	1e13      	subs	r3, r2, #0
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	bf18      	it	ne
 800498a:	2301      	movne	r3, #1
 800498c:	0692      	lsls	r2, r2, #26
 800498e:	d42b      	bmi.n	80049e8 <_printf_common+0xb0>
 8004990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004994:	4649      	mov	r1, r9
 8004996:	4638      	mov	r0, r7
 8004998:	47c0      	blx	r8
 800499a:	3001      	adds	r0, #1
 800499c:	d01e      	beq.n	80049dc <_printf_common+0xa4>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	68e5      	ldr	r5, [r4, #12]
 80049a2:	6832      	ldr	r2, [r6, #0]
 80049a4:	f003 0306 	and.w	r3, r3, #6
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	bf08      	it	eq
 80049ac:	1aad      	subeq	r5, r5, r2
 80049ae:	68a3      	ldr	r3, [r4, #8]
 80049b0:	6922      	ldr	r2, [r4, #16]
 80049b2:	bf0c      	ite	eq
 80049b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049b8:	2500      	movne	r5, #0
 80049ba:	4293      	cmp	r3, r2
 80049bc:	bfc4      	itt	gt
 80049be:	1a9b      	subgt	r3, r3, r2
 80049c0:	18ed      	addgt	r5, r5, r3
 80049c2:	2600      	movs	r6, #0
 80049c4:	341a      	adds	r4, #26
 80049c6:	42b5      	cmp	r5, r6
 80049c8:	d11a      	bne.n	8004a00 <_printf_common+0xc8>
 80049ca:	2000      	movs	r0, #0
 80049cc:	e008      	b.n	80049e0 <_printf_common+0xa8>
 80049ce:	2301      	movs	r3, #1
 80049d0:	4652      	mov	r2, sl
 80049d2:	4649      	mov	r1, r9
 80049d4:	4638      	mov	r0, r7
 80049d6:	47c0      	blx	r8
 80049d8:	3001      	adds	r0, #1
 80049da:	d103      	bne.n	80049e4 <_printf_common+0xac>
 80049dc:	f04f 30ff 	mov.w	r0, #4294967295
 80049e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e4:	3501      	adds	r5, #1
 80049e6:	e7c6      	b.n	8004976 <_printf_common+0x3e>
 80049e8:	18e1      	adds	r1, r4, r3
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	2030      	movs	r0, #48	; 0x30
 80049ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049f2:	4422      	add	r2, r4
 80049f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049fc:	3302      	adds	r3, #2
 80049fe:	e7c7      	b.n	8004990 <_printf_common+0x58>
 8004a00:	2301      	movs	r3, #1
 8004a02:	4622      	mov	r2, r4
 8004a04:	4649      	mov	r1, r9
 8004a06:	4638      	mov	r0, r7
 8004a08:	47c0      	blx	r8
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d0e6      	beq.n	80049dc <_printf_common+0xa4>
 8004a0e:	3601      	adds	r6, #1
 8004a10:	e7d9      	b.n	80049c6 <_printf_common+0x8e>
	...

08004a14 <_printf_i>:
 8004a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a18:	460c      	mov	r4, r1
 8004a1a:	4691      	mov	r9, r2
 8004a1c:	7e27      	ldrb	r7, [r4, #24]
 8004a1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a20:	2f78      	cmp	r7, #120	; 0x78
 8004a22:	4680      	mov	r8, r0
 8004a24:	469a      	mov	sl, r3
 8004a26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a2a:	d807      	bhi.n	8004a3c <_printf_i+0x28>
 8004a2c:	2f62      	cmp	r7, #98	; 0x62
 8004a2e:	d80a      	bhi.n	8004a46 <_printf_i+0x32>
 8004a30:	2f00      	cmp	r7, #0
 8004a32:	f000 80d8 	beq.w	8004be6 <_printf_i+0x1d2>
 8004a36:	2f58      	cmp	r7, #88	; 0x58
 8004a38:	f000 80a3 	beq.w	8004b82 <_printf_i+0x16e>
 8004a3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a44:	e03a      	b.n	8004abc <_printf_i+0xa8>
 8004a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a4a:	2b15      	cmp	r3, #21
 8004a4c:	d8f6      	bhi.n	8004a3c <_printf_i+0x28>
 8004a4e:	a001      	add	r0, pc, #4	; (adr r0, 8004a54 <_printf_i+0x40>)
 8004a50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a54:	08004aad 	.word	0x08004aad
 8004a58:	08004ac1 	.word	0x08004ac1
 8004a5c:	08004a3d 	.word	0x08004a3d
 8004a60:	08004a3d 	.word	0x08004a3d
 8004a64:	08004a3d 	.word	0x08004a3d
 8004a68:	08004a3d 	.word	0x08004a3d
 8004a6c:	08004ac1 	.word	0x08004ac1
 8004a70:	08004a3d 	.word	0x08004a3d
 8004a74:	08004a3d 	.word	0x08004a3d
 8004a78:	08004a3d 	.word	0x08004a3d
 8004a7c:	08004a3d 	.word	0x08004a3d
 8004a80:	08004bcd 	.word	0x08004bcd
 8004a84:	08004af1 	.word	0x08004af1
 8004a88:	08004baf 	.word	0x08004baf
 8004a8c:	08004a3d 	.word	0x08004a3d
 8004a90:	08004a3d 	.word	0x08004a3d
 8004a94:	08004bef 	.word	0x08004bef
 8004a98:	08004a3d 	.word	0x08004a3d
 8004a9c:	08004af1 	.word	0x08004af1
 8004aa0:	08004a3d 	.word	0x08004a3d
 8004aa4:	08004a3d 	.word	0x08004a3d
 8004aa8:	08004bb7 	.word	0x08004bb7
 8004aac:	680b      	ldr	r3, [r1, #0]
 8004aae:	1d1a      	adds	r2, r3, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	600a      	str	r2, [r1, #0]
 8004ab4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0a3      	b.n	8004c08 <_printf_i+0x1f4>
 8004ac0:	6825      	ldr	r5, [r4, #0]
 8004ac2:	6808      	ldr	r0, [r1, #0]
 8004ac4:	062e      	lsls	r6, r5, #24
 8004ac6:	f100 0304 	add.w	r3, r0, #4
 8004aca:	d50a      	bpl.n	8004ae2 <_printf_i+0xce>
 8004acc:	6805      	ldr	r5, [r0, #0]
 8004ace:	600b      	str	r3, [r1, #0]
 8004ad0:	2d00      	cmp	r5, #0
 8004ad2:	da03      	bge.n	8004adc <_printf_i+0xc8>
 8004ad4:	232d      	movs	r3, #45	; 0x2d
 8004ad6:	426d      	negs	r5, r5
 8004ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004adc:	485e      	ldr	r0, [pc, #376]	; (8004c58 <_printf_i+0x244>)
 8004ade:	230a      	movs	r3, #10
 8004ae0:	e019      	b.n	8004b16 <_printf_i+0x102>
 8004ae2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ae6:	6805      	ldr	r5, [r0, #0]
 8004ae8:	600b      	str	r3, [r1, #0]
 8004aea:	bf18      	it	ne
 8004aec:	b22d      	sxthne	r5, r5
 8004aee:	e7ef      	b.n	8004ad0 <_printf_i+0xbc>
 8004af0:	680b      	ldr	r3, [r1, #0]
 8004af2:	6825      	ldr	r5, [r4, #0]
 8004af4:	1d18      	adds	r0, r3, #4
 8004af6:	6008      	str	r0, [r1, #0]
 8004af8:	0628      	lsls	r0, r5, #24
 8004afa:	d501      	bpl.n	8004b00 <_printf_i+0xec>
 8004afc:	681d      	ldr	r5, [r3, #0]
 8004afe:	e002      	b.n	8004b06 <_printf_i+0xf2>
 8004b00:	0669      	lsls	r1, r5, #25
 8004b02:	d5fb      	bpl.n	8004afc <_printf_i+0xe8>
 8004b04:	881d      	ldrh	r5, [r3, #0]
 8004b06:	4854      	ldr	r0, [pc, #336]	; (8004c58 <_printf_i+0x244>)
 8004b08:	2f6f      	cmp	r7, #111	; 0x6f
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2308      	moveq	r3, #8
 8004b0e:	230a      	movne	r3, #10
 8004b10:	2100      	movs	r1, #0
 8004b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b16:	6866      	ldr	r6, [r4, #4]
 8004b18:	60a6      	str	r6, [r4, #8]
 8004b1a:	2e00      	cmp	r6, #0
 8004b1c:	bfa2      	ittt	ge
 8004b1e:	6821      	ldrge	r1, [r4, #0]
 8004b20:	f021 0104 	bicge.w	r1, r1, #4
 8004b24:	6021      	strge	r1, [r4, #0]
 8004b26:	b90d      	cbnz	r5, 8004b2c <_printf_i+0x118>
 8004b28:	2e00      	cmp	r6, #0
 8004b2a:	d04d      	beq.n	8004bc8 <_printf_i+0x1b4>
 8004b2c:	4616      	mov	r6, r2
 8004b2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b32:	fb03 5711 	mls	r7, r3, r1, r5
 8004b36:	5dc7      	ldrb	r7, [r0, r7]
 8004b38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b3c:	462f      	mov	r7, r5
 8004b3e:	42bb      	cmp	r3, r7
 8004b40:	460d      	mov	r5, r1
 8004b42:	d9f4      	bls.n	8004b2e <_printf_i+0x11a>
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d10b      	bne.n	8004b60 <_printf_i+0x14c>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	07df      	lsls	r7, r3, #31
 8004b4c:	d508      	bpl.n	8004b60 <_printf_i+0x14c>
 8004b4e:	6923      	ldr	r3, [r4, #16]
 8004b50:	6861      	ldr	r1, [r4, #4]
 8004b52:	4299      	cmp	r1, r3
 8004b54:	bfde      	ittt	le
 8004b56:	2330      	movle	r3, #48	; 0x30
 8004b58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b60:	1b92      	subs	r2, r2, r6
 8004b62:	6122      	str	r2, [r4, #16]
 8004b64:	f8cd a000 	str.w	sl, [sp]
 8004b68:	464b      	mov	r3, r9
 8004b6a:	aa03      	add	r2, sp, #12
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4640      	mov	r0, r8
 8004b70:	f7ff fee2 	bl	8004938 <_printf_common>
 8004b74:	3001      	adds	r0, #1
 8004b76:	d14c      	bne.n	8004c12 <_printf_i+0x1fe>
 8004b78:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7c:	b004      	add	sp, #16
 8004b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b82:	4835      	ldr	r0, [pc, #212]	; (8004c58 <_printf_i+0x244>)
 8004b84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	680e      	ldr	r6, [r1, #0]
 8004b8c:	061f      	lsls	r7, r3, #24
 8004b8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b92:	600e      	str	r6, [r1, #0]
 8004b94:	d514      	bpl.n	8004bc0 <_printf_i+0x1ac>
 8004b96:	07d9      	lsls	r1, r3, #31
 8004b98:	bf44      	itt	mi
 8004b9a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b9e:	6023      	strmi	r3, [r4, #0]
 8004ba0:	b91d      	cbnz	r5, 8004baa <_printf_i+0x196>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	f023 0320 	bic.w	r3, r3, #32
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	2310      	movs	r3, #16
 8004bac:	e7b0      	b.n	8004b10 <_printf_i+0xfc>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	f043 0320 	orr.w	r3, r3, #32
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	2378      	movs	r3, #120	; 0x78
 8004bb8:	4828      	ldr	r0, [pc, #160]	; (8004c5c <_printf_i+0x248>)
 8004bba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bbe:	e7e3      	b.n	8004b88 <_printf_i+0x174>
 8004bc0:	065e      	lsls	r6, r3, #25
 8004bc2:	bf48      	it	mi
 8004bc4:	b2ad      	uxthmi	r5, r5
 8004bc6:	e7e6      	b.n	8004b96 <_printf_i+0x182>
 8004bc8:	4616      	mov	r6, r2
 8004bca:	e7bb      	b.n	8004b44 <_printf_i+0x130>
 8004bcc:	680b      	ldr	r3, [r1, #0]
 8004bce:	6826      	ldr	r6, [r4, #0]
 8004bd0:	6960      	ldr	r0, [r4, #20]
 8004bd2:	1d1d      	adds	r5, r3, #4
 8004bd4:	600d      	str	r5, [r1, #0]
 8004bd6:	0635      	lsls	r5, r6, #24
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	d501      	bpl.n	8004be0 <_printf_i+0x1cc>
 8004bdc:	6018      	str	r0, [r3, #0]
 8004bde:	e002      	b.n	8004be6 <_printf_i+0x1d2>
 8004be0:	0671      	lsls	r1, r6, #25
 8004be2:	d5fb      	bpl.n	8004bdc <_printf_i+0x1c8>
 8004be4:	8018      	strh	r0, [r3, #0]
 8004be6:	2300      	movs	r3, #0
 8004be8:	6123      	str	r3, [r4, #16]
 8004bea:	4616      	mov	r6, r2
 8004bec:	e7ba      	b.n	8004b64 <_printf_i+0x150>
 8004bee:	680b      	ldr	r3, [r1, #0]
 8004bf0:	1d1a      	adds	r2, r3, #4
 8004bf2:	600a      	str	r2, [r1, #0]
 8004bf4:	681e      	ldr	r6, [r3, #0]
 8004bf6:	6862      	ldr	r2, [r4, #4]
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f7fb faf8 	bl	80001f0 <memchr>
 8004c00:	b108      	cbz	r0, 8004c06 <_printf_i+0x1f2>
 8004c02:	1b80      	subs	r0, r0, r6
 8004c04:	6060      	str	r0, [r4, #4]
 8004c06:	6863      	ldr	r3, [r4, #4]
 8004c08:	6123      	str	r3, [r4, #16]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c10:	e7a8      	b.n	8004b64 <_printf_i+0x150>
 8004c12:	6923      	ldr	r3, [r4, #16]
 8004c14:	4632      	mov	r2, r6
 8004c16:	4649      	mov	r1, r9
 8004c18:	4640      	mov	r0, r8
 8004c1a:	47d0      	blx	sl
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d0ab      	beq.n	8004b78 <_printf_i+0x164>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	079b      	lsls	r3, r3, #30
 8004c24:	d413      	bmi.n	8004c4e <_printf_i+0x23a>
 8004c26:	68e0      	ldr	r0, [r4, #12]
 8004c28:	9b03      	ldr	r3, [sp, #12]
 8004c2a:	4298      	cmp	r0, r3
 8004c2c:	bfb8      	it	lt
 8004c2e:	4618      	movlt	r0, r3
 8004c30:	e7a4      	b.n	8004b7c <_printf_i+0x168>
 8004c32:	2301      	movs	r3, #1
 8004c34:	4632      	mov	r2, r6
 8004c36:	4649      	mov	r1, r9
 8004c38:	4640      	mov	r0, r8
 8004c3a:	47d0      	blx	sl
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d09b      	beq.n	8004b78 <_printf_i+0x164>
 8004c40:	3501      	adds	r5, #1
 8004c42:	68e3      	ldr	r3, [r4, #12]
 8004c44:	9903      	ldr	r1, [sp, #12]
 8004c46:	1a5b      	subs	r3, r3, r1
 8004c48:	42ab      	cmp	r3, r5
 8004c4a:	dcf2      	bgt.n	8004c32 <_printf_i+0x21e>
 8004c4c:	e7eb      	b.n	8004c26 <_printf_i+0x212>
 8004c4e:	2500      	movs	r5, #0
 8004c50:	f104 0619 	add.w	r6, r4, #25
 8004c54:	e7f5      	b.n	8004c42 <_printf_i+0x22e>
 8004c56:	bf00      	nop
 8004c58:	08004dd1 	.word	0x08004dd1
 8004c5c:	08004de2 	.word	0x08004de2

08004c60 <__retarget_lock_acquire_recursive>:
 8004c60:	4770      	bx	lr

08004c62 <__retarget_lock_release_recursive>:
 8004c62:	4770      	bx	lr

08004c64 <memmove>:
 8004c64:	4288      	cmp	r0, r1
 8004c66:	b510      	push	{r4, lr}
 8004c68:	eb01 0402 	add.w	r4, r1, r2
 8004c6c:	d902      	bls.n	8004c74 <memmove+0x10>
 8004c6e:	4284      	cmp	r4, r0
 8004c70:	4623      	mov	r3, r4
 8004c72:	d807      	bhi.n	8004c84 <memmove+0x20>
 8004c74:	1e43      	subs	r3, r0, #1
 8004c76:	42a1      	cmp	r1, r4
 8004c78:	d008      	beq.n	8004c8c <memmove+0x28>
 8004c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c82:	e7f8      	b.n	8004c76 <memmove+0x12>
 8004c84:	4402      	add	r2, r0
 8004c86:	4601      	mov	r1, r0
 8004c88:	428a      	cmp	r2, r1
 8004c8a:	d100      	bne.n	8004c8e <memmove+0x2a>
 8004c8c:	bd10      	pop	{r4, pc}
 8004c8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c96:	e7f7      	b.n	8004c88 <memmove+0x24>

08004c98 <_realloc_r>:
 8004c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9a:	4607      	mov	r7, r0
 8004c9c:	4614      	mov	r4, r2
 8004c9e:	460e      	mov	r6, r1
 8004ca0:	b921      	cbnz	r1, 8004cac <_realloc_r+0x14>
 8004ca2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	f7ff bc54 	b.w	8004554 <_malloc_r>
 8004cac:	b922      	cbnz	r2, 8004cb8 <_realloc_r+0x20>
 8004cae:	f7ff fc01 	bl	80044b4 <_free_r>
 8004cb2:	4625      	mov	r5, r4
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cb8:	f000 f814 	bl	8004ce4 <_malloc_usable_size_r>
 8004cbc:	42a0      	cmp	r0, r4
 8004cbe:	d20f      	bcs.n	8004ce0 <_realloc_r+0x48>
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	f7ff fc46 	bl	8004554 <_malloc_r>
 8004cc8:	4605      	mov	r5, r0
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	d0f2      	beq.n	8004cb4 <_realloc_r+0x1c>
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	f7ff fbd9 	bl	8004488 <memcpy>
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f7ff fbeb 	bl	80044b4 <_free_r>
 8004cde:	e7e9      	b.n	8004cb4 <_realloc_r+0x1c>
 8004ce0:	4635      	mov	r5, r6
 8004ce2:	e7e7      	b.n	8004cb4 <_realloc_r+0x1c>

08004ce4 <_malloc_usable_size_r>:
 8004ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce8:	1f18      	subs	r0, r3, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	bfbc      	itt	lt
 8004cee:	580b      	ldrlt	r3, [r1, r0]
 8004cf0:	18c0      	addlt	r0, r0, r3
 8004cf2:	4770      	bx	lr

08004cf4 <_init>:
 8004cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf6:	bf00      	nop
 8004cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfa:	bc08      	pop	{r3}
 8004cfc:	469e      	mov	lr, r3
 8004cfe:	4770      	bx	lr

08004d00 <_fini>:
 8004d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d02:	bf00      	nop
 8004d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d06:	bc08      	pop	{r3}
 8004d08:	469e      	mov	lr, r3
 8004d0a:	4770      	bx	lr
