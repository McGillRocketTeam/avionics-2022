
ijustwanttoknowtheclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f68  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006200  08006200  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08006200  08006200  00016200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006208  08006208  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006208  08006208  00016208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800620c  0800620c  0001620c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          000008a4  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000930  20000930  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001baf3  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c39  00000000  00000000  0003bbaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  0003e7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001698  00000000  00000000  0003ff60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027047  00000000  00000000  000415f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c5a  00000000  00000000  0006863f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f15d6  00000000  00000000  00082299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017386f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006aa8  00000000  00000000  001738c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006100 	.word	0x08006100

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	08006100 	.word	0x08006100

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b093      	sub	sp, #76	; 0x4c
 800058c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f001 ff27 	bl	80023e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f851 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 fb75 	bl	8000c84 <MX_GPIO_Init>
  MX_ADC1_Init();
 800059a:	f000 f8bb 	bl	8000714 <MX_ADC1_Init>
  MX_I2C1_Init();
 800059e:	f000 f90b 	bl	80007b8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005a2:	f000 f949 	bl	8000838 <MX_I2C2_Init>
  MX_I2C3_Init();
 80005a6:	f000 f987 	bl	80008b8 <MX_I2C3_Init>
  MX_SPI2_Init();
 80005aa:	f000 f9c5 	bl	8000938 <MX_SPI2_Init>
  MX_SPI4_Init();
 80005ae:	f000 f9f9 	bl	80009a4 <MX_SPI4_Init>
  MX_SPI5_Init();
 80005b2:	f000 fa2d 	bl	8000a10 <MX_SPI5_Init>
  MX_TIM2_Init();
 80005b6:	f000 fa61 	bl	8000a7c <MX_TIM2_Init>
  MX_UART8_Init();
 80005ba:	f000 fab7 	bl	8000b2c <MX_UART8_Init>
  MX_USART3_UART_Init();
 80005be:	f000 fadf 	bl	8000b80 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80005c2:	f000 fb07 	bl	8000bd4 <MX_USART6_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c6:	f000 fb2f 	bl	8000c28 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  set_hspi(hspi2);
 80005ca:	4c16      	ldr	r4, [pc, #88]	; (8000624 <main+0x9c>)
 80005cc:	4668      	mov	r0, sp
 80005ce:	f104 0310 	add.w	r3, r4, #16
 80005d2:	2248      	movs	r2, #72	; 0x48
 80005d4:	4619      	mov	r1, r3
 80005d6:	f005 f95d 	bl	8005894 <memcpy>
 80005da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005de:	f001 f951 	bl	8001884 <set_hspi>
  set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 80005e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e6:	4810      	ldr	r0, [pc, #64]	; (8000628 <main+0xa0>)
 80005e8:	f001 f8f4 	bl	80017d4 <set_NSS_pin>
  set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 80005ec:	2108      	movs	r1, #8
 80005ee:	480f      	ldr	r0, [pc, #60]	; (800062c <main+0xa4>)
 80005f0:	f001 f906 	bl	8001800 <set_BUSY_pin>
  set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 80005f4:	2104      	movs	r1, #4
 80005f6:	480d      	ldr	r0, [pc, #52]	; (800062c <main+0xa4>)
 80005f8:	f001 f918 	bl	800182c <set_NRESET_pin>
  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 80005fc:	2110      	movs	r1, #16
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <main+0xa4>)
 8000600:	f001 f92a 	bl	8001858 <set_DIO1_pin>
  Tx_setup();
 8000604:	f001 f956 	bl	80018b4 <Tx_setup>
  sprintf((char *)tx_buffer, "0123456789");
 8000608:	4909      	ldr	r1, [pc, #36]	; (8000630 <main+0xa8>)
 800060a:	480a      	ldr	r0, [pc, #40]	; (8000634 <main+0xac>)
 800060c:	f005 fa12 	bl	8005a34 <siprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TxProtocol(tx_buffer, 10);
 8000610:	210a      	movs	r1, #10
 8000612:	4808      	ldr	r0, [pc, #32]	; (8000634 <main+0xac>)
 8000614:	f001 fa62 	bl	8001adc <TxProtocol>
	  HAL_Delay(500);
 8000618:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061c:	f001 ff52 	bl	80024c4 <HAL_Delay>
	  TxProtocol(tx_buffer, 10);
 8000620:	e7f6      	b.n	8000610 <main+0x88>
 8000622:	bf00      	nop
 8000624:	2000018c 	.word	0x2000018c
 8000628:	40020400 	.word	0x40020400
 800062c:	40021800 	.word	0x40021800
 8000630:	08006118 	.word	0x08006118
 8000634:	200007a0 	.word	0x200007a0

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 f932 	bl	80058b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b2a      	ldr	r3, [pc, #168]	; (800070c <SystemClock_Config+0xd4>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a29      	ldr	r2, [pc, #164]	; (800070c <SystemClock_Config+0xd4>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b27      	ldr	r3, [pc, #156]	; (800070c <SystemClock_Config+0xd4>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b24      	ldr	r3, [pc, #144]	; (8000710 <SystemClock_Config+0xd8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000684:	4a22      	ldr	r2, [pc, #136]	; (8000710 <SystemClock_Config+0xd8>)
 8000686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <SystemClock_Config+0xd8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000698:	2303      	movs	r3, #3
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a2:	2301      	movs	r3, #1
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b4:	2310      	movs	r3, #16
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006b8:	23c0      	movs	r3, #192	; 0xc0
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 ff31 	bl	8003530 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006d4:	f000 fc5e 	bl	8000f94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 f994 	bl	8003a20 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006fe:	f000 fc49 	bl	8000f94 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_ADC1_Init+0x98>)
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <MX_ADC1_Init+0x9c>)
 800072a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_ADC1_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_ADC1_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_ADC1_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_ADC1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_ADC1_Init+0x98>)
 8000754:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <MX_ADC1_Init+0xa0>)
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_ADC1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_ADC1_Init+0x98>)
 8000760:	2201      	movs	r2, #1
 8000762:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_ADC1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_ADC1_Init+0x98>)
 800076e:	2201      	movs	r2, #1
 8000770:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000772:	480e      	ldr	r0, [pc, #56]	; (80007ac <MX_ADC1_Init+0x98>)
 8000774:	f001 feca 	bl	800250c <HAL_ADC_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800077e:	f000 fc09 	bl	8000f94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000782:	2306      	movs	r3, #6
 8000784:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000786:	2301      	movs	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <MX_ADC1_Init+0x98>)
 8000794:	f001 fefe 	bl	8002594 <HAL_ADC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800079e:	f000 fbf9 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200007ac 	.word	0x200007ac
 80007b0:	40012000 	.word	0x40012000
 80007b4:	0f000001 	.word	0x0f000001

080007b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_I2C1_Init+0x74>)
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <MX_I2C1_Init+0x78>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_I2C1_Init+0x74>)
 80007c4:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <MX_I2C1_Init+0x7c>)
 80007c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_I2C1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_I2C1_Init+0x74>)
 80007d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_I2C1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_I2C1_Init+0x74>)
 80007f6:	f002 fbbf 	bl	8002f78 <HAL_I2C_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000800:	f000 fbc8 	bl	8000f94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	4809      	ldr	r0, [pc, #36]	; (800082c <MX_I2C1_Init+0x74>)
 8000808:	f002 fcfa 	bl	8003200 <HAL_I2CEx_ConfigAnalogFilter>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000812:	f000 fbbf 	bl	8000f94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_I2C1_Init+0x74>)
 800081a:	f002 fd2d 	bl	8003278 <HAL_I2CEx_ConfigDigitalFilter>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000824:	f000 fbb6 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000280 	.word	0x20000280
 8000830:	40005400 	.word	0x40005400
 8000834:	000186a0 	.word	0x000186a0

08000838 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_I2C2_Init+0x74>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <MX_I2C2_Init+0x78>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_I2C2_Init+0x74>)
 8000844:	4a1b      	ldr	r2, [pc, #108]	; (80008b4 <MX_I2C2_Init+0x7c>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_I2C2_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_I2C2_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_I2C2_Init+0x74>)
 8000856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_I2C2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_I2C2_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_I2C2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <MX_I2C2_Init+0x74>)
 8000876:	f002 fb7f 	bl	8002f78 <HAL_I2C_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000880:	f000 fb88 	bl	8000f94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000884:	2100      	movs	r1, #0
 8000886:	4809      	ldr	r0, [pc, #36]	; (80008ac <MX_I2C2_Init+0x74>)
 8000888:	f002 fcba 	bl	8003200 <HAL_I2CEx_ConfigAnalogFilter>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000892:	f000 fb7f 	bl	8000f94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_I2C2_Init+0x74>)
 800089a:	f002 fced 	bl	8003278 <HAL_I2CEx_ConfigDigitalFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80008a4:	f000 fb76 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200006dc 	.word	0x200006dc
 80008b0:	40005800 	.word	0x40005800
 80008b4:	000186a0 	.word	0x000186a0

080008b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_I2C3_Init+0x74>)
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_I2C3_Init+0x78>)
 80008c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_I2C3_Init+0x74>)
 80008c4:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <MX_I2C3_Init+0x7c>)
 80008c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_I2C3_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_I2C3_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_I2C3_Init+0x74>)
 80008d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008da:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_I2C3_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_I2C3_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_I2C3_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_I2C3_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_I2C3_Init+0x74>)
 80008f6:	f002 fb3f 	bl	8002f78 <HAL_I2C_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000900:	f000 fb48 	bl	8000f94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	4809      	ldr	r0, [pc, #36]	; (800092c <MX_I2C3_Init+0x74>)
 8000908:	f002 fc7a 	bl	8003200 <HAL_I2CEx_ConfigAnalogFilter>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000912:	f000 fb3f 	bl	8000f94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_I2C3_Init+0x74>)
 800091a:	f002 fcad 	bl	8003278 <HAL_I2CEx_ConfigDigitalFilter>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000924:	f000 fb36 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000138 	.word	0x20000138
 8000930:	40005c00 	.word	0x40005c00
 8000934:	000186a0 	.word	0x000186a0

08000938 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_SPI2_Init+0x64>)
 800093e:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <MX_SPI2_Init+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_SPI2_Init+0x64>)
 8000944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000948:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI2_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_SPI2_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI2_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI2_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SPI2_Init+0x64>)
 8000964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000968:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI2_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_SPI2_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI2_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_SPI2_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI2_Init+0x64>)
 8000984:	220a      	movs	r2, #10
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_SPI2_Init+0x64>)
 800098a:	f003 fa43 	bl	8003e14 <HAL_SPI_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000994:	f000 fafe 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000018c 	.word	0x2000018c
 80009a0:	40003800 	.word	0x40003800

080009a4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_SPI4_Init+0x64>)
 80009aa:	4a18      	ldr	r2, [pc, #96]	; (8000a0c <MX_SPI4_Init+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_SPI4_Init+0x64>)
 80009b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009b4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_SPI4_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_SPI4_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_SPI4_Init+0x64>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_SPI4_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_SPI4_Init+0x64>)
 80009d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_SPI4_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <MX_SPI4_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_SPI4_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <MX_SPI4_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_SPI4_Init+0x64>)
 80009f0:	220a      	movs	r2, #10
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_SPI4_Init+0x64>)
 80009f6:	f003 fa0d 	bl	8003e14 <HAL_SPI_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000a00:	f000 fac8 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200007f4 	.word	0x200007f4
 8000a0c:	40013400 	.word	0x40013400

08000a10 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_SPI5_Init+0x64>)
 8000a16:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <MX_SPI5_Init+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_SPI5_Init+0x64>)
 8000a1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a20:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_SPI5_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_SPI5_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_SPI5_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_SPI5_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_SPI5_Init+0x64>)
 8000a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a40:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_SPI5_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_SPI5_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_SPI5_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_SPI5_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_SPI5_Init+0x64>)
 8000a5c:	220a      	movs	r2, #10
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_SPI5_Init+0x64>)
 8000a62:	f003 f9d7 	bl	8003e14 <HAL_SPI_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a6c:	f000 fa92 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200001e4 	.word	0x200001e4
 8000a78:	40015000 	.word	0x40015000

08000a7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
 8000a9a:	615a      	str	r2, [r3, #20]
 8000a9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <MX_TIM2_Init+0xac>)
 8000aa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <MX_TIM2_Init+0xac>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_TIM2_Init+0xac>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <MX_TIM2_Init+0xac>)
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_TIM2_Init+0xac>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_TIM2_Init+0xac>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ac6:	4818      	ldr	r0, [pc, #96]	; (8000b28 <MX_TIM2_Init+0xac>)
 8000ac8:	f003 fdd6 	bl	8004678 <HAL_TIM_PWM_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000ad2:	f000 fa5f 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ade:	f107 0320 	add.w	r3, r7, #32
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4810      	ldr	r0, [pc, #64]	; (8000b28 <MX_TIM2_Init+0xac>)
 8000ae6:	f004 f929 	bl	8004d3c <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000af0:	f000 fa50 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af4:	2360      	movs	r3, #96	; 0x60
 8000af6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2208      	movs	r2, #8
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4807      	ldr	r0, [pc, #28]	; (8000b28 <MX_TIM2_Init+0xac>)
 8000b0c:	f003 fe04 	bl	8004718 <HAL_TIM_PWM_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000b16:	f000 fa3d 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <MX_TIM2_Init+0xac>)
 8000b1c:	f000 fc58 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200008d4 	.word	0x200008d4

08000b2c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_UART8_Init+0x4c>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <MX_UART8_Init+0x50>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_UART8_Init+0x4c>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_UART8_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_UART8_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_UART8_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_UART8_Init+0x4c>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_UART8_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_UART8_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_UART8_Init+0x4c>)
 8000b64:	f004 f966 	bl	8004e34 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8000b6e:	f000 fa11 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000084c 	.word	0x2000084c
 8000b7c:	40007c00 	.word	0x40007c00

08000b80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <MX_USART3_UART_Init+0x50>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000bb8:	f004 f93c 	bl	8004e34 <HAL_UART_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bc2:	f000 f9e7 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000023c 	.word	0x2000023c
 8000bd0:	40004800 	.word	0x40004800

08000bd4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_USART6_UART_Init+0x4c>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <MX_USART6_UART_Init+0x50>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <MX_USART6_UART_Init+0x4c>)
 8000be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_USART6_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_USART6_UART_Init+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <MX_USART6_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_USART6_UART_Init+0x4c>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <MX_USART6_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_USART6_UART_Init+0x4c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_USART6_UART_Init+0x4c>)
 8000c0c:	f004 f912 	bl	8004e34 <HAL_UART_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c16:	f000 f9bd 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000890 	.word	0x20000890
 8000c24:	40011400 	.word	0x40011400

08000c28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c36:	2204      	movs	r2, #4
 8000c38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c48:	2202      	movs	r2, #2
 8000c4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c6c:	f002 fb43 	bl	80032f6 <HAL_PCD_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c76:	f000 f98d 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200002d4 	.word	0x200002d4

08000c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08e      	sub	sp, #56	; 0x38
 8000c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
 8000c9e:	4bb5      	ldr	r3, [pc, #724]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4ab4      	ldr	r2, [pc, #720]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000ca4:	f043 0310 	orr.w	r3, r3, #16
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4bb2      	ldr	r3, [pc, #712]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0310 	and.w	r3, r3, #16
 8000cb2:	623b      	str	r3, [r7, #32]
 8000cb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	4bae      	ldr	r3, [pc, #696]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4aad      	ldr	r2, [pc, #692]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4bab      	ldr	r3, [pc, #684]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	61fb      	str	r3, [r7, #28]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	4ba7      	ldr	r3, [pc, #668]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4aa6      	ldr	r2, [pc, #664]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000cdc:	f043 0320 	orr.w	r3, r3, #32
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4ba4      	ldr	r3, [pc, #656]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0320 	and.w	r3, r3, #32
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	4ba0      	ldr	r3, [pc, #640]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a9f      	ldr	r2, [pc, #636]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b9d      	ldr	r3, [pc, #628]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b99      	ldr	r3, [pc, #612]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a98      	ldr	r2, [pc, #608]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b96      	ldr	r3, [pc, #600]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b92      	ldr	r3, [pc, #584]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a91      	ldr	r2, [pc, #580]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b8f      	ldr	r3, [pc, #572]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	4b8b      	ldr	r3, [pc, #556]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a8a      	ldr	r2, [pc, #552]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b88      	ldr	r3, [pc, #544]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b84      	ldr	r3, [pc, #528]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a83      	ldr	r2, [pc, #524]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000d68:	f043 0308 	orr.w	r3, r3, #8
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b81      	ldr	r3, [pc, #516]	; (8000f74 <MX_GPIO_Init+0x2f0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f248 4184 	movw	r1, #33924	; 0x8484
 8000d80:	487d      	ldr	r0, [pc, #500]	; (8000f78 <MX_GPIO_Init+0x2f4>)
 8000d82:	f002 f8df 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8000d8c:	487b      	ldr	r0, [pc, #492]	; (8000f7c <MX_GPIO_Init+0x2f8>)
 8000d8e:	f002 f8d9 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000d98:	4879      	ldr	r0, [pc, #484]	; (8000f80 <MX_GPIO_Init+0x2fc>)
 8000d9a:	f002 f8d3 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2108      	movs	r1, #8
 8000da2:	4878      	ldr	r0, [pc, #480]	; (8000f84 <MX_GPIO_Init+0x300>)
 8000da4:	f002 f8ce 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8000da8:	2200      	movs	r2, #0
 8000daa:	f645 213e 	movw	r1, #23102	; 0x5a3e
 8000dae:	4876      	ldr	r0, [pc, #472]	; (8000f88 <MX_GPIO_Init+0x304>)
 8000db0:	f002 f8c8 	bl	8002f44 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dba:	4874      	ldr	r0, [pc, #464]	; (8000f8c <MX_GPIO_Init+0x308>)
 8000dbc:	f002 f8c2 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8000dc6:	4872      	ldr	r0, [pc, #456]	; (8000f90 <MX_GPIO_Init+0x30c>)
 8000dc8:	f002 f8bc 	bl	8002f44 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8000dcc:	f248 4384 	movw	r3, #33924	; 0x8484
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	4864      	ldr	r0, [pc, #400]	; (8000f78 <MX_GPIO_Init+0x2f4>)
 8000de6:	f001 fee9 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8000dea:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	485e      	ldr	r0, [pc, #376]	; (8000f7c <MX_GPIO_Init+0x2f8>)
 8000e04:	f001 feda 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4858      	ldr	r0, [pc, #352]	; (8000f80 <MX_GPIO_Init+0x2fc>)
 8000e1e:	f001 fecd 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8000e22:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4851      	ldr	r0, [pc, #324]	; (8000f80 <MX_GPIO_Init+0x2fc>)
 8000e3c:	f001 febe 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8000e40:	2308      	movs	r3, #8
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	484b      	ldr	r0, [pc, #300]	; (8000f84 <MX_GPIO_Init+0x300>)
 8000e58:	f001 feb0 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8000e5c:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4843      	ldr	r0, [pc, #268]	; (8000f80 <MX_GPIO_Init+0x2fc>)
 8000e72:	f001 fea3 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8000e76:	2302      	movs	r3, #2
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	4840      	ldr	r0, [pc, #256]	; (8000f8c <MX_GPIO_Init+0x308>)
 8000e8a:	f001 fe97 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8000e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4836      	ldr	r0, [pc, #216]	; (8000f7c <MX_GPIO_Init+0x2f8>)
 8000ea4:	f001 fe8a 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 8000ea8:	f242 4301 	movw	r3, #9217	; 0x2401
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4832      	ldr	r0, [pc, #200]	; (8000f88 <MX_GPIO_Init+0x304>)
 8000ebe:	f001 fe7d 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8000ec2:	f645 233e 	movw	r3, #23102	; 0x5a3e
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	482b      	ldr	r0, [pc, #172]	; (8000f88 <MX_GPIO_Init+0x304>)
 8000edc:	f001 fe6e 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8000ee0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4820      	ldr	r0, [pc, #128]	; (8000f78 <MX_GPIO_Init+0x2f4>)
 8000ef6:	f001 fe61 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8000efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	481e      	ldr	r0, [pc, #120]	; (8000f8c <MX_GPIO_Init+0x308>)
 8000f14:	f001 fe52 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8000f18:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4817      	ldr	r0, [pc, #92]	; (8000f90 <MX_GPIO_Init+0x30c>)
 8000f32:	f001 fe43 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8000f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4811      	ldr	r0, [pc, #68]	; (8000f90 <MX_GPIO_Init+0x30c>)
 8000f4c:	f001 fe36 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 8000f50:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f64:	4619      	mov	r1, r3
 8000f66:	4808      	ldr	r0, [pc, #32]	; (8000f88 <MX_GPIO_Init+0x304>)
 8000f68:	f001 fe28 	bl	8002bbc <HAL_GPIO_Init>

}
 8000f6c:	bf00      	nop
 8000f6e:	3738      	adds	r7, #56	; 0x38
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40021400 	.word	0x40021400
 8000f80:	40020800 	.word	0x40020800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40021800 	.word	0x40021800
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020c00 	.word	0x40020c00

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <Error_Handler+0x8>
	...

08000fa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_MspInit+0x4c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_MspInit+0x4c>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_MspInit+0x4c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_MspInit+0x4c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_MspInit+0x4c>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_MspInit+0x4c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a17      	ldr	r2, [pc, #92]	; (800106c <HAL_ADC_MspInit+0x7c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d127      	bne.n	8001062 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_ADC_MspInit+0x80>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a15      	ldr	r2, [pc, #84]	; (8001070 <HAL_ADC_MspInit+0x80>)
 800101c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_ADC_MspInit+0x80>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_ADC_MspInit+0x80>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <HAL_ADC_MspInit+0x80>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <HAL_ADC_MspInit+0x80>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800104a:	2340      	movs	r3, #64	; 0x40
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104e:	2303      	movs	r3, #3
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_ADC_MspInit+0x84>)
 800105e:	f001 fdad 	bl	8002bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40012000 	.word	0x40012000
 8001070:	40023800 	.word	0x40023800
 8001074:	40020000 	.word	0x40020000

08001078 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	; 0x38
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a5c      	ldr	r2, [pc, #368]	; (8001208 <HAL_I2C_MspInit+0x190>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d12d      	bne.n	80010f6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
 800109e:	4b5b      	ldr	r3, [pc, #364]	; (800120c <HAL_I2C_MspInit+0x194>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a5a      	ldr	r2, [pc, #360]	; (800120c <HAL_I2C_MspInit+0x194>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b58      	ldr	r3, [pc, #352]	; (800120c <HAL_I2C_MspInit+0x194>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010bc:	2312      	movs	r3, #18
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c8:	2304      	movs	r3, #4
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	484f      	ldr	r0, [pc, #316]	; (8001210 <HAL_I2C_MspInit+0x198>)
 80010d4:	f001 fd72 	bl	8002bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	4b4b      	ldr	r3, [pc, #300]	; (800120c <HAL_I2C_MspInit+0x194>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	4a4a      	ldr	r2, [pc, #296]	; (800120c <HAL_I2C_MspInit+0x194>)
 80010e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e6:	6413      	str	r3, [r2, #64]	; 0x40
 80010e8:	4b48      	ldr	r3, [pc, #288]	; (800120c <HAL_I2C_MspInit+0x194>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80010f4:	e083      	b.n	80011fe <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a46      	ldr	r2, [pc, #280]	; (8001214 <HAL_I2C_MspInit+0x19c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d12d      	bne.n	800115c <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	4b41      	ldr	r3, [pc, #260]	; (800120c <HAL_I2C_MspInit+0x194>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	4a40      	ldr	r2, [pc, #256]	; (800120c <HAL_I2C_MspInit+0x194>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	6313      	str	r3, [r2, #48]	; 0x30
 8001110:	4b3e      	ldr	r3, [pc, #248]	; (800120c <HAL_I2C_MspInit+0x194>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800111c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001122:	2312      	movs	r3, #18
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001126:	2301      	movs	r3, #1
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800112e:	2304      	movs	r3, #4
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001136:	4619      	mov	r1, r3
 8001138:	4835      	ldr	r0, [pc, #212]	; (8001210 <HAL_I2C_MspInit+0x198>)
 800113a:	f001 fd3f 	bl	8002bbc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	4b32      	ldr	r3, [pc, #200]	; (800120c <HAL_I2C_MspInit+0x194>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a31      	ldr	r2, [pc, #196]	; (800120c <HAL_I2C_MspInit+0x194>)
 8001148:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b2f      	ldr	r3, [pc, #188]	; (800120c <HAL_I2C_MspInit+0x194>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697b      	ldr	r3, [r7, #20]
}
 800115a:	e050      	b.n	80011fe <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a2d      	ldr	r2, [pc, #180]	; (8001218 <HAL_I2C_MspInit+0x1a0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d14b      	bne.n	80011fe <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b28      	ldr	r3, [pc, #160]	; (800120c <HAL_I2C_MspInit+0x194>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a27      	ldr	r2, [pc, #156]	; (800120c <HAL_I2C_MspInit+0x194>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <HAL_I2C_MspInit+0x194>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <HAL_I2C_MspInit+0x194>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a20      	ldr	r2, [pc, #128]	; (800120c <HAL_I2C_MspInit+0x194>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <HAL_I2C_MspInit+0x194>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800119e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a4:	2312      	movs	r3, #18
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011b0:	2304      	movs	r3, #4
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	4619      	mov	r1, r3
 80011ba:	4818      	ldr	r0, [pc, #96]	; (800121c <HAL_I2C_MspInit+0x1a4>)
 80011bc:	f001 fcfe 	bl	8002bbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c6:	2312      	movs	r3, #18
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011d2:	2304      	movs	r3, #4
 80011d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011da:	4619      	mov	r1, r3
 80011dc:	4810      	ldr	r0, [pc, #64]	; (8001220 <HAL_I2C_MspInit+0x1a8>)
 80011de:	f001 fced 	bl	8002bbc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_I2C_MspInit+0x194>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_I2C_MspInit+0x194>)
 80011ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_I2C_MspInit+0x194>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
}
 80011fe:	bf00      	nop
 8001200:	3738      	adds	r7, #56	; 0x38
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40005400 	.word	0x40005400
 800120c:	40023800 	.word	0x40023800
 8001210:	40020400 	.word	0x40020400
 8001214:	40005800 	.word	0x40005800
 8001218:	40005c00 	.word	0x40005c00
 800121c:	40020800 	.word	0x40020800
 8001220:	40020000 	.word	0x40020000

08001224 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	; 0x38
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a4c      	ldr	r2, [pc, #304]	; (8001374 <HAL_SPI_MspInit+0x150>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d12d      	bne.n	80012a2 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
 800124a:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <HAL_SPI_MspInit+0x154>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a4a      	ldr	r2, [pc, #296]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b48      	ldr	r3, [pc, #288]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125e:	623b      	str	r3, [r7, #32]
 8001260:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	4b44      	ldr	r3, [pc, #272]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a43      	ldr	r2, [pc, #268]	; (8001378 <HAL_SPI_MspInit+0x154>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b41      	ldr	r3, [pc, #260]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800127e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001290:	2305      	movs	r3, #5
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	4838      	ldr	r0, [pc, #224]	; (800137c <HAL_SPI_MspInit+0x158>)
 800129c:	f001 fc8e 	bl	8002bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80012a0:	e064      	b.n	800136c <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a36      	ldr	r2, [pc, #216]	; (8001380 <HAL_SPI_MspInit+0x15c>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d12d      	bne.n	8001308 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
 80012b0:	4b31      	ldr	r3, [pc, #196]	; (8001378 <HAL_SPI_MspInit+0x154>)
 80012b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b4:	4a30      	ldr	r2, [pc, #192]	; (8001378 <HAL_SPI_MspInit+0x154>)
 80012b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012ba:	6453      	str	r3, [r2, #68]	; 0x44
 80012bc:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <HAL_SPI_MspInit+0x154>)
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <HAL_SPI_MspInit+0x154>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	4a29      	ldr	r2, [pc, #164]	; (8001378 <HAL_SPI_MspInit+0x154>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6313      	str	r3, [r2, #48]	; 0x30
 80012d8:	4b27      	ldr	r3, [pc, #156]	; (8001378 <HAL_SPI_MspInit+0x154>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80012e4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80012f6:	2305      	movs	r3, #5
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	4619      	mov	r1, r3
 8001300:	4820      	ldr	r0, [pc, #128]	; (8001384 <HAL_SPI_MspInit+0x160>)
 8001302:	f001 fc5b 	bl	8002bbc <HAL_GPIO_Init>
}
 8001306:	e031      	b.n	800136c <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a1e      	ldr	r2, [pc, #120]	; (8001388 <HAL_SPI_MspInit+0x164>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d12c      	bne.n	800136c <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a17      	ldr	r2, [pc, #92]	; (8001378 <HAL_SPI_MspInit+0x154>)
 800131c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a10      	ldr	r2, [pc, #64]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001338:	f043 0320 	orr.w	r3, r3, #32
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_SPI_MspInit+0x154>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0320 	and.w	r3, r3, #32
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800134a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800135c:	2305      	movs	r3, #5
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001364:	4619      	mov	r1, r3
 8001366:	4809      	ldr	r0, [pc, #36]	; (800138c <HAL_SPI_MspInit+0x168>)
 8001368:	f001 fc28 	bl	8002bbc <HAL_GPIO_Init>
}
 800136c:	bf00      	nop
 800136e:	3738      	adds	r7, #56	; 0x38
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40003800 	.word	0x40003800
 8001378:	40023800 	.word	0x40023800
 800137c:	40020400 	.word	0x40020400
 8001380:	40013400 	.word	0x40013400
 8001384:	40021000 	.word	0x40021000
 8001388:	40015000 	.word	0x40015000
 800138c:	40021400 	.word	0x40021400

08001390 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a0:	d10d      	bne.n	80013be <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_TIM_PWM_MspInit+0x3c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_TIM_PWM_MspInit+0x3c>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_TIM_PWM_MspInit+0x3c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f0:	d11d      	bne.n	800142e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_TIM_MspPostInit+0x68>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <HAL_TIM_MspPostInit+0x68>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_TIM_MspPostInit+0x68>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 800140e:	2304      	movs	r3, #4
 8001410:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800141e:	2301      	movs	r3, #1
 8001420:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	4619      	mov	r1, r3
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <HAL_TIM_MspPostInit+0x6c>)
 800142a:	f001 fbc7 	bl	8002bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3720      	adds	r7, #32
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000

08001440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	; 0x38
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a4b      	ldr	r2, [pc, #300]	; (800158c <HAL_UART_MspInit+0x14c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d12c      	bne.n	80014bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
 8001466:	4b4a      	ldr	r3, [pc, #296]	; (8001590 <HAL_UART_MspInit+0x150>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a49      	ldr	r2, [pc, #292]	; (8001590 <HAL_UART_MspInit+0x150>)
 800146c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <HAL_UART_MspInit+0x150>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800147a:	623b      	str	r3, [r7, #32]
 800147c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
 8001482:	4b43      	ldr	r3, [pc, #268]	; (8001590 <HAL_UART_MspInit+0x150>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a42      	ldr	r2, [pc, #264]	; (8001590 <HAL_UART_MspInit+0x150>)
 8001488:	f043 0310 	orr.w	r3, r3, #16
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b40      	ldr	r3, [pc, #256]	; (8001590 <HAL_UART_MspInit+0x150>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 800149a:	2303      	movs	r3, #3
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80014aa:	2308      	movs	r3, #8
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	4837      	ldr	r0, [pc, #220]	; (8001594 <HAL_UART_MspInit+0x154>)
 80014b6:	f001 fb81 	bl	8002bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80014ba:	e063      	b.n	8001584 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a35      	ldr	r2, [pc, #212]	; (8001598 <HAL_UART_MspInit+0x158>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d12d      	bne.n	8001522 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	4b31      	ldr	r3, [pc, #196]	; (8001590 <HAL_UART_MspInit+0x150>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a30      	ldr	r2, [pc, #192]	; (8001590 <HAL_UART_MspInit+0x150>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <HAL_UART_MspInit+0x150>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <HAL_UART_MspInit+0x150>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a29      	ldr	r2, [pc, #164]	; (8001590 <HAL_UART_MspInit+0x150>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b27      	ldr	r3, [pc, #156]	; (8001590 <HAL_UART_MspInit+0x150>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 80014fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001510:	2307      	movs	r3, #7
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	4820      	ldr	r0, [pc, #128]	; (800159c <HAL_UART_MspInit+0x15c>)
 800151c:	f001 fb4e 	bl	8002bbc <HAL_GPIO_Init>
}
 8001520:	e030      	b.n	8001584 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a1e      	ldr	r2, [pc, #120]	; (80015a0 <HAL_UART_MspInit+0x160>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d12b      	bne.n	8001584 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_UART_MspInit+0x150>)
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	4a16      	ldr	r2, [pc, #88]	; (8001590 <HAL_UART_MspInit+0x150>)
 8001536:	f043 0320 	orr.w	r3, r3, #32
 800153a:	6453      	str	r3, [r2, #68]	; 0x44
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_UART_MspInit+0x150>)
 800153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001540:	f003 0320 	and.w	r3, r3, #32
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_UART_MspInit+0x150>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_UART_MspInit+0x150>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6313      	str	r3, [r2, #48]	; 0x30
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_UART_MspInit+0x150>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8001564:	23c0      	movs	r3, #192	; 0xc0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001574:	2308      	movs	r3, #8
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157c:	4619      	mov	r1, r3
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <HAL_UART_MspInit+0x164>)
 8001580:	f001 fb1c 	bl	8002bbc <HAL_GPIO_Init>
}
 8001584:	bf00      	nop
 8001586:	3738      	adds	r7, #56	; 0x38
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40007c00 	.word	0x40007c00
 8001590:	40023800 	.word	0x40023800
 8001594:	40021000 	.word	0x40021000
 8001598:	40004800 	.word	0x40004800
 800159c:	40020c00 	.word	0x40020c00
 80015a0:	40011400 	.word	0x40011400
 80015a4:	40020800 	.word	0x40020800

080015a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c8:	d13f      	bne.n	800164a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <HAL_PCD_MspInit+0xac>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a20      	ldr	r2, [pc, #128]	; (8001654 <HAL_PCD_MspInit+0xac>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <HAL_PCD_MspInit+0xac>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4817      	ldr	r0, [pc, #92]	; (8001658 <HAL_PCD_MspInit+0xb0>)
 80015fc:	f001 fade 	bl	8002bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001600:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001612:	230a      	movs	r3, #10
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	480e      	ldr	r0, [pc, #56]	; (8001658 <HAL_PCD_MspInit+0xb0>)
 800161e:	f001 facd 	bl	8002bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_PCD_MspInit+0xac>)
 8001624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <HAL_PCD_MspInit+0xac>)
 8001628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800162c:	6353      	str	r3, [r2, #52]	; 0x34
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_PCD_MspInit+0xac>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_PCD_MspInit+0xac>)
 8001638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_PCD_MspInit+0xac>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <NMI_Handler+0x4>

08001662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <MemManage_Handler+0x4>

0800166e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <UsageFault_Handler+0x4>

0800167a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a8:	f000 feec 	bl	8002484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	4613      	mov	r3, r2
 80016be:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 80016c0:	bf00      	nop
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <sx126x_hal_write+0x78>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a19      	ldr	r2, [pc, #100]	; (800172c <sx126x_hal_write+0x7c>)
 80016c8:	8812      	ldrh	r2, [r2, #0]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 fc21 	bl	8002f14 <HAL_GPIO_ReadPin>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d0f4      	beq.n	80016c2 <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <sx126x_hal_write+0x80>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a15      	ldr	r2, [pc, #84]	; (8001734 <sx126x_hal_write+0x84>)
 80016de:	8811      	ldrh	r1, [r2, #0]
 80016e0:	2200      	movs	r2, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 fc2e 	bl	8002f44 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 80016e8:	88fa      	ldrh	r2, [r7, #6]
 80016ea:	2364      	movs	r3, #100	; 0x64
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f002 fc19 	bl	8003f26 <HAL_SPI_Transmit>
 80016f4:	4603      	mov	r3, r0
 80016f6:	75fb      	strb	r3, [r7, #23]
    if (data_length != 0) {
 80016f8:	8c3b      	ldrh	r3, [r7, #32]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <sx126x_hal_write+0x5e>
        status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 80016fe:	8c3a      	ldrh	r2, [r7, #32]
 8001700:	2364      	movs	r3, #100	; 0x64
 8001702:	6839      	ldr	r1, [r7, #0]
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f002 fc0e 	bl	8003f26 <HAL_SPI_Transmit>
 800170a:	4603      	mov	r3, r0
 800170c:	75fb      	strb	r3, [r7, #23]
    }
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <sx126x_hal_write+0x80>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <sx126x_hal_write+0x84>)
 8001714:	8811      	ldrh	r1, [r2, #0]
 8001716:	2201      	movs	r2, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f001 fc13 	bl	8002f44 <HAL_GPIO_WritePin>
    return status;
 800171e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200000bc 	.word	0x200000bc
 800172c:	200000b8 	.word	0x200000b8
 8001730:	200000ac 	.word	0x200000ac
 8001734:	200000a8 	.word	0x200000a8

08001738 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af02      	add	r7, sp, #8
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 8001748:	bf00      	nop
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <sx126x_hal_read+0x8c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <sx126x_hal_read+0x90>)
 8001750:	8812      	ldrh	r2, [r2, #0]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f001 fbdd 	bl	8002f14 <HAL_GPIO_ReadPin>
 800175a:	4603      	mov	r3, r0
 800175c:	2b01      	cmp	r3, #1
 800175e:	d0f4      	beq.n	800174a <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <sx126x_hal_read+0x94>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a1a      	ldr	r2, [pc, #104]	; (80017d0 <sx126x_hal_read+0x98>)
 8001766:	8811      	ldrh	r1, [r2, #0]
 8001768:	2200      	movs	r2, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f001 fbea 	bl	8002f44 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 8001770:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001774:	b29a      	uxth	r2, r3
 8001776:	2364      	movs	r3, #100	; 0x64
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f002 fbd3 	bl	8003f26 <HAL_SPI_Transmit>
 8001780:	4603      	mov	r3, r0
 8001782:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 8001784:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	18d1      	adds	r1, r2, r3
 800178c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001790:	b29b      	uxth	r3, r3
 8001792:	88fa      	ldrh	r2, [r7, #6]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	b29b      	uxth	r3, r3
 8001798:	2264      	movs	r2, #100	; 0x64
 800179a:	9200      	str	r2, [sp, #0]
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f002 fcfd 	bl	800419e <HAL_SPI_TransmitReceive>
 80017a4:	4603      	mov	r3, r0
 80017a6:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <sx126x_hal_read+0x94>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <sx126x_hal_read+0x98>)
 80017ae:	8811      	ldrh	r1, [r2, #0]
 80017b0:	2201      	movs	r2, #1
 80017b2:	4618      	mov	r0, r3
 80017b4:	f001 fbc6 	bl	8002f44 <HAL_GPIO_WritePin>
    return status;
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200000bc 	.word	0x200000bc
 80017c8:	200000b8 	.word	0x200000b8
 80017cc:	200000ac 	.word	0x200000ac
 80017d0:	200000a8 	.word	0x200000a8

080017d4 <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 80017e0:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <set_NSS_pin+0x24>)
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <set_NSS_pin+0x28>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	200000a8 	.word	0x200000a8
 80017fc:	200000ac 	.word	0x200000ac

08001800 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 800180c:	4a05      	ldr	r2, [pc, #20]	; (8001824 <set_BUSY_pin+0x24>)
 800180e:	887b      	ldrh	r3, [r7, #2]
 8001810:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <set_BUSY_pin+0x28>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6013      	str	r3, [r2, #0]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	200000b8 	.word	0x200000b8
 8001828:	200000bc 	.word	0x200000bc

0800182c <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 8001838:	4a05      	ldr	r2, [pc, #20]	; (8001850 <set_NRESET_pin+0x24>)
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <set_NRESET_pin+0x28>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	200000b0 	.word	0x200000b0
 8001854:	200000b4 	.word	0x200000b4

08001858 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 8001864:	4a05      	ldr	r2, [pc, #20]	; (800187c <set_DIO1_pin+0x24>)
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <set_DIO1_pin+0x28>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	200000c0 	.word	0x200000c0
 8001880:	200000c4 	.word	0x200000c4

08001884 <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 8001884:	b084      	sub	sp, #16
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
 800188a:	f107 0c08 	add.w	ip, r7, #8
 800188e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <set_hspi+0x2c>)
 8001894:	4618      	mov	r0, r3
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	2258      	movs	r2, #88	; 0x58
 800189c:	4619      	mov	r1, r3
 800189e:	f003 fff9 	bl	8005894 <memcpy>
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018aa:	b004      	add	sp, #16
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	200000c8 	.word	0x200000c8

080018b4 <Tx_setup>:

void Tx_setup(){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 80018ba:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <Tx_setup+0x1a0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a66      	ldr	r2, [pc, #408]	; (8001a58 <Tx_setup+0x1a4>)
 80018c0:	8811      	ldrh	r1, [r2, #0]
 80018c2:	2201      	movs	r2, #1
 80018c4:	4618      	mov	r0, r3
 80018c6:	f001 fb3d 	bl	8002f44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 80018ca:	4b64      	ldr	r3, [pc, #400]	; (8001a5c <Tx_setup+0x1a8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a64      	ldr	r2, [pc, #400]	; (8001a60 <Tx_setup+0x1ac>)
 80018d0:	8811      	ldrh	r1, [r2, #0]
 80018d2:	2200      	movs	r2, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f001 fb35 	bl	8002f44 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80018da:	2032      	movs	r0, #50	; 0x32
 80018dc:	f000 fdf2 	bl	80024c4 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 80018e0:	4b5e      	ldr	r3, [pc, #376]	; (8001a5c <Tx_setup+0x1a8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a5e      	ldr	r2, [pc, #376]	; (8001a60 <Tx_setup+0x1ac>)
 80018e6:	8811      	ldrh	r1, [r2, #0]
 80018e8:	2201      	movs	r2, #1
 80018ea:	4618      	mov	r0, r3
 80018ec:	f001 fb2a 	bl	8002f44 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 80018f0:	2100      	movs	r1, #0
 80018f2:	485c      	ldr	r0, [pc, #368]	; (8001a64 <Tx_setup+0x1b0>)
 80018f4:	f000 f92c 	bl	8001b50 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 80018f8:	4b5b      	ldr	r3, [pc, #364]	; (8001a68 <Tx_setup+0x1b4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	4859      	ldr	r0, [pc, #356]	; (8001a64 <Tx_setup+0x1b0>)
 8001900:	f000 fb94 	bl	800202c <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 8001904:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <Tx_setup+0x1b8>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	4856      	ldr	r0, [pc, #344]	; (8001a64 <Tx_setup+0x1b0>)
 800190c:	f000 fbc8 	bl	80020a0 <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 8001910:	4b57      	ldr	r3, [pc, #348]	; (8001a70 <Tx_setup+0x1bc>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	4853      	ldr	r0, [pc, #332]	; (8001a64 <Tx_setup+0x1b0>)
 8001918:	f000 fa1d 	bl	8001d56 <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 800191c:	2101      	movs	r1, #1
 800191e:	4851      	ldr	r0, [pc, #324]	; (8001a64 <Tx_setup+0x1b0>)
 8001920:	f000 fb42 	bl	8001fa8 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <Tx_setup+0x1c0>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2264      	movs	r2, #100	; 0x64
 800192a:	4619      	mov	r1, r3
 800192c:	484d      	ldr	r0, [pc, #308]	; (8001a64 <Tx_setup+0x1b0>)
 800192e:	f000 fb55 	bl	8001fdc <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 8001932:	4b51      	ldr	r3, [pc, #324]	; (8001a78 <Tx_setup+0x1c4>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	4619      	mov	r1, r3
 8001938:	484a      	ldr	r0, [pc, #296]	; (8001a64 <Tx_setup+0x1b0>)
 800193a:	f000 f9a9 	bl	8001c90 <sx126x_cal>
    HAL_Delay(50);
 800193e:	2032      	movs	r0, #50	; 0x32
 8001940:	f000 fdc0 	bl	80024c4 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 8001944:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <Tx_setup+0x1c8>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	4846      	ldr	r0, [pc, #280]	; (8001a64 <Tx_setup+0x1b0>)
 800194c:	f000 f986 	bl	8001c5c <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 8001950:	4b4b      	ldr	r3, [pc, #300]	; (8001a80 <Tx_setup+0x1cc>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4a4b      	ldr	r2, [pc, #300]	; (8001a84 <Tx_setup+0x1d0>)
 8001956:	7812      	ldrb	r2, [r2, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	4842      	ldr	r0, [pc, #264]	; (8001a64 <Tx_setup+0x1b0>)
 800195c:	f000 f9b2 	bl	8001cc4 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 8001960:	2004      	movs	r0, #4
 8001962:	f003 ff87 	bl	8005874 <malloc>
 8001966:	4603      	mov	r3, r0
 8001968:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <Tx_setup+0x1d4>)
 800196c:	781a      	ldrb	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 8001972:	4b46      	ldr	r3, [pc, #280]	; (8001a8c <Tx_setup+0x1d8>)
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 800197a:	4b45      	ldr	r3, [pc, #276]	; (8001a90 <Tx_setup+0x1dc>)
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 8001982:	4b44      	ldr	r3, [pc, #272]	; (8001a94 <Tx_setup+0x1e0>)
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 800198a:	68f9      	ldr	r1, [r7, #12]
 800198c:	4835      	ldr	r0, [pc, #212]	; (8001a64 <Tx_setup+0x1b0>)
 800198e:	f000 f9bd 	bl	8001d0c <sx126x_set_pa_cfg>
    free(params);
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f003 ff76 	bl	8005884 <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 8001998:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <Tx_setup+0x1e4>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b25b      	sxtb	r3, r3
 800199e:	4a3f      	ldr	r2, [pc, #252]	; (8001a9c <Tx_setup+0x1e8>)
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	4619      	mov	r1, r3
 80019a4:	482f      	ldr	r0, [pc, #188]	; (8001a64 <Tx_setup+0x1b0>)
 80019a6:	f000 fb95 	bl	80020d4 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 80019aa:	4b3d      	ldr	r3, [pc, #244]	; (8001aa0 <Tx_setup+0x1ec>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	4a3d      	ldr	r2, [pc, #244]	; (8001aa4 <Tx_setup+0x1f0>)
 80019b0:	7812      	ldrb	r2, [r2, #0]
 80019b2:	4619      	mov	r1, r3
 80019b4:	482b      	ldr	r0, [pc, #172]	; (8001a64 <Tx_setup+0x1b0>)
 80019b6:	f000 fc4b 	bl	8002250 <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 80019ba:	2004      	movs	r0, #4
 80019bc:	f003 ff5a 	bl	8005874 <malloc>
 80019c0:	4603      	mov	r3, r0
 80019c2:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 80019c4:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <Tx_setup+0x1f4>)
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 80019cc:	4b37      	ldr	r3, [pc, #220]	; (8001aac <Tx_setup+0x1f8>)
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <Tx_setup+0x1fc>)
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 80019dc:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <Tx_setup+0x200>)
 80019de:	781a      	ldrb	r2, [r3, #0]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	481f      	ldr	r0, [pc, #124]	; (8001a64 <Tx_setup+0x1b0>)
 80019e8:	f000 fb98 	bl	800211c <sx126x_set_lora_mod_params>
    free(mod_params);
 80019ec:	68b8      	ldr	r0, [r7, #8]
 80019ee:	f003 ff49 	bl	8005884 <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 80019f2:	2006      	movs	r0, #6
 80019f4:	f003 ff3e 	bl	8005874 <malloc>
 80019f8:	4603      	mov	r3, r0
 80019fa:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 80019fc:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <Tx_setup+0x204>)
 80019fe:	881a      	ldrh	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <Tx_setup+0x208>)
 8001a06:	781a      	ldrb	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <Tx_setup+0x20c>)
 8001a0e:	781a      	ldrb	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <Tx_setup+0x210>)
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <Tx_setup+0x214>)
 8001a1e:	781a      	ldrb	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	480f      	ldr	r0, [pc, #60]	; (8001a64 <Tx_setup+0x1b0>)
 8001a28:	f000 fba4 	bl	8002174 <sx126x_set_lora_pkt_params>
    free(lora_params);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f003 ff29 	bl	8005884 <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 8001a32:	4b26      	ldr	r3, [pc, #152]	; (8001acc <Tx_setup+0x218>)
 8001a34:	8819      	ldrh	r1, [r3, #0]
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <Tx_setup+0x21c>)
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <Tx_setup+0x220>)
 8001a3c:	8818      	ldrh	r0, [r3, #0]
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <Tx_setup+0x224>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	4603      	mov	r3, r0
 8001a46:	4807      	ldr	r0, [pc, #28]	; (8001a64 <Tx_setup+0x1b0>)
 8001a48:	f000 fa11 	bl	8001e6e <sx126x_set_dio_irq_params>

}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200000b4 	.word	0x200000b4
 8001a58:	200000b0 	.word	0x200000b0
 8001a5c:	200000ac 	.word	0x200000ac
 8001a60:	200000a8 	.word	0x200000a8
 8001a64:	200000c8 	.word	0x200000c8
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004
 8001a70:	20000005 	.word	0x20000005
 8001a74:	20000006 	.word	0x20000006
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	20000007 	.word	0x20000007
 8001a80:	20000009 	.word	0x20000009
 8001a84:	2000000a 	.word	0x2000000a
 8001a88:	2000000b 	.word	0x2000000b
 8001a8c:	2000000c 	.word	0x2000000c
 8001a90:	20000120 	.word	0x20000120
 8001a94:	2000000d 	.word	0x2000000d
 8001a98:	2000000e 	.word	0x2000000e
 8001a9c:	2000000f 	.word	0x2000000f
 8001aa0:	20000121 	.word	0x20000121
 8001aa4:	20000122 	.word	0x20000122
 8001aa8:	20000010 	.word	0x20000010
 8001aac:	20000011 	.word	0x20000011
 8001ab0:	20000012 	.word	0x20000012
 8001ab4:	20000123 	.word	0x20000123
 8001ab8:	20000014 	.word	0x20000014
 8001abc:	20000124 	.word	0x20000124
 8001ac0:	20000016 	.word	0x20000016
 8001ac4:	20000017 	.word	0x20000017
 8001ac8:	20000125 	.word	0x20000125
 8001acc:	20000018 	.word	0x20000018
 8001ad0:	2000001a 	.word	0x2000001a
 8001ad4:	20000126 	.word	0x20000126
 8001ad8:	20000128 	.word	0x20000128

08001adc <TxProtocol>:

void TxProtocol(uint8_t data[], uint8_t data_length){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <TxProtocol+0x6c>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	4817      	ldr	r0, [pc, #92]	; (8001b4c <TxProtocol+0x70>)
 8001af0:	f000 fa34 	bl	8001f5c <sx126x_clear_irq_status>
 8001af4:	4603      	mov	r3, r0
 8001af6:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_write_buffer(&hspi, 0, data, data_length); // 0 is the offset
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	2100      	movs	r1, #0
 8001afe:	4813      	ldr	r0, [pc, #76]	; (8001b4c <TxProtocol+0x70>)
 8001b00:	f000 f996 	bl	8001e30 <sx126x_write_buffer>
 8001b04:	4603      	mov	r3, r0
 8001b06:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_tx(&hspi, 6000, data_length);
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f241 7170 	movw	r1, #6000	; 0x1770
 8001b10:	480e      	ldr	r0, [pc, #56]	; (8001b4c <TxProtocol+0x70>)
 8001b12:	f000 f837 	bl	8001b84 <sx126x_set_tx>
 8001b16:	4603      	mov	r3, r0
 8001b18:	73fb      	strb	r3, [r7, #15]

    sx126x_irq_mask_t irq;
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480a      	ldr	r0, [pc, #40]	; (8001b4c <TxProtocol+0x70>)
 8001b22:	f000 f9e9 	bl	8001ef8 <sx126x_get_irq_status>
 8001b26:	4603      	mov	r3, r0
 8001b28:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_TX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 8001b2a:	89bb      	ldrh	r3, [r7, #12]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d104      	bne.n	8001b3e <TxProtocol+0x62>
 8001b34:	89bb      	ldrh	r3, [r7, #12]
 8001b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0ed      	beq.n	8001b1a <TxProtocol+0x3e>
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000001a 	.word	0x2000001a
 8001b4c:	200000c8 	.word	0x200000c8

08001b50 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 8001b68:	f107 010c 	add.w	r1, r7, #12
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2300      	movs	r3, #0
 8001b72:	2202      	movs	r2, #2
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fd9b 	bl	80016b0 <sx126x_hal_write>
 8001b7a:	4603      	mov	r3, r0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms , uint8_t lora_data_length)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	71fb      	strb	r3, [r7, #7]
    if (packet_type == SX126X_PKT_TYPE_LORA) {
 8001b92:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <sx126x_set_tx+0x7c>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d11e      	bne.n	8001bd8 <sx126x_set_tx+0x54>
        struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8001b9a:	2006      	movs	r0, #6
 8001b9c:	f003 fe6a 	bl	8005874 <malloc>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	617b      	str	r3, [r7, #20]
        lora_params->preamble_len_in_symb=pkt_preamble_len;
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <sx126x_set_tx+0x80>)
 8001ba6:	881a      	ldrh	r2, [r3, #0]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	801a      	strh	r2, [r3, #0]
        lora_params->header_type=header_type;
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <sx126x_set_tx+0x84>)
 8001bae:	781a      	ldrb	r2, [r3, #0]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	709a      	strb	r2, [r3, #2]
        lora_params->pld_len_in_bytes=lora_data_length;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	79fa      	ldrb	r2, [r7, #7]
 8001bb8:	70da      	strb	r2, [r3, #3]
        lora_params->crc_is_on=crc_is_on;
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <sx126x_set_tx+0x88>)
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	711a      	strb	r2, [r3, #4]
        lora_params->invert_iq_is_on=invert_iq_is_on;
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <sx126x_set_tx+0x8c>)
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	715a      	strb	r2, [r3, #5]
        sx126x_set_lora_pkt_params(&hspi, lora_params);
 8001bca:	6979      	ldr	r1, [r7, #20]
 8001bcc:	4811      	ldr	r0, [pc, #68]	; (8001c14 <sx126x_set_tx+0x90>)
 8001bce:	f000 fad1 	bl	8002174 <sx126x_set_lora_pkt_params>
        free(lora_params);
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f003 fe56 	bl	8005884 <free>
    }

    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bde:	d301      	bcc.n	8001be4 <sx126x_set_tx+0x60>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 8001be0:	2302      	movs	r3, #2
 8001be2:	e008      	b.n	8001bf6 <sx126x_set_tx+0x72>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 8001be4:	68b8      	ldr	r0, [r7, #8]
 8001be6:	f000 fb7d 	bl	80022e4 <sx126x_convert_timeout_in_ms_to_rtc_step>
 8001bea:	6138      	str	r0, [r7, #16]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 8001bec:	6939      	ldr	r1, [r7, #16]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f812 	bl	8001c18 <sx126x_set_tx_with_timeout_in_rtc_step>
 8001bf4:	4603      	mov	r3, r0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000004 	.word	0x20000004
 8001c04:	20000014 	.word	0x20000014
 8001c08:	20000124 	.word	0x20000124
 8001c0c:	20000017 	.word	0x20000017
 8001c10:	20000125 	.word	0x20000125
 8001c14:	200000c8 	.word	0x200000c8

08001c18 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_TX] = { 0 };
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_TX;
 8001c26:	2383      	movs	r3, #131	; 0x83
 8001c28:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 8001c40:	f107 010c 	add.w	r1, r7, #12
 8001c44:	2300      	movs	r3, #0
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff fd2f 	bl	80016b0 <sx126x_hal_write>
 8001c52:	4603      	mov	r3, r0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 8001c68:	2300      	movs	r3, #0
 8001c6a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 8001c6c:	2396      	movs	r3, #150	; 0x96
 8001c6e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 8001c74:	f107 010c 	add.w	r1, r7, #12
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2202      	movs	r2, #2
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fd15 	bl	80016b0 <sx126x_hal_write>
 8001c86:	4603      	mov	r3, r0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 8001ca0:	2389      	movs	r3, #137	; 0x89
 8001ca2:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 8001ca8:	f107 010c 	add.w	r1, r7, #12
 8001cac:	2300      	movs	r3, #0
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff fcfb 	bl	80016b0 <sx126x_hal_write>
 8001cba:	4603      	mov	r3, r0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af02      	add	r7, sp, #8
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <sx126x_cal_img_hex+0x44>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	81bb      	strh	r3, [r7, #12]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 8001cde:	2398      	movs	r3, #152	; 0x98
 8001ce0:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 8001ce6:	78bb      	ldrb	r3, [r7, #2]
 8001ce8:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 8001cea:	f107 010c 	add.w	r1, r7, #12
 8001cee:	2300      	movs	r3, #0
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fcda 	bl	80016b0 <sx126x_hal_write>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	080061b0 	.word	0x080061b0

08001d0c <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 8001d1e:	2395      	movs	r3, #149	; 0x95
 8001d20:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	789b      	ldrb	r3, [r3, #2]
 8001d32:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	78db      	ldrb	r3, [r3, #3]
 8001d38:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 8001d3a:	f107 0108 	add.w	r1, r7, #8
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2300      	movs	r3, #0
 8001d44:	2205      	movs	r2, #5
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff fcb2 	bl	80016b0 <sx126x_hal_write>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af02      	add	r7, sp, #8
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 8001d62:	2300      	movs	r3, #0
 8001d64:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 8001d66:	2393      	movs	r3, #147	; 0x93
 8001d68:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 8001d6e:	f107 010c 	add.w	r1, r7, #12
 8001d72:	2300      	movs	r3, #0
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	2300      	movs	r3, #0
 8001d78:	2202      	movs	r2, #2
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fc98 	bl	80016b0 <sx126x_hal_write>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	461a      	mov	r2, r3
 8001d98:	460b      	mov	r3, r1
 8001d9a:	817b      	strh	r3, [r7, #10]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 8001da0:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <sx126x_write_register+0x50>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	82bb      	strh	r3, [r7, #20]
 8001da6:	2300      	movs	r3, #0
 8001da8:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 8001daa:	230d      	movs	r3, #13
 8001dac:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 8001dae:	897b      	ldrh	r3, [r7, #10]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 8001db8:	897b      	ldrh	r3, [r7, #10]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 8001dbe:	7a7b      	ldrb	r3, [r7, #9]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	f107 0114 	add.w	r1, r7, #20
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2203      	movs	r2, #3
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f7ff fc6f 	bl	80016b0 <sx126x_hal_write>
 8001dd2:	4603      	mov	r3, r0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	080061b0 	.word	0x080061b0

08001de0 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	461a      	mov	r2, r3
 8001dec:	460b      	mov	r3, r1
 8001dee:	817b      	strh	r3, [r7, #10]
 8001df0:	4613      	mov	r3, r2
 8001df2:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 8001dfc:	231d      	movs	r3, #29
 8001dfe:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 8001e00:	897b      	ldrh	r3, [r7, #10]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 8001e0a:	897b      	ldrh	r3, [r7, #10]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 8001e10:	f107 0110 	add.w	r1, r7, #16
 8001e14:	7a7b      	ldrb	r3, [r7, #9]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f7ff fc8b 	bl	8001738 <sx126x_hal_read>
 8001e22:	4603      	mov	r3, r0
 8001e24:	75fb      	strb	r3, [r7, #23]

    return status;
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t buffer_offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	72fb      	strb	r3, [r7, #11]
 8001e40:	4613      	mov	r3, r2
 8001e42:	72bb      	strb	r3, [r7, #10]
    uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = { 0 };
 8001e44:	2300      	movs	r3, #0
 8001e46:	82bb      	strh	r3, [r7, #20]

    buf[0] = SX126X_WRITE_BUFFER;
 8001e48:	230e      	movs	r3, #14
 8001e4a:	753b      	strb	r3, [r7, #20]

    buf[1] = buffer_offset;
 8001e4c:	7afb      	ldrb	r3, [r7, #11]
 8001e4e:	757b      	strb	r3, [r7, #21]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 8001e50:	7abb      	ldrb	r3, [r7, #10]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	f107 0114 	add.w	r1, r7, #20
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff fc26 	bl	80016b0 <sx126x_hal_write>
 8001e64:	4603      	mov	r3, r0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b08a      	sub	sp, #40	; 0x28
 8001e72:	af02      	add	r7, sp, #8
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	4608      	mov	r0, r1
 8001e78:	4611      	mov	r1, r2
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	817b      	strh	r3, [r7, #10]
 8001e80:	460b      	mov	r3, r1
 8001e82:	813b      	strh	r3, [r7, #8]
 8001e84:	4613      	mov	r3, r2
 8001e86:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	f107 0318 	add.w	r3, r7, #24
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 8001e96:	2308      	movs	r3, #8
 8001e98:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 8001e9a:	897b      	ldrh	r3, [r7, #10]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 8001ea4:	897b      	ldrh	r3, [r7, #10]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 8001eaa:	893b      	ldrh	r3, [r7, #8]
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 8001eb4:	893b      	ldrh	r3, [r7, #8]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 8001eca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 8001ed4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 8001eda:	f107 0114 	add.w	r1, r7, #20
 8001ede:	2300      	movs	r3, #0
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2209      	movs	r2, #9
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f7ff fbe2 	bl	80016b0 <sx126x_hal_write>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3720      	adds	r7, #32
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <sx126x_get_irq_status>:

sx126x_status_t sx126x_get_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_IRQ_STATUS]             = { 0x00 }; //0x00 is no operational, its just so that theyre equal
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
    uint8_t         received_buf[sizeof( sx126x_irq_mask_t )+1] = { 0x00 };
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <sx126x_get_irq_status+0x60>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	81bb      	strh	r3, [r7, #12]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                      = SX126X_STATUS_ERROR;
 8001f10:	2303      	movs	r3, #3
 8001f12:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_IRQ_STATUS;
 8001f14:	2312      	movs	r3, #18
 8001f16:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_IRQ_STATUS, received_buf,
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	f107 0110 	add.w	r1, r7, #16
 8001f20:	2201      	movs	r2, #1
 8001f22:	9200      	str	r2, [sp, #0]
 8001f24:	2204      	movs	r2, #4
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff fc06 	bl	8001738 <sx126x_hal_read>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_IRQ_STATUS );

    if( status == SX126X_STATUS_OK )
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10b      	bne.n	8001f4e <sx126x_get_irq_status+0x56>
    {
        *irq = ( ( sx126x_irq_mask_t ) received_buf[1] << 8 ) | ( ( sx126x_irq_mask_t ) received_buf[2] << 0 );
 8001f36:	7b7b      	ldrb	r3, [r7, #13]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	b21a      	sxth	r2, r3
 8001f3c:	7bbb      	ldrb	r3, [r7, #14]
 8001f3e:	b21b      	sxth	r3, r3
 8001f40:	4313      	orrs	r3, r2
 8001f42:	b21b      	sxth	r3, r3
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	801a      	strh	r2, [r3, #0]
        status = received_buf[0]; //its the status
 8001f4a:	7b3b      	ldrb	r3, [r7, #12]
 8001f4c:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	080061b0 	.word	0x080061b0

08001f5c <sx126x_clear_irq_status>:

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = { 0 };
 8001f68:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <sx126x_clear_irq_status+0x48>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	81bb      	strh	r3, [r7, #12]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CLR_IRQ_STATUS;
 8001f72:	2302      	movs	r3, #2
 8001f74:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 8001f80:	887b      	ldrh	r3, [r7, #2]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 8001f86:	f107 010c 	add.w	r1, r7, #12
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2203      	movs	r2, #3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fb8c 	bl	80016b0 <sx126x_hal_write>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	080061b0 	.word	0x080061b0

08001fa8 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 8001fb8:	239d      	movs	r3, #157	; 0x9d
 8001fba:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 8001fc0:	f107 010c 	add.w	r1, r7, #12
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	2202      	movs	r2, #2
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fb6f 	bl	80016b0 <sx126x_hal_write>
 8001fd2:	4603      	mov	r3, r0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 8001ff2:	2397      	movs	r3, #151	; 0x97
 8001ff4:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 8001ff6:	7afb      	ldrb	r3, [r7, #11]
 8001ff8:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	0c1b      	lsrs	r3, r3, #16
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	b2db      	uxtb	r3, r3
 8002008:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 8002010:	f107 0110 	add.w	r1, r7, #16
 8002014:	2300      	movs	r3, #0
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2300      	movs	r3, #0
 800201a:	2205      	movs	r2, #5
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f7ff fb47 	bl	80016b0 <sx126x_hal_write>
 8002022:	4603      	mov	r3, r0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 8002036:	6838      	ldr	r0, [r7, #0]
 8002038:	f000 f92e 	bl	8002298 <sx126x_convert_freq_in_hz_to_pll_step>
 800203c:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800203e:	68f9      	ldr	r1, [r7, #12]
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f805 	bl	8002050 <sx126x_set_rf_freq_in_pll_steps>
 8002046:	4603      	mov	r3, r0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af02      	add	r7, sp, #8
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	2300      	movs	r3, #0
 8002060:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 8002062:	2386      	movs	r3, #134	; 0x86
 8002064:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	0e1b      	lsrs	r3, r3, #24
 800206a:	b2db      	uxtb	r3, r3
 800206c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	0c1b      	lsrs	r3, r3, #16
 8002072:	b2db      	uxtb	r3, r3
 8002074:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	b2db      	uxtb	r3, r3
 800207c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 8002084:	f107 0108 	add.w	r1, r7, #8
 8002088:	2300      	movs	r3, #0
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2300      	movs	r3, #0
 800208e:	2205      	movs	r2, #5
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fb0d 	bl	80016b0 <sx126x_hal_write>
 8002096:	4603      	mov	r3, r0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 80020ac:	2300      	movs	r3, #0
 80020ae:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 80020b0:	238a      	movs	r3, #138	; 0x8a
 80020b2:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 80020b8:	f107 010c 	add.w	r1, r7, #12
 80020bc:	2300      	movs	r3, #0
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	2300      	movs	r3, #0
 80020c2:	2202      	movs	r2, #2
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff faf3 	bl	80016b0 <sx126x_hal_write>
 80020ca:	4603      	mov	r3, r0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af02      	add	r7, sp, #8
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
 80020e0:	4613      	mov	r3, r2
 80020e2:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <sx126x_set_tx_params+0x44>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	81bb      	strh	r3, [r7, #12]
 80020ea:	2300      	movs	r3, #0
 80020ec:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 80020ee:	238e      	movs	r3, #142	; 0x8e
 80020f0:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 80020f6:	78bb      	ldrb	r3, [r7, #2]
 80020f8:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 80020fa:	f107 010c 	add.w	r1, r7, #12
 80020fe:	2300      	movs	r3, #0
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	2300      	movs	r3, #0
 8002104:	2203      	movs	r2, #3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff fad2 	bl	80016b0 <sx126x_hal_write>
 800210c:	4603      	mov	r3, r0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	080061b0 	.word	0x080061b0

0800211c <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af02      	add	r7, sp, #8
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 8002126:	2303      	movs	r3, #3
 8002128:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	2300      	movs	r3, #0
 8002130:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 8002132:	238b      	movs	r3, #139	; 0x8b
 8002134:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	785b      	ldrb	r3, [r3, #1]
 8002140:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	789b      	ldrb	r3, [r3, #2]
 8002146:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	78db      	ldrb	r3, [r3, #3]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 8002154:	f107 0108 	add.w	r1, r7, #8
 8002158:	2300      	movs	r3, #0
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2300      	movs	r3, #0
 800215e:	2205      	movs	r2, #5
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff faa5 	bl	80016b0 <sx126x_hal_write>
 8002166:	4603      	mov	r3, r0
 8002168:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 800216a:	7bfb      	ldrb	r3, [r7, #15]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af02      	add	r7, sp, #8
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800217e:	2303      	movs	r3, #3
 8002180:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	2100      	movs	r1, #0
 800218c:	460a      	mov	r2, r1
 800218e:	801a      	strh	r2, [r3, #0]
 8002190:	460a      	mov	r2, r1
 8002192:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 8002194:	238c      	movs	r3, #140	; 0x8c
 8002196:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	b29b      	uxth	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	789b      	ldrb	r3, [r3, #2]
 80021b0:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	78db      	ldrb	r3, [r3, #3]
 80021b6:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	791b      	ldrb	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <sx126x_set_lora_pkt_params+0x50>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <sx126x_set_lora_pkt_params+0x52>
 80021c4:	2300      	movs	r3, #0
 80021c6:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	795b      	ldrb	r3, [r3, #5]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <sx126x_set_lora_pkt_params+0x60>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <sx126x_set_lora_pkt_params+0x62>
 80021d4:	2300      	movs	r3, #0
 80021d6:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 80021d8:	f107 0110 	add.w	r1, r7, #16
 80021dc:	2300      	movs	r3, #0
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	2300      	movs	r3, #0
 80021e2:	2207      	movs	r2, #7
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff fa63 	bl	80016b0 <sx126x_hal_write>
 80021ea:	4603      	mov	r3, r0
 80021ec:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 80021ee:	7dfb      	ldrb	r3, [r7, #23]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d127      	bne.n	8002244 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 80021f8:	f107 020f 	add.w	r2, r7, #15
 80021fc:	2301      	movs	r3, #1
 80021fe:	f240 7136 	movw	r1, #1846	; 0x736
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff fdec 	bl	8001de0 <sx126x_read_register>
 8002208:	4603      	mov	r3, r0
 800220a:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800220c:	7dfb      	ldrb	r3, [r7, #23]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d118      	bne.n	8002244 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	795b      	ldrb	r3, [r3, #5]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	f023 0304 	bic.w	r3, r3, #4
 8002220:	b2db      	uxtb	r3, r3
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	e004      	b.n	8002230 <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	b2db      	uxtb	r3, r3
 800222e:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 8002230:	f107 020f 	add.w	r2, r7, #15
 8002234:	2301      	movs	r3, #1
 8002236:	f240 7136 	movw	r1, #1846	; 0x736
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fda6 	bl	8001d8c <sx126x_write_register>
 8002240:	4603      	mov	r3, r0
 8002242:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 8002244:	7dfb      	ldrb	r3, [r7, #23]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af02      	add	r7, sp, #8
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	70fb      	strb	r3, [r7, #3]
 800225c:	4613      	mov	r3, r2
 800225e:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <sx126x_set_buffer_base_address+0x44>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	81bb      	strh	r3, [r7, #12]
 8002266:	2300      	movs	r3, #0
 8002268:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 800226a:	238f      	movs	r3, #143	; 0x8f
 800226c:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 8002272:	78bb      	ldrb	r3, [r7, #2]
 8002274:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 8002276:	f107 010c 	add.w	r1, r7, #12
 800227a:	2300      	movs	r3, #0
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	2300      	movs	r3, #0
 8002280:	2203      	movs	r2, #3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fa14 	bl	80016b0 <sx126x_hal_write>
 8002288:	4603      	mov	r3, r0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	080061b0 	.word	0x080061b0

08002298 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	0b1b      	lsrs	r3, r3, #12
 80022aa:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f643 5209 	movw	r2, #15625	; 0x3d09
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	039b      	lsls	r3, r3, #14
 80022c4:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 80022c8:	3304      	adds	r3, #4
 80022ca:	4905      	ldr	r1, [pc, #20]	; (80022e0 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 80022cc:	fba1 1303 	umull	r1, r3, r1, r3
 80022d0:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 80022d2:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	431bde83 	.word	0x431bde83

080022e4 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	019b      	lsls	r3, r3, #6
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002304:	4a14      	ldr	r2, [pc, #80]	; (8002358 <_sbrk+0x5c>)
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <_sbrk+0x60>)
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <_sbrk+0x64>)
 800231a:	4a12      	ldr	r2, [pc, #72]	; (8002364 <_sbrk+0x68>)
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <_sbrk+0x64>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	429a      	cmp	r2, r3
 800232a:	d207      	bcs.n	800233c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800232c:	f003 fa78 	bl	8005820 <__errno>
 8002330:	4603      	mov	r3, r0
 8002332:	220c      	movs	r2, #12
 8002334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	e009      	b.n	8002350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <_sbrk+0x64>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	4a05      	ldr	r2, [pc, #20]	; (8002360 <_sbrk+0x64>)
 800234c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234e:	68fb      	ldr	r3, [r7, #12]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20030000 	.word	0x20030000
 800235c:	00000400 	.word	0x00000400
 8002360:	2000012c 	.word	0x2000012c
 8002364:	20000930 	.word	0x20000930

08002368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <SystemInit+0x20>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <SystemInit+0x20>)
 8002374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800238c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002390:	480d      	ldr	r0, [pc, #52]	; (80023c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002392:	490e      	ldr	r1, [pc, #56]	; (80023cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002394:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002398:	e002      	b.n	80023a0 <LoopCopyDataInit>

0800239a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800239c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239e:	3304      	adds	r3, #4

080023a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a4:	d3f9      	bcc.n	800239a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023a8:	4c0b      	ldr	r4, [pc, #44]	; (80023d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ac:	e001      	b.n	80023b2 <LoopFillZerobss>

080023ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b0:	3204      	adds	r2, #4

080023b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b4:	d3fb      	bcc.n	80023ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023b6:	f7ff ffd7 	bl	8002368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ba:	f003 fa37 	bl	800582c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023be:	f7fe f8e3 	bl	8000588 <main>
  bx  lr    
 80023c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023c4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80023c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023cc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80023d0:	08006210 	.word	0x08006210
  ldr r2, =_sbss
 80023d4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80023d8:	20000930 	.word	0x20000930

080023dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023dc:	e7fe      	b.n	80023dc <ADC_IRQHandler>
	...

080023e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <HAL_Init+0x40>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <HAL_Init+0x40>)
 80023ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_Init+0x40>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <HAL_Init+0x40>)
 80023f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <HAL_Init+0x40>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a07      	ldr	r2, [pc, #28]	; (8002420 <HAL_Init+0x40>)
 8002402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002406:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002408:	2003      	movs	r0, #3
 800240a:	f000 fba3 	bl	8002b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800240e:	2000      	movs	r0, #0
 8002410:	f000 f808 	bl	8002424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002414:	f7fe fdc4 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023c00 	.word	0x40023c00

08002424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800242c:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_InitTick+0x54>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <HAL_InitTick+0x58>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800243a:	fbb3 f3f1 	udiv	r3, r3, r1
 800243e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fbad 	bl	8002ba2 <HAL_SYSTICK_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e00e      	b.n	8002470 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b0f      	cmp	r3, #15
 8002456:	d80a      	bhi.n	800246e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002458:	2200      	movs	r2, #0
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
 8002460:	f000 fb83 	bl	8002b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002464:	4a06      	ldr	r2, [pc, #24]	; (8002480 <HAL_InitTick+0x5c>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	e000      	b.n	8002470 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	2000001c 	.word	0x2000001c
 800247c:	20000024 	.word	0x20000024
 8002480:	20000020 	.word	0x20000020

08002484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_IncTick+0x20>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_IncTick+0x24>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4413      	add	r3, r2
 8002494:	4a04      	ldr	r2, [pc, #16]	; (80024a8 <HAL_IncTick+0x24>)
 8002496:	6013      	str	r3, [r2, #0]
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000024 	.word	0x20000024
 80024a8:	2000091c 	.word	0x2000091c

080024ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return uwTick;
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <HAL_GetTick+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	2000091c 	.word	0x2000091c

080024c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024cc:	f7ff ffee 	bl	80024ac <HAL_GetTick>
 80024d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024dc:	d005      	beq.n	80024ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_Delay+0x44>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024ea:	bf00      	nop
 80024ec:	f7ff ffde 	bl	80024ac <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d8f7      	bhi.n	80024ec <HAL_Delay+0x28>
  {
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000024 	.word	0x20000024

0800250c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e033      	b.n	800258a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fd60 	bl	8000ff0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b00      	cmp	r3, #0
 8002548:	d118      	bne.n	800257c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002552:	f023 0302 	bic.w	r3, r3, #2
 8002556:	f043 0202 	orr.w	r2, r3, #2
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f94a 	bl	80027f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f023 0303 	bic.w	r3, r3, #3
 8002572:	f043 0201 	orr.w	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
 800257a:	e001      	b.n	8002580 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x1c>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e113      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x244>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b09      	cmp	r3, #9
 80025be:	d925      	bls.n	800260c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68d9      	ldr	r1, [r3, #12]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	3b1e      	subs	r3, #30
 80025d6:	2207      	movs	r2, #7
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43da      	mvns	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	400a      	ands	r2, r1
 80025e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68d9      	ldr	r1, [r3, #12]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	4618      	mov	r0, r3
 80025f8:	4603      	mov	r3, r0
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4403      	add	r3, r0
 80025fe:	3b1e      	subs	r3, #30
 8002600:	409a      	lsls	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	e022      	b.n	8002652 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6919      	ldr	r1, [r3, #16]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	2207      	movs	r2, #7
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43da      	mvns	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	400a      	ands	r2, r1
 800262e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6919      	ldr	r1, [r3, #16]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	4618      	mov	r0, r3
 8002642:	4603      	mov	r3, r0
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4403      	add	r3, r0
 8002648:	409a      	lsls	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b06      	cmp	r3, #6
 8002658:	d824      	bhi.n	80026a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	3b05      	subs	r3, #5
 800266c:	221f      	movs	r2, #31
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	400a      	ands	r2, r1
 800267a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3b05      	subs	r3, #5
 8002696:	fa00 f203 	lsl.w	r2, r0, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	635a      	str	r2, [r3, #52]	; 0x34
 80026a2:	e04c      	b.n	800273e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d824      	bhi.n	80026f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	3b23      	subs	r3, #35	; 0x23
 80026be:	221f      	movs	r2, #31
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43da      	mvns	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	400a      	ands	r2, r1
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	3b23      	subs	r3, #35	; 0x23
 80026e8:	fa00 f203 	lsl.w	r2, r0, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
 80026f4:	e023      	b.n	800273e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	3b41      	subs	r3, #65	; 0x41
 8002708:	221f      	movs	r2, #31
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	400a      	ands	r2, r1
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	3b41      	subs	r3, #65	; 0x41
 8002732:	fa00 f203 	lsl.w	r2, r0, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800273e:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <HAL_ADC_ConfigChannel+0x250>)
 8002740:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a28      	ldr	r2, [pc, #160]	; (80027e8 <HAL_ADC_ConfigChannel+0x254>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d10f      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1d8>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b12      	cmp	r3, #18
 8002752:	d10b      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <HAL_ADC_ConfigChannel+0x254>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d12b      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x23a>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <HAL_ADC_ConfigChannel+0x258>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d003      	beq.n	8002788 <HAL_ADC_ConfigChannel+0x1f4>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b11      	cmp	r3, #17
 8002786:	d122      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a11      	ldr	r2, [pc, #68]	; (80027ec <HAL_ADC_ConfigChannel+0x258>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d111      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_ADC_ConfigChannel+0x25c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a11      	ldr	r2, [pc, #68]	; (80027f4 <HAL_ADC_ConfigChannel+0x260>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	0c9a      	lsrs	r2, r3, #18
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027c0:	e002      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f9      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40012300 	.word	0x40012300
 80027e8:	40012000 	.word	0x40012000
 80027ec:	10000012 	.word	0x10000012
 80027f0:	2000001c 	.word	0x2000001c
 80027f4:	431bde83 	.word	0x431bde83

080027f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002800:	4b79      	ldr	r3, [pc, #484]	; (80029e8 <ADC_Init+0x1f0>)
 8002802:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	431a      	orrs	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800282c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	021a      	lsls	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002850:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002872:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6899      	ldr	r1, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	4a58      	ldr	r2, [pc, #352]	; (80029ec <ADC_Init+0x1f4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d022      	beq.n	80028d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800289e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6899      	ldr	r1, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6899      	ldr	r1, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	e00f      	b.n	80028f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0202 	bic.w	r2, r2, #2
 8002904:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6899      	ldr	r1, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	7e1b      	ldrb	r3, [r3, #24]
 8002910:	005a      	lsls	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01b      	beq.n	800295c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002932:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002942:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	3b01      	subs	r3, #1
 8002950:	035a      	lsls	r2, r3, #13
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	e007      	b.n	800296c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800296a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800297a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	3b01      	subs	r3, #1
 8002988:	051a      	lsls	r2, r3, #20
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6899      	ldr	r1, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029ae:	025a      	lsls	r2, r3, #9
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6899      	ldr	r1, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	029a      	lsls	r2, r3, #10
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	609a      	str	r2, [r3, #8]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40012300 	.word	0x40012300
 80029ec:	0f000001 	.word	0x0f000001

080029f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a22:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	60d3      	str	r3, [r2, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <__NVIC_GetPriorityGrouping+0x18>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	f003 0307 	and.w	r3, r3, #7
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	db0a      	blt.n	8002a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	490c      	ldr	r1, [pc, #48]	; (8002aa0 <__NVIC_SetPriority+0x4c>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	440b      	add	r3, r1
 8002a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a7c:	e00a      	b.n	8002a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4908      	ldr	r1, [pc, #32]	; (8002aa4 <__NVIC_SetPriority+0x50>)
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	440b      	add	r3, r1
 8002a92:	761a      	strb	r2, [r3, #24]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f1c3 0307 	rsb	r3, r3, #7
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	bf28      	it	cs
 8002ac6:	2304      	movcs	r3, #4
 8002ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d902      	bls.n	8002ad8 <NVIC_EncodePriority+0x30>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3b03      	subs	r3, #3
 8002ad6:	e000      	b.n	8002ada <NVIC_EncodePriority+0x32>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	401a      	ands	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af0:	f04f 31ff 	mov.w	r1, #4294967295
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	43d9      	mvns	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	4313      	orrs	r3, r2
         );
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3724      	adds	r7, #36	; 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b20:	d301      	bcc.n	8002b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00f      	b.n	8002b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <SysTick_Config+0x40>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2e:	210f      	movs	r1, #15
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295
 8002b34:	f7ff ff8e 	bl	8002a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <SysTick_Config+0x40>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3e:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <SysTick_Config+0x40>)
 8002b40:	2207      	movs	r2, #7
 8002b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	e000e010 	.word	0xe000e010

08002b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ff47 	bl	80029f0 <__NVIC_SetPriorityGrouping>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b7c:	f7ff ff5c 	bl	8002a38 <__NVIC_GetPriorityGrouping>
 8002b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	6978      	ldr	r0, [r7, #20]
 8002b88:	f7ff ff8e 	bl	8002aa8 <NVIC_EncodePriority>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff5d 	bl	8002a54 <__NVIC_SetPriority>
}
 8002b9a:	bf00      	nop
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff ffb0 	bl	8002b10 <SysTick_Config>
 8002bb0:	4603      	mov	r3, r0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	; 0x24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	e177      	b.n	8002ec8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	f040 8166 	bne.w	8002ec2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d005      	beq.n	8002c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d130      	bne.n	8002c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c44:	2201      	movs	r2, #1
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 0201 	and.w	r2, r3, #1
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d017      	beq.n	8002cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	2203      	movs	r2, #3
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d123      	bne.n	8002d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	08da      	lsrs	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3208      	adds	r2, #8
 8002cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	220f      	movs	r2, #15
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	08da      	lsrs	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3208      	adds	r2, #8
 8002cfa:	69b9      	ldr	r1, [r7, #24]
 8002cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0203 	and.w	r2, r3, #3
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80c0 	beq.w	8002ec2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	4b66      	ldr	r3, [pc, #408]	; (8002ee0 <HAL_GPIO_Init+0x324>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	4a65      	ldr	r2, [pc, #404]	; (8002ee0 <HAL_GPIO_Init+0x324>)
 8002d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d50:	6453      	str	r3, [r2, #68]	; 0x44
 8002d52:	4b63      	ldr	r3, [pc, #396]	; (8002ee0 <HAL_GPIO_Init+0x324>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d5e:	4a61      	ldr	r2, [pc, #388]	; (8002ee4 <HAL_GPIO_Init+0x328>)
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	3302      	adds	r3, #2
 8002d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	220f      	movs	r2, #15
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <HAL_GPIO_Init+0x32c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d037      	beq.n	8002dfa <HAL_GPIO_Init+0x23e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a57      	ldr	r2, [pc, #348]	; (8002eec <HAL_GPIO_Init+0x330>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d031      	beq.n	8002df6 <HAL_GPIO_Init+0x23a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a56      	ldr	r2, [pc, #344]	; (8002ef0 <HAL_GPIO_Init+0x334>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d02b      	beq.n	8002df2 <HAL_GPIO_Init+0x236>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a55      	ldr	r2, [pc, #340]	; (8002ef4 <HAL_GPIO_Init+0x338>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d025      	beq.n	8002dee <HAL_GPIO_Init+0x232>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a54      	ldr	r2, [pc, #336]	; (8002ef8 <HAL_GPIO_Init+0x33c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01f      	beq.n	8002dea <HAL_GPIO_Init+0x22e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a53      	ldr	r2, [pc, #332]	; (8002efc <HAL_GPIO_Init+0x340>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d019      	beq.n	8002de6 <HAL_GPIO_Init+0x22a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a52      	ldr	r2, [pc, #328]	; (8002f00 <HAL_GPIO_Init+0x344>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <HAL_GPIO_Init+0x226>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a51      	ldr	r2, [pc, #324]	; (8002f04 <HAL_GPIO_Init+0x348>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00d      	beq.n	8002dde <HAL_GPIO_Init+0x222>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a50      	ldr	r2, [pc, #320]	; (8002f08 <HAL_GPIO_Init+0x34c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <HAL_GPIO_Init+0x21e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4f      	ldr	r2, [pc, #316]	; (8002f0c <HAL_GPIO_Init+0x350>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_GPIO_Init+0x21a>
 8002dd2:	2309      	movs	r3, #9
 8002dd4:	e012      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	e010      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dda:	2308      	movs	r3, #8
 8002ddc:	e00e      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dde:	2307      	movs	r3, #7
 8002de0:	e00c      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002de2:	2306      	movs	r3, #6
 8002de4:	e00a      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002de6:	2305      	movs	r3, #5
 8002de8:	e008      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dea:	2304      	movs	r3, #4
 8002dec:	e006      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dee:	2303      	movs	r3, #3
 8002df0:	e004      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e002      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	f002 0203 	and.w	r2, r2, #3
 8002e02:	0092      	lsls	r2, r2, #2
 8002e04:	4093      	lsls	r3, r2
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e0c:	4935      	ldr	r1, [pc, #212]	; (8002ee4 <HAL_GPIO_Init+0x328>)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	3302      	adds	r3, #2
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e1a:	4b3d      	ldr	r3, [pc, #244]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e3e:	4a34      	ldr	r2, [pc, #208]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e44:	4b32      	ldr	r3, [pc, #200]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e68:	4a29      	ldr	r2, [pc, #164]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e6e:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e92:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <HAL_GPIO_Init+0x354>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b0f      	cmp	r3, #15
 8002ecc:	f67f ae84 	bls.w	8002bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	3724      	adds	r7, #36	; 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40013800 	.word	0x40013800
 8002ee8:	40020000 	.word	0x40020000
 8002eec:	40020400 	.word	0x40020400
 8002ef0:	40020800 	.word	0x40020800
 8002ef4:	40020c00 	.word	0x40020c00
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40021400 	.word	0x40021400
 8002f00:	40021800 	.word	0x40021800
 8002f04:	40021c00 	.word	0x40021c00
 8002f08:	40022000 	.word	0x40022000
 8002f0c:	40022400 	.word	0x40022400
 8002f10:	40013c00 	.word	0x40013c00

08002f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	887b      	ldrh	r3, [r7, #2]
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
 8002f30:	e001      	b.n	8002f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
 8002f50:	4613      	mov	r3, r2
 8002f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f54:	787b      	ldrb	r3, [r7, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f60:	e003      	b.n	8002f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	041a      	lsls	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	619a      	str	r2, [r3, #24]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e12b      	b.n	80031e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe f86a 	bl	8001078 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fdc:	f000 fef2 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4a81      	ldr	r2, [pc, #516]	; (80031ec <HAL_I2C_Init+0x274>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d807      	bhi.n	8002ffc <HAL_I2C_Init+0x84>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4a80      	ldr	r2, [pc, #512]	; (80031f0 <HAL_I2C_Init+0x278>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	bf94      	ite	ls
 8002ff4:	2301      	movls	r3, #1
 8002ff6:	2300      	movhi	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	e006      	b.n	800300a <HAL_I2C_Init+0x92>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a7d      	ldr	r2, [pc, #500]	; (80031f4 <HAL_I2C_Init+0x27c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	bf94      	ite	ls
 8003004:	2301      	movls	r3, #1
 8003006:	2300      	movhi	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e0e7      	b.n	80031e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a78      	ldr	r2, [pc, #480]	; (80031f8 <HAL_I2C_Init+0x280>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	0c9b      	lsrs	r3, r3, #18
 800301c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4a6a      	ldr	r2, [pc, #424]	; (80031ec <HAL_I2C_Init+0x274>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d802      	bhi.n	800304c <HAL_I2C_Init+0xd4>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	3301      	adds	r3, #1
 800304a:	e009      	b.n	8003060 <HAL_I2C_Init+0xe8>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	4a69      	ldr	r2, [pc, #420]	; (80031fc <HAL_I2C_Init+0x284>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	099b      	lsrs	r3, r3, #6
 800305e:	3301      	adds	r3, #1
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	430b      	orrs	r3, r1
 8003066:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003072:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	495c      	ldr	r1, [pc, #368]	; (80031ec <HAL_I2C_Init+0x274>)
 800307c:	428b      	cmp	r3, r1
 800307e:	d819      	bhi.n	80030b4 <HAL_I2C_Init+0x13c>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1e59      	subs	r1, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	fbb1 f3f3 	udiv	r3, r1, r3
 800308e:	1c59      	adds	r1, r3, #1
 8003090:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003094:	400b      	ands	r3, r1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_I2C_Init+0x138>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1e59      	subs	r1, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ae:	e051      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 80030b0:	2304      	movs	r3, #4
 80030b2:	e04f      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d111      	bne.n	80030e0 <HAL_I2C_Init+0x168>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1e58      	subs	r0, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	440b      	add	r3, r1
 80030ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ce:	3301      	adds	r3, #1
 80030d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	e012      	b.n	8003106 <HAL_I2C_Init+0x18e>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1e58      	subs	r0, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	0099      	lsls	r1, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f6:	3301      	adds	r3, #1
 80030f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Init+0x196>
 800310a:	2301      	movs	r3, #1
 800310c:	e022      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10e      	bne.n	8003134 <HAL_I2C_Init+0x1bc>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1e58      	subs	r0, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	440b      	add	r3, r1
 8003124:	fbb0 f3f3 	udiv	r3, r0, r3
 8003128:	3301      	adds	r3, #1
 800312a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003132:	e00f      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1e58      	subs	r0, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	0099      	lsls	r1, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	fbb0 f3f3 	udiv	r3, r0, r3
 800314a:	3301      	adds	r3, #1
 800314c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	6809      	ldr	r1, [r1, #0]
 8003158:	4313      	orrs	r3, r2
 800315a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003182:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6911      	ldr	r1, [r2, #16]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68d2      	ldr	r2, [r2, #12]
 800318e:	4311      	orrs	r1, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	430b      	orrs	r3, r1
 8003196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	000186a0 	.word	0x000186a0
 80031f0:	001e847f 	.word	0x001e847f
 80031f4:	003d08ff 	.word	0x003d08ff
 80031f8:	431bde83 	.word	0x431bde83
 80031fc:	10624dd3 	.word	0x10624dd3

08003200 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b20      	cmp	r3, #32
 8003214:	d129      	bne.n	800326a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2224      	movs	r2, #36	; 0x24
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0210 	bic.w	r2, r2, #16
 800323c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e000      	b.n	800326c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b20      	cmp	r3, #32
 8003290:	d12a      	bne.n	80032e8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2224      	movs	r2, #36	; 0x24
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80032b2:	89fb      	ldrh	r3, [r7, #14]
 80032b4:	f023 030f 	bic.w	r3, r3, #15
 80032b8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	b29a      	uxth	r2, r3
 80032be:	89fb      	ldrh	r3, [r7, #14]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	89fa      	ldrh	r2, [r7, #14]
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e000      	b.n	80032ea <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80032e8:	2302      	movs	r3, #2
  }
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f8:	b08f      	sub	sp, #60	; 0x3c
 80032fa:	af0a      	add	r7, sp, #40	; 0x28
 80032fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e10f      	b.n	8003528 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fe f940 	bl	80015a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2203      	movs	r2, #3
 800332c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f001 ffeb 	bl	8005322 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	687e      	ldr	r6, [r7, #4]
 8003354:	466d      	mov	r5, sp
 8003356:	f106 0410 	add.w	r4, r6, #16
 800335a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800335c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800335e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003362:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003366:	e885 0003 	stmia.w	r5, {r0, r1}
 800336a:	1d33      	adds	r3, r6, #4
 800336c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800336e:	6838      	ldr	r0, [r7, #0]
 8003370:	f001 ff76 	bl	8005260 <USB_CoreInit>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2202      	movs	r2, #2
 800337e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e0d0      	b.n	8003528 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f001 ffd9 	bl	8005344 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]
 8003396:	e04a      	b.n	800342e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	333d      	adds	r3, #61	; 0x3d
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	333c      	adds	r3, #60	; 0x3c
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	b298      	uxth	r0, r3
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3342      	adds	r3, #66	; 0x42
 80033d4:	4602      	mov	r2, r0
 80033d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	333f      	adds	r3, #63	; 0x3f
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033ec:	7bfa      	ldrb	r2, [r7, #15]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	3344      	adds	r3, #68	; 0x44
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3348      	adds	r3, #72	; 0x48
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	3350      	adds	r3, #80	; 0x50
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	3301      	adds	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	429a      	cmp	r2, r3
 8003436:	d3af      	bcc.n	8003398 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]
 800343c:	e044      	b.n	80034c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800343e:	7bfa      	ldrb	r2, [r7, #15]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003454:	7bfa      	ldrb	r2, [r7, #15]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	3301      	adds	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d3b5      	bcc.n	800343e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	687e      	ldr	r6, [r7, #4]
 80034da:	466d      	mov	r5, sp
 80034dc:	f106 0410 	add.w	r4, r6, #16
 80034e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80034f0:	1d33      	adds	r3, r6, #4
 80034f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f4:	6838      	ldr	r0, [r7, #0]
 80034f6:	f001 ff71 	bl	80053dc <USB_DevInit>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e00d      	b.n	8003528 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f002 f91c 	bl	800575e <USB_DevDisconnect>

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e264      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d075      	beq.n	800363a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800354e:	4ba3      	ldr	r3, [pc, #652]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b04      	cmp	r3, #4
 8003558:	d00c      	beq.n	8003574 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355a:	4ba0      	ldr	r3, [pc, #640]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003562:	2b08      	cmp	r3, #8
 8003564:	d112      	bne.n	800358c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003566:	4b9d      	ldr	r3, [pc, #628]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003572:	d10b      	bne.n	800358c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	4b99      	ldr	r3, [pc, #612]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d05b      	beq.n	8003638 <HAL_RCC_OscConfig+0x108>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d157      	bne.n	8003638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e23f      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003594:	d106      	bne.n	80035a4 <HAL_RCC_OscConfig+0x74>
 8003596:	4b91      	ldr	r3, [pc, #580]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a90      	ldr	r2, [pc, #576]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e01d      	b.n	80035e0 <HAL_RCC_OscConfig+0xb0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x98>
 80035ae:	4b8b      	ldr	r3, [pc, #556]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a8a      	ldr	r2, [pc, #552]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b88      	ldr	r3, [pc, #544]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a87      	ldr	r2, [pc, #540]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e00b      	b.n	80035e0 <HAL_RCC_OscConfig+0xb0>
 80035c8:	4b84      	ldr	r3, [pc, #528]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a83      	ldr	r2, [pc, #524]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 80035ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b81      	ldr	r3, [pc, #516]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a80      	ldr	r2, [pc, #512]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 80035da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d013      	beq.n	8003610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7fe ff60 	bl	80024ac <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fe ff5c 	bl	80024ac <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e204      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	4b76      	ldr	r3, [pc, #472]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0xc0>
 800360e:	e014      	b.n	800363a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe ff4c 	bl	80024ac <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003618:	f7fe ff48 	bl	80024ac <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e1f0      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362a:	4b6c      	ldr	r3, [pc, #432]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0xe8>
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d063      	beq.n	800370e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003646:	4b65      	ldr	r3, [pc, #404]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003652:	4b62      	ldr	r3, [pc, #392]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800365a:	2b08      	cmp	r3, #8
 800365c:	d11c      	bne.n	8003698 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365e:	4b5f      	ldr	r3, [pc, #380]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d116      	bne.n	8003698 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366a:	4b5c      	ldr	r3, [pc, #368]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_RCC_OscConfig+0x152>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e1c4      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003682:	4b56      	ldr	r3, [pc, #344]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4952      	ldr	r1, [pc, #328]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	e03a      	b.n	800370e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d020      	beq.n	80036e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a0:	4b4f      	ldr	r3, [pc, #316]	; (80037e0 <HAL_RCC_OscConfig+0x2b0>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7fe ff01 	bl	80024ac <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ae:	f7fe fefd 	bl	80024ac <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e1a5      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c0:	4b46      	ldr	r3, [pc, #280]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036cc:	4b43      	ldr	r3, [pc, #268]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4940      	ldr	r1, [pc, #256]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	600b      	str	r3, [r1, #0]
 80036e0:	e015      	b.n	800370e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e2:	4b3f      	ldr	r3, [pc, #252]	; (80037e0 <HAL_RCC_OscConfig+0x2b0>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fe fee0 	bl	80024ac <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f0:	f7fe fedc 	bl	80024ac <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e184      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003702:	4b36      	ldr	r3, [pc, #216]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d030      	beq.n	800377c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003722:	4b30      	ldr	r3, [pc, #192]	; (80037e4 <HAL_RCC_OscConfig+0x2b4>)
 8003724:	2201      	movs	r2, #1
 8003726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003728:	f7fe fec0 	bl	80024ac <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003730:	f7fe febc 	bl	80024ac <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e164      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003742:	4b26      	ldr	r3, [pc, #152]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 8003744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0x200>
 800374e:	e015      	b.n	800377c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003750:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_RCC_OscConfig+0x2b4>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003756:	f7fe fea9 	bl	80024ac <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375e:	f7fe fea5 	bl	80024ac <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e14d      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003770:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 8003772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f0      	bne.n	800375e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80a0 	beq.w	80038ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800378a:	2300      	movs	r3, #0
 800378c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10f      	bne.n	80037ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a0e      	ldr	r2, [pc, #56]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
 80037aa:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b6:	2301      	movs	r3, #1
 80037b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_OscConfig+0x2b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d121      	bne.n	800380a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c6:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <HAL_RCC_OscConfig+0x2b8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a07      	ldr	r2, [pc, #28]	; (80037e8 <HAL_RCC_OscConfig+0x2b8>)
 80037cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d2:	f7fe fe6b 	bl	80024ac <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	e011      	b.n	80037fe <HAL_RCC_OscConfig+0x2ce>
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	42470000 	.word	0x42470000
 80037e4:	42470e80 	.word	0x42470e80
 80037e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ec:	f7fe fe5e 	bl	80024ac <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e106      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fe:	4b85      	ldr	r3, [pc, #532]	; (8003a14 <HAL_RCC_OscConfig+0x4e4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d106      	bne.n	8003820 <HAL_RCC_OscConfig+0x2f0>
 8003812:	4b81      	ldr	r3, [pc, #516]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	4a80      	ldr	r2, [pc, #512]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	6713      	str	r3, [r2, #112]	; 0x70
 800381e:	e01c      	b.n	800385a <HAL_RCC_OscConfig+0x32a>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b05      	cmp	r3, #5
 8003826:	d10c      	bne.n	8003842 <HAL_RCC_OscConfig+0x312>
 8003828:	4b7b      	ldr	r3, [pc, #492]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	4a7a      	ldr	r2, [pc, #488]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800382e:	f043 0304 	orr.w	r3, r3, #4
 8003832:	6713      	str	r3, [r2, #112]	; 0x70
 8003834:	4b78      	ldr	r3, [pc, #480]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	4a77      	ldr	r2, [pc, #476]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6713      	str	r3, [r2, #112]	; 0x70
 8003840:	e00b      	b.n	800385a <HAL_RCC_OscConfig+0x32a>
 8003842:	4b75      	ldr	r3, [pc, #468]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	4a74      	ldr	r2, [pc, #464]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	6713      	str	r3, [r2, #112]	; 0x70
 800384e:	4b72      	ldr	r3, [pc, #456]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	4a71      	ldr	r2, [pc, #452]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003854:	f023 0304 	bic.w	r3, r3, #4
 8003858:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d015      	beq.n	800388e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003862:	f7fe fe23 	bl	80024ac <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003868:	e00a      	b.n	8003880 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386a:	f7fe fe1f 	bl	80024ac <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	f241 3288 	movw	r2, #5000	; 0x1388
 8003878:	4293      	cmp	r3, r2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e0c5      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003880:	4b65      	ldr	r3, [pc, #404]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0ee      	beq.n	800386a <HAL_RCC_OscConfig+0x33a>
 800388c:	e014      	b.n	80038b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388e:	f7fe fe0d 	bl	80024ac <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003894:	e00a      	b.n	80038ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fe fe09 	bl	80024ac <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e0af      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ac:	4b5a      	ldr	r3, [pc, #360]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1ee      	bne.n	8003896 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d105      	bne.n	80038ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038be:	4b56      	ldr	r3, [pc, #344]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	4a55      	ldr	r2, [pc, #340]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80038c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 809b 	beq.w	8003a0a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038d4:	4b50      	ldr	r3, [pc, #320]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d05c      	beq.n	800399a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d141      	bne.n	800396c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e8:	4b4c      	ldr	r3, [pc, #304]	; (8003a1c <HAL_RCC_OscConfig+0x4ec>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7fe fddd 	bl	80024ac <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f6:	f7fe fdd9 	bl	80024ac <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e081      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003908:	4b43      	ldr	r3, [pc, #268]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f0      	bne.n	80038f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69da      	ldr	r2, [r3, #28]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	019b      	lsls	r3, r3, #6
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	085b      	lsrs	r3, r3, #1
 800392c:	3b01      	subs	r3, #1
 800392e:	041b      	lsls	r3, r3, #16
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	061b      	lsls	r3, r3, #24
 8003938:	4937      	ldr	r1, [pc, #220]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800393a:	4313      	orrs	r3, r2
 800393c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800393e:	4b37      	ldr	r3, [pc, #220]	; (8003a1c <HAL_RCC_OscConfig+0x4ec>)
 8003940:	2201      	movs	r2, #1
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fe fdb2 	bl	80024ac <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394c:	f7fe fdae 	bl	80024ac <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e056      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395e:	4b2e      	ldr	r3, [pc, #184]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0x41c>
 800396a:	e04e      	b.n	8003a0a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396c:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <HAL_RCC_OscConfig+0x4ec>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003972:	f7fe fd9b 	bl	80024ac <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800397a:	f7fe fd97 	bl	80024ac <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e03f      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398c:	4b22      	ldr	r3, [pc, #136]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f0      	bne.n	800397a <HAL_RCC_OscConfig+0x44a>
 8003998:	e037      	b.n	8003a0a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e032      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039a6:	4b1c      	ldr	r3, [pc, #112]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d028      	beq.n	8003a06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d121      	bne.n	8003a06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d11a      	bne.n	8003a06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039d6:	4013      	ands	r3, r2
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039de:	4293      	cmp	r3, r2
 80039e0:	d111      	bne.n	8003a06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	3b01      	subs	r3, #1
 80039f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d107      	bne.n	8003a06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d001      	beq.n	8003a0a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40007000 	.word	0x40007000
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	42470060 	.word	0x42470060

08003a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0cc      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a34:	4b68      	ldr	r3, [pc, #416]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d90c      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b65      	ldr	r3, [pc, #404]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0b8      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a74:	4b59      	ldr	r3, [pc, #356]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a58      	ldr	r2, [pc, #352]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a8c:	4b53      	ldr	r3, [pc, #332]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a52      	ldr	r2, [pc, #328]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a98:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	494d      	ldr	r1, [pc, #308]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d044      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d119      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e07f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ade:	4b3f      	ldr	r3, [pc, #252]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e06f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aee:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e067      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afe:	4b37      	ldr	r3, [pc, #220]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f023 0203 	bic.w	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4934      	ldr	r1, [pc, #208]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b10:	f7fe fccc 	bl	80024ac <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b18:	f7fe fcc8 	bl	80024ac <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e04f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 020c 	and.w	r2, r3, #12
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d1eb      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b40:	4b25      	ldr	r3, [pc, #148]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d20c      	bcs.n	8003b68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e032      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4916      	ldr	r1, [pc, #88]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b92:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	490e      	ldr	r1, [pc, #56]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ba6:	f000 f821 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003baa:	4602      	mov	r2, r0
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	490a      	ldr	r1, [pc, #40]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb8:	5ccb      	ldrb	r3, [r1, r3]
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fc2c 	bl	8002424 <HAL_InitTick>

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40023c00 	.word	0x40023c00
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	080061b4 	.word	0x080061b4
 8003be4:	2000001c 	.word	0x2000001c
 8003be8:	20000020 	.word	0x20000020

08003bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	607b      	str	r3, [r7, #4]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c04:	4b67      	ldr	r3, [pc, #412]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d00d      	beq.n	8003c2c <HAL_RCC_GetSysClockFreq+0x40>
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	f200 80bd 	bhi.w	8003d90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_RCC_GetSysClockFreq+0x34>
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d003      	beq.n	8003c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c1e:	e0b7      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c20:	4b61      	ldr	r3, [pc, #388]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c22:	60bb      	str	r3, [r7, #8]
       break;
 8003c24:	e0b7      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c26:	4b60      	ldr	r3, [pc, #384]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c28:	60bb      	str	r3, [r7, #8]
      break;
 8003c2a:	e0b4      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c2c:	4b5d      	ldr	r3, [pc, #372]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c36:	4b5b      	ldr	r3, [pc, #364]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d04d      	beq.n	8003cde <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c42:	4b58      	ldr	r3, [pc, #352]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c52:	f04f 0100 	mov.w	r1, #0
 8003c56:	ea02 0800 	and.w	r8, r2, r0
 8003c5a:	ea03 0901 	and.w	r9, r3, r1
 8003c5e:	4640      	mov	r0, r8
 8003c60:	4649      	mov	r1, r9
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	014b      	lsls	r3, r1, #5
 8003c6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c70:	0142      	lsls	r2, r0, #5
 8003c72:	4610      	mov	r0, r2
 8003c74:	4619      	mov	r1, r3
 8003c76:	ebb0 0008 	subs.w	r0, r0, r8
 8003c7a:	eb61 0109 	sbc.w	r1, r1, r9
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	018b      	lsls	r3, r1, #6
 8003c88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c8c:	0182      	lsls	r2, r0, #6
 8003c8e:	1a12      	subs	r2, r2, r0
 8003c90:	eb63 0301 	sbc.w	r3, r3, r1
 8003c94:	f04f 0000 	mov.w	r0, #0
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	00d9      	lsls	r1, r3, #3
 8003c9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ca2:	00d0      	lsls	r0, r2, #3
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	eb12 0208 	adds.w	r2, r2, r8
 8003cac:	eb43 0309 	adc.w	r3, r3, r9
 8003cb0:	f04f 0000 	mov.w	r0, #0
 8003cb4:	f04f 0100 	mov.w	r1, #0
 8003cb8:	0299      	lsls	r1, r3, #10
 8003cba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cbe:	0290      	lsls	r0, r2, #10
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	f7fc fade 	bl	8000290 <__aeabi_uldivmod>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4613      	mov	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	e04a      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cde:	4b31      	ldr	r3, [pc, #196]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	099b      	lsrs	r3, r3, #6
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cee:	f04f 0100 	mov.w	r1, #0
 8003cf2:	ea02 0400 	and.w	r4, r2, r0
 8003cf6:	ea03 0501 	and.w	r5, r3, r1
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	014b      	lsls	r3, r1, #5
 8003d08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d0c:	0142      	lsls	r2, r0, #5
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	1b00      	subs	r0, r0, r4
 8003d14:	eb61 0105 	sbc.w	r1, r1, r5
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	018b      	lsls	r3, r1, #6
 8003d22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d26:	0182      	lsls	r2, r0, #6
 8003d28:	1a12      	subs	r2, r2, r0
 8003d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d2e:	f04f 0000 	mov.w	r0, #0
 8003d32:	f04f 0100 	mov.w	r1, #0
 8003d36:	00d9      	lsls	r1, r3, #3
 8003d38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d3c:	00d0      	lsls	r0, r2, #3
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	1912      	adds	r2, r2, r4
 8003d44:	eb45 0303 	adc.w	r3, r5, r3
 8003d48:	f04f 0000 	mov.w	r0, #0
 8003d4c:	f04f 0100 	mov.w	r1, #0
 8003d50:	0299      	lsls	r1, r3, #10
 8003d52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d56:	0290      	lsls	r0, r2, #10
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	461a      	mov	r2, r3
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	f7fc fa92 	bl	8000290 <__aeabi_uldivmod>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4613      	mov	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	60bb      	str	r3, [r7, #8]
      break;
 8003d8e:	e002      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d92:	60bb      	str	r3, [r7, #8]
      break;
 8003d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d96:	68bb      	ldr	r3, [r7, #8]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	00f42400 	.word	0x00f42400

08003dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db0:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	2000001c 	.word	0x2000001c

08003dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dc8:	f7ff fff0 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0a9b      	lsrs	r3, r3, #10
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4903      	ldr	r1, [pc, #12]	; (8003de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	080061c4 	.word	0x080061c4

08003dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003df0:	f7ff ffdc 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0b5b      	lsrs	r3, r3, #13
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	080061c4 	.word	0x080061c4

08003e14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e07b      	b.n	8003f1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d108      	bne.n	8003e40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e36:	d009      	beq.n	8003e4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	61da      	str	r2, [r3, #28]
 8003e3e:	e005      	b.n	8003e4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fd f9dc 	bl	8001224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed0:	ea42 0103 	orr.w	r1, r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	f003 0104 	and.w	r1, r3, #4
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	f003 0210 	and.w	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b088      	sub	sp, #32
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_SPI_Transmit+0x22>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e126      	b.n	8004196 <HAL_SPI_Transmit+0x270>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f50:	f7fe faac 	bl	80024ac <HAL_GetTick>
 8003f54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d002      	beq.n	8003f6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
 8003f68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f6a:	e10b      	b.n	8004184 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_SPI_Transmit+0x52>
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f7c:	e102      	b.n	8004184 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2203      	movs	r2, #3
 8003f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	88fa      	ldrh	r2, [r7, #6]
 8003f96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	88fa      	ldrh	r2, [r7, #6]
 8003f9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc4:	d10f      	bne.n	8003fe6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fe4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d007      	beq.n	8004004 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004002:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800400c:	d14b      	bne.n	80040a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_SPI_Transmit+0xf6>
 8004016:	8afb      	ldrh	r3, [r7, #22]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d13e      	bne.n	800409a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	881a      	ldrh	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	1c9a      	adds	r2, r3, #2
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004040:	e02b      	b.n	800409a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b02      	cmp	r3, #2
 800404e:	d112      	bne.n	8004076 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	881a      	ldrh	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	1c9a      	adds	r2, r3, #2
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	86da      	strh	r2, [r3, #54]	; 0x36
 8004074:	e011      	b.n	800409a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004076:	f7fe fa19 	bl	80024ac <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d803      	bhi.n	800408e <HAL_SPI_Transmit+0x168>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d102      	bne.n	8004094 <HAL_SPI_Transmit+0x16e>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004098:	e074      	b.n	8004184 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1ce      	bne.n	8004042 <HAL_SPI_Transmit+0x11c>
 80040a4:	e04c      	b.n	8004140 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_SPI_Transmit+0x18e>
 80040ae:	8afb      	ldrh	r3, [r7, #22]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d140      	bne.n	8004136 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	7812      	ldrb	r2, [r2, #0]
 80040c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040da:	e02c      	b.n	8004136 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d113      	bne.n	8004112 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	330c      	adds	r3, #12
 80040f4:	7812      	ldrb	r2, [r2, #0]
 80040f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004110:	e011      	b.n	8004136 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004112:	f7fe f9cb 	bl	80024ac <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d803      	bhi.n	800412a <HAL_SPI_Transmit+0x204>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d102      	bne.n	8004130 <HAL_SPI_Transmit+0x20a>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004134:	e026      	b.n	8004184 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1cd      	bne.n	80040dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	6839      	ldr	r1, [r7, #0]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fa55 	bl	80045f4 <SPI_EndRxTxTransaction>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e000      	b.n	8004184 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004182:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004194:	7ffb      	ldrb	r3, [r7, #31]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b08c      	sub	sp, #48	; 0x30
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	607a      	str	r2, [r7, #4]
 80041aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041ac:	2301      	movs	r3, #1
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_SPI_TransmitReceive+0x26>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e18a      	b.n	80044da <HAL_SPI_TransmitReceive+0x33c>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041cc:	f7fe f96e 	bl	80024ac <HAL_GetTick>
 80041d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80041e2:	887b      	ldrh	r3, [r7, #2]
 80041e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d00f      	beq.n	800420e <HAL_SPI_TransmitReceive+0x70>
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041f4:	d107      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d103      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x68>
 80041fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004202:	2b04      	cmp	r3, #4
 8004204:	d003      	beq.n	800420e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004206:	2302      	movs	r3, #2
 8004208:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800420c:	e15b      	b.n	80044c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_SPI_TransmitReceive+0x82>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <HAL_SPI_TransmitReceive+0x82>
 800421a:	887b      	ldrh	r3, [r7, #2]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d103      	bne.n	8004228 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004226:	e14e      	b.n	80044c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b04      	cmp	r3, #4
 8004232:	d003      	beq.n	800423c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2205      	movs	r2, #5
 8004238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	887a      	ldrh	r2, [r7, #2]
 800424c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	887a      	ldrh	r2, [r7, #2]
 8004252:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	887a      	ldrh	r2, [r7, #2]
 800425e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	887a      	ldrh	r2, [r7, #2]
 8004264:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d007      	beq.n	8004290 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800428e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004298:	d178      	bne.n	800438c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_SPI_TransmitReceive+0x10a>
 80042a2:	8b7b      	ldrh	r3, [r7, #26]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d166      	bne.n	8004376 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	881a      	ldrh	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	1c9a      	adds	r2, r3, #2
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042cc:	e053      	b.n	8004376 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d11b      	bne.n	8004314 <HAL_SPI_TransmitReceive+0x176>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d016      	beq.n	8004314 <HAL_SPI_TransmitReceive+0x176>
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d113      	bne.n	8004314 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	881a      	ldrh	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	1c9a      	adds	r2, r3, #2
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b01      	cmp	r3, #1
 8004320:	d119      	bne.n	8004356 <HAL_SPI_TransmitReceive+0x1b8>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d014      	beq.n	8004356 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	b292      	uxth	r2, r2
 8004338:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433e:	1c9a      	adds	r2, r3, #2
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004352:	2301      	movs	r3, #1
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004356:	f7fe f8a9 	bl	80024ac <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004362:	429a      	cmp	r2, r3
 8004364:	d807      	bhi.n	8004376 <HAL_SPI_TransmitReceive+0x1d8>
 8004366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436c:	d003      	beq.n	8004376 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004374:	e0a7      	b.n	80044c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1a6      	bne.n	80042ce <HAL_SPI_TransmitReceive+0x130>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1a1      	bne.n	80042ce <HAL_SPI_TransmitReceive+0x130>
 800438a:	e07c      	b.n	8004486 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <HAL_SPI_TransmitReceive+0x1fc>
 8004394:	8b7b      	ldrh	r3, [r7, #26]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d16b      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	7812      	ldrb	r2, [r2, #0]
 80043a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043c0:	e057      	b.n	8004472 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d11c      	bne.n	800440a <HAL_SPI_TransmitReceive+0x26c>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d017      	beq.n	800440a <HAL_SPI_TransmitReceive+0x26c>
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d114      	bne.n	800440a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	330c      	adds	r3, #12
 80043ea:	7812      	ldrb	r2, [r2, #0]
 80043ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b01      	cmp	r3, #1
 8004416:	d119      	bne.n	800444c <HAL_SPI_TransmitReceive+0x2ae>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d014      	beq.n	800444c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004448:	2301      	movs	r3, #1
 800444a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800444c:	f7fe f82e 	bl	80024ac <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004458:	429a      	cmp	r2, r3
 800445a:	d803      	bhi.n	8004464 <HAL_SPI_TransmitReceive+0x2c6>
 800445c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d102      	bne.n	800446a <HAL_SPI_TransmitReceive+0x2cc>
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	2b00      	cmp	r3, #0
 8004468:	d103      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004470:	e029      	b.n	80044c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1a2      	bne.n	80043c2 <HAL_SPI_TransmitReceive+0x224>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d19d      	bne.n	80043c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004488:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f8b2 	bl	80045f4 <SPI_EndRxTxTransaction>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d006      	beq.n	80044a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2220      	movs	r2, #32
 80044a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80044a2:	e010      	b.n	80044c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	e000      	b.n	80044c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80044c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3730      	adds	r7, #48	; 0x30
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044f4:	f7fd ffda 	bl	80024ac <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	4413      	add	r3, r2
 8004502:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004504:	f7fd ffd2 	bl	80024ac <HAL_GetTick>
 8004508:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800450a:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	015b      	lsls	r3, r3, #5
 8004510:	0d1b      	lsrs	r3, r3, #20
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	fb02 f303 	mul.w	r3, r2, r3
 8004518:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800451a:	e054      	b.n	80045c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d050      	beq.n	80045c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004524:	f7fd ffc2 	bl	80024ac <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	429a      	cmp	r2, r3
 8004532:	d902      	bls.n	800453a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d13d      	bne.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004548:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004552:	d111      	bne.n	8004578 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455c:	d004      	beq.n	8004568 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004566:	d107      	bne.n	8004578 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004576:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004580:	d10f      	bne.n	80045a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e017      	b.n	80045e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4013      	ands	r3, r2
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	bf0c      	ite	eq
 80045d6:	2301      	moveq	r3, #1
 80045d8:	2300      	movne	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d19b      	bne.n	800451c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	2000001c 	.word	0x2000001c

080045f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <SPI_EndRxTxTransaction+0x7c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <SPI_EndRxTxTransaction+0x80>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	0d5b      	lsrs	r3, r3, #21
 800460c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004610:	fb02 f303 	mul.w	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800461e:	d112      	bne.n	8004646 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2200      	movs	r2, #0
 8004628:	2180      	movs	r1, #128	; 0x80
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f7ff ff5a 	bl	80044e4 <SPI_WaitFlagStateUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d016      	beq.n	8004664 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463a:	f043 0220 	orr.w	r2, r3, #32
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e00f      	b.n	8004666 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	3b01      	subs	r3, #1
 8004650:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465c:	2b80      	cmp	r3, #128	; 0x80
 800465e:	d0f2      	beq.n	8004646 <SPI_EndRxTxTransaction+0x52>
 8004660:	e000      	b.n	8004664 <SPI_EndRxTxTransaction+0x70>
        break;
 8004662:	bf00      	nop
  }

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	2000001c 	.word	0x2000001c
 8004674:	165e9f81 	.word	0x165e9f81

08004678 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e041      	b.n	800470e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fc fe76 	bl	8001390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3304      	adds	r3, #4
 80046b4:	4619      	mov	r1, r3
 80046b6:	4610      	mov	r0, r2
 80046b8:	f000 f8f0 	bl	800489c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004732:	2302      	movs	r3, #2
 8004734:	e0ae      	b.n	8004894 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b0c      	cmp	r3, #12
 8004742:	f200 809f 	bhi.w	8004884 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	08004781 	.word	0x08004781
 8004750:	08004885 	.word	0x08004885
 8004754:	08004885 	.word	0x08004885
 8004758:	08004885 	.word	0x08004885
 800475c:	080047c1 	.word	0x080047c1
 8004760:	08004885 	.word	0x08004885
 8004764:	08004885 	.word	0x08004885
 8004768:	08004885 	.word	0x08004885
 800476c:	08004803 	.word	0x08004803
 8004770:	08004885 	.word	0x08004885
 8004774:	08004885 	.word	0x08004885
 8004778:	08004885 	.word	0x08004885
 800477c:	08004843 	.word	0x08004843
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f928 	bl	80049dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0208 	orr.w	r2, r2, #8
 800479a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0204 	bic.w	r2, r2, #4
 80047aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6999      	ldr	r1, [r3, #24]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	619a      	str	r2, [r3, #24]
      break;
 80047be:	e064      	b.n	800488a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f978 	bl	8004abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6999      	ldr	r1, [r3, #24]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	021a      	lsls	r2, r3, #8
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	619a      	str	r2, [r3, #24]
      break;
 8004800:	e043      	b.n	800488a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 f9cd 	bl	8004ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69da      	ldr	r2, [r3, #28]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0208 	orr.w	r2, r2, #8
 800481c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0204 	bic.w	r2, r2, #4
 800482c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69d9      	ldr	r1, [r3, #28]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	61da      	str	r2, [r3, #28]
      break;
 8004840:	e023      	b.n	800488a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fa21 	bl	8004c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800485c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69d9      	ldr	r1, [r3, #28]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	021a      	lsls	r2, r3, #8
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	61da      	str	r2, [r3, #28]
      break;
 8004882:	e002      	b.n	800488a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	75fb      	strb	r3, [r7, #23]
      break;
 8004888:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004892:	7dfb      	ldrb	r3, [r7, #23]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a40      	ldr	r2, [pc, #256]	; (80049b0 <TIM_Base_SetConfig+0x114>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d013      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ba:	d00f      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3d      	ldr	r2, [pc, #244]	; (80049b4 <TIM_Base_SetConfig+0x118>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00b      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3c      	ldr	r2, [pc, #240]	; (80049b8 <TIM_Base_SetConfig+0x11c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d007      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3b      	ldr	r2, [pc, #236]	; (80049bc <TIM_Base_SetConfig+0x120>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3a      	ldr	r2, [pc, #232]	; (80049c0 <TIM_Base_SetConfig+0x124>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d108      	bne.n	80048ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2f      	ldr	r2, [pc, #188]	; (80049b0 <TIM_Base_SetConfig+0x114>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d02b      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fc:	d027      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2c      	ldr	r2, [pc, #176]	; (80049b4 <TIM_Base_SetConfig+0x118>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d023      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2b      	ldr	r2, [pc, #172]	; (80049b8 <TIM_Base_SetConfig+0x11c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01f      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2a      	ldr	r2, [pc, #168]	; (80049bc <TIM_Base_SetConfig+0x120>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01b      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a29      	ldr	r2, [pc, #164]	; (80049c0 <TIM_Base_SetConfig+0x124>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d017      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a28      	ldr	r2, [pc, #160]	; (80049c4 <TIM_Base_SetConfig+0x128>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a27      	ldr	r2, [pc, #156]	; (80049c8 <TIM_Base_SetConfig+0x12c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00f      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a26      	ldr	r2, [pc, #152]	; (80049cc <TIM_Base_SetConfig+0x130>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00b      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a25      	ldr	r2, [pc, #148]	; (80049d0 <TIM_Base_SetConfig+0x134>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d007      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a24      	ldr	r2, [pc, #144]	; (80049d4 <TIM_Base_SetConfig+0x138>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a23      	ldr	r2, [pc, #140]	; (80049d8 <TIM_Base_SetConfig+0x13c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d108      	bne.n	8004960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <TIM_Base_SetConfig+0x114>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_Base_SetConfig+0xf8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <TIM_Base_SetConfig+0x124>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d103      	bne.n	800499c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	615a      	str	r2, [r3, #20]
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40010400 	.word	0x40010400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800
 80049d0:	40001800 	.word	0x40001800
 80049d4:	40001c00 	.word	0x40001c00
 80049d8:	40002000 	.word	0x40002000

080049dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f023 0201 	bic.w	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0303 	bic.w	r3, r3, #3
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f023 0302 	bic.w	r3, r3, #2
 8004a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a20      	ldr	r2, [pc, #128]	; (8004ab4 <TIM_OC1_SetConfig+0xd8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_OC1_SetConfig+0x64>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a1f      	ldr	r2, [pc, #124]	; (8004ab8 <TIM_OC1_SetConfig+0xdc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10c      	bne.n	8004a5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0308 	bic.w	r3, r3, #8
 8004a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f023 0304 	bic.w	r3, r3, #4
 8004a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <TIM_OC1_SetConfig+0xd8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <TIM_OC1_SetConfig+0x8e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <TIM_OC1_SetConfig+0xdc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d111      	bne.n	8004a8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	621a      	str	r2, [r3, #32]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40010400 	.word	0x40010400

08004abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f023 0210 	bic.w	r2, r3, #16
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 0320 	bic.w	r3, r3, #32
 8004b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a22      	ldr	r2, [pc, #136]	; (8004ba0 <TIM_OC2_SetConfig+0xe4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d003      	beq.n	8004b24 <TIM_OC2_SetConfig+0x68>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a21      	ldr	r2, [pc, #132]	; (8004ba4 <TIM_OC2_SetConfig+0xe8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d10d      	bne.n	8004b40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <TIM_OC2_SetConfig+0xe4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d003      	beq.n	8004b50 <TIM_OC2_SetConfig+0x94>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a16      	ldr	r2, [pc, #88]	; (8004ba4 <TIM_OC2_SetConfig+0xe8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d113      	bne.n	8004b78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	621a      	str	r2, [r3, #32]
}
 8004b92:	bf00      	nop
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40010400 	.word	0x40010400

08004ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0303 	bic.w	r3, r3, #3
 8004bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	021b      	lsls	r3, r3, #8
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a21      	ldr	r2, [pc, #132]	; (8004c88 <TIM_OC3_SetConfig+0xe0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d003      	beq.n	8004c0e <TIM_OC3_SetConfig+0x66>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a20      	ldr	r2, [pc, #128]	; (8004c8c <TIM_OC3_SetConfig+0xe4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d10d      	bne.n	8004c2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	021b      	lsls	r3, r3, #8
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a16      	ldr	r2, [pc, #88]	; (8004c88 <TIM_OC3_SetConfig+0xe0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d003      	beq.n	8004c3a <TIM_OC3_SetConfig+0x92>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <TIM_OC3_SetConfig+0xe4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d113      	bne.n	8004c62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	621a      	str	r2, [r3, #32]
}
 8004c7c:	bf00      	nop
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40010400 	.word	0x40010400

08004c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	031b      	lsls	r3, r3, #12
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a12      	ldr	r2, [pc, #72]	; (8004d34 <TIM_OC4_SetConfig+0xa4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <TIM_OC4_SetConfig+0x68>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a11      	ldr	r2, [pc, #68]	; (8004d38 <TIM_OC4_SetConfig+0xa8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d109      	bne.n	8004d0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	019b      	lsls	r3, r3, #6
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40010400 	.word	0x40010400

08004d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e05a      	b.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a21      	ldr	r2, [pc, #132]	; (8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d022      	beq.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da0:	d01d      	beq.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1d      	ldr	r2, [pc, #116]	; (8004e1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d018      	beq.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1b      	ldr	r2, [pc, #108]	; (8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1a      	ldr	r2, [pc, #104]	; (8004e24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00e      	beq.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a18      	ldr	r2, [pc, #96]	; (8004e28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d009      	beq.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d004      	beq.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d10c      	bne.n	8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40000400 	.word	0x40000400
 8004e20:	40000800 	.word	0x40000800
 8004e24:	40000c00 	.word	0x40000c00
 8004e28:	40010400 	.word	0x40010400
 8004e2c:	40014000 	.word	0x40014000
 8004e30:	40001800 	.word	0x40001800

08004e34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e03f      	b.n	8004ec6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fc faf0 	bl	8001440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2224      	movs	r2, #36	; 0x24
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f829 	bl	8004ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed4:	b09f      	sub	sp, #124	; 0x7c
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee6:	68d9      	ldr	r1, [r3, #12]
 8004ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	ea40 0301 	orr.w	r3, r0, r1
 8004ef0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	431a      	orrs	r2, r3
 8004f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f14:	f021 010c 	bic.w	r1, r1, #12
 8004f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2e:	6999      	ldr	r1, [r3, #24]
 8004f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	ea40 0301 	orr.w	r3, r0, r1
 8004f38:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	4bc5      	ldr	r3, [pc, #788]	; (8005254 <UART_SetConfig+0x384>)
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d004      	beq.n	8004f4e <UART_SetConfig+0x7e>
 8004f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4bc3      	ldr	r3, [pc, #780]	; (8005258 <UART_SetConfig+0x388>)
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d103      	bne.n	8004f56 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f4e:	f7fe ff4d 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 8004f52:	6778      	str	r0, [r7, #116]	; 0x74
 8004f54:	e002      	b.n	8004f5c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f56:	f7fe ff35 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8004f5a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f64:	f040 80b6 	bne.w	80050d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f6a:	461c      	mov	r4, r3
 8004f6c:	f04f 0500 	mov.w	r5, #0
 8004f70:	4622      	mov	r2, r4
 8004f72:	462b      	mov	r3, r5
 8004f74:	1891      	adds	r1, r2, r2
 8004f76:	6439      	str	r1, [r7, #64]	; 0x40
 8004f78:	415b      	adcs	r3, r3
 8004f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f80:	1912      	adds	r2, r2, r4
 8004f82:	eb45 0303 	adc.w	r3, r5, r3
 8004f86:	f04f 0000 	mov.w	r0, #0
 8004f8a:	f04f 0100 	mov.w	r1, #0
 8004f8e:	00d9      	lsls	r1, r3, #3
 8004f90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f94:	00d0      	lsls	r0, r2, #3
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	1911      	adds	r1, r2, r4
 8004f9c:	6639      	str	r1, [r7, #96]	; 0x60
 8004f9e:	416b      	adcs	r3, r5
 8004fa0:	667b      	str	r3, [r7, #100]	; 0x64
 8004fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	1891      	adds	r1, r2, r2
 8004fae:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fb0:	415b      	adcs	r3, r3
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fb8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004fbc:	f7fb f968 	bl	8000290 <__aeabi_uldivmod>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4ba5      	ldr	r3, [pc, #660]	; (800525c <UART_SetConfig+0x38c>)
 8004fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	011e      	lsls	r6, r3, #4
 8004fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd0:	461c      	mov	r4, r3
 8004fd2:	f04f 0500 	mov.w	r5, #0
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	462b      	mov	r3, r5
 8004fda:	1891      	adds	r1, r2, r2
 8004fdc:	6339      	str	r1, [r7, #48]	; 0x30
 8004fde:	415b      	adcs	r3, r3
 8004fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004fe6:	1912      	adds	r2, r2, r4
 8004fe8:	eb45 0303 	adc.w	r3, r5, r3
 8004fec:	f04f 0000 	mov.w	r0, #0
 8004ff0:	f04f 0100 	mov.w	r1, #0
 8004ff4:	00d9      	lsls	r1, r3, #3
 8004ff6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ffa:	00d0      	lsls	r0, r2, #3
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	1911      	adds	r1, r2, r4
 8005002:	65b9      	str	r1, [r7, #88]	; 0x58
 8005004:	416b      	adcs	r3, r5
 8005006:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	461a      	mov	r2, r3
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	1891      	adds	r1, r2, r2
 8005014:	62b9      	str	r1, [r7, #40]	; 0x28
 8005016:	415b      	adcs	r3, r3
 8005018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800501a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800501e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005022:	f7fb f935 	bl	8000290 <__aeabi_uldivmod>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4b8c      	ldr	r3, [pc, #560]	; (800525c <UART_SetConfig+0x38c>)
 800502c:	fba3 1302 	umull	r1, r3, r3, r2
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	2164      	movs	r1, #100	; 0x64
 8005034:	fb01 f303 	mul.w	r3, r1, r3
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	3332      	adds	r3, #50	; 0x32
 800503e:	4a87      	ldr	r2, [pc, #540]	; (800525c <UART_SetConfig+0x38c>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800504c:	441e      	add	r6, r3
 800504e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005050:	4618      	mov	r0, r3
 8005052:	f04f 0100 	mov.w	r1, #0
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	1894      	adds	r4, r2, r2
 800505c:	623c      	str	r4, [r7, #32]
 800505e:	415b      	adcs	r3, r3
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
 8005062:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005066:	1812      	adds	r2, r2, r0
 8005068:	eb41 0303 	adc.w	r3, r1, r3
 800506c:	f04f 0400 	mov.w	r4, #0
 8005070:	f04f 0500 	mov.w	r5, #0
 8005074:	00dd      	lsls	r5, r3, #3
 8005076:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800507a:	00d4      	lsls	r4, r2, #3
 800507c:	4622      	mov	r2, r4
 800507e:	462b      	mov	r3, r5
 8005080:	1814      	adds	r4, r2, r0
 8005082:	653c      	str	r4, [r7, #80]	; 0x50
 8005084:	414b      	adcs	r3, r1
 8005086:	657b      	str	r3, [r7, #84]	; 0x54
 8005088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	461a      	mov	r2, r3
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	1891      	adds	r1, r2, r2
 8005094:	61b9      	str	r1, [r7, #24]
 8005096:	415b      	adcs	r3, r3
 8005098:	61fb      	str	r3, [r7, #28]
 800509a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800509e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80050a2:	f7fb f8f5 	bl	8000290 <__aeabi_uldivmod>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	4b6c      	ldr	r3, [pc, #432]	; (800525c <UART_SetConfig+0x38c>)
 80050ac:	fba3 1302 	umull	r1, r3, r3, r2
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	2164      	movs	r1, #100	; 0x64
 80050b4:	fb01 f303 	mul.w	r3, r1, r3
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	3332      	adds	r3, #50	; 0x32
 80050be:	4a67      	ldr	r2, [pc, #412]	; (800525c <UART_SetConfig+0x38c>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	f003 0207 	and.w	r2, r3, #7
 80050ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4432      	add	r2, r6
 80050d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050d2:	e0b9      	b.n	8005248 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050d6:	461c      	mov	r4, r3
 80050d8:	f04f 0500 	mov.w	r5, #0
 80050dc:	4622      	mov	r2, r4
 80050de:	462b      	mov	r3, r5
 80050e0:	1891      	adds	r1, r2, r2
 80050e2:	6139      	str	r1, [r7, #16]
 80050e4:	415b      	adcs	r3, r3
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050ec:	1912      	adds	r2, r2, r4
 80050ee:	eb45 0303 	adc.w	r3, r5, r3
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f04f 0100 	mov.w	r1, #0
 80050fa:	00d9      	lsls	r1, r3, #3
 80050fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005100:	00d0      	lsls	r0, r2, #3
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	eb12 0804 	adds.w	r8, r2, r4
 800510a:	eb43 0905 	adc.w	r9, r3, r5
 800510e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	4618      	mov	r0, r3
 8005114:	f04f 0100 	mov.w	r1, #0
 8005118:	f04f 0200 	mov.w	r2, #0
 800511c:	f04f 0300 	mov.w	r3, #0
 8005120:	008b      	lsls	r3, r1, #2
 8005122:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005126:	0082      	lsls	r2, r0, #2
 8005128:	4640      	mov	r0, r8
 800512a:	4649      	mov	r1, r9
 800512c:	f7fb f8b0 	bl	8000290 <__aeabi_uldivmod>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4b49      	ldr	r3, [pc, #292]	; (800525c <UART_SetConfig+0x38c>)
 8005136:	fba3 2302 	umull	r2, r3, r3, r2
 800513a:	095b      	lsrs	r3, r3, #5
 800513c:	011e      	lsls	r6, r3, #4
 800513e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005140:	4618      	mov	r0, r3
 8005142:	f04f 0100 	mov.w	r1, #0
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	1894      	adds	r4, r2, r2
 800514c:	60bc      	str	r4, [r7, #8]
 800514e:	415b      	adcs	r3, r3
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005156:	1812      	adds	r2, r2, r0
 8005158:	eb41 0303 	adc.w	r3, r1, r3
 800515c:	f04f 0400 	mov.w	r4, #0
 8005160:	f04f 0500 	mov.w	r5, #0
 8005164:	00dd      	lsls	r5, r3, #3
 8005166:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800516a:	00d4      	lsls	r4, r2, #3
 800516c:	4622      	mov	r2, r4
 800516e:	462b      	mov	r3, r5
 8005170:	1814      	adds	r4, r2, r0
 8005172:	64bc      	str	r4, [r7, #72]	; 0x48
 8005174:	414b      	adcs	r3, r1
 8005176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	4618      	mov	r0, r3
 800517e:	f04f 0100 	mov.w	r1, #0
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	008b      	lsls	r3, r1, #2
 800518c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005190:	0082      	lsls	r2, r0, #2
 8005192:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005196:	f7fb f87b 	bl	8000290 <__aeabi_uldivmod>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4b2f      	ldr	r3, [pc, #188]	; (800525c <UART_SetConfig+0x38c>)
 80051a0:	fba3 1302 	umull	r1, r3, r3, r2
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	2164      	movs	r1, #100	; 0x64
 80051a8:	fb01 f303 	mul.w	r3, r1, r3
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	3332      	adds	r3, #50	; 0x32
 80051b2:	4a2a      	ldr	r2, [pc, #168]	; (800525c <UART_SetConfig+0x38c>)
 80051b4:	fba2 2303 	umull	r2, r3, r2, r3
 80051b8:	095b      	lsrs	r3, r3, #5
 80051ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051be:	441e      	add	r6, r3
 80051c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051c2:	4618      	mov	r0, r3
 80051c4:	f04f 0100 	mov.w	r1, #0
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	1894      	adds	r4, r2, r2
 80051ce:	603c      	str	r4, [r7, #0]
 80051d0:	415b      	adcs	r3, r3
 80051d2:	607b      	str	r3, [r7, #4]
 80051d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051d8:	1812      	adds	r2, r2, r0
 80051da:	eb41 0303 	adc.w	r3, r1, r3
 80051de:	f04f 0400 	mov.w	r4, #0
 80051e2:	f04f 0500 	mov.w	r5, #0
 80051e6:	00dd      	lsls	r5, r3, #3
 80051e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051ec:	00d4      	lsls	r4, r2, #3
 80051ee:	4622      	mov	r2, r4
 80051f0:	462b      	mov	r3, r5
 80051f2:	eb12 0a00 	adds.w	sl, r2, r0
 80051f6:	eb43 0b01 	adc.w	fp, r3, r1
 80051fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	4618      	mov	r0, r3
 8005200:	f04f 0100 	mov.w	r1, #0
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	008b      	lsls	r3, r1, #2
 800520e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005212:	0082      	lsls	r2, r0, #2
 8005214:	4650      	mov	r0, sl
 8005216:	4659      	mov	r1, fp
 8005218:	f7fb f83a 	bl	8000290 <__aeabi_uldivmod>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4b0e      	ldr	r3, [pc, #56]	; (800525c <UART_SetConfig+0x38c>)
 8005222:	fba3 1302 	umull	r1, r3, r3, r2
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	2164      	movs	r1, #100	; 0x64
 800522a:	fb01 f303 	mul.w	r3, r1, r3
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	3332      	adds	r3, #50	; 0x32
 8005234:	4a09      	ldr	r2, [pc, #36]	; (800525c <UART_SetConfig+0x38c>)
 8005236:	fba2 2303 	umull	r2, r3, r2, r3
 800523a:	095b      	lsrs	r3, r3, #5
 800523c:	f003 020f 	and.w	r2, r3, #15
 8005240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4432      	add	r2, r6
 8005246:	609a      	str	r2, [r3, #8]
}
 8005248:	bf00      	nop
 800524a:	377c      	adds	r7, #124	; 0x7c
 800524c:	46bd      	mov	sp, r7
 800524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005252:	bf00      	nop
 8005254:	40011000 	.word	0x40011000
 8005258:	40011400 	.word	0x40011400
 800525c:	51eb851f 	.word	0x51eb851f

08005260 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005260:	b084      	sub	sp, #16
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	f107 001c 	add.w	r0, r7, #28
 800526e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	2b01      	cmp	r3, #1
 8005276:	d122      	bne.n	80052be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800528c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d105      	bne.n	80052b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fa82 	bl	80057bc <USB_CoreReset>
 80052b8:	4603      	mov	r3, r0
 80052ba:	73fb      	strb	r3, [r7, #15]
 80052bc:	e01a      	b.n	80052f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fa76 	bl	80057bc <USB_CoreReset>
 80052d0:	4603      	mov	r3, r0
 80052d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38
 80052e6:	e005      	b.n	80052f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d10b      	bne.n	8005312 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f043 0206 	orr.w	r2, r3, #6
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f043 0220 	orr.w	r2, r3, #32
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005312:	7bfb      	ldrb	r3, [r7, #15]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800531e:	b004      	add	sp, #16
 8005320:	4770      	bx	lr

08005322 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f023 0201 	bic.w	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d115      	bne.n	8005392 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005372:	2001      	movs	r0, #1
 8005374:	f7fd f8a6 	bl	80024c4 <HAL_Delay>
      ms++;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3301      	adds	r3, #1
 800537c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fa0e 	bl	80057a0 <USB_GetMode>
 8005384:	4603      	mov	r3, r0
 8005386:	2b01      	cmp	r3, #1
 8005388:	d01e      	beq.n	80053c8 <USB_SetCurrentMode+0x84>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b31      	cmp	r3, #49	; 0x31
 800538e:	d9f0      	bls.n	8005372 <USB_SetCurrentMode+0x2e>
 8005390:	e01a      	b.n	80053c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d115      	bne.n	80053c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053a4:	2001      	movs	r0, #1
 80053a6:	f7fd f88d 	bl	80024c4 <HAL_Delay>
      ms++;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3301      	adds	r3, #1
 80053ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f9f5 	bl	80057a0 <USB_GetMode>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <USB_SetCurrentMode+0x84>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b31      	cmp	r3, #49	; 0x31
 80053c0:	d9f0      	bls.n	80053a4 <USB_SetCurrentMode+0x60>
 80053c2:	e001      	b.n	80053c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e005      	b.n	80053d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b32      	cmp	r3, #50	; 0x32
 80053cc:	d101      	bne.n	80053d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053dc:	b084      	sub	sp, #16
 80053de:	b580      	push	{r7, lr}
 80053e0:	b086      	sub	sp, #24
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053f6:	2300      	movs	r3, #0
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	e009      	b.n	8005410 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	3340      	adds	r3, #64	; 0x40
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	2200      	movs	r2, #0
 8005408:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	3301      	adds	r3, #1
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	2b0e      	cmp	r3, #14
 8005414:	d9f2      	bls.n	80053fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005418:	2b00      	cmp	r3, #0
 800541a:	d11c      	bne.n	8005456 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800542a:	f043 0302 	orr.w	r3, r3, #2
 800542e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	639a      	str	r2, [r3, #56]	; 0x38
 8005454:	e00b      	b.n	800546e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005474:	461a      	mov	r2, r3
 8005476:	2300      	movs	r3, #0
 8005478:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005480:	4619      	mov	r1, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005488:	461a      	mov	r2, r3
 800548a:	680b      	ldr	r3, [r1, #0]
 800548c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	2b01      	cmp	r3, #1
 8005492:	d10c      	bne.n	80054ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d104      	bne.n	80054a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800549a:	2100      	movs	r1, #0
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f945 	bl	800572c <USB_SetDevSpeed>
 80054a2:	e008      	b.n	80054b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054a4:	2101      	movs	r1, #1
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f940 	bl	800572c <USB_SetDevSpeed>
 80054ac:	e003      	b.n	80054b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054ae:	2103      	movs	r1, #3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f93b 	bl	800572c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054b6:	2110      	movs	r1, #16
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f8f3 	bl	80056a4 <USB_FlushTxFifo>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f90f 	bl	80056ec <USB_FlushRxFifo>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054de:	461a      	mov	r2, r3
 80054e0:	2300      	movs	r3, #0
 80054e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ea:	461a      	mov	r2, r3
 80054ec:	2300      	movs	r3, #0
 80054ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f6:	461a      	mov	r2, r3
 80054f8:	2300      	movs	r3, #0
 80054fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054fc:	2300      	movs	r3, #0
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	e043      	b.n	800558a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005518:	d118      	bne.n	800554c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552c:	461a      	mov	r2, r3
 800552e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	e013      	b.n	800555e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005542:	461a      	mov	r2, r3
 8005544:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	e008      	b.n	800555e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005558:	461a      	mov	r2, r3
 800555a:	2300      	movs	r3, #0
 800555c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556a:	461a      	mov	r2, r3
 800556c:	2300      	movs	r3, #0
 800556e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	461a      	mov	r2, r3
 800557e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005582:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	3301      	adds	r3, #1
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	429a      	cmp	r2, r3
 8005590:	d3b7      	bcc.n	8005502 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005592:	2300      	movs	r3, #0
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	e043      	b.n	8005620 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ae:	d118      	bne.n	80055e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10a      	bne.n	80055cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c2:	461a      	mov	r2, r3
 80055c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	e013      	b.n	80055f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d8:	461a      	mov	r2, r3
 80055da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	e008      	b.n	80055f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ee:	461a      	mov	r2, r3
 80055f0:	2300      	movs	r3, #0
 80055f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	461a      	mov	r2, r3
 8005602:	2300      	movs	r3, #0
 8005604:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005612:	461a      	mov	r2, r3
 8005614:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005618:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	3301      	adds	r3, #1
 800561e:	613b      	str	r3, [r7, #16]
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	429a      	cmp	r2, r3
 8005626:	d3b7      	bcc.n	8005598 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005636:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800563a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005648:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	2b00      	cmp	r3, #0
 800564e:	d105      	bne.n	800565c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	f043 0210 	orr.w	r2, r3, #16
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699a      	ldr	r2, [r3, #24]
 8005660:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <USB_DevInit+0x2c4>)
 8005662:	4313      	orrs	r3, r2
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800566a:	2b00      	cmp	r3, #0
 800566c:	d005      	beq.n	800567a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f043 0208 	orr.w	r2, r3, #8
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800567a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800567c:	2b01      	cmp	r3, #1
 800567e:	d107      	bne.n	8005690 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005688:	f043 0304 	orr.w	r3, r3, #4
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005690:	7dfb      	ldrb	r3, [r7, #23]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800569c:	b004      	add	sp, #16
 800569e:	4770      	bx	lr
 80056a0:	803c3800 	.word	0x803c3800

080056a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	019b      	lsls	r3, r3, #6
 80056b6:	f043 0220 	orr.w	r2, r3, #32
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3301      	adds	r3, #1
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	4a08      	ldr	r2, [pc, #32]	; (80056e8 <USB_FlushTxFifo+0x44>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d901      	bls.n	80056ce <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e006      	b.n	80056dc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d0f1      	beq.n	80056be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	00030d40 	.word	0x00030d40

080056ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2210      	movs	r2, #16
 80056fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3301      	adds	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	4a08      	ldr	r2, [pc, #32]	; (8005728 <USB_FlushRxFifo+0x3c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e006      	b.n	800571c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0310 	and.w	r3, r3, #16
 8005716:	2b10      	cmp	r3, #16
 8005718:	d0f1      	beq.n	80056fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	00030d40 	.word	0x00030d40

0800572c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	68f9      	ldr	r1, [r7, #12]
 8005748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800574c:	4313      	orrs	r3, r2
 800574e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005778:	f023 0303 	bic.w	r3, r3, #3
 800577c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800578c:	f043 0302 	orr.w	r3, r3, #2
 8005790:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	f003 0301 	and.w	r3, r3, #1
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	4a13      	ldr	r2, [pc, #76]	; (800581c <USB_CoreReset+0x60>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d901      	bls.n	80057d8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e01a      	b.n	800580e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	daf3      	bge.n	80057c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f043 0201 	orr.w	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3301      	adds	r3, #1
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	4a09      	ldr	r2, [pc, #36]	; (800581c <USB_CoreReset+0x60>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d901      	bls.n	8005800 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e006      	b.n	800580e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	d0f1      	beq.n	80057f0 <USB_CoreReset+0x34>

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	00030d40 	.word	0x00030d40

08005820 <__errno>:
 8005820:	4b01      	ldr	r3, [pc, #4]	; (8005828 <__errno+0x8>)
 8005822:	6818      	ldr	r0, [r3, #0]
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20000028 	.word	0x20000028

0800582c <__libc_init_array>:
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	4d0d      	ldr	r5, [pc, #52]	; (8005864 <__libc_init_array+0x38>)
 8005830:	4c0d      	ldr	r4, [pc, #52]	; (8005868 <__libc_init_array+0x3c>)
 8005832:	1b64      	subs	r4, r4, r5
 8005834:	10a4      	asrs	r4, r4, #2
 8005836:	2600      	movs	r6, #0
 8005838:	42a6      	cmp	r6, r4
 800583a:	d109      	bne.n	8005850 <__libc_init_array+0x24>
 800583c:	4d0b      	ldr	r5, [pc, #44]	; (800586c <__libc_init_array+0x40>)
 800583e:	4c0c      	ldr	r4, [pc, #48]	; (8005870 <__libc_init_array+0x44>)
 8005840:	f000 fc5e 	bl	8006100 <_init>
 8005844:	1b64      	subs	r4, r4, r5
 8005846:	10a4      	asrs	r4, r4, #2
 8005848:	2600      	movs	r6, #0
 800584a:	42a6      	cmp	r6, r4
 800584c:	d105      	bne.n	800585a <__libc_init_array+0x2e>
 800584e:	bd70      	pop	{r4, r5, r6, pc}
 8005850:	f855 3b04 	ldr.w	r3, [r5], #4
 8005854:	4798      	blx	r3
 8005856:	3601      	adds	r6, #1
 8005858:	e7ee      	b.n	8005838 <__libc_init_array+0xc>
 800585a:	f855 3b04 	ldr.w	r3, [r5], #4
 800585e:	4798      	blx	r3
 8005860:	3601      	adds	r6, #1
 8005862:	e7f2      	b.n	800584a <__libc_init_array+0x1e>
 8005864:	08006208 	.word	0x08006208
 8005868:	08006208 	.word	0x08006208
 800586c:	08006208 	.word	0x08006208
 8005870:	0800620c 	.word	0x0800620c

08005874 <malloc>:
 8005874:	4b02      	ldr	r3, [pc, #8]	; (8005880 <malloc+0xc>)
 8005876:	4601      	mov	r1, r0
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	f000 b871 	b.w	8005960 <_malloc_r>
 800587e:	bf00      	nop
 8005880:	20000028 	.word	0x20000028

08005884 <free>:
 8005884:	4b02      	ldr	r3, [pc, #8]	; (8005890 <free+0xc>)
 8005886:	4601      	mov	r1, r0
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	f000 b819 	b.w	80058c0 <_free_r>
 800588e:	bf00      	nop
 8005890:	20000028 	.word	0x20000028

08005894 <memcpy>:
 8005894:	440a      	add	r2, r1
 8005896:	4291      	cmp	r1, r2
 8005898:	f100 33ff 	add.w	r3, r0, #4294967295
 800589c:	d100      	bne.n	80058a0 <memcpy+0xc>
 800589e:	4770      	bx	lr
 80058a0:	b510      	push	{r4, lr}
 80058a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058aa:	4291      	cmp	r1, r2
 80058ac:	d1f9      	bne.n	80058a2 <memcpy+0xe>
 80058ae:	bd10      	pop	{r4, pc}

080058b0 <memset>:
 80058b0:	4402      	add	r2, r0
 80058b2:	4603      	mov	r3, r0
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d100      	bne.n	80058ba <memset+0xa>
 80058b8:	4770      	bx	lr
 80058ba:	f803 1b01 	strb.w	r1, [r3], #1
 80058be:	e7f9      	b.n	80058b4 <memset+0x4>

080058c0 <_free_r>:
 80058c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058c2:	2900      	cmp	r1, #0
 80058c4:	d048      	beq.n	8005958 <_free_r+0x98>
 80058c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058ca:	9001      	str	r0, [sp, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f1a1 0404 	sub.w	r4, r1, #4
 80058d2:	bfb8      	it	lt
 80058d4:	18e4      	addlt	r4, r4, r3
 80058d6:	f000 f8cd 	bl	8005a74 <__malloc_lock>
 80058da:	4a20      	ldr	r2, [pc, #128]	; (800595c <_free_r+0x9c>)
 80058dc:	9801      	ldr	r0, [sp, #4]
 80058de:	6813      	ldr	r3, [r2, #0]
 80058e0:	4615      	mov	r5, r2
 80058e2:	b933      	cbnz	r3, 80058f2 <_free_r+0x32>
 80058e4:	6063      	str	r3, [r4, #4]
 80058e6:	6014      	str	r4, [r2, #0]
 80058e8:	b003      	add	sp, #12
 80058ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058ee:	f000 b8c7 	b.w	8005a80 <__malloc_unlock>
 80058f2:	42a3      	cmp	r3, r4
 80058f4:	d90b      	bls.n	800590e <_free_r+0x4e>
 80058f6:	6821      	ldr	r1, [r4, #0]
 80058f8:	1862      	adds	r2, r4, r1
 80058fa:	4293      	cmp	r3, r2
 80058fc:	bf04      	itt	eq
 80058fe:	681a      	ldreq	r2, [r3, #0]
 8005900:	685b      	ldreq	r3, [r3, #4]
 8005902:	6063      	str	r3, [r4, #4]
 8005904:	bf04      	itt	eq
 8005906:	1852      	addeq	r2, r2, r1
 8005908:	6022      	streq	r2, [r4, #0]
 800590a:	602c      	str	r4, [r5, #0]
 800590c:	e7ec      	b.n	80058e8 <_free_r+0x28>
 800590e:	461a      	mov	r2, r3
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	b10b      	cbz	r3, 8005918 <_free_r+0x58>
 8005914:	42a3      	cmp	r3, r4
 8005916:	d9fa      	bls.n	800590e <_free_r+0x4e>
 8005918:	6811      	ldr	r1, [r2, #0]
 800591a:	1855      	adds	r5, r2, r1
 800591c:	42a5      	cmp	r5, r4
 800591e:	d10b      	bne.n	8005938 <_free_r+0x78>
 8005920:	6824      	ldr	r4, [r4, #0]
 8005922:	4421      	add	r1, r4
 8005924:	1854      	adds	r4, r2, r1
 8005926:	42a3      	cmp	r3, r4
 8005928:	6011      	str	r1, [r2, #0]
 800592a:	d1dd      	bne.n	80058e8 <_free_r+0x28>
 800592c:	681c      	ldr	r4, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	6053      	str	r3, [r2, #4]
 8005932:	4421      	add	r1, r4
 8005934:	6011      	str	r1, [r2, #0]
 8005936:	e7d7      	b.n	80058e8 <_free_r+0x28>
 8005938:	d902      	bls.n	8005940 <_free_r+0x80>
 800593a:	230c      	movs	r3, #12
 800593c:	6003      	str	r3, [r0, #0]
 800593e:	e7d3      	b.n	80058e8 <_free_r+0x28>
 8005940:	6825      	ldr	r5, [r4, #0]
 8005942:	1961      	adds	r1, r4, r5
 8005944:	428b      	cmp	r3, r1
 8005946:	bf04      	itt	eq
 8005948:	6819      	ldreq	r1, [r3, #0]
 800594a:	685b      	ldreq	r3, [r3, #4]
 800594c:	6063      	str	r3, [r4, #4]
 800594e:	bf04      	itt	eq
 8005950:	1949      	addeq	r1, r1, r5
 8005952:	6021      	streq	r1, [r4, #0]
 8005954:	6054      	str	r4, [r2, #4]
 8005956:	e7c7      	b.n	80058e8 <_free_r+0x28>
 8005958:	b003      	add	sp, #12
 800595a:	bd30      	pop	{r4, r5, pc}
 800595c:	20000130 	.word	0x20000130

08005960 <_malloc_r>:
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	1ccd      	adds	r5, r1, #3
 8005964:	f025 0503 	bic.w	r5, r5, #3
 8005968:	3508      	adds	r5, #8
 800596a:	2d0c      	cmp	r5, #12
 800596c:	bf38      	it	cc
 800596e:	250c      	movcc	r5, #12
 8005970:	2d00      	cmp	r5, #0
 8005972:	4606      	mov	r6, r0
 8005974:	db01      	blt.n	800597a <_malloc_r+0x1a>
 8005976:	42a9      	cmp	r1, r5
 8005978:	d903      	bls.n	8005982 <_malloc_r+0x22>
 800597a:	230c      	movs	r3, #12
 800597c:	6033      	str	r3, [r6, #0]
 800597e:	2000      	movs	r0, #0
 8005980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005982:	f000 f877 	bl	8005a74 <__malloc_lock>
 8005986:	4921      	ldr	r1, [pc, #132]	; (8005a0c <_malloc_r+0xac>)
 8005988:	680a      	ldr	r2, [r1, #0]
 800598a:	4614      	mov	r4, r2
 800598c:	b99c      	cbnz	r4, 80059b6 <_malloc_r+0x56>
 800598e:	4f20      	ldr	r7, [pc, #128]	; (8005a10 <_malloc_r+0xb0>)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	b923      	cbnz	r3, 800599e <_malloc_r+0x3e>
 8005994:	4621      	mov	r1, r4
 8005996:	4630      	mov	r0, r6
 8005998:	f000 f83c 	bl	8005a14 <_sbrk_r>
 800599c:	6038      	str	r0, [r7, #0]
 800599e:	4629      	mov	r1, r5
 80059a0:	4630      	mov	r0, r6
 80059a2:	f000 f837 	bl	8005a14 <_sbrk_r>
 80059a6:	1c43      	adds	r3, r0, #1
 80059a8:	d123      	bne.n	80059f2 <_malloc_r+0x92>
 80059aa:	230c      	movs	r3, #12
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	4630      	mov	r0, r6
 80059b0:	f000 f866 	bl	8005a80 <__malloc_unlock>
 80059b4:	e7e3      	b.n	800597e <_malloc_r+0x1e>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	1b5b      	subs	r3, r3, r5
 80059ba:	d417      	bmi.n	80059ec <_malloc_r+0x8c>
 80059bc:	2b0b      	cmp	r3, #11
 80059be:	d903      	bls.n	80059c8 <_malloc_r+0x68>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	441c      	add	r4, r3
 80059c4:	6025      	str	r5, [r4, #0]
 80059c6:	e004      	b.n	80059d2 <_malloc_r+0x72>
 80059c8:	6863      	ldr	r3, [r4, #4]
 80059ca:	42a2      	cmp	r2, r4
 80059cc:	bf0c      	ite	eq
 80059ce:	600b      	streq	r3, [r1, #0]
 80059d0:	6053      	strne	r3, [r2, #4]
 80059d2:	4630      	mov	r0, r6
 80059d4:	f000 f854 	bl	8005a80 <__malloc_unlock>
 80059d8:	f104 000b 	add.w	r0, r4, #11
 80059dc:	1d23      	adds	r3, r4, #4
 80059de:	f020 0007 	bic.w	r0, r0, #7
 80059e2:	1ac2      	subs	r2, r0, r3
 80059e4:	d0cc      	beq.n	8005980 <_malloc_r+0x20>
 80059e6:	1a1b      	subs	r3, r3, r0
 80059e8:	50a3      	str	r3, [r4, r2]
 80059ea:	e7c9      	b.n	8005980 <_malloc_r+0x20>
 80059ec:	4622      	mov	r2, r4
 80059ee:	6864      	ldr	r4, [r4, #4]
 80059f0:	e7cc      	b.n	800598c <_malloc_r+0x2c>
 80059f2:	1cc4      	adds	r4, r0, #3
 80059f4:	f024 0403 	bic.w	r4, r4, #3
 80059f8:	42a0      	cmp	r0, r4
 80059fa:	d0e3      	beq.n	80059c4 <_malloc_r+0x64>
 80059fc:	1a21      	subs	r1, r4, r0
 80059fe:	4630      	mov	r0, r6
 8005a00:	f000 f808 	bl	8005a14 <_sbrk_r>
 8005a04:	3001      	adds	r0, #1
 8005a06:	d1dd      	bne.n	80059c4 <_malloc_r+0x64>
 8005a08:	e7cf      	b.n	80059aa <_malloc_r+0x4a>
 8005a0a:	bf00      	nop
 8005a0c:	20000130 	.word	0x20000130
 8005a10:	20000134 	.word	0x20000134

08005a14 <_sbrk_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	4d06      	ldr	r5, [pc, #24]	; (8005a30 <_sbrk_r+0x1c>)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	4608      	mov	r0, r1
 8005a1e:	602b      	str	r3, [r5, #0]
 8005a20:	f7fc fc6c 	bl	80022fc <_sbrk>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_sbrk_r+0x1a>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_sbrk_r+0x1a>
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	20000920 	.word	0x20000920

08005a34 <siprintf>:
 8005a34:	b40e      	push	{r1, r2, r3}
 8005a36:	b500      	push	{lr}
 8005a38:	b09c      	sub	sp, #112	; 0x70
 8005a3a:	ab1d      	add	r3, sp, #116	; 0x74
 8005a3c:	9002      	str	r0, [sp, #8]
 8005a3e:	9006      	str	r0, [sp, #24]
 8005a40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a44:	4809      	ldr	r0, [pc, #36]	; (8005a6c <siprintf+0x38>)
 8005a46:	9107      	str	r1, [sp, #28]
 8005a48:	9104      	str	r1, [sp, #16]
 8005a4a:	4909      	ldr	r1, [pc, #36]	; (8005a70 <siprintf+0x3c>)
 8005a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a50:	9105      	str	r1, [sp, #20]
 8005a52:	6800      	ldr	r0, [r0, #0]
 8005a54:	9301      	str	r3, [sp, #4]
 8005a56:	a902      	add	r1, sp, #8
 8005a58:	f000 f874 	bl	8005b44 <_svfiprintf_r>
 8005a5c:	9b02      	ldr	r3, [sp, #8]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	701a      	strb	r2, [r3, #0]
 8005a62:	b01c      	add	sp, #112	; 0x70
 8005a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a68:	b003      	add	sp, #12
 8005a6a:	4770      	bx	lr
 8005a6c:	20000028 	.word	0x20000028
 8005a70:	ffff0208 	.word	0xffff0208

08005a74 <__malloc_lock>:
 8005a74:	4801      	ldr	r0, [pc, #4]	; (8005a7c <__malloc_lock+0x8>)
 8005a76:	f000 baf9 	b.w	800606c <__retarget_lock_acquire_recursive>
 8005a7a:	bf00      	nop
 8005a7c:	20000928 	.word	0x20000928

08005a80 <__malloc_unlock>:
 8005a80:	4801      	ldr	r0, [pc, #4]	; (8005a88 <__malloc_unlock+0x8>)
 8005a82:	f000 baf4 	b.w	800606e <__retarget_lock_release_recursive>
 8005a86:	bf00      	nop
 8005a88:	20000928 	.word	0x20000928

08005a8c <__ssputs_r>:
 8005a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a90:	688e      	ldr	r6, [r1, #8]
 8005a92:	429e      	cmp	r6, r3
 8005a94:	4682      	mov	sl, r0
 8005a96:	460c      	mov	r4, r1
 8005a98:	4690      	mov	r8, r2
 8005a9a:	461f      	mov	r7, r3
 8005a9c:	d838      	bhi.n	8005b10 <__ssputs_r+0x84>
 8005a9e:	898a      	ldrh	r2, [r1, #12]
 8005aa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005aa4:	d032      	beq.n	8005b0c <__ssputs_r+0x80>
 8005aa6:	6825      	ldr	r5, [r4, #0]
 8005aa8:	6909      	ldr	r1, [r1, #16]
 8005aaa:	eba5 0901 	sub.w	r9, r5, r1
 8005aae:	6965      	ldr	r5, [r4, #20]
 8005ab0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ab8:	3301      	adds	r3, #1
 8005aba:	444b      	add	r3, r9
 8005abc:	106d      	asrs	r5, r5, #1
 8005abe:	429d      	cmp	r5, r3
 8005ac0:	bf38      	it	cc
 8005ac2:	461d      	movcc	r5, r3
 8005ac4:	0553      	lsls	r3, r2, #21
 8005ac6:	d531      	bpl.n	8005b2c <__ssputs_r+0xa0>
 8005ac8:	4629      	mov	r1, r5
 8005aca:	f7ff ff49 	bl	8005960 <_malloc_r>
 8005ace:	4606      	mov	r6, r0
 8005ad0:	b950      	cbnz	r0, 8005ae8 <__ssputs_r+0x5c>
 8005ad2:	230c      	movs	r3, #12
 8005ad4:	f8ca 3000 	str.w	r3, [sl]
 8005ad8:	89a3      	ldrh	r3, [r4, #12]
 8005ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ade:	81a3      	strh	r3, [r4, #12]
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae8:	6921      	ldr	r1, [r4, #16]
 8005aea:	464a      	mov	r2, r9
 8005aec:	f7ff fed2 	bl	8005894 <memcpy>
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afa:	81a3      	strh	r3, [r4, #12]
 8005afc:	6126      	str	r6, [r4, #16]
 8005afe:	6165      	str	r5, [r4, #20]
 8005b00:	444e      	add	r6, r9
 8005b02:	eba5 0509 	sub.w	r5, r5, r9
 8005b06:	6026      	str	r6, [r4, #0]
 8005b08:	60a5      	str	r5, [r4, #8]
 8005b0a:	463e      	mov	r6, r7
 8005b0c:	42be      	cmp	r6, r7
 8005b0e:	d900      	bls.n	8005b12 <__ssputs_r+0x86>
 8005b10:	463e      	mov	r6, r7
 8005b12:	4632      	mov	r2, r6
 8005b14:	6820      	ldr	r0, [r4, #0]
 8005b16:	4641      	mov	r1, r8
 8005b18:	f000 faaa 	bl	8006070 <memmove>
 8005b1c:	68a3      	ldr	r3, [r4, #8]
 8005b1e:	6822      	ldr	r2, [r4, #0]
 8005b20:	1b9b      	subs	r3, r3, r6
 8005b22:	4432      	add	r2, r6
 8005b24:	60a3      	str	r3, [r4, #8]
 8005b26:	6022      	str	r2, [r4, #0]
 8005b28:	2000      	movs	r0, #0
 8005b2a:	e7db      	b.n	8005ae4 <__ssputs_r+0x58>
 8005b2c:	462a      	mov	r2, r5
 8005b2e:	f000 fab9 	bl	80060a4 <_realloc_r>
 8005b32:	4606      	mov	r6, r0
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d1e1      	bne.n	8005afc <__ssputs_r+0x70>
 8005b38:	6921      	ldr	r1, [r4, #16]
 8005b3a:	4650      	mov	r0, sl
 8005b3c:	f7ff fec0 	bl	80058c0 <_free_r>
 8005b40:	e7c7      	b.n	8005ad2 <__ssputs_r+0x46>
	...

08005b44 <_svfiprintf_r>:
 8005b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b48:	4698      	mov	r8, r3
 8005b4a:	898b      	ldrh	r3, [r1, #12]
 8005b4c:	061b      	lsls	r3, r3, #24
 8005b4e:	b09d      	sub	sp, #116	; 0x74
 8005b50:	4607      	mov	r7, r0
 8005b52:	460d      	mov	r5, r1
 8005b54:	4614      	mov	r4, r2
 8005b56:	d50e      	bpl.n	8005b76 <_svfiprintf_r+0x32>
 8005b58:	690b      	ldr	r3, [r1, #16]
 8005b5a:	b963      	cbnz	r3, 8005b76 <_svfiprintf_r+0x32>
 8005b5c:	2140      	movs	r1, #64	; 0x40
 8005b5e:	f7ff feff 	bl	8005960 <_malloc_r>
 8005b62:	6028      	str	r0, [r5, #0]
 8005b64:	6128      	str	r0, [r5, #16]
 8005b66:	b920      	cbnz	r0, 8005b72 <_svfiprintf_r+0x2e>
 8005b68:	230c      	movs	r3, #12
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b70:	e0d1      	b.n	8005d16 <_svfiprintf_r+0x1d2>
 8005b72:	2340      	movs	r3, #64	; 0x40
 8005b74:	616b      	str	r3, [r5, #20]
 8005b76:	2300      	movs	r3, #0
 8005b78:	9309      	str	r3, [sp, #36]	; 0x24
 8005b7a:	2320      	movs	r3, #32
 8005b7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b80:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b84:	2330      	movs	r3, #48	; 0x30
 8005b86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d30 <_svfiprintf_r+0x1ec>
 8005b8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b8e:	f04f 0901 	mov.w	r9, #1
 8005b92:	4623      	mov	r3, r4
 8005b94:	469a      	mov	sl, r3
 8005b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b9a:	b10a      	cbz	r2, 8005ba0 <_svfiprintf_r+0x5c>
 8005b9c:	2a25      	cmp	r2, #37	; 0x25
 8005b9e:	d1f9      	bne.n	8005b94 <_svfiprintf_r+0x50>
 8005ba0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ba4:	d00b      	beq.n	8005bbe <_svfiprintf_r+0x7a>
 8005ba6:	465b      	mov	r3, fp
 8005ba8:	4622      	mov	r2, r4
 8005baa:	4629      	mov	r1, r5
 8005bac:	4638      	mov	r0, r7
 8005bae:	f7ff ff6d 	bl	8005a8c <__ssputs_r>
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	f000 80aa 	beq.w	8005d0c <_svfiprintf_r+0x1c8>
 8005bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bba:	445a      	add	r2, fp
 8005bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8005bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 80a2 	beq.w	8005d0c <_svfiprintf_r+0x1c8>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f04f 32ff 	mov.w	r2, #4294967295
 8005bce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bd2:	f10a 0a01 	add.w	sl, sl, #1
 8005bd6:	9304      	str	r3, [sp, #16]
 8005bd8:	9307      	str	r3, [sp, #28]
 8005bda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bde:	931a      	str	r3, [sp, #104]	; 0x68
 8005be0:	4654      	mov	r4, sl
 8005be2:	2205      	movs	r2, #5
 8005be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005be8:	4851      	ldr	r0, [pc, #324]	; (8005d30 <_svfiprintf_r+0x1ec>)
 8005bea:	f7fa fb01 	bl	80001f0 <memchr>
 8005bee:	9a04      	ldr	r2, [sp, #16]
 8005bf0:	b9d8      	cbnz	r0, 8005c2a <_svfiprintf_r+0xe6>
 8005bf2:	06d0      	lsls	r0, r2, #27
 8005bf4:	bf44      	itt	mi
 8005bf6:	2320      	movmi	r3, #32
 8005bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bfc:	0711      	lsls	r1, r2, #28
 8005bfe:	bf44      	itt	mi
 8005c00:	232b      	movmi	r3, #43	; 0x2b
 8005c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c06:	f89a 3000 	ldrb.w	r3, [sl]
 8005c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c0c:	d015      	beq.n	8005c3a <_svfiprintf_r+0xf6>
 8005c0e:	9a07      	ldr	r2, [sp, #28]
 8005c10:	4654      	mov	r4, sl
 8005c12:	2000      	movs	r0, #0
 8005c14:	f04f 0c0a 	mov.w	ip, #10
 8005c18:	4621      	mov	r1, r4
 8005c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c1e:	3b30      	subs	r3, #48	; 0x30
 8005c20:	2b09      	cmp	r3, #9
 8005c22:	d94e      	bls.n	8005cc2 <_svfiprintf_r+0x17e>
 8005c24:	b1b0      	cbz	r0, 8005c54 <_svfiprintf_r+0x110>
 8005c26:	9207      	str	r2, [sp, #28]
 8005c28:	e014      	b.n	8005c54 <_svfiprintf_r+0x110>
 8005c2a:	eba0 0308 	sub.w	r3, r0, r8
 8005c2e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c32:	4313      	orrs	r3, r2
 8005c34:	9304      	str	r3, [sp, #16]
 8005c36:	46a2      	mov	sl, r4
 8005c38:	e7d2      	b.n	8005be0 <_svfiprintf_r+0x9c>
 8005c3a:	9b03      	ldr	r3, [sp, #12]
 8005c3c:	1d19      	adds	r1, r3, #4
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	9103      	str	r1, [sp, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	bfbb      	ittet	lt
 8005c46:	425b      	neglt	r3, r3
 8005c48:	f042 0202 	orrlt.w	r2, r2, #2
 8005c4c:	9307      	strge	r3, [sp, #28]
 8005c4e:	9307      	strlt	r3, [sp, #28]
 8005c50:	bfb8      	it	lt
 8005c52:	9204      	strlt	r2, [sp, #16]
 8005c54:	7823      	ldrb	r3, [r4, #0]
 8005c56:	2b2e      	cmp	r3, #46	; 0x2e
 8005c58:	d10c      	bne.n	8005c74 <_svfiprintf_r+0x130>
 8005c5a:	7863      	ldrb	r3, [r4, #1]
 8005c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c5e:	d135      	bne.n	8005ccc <_svfiprintf_r+0x188>
 8005c60:	9b03      	ldr	r3, [sp, #12]
 8005c62:	1d1a      	adds	r2, r3, #4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	9203      	str	r2, [sp, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	bfb8      	it	lt
 8005c6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c70:	3402      	adds	r4, #2
 8005c72:	9305      	str	r3, [sp, #20]
 8005c74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d40 <_svfiprintf_r+0x1fc>
 8005c78:	7821      	ldrb	r1, [r4, #0]
 8005c7a:	2203      	movs	r2, #3
 8005c7c:	4650      	mov	r0, sl
 8005c7e:	f7fa fab7 	bl	80001f0 <memchr>
 8005c82:	b140      	cbz	r0, 8005c96 <_svfiprintf_r+0x152>
 8005c84:	2340      	movs	r3, #64	; 0x40
 8005c86:	eba0 000a 	sub.w	r0, r0, sl
 8005c8a:	fa03 f000 	lsl.w	r0, r3, r0
 8005c8e:	9b04      	ldr	r3, [sp, #16]
 8005c90:	4303      	orrs	r3, r0
 8005c92:	3401      	adds	r4, #1
 8005c94:	9304      	str	r3, [sp, #16]
 8005c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c9a:	4826      	ldr	r0, [pc, #152]	; (8005d34 <_svfiprintf_r+0x1f0>)
 8005c9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ca0:	2206      	movs	r2, #6
 8005ca2:	f7fa faa5 	bl	80001f0 <memchr>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d038      	beq.n	8005d1c <_svfiprintf_r+0x1d8>
 8005caa:	4b23      	ldr	r3, [pc, #140]	; (8005d38 <_svfiprintf_r+0x1f4>)
 8005cac:	bb1b      	cbnz	r3, 8005cf6 <_svfiprintf_r+0x1b2>
 8005cae:	9b03      	ldr	r3, [sp, #12]
 8005cb0:	3307      	adds	r3, #7
 8005cb2:	f023 0307 	bic.w	r3, r3, #7
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	9303      	str	r3, [sp, #12]
 8005cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cbc:	4433      	add	r3, r6
 8005cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc0:	e767      	b.n	8005b92 <_svfiprintf_r+0x4e>
 8005cc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	2001      	movs	r0, #1
 8005cca:	e7a5      	b.n	8005c18 <_svfiprintf_r+0xd4>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	3401      	adds	r4, #1
 8005cd0:	9305      	str	r3, [sp, #20]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	f04f 0c0a 	mov.w	ip, #10
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cde:	3a30      	subs	r2, #48	; 0x30
 8005ce0:	2a09      	cmp	r2, #9
 8005ce2:	d903      	bls.n	8005cec <_svfiprintf_r+0x1a8>
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0c5      	beq.n	8005c74 <_svfiprintf_r+0x130>
 8005ce8:	9105      	str	r1, [sp, #20]
 8005cea:	e7c3      	b.n	8005c74 <_svfiprintf_r+0x130>
 8005cec:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e7f0      	b.n	8005cd8 <_svfiprintf_r+0x194>
 8005cf6:	ab03      	add	r3, sp, #12
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	462a      	mov	r2, r5
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <_svfiprintf_r+0x1f8>)
 8005cfe:	a904      	add	r1, sp, #16
 8005d00:	4638      	mov	r0, r7
 8005d02:	f3af 8000 	nop.w
 8005d06:	1c42      	adds	r2, r0, #1
 8005d08:	4606      	mov	r6, r0
 8005d0a:	d1d6      	bne.n	8005cba <_svfiprintf_r+0x176>
 8005d0c:	89ab      	ldrh	r3, [r5, #12]
 8005d0e:	065b      	lsls	r3, r3, #25
 8005d10:	f53f af2c 	bmi.w	8005b6c <_svfiprintf_r+0x28>
 8005d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d16:	b01d      	add	sp, #116	; 0x74
 8005d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d1c:	ab03      	add	r3, sp, #12
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	462a      	mov	r2, r5
 8005d22:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <_svfiprintf_r+0x1f8>)
 8005d24:	a904      	add	r1, sp, #16
 8005d26:	4638      	mov	r0, r7
 8005d28:	f000 f87a 	bl	8005e20 <_printf_i>
 8005d2c:	e7eb      	b.n	8005d06 <_svfiprintf_r+0x1c2>
 8005d2e:	bf00      	nop
 8005d30:	080061cc 	.word	0x080061cc
 8005d34:	080061d6 	.word	0x080061d6
 8005d38:	00000000 	.word	0x00000000
 8005d3c:	08005a8d 	.word	0x08005a8d
 8005d40:	080061d2 	.word	0x080061d2

08005d44 <_printf_common>:
 8005d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d48:	4616      	mov	r6, r2
 8005d4a:	4699      	mov	r9, r3
 8005d4c:	688a      	ldr	r2, [r1, #8]
 8005d4e:	690b      	ldr	r3, [r1, #16]
 8005d50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d54:	4293      	cmp	r3, r2
 8005d56:	bfb8      	it	lt
 8005d58:	4613      	movlt	r3, r2
 8005d5a:	6033      	str	r3, [r6, #0]
 8005d5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d60:	4607      	mov	r7, r0
 8005d62:	460c      	mov	r4, r1
 8005d64:	b10a      	cbz	r2, 8005d6a <_printf_common+0x26>
 8005d66:	3301      	adds	r3, #1
 8005d68:	6033      	str	r3, [r6, #0]
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	0699      	lsls	r1, r3, #26
 8005d6e:	bf42      	ittt	mi
 8005d70:	6833      	ldrmi	r3, [r6, #0]
 8005d72:	3302      	addmi	r3, #2
 8005d74:	6033      	strmi	r3, [r6, #0]
 8005d76:	6825      	ldr	r5, [r4, #0]
 8005d78:	f015 0506 	ands.w	r5, r5, #6
 8005d7c:	d106      	bne.n	8005d8c <_printf_common+0x48>
 8005d7e:	f104 0a19 	add.w	sl, r4, #25
 8005d82:	68e3      	ldr	r3, [r4, #12]
 8005d84:	6832      	ldr	r2, [r6, #0]
 8005d86:	1a9b      	subs	r3, r3, r2
 8005d88:	42ab      	cmp	r3, r5
 8005d8a:	dc26      	bgt.n	8005dda <_printf_common+0x96>
 8005d8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d90:	1e13      	subs	r3, r2, #0
 8005d92:	6822      	ldr	r2, [r4, #0]
 8005d94:	bf18      	it	ne
 8005d96:	2301      	movne	r3, #1
 8005d98:	0692      	lsls	r2, r2, #26
 8005d9a:	d42b      	bmi.n	8005df4 <_printf_common+0xb0>
 8005d9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005da0:	4649      	mov	r1, r9
 8005da2:	4638      	mov	r0, r7
 8005da4:	47c0      	blx	r8
 8005da6:	3001      	adds	r0, #1
 8005da8:	d01e      	beq.n	8005de8 <_printf_common+0xa4>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	68e5      	ldr	r5, [r4, #12]
 8005dae:	6832      	ldr	r2, [r6, #0]
 8005db0:	f003 0306 	and.w	r3, r3, #6
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	bf08      	it	eq
 8005db8:	1aad      	subeq	r5, r5, r2
 8005dba:	68a3      	ldr	r3, [r4, #8]
 8005dbc:	6922      	ldr	r2, [r4, #16]
 8005dbe:	bf0c      	ite	eq
 8005dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dc4:	2500      	movne	r5, #0
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	bfc4      	itt	gt
 8005dca:	1a9b      	subgt	r3, r3, r2
 8005dcc:	18ed      	addgt	r5, r5, r3
 8005dce:	2600      	movs	r6, #0
 8005dd0:	341a      	adds	r4, #26
 8005dd2:	42b5      	cmp	r5, r6
 8005dd4:	d11a      	bne.n	8005e0c <_printf_common+0xc8>
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	e008      	b.n	8005dec <_printf_common+0xa8>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	4652      	mov	r2, sl
 8005dde:	4649      	mov	r1, r9
 8005de0:	4638      	mov	r0, r7
 8005de2:	47c0      	blx	r8
 8005de4:	3001      	adds	r0, #1
 8005de6:	d103      	bne.n	8005df0 <_printf_common+0xac>
 8005de8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df0:	3501      	adds	r5, #1
 8005df2:	e7c6      	b.n	8005d82 <_printf_common+0x3e>
 8005df4:	18e1      	adds	r1, r4, r3
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	2030      	movs	r0, #48	; 0x30
 8005dfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dfe:	4422      	add	r2, r4
 8005e00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e08:	3302      	adds	r3, #2
 8005e0a:	e7c7      	b.n	8005d9c <_printf_common+0x58>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	4622      	mov	r2, r4
 8005e10:	4649      	mov	r1, r9
 8005e12:	4638      	mov	r0, r7
 8005e14:	47c0      	blx	r8
 8005e16:	3001      	adds	r0, #1
 8005e18:	d0e6      	beq.n	8005de8 <_printf_common+0xa4>
 8005e1a:	3601      	adds	r6, #1
 8005e1c:	e7d9      	b.n	8005dd2 <_printf_common+0x8e>
	...

08005e20 <_printf_i>:
 8005e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e24:	460c      	mov	r4, r1
 8005e26:	4691      	mov	r9, r2
 8005e28:	7e27      	ldrb	r7, [r4, #24]
 8005e2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e2c:	2f78      	cmp	r7, #120	; 0x78
 8005e2e:	4680      	mov	r8, r0
 8005e30:	469a      	mov	sl, r3
 8005e32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e36:	d807      	bhi.n	8005e48 <_printf_i+0x28>
 8005e38:	2f62      	cmp	r7, #98	; 0x62
 8005e3a:	d80a      	bhi.n	8005e52 <_printf_i+0x32>
 8005e3c:	2f00      	cmp	r7, #0
 8005e3e:	f000 80d8 	beq.w	8005ff2 <_printf_i+0x1d2>
 8005e42:	2f58      	cmp	r7, #88	; 0x58
 8005e44:	f000 80a3 	beq.w	8005f8e <_printf_i+0x16e>
 8005e48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e50:	e03a      	b.n	8005ec8 <_printf_i+0xa8>
 8005e52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e56:	2b15      	cmp	r3, #21
 8005e58:	d8f6      	bhi.n	8005e48 <_printf_i+0x28>
 8005e5a:	a001      	add	r0, pc, #4	; (adr r0, 8005e60 <_printf_i+0x40>)
 8005e5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e60:	08005eb9 	.word	0x08005eb9
 8005e64:	08005ecd 	.word	0x08005ecd
 8005e68:	08005e49 	.word	0x08005e49
 8005e6c:	08005e49 	.word	0x08005e49
 8005e70:	08005e49 	.word	0x08005e49
 8005e74:	08005e49 	.word	0x08005e49
 8005e78:	08005ecd 	.word	0x08005ecd
 8005e7c:	08005e49 	.word	0x08005e49
 8005e80:	08005e49 	.word	0x08005e49
 8005e84:	08005e49 	.word	0x08005e49
 8005e88:	08005e49 	.word	0x08005e49
 8005e8c:	08005fd9 	.word	0x08005fd9
 8005e90:	08005efd 	.word	0x08005efd
 8005e94:	08005fbb 	.word	0x08005fbb
 8005e98:	08005e49 	.word	0x08005e49
 8005e9c:	08005e49 	.word	0x08005e49
 8005ea0:	08005ffb 	.word	0x08005ffb
 8005ea4:	08005e49 	.word	0x08005e49
 8005ea8:	08005efd 	.word	0x08005efd
 8005eac:	08005e49 	.word	0x08005e49
 8005eb0:	08005e49 	.word	0x08005e49
 8005eb4:	08005fc3 	.word	0x08005fc3
 8005eb8:	680b      	ldr	r3, [r1, #0]
 8005eba:	1d1a      	adds	r2, r3, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	600a      	str	r2, [r1, #0]
 8005ec0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e0a3      	b.n	8006014 <_printf_i+0x1f4>
 8005ecc:	6825      	ldr	r5, [r4, #0]
 8005ece:	6808      	ldr	r0, [r1, #0]
 8005ed0:	062e      	lsls	r6, r5, #24
 8005ed2:	f100 0304 	add.w	r3, r0, #4
 8005ed6:	d50a      	bpl.n	8005eee <_printf_i+0xce>
 8005ed8:	6805      	ldr	r5, [r0, #0]
 8005eda:	600b      	str	r3, [r1, #0]
 8005edc:	2d00      	cmp	r5, #0
 8005ede:	da03      	bge.n	8005ee8 <_printf_i+0xc8>
 8005ee0:	232d      	movs	r3, #45	; 0x2d
 8005ee2:	426d      	negs	r5, r5
 8005ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ee8:	485e      	ldr	r0, [pc, #376]	; (8006064 <_printf_i+0x244>)
 8005eea:	230a      	movs	r3, #10
 8005eec:	e019      	b.n	8005f22 <_printf_i+0x102>
 8005eee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ef2:	6805      	ldr	r5, [r0, #0]
 8005ef4:	600b      	str	r3, [r1, #0]
 8005ef6:	bf18      	it	ne
 8005ef8:	b22d      	sxthne	r5, r5
 8005efa:	e7ef      	b.n	8005edc <_printf_i+0xbc>
 8005efc:	680b      	ldr	r3, [r1, #0]
 8005efe:	6825      	ldr	r5, [r4, #0]
 8005f00:	1d18      	adds	r0, r3, #4
 8005f02:	6008      	str	r0, [r1, #0]
 8005f04:	0628      	lsls	r0, r5, #24
 8005f06:	d501      	bpl.n	8005f0c <_printf_i+0xec>
 8005f08:	681d      	ldr	r5, [r3, #0]
 8005f0a:	e002      	b.n	8005f12 <_printf_i+0xf2>
 8005f0c:	0669      	lsls	r1, r5, #25
 8005f0e:	d5fb      	bpl.n	8005f08 <_printf_i+0xe8>
 8005f10:	881d      	ldrh	r5, [r3, #0]
 8005f12:	4854      	ldr	r0, [pc, #336]	; (8006064 <_printf_i+0x244>)
 8005f14:	2f6f      	cmp	r7, #111	; 0x6f
 8005f16:	bf0c      	ite	eq
 8005f18:	2308      	moveq	r3, #8
 8005f1a:	230a      	movne	r3, #10
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f22:	6866      	ldr	r6, [r4, #4]
 8005f24:	60a6      	str	r6, [r4, #8]
 8005f26:	2e00      	cmp	r6, #0
 8005f28:	bfa2      	ittt	ge
 8005f2a:	6821      	ldrge	r1, [r4, #0]
 8005f2c:	f021 0104 	bicge.w	r1, r1, #4
 8005f30:	6021      	strge	r1, [r4, #0]
 8005f32:	b90d      	cbnz	r5, 8005f38 <_printf_i+0x118>
 8005f34:	2e00      	cmp	r6, #0
 8005f36:	d04d      	beq.n	8005fd4 <_printf_i+0x1b4>
 8005f38:	4616      	mov	r6, r2
 8005f3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f3e:	fb03 5711 	mls	r7, r3, r1, r5
 8005f42:	5dc7      	ldrb	r7, [r0, r7]
 8005f44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f48:	462f      	mov	r7, r5
 8005f4a:	42bb      	cmp	r3, r7
 8005f4c:	460d      	mov	r5, r1
 8005f4e:	d9f4      	bls.n	8005f3a <_printf_i+0x11a>
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d10b      	bne.n	8005f6c <_printf_i+0x14c>
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	07df      	lsls	r7, r3, #31
 8005f58:	d508      	bpl.n	8005f6c <_printf_i+0x14c>
 8005f5a:	6923      	ldr	r3, [r4, #16]
 8005f5c:	6861      	ldr	r1, [r4, #4]
 8005f5e:	4299      	cmp	r1, r3
 8005f60:	bfde      	ittt	le
 8005f62:	2330      	movle	r3, #48	; 0x30
 8005f64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f6c:	1b92      	subs	r2, r2, r6
 8005f6e:	6122      	str	r2, [r4, #16]
 8005f70:	f8cd a000 	str.w	sl, [sp]
 8005f74:	464b      	mov	r3, r9
 8005f76:	aa03      	add	r2, sp, #12
 8005f78:	4621      	mov	r1, r4
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	f7ff fee2 	bl	8005d44 <_printf_common>
 8005f80:	3001      	adds	r0, #1
 8005f82:	d14c      	bne.n	800601e <_printf_i+0x1fe>
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295
 8005f88:	b004      	add	sp, #16
 8005f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8e:	4835      	ldr	r0, [pc, #212]	; (8006064 <_printf_i+0x244>)
 8005f90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	680e      	ldr	r6, [r1, #0]
 8005f98:	061f      	lsls	r7, r3, #24
 8005f9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f9e:	600e      	str	r6, [r1, #0]
 8005fa0:	d514      	bpl.n	8005fcc <_printf_i+0x1ac>
 8005fa2:	07d9      	lsls	r1, r3, #31
 8005fa4:	bf44      	itt	mi
 8005fa6:	f043 0320 	orrmi.w	r3, r3, #32
 8005faa:	6023      	strmi	r3, [r4, #0]
 8005fac:	b91d      	cbnz	r5, 8005fb6 <_printf_i+0x196>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	f023 0320 	bic.w	r3, r3, #32
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	2310      	movs	r3, #16
 8005fb8:	e7b0      	b.n	8005f1c <_printf_i+0xfc>
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	f043 0320 	orr.w	r3, r3, #32
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	2378      	movs	r3, #120	; 0x78
 8005fc4:	4828      	ldr	r0, [pc, #160]	; (8006068 <_printf_i+0x248>)
 8005fc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fca:	e7e3      	b.n	8005f94 <_printf_i+0x174>
 8005fcc:	065e      	lsls	r6, r3, #25
 8005fce:	bf48      	it	mi
 8005fd0:	b2ad      	uxthmi	r5, r5
 8005fd2:	e7e6      	b.n	8005fa2 <_printf_i+0x182>
 8005fd4:	4616      	mov	r6, r2
 8005fd6:	e7bb      	b.n	8005f50 <_printf_i+0x130>
 8005fd8:	680b      	ldr	r3, [r1, #0]
 8005fda:	6826      	ldr	r6, [r4, #0]
 8005fdc:	6960      	ldr	r0, [r4, #20]
 8005fde:	1d1d      	adds	r5, r3, #4
 8005fe0:	600d      	str	r5, [r1, #0]
 8005fe2:	0635      	lsls	r5, r6, #24
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	d501      	bpl.n	8005fec <_printf_i+0x1cc>
 8005fe8:	6018      	str	r0, [r3, #0]
 8005fea:	e002      	b.n	8005ff2 <_printf_i+0x1d2>
 8005fec:	0671      	lsls	r1, r6, #25
 8005fee:	d5fb      	bpl.n	8005fe8 <_printf_i+0x1c8>
 8005ff0:	8018      	strh	r0, [r3, #0]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	6123      	str	r3, [r4, #16]
 8005ff6:	4616      	mov	r6, r2
 8005ff8:	e7ba      	b.n	8005f70 <_printf_i+0x150>
 8005ffa:	680b      	ldr	r3, [r1, #0]
 8005ffc:	1d1a      	adds	r2, r3, #4
 8005ffe:	600a      	str	r2, [r1, #0]
 8006000:	681e      	ldr	r6, [r3, #0]
 8006002:	6862      	ldr	r2, [r4, #4]
 8006004:	2100      	movs	r1, #0
 8006006:	4630      	mov	r0, r6
 8006008:	f7fa f8f2 	bl	80001f0 <memchr>
 800600c:	b108      	cbz	r0, 8006012 <_printf_i+0x1f2>
 800600e:	1b80      	subs	r0, r0, r6
 8006010:	6060      	str	r0, [r4, #4]
 8006012:	6863      	ldr	r3, [r4, #4]
 8006014:	6123      	str	r3, [r4, #16]
 8006016:	2300      	movs	r3, #0
 8006018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800601c:	e7a8      	b.n	8005f70 <_printf_i+0x150>
 800601e:	6923      	ldr	r3, [r4, #16]
 8006020:	4632      	mov	r2, r6
 8006022:	4649      	mov	r1, r9
 8006024:	4640      	mov	r0, r8
 8006026:	47d0      	blx	sl
 8006028:	3001      	adds	r0, #1
 800602a:	d0ab      	beq.n	8005f84 <_printf_i+0x164>
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	079b      	lsls	r3, r3, #30
 8006030:	d413      	bmi.n	800605a <_printf_i+0x23a>
 8006032:	68e0      	ldr	r0, [r4, #12]
 8006034:	9b03      	ldr	r3, [sp, #12]
 8006036:	4298      	cmp	r0, r3
 8006038:	bfb8      	it	lt
 800603a:	4618      	movlt	r0, r3
 800603c:	e7a4      	b.n	8005f88 <_printf_i+0x168>
 800603e:	2301      	movs	r3, #1
 8006040:	4632      	mov	r2, r6
 8006042:	4649      	mov	r1, r9
 8006044:	4640      	mov	r0, r8
 8006046:	47d0      	blx	sl
 8006048:	3001      	adds	r0, #1
 800604a:	d09b      	beq.n	8005f84 <_printf_i+0x164>
 800604c:	3501      	adds	r5, #1
 800604e:	68e3      	ldr	r3, [r4, #12]
 8006050:	9903      	ldr	r1, [sp, #12]
 8006052:	1a5b      	subs	r3, r3, r1
 8006054:	42ab      	cmp	r3, r5
 8006056:	dcf2      	bgt.n	800603e <_printf_i+0x21e>
 8006058:	e7eb      	b.n	8006032 <_printf_i+0x212>
 800605a:	2500      	movs	r5, #0
 800605c:	f104 0619 	add.w	r6, r4, #25
 8006060:	e7f5      	b.n	800604e <_printf_i+0x22e>
 8006062:	bf00      	nop
 8006064:	080061dd 	.word	0x080061dd
 8006068:	080061ee 	.word	0x080061ee

0800606c <__retarget_lock_acquire_recursive>:
 800606c:	4770      	bx	lr

0800606e <__retarget_lock_release_recursive>:
 800606e:	4770      	bx	lr

08006070 <memmove>:
 8006070:	4288      	cmp	r0, r1
 8006072:	b510      	push	{r4, lr}
 8006074:	eb01 0402 	add.w	r4, r1, r2
 8006078:	d902      	bls.n	8006080 <memmove+0x10>
 800607a:	4284      	cmp	r4, r0
 800607c:	4623      	mov	r3, r4
 800607e:	d807      	bhi.n	8006090 <memmove+0x20>
 8006080:	1e43      	subs	r3, r0, #1
 8006082:	42a1      	cmp	r1, r4
 8006084:	d008      	beq.n	8006098 <memmove+0x28>
 8006086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800608a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800608e:	e7f8      	b.n	8006082 <memmove+0x12>
 8006090:	4402      	add	r2, r0
 8006092:	4601      	mov	r1, r0
 8006094:	428a      	cmp	r2, r1
 8006096:	d100      	bne.n	800609a <memmove+0x2a>
 8006098:	bd10      	pop	{r4, pc}
 800609a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800609e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060a2:	e7f7      	b.n	8006094 <memmove+0x24>

080060a4 <_realloc_r>:
 80060a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a6:	4607      	mov	r7, r0
 80060a8:	4614      	mov	r4, r2
 80060aa:	460e      	mov	r6, r1
 80060ac:	b921      	cbnz	r1, 80060b8 <_realloc_r+0x14>
 80060ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80060b2:	4611      	mov	r1, r2
 80060b4:	f7ff bc54 	b.w	8005960 <_malloc_r>
 80060b8:	b922      	cbnz	r2, 80060c4 <_realloc_r+0x20>
 80060ba:	f7ff fc01 	bl	80058c0 <_free_r>
 80060be:	4625      	mov	r5, r4
 80060c0:	4628      	mov	r0, r5
 80060c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060c4:	f000 f814 	bl	80060f0 <_malloc_usable_size_r>
 80060c8:	42a0      	cmp	r0, r4
 80060ca:	d20f      	bcs.n	80060ec <_realloc_r+0x48>
 80060cc:	4621      	mov	r1, r4
 80060ce:	4638      	mov	r0, r7
 80060d0:	f7ff fc46 	bl	8005960 <_malloc_r>
 80060d4:	4605      	mov	r5, r0
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d0f2      	beq.n	80060c0 <_realloc_r+0x1c>
 80060da:	4631      	mov	r1, r6
 80060dc:	4622      	mov	r2, r4
 80060de:	f7ff fbd9 	bl	8005894 <memcpy>
 80060e2:	4631      	mov	r1, r6
 80060e4:	4638      	mov	r0, r7
 80060e6:	f7ff fbeb 	bl	80058c0 <_free_r>
 80060ea:	e7e9      	b.n	80060c0 <_realloc_r+0x1c>
 80060ec:	4635      	mov	r5, r6
 80060ee:	e7e7      	b.n	80060c0 <_realloc_r+0x1c>

080060f0 <_malloc_usable_size_r>:
 80060f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f4:	1f18      	subs	r0, r3, #4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bfbc      	itt	lt
 80060fa:	580b      	ldrlt	r3, [r1, r0]
 80060fc:	18c0      	addlt	r0, r0, r3
 80060fe:	4770      	bx	lr

08006100 <_init>:
 8006100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006102:	bf00      	nop
 8006104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006106:	bc08      	pop	{r3}
 8006108:	469e      	mov	lr, r3
 800610a:	4770      	bx	lr

0800610c <_fini>:
 800610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610e:	bf00      	nop
 8006110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006112:	bc08      	pop	{r3}
 8006114:	469e      	mov	lr, r3
 8006116:	4770      	bx	lr
