
f4sradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004f4c  08004f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005034  08005034  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800503c  0800503c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800503c  0800503c  0001503c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  2000008c  080050d0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  080050d0  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ddf  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ba  00000000  00000000  00033e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00036358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00037218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bcb  00000000  00000000  00038000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102e4  00000000  00000000  0005abcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0457  00000000  00000000  0006aeaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013b306  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000428c  00000000  00000000  0013b35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f34 	.word	0x08004f34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	08004f34 	.word	0x08004f34

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	4613      	mov	r3, r2
 80005b6:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 80005b8:	bf00      	nop
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <sx126x_hal_write+0x74>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a18      	ldr	r2, [pc, #96]	; (8000620 <sx126x_hal_write+0x78>)
 80005c0:	8812      	ldrh	r2, [r2, #0]
 80005c2:	4611      	mov	r1, r2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fd15 	bl	8001ff4 <HAL_GPIO_ReadPin>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d0f4      	beq.n	80005ba <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <sx126x_hal_write+0x7c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a14      	ldr	r2, [pc, #80]	; (8000628 <sx126x_hal_write+0x80>)
 80005d6:	8811      	ldrh	r1, [r2, #0]
 80005d8:	2200      	movs	r2, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fd22 	bl	8002024 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 80005e0:	88fa      	ldrh	r2, [r7, #6]
 80005e2:	2364      	movs	r3, #100	; 0x64
 80005e4:	68b9      	ldr	r1, [r7, #8]
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f002 ff9b 	bl	8003522 <HAL_SPI_Transmit>
 80005ec:	4603      	mov	r3, r0
 80005ee:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 80005f0:	8c3a      	ldrh	r2, [r7, #32]
 80005f2:	2364      	movs	r3, #100	; 0x64
 80005f4:	6839      	ldr	r1, [r7, #0]
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f002 ff93 	bl	8003522 <HAL_SPI_Transmit>
 80005fc:	4603      	mov	r3, r0
 80005fe:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <sx126x_hal_write+0x7c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a08      	ldr	r2, [pc, #32]	; (8000628 <sx126x_hal_write+0x80>)
 8000606:	8811      	ldrh	r1, [r2, #0]
 8000608:	2201      	movs	r2, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fd0a 	bl	8002024 <HAL_GPIO_WritePin>
    return status;
 8000610:	7dfb      	ldrb	r3, [r7, #23]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000bc 	.word	0x200000bc
 8000620:	200000b8 	.word	0x200000b8
 8000624:	200000ac 	.word	0x200000ac
 8000628:	200000a8 	.word	0x200000a8

0800062c <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af02      	add	r7, sp, #8
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4613      	mov	r3, r2
 800063a:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 800063c:	bf00      	nop
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <sx126x_hal_read+0x8c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a1e      	ldr	r2, [pc, #120]	; (80006bc <sx126x_hal_read+0x90>)
 8000644:	8812      	ldrh	r2, [r2, #0]
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fcd3 	bl	8001ff4 <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b01      	cmp	r3, #1
 8000652:	d0f4      	beq.n	800063e <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <sx126x_hal_read+0x94>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <sx126x_hal_read+0x98>)
 800065a:	8811      	ldrh	r1, [r2, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fce0 	bl	8002024 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 8000664:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000668:	b29a      	uxth	r2, r3
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	68b9      	ldr	r1, [r7, #8]
 800066e:	68f8      	ldr	r0, [r7, #12]
 8000670:	f002 ff57 	bl	8003522 <HAL_SPI_Transmit>
 8000674:	4603      	mov	r3, r0
 8000676:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 8000678:	f897 3020 	ldrb.w	r3, [r7, #32]
 800067c:	68ba      	ldr	r2, [r7, #8]
 800067e:	18d1      	adds	r1, r2, r3
 8000680:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000684:	b29b      	uxth	r3, r3
 8000686:	88fa      	ldrh	r2, [r7, #6]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	b29b      	uxth	r3, r3
 800068c:	2264      	movs	r2, #100	; 0x64
 800068e:	9200      	str	r2, [sp, #0]
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	f003 f881 	bl	800379a <HAL_SPI_TransmitReceive>
 8000698:	4603      	mov	r3, r0
 800069a:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <sx126x_hal_read+0x94>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <sx126x_hal_read+0x98>)
 80006a2:	8811      	ldrh	r1, [r2, #0]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fcbc 	bl	8002024 <HAL_GPIO_WritePin>
    return status;
 80006ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000bc 	.word	0x200000bc
 80006bc:	200000b8 	.word	0x200000b8
 80006c0:	200000ac 	.word	0x200000ac
 80006c4:	200000a8 	.word	0x200000a8

080006c8 <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 80006d4:	4a05      	ldr	r2, [pc, #20]	; (80006ec <set_NSS_pin+0x24>)
 80006d6:	887b      	ldrh	r3, [r7, #2]
 80006d8:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <set_NSS_pin+0x28>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	200000a8 	.word	0x200000a8
 80006f0:	200000ac 	.word	0x200000ac

080006f4 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 8000700:	4a05      	ldr	r2, [pc, #20]	; (8000718 <set_BUSY_pin+0x24>)
 8000702:	887b      	ldrh	r3, [r7, #2]
 8000704:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 8000706:	4a05      	ldr	r2, [pc, #20]	; (800071c <set_BUSY_pin+0x28>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6013      	str	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	200000b8 	.word	0x200000b8
 800071c:	200000bc 	.word	0x200000bc

08000720 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	460b      	mov	r3, r1
 800072a:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 800072c:	4a05      	ldr	r2, [pc, #20]	; (8000744 <set_NRESET_pin+0x24>)
 800072e:	887b      	ldrh	r3, [r7, #2]
 8000730:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 8000732:	4a05      	ldr	r2, [pc, #20]	; (8000748 <set_NRESET_pin+0x28>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	200000b0 	.word	0x200000b0
 8000748:	200000b4 	.word	0x200000b4

0800074c <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 8000758:	4a05      	ldr	r2, [pc, #20]	; (8000770 <set_DIO1_pin+0x24>)
 800075a:	887b      	ldrh	r3, [r7, #2]
 800075c:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 800075e:	4a05      	ldr	r2, [pc, #20]	; (8000774 <set_DIO1_pin+0x28>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	200000c0 	.word	0x200000c0
 8000774:	200000c4 	.word	0x200000c4

08000778 <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 8000778:	b084      	sub	sp, #16
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
 800077e:	f107 0c08 	add.w	ip, r7, #8
 8000782:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <set_hspi+0x2c>)
 8000788:	4618      	mov	r0, r3
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	2258      	movs	r2, #88	; 0x58
 8000790:	4619      	mov	r1, r3
 8000792:	f003 ff99 	bl	80046c8 <memcpy>
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800079e:	b004      	add	sp, #16
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	200000c8 	.word	0x200000c8

080007a8 <Tx_setup>:

void Tx_setup(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 80007ae:	4b66      	ldr	r3, [pc, #408]	; (8000948 <Tx_setup+0x1a0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a66      	ldr	r2, [pc, #408]	; (800094c <Tx_setup+0x1a4>)
 80007b4:	8811      	ldrh	r1, [r2, #0]
 80007b6:	2201      	movs	r2, #1
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fc33 	bl	8002024 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 80007be:	4b64      	ldr	r3, [pc, #400]	; (8000950 <Tx_setup+0x1a8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a64      	ldr	r2, [pc, #400]	; (8000954 <Tx_setup+0x1ac>)
 80007c4:	8811      	ldrh	r1, [r2, #0]
 80007c6:	2200      	movs	r2, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 fc2b 	bl	8002024 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80007ce:	2032      	movs	r0, #50	; 0x32
 80007d0:	f001 f972 	bl	8001ab8 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 80007d4:	4b5e      	ldr	r3, [pc, #376]	; (8000950 <Tx_setup+0x1a8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a5e      	ldr	r2, [pc, #376]	; (8000954 <Tx_setup+0x1ac>)
 80007da:	8811      	ldrh	r1, [r2, #0]
 80007dc:	2201      	movs	r2, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fc20 	bl	8002024 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 80007e4:	2100      	movs	r1, #0
 80007e6:	485c      	ldr	r0, [pc, #368]	; (8000958 <Tx_setup+0x1b0>)
 80007e8:	f000 f930 	bl	8000a4c <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 80007ec:	4b5b      	ldr	r3, [pc, #364]	; (800095c <Tx_setup+0x1b4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	4859      	ldr	r0, [pc, #356]	; (8000958 <Tx_setup+0x1b0>)
 80007f4:	f000 fb98 	bl	8000f28 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 80007f8:	4b59      	ldr	r3, [pc, #356]	; (8000960 <Tx_setup+0x1b8>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	4856      	ldr	r0, [pc, #344]	; (8000958 <Tx_setup+0x1b0>)
 8000800:	f000 fbcc 	bl	8000f9c <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 8000804:	4b57      	ldr	r3, [pc, #348]	; (8000964 <Tx_setup+0x1bc>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	4853      	ldr	r0, [pc, #332]	; (8000958 <Tx_setup+0x1b0>)
 800080c:	f000 fa21 	bl	8000c52 <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 8000810:	2101      	movs	r1, #1
 8000812:	4851      	ldr	r0, [pc, #324]	; (8000958 <Tx_setup+0x1b0>)
 8000814:	f000 fb46 	bl	8000ea4 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 8000818:	4b53      	ldr	r3, [pc, #332]	; (8000968 <Tx_setup+0x1c0>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2264      	movs	r2, #100	; 0x64
 800081e:	4619      	mov	r1, r3
 8000820:	484d      	ldr	r0, [pc, #308]	; (8000958 <Tx_setup+0x1b0>)
 8000822:	f000 fb59 	bl	8000ed8 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 8000826:	4b51      	ldr	r3, [pc, #324]	; (800096c <Tx_setup+0x1c4>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	4619      	mov	r1, r3
 800082c:	484a      	ldr	r0, [pc, #296]	; (8000958 <Tx_setup+0x1b0>)
 800082e:	f000 f9ad 	bl	8000b8c <sx126x_cal>
    HAL_Delay(50);
 8000832:	2032      	movs	r0, #50	; 0x32
 8000834:	f001 f940 	bl	8001ab8 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 8000838:	4b4d      	ldr	r3, [pc, #308]	; (8000970 <Tx_setup+0x1c8>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	4846      	ldr	r0, [pc, #280]	; (8000958 <Tx_setup+0x1b0>)
 8000840:	f000 f98a 	bl	8000b58 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 8000844:	4b4b      	ldr	r3, [pc, #300]	; (8000974 <Tx_setup+0x1cc>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4a4b      	ldr	r2, [pc, #300]	; (8000978 <Tx_setup+0x1d0>)
 800084a:	7812      	ldrb	r2, [r2, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	4842      	ldr	r0, [pc, #264]	; (8000958 <Tx_setup+0x1b0>)
 8000850:	f000 f9b6 	bl	8000bc0 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 8000854:	2004      	movs	r0, #4
 8000856:	f003 ff27 	bl	80046a8 <malloc>
 800085a:	4603      	mov	r3, r0
 800085c:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 800085e:	4b47      	ldr	r3, [pc, #284]	; (800097c <Tx_setup+0x1d4>)
 8000860:	781a      	ldrb	r2, [r3, #0]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 8000866:	4b46      	ldr	r3, [pc, #280]	; (8000980 <Tx_setup+0x1d8>)
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 800086e:	4b45      	ldr	r3, [pc, #276]	; (8000984 <Tx_setup+0x1dc>)
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 8000876:	4b44      	ldr	r3, [pc, #272]	; (8000988 <Tx_setup+0x1e0>)
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 800087e:	68f9      	ldr	r1, [r7, #12]
 8000880:	4835      	ldr	r0, [pc, #212]	; (8000958 <Tx_setup+0x1b0>)
 8000882:	f000 f9c1 	bl	8000c08 <sx126x_set_pa_cfg>
    free(params);
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f003 ff16 	bl	80046b8 <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 800088c:	4b3f      	ldr	r3, [pc, #252]	; (800098c <Tx_setup+0x1e4>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b25b      	sxtb	r3, r3
 8000892:	4a3f      	ldr	r2, [pc, #252]	; (8000990 <Tx_setup+0x1e8>)
 8000894:	7812      	ldrb	r2, [r2, #0]
 8000896:	4619      	mov	r1, r3
 8000898:	482f      	ldr	r0, [pc, #188]	; (8000958 <Tx_setup+0x1b0>)
 800089a:	f000 fb99 	bl	8000fd0 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 800089e:	4b3d      	ldr	r3, [pc, #244]	; (8000994 <Tx_setup+0x1ec>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	4a3d      	ldr	r2, [pc, #244]	; (8000998 <Tx_setup+0x1f0>)
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	4619      	mov	r1, r3
 80008a8:	482b      	ldr	r0, [pc, #172]	; (8000958 <Tx_setup+0x1b0>)
 80008aa:	f000 fc4f 	bl	800114c <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 80008ae:	2004      	movs	r0, #4
 80008b0:	f003 fefa 	bl	80046a8 <malloc>
 80008b4:	4603      	mov	r3, r0
 80008b6:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 80008b8:	4b38      	ldr	r3, [pc, #224]	; (800099c <Tx_setup+0x1f4>)
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 80008c0:	4b37      	ldr	r3, [pc, #220]	; (80009a0 <Tx_setup+0x1f8>)
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 80008c8:	4b36      	ldr	r3, [pc, #216]	; (80009a4 <Tx_setup+0x1fc>)
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 80008d0:	4b35      	ldr	r3, [pc, #212]	; (80009a8 <Tx_setup+0x200>)
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	481f      	ldr	r0, [pc, #124]	; (8000958 <Tx_setup+0x1b0>)
 80008dc:	f000 fb9c 	bl	8001018 <sx126x_set_lora_mod_params>
    free(mod_params);
 80008e0:	68b8      	ldr	r0, [r7, #8]
 80008e2:	f003 fee9 	bl	80046b8 <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 80008e6:	2006      	movs	r0, #6
 80008e8:	f003 fede 	bl	80046a8 <malloc>
 80008ec:	4603      	mov	r3, r0
 80008ee:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 80008f0:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <Tx_setup+0x204>)
 80008f2:	881a      	ldrh	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 80008f8:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <Tx_setup+0x208>)
 80008fa:	781a      	ldrb	r2, [r3, #0]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 8000900:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <Tx_setup+0x20c>)
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 8000908:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <Tx_setup+0x210>)
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 8000910:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <Tx_setup+0x214>)
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	480f      	ldr	r0, [pc, #60]	; (8000958 <Tx_setup+0x1b0>)
 800091c:	f000 fba8 	bl	8001070 <sx126x_set_lora_pkt_params>
    free(lora_params);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f003 fec9 	bl	80046b8 <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <Tx_setup+0x218>)
 8000928:	8819      	ldrh	r1, [r3, #0]
 800092a:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <Tx_setup+0x21c>)
 800092c:	881a      	ldrh	r2, [r3, #0]
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <Tx_setup+0x220>)
 8000930:	8818      	ldrh	r0, [r3, #0]
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <Tx_setup+0x224>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	4603      	mov	r3, r0
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <Tx_setup+0x1b0>)
 800093c:	f000 fa15 	bl	8000d6a <sx126x_set_dio_irq_params>

}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000b4 	.word	0x200000b4
 800094c:	200000b0 	.word	0x200000b0
 8000950:	200000ac 	.word	0x200000ac
 8000954:	200000a8 	.word	0x200000a8
 8000958:	200000c8 	.word	0x200000c8
 800095c:	20000000 	.word	0x20000000
 8000960:	20000004 	.word	0x20000004
 8000964:	20000005 	.word	0x20000005
 8000968:	20000006 	.word	0x20000006
 800096c:	20000008 	.word	0x20000008
 8000970:	20000007 	.word	0x20000007
 8000974:	20000009 	.word	0x20000009
 8000978:	2000000a 	.word	0x2000000a
 800097c:	2000000b 	.word	0x2000000b
 8000980:	2000000c 	.word	0x2000000c
 8000984:	20000120 	.word	0x20000120
 8000988:	2000000d 	.word	0x2000000d
 800098c:	2000000e 	.word	0x2000000e
 8000990:	2000000f 	.word	0x2000000f
 8000994:	20000121 	.word	0x20000121
 8000998:	20000122 	.word	0x20000122
 800099c:	20000010 	.word	0x20000010
 80009a0:	20000011 	.word	0x20000011
 80009a4:	20000012 	.word	0x20000012
 80009a8:	20000123 	.word	0x20000123
 80009ac:	20000014 	.word	0x20000014
 80009b0:	20000124 	.word	0x20000124
 80009b4:	20000016 	.word	0x20000016
 80009b8:	20000017 	.word	0x20000017
 80009bc:	20000125 	.word	0x20000125
 80009c0:	20000018 	.word	0x20000018
 80009c4:	2000001a 	.word	0x2000001a
 80009c8:	20000126 	.word	0x20000126
 80009cc:	20000128 	.word	0x20000128

080009d0 <TxProtocol>:

void TxProtocol(uint8_t data[], uint8_t data_length){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <TxProtocol+0x74>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	4819      	ldr	r0, [pc, #100]	; (8000a48 <TxProtocol+0x78>)
 80009e4:	f000 fa38 	bl	8000e58 <sx126x_clear_irq_status>
 80009e8:	4603      	mov	r3, r0
 80009ea:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_write_buffer(&hspi, 0, data, data_length); // 0 is the offset
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	2100      	movs	r1, #0
 80009f2:	4815      	ldr	r0, [pc, #84]	; (8000a48 <TxProtocol+0x78>)
 80009f4:	f000 f99a 	bl	8000d2c <sx126x_write_buffer>
 80009f8:	4603      	mov	r3, r0
 80009fa:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_tx(&hspi, 6000, data_length);
 80009fc:	78fb      	ldrb	r3, [r7, #3]
 80009fe:	461a      	mov	r2, r3
 8000a00:	f241 7170 	movw	r1, #6000	; 0x1770
 8000a04:	4810      	ldr	r0, [pc, #64]	; (8000a48 <TxProtocol+0x78>)
 8000a06:	f000 f83b 	bl	8000a80 <sx126x_set_tx>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1400);
 8000a0e:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8000a12:	f001 f851 	bl	8001ab8 <HAL_Delay>

    sx126x_irq_mask_t irq;
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <TxProtocol+0x78>)
 8000a1e:	f000 f9e9 	bl	8000df4 <sx126x_get_irq_status>
 8000a22:	4603      	mov	r3, r0
 8000a24:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_TX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 8000a26:	89bb      	ldrh	r3, [r7, #12]
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d104      	bne.n	8000a3a <TxProtocol+0x6a>
 8000a30:	89bb      	ldrh	r3, [r7, #12]
 8000a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d0ed      	beq.n	8000a16 <TxProtocol+0x46>
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000001a 	.word	0x2000001a
 8000a48:	200000c8 	.word	0x200000c8

08000a4c <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 8000a58:	2300      	movs	r3, #0
 8000a5a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 8000a60:	78fb      	ldrb	r3, [r7, #3]
 8000a62:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 8000a64:	f107 010c 	add.w	r1, r7, #12
 8000a68:	2300      	movs	r3, #0
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	2202      	movs	r2, #2
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff fd99 	bl	80005a8 <sx126x_hal_write>
 8000a76:	4603      	mov	r3, r0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms , uint8_t lora_data_length)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	71fb      	strb	r3, [r7, #7]
    if (packet_type == SX126X_PKT_TYPE_LORA) {
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <sx126x_set_tx+0x7c>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d11e      	bne.n	8000ad4 <sx126x_set_tx+0x54>
        struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8000a96:	2006      	movs	r0, #6
 8000a98:	f003 fe06 	bl	80046a8 <malloc>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	617b      	str	r3, [r7, #20]
        lora_params->preamble_len_in_symb=pkt_preamble_len;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <sx126x_set_tx+0x80>)
 8000aa2:	881a      	ldrh	r2, [r3, #0]
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	801a      	strh	r2, [r3, #0]
        lora_params->header_type=header_type;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <sx126x_set_tx+0x84>)
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	709a      	strb	r2, [r3, #2]
        lora_params->pld_len_in_bytes=lora_data_length;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	79fa      	ldrb	r2, [r7, #7]
 8000ab4:	70da      	strb	r2, [r3, #3]
        lora_params->crc_is_on=crc_is_on;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <sx126x_set_tx+0x88>)
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	711a      	strb	r2, [r3, #4]
        lora_params->invert_iq_is_on=invert_iq_is_on;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <sx126x_set_tx+0x8c>)
 8000ac0:	781a      	ldrb	r2, [r3, #0]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	715a      	strb	r2, [r3, #5]
        sx126x_set_lora_pkt_params(&hspi, lora_params);
 8000ac6:	6979      	ldr	r1, [r7, #20]
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <sx126x_set_tx+0x90>)
 8000aca:	f000 fad1 	bl	8001070 <sx126x_set_lora_pkt_params>
        free(lora_params);
 8000ace:	6978      	ldr	r0, [r7, #20]
 8000ad0:	f003 fdf2 	bl	80046b8 <free>
    }

    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000ada:	d301      	bcc.n	8000ae0 <sx126x_set_tx+0x60>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 8000adc:	2302      	movs	r3, #2
 8000ade:	e008      	b.n	8000af2 <sx126x_set_tx+0x72>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 8000ae0:	68b8      	ldr	r0, [r7, #8]
 8000ae2:	f000 fb7d 	bl	80011e0 <sx126x_convert_timeout_in_ms_to_rtc_step>
 8000ae6:	6138      	str	r0, [r7, #16]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 8000ae8:	6939      	ldr	r1, [r7, #16]
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f000 f812 	bl	8000b14 <sx126x_set_tx_with_timeout_in_rtc_step>
 8000af0:	4603      	mov	r3, r0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000004 	.word	0x20000004
 8000b00:	20000014 	.word	0x20000014
 8000b04:	20000124 	.word	0x20000124
 8000b08:	20000017 	.word	0x20000017
 8000b0c:	20000125 	.word	0x20000125
 8000b10:	200000c8 	.word	0x200000c8

08000b14 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_TX] = { 0 };
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_TX;
 8000b22:	2383      	movs	r3, #131	; 0x83
 8000b24:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	0c1b      	lsrs	r3, r3, #16
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 8000b3c:	f107 010c 	add.w	r1, r7, #12
 8000b40:	2300      	movs	r3, #0
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2300      	movs	r3, #0
 8000b46:	2204      	movs	r2, #4
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff fd2d 	bl	80005a8 <sx126x_hal_write>
 8000b4e:	4603      	mov	r3, r0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 8000b64:	2300      	movs	r3, #0
 8000b66:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 8000b68:	2396      	movs	r3, #150	; 0x96
 8000b6a:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 8000b70:	f107 010c 	add.w	r1, r7, #12
 8000b74:	2300      	movs	r3, #0
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fd13 	bl	80005a8 <sx126x_hal_write>
 8000b82:	4603      	mov	r3, r0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 8000b98:	2300      	movs	r3, #0
 8000b9a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 8000b9c:	2389      	movs	r3, #137	; 0x89
 8000b9e:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 8000ba4:	f107 010c 	add.w	r1, r7, #12
 8000ba8:	2300      	movs	r3, #0
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	2300      	movs	r3, #0
 8000bae:	2202      	movs	r2, #2
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff fcf9 	bl	80005a8 <sx126x_hal_write>
 8000bb6:	4603      	mov	r3, r0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <sx126x_cal_img_hex+0x44>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	81bb      	strh	r3, [r7, #12]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 8000bda:	2398      	movs	r3, #152	; 0x98
 8000bdc:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 8000bde:	78fb      	ldrb	r3, [r7, #3]
 8000be0:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 8000be2:	78bb      	ldrb	r3, [r7, #2]
 8000be4:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 8000be6:	f107 010c 	add.w	r1, r7, #12
 8000bea:	2300      	movs	r3, #0
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff fcd8 	bl	80005a8 <sx126x_hal_write>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	08004f4c 	.word	0x08004f4c

08000c08 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	2300      	movs	r3, #0
 8000c18:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 8000c1a:	2395      	movs	r3, #149	; 0x95
 8000c1c:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	785b      	ldrb	r3, [r3, #1]
 8000c28:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	789b      	ldrb	r3, [r3, #2]
 8000c2e:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	78db      	ldrb	r3, [r3, #3]
 8000c34:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 8000c36:	f107 0108 	add.w	r1, r7, #8
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	2205      	movs	r2, #5
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff fcb0 	bl	80005a8 <sx126x_hal_write>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af02      	add	r7, sp, #8
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 8000c5e:	2300      	movs	r3, #0
 8000c60:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 8000c62:	2393      	movs	r3, #147	; 0x93
 8000c64:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 8000c6a:	f107 010c 	add.w	r1, r7, #12
 8000c6e:	2300      	movs	r3, #0
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2300      	movs	r3, #0
 8000c74:	2202      	movs	r2, #2
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff fc96 	bl	80005a8 <sx126x_hal_write>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	461a      	mov	r2, r3
 8000c94:	460b      	mov	r3, r1
 8000c96:	817b      	strh	r3, [r7, #10]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <sx126x_write_register+0x50>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	82bb      	strh	r3, [r7, #20]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 8000ca6:	230d      	movs	r3, #13
 8000ca8:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 8000caa:	897b      	ldrh	r3, [r7, #10]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 8000cb4:	897b      	ldrh	r3, [r7, #10]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 8000cba:	7a7b      	ldrb	r3, [r7, #9]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	f107 0114 	add.w	r1, r7, #20
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f7ff fc6d 	bl	80005a8 <sx126x_hal_write>
 8000cce:	4603      	mov	r3, r0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	08004f4c 	.word	0x08004f4c

08000cdc <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af02      	add	r7, sp, #8
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	460b      	mov	r3, r1
 8000cea:	817b      	strh	r3, [r7, #10]
 8000cec:	4613      	mov	r3, r2
 8000cee:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 8000cf8:	231d      	movs	r3, #29
 8000cfa:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 8000cfc:	897b      	ldrh	r3, [r7, #10]
 8000cfe:	0a1b      	lsrs	r3, r3, #8
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 8000d06:	897b      	ldrh	r3, [r7, #10]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 8000d0c:	f107 0110 	add.w	r1, r7, #16
 8000d10:	7a7b      	ldrb	r3, [r7, #9]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2204      	movs	r2, #4
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f7ff fc87 	bl	800062c <sx126x_hal_read>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	75fb      	strb	r3, [r7, #23]

    return status;
 8000d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t buffer_offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	461a      	mov	r2, r3
 8000d38:	460b      	mov	r3, r1
 8000d3a:	72fb      	strb	r3, [r7, #11]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	72bb      	strb	r3, [r7, #10]
    uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = { 0 };
 8000d40:	2300      	movs	r3, #0
 8000d42:	82bb      	strh	r3, [r7, #20]

    buf[0] = SX126X_WRITE_BUFFER;
 8000d44:	230e      	movs	r3, #14
 8000d46:	753b      	strb	r3, [r7, #20]

    buf[1] = buffer_offset;
 8000d48:	7afb      	ldrb	r3, [r7, #11]
 8000d4a:	757b      	strb	r3, [r7, #21]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 8000d4c:	7abb      	ldrb	r3, [r7, #10]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	f107 0114 	add.w	r1, r7, #20
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2202      	movs	r2, #2
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f7ff fc24 	bl	80005a8 <sx126x_hal_write>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b08a      	sub	sp, #40	; 0x28
 8000d6e:	af02      	add	r7, sp, #8
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	4608      	mov	r0, r1
 8000d74:	4611      	mov	r1, r2
 8000d76:	461a      	mov	r2, r3
 8000d78:	4603      	mov	r3, r0
 8000d7a:	817b      	strh	r3, [r7, #10]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	813b      	strh	r3, [r7, #8]
 8000d80:	4613      	mov	r3, r2
 8000d82:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	f107 0318 	add.w	r3, r7, #24
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 8000d92:	2308      	movs	r3, #8
 8000d94:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 8000d96:	897b      	ldrh	r3, [r7, #10]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 8000da0:	897b      	ldrh	r3, [r7, #10]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 8000da6:	893b      	ldrh	r3, [r7, #8]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 8000db0:	893b      	ldrh	r3, [r7, #8]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 8000dc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 8000dd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 8000dd6:	f107 0114 	add.w	r1, r7, #20
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2300      	movs	r3, #0
 8000de0:	2209      	movs	r2, #9
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f7ff fbe0 	bl	80005a8 <sx126x_hal_write>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3720      	adds	r7, #32
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <sx126x_get_irq_status>:

sx126x_status_t sx126x_get_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_IRQ_STATUS]             = { 0x00 }; //0x00 is no operational, its just so that theyre equal
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
    uint8_t         received_buf[sizeof( sx126x_irq_mask_t )+1] = { 0x00 };
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <sx126x_get_irq_status+0x60>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	81bb      	strh	r3, [r7, #12]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                      = SX126X_STATUS_ERROR;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_IRQ_STATUS;
 8000e10:	2312      	movs	r3, #18
 8000e12:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_IRQ_STATUS, received_buf,
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	f107 0110 	add.w	r1, r7, #16
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	9200      	str	r2, [sp, #0]
 8000e20:	2204      	movs	r2, #4
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff fc02 	bl	800062c <sx126x_hal_read>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_IRQ_STATUS );

    if( status == SX126X_STATUS_OK )
 8000e2c:	7dfb      	ldrb	r3, [r7, #23]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10b      	bne.n	8000e4a <sx126x_get_irq_status+0x56>
    {
        *irq = ( ( sx126x_irq_mask_t ) received_buf[1] << 8 ) | ( ( sx126x_irq_mask_t ) received_buf[2] << 0 );
 8000e32:	7b7b      	ldrb	r3, [r7, #13]
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	b21a      	sxth	r2, r3
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	801a      	strh	r2, [r3, #0]
        status = received_buf[0]; //its the status
 8000e46:	7b3b      	ldrb	r3, [r7, #12]
 8000e48:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	08004f4c 	.word	0x08004f4c

08000e58 <sx126x_clear_irq_status>:

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = { 0 };
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <sx126x_clear_irq_status+0x48>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	81bb      	strh	r3, [r7, #12]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CLR_IRQ_STATUS;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 8000e82:	f107 010c 	add.w	r1, r7, #12
 8000e86:	2300      	movs	r3, #0
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff fb8a 	bl	80005a8 <sx126x_hal_write>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08004f4c 	.word	0x08004f4c

08000ea4 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 8000eb4:	239d      	movs	r3, #157	; 0x9d
 8000eb6:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 8000ebc:	f107 010c 	add.w	r1, r7, #12
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff fb6d 	bl	80005a8 <sx126x_hal_write>
 8000ece:	4603      	mov	r3, r0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	2300      	movs	r3, #0
 8000eec:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 8000eee:	2397      	movs	r3, #151	; 0x97
 8000ef0:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 8000ef2:	7afb      	ldrb	r3, [r7, #11]
 8000ef4:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	0c1b      	lsrs	r3, r3, #16
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 8000f0c:	f107 0110 	add.w	r1, r7, #16
 8000f10:	2300      	movs	r3, #0
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2300      	movs	r3, #0
 8000f16:	2205      	movs	r2, #5
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f7ff fb45 	bl	80005a8 <sx126x_hal_write>
 8000f1e:	4603      	mov	r3, r0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 8000f32:	6838      	ldr	r0, [r7, #0]
 8000f34:	f000 f92e 	bl	8001194 <sx126x_convert_freq_in_hz_to_pll_step>
 8000f38:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 8000f3a:	68f9      	ldr	r1, [r7, #12]
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f805 	bl	8000f4c <sx126x_set_rf_freq_in_pll_steps>
 8000f42:	4603      	mov	r3, r0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 8000f5e:	2386      	movs	r3, #134	; 0x86
 8000f60:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	0e1b      	lsrs	r3, r3, #24
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	0c1b      	lsrs	r3, r3, #16
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 8000f80:	f107 0108 	add.w	r1, r7, #8
 8000f84:	2300      	movs	r3, #0
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	2205      	movs	r2, #5
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff fb0b 	bl	80005a8 <sx126x_hal_write>
 8000f92:	4603      	mov	r3, r0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 8000fa8:	2300      	movs	r3, #0
 8000faa:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 8000fac:	238a      	movs	r3, #138	; 0x8a
 8000fae:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 8000fb4:	f107 010c 	add.w	r1, r7, #12
 8000fb8:	2300      	movs	r3, #0
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff faf1 	bl	80005a8 <sx126x_hal_write>
 8000fc6:	4603      	mov	r3, r0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <sx126x_set_tx_params+0x44>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	81bb      	strh	r3, [r7, #12]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 8000fea:	238e      	movs	r3, #142	; 0x8e
 8000fec:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 8000ff2:	78bb      	ldrb	r3, [r7, #2]
 8000ff4:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 8000ff6:	f107 010c 	add.w	r1, r7, #12
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2300      	movs	r3, #0
 8001000:	2203      	movs	r2, #3
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fad0 	bl	80005a8 <sx126x_hal_write>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	08004f4c 	.word	0x08004f4c

08001018 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af02      	add	r7, sp, #8
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 8001022:	2303      	movs	r3, #3
 8001024:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	2300      	movs	r3, #0
 800102c:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 800102e:	238b      	movs	r3, #139	; 0x8b
 8001030:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	785b      	ldrb	r3, [r3, #1]
 800103c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	789b      	ldrb	r3, [r3, #2]
 8001042:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	78db      	ldrb	r3, [r3, #3]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 8001050:	f107 0108 	add.w	r1, r7, #8
 8001054:	2300      	movs	r3, #0
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2300      	movs	r3, #0
 800105a:	2205      	movs	r2, #5
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff faa3 	bl	80005a8 <sx126x_hal_write>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af02      	add	r7, sp, #8
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800107a:	2303      	movs	r3, #3
 800107c:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	2100      	movs	r1, #0
 8001088:	460a      	mov	r2, r1
 800108a:	801a      	strh	r2, [r3, #0]
 800108c:	460a      	mov	r2, r1
 800108e:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 8001090:	238c      	movs	r3, #140	; 0x8c
 8001092:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	b29b      	uxth	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	789b      	ldrb	r3, [r3, #2]
 80010ac:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	78db      	ldrb	r3, [r3, #3]
 80010b2:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	791b      	ldrb	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <sx126x_set_lora_pkt_params+0x50>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <sx126x_set_lora_pkt_params+0x52>
 80010c0:	2300      	movs	r3, #0
 80010c2:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	795b      	ldrb	r3, [r3, #5]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <sx126x_set_lora_pkt_params+0x60>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <sx126x_set_lora_pkt_params+0x62>
 80010d0:	2300      	movs	r3, #0
 80010d2:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 80010d4:	f107 0110 	add.w	r1, r7, #16
 80010d8:	2300      	movs	r3, #0
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2300      	movs	r3, #0
 80010de:	2207      	movs	r2, #7
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff fa61 	bl	80005a8 <sx126x_hal_write>
 80010e6:	4603      	mov	r3, r0
 80010e8:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d127      	bne.n	8001140 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 80010f4:	f107 020f 	add.w	r2, r7, #15
 80010f8:	2301      	movs	r3, #1
 80010fa:	f240 7136 	movw	r1, #1846	; 0x736
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff fdec 	bl	8000cdc <sx126x_read_register>
 8001104:	4603      	mov	r3, r0
 8001106:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d118      	bne.n	8001140 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	795b      	ldrb	r3, [r3, #5]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	f023 0304 	bic.w	r3, r3, #4
 800111c:	b2db      	uxtb	r3, r3
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e004      	b.n	800112c <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	b2db      	uxtb	r3, r3
 800112a:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800112c:	f107 020f 	add.w	r2, r7, #15
 8001130:	2301      	movs	r3, #1
 8001132:	f240 7136 	movw	r1, #1846	; 0x736
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fda6 	bl	8000c88 <sx126x_write_register>
 800113c:	4603      	mov	r3, r0
 800113e:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 8001140:	7dfb      	ldrb	r3, [r7, #23]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
 8001158:	4613      	mov	r3, r2
 800115a:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <sx126x_set_buffer_base_address+0x44>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	81bb      	strh	r3, [r7, #12]
 8001162:	2300      	movs	r3, #0
 8001164:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 8001166:	238f      	movs	r3, #143	; 0x8f
 8001168:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 800116e:	78bb      	ldrb	r3, [r7, #2]
 8001170:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 8001172:	f107 010c 	add.w	r1, r7, #12
 8001176:	2300      	movs	r3, #0
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2300      	movs	r3, #0
 800117c:	2203      	movs	r2, #3
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff fa12 	bl	80005a8 <sx126x_hal_write>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	08004f4c 	.word	0x08004f4c

08001194 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 80011a0:	fba2 2303 	umull	r2, r3, r2, r3
 80011a4:	0b1b      	lsrs	r3, r3, #12
 80011a6:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f643 5209 	movw	r2, #15625	; 0x3d09
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	039b      	lsls	r3, r3, #14
 80011c0:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 80011c4:	3304      	adds	r3, #4
 80011c6:	4905      	ldr	r1, [pc, #20]	; (80011dc <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 80011c8:	fba1 1303 	umull	r1, r3, r1, r3
 80011cc:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 80011ce:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	431bde83 	.word	0x431bde83

080011e0 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	019b      	lsls	r3, r3, #6
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b093      	sub	sp, #76	; 0x4c
 80011fc:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fe:	f000 fbe9 	bl	80019d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001202:	f000 f841 	bl	8001288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001206:	f000 f939 	bl	800147c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800120a:	f000 f8df 	bl	80013cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800120e:	f000 f907 	bl	8001420 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8001212:	f000 f8a5 	bl	8001360 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  set_hspi(hspi1);
 8001216:	4c17      	ldr	r4, [pc, #92]	; (8001274 <main+0x7c>)
 8001218:	4668      	mov	r0, sp
 800121a:	f104 0310 	add.w	r3, r4, #16
 800121e:	2248      	movs	r2, #72	; 0x48
 8001220:	4619      	mov	r1, r3
 8001222:	f003 fa51 	bl	80046c8 <memcpy>
 8001226:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800122a:	f7ff faa5 	bl	8000778 <set_hspi>
  set_NSS_pin(NSS_1_GPIO_Port, NSS_1_Pin);
 800122e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001232:	4811      	ldr	r0, [pc, #68]	; (8001278 <main+0x80>)
 8001234:	f7ff fa48 	bl	80006c8 <set_NSS_pin>
  set_BUSY_pin(BUSY_1_GPIO_Port, BUSY_1_Pin);
 8001238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123c:	480f      	ldr	r0, [pc, #60]	; (800127c <main+0x84>)
 800123e:	f7ff fa59 	bl	80006f4 <set_BUSY_pin>
  set_NRESET_pin(NRESET_1_GPIO_Port, NRESET_1_Pin);
 8001242:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001246:	480c      	ldr	r0, [pc, #48]	; (8001278 <main+0x80>)
 8001248:	f7ff fa6a 	bl	8000720 <set_NRESET_pin>
  set_DIO1_pin(DIO1_1_GPIO_Port, DIO1_1_Pin);
 800124c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001250:	480a      	ldr	r0, [pc, #40]	; (800127c <main+0x84>)
 8001252:	f7ff fa7b 	bl	800074c <set_DIO1_pin>
  Tx_setup();
 8001256:	f7ff faa7 	bl	80007a8 <Tx_setup>
  sprintf((char *)tx_buffer, "0123456789");
 800125a:	4909      	ldr	r1, [pc, #36]	; (8001280 <main+0x88>)
 800125c:	4809      	ldr	r0, [pc, #36]	; (8001284 <main+0x8c>)
 800125e:	f003 fb03 	bl	8004868 <siprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	TxProtocol(tx_buffer, 10);
 8001262:	210a      	movs	r1, #10
 8001264:	4807      	ldr	r0, [pc, #28]	; (8001284 <main+0x8c>)
 8001266:	f7ff fbb3 	bl	80009d0 <TxProtocol>
	HAL_Delay(1000);
 800126a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126e:	f000 fc23 	bl	8001ab8 <HAL_Delay>
	TxProtocol(tx_buffer, 10);
 8001272:	e7f6      	b.n	8001262 <main+0x6a>
 8001274:	20000600 	.word	0x20000600
 8001278:	40020c00 	.word	0x40020c00
 800127c:	40021400 	.word	0x40021400
 8001280:	08004f50 	.word	0x08004f50
 8001284:	200005f4 	.word	0x200005f4

08001288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b094      	sub	sp, #80	; 0x50
 800128c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	2234      	movs	r2, #52	; 0x34
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f003 fa24 	bl	80046e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	4b29      	ldr	r3, [pc, #164]	; (8001358 <SystemClock_Config+0xd0>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	4a28      	ldr	r2, [pc, #160]	; (8001358 <SystemClock_Config+0xd0>)
 80012b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ba:	6413      	str	r3, [r2, #64]	; 0x40
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <SystemClock_Config+0xd0>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c8:	2300      	movs	r3, #0
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <SystemClock_Config+0xd4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a22      	ldr	r2, [pc, #136]	; (800135c <SystemClock_Config+0xd4>)
 80012d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b20      	ldr	r3, [pc, #128]	; (800135c <SystemClock_Config+0xd4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ee:	2302      	movs	r3, #2
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012f8:	2304      	movs	r3, #4
 80012fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012fc:	23a8      	movs	r3, #168	; 0xa8
 80012fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001300:	2302      	movs	r3, #2
 8001302:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001304:	2307      	movs	r3, #7
 8001306:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001308:	2302      	movs	r3, #2
 800130a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4618      	mov	r0, r3
 8001312:	f001 fddf 	bl	8002ed4 <HAL_RCC_OscConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800131c:	f000 f990 	bl	8001640 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001320:	230f      	movs	r3, #15
 8001322:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001324:	2302      	movs	r3, #2
 8001326:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800132c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001330:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001336:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	2105      	movs	r1, #5
 800133e:	4618      	mov	r0, r3
 8001340:	f000 ffd2 	bl	80022e8 <HAL_RCC_ClockConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800134a:	f000 f979 	bl	8001640 <Error_Handler>
  }
}
 800134e:	bf00      	nop
 8001350:	3750      	adds	r7, #80	; 0x50
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40007000 	.word	0x40007000

08001360 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_SPI1_Init+0x64>)
 8001366:	4a18      	ldr	r2, [pc, #96]	; (80013c8 <MX_SPI1_Init+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <MX_SPI1_Init+0x64>)
 800136c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001370:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_SPI1_Init+0x64>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_SPI1_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_SPI1_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_SPI1_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_SPI1_Init+0x64>)
 800138c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001390:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_SPI1_Init+0x64>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <MX_SPI1_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_SPI1_Init+0x64>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <MX_SPI1_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_SPI1_Init+0x64>)
 80013ac:	220a      	movs	r2, #10
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <MX_SPI1_Init+0x64>)
 80013b2:	f002 f82d 	bl	8003410 <HAL_SPI_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013bc:	f000 f940 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000600 	.word	0x20000600
 80013c8:	40013000 	.word	0x40013000

080013cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_USART3_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 8001404:	f002 fc36 	bl	8003c74 <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f000 f917 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000138 	.word	0x20000138
 800141c:	40004800 	.word	0x40004800

08001420 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001426:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800142a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142e:	2206      	movs	r2, #6
 8001430:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001434:	2202      	movs	r2, #2
 8001436:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001440:	2202      	movs	r2, #2
 8001442:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001446:	2201      	movs	r2, #1
 8001448:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001458:	2201      	movs	r2, #1
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001464:	f000 fdf7 	bl	8002056 <HAL_PCD_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800146e:	f000 f8e7 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000017c 	.word	0x2000017c

0800147c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	; 0x30
 8001480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	4b64      	ldr	r3, [pc, #400]	; (8001628 <MX_GPIO_Init+0x1ac>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a63      	ldr	r2, [pc, #396]	; (8001628 <MX_GPIO_Init+0x1ac>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b61      	ldr	r3, [pc, #388]	; (8001628 <MX_GPIO_Init+0x1ac>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	4b5d      	ldr	r3, [pc, #372]	; (8001628 <MX_GPIO_Init+0x1ac>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a5c      	ldr	r2, [pc, #368]	; (8001628 <MX_GPIO_Init+0x1ac>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b5a      	ldr	r3, [pc, #360]	; (8001628 <MX_GPIO_Init+0x1ac>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b56      	ldr	r3, [pc, #344]	; (8001628 <MX_GPIO_Init+0x1ac>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a55      	ldr	r2, [pc, #340]	; (8001628 <MX_GPIO_Init+0x1ac>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b53      	ldr	r3, [pc, #332]	; (8001628 <MX_GPIO_Init+0x1ac>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b4f      	ldr	r3, [pc, #316]	; (8001628 <MX_GPIO_Init+0x1ac>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a4e      	ldr	r2, [pc, #312]	; (8001628 <MX_GPIO_Init+0x1ac>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b4c      	ldr	r3, [pc, #304]	; (8001628 <MX_GPIO_Init+0x1ac>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b48      	ldr	r3, [pc, #288]	; (8001628 <MX_GPIO_Init+0x1ac>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a47      	ldr	r2, [pc, #284]	; (8001628 <MX_GPIO_Init+0x1ac>)
 800150c:	f043 0320 	orr.w	r3, r3, #32
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b45      	ldr	r3, [pc, #276]	; (8001628 <MX_GPIO_Init+0x1ac>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0320 	and.w	r3, r3, #32
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <MX_GPIO_Init+0x1ac>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a40      	ldr	r2, [pc, #256]	; (8001628 <MX_GPIO_Init+0x1ac>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <MX_GPIO_Init+0x1ac>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <MX_GPIO_Init+0x1ac>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a39      	ldr	r2, [pc, #228]	; (8001628 <MX_GPIO_Init+0x1ac>)
 8001544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <MX_GPIO_Init+0x1ac>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	f244 0181 	movw	r1, #16513	; 0x4081
 800155c:	4833      	ldr	r0, [pc, #204]	; (800162c <MX_GPIO_Init+0x1b0>)
 800155e:	f000 fd61 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, NSS_1_Pin|NRESET_1_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001568:	4831      	ldr	r0, [pc, #196]	; (8001630 <MX_GPIO_Init+0x1b4>)
 800156a:	f000 fd5b 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2140      	movs	r1, #64	; 0x40
 8001572:	4830      	ldr	r0, [pc, #192]	; (8001634 <MX_GPIO_Init+0x1b8>)
 8001574:	f000 fd56 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800157e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	482a      	ldr	r0, [pc, #168]	; (8001638 <MX_GPIO_Init+0x1bc>)
 8001590:	f000 fb9c 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001594:	f244 0381 	movw	r3, #16513	; 0x4081
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	481f      	ldr	r0, [pc, #124]	; (800162c <MX_GPIO_Init+0x1b0>)
 80015ae:	f000 fb8d 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO1_1_Pin BUSY_1_Pin */
  GPIO_InitStruct.Pin = DIO1_1_Pin|BUSY_1_Pin;
 80015b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	481d      	ldr	r0, [pc, #116]	; (800163c <MX_GPIO_Init+0x1c0>)
 80015c8:	f000 fb80 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_1_Pin NRESET_1_Pin */
  GPIO_InitStruct.Pin = NSS_1_Pin|NRESET_1_Pin;
 80015cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	4812      	ldr	r0, [pc, #72]	; (8001630 <MX_GPIO_Init+0x1b4>)
 80015e6:	f000 fb71 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015ea:	2340      	movs	r3, #64	; 0x40
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <MX_GPIO_Init+0x1b8>)
 8001602:	f000 fb63 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	4806      	ldr	r0, [pc, #24]	; (8001634 <MX_GPIO_Init+0x1b8>)
 800161a:	f000 fb57 	bl	8001ccc <HAL_GPIO_Init>

}
 800161e:	bf00      	nop
 8001620:	3730      	adds	r7, #48	; 0x30
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40020400 	.word	0x40020400
 8001630:	40020c00 	.word	0x40020c00
 8001634:	40021800 	.word	0x40021800
 8001638:	40020800 	.word	0x40020800
 800163c:	40021400 	.word	0x40021400

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001648:	e7fe      	b.n	8001648 <Error_Handler+0x8>
	...

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_MspInit+0x4c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_MspInit+0x4c>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_MspInit+0x4c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_MspInit+0x4c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_MspInit+0x4c>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_MspInit+0x4c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800

0800169c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a19      	ldr	r2, [pc, #100]	; (8001720 <HAL_SPI_MspInit+0x84>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d12b      	bne.n	8001716 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a17      	ldr	r2, [pc, #92]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016f6:	23e0      	movs	r3, #224	; 0xe0
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001706:	2305      	movs	r3, #5
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <HAL_SPI_MspInit+0x8c>)
 8001712:	f000 fadb 	bl	8001ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40013000 	.word	0x40013000
 8001724:	40023800 	.word	0x40023800
 8001728:	40020000 	.word	0x40020000

0800172c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a19      	ldr	r2, [pc, #100]	; (80017b0 <HAL_UART_MspInit+0x84>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d12c      	bne.n	80017a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_UART_MspInit+0x88>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <HAL_UART_MspInit+0x88>)
 8001758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_UART_MspInit+0x88>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_UART_MspInit+0x88>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <HAL_UART_MspInit+0x88>)
 8001774:	f043 0308 	orr.w	r3, r3, #8
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_UART_MspInit+0x88>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001786:	f44f 7340 	mov.w	r3, #768	; 0x300
 800178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001798:	2307      	movs	r3, #7
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <HAL_UART_MspInit+0x8c>)
 80017a4:	f000 fa92 	bl	8001ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017a8:	bf00      	nop
 80017aa:	3728      	adds	r7, #40	; 0x28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40004800 	.word	0x40004800
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020c00 	.word	0x40020c00

080017bc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0a0      	sub	sp, #128	; 0x80
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	225c      	movs	r2, #92	; 0x5c
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 ff81 	bl	80046e4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017ea:	d14e      	bne.n	800188a <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80017ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80017f2:	2300      	movs	r3, #0
 80017f4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fe8e 	bl	800251c <HAL_RCCEx_PeriphCLKConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001806:	f7ff ff1b 	bl	8001640 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a20      	ldr	r2, [pc, #128]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001826:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800182a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001838:	230a      	movs	r3, #10
 800183a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001840:	4619      	mov	r1, r3
 8001842:	4815      	ldr	r0, [pc, #84]	; (8001898 <HAL_PCD_MspInit+0xdc>)
 8001844:	f000 fa42 	bl	8001ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800184c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184e:	2300      	movs	r3, #0
 8001850:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800185a:	4619      	mov	r1, r3
 800185c:	480e      	ldr	r0, [pc, #56]	; (8001898 <HAL_PCD_MspInit+0xdc>)
 800185e:	f000 fa35 	bl	8001ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 8001864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001866:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 8001868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186c:	6353      	str	r3, [r2, #52]	; 0x34
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 8001878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_PCD_MspInit+0xd8>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	3780      	adds	r7, #128	; 0x80
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <NMI_Handler+0x4>

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler+0x4>

080018ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler+0x4>

080018ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 f8c6 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <_sbrk+0x5c>)
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <_sbrk+0x60>)
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <_sbrk+0x64>)
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <_sbrk+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d207      	bcs.n	8001930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001920:	f002 fe98 	bl	8004654 <__errno>
 8001924:	4603      	mov	r3, r0
 8001926:	220c      	movs	r2, #12
 8001928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	e009      	b.n	8001944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <_sbrk+0x64>)
 8001940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20020000 	.word	0x20020000
 8001950:	00000400 	.word	0x00000400
 8001954:	2000012c 	.word	0x2000012c
 8001958:	20000670 	.word	0x20000670

0800195c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <SystemInit+0x20>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <SystemInit+0x20>)
 8001968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800196c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001986:	490e      	ldr	r1, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001988:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800199c:	4c0b      	ldr	r4, [pc, #44]	; (80019cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019aa:	f7ff ffd7 	bl	800195c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f002 fe57 	bl	8004660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7ff fc21 	bl	80011f8 <main>
  bx  lr    
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80019c4:	08005044 	.word	0x08005044
  ldr r2, =_sbss
 80019c8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80019cc:	2000066c 	.word	0x2000066c

080019d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_Init+0x40>)
 80019de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_Init+0x40>)
 80019ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_Init+0x40>)
 80019f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 f931 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 f808 	bl	8001a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a08:	f7ff fe20 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023c00 	.word	0x40023c00

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x54>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x58>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f93b 	bl	8001cb2 <HAL_SYSTICK_Config>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00e      	b.n	8001a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d80a      	bhi.n	8001a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f000 f911 	bl	8001c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a58:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_InitTick+0x5c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e000      	b.n	8001a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	2000001c 	.word	0x2000001c
 8001a70:	20000024 	.word	0x20000024
 8001a74:	20000020 	.word	0x20000020

08001a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x20>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x24>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_IncTick+0x24>)
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000024 	.word	0x20000024
 8001a9c:	20000658 	.word	0x20000658

08001aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_GetTick+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000658 	.word	0x20000658

08001ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff ffee 	bl	8001aa0 <HAL_GetTick>
 8001ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad0:	d005      	beq.n	8001ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_Delay+0x44>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ade:	bf00      	nop
 8001ae0:	f7ff ffde 	bl	8001aa0 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8f7      	bhi.n	8001ae0 <HAL_Delay+0x28>
  {
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000024 	.word	0x20000024

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
         );
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c30:	d301      	bcc.n	8001c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00f      	b.n	8001c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <SysTick_Config+0x40>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3e:	210f      	movs	r1, #15
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f7ff ff8e 	bl	8001b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <SysTick_Config+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <SysTick_Config+0x40>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff47 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff5c 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff8e 	bl	8001bb8 <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5d 	bl	8001b64 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffb0 	bl	8001c20 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e165      	b.n	8001fb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8154 	bne.w	8001fae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d005      	beq.n	8001d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d130      	bne.n	8001d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0201 	and.w	r2, r3, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d017      	beq.n	8001dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80ae 	beq.w	8001fae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b5d      	ldr	r3, [pc, #372]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a5c      	ldr	r2, [pc, #368]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b5a      	ldr	r3, [pc, #360]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6e:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <HAL_GPIO_Init+0x304>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4f      	ldr	r2, [pc, #316]	; (8001fd4 <HAL_GPIO_Init+0x308>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d025      	beq.n	8001ee6 <HAL_GPIO_Init+0x21a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4e      	ldr	r2, [pc, #312]	; (8001fd8 <HAL_GPIO_Init+0x30c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01f      	beq.n	8001ee2 <HAL_GPIO_Init+0x216>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4d      	ldr	r2, [pc, #308]	; (8001fdc <HAL_GPIO_Init+0x310>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d019      	beq.n	8001ede <HAL_GPIO_Init+0x212>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4c      	ldr	r2, [pc, #304]	; (8001fe0 <HAL_GPIO_Init+0x314>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_GPIO_Init+0x20e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4b      	ldr	r2, [pc, #300]	; (8001fe4 <HAL_GPIO_Init+0x318>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00d      	beq.n	8001ed6 <HAL_GPIO_Init+0x20a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4a      	ldr	r2, [pc, #296]	; (8001fe8 <HAL_GPIO_Init+0x31c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <HAL_GPIO_Init+0x206>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a49      	ldr	r2, [pc, #292]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d101      	bne.n	8001ece <HAL_GPIO_Init+0x202>
 8001eca:	2306      	movs	r3, #6
 8001ecc:	e00c      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ece:	2307      	movs	r3, #7
 8001ed0:	e00a      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ed2:	2305      	movs	r3, #5
 8001ed4:	e008      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	e006      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001eda:	2303      	movs	r3, #3
 8001edc:	e004      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e002      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	f002 0203 	and.w	r2, r2, #3
 8001eee:	0092      	lsls	r2, r2, #2
 8001ef0:	4093      	lsls	r3, r2
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef8:	4935      	ldr	r1, [pc, #212]	; (8001fd0 <HAL_GPIO_Init+0x304>)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f06:	4b3a      	ldr	r3, [pc, #232]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f2a:	4a31      	ldr	r2, [pc, #196]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f30:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f54:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f84:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa8:	4a11      	ldr	r2, [pc, #68]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b0f      	cmp	r3, #15
 8001fb8:	f67f ae96 	bls.w	8001ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3724      	adds	r7, #36	; 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40013800 	.word	0x40013800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40021400 	.word	0x40021400
 8001fec:	40021800 	.word	0x40021800
 8001ff0:	40013c00 	.word	0x40013c00

08001ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	887b      	ldrh	r3, [r7, #2]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	e001      	b.n	8002016 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
 8002030:	4613      	mov	r3, r2
 8002032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002034:	787b      	ldrb	r3, [r7, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002040:	e003      	b.n	800204a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	041a      	lsls	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	619a      	str	r2, [r3, #24]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002056:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002058:	b08f      	sub	sp, #60	; 0x3c
 800205a:	af0a      	add	r7, sp, #40	; 0x28
 800205c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e116      	b.n	8002296 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fb9a 	bl	80017bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2203      	movs	r2, #3
 800208c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 f85b 	bl	8004162 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	687e      	ldr	r6, [r7, #4]
 80020b4:	466d      	mov	r5, sp
 80020b6:	f106 0410 	add.w	r4, r6, #16
 80020ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ca:	1d33      	adds	r3, r6, #4
 80020cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ce:	6838      	ldr	r0, [r7, #0]
 80020d0:	f001 ffe6 	bl	80040a0 <USB_CoreInit>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2202      	movs	r2, #2
 80020de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0d7      	b.n	8002296 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 f849 	bl	8004184 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	e04a      	b.n	800218e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	333d      	adds	r3, #61	; 0x3d
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	1a9b      	subs	r3, r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	333c      	adds	r3, #60	; 0x3c
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	b298      	uxth	r0, r3
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	3342      	adds	r3, #66	; 0x42
 8002134:	4602      	mov	r2, r0
 8002136:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	333f      	adds	r3, #63	; 0x3f
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	3344      	adds	r3, #68	; 0x44
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3348      	adds	r3, #72	; 0x48
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	3350      	adds	r3, #80	; 0x50
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	3301      	adds	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	d3af      	bcc.n	80020f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e044      	b.n	8002228 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	3301      	adds	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	d3b5      	bcc.n	800219e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	687e      	ldr	r6, [r7, #4]
 800223a:	466d      	mov	r5, sp
 800223c:	f106 0410 	add.w	r4, r6, #16
 8002240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002248:	e894 0003 	ldmia.w	r4, {r0, r1}
 800224c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002250:	1d33      	adds	r3, r6, #4
 8002252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002254:	6838      	ldr	r0, [r7, #0]
 8002256:	f001 ffe1 	bl	800421c <USB_DevInit>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e014      	b.n	8002296 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	2b01      	cmp	r3, #1
 8002282:	d102      	bne.n	800228a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f80a 	bl	800229e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f002 f97f 	bl	8004592 <USB_DevDisconnect>

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800229e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d0:	f043 0303 	orr.w	r3, r3, #3
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0cc      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022fc:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d90c      	bls.n	8002324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0b8      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800233c:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800235e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	494d      	ldr	r1, [pc, #308]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d044      	beq.n	8002408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d119      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e07f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d003      	beq.n	80023a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e06f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b6:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e067      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f023 0203 	bic.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4934      	ldr	r1, [pc, #208]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d8:	f7ff fb62 	bl	8001aa0 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e0:	f7ff fb5e 	bl	8001aa0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e04f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 020c 	and.w	r2, r3, #12
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	429a      	cmp	r2, r3
 8002406:	d1eb      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d20c      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e032      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4916      	ldr	r1, [pc, #88]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	490e      	ldr	r1, [pc, #56]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800246e:	f000 fb7f 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8002472:	4602      	mov	r2, r0
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	490a      	ldr	r1, [pc, #40]	; (80024a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	5ccb      	ldrb	r3, [r1, r3]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fac2 	bl	8001a18 <HAL_InitTick>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00
 80024a4:	40023800 	.word	0x40023800
 80024a8:	08004fe8 	.word	0x08004fe8
 80024ac:	2000001c 	.word	0x2000001c
 80024b0:	20000020 	.word	0x20000020

080024b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024ba:	681b      	ldr	r3, [r3, #0]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	2000001c 	.word	0x2000001c

080024cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024d0:	f7ff fff0 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	0a9b      	lsrs	r3, r3, #10
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4903      	ldr	r1, [pc, #12]	; (80024f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	08004ff8 	.word	0x08004ff8

080024f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024f8:	f7ff ffdc 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	0b5b      	lsrs	r3, r3, #13
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	4903      	ldr	r1, [pc, #12]	; (8002518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800250a:	5ccb      	ldrb	r3, [r1, r3]
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40023800 	.word	0x40023800
 8002518:	08004ff8 	.word	0x08004ff8

0800251c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	; 0x30
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d010      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002554:	4b6f      	ldr	r3, [pc, #444]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800255a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002562:	496c      	ldr	r1, [pc, #432]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002572:	2301      	movs	r3, #1
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d010      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002582:	4b64      	ldr	r3, [pc, #400]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002588:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	4960      	ldr	r1, [pc, #384]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80025a0:	2301      	movs	r3, #1
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d017      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025b0:	4b58      	ldr	r3, [pc, #352]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4955      	ldr	r1, [pc, #340]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ce:	d101      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80025d0:	2301      	movs	r3, #1
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80025dc:	2301      	movs	r3, #1
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d017      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025ec:	4b49      	ldr	r3, [pc, #292]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fa:	4946      	ldr	r1, [pc, #280]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800260a:	d101      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800260c:	2301      	movs	r3, #1
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002618:	2301      	movs	r3, #1
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 808a 	beq.w	800273e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	4b39      	ldr	r3, [pc, #228]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	4a38      	ldr	r2, [pc, #224]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	6413      	str	r3, [r2, #64]	; 0x40
 800263a:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002646:	4b34      	ldr	r3, [pc, #208]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a33      	ldr	r2, [pc, #204]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800264c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002650:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002652:	f7ff fa25 	bl	8001aa0 <HAL_GetTick>
 8002656:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800265a:	f7ff fa21 	bl	8001aa0 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e278      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800266c:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002680:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d02f      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002690:	6a3a      	ldr	r2, [r7, #32]
 8002692:	429a      	cmp	r2, r3
 8002694:	d028      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002696:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026a0:	4b1e      	ldr	r3, [pc, #120]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026a6:	4b1d      	ldr	r3, [pc, #116]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d114      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80026be:	f7ff f9ef 	bl	8001aa0 <HAL_GetTick>
 80026c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	e00a      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7ff f9eb 	bl	8001aa0 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e240      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ee      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026f4:	d114      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270a:	4902      	ldr	r1, [pc, #8]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800270c:	4313      	orrs	r3, r2
 800270e:	608b      	str	r3, [r1, #8]
 8002710:	e00c      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	40007000 	.word	0x40007000
 800271c:	42470e40 	.word	0x42470e40
 8002720:	4b4a      	ldr	r3, [pc, #296]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4a49      	ldr	r2, [pc, #292]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002726:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800272a:	6093      	str	r3, [r2, #8]
 800272c:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800272e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002738:	4944      	ldr	r1, [pc, #272]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800273a:	4313      	orrs	r3, r2
 800273c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002750:	4b3f      	ldr	r3, [pc, #252]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002752:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002760:	4b3a      	ldr	r3, [pc, #232]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002766:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	4937      	ldr	r1, [pc, #220]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002782:	4b32      	ldr	r3, [pc, #200]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002788:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002790:	492e      	ldr	r1, [pc, #184]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d011      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027a4:	4b29      	ldr	r3, [pc, #164]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027aa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	4926      	ldr	r1, [pc, #152]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027c2:	d101      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80027c4:	2301      	movs	r3, #1
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	491a      	ldr	r1, [pc, #104]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d011      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002804:	4911      	ldr	r1, [pc, #68]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002814:	d101      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002816:	2301      	movs	r3, #1
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	2b01      	cmp	r3, #1
 800281e:	d005      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002828:	f040 80ff 	bne.w	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002832:	f7ff f935 	bl	8001aa0 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002838:	e00e      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800283a:	f7ff f931 	bl	8001aa0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d907      	bls.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e188      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800284c:	40023800 	.word	0x40023800
 8002850:	424711e0 	.word	0x424711e0
 8002854:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002858:	4b7e      	ldr	r3, [pc, #504]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ea      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002880:	2b00      	cmp	r3, #0
 8002882:	d028      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d124      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800288c:	4b71      	ldr	r3, [pc, #452]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800288e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002892:	0c1b      	lsrs	r3, r3, #16
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	3301      	adds	r3, #1
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800289e:	4b6d      	ldr	r3, [pc, #436]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a4:	0e1b      	lsrs	r3, r3, #24
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	019b      	lsls	r3, r3, #6
 80028b6:	431a      	orrs	r2, r3
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	431a      	orrs	r2, r3
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	071b      	lsls	r3, r3, #28
 80028ce:	4961      	ldr	r1, [pc, #388]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d004      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d035      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002900:	d130      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002902:	4b54      	ldr	r3, [pc, #336]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002908:	0c1b      	lsrs	r3, r3, #16
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	3301      	adds	r3, #1
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002914:	4b4f      	ldr	r3, [pc, #316]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800291a:	0f1b      	lsrs	r3, r3, #28
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	019b      	lsls	r3, r3, #6
 800292c:	431a      	orrs	r2, r3
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	085b      	lsrs	r3, r3, #1
 8002932:	3b01      	subs	r3, #1
 8002934:	041b      	lsls	r3, r3, #16
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	061b      	lsls	r3, r3, #24
 800293e:	431a      	orrs	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	071b      	lsls	r3, r3, #28
 8002944:	4943      	ldr	r1, [pc, #268]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800294c:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800294e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002952:	f023 021f 	bic.w	r2, r3, #31
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	3b01      	subs	r3, #1
 800295c:	493d      	ldr	r1, [pc, #244]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d029      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002978:	d124      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800297a:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800297c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002980:	0c1b      	lsrs	r3, r3, #16
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	3301      	adds	r3, #1
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800298c:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800298e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002992:	0f1b      	lsrs	r3, r3, #28
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	019b      	lsls	r3, r3, #6
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	085b      	lsrs	r3, r3, #1
 80029ac:	3b01      	subs	r3, #1
 80029ae:	041b      	lsls	r3, r3, #16
 80029b0:	431a      	orrs	r2, r3
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	431a      	orrs	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	071b      	lsls	r3, r3, #28
 80029bc:	4925      	ldr	r1, [pc, #148]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d016      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	019b      	lsls	r3, r3, #6
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	085b      	lsrs	r3, r3, #1
 80029e2:	3b01      	subs	r3, #1
 80029e4:	041b      	lsls	r3, r3, #16
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	071b      	lsls	r3, r3, #28
 80029f6:	4917      	ldr	r1, [pc, #92]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a04:	f7ff f84c 	bl	8001aa0 <HAL_GetTick>
 8002a08:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a0c:	f7ff f848 	bl	8001aa0 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e09f      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	f040 8095 	bne.w	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a38:	f7ff f832 	bl	8001aa0 <HAL_GetTick>
 8002a3c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a3e:	e00f      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002a40:	f7ff f82e 	bl	8001aa0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d908      	bls.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e085      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	42470068 	.word	0x42470068
 8002a5c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a60:	4b41      	ldr	r3, [pc, #260]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a6c:	d0e8      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d02b      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d127      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002a96:	4b34      	ldr	r3, [pc, #208]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	0c1b      	lsrs	r3, r3, #16
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699a      	ldr	r2, [r3, #24]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	019b      	lsls	r3, r3, #6
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	041b      	lsls	r3, r3, #16
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	061b      	lsls	r3, r3, #24
 8002ac4:	4928      	ldr	r1, [pc, #160]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002acc:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ad2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	3b01      	subs	r3, #1
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	4922      	ldr	r1, [pc, #136]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01d      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002afa:	d118      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002afc:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	0e1b      	lsrs	r3, r3, #24
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	019b      	lsls	r3, r3, #6
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	041b      	lsls	r3, r3, #16
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	061b      	lsls	r3, r3, #24
 8002b26:	4910      	ldr	r1, [pc, #64]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b2e:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b34:	f7fe ffb4 	bl	8001aa0 <HAL_GetTick>
 8002b38:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b3c:	f7fe ffb0 	bl	8001aa0 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e007      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b5a:	d1ef      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3730      	adds	r7, #48	; 0x30
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	42470070 	.word	0x42470070

08002b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b74:	b088      	sub	sp, #32
 8002b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b8c:	4bce      	ldr	r3, [pc, #824]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b0c      	cmp	r3, #12
 8002b96:	f200 818d 	bhi.w	8002eb4 <HAL_RCC_GetSysClockFreq+0x344>
 8002b9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ba0 <HAL_RCC_GetSysClockFreq+0x30>)
 8002b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba0:	08002bd5 	.word	0x08002bd5
 8002ba4:	08002eb5 	.word	0x08002eb5
 8002ba8:	08002eb5 	.word	0x08002eb5
 8002bac:	08002eb5 	.word	0x08002eb5
 8002bb0:	08002bdb 	.word	0x08002bdb
 8002bb4:	08002eb5 	.word	0x08002eb5
 8002bb8:	08002eb5 	.word	0x08002eb5
 8002bbc:	08002eb5 	.word	0x08002eb5
 8002bc0:	08002be1 	.word	0x08002be1
 8002bc4:	08002eb5 	.word	0x08002eb5
 8002bc8:	08002eb5 	.word	0x08002eb5
 8002bcc:	08002eb5 	.word	0x08002eb5
 8002bd0:	08002d55 	.word	0x08002d55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bd4:	4bbd      	ldr	r3, [pc, #756]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002bd6:	61bb      	str	r3, [r7, #24]
       break;
 8002bd8:	e16f      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bda:	4bbd      	ldr	r3, [pc, #756]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x360>)
 8002bdc:	61bb      	str	r3, [r7, #24]
      break;
 8002bde:	e16c      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be0:	4bb9      	ldr	r3, [pc, #740]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bea:	4bb7      	ldr	r3, [pc, #732]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d053      	beq.n	8002c9e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf6:	4bb4      	ldr	r3, [pc, #720]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	099b      	lsrs	r3, r3, #6
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c06:	f04f 0100 	mov.w	r1, #0
 8002c0a:	ea02 0400 	and.w	r4, r2, r0
 8002c0e:	603c      	str	r4, [r7, #0]
 8002c10:	400b      	ands	r3, r1
 8002c12:	607b      	str	r3, [r7, #4]
 8002c14:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c18:	4620      	mov	r0, r4
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	014b      	lsls	r3, r1, #5
 8002c26:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c2a:	0142      	lsls	r2, r0, #5
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4623      	mov	r3, r4
 8002c32:	1ac0      	subs	r0, r0, r3
 8002c34:	462b      	mov	r3, r5
 8002c36:	eb61 0103 	sbc.w	r1, r1, r3
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	018b      	lsls	r3, r1, #6
 8002c44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c48:	0182      	lsls	r2, r0, #6
 8002c4a:	1a12      	subs	r2, r2, r0
 8002c4c:	eb63 0301 	sbc.w	r3, r3, r1
 8002c50:	f04f 0000 	mov.w	r0, #0
 8002c54:	f04f 0100 	mov.w	r1, #0
 8002c58:	00d9      	lsls	r1, r3, #3
 8002c5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c5e:	00d0      	lsls	r0, r2, #3
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4621      	mov	r1, r4
 8002c66:	1852      	adds	r2, r2, r1
 8002c68:	4629      	mov	r1, r5
 8002c6a:	eb43 0101 	adc.w	r1, r3, r1
 8002c6e:	460b      	mov	r3, r1
 8002c70:	f04f 0000 	mov.w	r0, #0
 8002c74:	f04f 0100 	mov.w	r1, #0
 8002c78:	0259      	lsls	r1, r3, #9
 8002c7a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c7e:	0250      	lsls	r0, r2, #9
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	f7fd fb0e 	bl	80002b0 <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4613      	mov	r3, r2
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	e04c      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9e:	4b8a      	ldr	r3, [pc, #552]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	099b      	lsrs	r3, r3, #6
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	ea02 0a00 	and.w	sl, r2, r0
 8002cb6:	ea03 0b01 	and.w	fp, r3, r1
 8002cba:	4650      	mov	r0, sl
 8002cbc:	4659      	mov	r1, fp
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	014b      	lsls	r3, r1, #5
 8002cc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ccc:	0142      	lsls	r2, r0, #5
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	ebb0 000a 	subs.w	r0, r0, sl
 8002cd6:	eb61 010b 	sbc.w	r1, r1, fp
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	018b      	lsls	r3, r1, #6
 8002ce4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ce8:	0182      	lsls	r2, r0, #6
 8002cea:	1a12      	subs	r2, r2, r0
 8002cec:	eb63 0301 	sbc.w	r3, r3, r1
 8002cf0:	f04f 0000 	mov.w	r0, #0
 8002cf4:	f04f 0100 	mov.w	r1, #0
 8002cf8:	00d9      	lsls	r1, r3, #3
 8002cfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cfe:	00d0      	lsls	r0, r2, #3
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	eb12 020a 	adds.w	r2, r2, sl
 8002d08:	eb43 030b 	adc.w	r3, r3, fp
 8002d0c:	f04f 0000 	mov.w	r0, #0
 8002d10:	f04f 0100 	mov.w	r1, #0
 8002d14:	0299      	lsls	r1, r3, #10
 8002d16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d1a:	0290      	lsls	r0, r2, #10
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	f7fd fac0 	bl	80002b0 <__aeabi_uldivmod>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4613      	mov	r3, r2
 8002d36:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d38:	4b63      	ldr	r3, [pc, #396]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	3301      	adds	r3, #1
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	61bb      	str	r3, [r7, #24]
      break;
 8002d52:	e0b2      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d54:	4b5c      	ldr	r3, [pc, #368]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d5c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d5e:	4b5a      	ldr	r3, [pc, #360]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d04d      	beq.n	8002e06 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6a:	4b57      	ldr	r3, [pc, #348]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	099b      	lsrs	r3, r3, #6
 8002d70:	461a      	mov	r2, r3
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d7a:	f04f 0100 	mov.w	r1, #0
 8002d7e:	ea02 0800 	and.w	r8, r2, r0
 8002d82:	ea03 0901 	and.w	r9, r3, r1
 8002d86:	4640      	mov	r0, r8
 8002d88:	4649      	mov	r1, r9
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	014b      	lsls	r3, r1, #5
 8002d94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d98:	0142      	lsls	r2, r0, #5
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	ebb0 0008 	subs.w	r0, r0, r8
 8002da2:	eb61 0109 	sbc.w	r1, r1, r9
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	018b      	lsls	r3, r1, #6
 8002db0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002db4:	0182      	lsls	r2, r0, #6
 8002db6:	1a12      	subs	r2, r2, r0
 8002db8:	eb63 0301 	sbc.w	r3, r3, r1
 8002dbc:	f04f 0000 	mov.w	r0, #0
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	00d9      	lsls	r1, r3, #3
 8002dc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dca:	00d0      	lsls	r0, r2, #3
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	eb12 0208 	adds.w	r2, r2, r8
 8002dd4:	eb43 0309 	adc.w	r3, r3, r9
 8002dd8:	f04f 0000 	mov.w	r0, #0
 8002ddc:	f04f 0100 	mov.w	r1, #0
 8002de0:	0259      	lsls	r1, r3, #9
 8002de2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002de6:	0250      	lsls	r0, r2, #9
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4610      	mov	r0, r2
 8002dee:	4619      	mov	r1, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	f7fd fa5a 	bl	80002b0 <__aeabi_uldivmod>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4613      	mov	r3, r2
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	e04a      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e06:	4b30      	ldr	r3, [pc, #192]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	099b      	lsrs	r3, r3, #6
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e16:	f04f 0100 	mov.w	r1, #0
 8002e1a:	ea02 0400 	and.w	r4, r2, r0
 8002e1e:	ea03 0501 	and.w	r5, r3, r1
 8002e22:	4620      	mov	r0, r4
 8002e24:	4629      	mov	r1, r5
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	014b      	lsls	r3, r1, #5
 8002e30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e34:	0142      	lsls	r2, r0, #5
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	1b00      	subs	r0, r0, r4
 8002e3c:	eb61 0105 	sbc.w	r1, r1, r5
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	018b      	lsls	r3, r1, #6
 8002e4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e4e:	0182      	lsls	r2, r0, #6
 8002e50:	1a12      	subs	r2, r2, r0
 8002e52:	eb63 0301 	sbc.w	r3, r3, r1
 8002e56:	f04f 0000 	mov.w	r0, #0
 8002e5a:	f04f 0100 	mov.w	r1, #0
 8002e5e:	00d9      	lsls	r1, r3, #3
 8002e60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e64:	00d0      	lsls	r0, r2, #3
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	1912      	adds	r2, r2, r4
 8002e6c:	eb45 0303 	adc.w	r3, r5, r3
 8002e70:	f04f 0000 	mov.w	r0, #0
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	0299      	lsls	r1, r3, #10
 8002e7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e7e:	0290      	lsls	r0, r2, #10
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	f7fd fa0e 	bl	80002b0 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4613      	mov	r3, r2
 8002e9a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	0f1b      	lsrs	r3, r3, #28
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	61bb      	str	r3, [r7, #24]
      break;
 8002eb2:	e002      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002eb6:	61bb      	str	r3, [r7, #24]
      break;
 8002eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eba:	69bb      	ldr	r3, [r7, #24]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	007a1200 	.word	0x007a1200

08002ed4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e28d      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8083 	beq.w	8002ffa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ef4:	4b94      	ldr	r3, [pc, #592]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d019      	beq.n	8002f34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f00:	4b91      	ldr	r3, [pc, #580]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d106      	bne.n	8002f1a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f0c:	4b8e      	ldr	r3, [pc, #568]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f18:	d00c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f1a:	4b8b      	ldr	r3, [pc, #556]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d112      	bne.n	8002f4c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f26:	4b88      	ldr	r3, [pc, #544]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f32:	d10b      	bne.n	8002f4c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f34:	4b84      	ldr	r3, [pc, #528]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d05b      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x124>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d157      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e25a      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f54:	d106      	bne.n	8002f64 <HAL_RCC_OscConfig+0x90>
 8002f56:	4b7c      	ldr	r3, [pc, #496]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a7b      	ldr	r2, [pc, #492]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e01d      	b.n	8002fa0 <HAL_RCC_OscConfig+0xcc>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0xb4>
 8002f6e:	4b76      	ldr	r3, [pc, #472]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a75      	ldr	r2, [pc, #468]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b73      	ldr	r3, [pc, #460]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a72      	ldr	r2, [pc, #456]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCC_OscConfig+0xcc>
 8002f88:	4b6f      	ldr	r3, [pc, #444]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a6e      	ldr	r2, [pc, #440]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4b6c      	ldr	r3, [pc, #432]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a6b      	ldr	r2, [pc, #428]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fd7a 	bl	8001aa0 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fe fd76 	bl	8001aa0 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e21f      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b61      	ldr	r3, [pc, #388]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xdc>
 8002fce:	e014      	b.n	8002ffa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fd66 	bl	8001aa0 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fe fd62 	bl	8001aa0 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e20b      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	4b57      	ldr	r3, [pc, #348]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x104>
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d06f      	beq.n	80030e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003006:	4b50      	ldr	r3, [pc, #320]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b00      	cmp	r3, #0
 8003010:	d017      	beq.n	8003042 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003012:	4b4d      	ldr	r3, [pc, #308]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800301a:	2b08      	cmp	r3, #8
 800301c:	d105      	bne.n	800302a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800301e:	4b4a      	ldr	r3, [pc, #296]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00b      	beq.n	8003042 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800302a:	4b47      	ldr	r3, [pc, #284]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d11c      	bne.n	8003070 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003036:	4b44      	ldr	r3, [pc, #272]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d116      	bne.n	8003070 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003042:	4b41      	ldr	r3, [pc, #260]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_RCC_OscConfig+0x186>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d001      	beq.n	800305a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e1d3      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305a:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4937      	ldr	r1, [pc, #220]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306e:	e03a      	b.n	80030e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d020      	beq.n	80030ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003078:	4b34      	ldr	r3, [pc, #208]	; (800314c <HAL_RCC_OscConfig+0x278>)
 800307a:	2201      	movs	r2, #1
 800307c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fe fd0f 	bl	8001aa0 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003086:	f7fe fd0b 	bl	8001aa0 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e1b4      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003098:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a4:	4b28      	ldr	r3, [pc, #160]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4925      	ldr	r1, [pc, #148]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	600b      	str	r3, [r1, #0]
 80030b8:	e015      	b.n	80030e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ba:	4b24      	ldr	r3, [pc, #144]	; (800314c <HAL_RCC_OscConfig+0x278>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe fcee 	bl	8001aa0 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fe fcea 	bl	8001aa0 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e193      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030da:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d036      	beq.n	8003160 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fa:	4b15      	ldr	r3, [pc, #84]	; (8003150 <HAL_RCC_OscConfig+0x27c>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7fe fcce 	bl	8001aa0 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003108:	f7fe fcca 	bl	8001aa0 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e173      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311a:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 800311c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x234>
 8003126:	e01b      	b.n	8003160 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_RCC_OscConfig+0x27c>)
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312e:	f7fe fcb7 	bl	8001aa0 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003134:	e00e      	b.n	8003154 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003136:	f7fe fcb3 	bl	8001aa0 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d907      	bls.n	8003154 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e15c      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
 8003148:	40023800 	.word	0x40023800
 800314c:	42470000 	.word	0x42470000
 8003150:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003154:	4b8a      	ldr	r3, [pc, #552]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1ea      	bne.n	8003136 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8097 	beq.w	800329c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316e:	2300      	movs	r3, #0
 8003170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003172:	4b83      	ldr	r3, [pc, #524]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10f      	bne.n	800319e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	4b7f      	ldr	r3, [pc, #508]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	4a7e      	ldr	r2, [pc, #504]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318c:	6413      	str	r3, [r2, #64]	; 0x40
 800318e:	4b7c      	ldr	r3, [pc, #496]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319a:	2301      	movs	r3, #1
 800319c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319e:	4b79      	ldr	r3, [pc, #484]	; (8003384 <HAL_RCC_OscConfig+0x4b0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d118      	bne.n	80031dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031aa:	4b76      	ldr	r3, [pc, #472]	; (8003384 <HAL_RCC_OscConfig+0x4b0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a75      	ldr	r2, [pc, #468]	; (8003384 <HAL_RCC_OscConfig+0x4b0>)
 80031b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b6:	f7fe fc73 	bl	8001aa0 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031be:	f7fe fc6f 	bl	8001aa0 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e118      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d0:	4b6c      	ldr	r3, [pc, #432]	; (8003384 <HAL_RCC_OscConfig+0x4b0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d106      	bne.n	80031f2 <HAL_RCC_OscConfig+0x31e>
 80031e4:	4b66      	ldr	r3, [pc, #408]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	4a65      	ldr	r2, [pc, #404]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6713      	str	r3, [r2, #112]	; 0x70
 80031f0:	e01c      	b.n	800322c <HAL_RCC_OscConfig+0x358>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x340>
 80031fa:	4b61      	ldr	r3, [pc, #388]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	4a60      	ldr	r2, [pc, #384]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003200:	f043 0304 	orr.w	r3, r3, #4
 8003204:	6713      	str	r3, [r2, #112]	; 0x70
 8003206:	4b5e      	ldr	r3, [pc, #376]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	4a5d      	ldr	r2, [pc, #372]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6713      	str	r3, [r2, #112]	; 0x70
 8003212:	e00b      	b.n	800322c <HAL_RCC_OscConfig+0x358>
 8003214:	4b5a      	ldr	r3, [pc, #360]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	4a59      	ldr	r2, [pc, #356]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	6713      	str	r3, [r2, #112]	; 0x70
 8003220:	4b57      	ldr	r3, [pc, #348]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003224:	4a56      	ldr	r2, [pc, #344]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003226:	f023 0304 	bic.w	r3, r3, #4
 800322a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d015      	beq.n	8003260 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003234:	f7fe fc34 	bl	8001aa0 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323a:	e00a      	b.n	8003252 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323c:	f7fe fc30 	bl	8001aa0 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e0d7      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003252:	4b4b      	ldr	r3, [pc, #300]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0ee      	beq.n	800323c <HAL_RCC_OscConfig+0x368>
 800325e:	e014      	b.n	800328a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe fc1e 	bl	8001aa0 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003266:	e00a      	b.n	800327e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003268:	f7fe fc1a 	bl	8001aa0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e0c1      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327e:	4b40      	ldr	r3, [pc, #256]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1ee      	bne.n	8003268 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328a:	7dfb      	ldrb	r3, [r7, #23]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d105      	bne.n	800329c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003290:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	4a3a      	ldr	r2, [pc, #232]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80ad 	beq.w	8003400 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032a6:	4b36      	ldr	r3, [pc, #216]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d060      	beq.n	8003374 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d145      	bne.n	8003346 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ba:	4b33      	ldr	r3, [pc, #204]	; (8003388 <HAL_RCC_OscConfig+0x4b4>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe fbee 	bl	8001aa0 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c8:	f7fe fbea 	bl	8001aa0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e093      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032da:	4b29      	ldr	r3, [pc, #164]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69da      	ldr	r2, [r3, #28]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	019b      	lsls	r3, r3, #6
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	085b      	lsrs	r3, r3, #1
 80032fe:	3b01      	subs	r3, #1
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	061b      	lsls	r3, r3, #24
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	071b      	lsls	r3, r3, #28
 8003312:	491b      	ldr	r1, [pc, #108]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003318:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <HAL_RCC_OscConfig+0x4b4>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331e:	f7fe fbbf 	bl	8001aa0 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003326:	f7fe fbbb 	bl	8001aa0 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e064      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x452>
 8003344:	e05c      	b.n	8003400 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <HAL_RCC_OscConfig+0x4b4>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe fba8 	bl	8001aa0 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003354:	f7fe fba4 	bl	8001aa0 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e04d      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_RCC_OscConfig+0x4ac>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x480>
 8003372:	e045      	b.n	8003400 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d107      	bne.n	800338c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e040      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
 8003380:	40023800 	.word	0x40023800
 8003384:	40007000 	.word	0x40007000
 8003388:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800338c:	4b1f      	ldr	r3, [pc, #124]	; (800340c <HAL_RCC_OscConfig+0x538>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d030      	beq.n	80033fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d129      	bne.n	80033fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d122      	bne.n	80033fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033bc:	4013      	ands	r3, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d119      	bne.n	80033fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	085b      	lsrs	r3, r3, #1
 80033d4:	3b01      	subs	r3, #1
 80033d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d10f      	bne.n	80033fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d107      	bne.n	80033fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800

08003410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e07b      	b.n	800351a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	d108      	bne.n	800343c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003432:	d009      	beq.n	8003448 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	61da      	str	r2, [r3, #28]
 800343a:	e005      	b.n	8003448 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fe f91a 	bl	800169c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800347e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	ea42 0103 	orr.w	r1, r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	f003 0104 	and.w	r1, r3, #4
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f003 0210 	and.w	r2, r3, #16
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003508:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b088      	sub	sp, #32
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_SPI_Transmit+0x22>
 8003540:	2302      	movs	r3, #2
 8003542:	e126      	b.n	8003792 <HAL_SPI_Transmit+0x270>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800354c:	f7fe faa8 	bl	8001aa0 <HAL_GetTick>
 8003550:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d002      	beq.n	8003568 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003562:	2302      	movs	r3, #2
 8003564:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003566:	e10b      	b.n	8003780 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_SPI_Transmit+0x52>
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003578:	e102      	b.n	8003780 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2203      	movs	r2, #3
 800357e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	88fa      	ldrh	r2, [r7, #6]
 8003592:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c0:	d10f      	bne.n	80035e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d007      	beq.n	8003600 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003608:	d14b      	bne.n	80036a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_SPI_Transmit+0xf6>
 8003612:	8afb      	ldrh	r3, [r7, #22]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d13e      	bne.n	8003696 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	881a      	ldrh	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	1c9a      	adds	r2, r3, #2
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800363c:	e02b      	b.n	8003696 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b02      	cmp	r3, #2
 800364a:	d112      	bne.n	8003672 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	881a      	ldrh	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	1c9a      	adds	r2, r3, #2
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003670:	e011      	b.n	8003696 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003672:	f7fe fa15 	bl	8001aa0 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d803      	bhi.n	800368a <HAL_SPI_Transmit+0x168>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d102      	bne.n	8003690 <HAL_SPI_Transmit+0x16e>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003694:	e074      	b.n	8003780 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1ce      	bne.n	800363e <HAL_SPI_Transmit+0x11c>
 80036a0:	e04c      	b.n	800373c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_SPI_Transmit+0x18e>
 80036aa:	8afb      	ldrh	r3, [r7, #22]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d140      	bne.n	8003732 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	330c      	adds	r3, #12
 80036ba:	7812      	ldrb	r2, [r2, #0]
 80036bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036d6:	e02c      	b.n	8003732 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d113      	bne.n	800370e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	330c      	adds	r3, #12
 80036f0:	7812      	ldrb	r2, [r2, #0]
 80036f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	86da      	strh	r2, [r3, #54]	; 0x36
 800370c:	e011      	b.n	8003732 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800370e:	f7fe f9c7 	bl	8001aa0 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d803      	bhi.n	8003726 <HAL_SPI_Transmit+0x204>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d102      	bne.n	800372c <HAL_SPI_Transmit+0x20a>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003730:	e026      	b.n	8003780 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1cd      	bne.n	80036d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	6839      	ldr	r1, [r7, #0]
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 fa55 	bl	8003bf0 <SPI_EndRxTxTransaction>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10a      	bne.n	8003770 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e000      	b.n	8003780 <HAL_SPI_Transmit+0x25e>
  }

error:
 800377e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003790:	7ffb      	ldrb	r3, [r7, #31]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b08c      	sub	sp, #48	; 0x30
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037a8:	2301      	movs	r3, #1
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_SPI_TransmitReceive+0x26>
 80037bc:	2302      	movs	r3, #2
 80037be:	e18a      	b.n	8003ad6 <HAL_SPI_TransmitReceive+0x33c>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037c8:	f7fe f96a 	bl	8001aa0 <HAL_GetTick>
 80037cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037de:	887b      	ldrh	r3, [r7, #2]
 80037e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d00f      	beq.n	800380a <HAL_SPI_TransmitReceive+0x70>
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037f0:	d107      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d103      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x68>
 80037fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d003      	beq.n	800380a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003802:	2302      	movs	r3, #2
 8003804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003808:	e15b      	b.n	8003ac2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_SPI_TransmitReceive+0x82>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_SPI_TransmitReceive+0x82>
 8003816:	887b      	ldrh	r3, [r7, #2]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d103      	bne.n	8003824 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003822:	e14e      	b.n	8003ac2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b04      	cmp	r3, #4
 800382e:	d003      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2205      	movs	r2, #5
 8003834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	887a      	ldrh	r2, [r7, #2]
 8003848:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	887a      	ldrh	r2, [r7, #2]
 800384e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	887a      	ldrh	r2, [r7, #2]
 800385a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	887a      	ldrh	r2, [r7, #2]
 8003860:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d007      	beq.n	800388c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800388a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003894:	d178      	bne.n	8003988 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_SPI_TransmitReceive+0x10a>
 800389e:	8b7b      	ldrh	r3, [r7, #26]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d166      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	881a      	ldrh	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	1c9a      	adds	r2, r3, #2
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038c8:	e053      	b.n	8003972 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d11b      	bne.n	8003910 <HAL_SPI_TransmitReceive+0x176>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d016      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x176>
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d113      	bne.n	8003910 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	881a      	ldrh	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	1c9a      	adds	r2, r3, #2
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b01      	cmp	r3, #1
 800391c:	d119      	bne.n	8003952 <HAL_SPI_TransmitReceive+0x1b8>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d014      	beq.n	8003952 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	b292      	uxth	r2, r2
 8003934:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	1c9a      	adds	r2, r3, #2
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800394e:	2301      	movs	r3, #1
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003952:	f7fe f8a5 	bl	8001aa0 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800395e:	429a      	cmp	r2, r3
 8003960:	d807      	bhi.n	8003972 <HAL_SPI_TransmitReceive+0x1d8>
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003968:	d003      	beq.n	8003972 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003970:	e0a7      	b.n	8003ac2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1a6      	bne.n	80038ca <HAL_SPI_TransmitReceive+0x130>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1a1      	bne.n	80038ca <HAL_SPI_TransmitReceive+0x130>
 8003986:	e07c      	b.n	8003a82 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_SPI_TransmitReceive+0x1fc>
 8003990:	8b7b      	ldrh	r3, [r7, #26]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d16b      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	330c      	adds	r3, #12
 80039a0:	7812      	ldrb	r2, [r2, #0]
 80039a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039bc:	e057      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d11c      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x26c>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d017      	beq.n	8003a06 <HAL_SPI_TransmitReceive+0x26c>
 80039d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d114      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	7812      	ldrb	r2, [r2, #0]
 80039e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d119      	bne.n	8003a48 <HAL_SPI_TransmitReceive+0x2ae>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d014      	beq.n	8003a48 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a44:	2301      	movs	r3, #1
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a48:	f7fe f82a 	bl	8001aa0 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d803      	bhi.n	8003a60 <HAL_SPI_TransmitReceive+0x2c6>
 8003a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5e:	d102      	bne.n	8003a66 <HAL_SPI_TransmitReceive+0x2cc>
 8003a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a6c:	e029      	b.n	8003ac2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1a2      	bne.n	80039be <HAL_SPI_TransmitReceive+0x224>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d19d      	bne.n	80039be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f8b2 	bl	8003bf0 <SPI_EndRxTxTransaction>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d006      	beq.n	8003aa0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a9e:	e010      	b.n	8003ac2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10b      	bne.n	8003ac0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	e000      	b.n	8003ac2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ac0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ad2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3730      	adds	r7, #48	; 0x30
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003af0:	f7fd ffd6 	bl	8001aa0 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	4413      	add	r3, r2
 8003afe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b00:	f7fd ffce 	bl	8001aa0 <HAL_GetTick>
 8003b04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b06:	4b39      	ldr	r3, [pc, #228]	; (8003bec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	015b      	lsls	r3, r3, #5
 8003b0c:	0d1b      	lsrs	r3, r3, #20
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	fb02 f303 	mul.w	r3, r2, r3
 8003b14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b16:	e054      	b.n	8003bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d050      	beq.n	8003bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b20:	f7fd ffbe 	bl	8001aa0 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d902      	bls.n	8003b36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d13d      	bne.n	8003bb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b4e:	d111      	bne.n	8003b74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b58:	d004      	beq.n	8003b64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b62:	d107      	bne.n	8003b74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7c:	d10f      	bne.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e017      	b.n	8003be2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	bf0c      	ite	eq
 8003bd2:	2301      	moveq	r3, #1
 8003bd4:	2300      	movne	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d19b      	bne.n	8003b18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	2000001c 	.word	0x2000001c

08003bf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <SPI_EndRxTxTransaction+0x7c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <SPI_EndRxTxTransaction+0x80>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	0d5b      	lsrs	r3, r3, #21
 8003c08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c0c:	fb02 f303 	mul.w	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c1a:	d112      	bne.n	8003c42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2200      	movs	r2, #0
 8003c24:	2180      	movs	r1, #128	; 0x80
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f7ff ff5a 	bl	8003ae0 <SPI_WaitFlagStateUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d016      	beq.n	8003c60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	f043 0220 	orr.w	r2, r3, #32
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e00f      	b.n	8003c62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c58:	2b80      	cmp	r3, #128	; 0x80
 8003c5a:	d0f2      	beq.n	8003c42 <SPI_EndRxTxTransaction+0x52>
 8003c5c:	e000      	b.n	8003c60 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c5e:	bf00      	nop
  }

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	2000001c 	.word	0x2000001c
 8003c70:	165e9f81 	.word	0x165e9f81

08003c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e03f      	b.n	8003d06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fd fd46 	bl	800172c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2224      	movs	r2, #36	; 0x24
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f829 	bl	8003d10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d14:	b09f      	sub	sp, #124	; 0x7c
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d26:	68d9      	ldr	r1, [r3, #12]
 8003d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	ea40 0301 	orr.w	r3, r0, r1
 8003d30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d54:	f021 010c 	bic.w	r1, r1, #12
 8003d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6e:	6999      	ldr	r1, [r3, #24]
 8003d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	ea40 0301 	orr.w	r3, r0, r1
 8003d78:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4bc5      	ldr	r3, [pc, #788]	; (8004094 <UART_SetConfig+0x384>)
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d004      	beq.n	8003d8e <UART_SetConfig+0x7e>
 8003d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4bc3      	ldr	r3, [pc, #780]	; (8004098 <UART_SetConfig+0x388>)
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d103      	bne.n	8003d96 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d8e:	f7fe fbb1 	bl	80024f4 <HAL_RCC_GetPCLK2Freq>
 8003d92:	6778      	str	r0, [r7, #116]	; 0x74
 8003d94:	e002      	b.n	8003d9c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d96:	f7fe fb99 	bl	80024cc <HAL_RCC_GetPCLK1Freq>
 8003d9a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da4:	f040 80b6 	bne.w	8003f14 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003daa:	461c      	mov	r4, r3
 8003dac:	f04f 0500 	mov.w	r5, #0
 8003db0:	4622      	mov	r2, r4
 8003db2:	462b      	mov	r3, r5
 8003db4:	1891      	adds	r1, r2, r2
 8003db6:	6439      	str	r1, [r7, #64]	; 0x40
 8003db8:	415b      	adcs	r3, r3
 8003dba:	647b      	str	r3, [r7, #68]	; 0x44
 8003dbc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dc0:	1912      	adds	r2, r2, r4
 8003dc2:	eb45 0303 	adc.w	r3, r5, r3
 8003dc6:	f04f 0000 	mov.w	r0, #0
 8003dca:	f04f 0100 	mov.w	r1, #0
 8003dce:	00d9      	lsls	r1, r3, #3
 8003dd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dd4:	00d0      	lsls	r0, r2, #3
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	1911      	adds	r1, r2, r4
 8003ddc:	6639      	str	r1, [r7, #96]	; 0x60
 8003dde:	416b      	adcs	r3, r5
 8003de0:	667b      	str	r3, [r7, #100]	; 0x64
 8003de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	1891      	adds	r1, r2, r2
 8003dee:	63b9      	str	r1, [r7, #56]	; 0x38
 8003df0:	415b      	adcs	r3, r3
 8003df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003df8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003dfc:	f7fc fa58 	bl	80002b0 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4ba5      	ldr	r3, [pc, #660]	; (800409c <UART_SetConfig+0x38c>)
 8003e06:	fba3 2302 	umull	r2, r3, r3, r2
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	011e      	lsls	r6, r3, #4
 8003e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e10:	461c      	mov	r4, r3
 8003e12:	f04f 0500 	mov.w	r5, #0
 8003e16:	4622      	mov	r2, r4
 8003e18:	462b      	mov	r3, r5
 8003e1a:	1891      	adds	r1, r2, r2
 8003e1c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e1e:	415b      	adcs	r3, r3
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
 8003e22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e26:	1912      	adds	r2, r2, r4
 8003e28:	eb45 0303 	adc.w	r3, r5, r3
 8003e2c:	f04f 0000 	mov.w	r0, #0
 8003e30:	f04f 0100 	mov.w	r1, #0
 8003e34:	00d9      	lsls	r1, r3, #3
 8003e36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e3a:	00d0      	lsls	r0, r2, #3
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	1911      	adds	r1, r2, r4
 8003e42:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e44:	416b      	adcs	r3, r5
 8003e46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	1891      	adds	r1, r2, r2
 8003e54:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e56:	415b      	adcs	r3, r3
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e5e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e62:	f7fc fa25 	bl	80002b0 <__aeabi_uldivmod>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4b8c      	ldr	r3, [pc, #560]	; (800409c <UART_SetConfig+0x38c>)
 8003e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	2164      	movs	r1, #100	; 0x64
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	3332      	adds	r3, #50	; 0x32
 8003e7e:	4a87      	ldr	r2, [pc, #540]	; (800409c <UART_SetConfig+0x38c>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e8c:	441e      	add	r6, r3
 8003e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e90:	4618      	mov	r0, r3
 8003e92:	f04f 0100 	mov.w	r1, #0
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	1894      	adds	r4, r2, r2
 8003e9c:	623c      	str	r4, [r7, #32]
 8003e9e:	415b      	adcs	r3, r3
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ea6:	1812      	adds	r2, r2, r0
 8003ea8:	eb41 0303 	adc.w	r3, r1, r3
 8003eac:	f04f 0400 	mov.w	r4, #0
 8003eb0:	f04f 0500 	mov.w	r5, #0
 8003eb4:	00dd      	lsls	r5, r3, #3
 8003eb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003eba:	00d4      	lsls	r4, r2, #3
 8003ebc:	4622      	mov	r2, r4
 8003ebe:	462b      	mov	r3, r5
 8003ec0:	1814      	adds	r4, r2, r0
 8003ec2:	653c      	str	r4, [r7, #80]	; 0x50
 8003ec4:	414b      	adcs	r3, r1
 8003ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	1891      	adds	r1, r2, r2
 8003ed4:	61b9      	str	r1, [r7, #24]
 8003ed6:	415b      	adcs	r3, r3
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ede:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003ee2:	f7fc f9e5 	bl	80002b0 <__aeabi_uldivmod>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4b6c      	ldr	r3, [pc, #432]	; (800409c <UART_SetConfig+0x38c>)
 8003eec:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	2164      	movs	r1, #100	; 0x64
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	3332      	adds	r3, #50	; 0x32
 8003efe:	4a67      	ldr	r2, [pc, #412]	; (800409c <UART_SetConfig+0x38c>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	f003 0207 	and.w	r2, r3, #7
 8003f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4432      	add	r2, r6
 8003f10:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f12:	e0b9      	b.n	8004088 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f16:	461c      	mov	r4, r3
 8003f18:	f04f 0500 	mov.w	r5, #0
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	462b      	mov	r3, r5
 8003f20:	1891      	adds	r1, r2, r2
 8003f22:	6139      	str	r1, [r7, #16]
 8003f24:	415b      	adcs	r3, r3
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f2c:	1912      	adds	r2, r2, r4
 8003f2e:	eb45 0303 	adc.w	r3, r5, r3
 8003f32:	f04f 0000 	mov.w	r0, #0
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	00d9      	lsls	r1, r3, #3
 8003f3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f40:	00d0      	lsls	r0, r2, #3
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	eb12 0804 	adds.w	r8, r2, r4
 8003f4a:	eb43 0905 	adc.w	r9, r3, r5
 8003f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f04f 0100 	mov.w	r1, #0
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	008b      	lsls	r3, r1, #2
 8003f62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f66:	0082      	lsls	r2, r0, #2
 8003f68:	4640      	mov	r0, r8
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	f7fc f9a0 	bl	80002b0 <__aeabi_uldivmod>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4b49      	ldr	r3, [pc, #292]	; (800409c <UART_SetConfig+0x38c>)
 8003f76:	fba3 2302 	umull	r2, r3, r3, r2
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	011e      	lsls	r6, r3, #4
 8003f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f80:	4618      	mov	r0, r3
 8003f82:	f04f 0100 	mov.w	r1, #0
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	1894      	adds	r4, r2, r2
 8003f8c:	60bc      	str	r4, [r7, #8]
 8003f8e:	415b      	adcs	r3, r3
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f96:	1812      	adds	r2, r2, r0
 8003f98:	eb41 0303 	adc.w	r3, r1, r3
 8003f9c:	f04f 0400 	mov.w	r4, #0
 8003fa0:	f04f 0500 	mov.w	r5, #0
 8003fa4:	00dd      	lsls	r5, r3, #3
 8003fa6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003faa:	00d4      	lsls	r4, r2, #3
 8003fac:	4622      	mov	r2, r4
 8003fae:	462b      	mov	r3, r5
 8003fb0:	1814      	adds	r4, r2, r0
 8003fb2:	64bc      	str	r4, [r7, #72]	; 0x48
 8003fb4:	414b      	adcs	r3, r1
 8003fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f04f 0100 	mov.w	r1, #0
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	008b      	lsls	r3, r1, #2
 8003fcc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fd0:	0082      	lsls	r2, r0, #2
 8003fd2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003fd6:	f7fc f96b 	bl	80002b0 <__aeabi_uldivmod>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4b2f      	ldr	r3, [pc, #188]	; (800409c <UART_SetConfig+0x38c>)
 8003fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	2164      	movs	r1, #100	; 0x64
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	3332      	adds	r3, #50	; 0x32
 8003ff2:	4a2a      	ldr	r2, [pc, #168]	; (800409c <UART_SetConfig+0x38c>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ffe:	441e      	add	r6, r3
 8004000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004002:	4618      	mov	r0, r3
 8004004:	f04f 0100 	mov.w	r1, #0
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	1894      	adds	r4, r2, r2
 800400e:	603c      	str	r4, [r7, #0]
 8004010:	415b      	adcs	r3, r3
 8004012:	607b      	str	r3, [r7, #4]
 8004014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004018:	1812      	adds	r2, r2, r0
 800401a:	eb41 0303 	adc.w	r3, r1, r3
 800401e:	f04f 0400 	mov.w	r4, #0
 8004022:	f04f 0500 	mov.w	r5, #0
 8004026:	00dd      	lsls	r5, r3, #3
 8004028:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800402c:	00d4      	lsls	r4, r2, #3
 800402e:	4622      	mov	r2, r4
 8004030:	462b      	mov	r3, r5
 8004032:	eb12 0a00 	adds.w	sl, r2, r0
 8004036:	eb43 0b01 	adc.w	fp, r3, r1
 800403a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4618      	mov	r0, r3
 8004040:	f04f 0100 	mov.w	r1, #0
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	008b      	lsls	r3, r1, #2
 800404e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004052:	0082      	lsls	r2, r0, #2
 8004054:	4650      	mov	r0, sl
 8004056:	4659      	mov	r1, fp
 8004058:	f7fc f92a 	bl	80002b0 <__aeabi_uldivmod>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4b0e      	ldr	r3, [pc, #56]	; (800409c <UART_SetConfig+0x38c>)
 8004062:	fba3 1302 	umull	r1, r3, r3, r2
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	2164      	movs	r1, #100	; 0x64
 800406a:	fb01 f303 	mul.w	r3, r1, r3
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	3332      	adds	r3, #50	; 0x32
 8004074:	4a09      	ldr	r2, [pc, #36]	; (800409c <UART_SetConfig+0x38c>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	f003 020f 	and.w	r2, r3, #15
 8004080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4432      	add	r2, r6
 8004086:	609a      	str	r2, [r3, #8]
}
 8004088:	bf00      	nop
 800408a:	377c      	adds	r7, #124	; 0x7c
 800408c:	46bd      	mov	sp, r7
 800408e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004092:	bf00      	nop
 8004094:	40011000 	.word	0x40011000
 8004098:	40011400 	.word	0x40011400
 800409c:	51eb851f 	.word	0x51eb851f

080040a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040a0:	b084      	sub	sp, #16
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	f107 001c 	add.w	r0, r7, #28
 80040ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d122      	bne.n	80040fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80040cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d105      	bne.n	80040f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fa7c 	bl	80045f0 <USB_CoreReset>
 80040f8:	4603      	mov	r3, r0
 80040fa:	73fb      	strb	r3, [r7, #15]
 80040fc:	e01a      	b.n	8004134 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fa70 	bl	80045f0 <USB_CoreReset>
 8004110:	4603      	mov	r3, r0
 8004112:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d106      	bne.n	8004128 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	639a      	str	r2, [r3, #56]	; 0x38
 8004126:	e005      	b.n	8004134 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004136:	2b01      	cmp	r3, #1
 8004138:	d10b      	bne.n	8004152 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f043 0206 	orr.w	r2, r3, #6
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004152:	7bfb      	ldrb	r3, [r7, #15]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800415e:	b004      	add	sp, #16
 8004160:	4770      	bx	lr

08004162 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f023 0201 	bic.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d115      	bne.n	80041d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041b2:	2001      	movs	r0, #1
 80041b4:	f7fd fc80 	bl	8001ab8 <HAL_Delay>
      ms++;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3301      	adds	r3, #1
 80041bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fa08 	bl	80045d4 <USB_GetMode>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d01e      	beq.n	8004208 <USB_SetCurrentMode+0x84>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b31      	cmp	r3, #49	; 0x31
 80041ce:	d9f0      	bls.n	80041b2 <USB_SetCurrentMode+0x2e>
 80041d0:	e01a      	b.n	8004208 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d115      	bne.n	8004204 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041e4:	2001      	movs	r0, #1
 80041e6:	f7fd fc67 	bl	8001ab8 <HAL_Delay>
      ms++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3301      	adds	r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f9ef 	bl	80045d4 <USB_GetMode>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <USB_SetCurrentMode+0x84>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b31      	cmp	r3, #49	; 0x31
 8004200:	d9f0      	bls.n	80041e4 <USB_SetCurrentMode+0x60>
 8004202:	e001      	b.n	8004208 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e005      	b.n	8004214 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b32      	cmp	r3, #50	; 0x32
 800420c:	d101      	bne.n	8004212 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800421c:	b084      	sub	sp, #16
 800421e:	b580      	push	{r7, lr}
 8004220:	b086      	sub	sp, #24
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800422a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004236:	2300      	movs	r3, #0
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	e009      	b.n	8004250 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	3340      	adds	r3, #64	; 0x40
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	2200      	movs	r2, #0
 8004248:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3301      	adds	r3, #1
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b0e      	cmp	r3, #14
 8004254:	d9f2      	bls.n	800423c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004258:	2b00      	cmp	r3, #0
 800425a:	d11c      	bne.n	8004296 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800426a:	f043 0302 	orr.w	r3, r3, #2
 800426e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	e005      	b.n	80042a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042a8:	461a      	mov	r2, r3
 80042aa:	2300      	movs	r3, #0
 80042ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b4:	4619      	mov	r1, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042bc:	461a      	mov	r2, r3
 80042be:	680b      	ldr	r3, [r1, #0]
 80042c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d10c      	bne.n	80042e2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d104      	bne.n	80042d8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042ce:	2100      	movs	r1, #0
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f945 	bl	8004560 <USB_SetDevSpeed>
 80042d6:	e008      	b.n	80042ea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042d8:	2101      	movs	r1, #1
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f940 	bl	8004560 <USB_SetDevSpeed>
 80042e0:	e003      	b.n	80042ea <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042e2:	2103      	movs	r1, #3
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f93b 	bl	8004560 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042ea:	2110      	movs	r1, #16
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f8f3 	bl	80044d8 <USB_FlushTxFifo>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f90f 	bl	8004520 <USB_FlushRxFifo>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004312:	461a      	mov	r2, r3
 8004314:	2300      	movs	r3, #0
 8004316:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431e:	461a      	mov	r2, r3
 8004320:	2300      	movs	r3, #0
 8004322:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432a:	461a      	mov	r2, r3
 800432c:	2300      	movs	r3, #0
 800432e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004330:	2300      	movs	r3, #0
 8004332:	613b      	str	r3, [r7, #16]
 8004334:	e043      	b.n	80043be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800434c:	d118      	bne.n	8004380 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004360:	461a      	mov	r2, r3
 8004362:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	e013      	b.n	8004392 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004376:	461a      	mov	r2, r3
 8004378:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	e008      	b.n	8004392 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438c:	461a      	mov	r2, r3
 800438e:	2300      	movs	r3, #0
 8004390:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439e:	461a      	mov	r2, r3
 80043a0:	2300      	movs	r3, #0
 80043a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b0:	461a      	mov	r2, r3
 80043b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	3301      	adds	r3, #1
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d3b7      	bcc.n	8004336 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043c6:	2300      	movs	r3, #0
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	e043      	b.n	8004454 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043e2:	d118      	bne.n	8004416 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f6:	461a      	mov	r2, r3
 80043f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	e013      	b.n	8004428 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440c:	461a      	mov	r2, r3
 800440e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	e008      	b.n	8004428 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004422:	461a      	mov	r2, r3
 8004424:	2300      	movs	r3, #0
 8004426:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004434:	461a      	mov	r2, r3
 8004436:	2300      	movs	r3, #0
 8004438:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004446:	461a      	mov	r2, r3
 8004448:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800444c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	3301      	adds	r3, #1
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	429a      	cmp	r2, r3
 800445a:	d3b7      	bcc.n	80043cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800446a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800446e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800447c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	2b00      	cmp	r3, #0
 8004482:	d105      	bne.n	8004490 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f043 0210 	orr.w	r2, r3, #16
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699a      	ldr	r2, [r3, #24]
 8004494:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <USB_DevInit+0x2b8>)
 8004496:	4313      	orrs	r3, r2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800449c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f043 0208 	orr.w	r2, r3, #8
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d107      	bne.n	80044c4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044d0:	b004      	add	sp, #16
 80044d2:	4770      	bx	lr
 80044d4:	803c3800 	.word	0x803c3800

080044d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	019b      	lsls	r3, r3, #6
 80044ea:	f043 0220 	orr.w	r2, r3, #32
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3301      	adds	r3, #1
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	4a08      	ldr	r2, [pc, #32]	; (800451c <USB_FlushTxFifo+0x44>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e006      	b.n	8004510 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b20      	cmp	r3, #32
 800450c:	d0f1      	beq.n	80044f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	00030d40 	.word	0x00030d40

08004520 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2210      	movs	r2, #16
 8004530:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3301      	adds	r3, #1
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	4a08      	ldr	r2, [pc, #32]	; (800455c <USB_FlushRxFifo+0x3c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e006      	b.n	8004550 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b10      	cmp	r3, #16
 800454c:	d0f1      	beq.n	8004532 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	00030d40 	.word	0x00030d40

08004560 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	68f9      	ldr	r1, [r7, #12]
 800457c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004580:	4313      	orrs	r3, r2
 8004582:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80045ac:	f023 0303 	bic.w	r3, r3, #3
 80045b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045c0:	f043 0302 	orr.w	r3, r3, #2
 80045c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0301 	and.w	r3, r3, #1
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3301      	adds	r3, #1
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	4a13      	ldr	r2, [pc, #76]	; (8004650 <USB_CoreReset+0x60>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d901      	bls.n	800460c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e01a      	b.n	8004642 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	daf3      	bge.n	80045fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f043 0201 	orr.w	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3301      	adds	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	4a09      	ldr	r2, [pc, #36]	; (8004650 <USB_CoreReset+0x60>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d901      	bls.n	8004634 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e006      	b.n	8004642 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d0f1      	beq.n	8004624 <USB_CoreReset+0x34>

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	00030d40 	.word	0x00030d40

08004654 <__errno>:
 8004654:	4b01      	ldr	r3, [pc, #4]	; (800465c <__errno+0x8>)
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20000028 	.word	0x20000028

08004660 <__libc_init_array>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	4d0d      	ldr	r5, [pc, #52]	; (8004698 <__libc_init_array+0x38>)
 8004664:	4c0d      	ldr	r4, [pc, #52]	; (800469c <__libc_init_array+0x3c>)
 8004666:	1b64      	subs	r4, r4, r5
 8004668:	10a4      	asrs	r4, r4, #2
 800466a:	2600      	movs	r6, #0
 800466c:	42a6      	cmp	r6, r4
 800466e:	d109      	bne.n	8004684 <__libc_init_array+0x24>
 8004670:	4d0b      	ldr	r5, [pc, #44]	; (80046a0 <__libc_init_array+0x40>)
 8004672:	4c0c      	ldr	r4, [pc, #48]	; (80046a4 <__libc_init_array+0x44>)
 8004674:	f000 fc5e 	bl	8004f34 <_init>
 8004678:	1b64      	subs	r4, r4, r5
 800467a:	10a4      	asrs	r4, r4, #2
 800467c:	2600      	movs	r6, #0
 800467e:	42a6      	cmp	r6, r4
 8004680:	d105      	bne.n	800468e <__libc_init_array+0x2e>
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	f855 3b04 	ldr.w	r3, [r5], #4
 8004688:	4798      	blx	r3
 800468a:	3601      	adds	r6, #1
 800468c:	e7ee      	b.n	800466c <__libc_init_array+0xc>
 800468e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004692:	4798      	blx	r3
 8004694:	3601      	adds	r6, #1
 8004696:	e7f2      	b.n	800467e <__libc_init_array+0x1e>
 8004698:	0800503c 	.word	0x0800503c
 800469c:	0800503c 	.word	0x0800503c
 80046a0:	0800503c 	.word	0x0800503c
 80046a4:	08005040 	.word	0x08005040

080046a8 <malloc>:
 80046a8:	4b02      	ldr	r3, [pc, #8]	; (80046b4 <malloc+0xc>)
 80046aa:	4601      	mov	r1, r0
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	f000 b871 	b.w	8004794 <_malloc_r>
 80046b2:	bf00      	nop
 80046b4:	20000028 	.word	0x20000028

080046b8 <free>:
 80046b8:	4b02      	ldr	r3, [pc, #8]	; (80046c4 <free+0xc>)
 80046ba:	4601      	mov	r1, r0
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	f000 b819 	b.w	80046f4 <_free_r>
 80046c2:	bf00      	nop
 80046c4:	20000028 	.word	0x20000028

080046c8 <memcpy>:
 80046c8:	440a      	add	r2, r1
 80046ca:	4291      	cmp	r1, r2
 80046cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80046d0:	d100      	bne.n	80046d4 <memcpy+0xc>
 80046d2:	4770      	bx	lr
 80046d4:	b510      	push	{r4, lr}
 80046d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046de:	4291      	cmp	r1, r2
 80046e0:	d1f9      	bne.n	80046d6 <memcpy+0xe>
 80046e2:	bd10      	pop	{r4, pc}

080046e4 <memset>:
 80046e4:	4402      	add	r2, r0
 80046e6:	4603      	mov	r3, r0
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d100      	bne.n	80046ee <memset+0xa>
 80046ec:	4770      	bx	lr
 80046ee:	f803 1b01 	strb.w	r1, [r3], #1
 80046f2:	e7f9      	b.n	80046e8 <memset+0x4>

080046f4 <_free_r>:
 80046f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046f6:	2900      	cmp	r1, #0
 80046f8:	d048      	beq.n	800478c <_free_r+0x98>
 80046fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046fe:	9001      	str	r0, [sp, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	f1a1 0404 	sub.w	r4, r1, #4
 8004706:	bfb8      	it	lt
 8004708:	18e4      	addlt	r4, r4, r3
 800470a:	f000 f8cd 	bl	80048a8 <__malloc_lock>
 800470e:	4a20      	ldr	r2, [pc, #128]	; (8004790 <_free_r+0x9c>)
 8004710:	9801      	ldr	r0, [sp, #4]
 8004712:	6813      	ldr	r3, [r2, #0]
 8004714:	4615      	mov	r5, r2
 8004716:	b933      	cbnz	r3, 8004726 <_free_r+0x32>
 8004718:	6063      	str	r3, [r4, #4]
 800471a:	6014      	str	r4, [r2, #0]
 800471c:	b003      	add	sp, #12
 800471e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004722:	f000 b8c7 	b.w	80048b4 <__malloc_unlock>
 8004726:	42a3      	cmp	r3, r4
 8004728:	d90b      	bls.n	8004742 <_free_r+0x4e>
 800472a:	6821      	ldr	r1, [r4, #0]
 800472c:	1862      	adds	r2, r4, r1
 800472e:	4293      	cmp	r3, r2
 8004730:	bf04      	itt	eq
 8004732:	681a      	ldreq	r2, [r3, #0]
 8004734:	685b      	ldreq	r3, [r3, #4]
 8004736:	6063      	str	r3, [r4, #4]
 8004738:	bf04      	itt	eq
 800473a:	1852      	addeq	r2, r2, r1
 800473c:	6022      	streq	r2, [r4, #0]
 800473e:	602c      	str	r4, [r5, #0]
 8004740:	e7ec      	b.n	800471c <_free_r+0x28>
 8004742:	461a      	mov	r2, r3
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	b10b      	cbz	r3, 800474c <_free_r+0x58>
 8004748:	42a3      	cmp	r3, r4
 800474a:	d9fa      	bls.n	8004742 <_free_r+0x4e>
 800474c:	6811      	ldr	r1, [r2, #0]
 800474e:	1855      	adds	r5, r2, r1
 8004750:	42a5      	cmp	r5, r4
 8004752:	d10b      	bne.n	800476c <_free_r+0x78>
 8004754:	6824      	ldr	r4, [r4, #0]
 8004756:	4421      	add	r1, r4
 8004758:	1854      	adds	r4, r2, r1
 800475a:	42a3      	cmp	r3, r4
 800475c:	6011      	str	r1, [r2, #0]
 800475e:	d1dd      	bne.n	800471c <_free_r+0x28>
 8004760:	681c      	ldr	r4, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	6053      	str	r3, [r2, #4]
 8004766:	4421      	add	r1, r4
 8004768:	6011      	str	r1, [r2, #0]
 800476a:	e7d7      	b.n	800471c <_free_r+0x28>
 800476c:	d902      	bls.n	8004774 <_free_r+0x80>
 800476e:	230c      	movs	r3, #12
 8004770:	6003      	str	r3, [r0, #0]
 8004772:	e7d3      	b.n	800471c <_free_r+0x28>
 8004774:	6825      	ldr	r5, [r4, #0]
 8004776:	1961      	adds	r1, r4, r5
 8004778:	428b      	cmp	r3, r1
 800477a:	bf04      	itt	eq
 800477c:	6819      	ldreq	r1, [r3, #0]
 800477e:	685b      	ldreq	r3, [r3, #4]
 8004780:	6063      	str	r3, [r4, #4]
 8004782:	bf04      	itt	eq
 8004784:	1949      	addeq	r1, r1, r5
 8004786:	6021      	streq	r1, [r4, #0]
 8004788:	6054      	str	r4, [r2, #4]
 800478a:	e7c7      	b.n	800471c <_free_r+0x28>
 800478c:	b003      	add	sp, #12
 800478e:	bd30      	pop	{r4, r5, pc}
 8004790:	20000130 	.word	0x20000130

08004794 <_malloc_r>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	1ccd      	adds	r5, r1, #3
 8004798:	f025 0503 	bic.w	r5, r5, #3
 800479c:	3508      	adds	r5, #8
 800479e:	2d0c      	cmp	r5, #12
 80047a0:	bf38      	it	cc
 80047a2:	250c      	movcc	r5, #12
 80047a4:	2d00      	cmp	r5, #0
 80047a6:	4606      	mov	r6, r0
 80047a8:	db01      	blt.n	80047ae <_malloc_r+0x1a>
 80047aa:	42a9      	cmp	r1, r5
 80047ac:	d903      	bls.n	80047b6 <_malloc_r+0x22>
 80047ae:	230c      	movs	r3, #12
 80047b0:	6033      	str	r3, [r6, #0]
 80047b2:	2000      	movs	r0, #0
 80047b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b6:	f000 f877 	bl	80048a8 <__malloc_lock>
 80047ba:	4921      	ldr	r1, [pc, #132]	; (8004840 <_malloc_r+0xac>)
 80047bc:	680a      	ldr	r2, [r1, #0]
 80047be:	4614      	mov	r4, r2
 80047c0:	b99c      	cbnz	r4, 80047ea <_malloc_r+0x56>
 80047c2:	4f20      	ldr	r7, [pc, #128]	; (8004844 <_malloc_r+0xb0>)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	b923      	cbnz	r3, 80047d2 <_malloc_r+0x3e>
 80047c8:	4621      	mov	r1, r4
 80047ca:	4630      	mov	r0, r6
 80047cc:	f000 f83c 	bl	8004848 <_sbrk_r>
 80047d0:	6038      	str	r0, [r7, #0]
 80047d2:	4629      	mov	r1, r5
 80047d4:	4630      	mov	r0, r6
 80047d6:	f000 f837 	bl	8004848 <_sbrk_r>
 80047da:	1c43      	adds	r3, r0, #1
 80047dc:	d123      	bne.n	8004826 <_malloc_r+0x92>
 80047de:	230c      	movs	r3, #12
 80047e0:	6033      	str	r3, [r6, #0]
 80047e2:	4630      	mov	r0, r6
 80047e4:	f000 f866 	bl	80048b4 <__malloc_unlock>
 80047e8:	e7e3      	b.n	80047b2 <_malloc_r+0x1e>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	1b5b      	subs	r3, r3, r5
 80047ee:	d417      	bmi.n	8004820 <_malloc_r+0x8c>
 80047f0:	2b0b      	cmp	r3, #11
 80047f2:	d903      	bls.n	80047fc <_malloc_r+0x68>
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	441c      	add	r4, r3
 80047f8:	6025      	str	r5, [r4, #0]
 80047fa:	e004      	b.n	8004806 <_malloc_r+0x72>
 80047fc:	6863      	ldr	r3, [r4, #4]
 80047fe:	42a2      	cmp	r2, r4
 8004800:	bf0c      	ite	eq
 8004802:	600b      	streq	r3, [r1, #0]
 8004804:	6053      	strne	r3, [r2, #4]
 8004806:	4630      	mov	r0, r6
 8004808:	f000 f854 	bl	80048b4 <__malloc_unlock>
 800480c:	f104 000b 	add.w	r0, r4, #11
 8004810:	1d23      	adds	r3, r4, #4
 8004812:	f020 0007 	bic.w	r0, r0, #7
 8004816:	1ac2      	subs	r2, r0, r3
 8004818:	d0cc      	beq.n	80047b4 <_malloc_r+0x20>
 800481a:	1a1b      	subs	r3, r3, r0
 800481c:	50a3      	str	r3, [r4, r2]
 800481e:	e7c9      	b.n	80047b4 <_malloc_r+0x20>
 8004820:	4622      	mov	r2, r4
 8004822:	6864      	ldr	r4, [r4, #4]
 8004824:	e7cc      	b.n	80047c0 <_malloc_r+0x2c>
 8004826:	1cc4      	adds	r4, r0, #3
 8004828:	f024 0403 	bic.w	r4, r4, #3
 800482c:	42a0      	cmp	r0, r4
 800482e:	d0e3      	beq.n	80047f8 <_malloc_r+0x64>
 8004830:	1a21      	subs	r1, r4, r0
 8004832:	4630      	mov	r0, r6
 8004834:	f000 f808 	bl	8004848 <_sbrk_r>
 8004838:	3001      	adds	r0, #1
 800483a:	d1dd      	bne.n	80047f8 <_malloc_r+0x64>
 800483c:	e7cf      	b.n	80047de <_malloc_r+0x4a>
 800483e:	bf00      	nop
 8004840:	20000130 	.word	0x20000130
 8004844:	20000134 	.word	0x20000134

08004848 <_sbrk_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4d06      	ldr	r5, [pc, #24]	; (8004864 <_sbrk_r+0x1c>)
 800484c:	2300      	movs	r3, #0
 800484e:	4604      	mov	r4, r0
 8004850:	4608      	mov	r0, r1
 8004852:	602b      	str	r3, [r5, #0]
 8004854:	f7fd f84c 	bl	80018f0 <_sbrk>
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	d102      	bne.n	8004862 <_sbrk_r+0x1a>
 800485c:	682b      	ldr	r3, [r5, #0]
 800485e:	b103      	cbz	r3, 8004862 <_sbrk_r+0x1a>
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	bd38      	pop	{r3, r4, r5, pc}
 8004864:	2000065c 	.word	0x2000065c

08004868 <siprintf>:
 8004868:	b40e      	push	{r1, r2, r3}
 800486a:	b500      	push	{lr}
 800486c:	b09c      	sub	sp, #112	; 0x70
 800486e:	ab1d      	add	r3, sp, #116	; 0x74
 8004870:	9002      	str	r0, [sp, #8]
 8004872:	9006      	str	r0, [sp, #24]
 8004874:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004878:	4809      	ldr	r0, [pc, #36]	; (80048a0 <siprintf+0x38>)
 800487a:	9107      	str	r1, [sp, #28]
 800487c:	9104      	str	r1, [sp, #16]
 800487e:	4909      	ldr	r1, [pc, #36]	; (80048a4 <siprintf+0x3c>)
 8004880:	f853 2b04 	ldr.w	r2, [r3], #4
 8004884:	9105      	str	r1, [sp, #20]
 8004886:	6800      	ldr	r0, [r0, #0]
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	a902      	add	r1, sp, #8
 800488c:	f000 f874 	bl	8004978 <_svfiprintf_r>
 8004890:	9b02      	ldr	r3, [sp, #8]
 8004892:	2200      	movs	r2, #0
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	b01c      	add	sp, #112	; 0x70
 8004898:	f85d eb04 	ldr.w	lr, [sp], #4
 800489c:	b003      	add	sp, #12
 800489e:	4770      	bx	lr
 80048a0:	20000028 	.word	0x20000028
 80048a4:	ffff0208 	.word	0xffff0208

080048a8 <__malloc_lock>:
 80048a8:	4801      	ldr	r0, [pc, #4]	; (80048b0 <__malloc_lock+0x8>)
 80048aa:	f000 baf9 	b.w	8004ea0 <__retarget_lock_acquire_recursive>
 80048ae:	bf00      	nop
 80048b0:	20000664 	.word	0x20000664

080048b4 <__malloc_unlock>:
 80048b4:	4801      	ldr	r0, [pc, #4]	; (80048bc <__malloc_unlock+0x8>)
 80048b6:	f000 baf4 	b.w	8004ea2 <__retarget_lock_release_recursive>
 80048ba:	bf00      	nop
 80048bc:	20000664 	.word	0x20000664

080048c0 <__ssputs_r>:
 80048c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c4:	688e      	ldr	r6, [r1, #8]
 80048c6:	429e      	cmp	r6, r3
 80048c8:	4682      	mov	sl, r0
 80048ca:	460c      	mov	r4, r1
 80048cc:	4690      	mov	r8, r2
 80048ce:	461f      	mov	r7, r3
 80048d0:	d838      	bhi.n	8004944 <__ssputs_r+0x84>
 80048d2:	898a      	ldrh	r2, [r1, #12]
 80048d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048d8:	d032      	beq.n	8004940 <__ssputs_r+0x80>
 80048da:	6825      	ldr	r5, [r4, #0]
 80048dc:	6909      	ldr	r1, [r1, #16]
 80048de:	eba5 0901 	sub.w	r9, r5, r1
 80048e2:	6965      	ldr	r5, [r4, #20]
 80048e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048ec:	3301      	adds	r3, #1
 80048ee:	444b      	add	r3, r9
 80048f0:	106d      	asrs	r5, r5, #1
 80048f2:	429d      	cmp	r5, r3
 80048f4:	bf38      	it	cc
 80048f6:	461d      	movcc	r5, r3
 80048f8:	0553      	lsls	r3, r2, #21
 80048fa:	d531      	bpl.n	8004960 <__ssputs_r+0xa0>
 80048fc:	4629      	mov	r1, r5
 80048fe:	f7ff ff49 	bl	8004794 <_malloc_r>
 8004902:	4606      	mov	r6, r0
 8004904:	b950      	cbnz	r0, 800491c <__ssputs_r+0x5c>
 8004906:	230c      	movs	r3, #12
 8004908:	f8ca 3000 	str.w	r3, [sl]
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004912:	81a3      	strh	r3, [r4, #12]
 8004914:	f04f 30ff 	mov.w	r0, #4294967295
 8004918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800491c:	6921      	ldr	r1, [r4, #16]
 800491e:	464a      	mov	r2, r9
 8004920:	f7ff fed2 	bl	80046c8 <memcpy>
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800492a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492e:	81a3      	strh	r3, [r4, #12]
 8004930:	6126      	str	r6, [r4, #16]
 8004932:	6165      	str	r5, [r4, #20]
 8004934:	444e      	add	r6, r9
 8004936:	eba5 0509 	sub.w	r5, r5, r9
 800493a:	6026      	str	r6, [r4, #0]
 800493c:	60a5      	str	r5, [r4, #8]
 800493e:	463e      	mov	r6, r7
 8004940:	42be      	cmp	r6, r7
 8004942:	d900      	bls.n	8004946 <__ssputs_r+0x86>
 8004944:	463e      	mov	r6, r7
 8004946:	4632      	mov	r2, r6
 8004948:	6820      	ldr	r0, [r4, #0]
 800494a:	4641      	mov	r1, r8
 800494c:	f000 faaa 	bl	8004ea4 <memmove>
 8004950:	68a3      	ldr	r3, [r4, #8]
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	1b9b      	subs	r3, r3, r6
 8004956:	4432      	add	r2, r6
 8004958:	60a3      	str	r3, [r4, #8]
 800495a:	6022      	str	r2, [r4, #0]
 800495c:	2000      	movs	r0, #0
 800495e:	e7db      	b.n	8004918 <__ssputs_r+0x58>
 8004960:	462a      	mov	r2, r5
 8004962:	f000 fab9 	bl	8004ed8 <_realloc_r>
 8004966:	4606      	mov	r6, r0
 8004968:	2800      	cmp	r0, #0
 800496a:	d1e1      	bne.n	8004930 <__ssputs_r+0x70>
 800496c:	6921      	ldr	r1, [r4, #16]
 800496e:	4650      	mov	r0, sl
 8004970:	f7ff fec0 	bl	80046f4 <_free_r>
 8004974:	e7c7      	b.n	8004906 <__ssputs_r+0x46>
	...

08004978 <_svfiprintf_r>:
 8004978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497c:	4698      	mov	r8, r3
 800497e:	898b      	ldrh	r3, [r1, #12]
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	b09d      	sub	sp, #116	; 0x74
 8004984:	4607      	mov	r7, r0
 8004986:	460d      	mov	r5, r1
 8004988:	4614      	mov	r4, r2
 800498a:	d50e      	bpl.n	80049aa <_svfiprintf_r+0x32>
 800498c:	690b      	ldr	r3, [r1, #16]
 800498e:	b963      	cbnz	r3, 80049aa <_svfiprintf_r+0x32>
 8004990:	2140      	movs	r1, #64	; 0x40
 8004992:	f7ff feff 	bl	8004794 <_malloc_r>
 8004996:	6028      	str	r0, [r5, #0]
 8004998:	6128      	str	r0, [r5, #16]
 800499a:	b920      	cbnz	r0, 80049a6 <_svfiprintf_r+0x2e>
 800499c:	230c      	movs	r3, #12
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	e0d1      	b.n	8004b4a <_svfiprintf_r+0x1d2>
 80049a6:	2340      	movs	r3, #64	; 0x40
 80049a8:	616b      	str	r3, [r5, #20]
 80049aa:	2300      	movs	r3, #0
 80049ac:	9309      	str	r3, [sp, #36]	; 0x24
 80049ae:	2320      	movs	r3, #32
 80049b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80049b8:	2330      	movs	r3, #48	; 0x30
 80049ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b64 <_svfiprintf_r+0x1ec>
 80049be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049c2:	f04f 0901 	mov.w	r9, #1
 80049c6:	4623      	mov	r3, r4
 80049c8:	469a      	mov	sl, r3
 80049ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049ce:	b10a      	cbz	r2, 80049d4 <_svfiprintf_r+0x5c>
 80049d0:	2a25      	cmp	r2, #37	; 0x25
 80049d2:	d1f9      	bne.n	80049c8 <_svfiprintf_r+0x50>
 80049d4:	ebba 0b04 	subs.w	fp, sl, r4
 80049d8:	d00b      	beq.n	80049f2 <_svfiprintf_r+0x7a>
 80049da:	465b      	mov	r3, fp
 80049dc:	4622      	mov	r2, r4
 80049de:	4629      	mov	r1, r5
 80049e0:	4638      	mov	r0, r7
 80049e2:	f7ff ff6d 	bl	80048c0 <__ssputs_r>
 80049e6:	3001      	adds	r0, #1
 80049e8:	f000 80aa 	beq.w	8004b40 <_svfiprintf_r+0x1c8>
 80049ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049ee:	445a      	add	r2, fp
 80049f0:	9209      	str	r2, [sp, #36]	; 0x24
 80049f2:	f89a 3000 	ldrb.w	r3, [sl]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 80a2 	beq.w	8004b40 <_svfiprintf_r+0x1c8>
 80049fc:	2300      	movs	r3, #0
 80049fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a06:	f10a 0a01 	add.w	sl, sl, #1
 8004a0a:	9304      	str	r3, [sp, #16]
 8004a0c:	9307      	str	r3, [sp, #28]
 8004a0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a12:	931a      	str	r3, [sp, #104]	; 0x68
 8004a14:	4654      	mov	r4, sl
 8004a16:	2205      	movs	r2, #5
 8004a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a1c:	4851      	ldr	r0, [pc, #324]	; (8004b64 <_svfiprintf_r+0x1ec>)
 8004a1e:	f7fb fbf7 	bl	8000210 <memchr>
 8004a22:	9a04      	ldr	r2, [sp, #16]
 8004a24:	b9d8      	cbnz	r0, 8004a5e <_svfiprintf_r+0xe6>
 8004a26:	06d0      	lsls	r0, r2, #27
 8004a28:	bf44      	itt	mi
 8004a2a:	2320      	movmi	r3, #32
 8004a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a30:	0711      	lsls	r1, r2, #28
 8004a32:	bf44      	itt	mi
 8004a34:	232b      	movmi	r3, #43	; 0x2b
 8004a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a40:	d015      	beq.n	8004a6e <_svfiprintf_r+0xf6>
 8004a42:	9a07      	ldr	r2, [sp, #28]
 8004a44:	4654      	mov	r4, sl
 8004a46:	2000      	movs	r0, #0
 8004a48:	f04f 0c0a 	mov.w	ip, #10
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a52:	3b30      	subs	r3, #48	; 0x30
 8004a54:	2b09      	cmp	r3, #9
 8004a56:	d94e      	bls.n	8004af6 <_svfiprintf_r+0x17e>
 8004a58:	b1b0      	cbz	r0, 8004a88 <_svfiprintf_r+0x110>
 8004a5a:	9207      	str	r2, [sp, #28]
 8004a5c:	e014      	b.n	8004a88 <_svfiprintf_r+0x110>
 8004a5e:	eba0 0308 	sub.w	r3, r0, r8
 8004a62:	fa09 f303 	lsl.w	r3, r9, r3
 8004a66:	4313      	orrs	r3, r2
 8004a68:	9304      	str	r3, [sp, #16]
 8004a6a:	46a2      	mov	sl, r4
 8004a6c:	e7d2      	b.n	8004a14 <_svfiprintf_r+0x9c>
 8004a6e:	9b03      	ldr	r3, [sp, #12]
 8004a70:	1d19      	adds	r1, r3, #4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	9103      	str	r1, [sp, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bfbb      	ittet	lt
 8004a7a:	425b      	neglt	r3, r3
 8004a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a80:	9307      	strge	r3, [sp, #28]
 8004a82:	9307      	strlt	r3, [sp, #28]
 8004a84:	bfb8      	it	lt
 8004a86:	9204      	strlt	r2, [sp, #16]
 8004a88:	7823      	ldrb	r3, [r4, #0]
 8004a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a8c:	d10c      	bne.n	8004aa8 <_svfiprintf_r+0x130>
 8004a8e:	7863      	ldrb	r3, [r4, #1]
 8004a90:	2b2a      	cmp	r3, #42	; 0x2a
 8004a92:	d135      	bne.n	8004b00 <_svfiprintf_r+0x188>
 8004a94:	9b03      	ldr	r3, [sp, #12]
 8004a96:	1d1a      	adds	r2, r3, #4
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	9203      	str	r2, [sp, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bfb8      	it	lt
 8004aa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004aa4:	3402      	adds	r4, #2
 8004aa6:	9305      	str	r3, [sp, #20]
 8004aa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b74 <_svfiprintf_r+0x1fc>
 8004aac:	7821      	ldrb	r1, [r4, #0]
 8004aae:	2203      	movs	r2, #3
 8004ab0:	4650      	mov	r0, sl
 8004ab2:	f7fb fbad 	bl	8000210 <memchr>
 8004ab6:	b140      	cbz	r0, 8004aca <_svfiprintf_r+0x152>
 8004ab8:	2340      	movs	r3, #64	; 0x40
 8004aba:	eba0 000a 	sub.w	r0, r0, sl
 8004abe:	fa03 f000 	lsl.w	r0, r3, r0
 8004ac2:	9b04      	ldr	r3, [sp, #16]
 8004ac4:	4303      	orrs	r3, r0
 8004ac6:	3401      	adds	r4, #1
 8004ac8:	9304      	str	r3, [sp, #16]
 8004aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ace:	4826      	ldr	r0, [pc, #152]	; (8004b68 <_svfiprintf_r+0x1f0>)
 8004ad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ad4:	2206      	movs	r2, #6
 8004ad6:	f7fb fb9b 	bl	8000210 <memchr>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d038      	beq.n	8004b50 <_svfiprintf_r+0x1d8>
 8004ade:	4b23      	ldr	r3, [pc, #140]	; (8004b6c <_svfiprintf_r+0x1f4>)
 8004ae0:	bb1b      	cbnz	r3, 8004b2a <_svfiprintf_r+0x1b2>
 8004ae2:	9b03      	ldr	r3, [sp, #12]
 8004ae4:	3307      	adds	r3, #7
 8004ae6:	f023 0307 	bic.w	r3, r3, #7
 8004aea:	3308      	adds	r3, #8
 8004aec:	9303      	str	r3, [sp, #12]
 8004aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af0:	4433      	add	r3, r6
 8004af2:	9309      	str	r3, [sp, #36]	; 0x24
 8004af4:	e767      	b.n	80049c6 <_svfiprintf_r+0x4e>
 8004af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004afa:	460c      	mov	r4, r1
 8004afc:	2001      	movs	r0, #1
 8004afe:	e7a5      	b.n	8004a4c <_svfiprintf_r+0xd4>
 8004b00:	2300      	movs	r3, #0
 8004b02:	3401      	adds	r4, #1
 8004b04:	9305      	str	r3, [sp, #20]
 8004b06:	4619      	mov	r1, r3
 8004b08:	f04f 0c0a 	mov.w	ip, #10
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b12:	3a30      	subs	r2, #48	; 0x30
 8004b14:	2a09      	cmp	r2, #9
 8004b16:	d903      	bls.n	8004b20 <_svfiprintf_r+0x1a8>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0c5      	beq.n	8004aa8 <_svfiprintf_r+0x130>
 8004b1c:	9105      	str	r1, [sp, #20]
 8004b1e:	e7c3      	b.n	8004aa8 <_svfiprintf_r+0x130>
 8004b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b24:	4604      	mov	r4, r0
 8004b26:	2301      	movs	r3, #1
 8004b28:	e7f0      	b.n	8004b0c <_svfiprintf_r+0x194>
 8004b2a:	ab03      	add	r3, sp, #12
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	462a      	mov	r2, r5
 8004b30:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <_svfiprintf_r+0x1f8>)
 8004b32:	a904      	add	r1, sp, #16
 8004b34:	4638      	mov	r0, r7
 8004b36:	f3af 8000 	nop.w
 8004b3a:	1c42      	adds	r2, r0, #1
 8004b3c:	4606      	mov	r6, r0
 8004b3e:	d1d6      	bne.n	8004aee <_svfiprintf_r+0x176>
 8004b40:	89ab      	ldrh	r3, [r5, #12]
 8004b42:	065b      	lsls	r3, r3, #25
 8004b44:	f53f af2c 	bmi.w	80049a0 <_svfiprintf_r+0x28>
 8004b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b4a:	b01d      	add	sp, #116	; 0x74
 8004b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b50:	ab03      	add	r3, sp, #12
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	462a      	mov	r2, r5
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <_svfiprintf_r+0x1f8>)
 8004b58:	a904      	add	r1, sp, #16
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	f000 f87a 	bl	8004c54 <_printf_i>
 8004b60:	e7eb      	b.n	8004b3a <_svfiprintf_r+0x1c2>
 8004b62:	bf00      	nop
 8004b64:	08005000 	.word	0x08005000
 8004b68:	0800500a 	.word	0x0800500a
 8004b6c:	00000000 	.word	0x00000000
 8004b70:	080048c1 	.word	0x080048c1
 8004b74:	08005006 	.word	0x08005006

08004b78 <_printf_common>:
 8004b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	4699      	mov	r9, r3
 8004b80:	688a      	ldr	r2, [r1, #8]
 8004b82:	690b      	ldr	r3, [r1, #16]
 8004b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	bfb8      	it	lt
 8004b8c:	4613      	movlt	r3, r2
 8004b8e:	6033      	str	r3, [r6, #0]
 8004b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b94:	4607      	mov	r7, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	b10a      	cbz	r2, 8004b9e <_printf_common+0x26>
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	6033      	str	r3, [r6, #0]
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	0699      	lsls	r1, r3, #26
 8004ba2:	bf42      	ittt	mi
 8004ba4:	6833      	ldrmi	r3, [r6, #0]
 8004ba6:	3302      	addmi	r3, #2
 8004ba8:	6033      	strmi	r3, [r6, #0]
 8004baa:	6825      	ldr	r5, [r4, #0]
 8004bac:	f015 0506 	ands.w	r5, r5, #6
 8004bb0:	d106      	bne.n	8004bc0 <_printf_common+0x48>
 8004bb2:	f104 0a19 	add.w	sl, r4, #25
 8004bb6:	68e3      	ldr	r3, [r4, #12]
 8004bb8:	6832      	ldr	r2, [r6, #0]
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	42ab      	cmp	r3, r5
 8004bbe:	dc26      	bgt.n	8004c0e <_printf_common+0x96>
 8004bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bc4:	1e13      	subs	r3, r2, #0
 8004bc6:	6822      	ldr	r2, [r4, #0]
 8004bc8:	bf18      	it	ne
 8004bca:	2301      	movne	r3, #1
 8004bcc:	0692      	lsls	r2, r2, #26
 8004bce:	d42b      	bmi.n	8004c28 <_printf_common+0xb0>
 8004bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	47c0      	blx	r8
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d01e      	beq.n	8004c1c <_printf_common+0xa4>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	68e5      	ldr	r5, [r4, #12]
 8004be2:	6832      	ldr	r2, [r6, #0]
 8004be4:	f003 0306 	and.w	r3, r3, #6
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	bf08      	it	eq
 8004bec:	1aad      	subeq	r5, r5, r2
 8004bee:	68a3      	ldr	r3, [r4, #8]
 8004bf0:	6922      	ldr	r2, [r4, #16]
 8004bf2:	bf0c      	ite	eq
 8004bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bf8:	2500      	movne	r5, #0
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	bfc4      	itt	gt
 8004bfe:	1a9b      	subgt	r3, r3, r2
 8004c00:	18ed      	addgt	r5, r5, r3
 8004c02:	2600      	movs	r6, #0
 8004c04:	341a      	adds	r4, #26
 8004c06:	42b5      	cmp	r5, r6
 8004c08:	d11a      	bne.n	8004c40 <_printf_common+0xc8>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	e008      	b.n	8004c20 <_printf_common+0xa8>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4652      	mov	r2, sl
 8004c12:	4649      	mov	r1, r9
 8004c14:	4638      	mov	r0, r7
 8004c16:	47c0      	blx	r8
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d103      	bne.n	8004c24 <_printf_common+0xac>
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	3501      	adds	r5, #1
 8004c26:	e7c6      	b.n	8004bb6 <_printf_common+0x3e>
 8004c28:	18e1      	adds	r1, r4, r3
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	2030      	movs	r0, #48	; 0x30
 8004c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c32:	4422      	add	r2, r4
 8004c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	e7c7      	b.n	8004bd0 <_printf_common+0x58>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4622      	mov	r2, r4
 8004c44:	4649      	mov	r1, r9
 8004c46:	4638      	mov	r0, r7
 8004c48:	47c0      	blx	r8
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d0e6      	beq.n	8004c1c <_printf_common+0xa4>
 8004c4e:	3601      	adds	r6, #1
 8004c50:	e7d9      	b.n	8004c06 <_printf_common+0x8e>
	...

08004c54 <_printf_i>:
 8004c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c58:	460c      	mov	r4, r1
 8004c5a:	4691      	mov	r9, r2
 8004c5c:	7e27      	ldrb	r7, [r4, #24]
 8004c5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c60:	2f78      	cmp	r7, #120	; 0x78
 8004c62:	4680      	mov	r8, r0
 8004c64:	469a      	mov	sl, r3
 8004c66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c6a:	d807      	bhi.n	8004c7c <_printf_i+0x28>
 8004c6c:	2f62      	cmp	r7, #98	; 0x62
 8004c6e:	d80a      	bhi.n	8004c86 <_printf_i+0x32>
 8004c70:	2f00      	cmp	r7, #0
 8004c72:	f000 80d8 	beq.w	8004e26 <_printf_i+0x1d2>
 8004c76:	2f58      	cmp	r7, #88	; 0x58
 8004c78:	f000 80a3 	beq.w	8004dc2 <_printf_i+0x16e>
 8004c7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c84:	e03a      	b.n	8004cfc <_printf_i+0xa8>
 8004c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c8a:	2b15      	cmp	r3, #21
 8004c8c:	d8f6      	bhi.n	8004c7c <_printf_i+0x28>
 8004c8e:	a001      	add	r0, pc, #4	; (adr r0, 8004c94 <_printf_i+0x40>)
 8004c90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c94:	08004ced 	.word	0x08004ced
 8004c98:	08004d01 	.word	0x08004d01
 8004c9c:	08004c7d 	.word	0x08004c7d
 8004ca0:	08004c7d 	.word	0x08004c7d
 8004ca4:	08004c7d 	.word	0x08004c7d
 8004ca8:	08004c7d 	.word	0x08004c7d
 8004cac:	08004d01 	.word	0x08004d01
 8004cb0:	08004c7d 	.word	0x08004c7d
 8004cb4:	08004c7d 	.word	0x08004c7d
 8004cb8:	08004c7d 	.word	0x08004c7d
 8004cbc:	08004c7d 	.word	0x08004c7d
 8004cc0:	08004e0d 	.word	0x08004e0d
 8004cc4:	08004d31 	.word	0x08004d31
 8004cc8:	08004def 	.word	0x08004def
 8004ccc:	08004c7d 	.word	0x08004c7d
 8004cd0:	08004c7d 	.word	0x08004c7d
 8004cd4:	08004e2f 	.word	0x08004e2f
 8004cd8:	08004c7d 	.word	0x08004c7d
 8004cdc:	08004d31 	.word	0x08004d31
 8004ce0:	08004c7d 	.word	0x08004c7d
 8004ce4:	08004c7d 	.word	0x08004c7d
 8004ce8:	08004df7 	.word	0x08004df7
 8004cec:	680b      	ldr	r3, [r1, #0]
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	600a      	str	r2, [r1, #0]
 8004cf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0a3      	b.n	8004e48 <_printf_i+0x1f4>
 8004d00:	6825      	ldr	r5, [r4, #0]
 8004d02:	6808      	ldr	r0, [r1, #0]
 8004d04:	062e      	lsls	r6, r5, #24
 8004d06:	f100 0304 	add.w	r3, r0, #4
 8004d0a:	d50a      	bpl.n	8004d22 <_printf_i+0xce>
 8004d0c:	6805      	ldr	r5, [r0, #0]
 8004d0e:	600b      	str	r3, [r1, #0]
 8004d10:	2d00      	cmp	r5, #0
 8004d12:	da03      	bge.n	8004d1c <_printf_i+0xc8>
 8004d14:	232d      	movs	r3, #45	; 0x2d
 8004d16:	426d      	negs	r5, r5
 8004d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1c:	485e      	ldr	r0, [pc, #376]	; (8004e98 <_printf_i+0x244>)
 8004d1e:	230a      	movs	r3, #10
 8004d20:	e019      	b.n	8004d56 <_printf_i+0x102>
 8004d22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d26:	6805      	ldr	r5, [r0, #0]
 8004d28:	600b      	str	r3, [r1, #0]
 8004d2a:	bf18      	it	ne
 8004d2c:	b22d      	sxthne	r5, r5
 8004d2e:	e7ef      	b.n	8004d10 <_printf_i+0xbc>
 8004d30:	680b      	ldr	r3, [r1, #0]
 8004d32:	6825      	ldr	r5, [r4, #0]
 8004d34:	1d18      	adds	r0, r3, #4
 8004d36:	6008      	str	r0, [r1, #0]
 8004d38:	0628      	lsls	r0, r5, #24
 8004d3a:	d501      	bpl.n	8004d40 <_printf_i+0xec>
 8004d3c:	681d      	ldr	r5, [r3, #0]
 8004d3e:	e002      	b.n	8004d46 <_printf_i+0xf2>
 8004d40:	0669      	lsls	r1, r5, #25
 8004d42:	d5fb      	bpl.n	8004d3c <_printf_i+0xe8>
 8004d44:	881d      	ldrh	r5, [r3, #0]
 8004d46:	4854      	ldr	r0, [pc, #336]	; (8004e98 <_printf_i+0x244>)
 8004d48:	2f6f      	cmp	r7, #111	; 0x6f
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2308      	moveq	r3, #8
 8004d4e:	230a      	movne	r3, #10
 8004d50:	2100      	movs	r1, #0
 8004d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d56:	6866      	ldr	r6, [r4, #4]
 8004d58:	60a6      	str	r6, [r4, #8]
 8004d5a:	2e00      	cmp	r6, #0
 8004d5c:	bfa2      	ittt	ge
 8004d5e:	6821      	ldrge	r1, [r4, #0]
 8004d60:	f021 0104 	bicge.w	r1, r1, #4
 8004d64:	6021      	strge	r1, [r4, #0]
 8004d66:	b90d      	cbnz	r5, 8004d6c <_printf_i+0x118>
 8004d68:	2e00      	cmp	r6, #0
 8004d6a:	d04d      	beq.n	8004e08 <_printf_i+0x1b4>
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d72:	fb03 5711 	mls	r7, r3, r1, r5
 8004d76:	5dc7      	ldrb	r7, [r0, r7]
 8004d78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d7c:	462f      	mov	r7, r5
 8004d7e:	42bb      	cmp	r3, r7
 8004d80:	460d      	mov	r5, r1
 8004d82:	d9f4      	bls.n	8004d6e <_printf_i+0x11a>
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d10b      	bne.n	8004da0 <_printf_i+0x14c>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	07df      	lsls	r7, r3, #31
 8004d8c:	d508      	bpl.n	8004da0 <_printf_i+0x14c>
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	6861      	ldr	r1, [r4, #4]
 8004d92:	4299      	cmp	r1, r3
 8004d94:	bfde      	ittt	le
 8004d96:	2330      	movle	r3, #48	; 0x30
 8004d98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004da0:	1b92      	subs	r2, r2, r6
 8004da2:	6122      	str	r2, [r4, #16]
 8004da4:	f8cd a000 	str.w	sl, [sp]
 8004da8:	464b      	mov	r3, r9
 8004daa:	aa03      	add	r2, sp, #12
 8004dac:	4621      	mov	r1, r4
 8004dae:	4640      	mov	r0, r8
 8004db0:	f7ff fee2 	bl	8004b78 <_printf_common>
 8004db4:	3001      	adds	r0, #1
 8004db6:	d14c      	bne.n	8004e52 <_printf_i+0x1fe>
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	b004      	add	sp, #16
 8004dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc2:	4835      	ldr	r0, [pc, #212]	; (8004e98 <_printf_i+0x244>)
 8004dc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	680e      	ldr	r6, [r1, #0]
 8004dcc:	061f      	lsls	r7, r3, #24
 8004dce:	f856 5b04 	ldr.w	r5, [r6], #4
 8004dd2:	600e      	str	r6, [r1, #0]
 8004dd4:	d514      	bpl.n	8004e00 <_printf_i+0x1ac>
 8004dd6:	07d9      	lsls	r1, r3, #31
 8004dd8:	bf44      	itt	mi
 8004dda:	f043 0320 	orrmi.w	r3, r3, #32
 8004dde:	6023      	strmi	r3, [r4, #0]
 8004de0:	b91d      	cbnz	r5, 8004dea <_printf_i+0x196>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	f023 0320 	bic.w	r3, r3, #32
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	2310      	movs	r3, #16
 8004dec:	e7b0      	b.n	8004d50 <_printf_i+0xfc>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	f043 0320 	orr.w	r3, r3, #32
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	2378      	movs	r3, #120	; 0x78
 8004df8:	4828      	ldr	r0, [pc, #160]	; (8004e9c <_printf_i+0x248>)
 8004dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dfe:	e7e3      	b.n	8004dc8 <_printf_i+0x174>
 8004e00:	065e      	lsls	r6, r3, #25
 8004e02:	bf48      	it	mi
 8004e04:	b2ad      	uxthmi	r5, r5
 8004e06:	e7e6      	b.n	8004dd6 <_printf_i+0x182>
 8004e08:	4616      	mov	r6, r2
 8004e0a:	e7bb      	b.n	8004d84 <_printf_i+0x130>
 8004e0c:	680b      	ldr	r3, [r1, #0]
 8004e0e:	6826      	ldr	r6, [r4, #0]
 8004e10:	6960      	ldr	r0, [r4, #20]
 8004e12:	1d1d      	adds	r5, r3, #4
 8004e14:	600d      	str	r5, [r1, #0]
 8004e16:	0635      	lsls	r5, r6, #24
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	d501      	bpl.n	8004e20 <_printf_i+0x1cc>
 8004e1c:	6018      	str	r0, [r3, #0]
 8004e1e:	e002      	b.n	8004e26 <_printf_i+0x1d2>
 8004e20:	0671      	lsls	r1, r6, #25
 8004e22:	d5fb      	bpl.n	8004e1c <_printf_i+0x1c8>
 8004e24:	8018      	strh	r0, [r3, #0]
 8004e26:	2300      	movs	r3, #0
 8004e28:	6123      	str	r3, [r4, #16]
 8004e2a:	4616      	mov	r6, r2
 8004e2c:	e7ba      	b.n	8004da4 <_printf_i+0x150>
 8004e2e:	680b      	ldr	r3, [r1, #0]
 8004e30:	1d1a      	adds	r2, r3, #4
 8004e32:	600a      	str	r2, [r1, #0]
 8004e34:	681e      	ldr	r6, [r3, #0]
 8004e36:	6862      	ldr	r2, [r4, #4]
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	f7fb f9e8 	bl	8000210 <memchr>
 8004e40:	b108      	cbz	r0, 8004e46 <_printf_i+0x1f2>
 8004e42:	1b80      	subs	r0, r0, r6
 8004e44:	6060      	str	r0, [r4, #4]
 8004e46:	6863      	ldr	r3, [r4, #4]
 8004e48:	6123      	str	r3, [r4, #16]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e50:	e7a8      	b.n	8004da4 <_printf_i+0x150>
 8004e52:	6923      	ldr	r3, [r4, #16]
 8004e54:	4632      	mov	r2, r6
 8004e56:	4649      	mov	r1, r9
 8004e58:	4640      	mov	r0, r8
 8004e5a:	47d0      	blx	sl
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d0ab      	beq.n	8004db8 <_printf_i+0x164>
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	079b      	lsls	r3, r3, #30
 8004e64:	d413      	bmi.n	8004e8e <_printf_i+0x23a>
 8004e66:	68e0      	ldr	r0, [r4, #12]
 8004e68:	9b03      	ldr	r3, [sp, #12]
 8004e6a:	4298      	cmp	r0, r3
 8004e6c:	bfb8      	it	lt
 8004e6e:	4618      	movlt	r0, r3
 8004e70:	e7a4      	b.n	8004dbc <_printf_i+0x168>
 8004e72:	2301      	movs	r3, #1
 8004e74:	4632      	mov	r2, r6
 8004e76:	4649      	mov	r1, r9
 8004e78:	4640      	mov	r0, r8
 8004e7a:	47d0      	blx	sl
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d09b      	beq.n	8004db8 <_printf_i+0x164>
 8004e80:	3501      	adds	r5, #1
 8004e82:	68e3      	ldr	r3, [r4, #12]
 8004e84:	9903      	ldr	r1, [sp, #12]
 8004e86:	1a5b      	subs	r3, r3, r1
 8004e88:	42ab      	cmp	r3, r5
 8004e8a:	dcf2      	bgt.n	8004e72 <_printf_i+0x21e>
 8004e8c:	e7eb      	b.n	8004e66 <_printf_i+0x212>
 8004e8e:	2500      	movs	r5, #0
 8004e90:	f104 0619 	add.w	r6, r4, #25
 8004e94:	e7f5      	b.n	8004e82 <_printf_i+0x22e>
 8004e96:	bf00      	nop
 8004e98:	08005011 	.word	0x08005011
 8004e9c:	08005022 	.word	0x08005022

08004ea0 <__retarget_lock_acquire_recursive>:
 8004ea0:	4770      	bx	lr

08004ea2 <__retarget_lock_release_recursive>:
 8004ea2:	4770      	bx	lr

08004ea4 <memmove>:
 8004ea4:	4288      	cmp	r0, r1
 8004ea6:	b510      	push	{r4, lr}
 8004ea8:	eb01 0402 	add.w	r4, r1, r2
 8004eac:	d902      	bls.n	8004eb4 <memmove+0x10>
 8004eae:	4284      	cmp	r4, r0
 8004eb0:	4623      	mov	r3, r4
 8004eb2:	d807      	bhi.n	8004ec4 <memmove+0x20>
 8004eb4:	1e43      	subs	r3, r0, #1
 8004eb6:	42a1      	cmp	r1, r4
 8004eb8:	d008      	beq.n	8004ecc <memmove+0x28>
 8004eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ec2:	e7f8      	b.n	8004eb6 <memmove+0x12>
 8004ec4:	4402      	add	r2, r0
 8004ec6:	4601      	mov	r1, r0
 8004ec8:	428a      	cmp	r2, r1
 8004eca:	d100      	bne.n	8004ece <memmove+0x2a>
 8004ecc:	bd10      	pop	{r4, pc}
 8004ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ed6:	e7f7      	b.n	8004ec8 <memmove+0x24>

08004ed8 <_realloc_r>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	4607      	mov	r7, r0
 8004edc:	4614      	mov	r4, r2
 8004ede:	460e      	mov	r6, r1
 8004ee0:	b921      	cbnz	r1, 8004eec <_realloc_r+0x14>
 8004ee2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	f7ff bc54 	b.w	8004794 <_malloc_r>
 8004eec:	b922      	cbnz	r2, 8004ef8 <_realloc_r+0x20>
 8004eee:	f7ff fc01 	bl	80046f4 <_free_r>
 8004ef2:	4625      	mov	r5, r4
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ef8:	f000 f814 	bl	8004f24 <_malloc_usable_size_r>
 8004efc:	42a0      	cmp	r0, r4
 8004efe:	d20f      	bcs.n	8004f20 <_realloc_r+0x48>
 8004f00:	4621      	mov	r1, r4
 8004f02:	4638      	mov	r0, r7
 8004f04:	f7ff fc46 	bl	8004794 <_malloc_r>
 8004f08:	4605      	mov	r5, r0
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	d0f2      	beq.n	8004ef4 <_realloc_r+0x1c>
 8004f0e:	4631      	mov	r1, r6
 8004f10:	4622      	mov	r2, r4
 8004f12:	f7ff fbd9 	bl	80046c8 <memcpy>
 8004f16:	4631      	mov	r1, r6
 8004f18:	4638      	mov	r0, r7
 8004f1a:	f7ff fbeb 	bl	80046f4 <_free_r>
 8004f1e:	e7e9      	b.n	8004ef4 <_realloc_r+0x1c>
 8004f20:	4635      	mov	r5, r6
 8004f22:	e7e7      	b.n	8004ef4 <_realloc_r+0x1c>

08004f24 <_malloc_usable_size_r>:
 8004f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f28:	1f18      	subs	r0, r3, #4
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bfbc      	itt	lt
 8004f2e:	580b      	ldrlt	r3, [r1, r0]
 8004f30:	18c0      	addlt	r0, r0, r3
 8004f32:	4770      	bx	lr

08004f34 <_init>:
 8004f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f36:	bf00      	nop
 8004f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f3a:	bc08      	pop	{r3}
 8004f3c:	469e      	mov	lr, r3
 8004f3e:	4770      	bx	lr

08004f40 <_fini>:
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f42:	bf00      	nop
 8004f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f46:	bc08      	pop	{r3}
 8004f48:	469e      	mov	lr, r3
 8004f4a:	4770      	bx	lr
