
SRADio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bcc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e74  08004e74  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e74  08004e74  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e74  08004e74  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e78  08004e78  00014e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00000230  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002bc  200002bc  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010900  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d1b  00000000  00000000  000309bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b70  00000000  00000000  000326d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ac8  00000000  00000000  00033248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020dad  00000000  00000000  00033d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d771  00000000  00000000  00054abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6296  00000000  00000000  0006222e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001284c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003364  00000000  00000000  00128518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d54 	.word	0x08004d54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08004d54 	.word	0x08004d54

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b097      	sub	sp, #92	; 0x5c
 8000284:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f001 f8fd 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f83d 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f907 	bl	80004a0 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000292:	f000 f897 	bl	80003c4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000296:	f000 f8d3 	bl	8000440 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  set_hspi(hspi3);
 800029a:	4c16      	ldr	r4, [pc, #88]	; (80002f4 <main+0x74>)
 800029c:	4668      	mov	r0, sp
 800029e:	f104 0310 	add.w	r3, r4, #16
 80002a2:	2254      	movs	r2, #84	; 0x54
 80002a4:	4619      	mov	r1, r3
 80002a6:	f004 f91f 	bl	80044e8 <memcpy>
 80002aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002ae:	f000 fb37 	bl	8000920 <set_hspi>
  set_NSS_pin(NSS_1_GPIO_Port, NSS_1_Pin);
 80002b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ba:	f000 fad9 	bl	8000870 <set_NSS_pin>
  set_BUSY_pin(BUSY_1_GPIO_Port, BUSY_1_Pin);
 80002be:	2110      	movs	r1, #16
 80002c0:	480d      	ldr	r0, [pc, #52]	; (80002f8 <main+0x78>)
 80002c2:	f000 faeb 	bl	800089c <set_BUSY_pin>
  set_NRESET_pin(NRESET_1_GPIO_Port, NRESET_1_Pin);
 80002c6:	2104      	movs	r1, #4
 80002c8:	480c      	ldr	r0, [pc, #48]	; (80002fc <main+0x7c>)
 80002ca:	f000 fafd 	bl	80008c8 <set_NRESET_pin>
  set_DIO1_pin(DIO1_1_GPIO_Port, DIO1_1_Pin);
 80002ce:	2120      	movs	r1, #32
 80002d0:	4809      	ldr	r0, [pc, #36]	; (80002f8 <main+0x78>)
 80002d2:	f000 fb0f 	bl	80008f4 <set_DIO1_pin>
  Tx_setup();
 80002d6:	f000 fb3b 	bl	8000950 <Tx_setup>
  sprintf((char *)tx_buffer, "0123456789");
 80002da:	4909      	ldr	r1, [pc, #36]	; (8000300 <main+0x80>)
 80002dc:	4809      	ldr	r0, [pc, #36]	; (8000304 <main+0x84>)
 80002de:	f004 f9d3 	bl	8004688 <siprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TxProtocol(tx_buffer, 10);
 80002e2:	210a      	movs	r1, #10
 80002e4:	4807      	ldr	r0, [pc, #28]	; (8000304 <main+0x84>)
 80002e6:	f000 fc47 	bl	8000b78 <TxProtocol>
	//RxProtocol(rx_buffer);
	//HAL_UART_Transmit(&huart1,(uint8_t*)rx_buffer,strlen(rx_buffer),100);
//	transmitBuffer("t");
	HAL_Delay(1000);
 80002ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ee:	f001 f92f 	bl	8001550 <HAL_Delay>
	  TxProtocol(tx_buffer, 10);
 80002f2:	e7f6      	b.n	80002e2 <main+0x62>
 80002f4:	20000144 	.word	0x20000144
 80002f8:	48000400 	.word	0x48000400
 80002fc:	48000c00 	.word	0x48000c00
 8000300:	08004d6c 	.word	0x08004d6c
 8000304:	20000218 	.word	0x20000218

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b0a6      	sub	sp, #152	; 0x98
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000312:	2228      	movs	r2, #40	; 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f004 f8f4 	bl	8004504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2258      	movs	r2, #88	; 0x58
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f004 f8e6 	bl	8004504 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000338:	2302      	movs	r3, #2
 800033a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033c:	2301      	movs	r3, #1
 800033e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000340:	2310      	movs	r3, #16
 8000342:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000346:	2302      	movs	r3, #2
 8000348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800034c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000350:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000354:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000358:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000366:	4618      	mov	r0, r3
 8000368:	f001 fbb6 	bl	8001ad8 <HAL_RCC_OscConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000372:	f000 f911 	bl	8000598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000376:	230f      	movs	r3, #15
 8000378:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037a:	2302      	movs	r3, #2
 800037c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800038a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800038e:	2101      	movs	r1, #1
 8000390:	4618      	mov	r0, r3
 8000392:	f002 fab7 	bl	8002904 <HAL_RCC_ClockConfig>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800039c:	f000 f8fc 	bl	8000598 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003a0:	2301      	movs	r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 fce0 	bl	8002d70 <HAL_RCCEx_PeriphCLKConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80003b6:	f000 f8ef 	bl	8000598 <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3798      	adds	r7, #152	; 0x98
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <MX_SPI3_Init+0x74>)
 80003ca:	4a1c      	ldr	r2, [pc, #112]	; (800043c <MX_SPI3_Init+0x78>)
 80003cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <MX_SPI3_Init+0x74>)
 80003d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80003d6:	4b18      	ldr	r3, [pc, #96]	; (8000438 <MX_SPI3_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80003dc:	4b16      	ldr	r3, [pc, #88]	; (8000438 <MX_SPI3_Init+0x74>)
 80003de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80003e2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <MX_SPI3_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ea:	4b13      	ldr	r3, [pc, #76]	; (8000438 <MX_SPI3_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <MX_SPI3_Init+0x74>)
 80003f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003f6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <MX_SPI3_Init+0x74>)
 80003fa:	2218      	movs	r2, #24
 80003fc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_SPI3_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_SPI3_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <MX_SPI3_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_SPI3_Init+0x74>)
 8000412:	2207      	movs	r2, #7
 8000414:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <MX_SPI3_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MX_SPI3_Init+0x74>)
 800041e:	2208      	movs	r2, #8
 8000420:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <MX_SPI3_Init+0x74>)
 8000424:	f002 fec2 	bl	80031ac <HAL_SPI_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800042e:	f000 f8b3 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000144 	.word	0x20000144
 800043c:	40003c00 	.word	0x40003c00

08000440 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <MX_USART1_UART_Init+0x58>)
 8000446:	4a15      	ldr	r2, [pc, #84]	; (800049c <MX_USART1_UART_Init+0x5c>)
 8000448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <MX_USART1_UART_Init+0x58>)
 800044c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_USART1_UART_Init+0x58>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_USART1_UART_Init+0x58>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MX_USART1_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_USART1_UART_Init+0x58>)
 8000466:	220c      	movs	r2, #12
 8000468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <MX_USART1_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000470:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_USART1_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <MX_USART1_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_USART1_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_USART1_UART_Init+0x58>)
 8000484:	f003 fc22 	bl	8003ccc <HAL_UART_Init>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800048e:	f000 f883 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000224 	.word	0x20000224
 800049c:	40013800 	.word	0x40013800

080004a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08a      	sub	sp, #40	; 0x28
 80004a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b35      	ldr	r3, [pc, #212]	; (800058c <MX_GPIO_Init+0xec>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a34      	ldr	r2, [pc, #208]	; (800058c <MX_GPIO_Init+0xec>)
 80004bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b32      	ldr	r3, [pc, #200]	; (800058c <MX_GPIO_Init+0xec>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ca:	613b      	str	r3, [r7, #16]
 80004cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ce:	4b2f      	ldr	r3, [pc, #188]	; (800058c <MX_GPIO_Init+0xec>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a2e      	ldr	r2, [pc, #184]	; (800058c <MX_GPIO_Init+0xec>)
 80004d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b2c      	ldr	r3, [pc, #176]	; (800058c <MX_GPIO_Init+0xec>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e6:	4b29      	ldr	r3, [pc, #164]	; (800058c <MX_GPIO_Init+0xec>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a28      	ldr	r2, [pc, #160]	; (800058c <MX_GPIO_Init+0xec>)
 80004ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b26      	ldr	r3, [pc, #152]	; (800058c <MX_GPIO_Init+0xec>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b23      	ldr	r3, [pc, #140]	; (800058c <MX_GPIO_Init+0xec>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a22      	ldr	r2, [pc, #136]	; (800058c <MX_GPIO_Init+0xec>)
 8000504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b20      	ldr	r3, [pc, #128]	; (800058c <MX_GPIO_Init+0xec>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_1_GPIO_Port, NSS_1_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f001 fac2 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRESET_1_GPIO_Port, NRESET_1_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2104      	movs	r1, #4
 8000528:	4819      	ldr	r0, [pc, #100]	; (8000590 <MX_GPIO_Init+0xf0>)
 800052a:	f001 fabd 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NSS_1_Pin */
  GPIO_InitStruct.Pin = NSS_1_Pin;
 800052e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000534:	2301      	movs	r3, #1
 8000536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_1_GPIO_Port, &GPIO_InitStruct);
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4619      	mov	r1, r3
 8000546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054a:	f001 f90b 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRESET_1_Pin */
  GPIO_InitStruct.Pin = NRESET_1_Pin;
 800054e:	2304      	movs	r3, #4
 8000550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	2301      	movs	r3, #1
 8000554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2300      	movs	r3, #0
 800055c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRESET_1_GPIO_Port, &GPIO_InitStruct);
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	4619      	mov	r1, r3
 8000564:	480a      	ldr	r0, [pc, #40]	; (8000590 <MX_GPIO_Init+0xf0>)
 8000566:	f001 f8fd 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUSY_1_Pin DIO1_1_Pin */
  GPIO_InitStruct.Pin = BUSY_1_Pin|DIO1_1_Pin;
 800056a:	2330      	movs	r3, #48	; 0x30
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_GPIO_Init+0xf4>)
 800057e:	f001 f8f1 	bl	8001764 <HAL_GPIO_Init>

}
 8000582:	bf00      	nop
 8000584:	3728      	adds	r7, #40	; 0x28
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000
 8000590:	48000c00 	.word	0x48000c00
 8000594:	48000400 	.word	0x48000400

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>
	...

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <HAL_MspInit+0x44>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <HAL_MspInit+0x44>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6193      	str	r3, [r2, #24]
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <HAL_MspInit+0x44>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_MspInit+0x44>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <HAL_MspInit+0x44>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005cc:	61d3      	str	r3, [r2, #28]
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_MspInit+0x44>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a17      	ldr	r2, [pc, #92]	; (8000668 <HAL_SPI_MspInit+0x7c>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d128      	bne.n	8000660 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <HAL_SPI_MspInit+0x80>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a16      	ldr	r2, [pc, #88]	; (800066c <HAL_SPI_MspInit+0x80>)
 8000614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000618:	61d3      	str	r3, [r2, #28]
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <HAL_SPI_MspInit+0x80>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <HAL_SPI_MspInit+0x80>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a10      	ldr	r2, [pc, #64]	; (800066c <HAL_SPI_MspInit+0x80>)
 800062c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <HAL_SPI_MspInit+0x80>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800063e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000644:	2302      	movs	r3, #2
 8000646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000650:	2306      	movs	r3, #6
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <HAL_SPI_MspInit+0x84>)
 800065c:	f001 f882 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000660:	bf00      	nop
 8000662:	3728      	adds	r7, #40	; 0x28
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40003c00 	.word	0x40003c00
 800066c:	40021000 	.word	0x40021000
 8000670:	48000800 	.word	0x48000800

08000674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <HAL_UART_MspInit+0x7c>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d127      	bne.n	80006e6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <HAL_UART_MspInit+0x80>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <HAL_UART_MspInit+0x80>)
 800069c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <HAL_UART_MspInit+0x80>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <HAL_UART_MspInit+0x80>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <HAL_UART_MspInit+0x80>)
 80006b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <HAL_UART_MspInit+0x80>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006c6:	23c0      	movs	r3, #192	; 0xc0
 80006c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006d6:	2307      	movs	r3, #7
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <HAL_UART_MspInit+0x84>)
 80006e2:	f001 f83f 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40013800 	.word	0x40013800
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48000400 	.word	0x48000400

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <NMI_Handler+0x4>

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <MemManage_Handler+0x4>

0800070e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <UsageFault_Handler+0x4>

0800071a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000748:	f000 fee2 	bl	8001510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	4613      	mov	r3, r2
 800075e:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 8000760:	bf00      	nop
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <sx126x_hal_write+0x74>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <sx126x_hal_write+0x78>)
 8000768:	8812      	ldrh	r2, [r2, #0]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f001 f983 	bl	8001a78 <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b01      	cmp	r3, #1
 8000776:	d0f4      	beq.n	8000762 <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <sx126x_hal_write+0x7c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <sx126x_hal_write+0x80>)
 800077e:	8811      	ldrh	r1, [r2, #0]
 8000780:	2200      	movs	r2, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f001 f990 	bl	8001aa8 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 8000788:	88fa      	ldrh	r2, [r7, #6]
 800078a:	2364      	movs	r3, #100	; 0x64
 800078c:	68b9      	ldr	r1, [r7, #8]
 800078e:	68f8      	ldr	r0, [r7, #12]
 8000790:	f002 fdb7 	bl	8003302 <HAL_SPI_Transmit>
 8000794:	4603      	mov	r3, r0
 8000796:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 8000798:	8c3a      	ldrh	r2, [r7, #32]
 800079a:	2364      	movs	r3, #100	; 0x64
 800079c:	6839      	ldr	r1, [r7, #0]
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f002 fdaf 	bl	8003302 <HAL_SPI_Transmit>
 80007a4:	4603      	mov	r3, r0
 80007a6:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <sx126x_hal_write+0x7c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <sx126x_hal_write+0x80>)
 80007ae:	8811      	ldrh	r1, [r2, #0]
 80007b0:	2201      	movs	r2, #1
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f978 	bl	8001aa8 <HAL_GPIO_WritePin>
    return status;
 80007b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000bc 	.word	0x200000bc
 80007c8:	200000b8 	.word	0x200000b8
 80007cc:	200000ac 	.word	0x200000ac
 80007d0:	200000a8 	.word	0x200000a8

080007d4 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af02      	add	r7, sp, #8
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	4613      	mov	r3, r2
 80007e2:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 80007e4:	bf00      	nop
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <sx126x_hal_read+0x8c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a1e      	ldr	r2, [pc, #120]	; (8000864 <sx126x_hal_read+0x90>)
 80007ec:	8812      	ldrh	r2, [r2, #0]
 80007ee:	4611      	mov	r1, r2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 f941 	bl	8001a78 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d0f4      	beq.n	80007e6 <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <sx126x_hal_read+0x94>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a1a      	ldr	r2, [pc, #104]	; (800086c <sx126x_hal_read+0x98>)
 8000802:	8811      	ldrh	r1, [r2, #0]
 8000804:	2200      	movs	r2, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f001 f94e 	bl	8001aa8 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 800080c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000810:	b29a      	uxth	r2, r3
 8000812:	2364      	movs	r3, #100	; 0x64
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f002 fd73 	bl	8003302 <HAL_SPI_Transmit>
 800081c:	4603      	mov	r3, r0
 800081e:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 8000820:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	18d1      	adds	r1, r2, r3
 8000828:	f897 3020 	ldrb.w	r3, [r7, #32]
 800082c:	b29b      	uxth	r3, r3
 800082e:	88fa      	ldrh	r2, [r7, #6]
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	b29b      	uxth	r3, r3
 8000834:	2264      	movs	r2, #100	; 0x64
 8000836:	9200      	str	r2, [sp, #0]
 8000838:	683a      	ldr	r2, [r7, #0]
 800083a:	68f8      	ldr	r0, [r7, #12]
 800083c:	f002 fecf 	bl	80035de <HAL_SPI_TransmitReceive>
 8000840:	4603      	mov	r3, r0
 8000842:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <sx126x_hal_read+0x94>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a08      	ldr	r2, [pc, #32]	; (800086c <sx126x_hal_read+0x98>)
 800084a:	8811      	ldrh	r1, [r2, #0]
 800084c:	2201      	movs	r2, #1
 800084e:	4618      	mov	r0, r3
 8000850:	f001 f92a 	bl	8001aa8 <HAL_GPIO_WritePin>
    return status;
 8000854:	7dfb      	ldrb	r3, [r7, #23]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000bc 	.word	0x200000bc
 8000864:	200000b8 	.word	0x200000b8
 8000868:	200000ac 	.word	0x200000ac
 800086c:	200000a8 	.word	0x200000a8

08000870 <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 800087c:	4a05      	ldr	r2, [pc, #20]	; (8000894 <set_NSS_pin+0x24>)
 800087e:	887b      	ldrh	r3, [r7, #2]
 8000880:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <set_NSS_pin+0x28>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	200000a8 	.word	0x200000a8
 8000898:	200000ac 	.word	0x200000ac

0800089c <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 80008a8:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <set_BUSY_pin+0x24>)
 80008aa:	887b      	ldrh	r3, [r7, #2]
 80008ac:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 80008ae:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <set_BUSY_pin+0x28>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	200000b8 	.word	0x200000b8
 80008c4:	200000bc 	.word	0x200000bc

080008c8 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 80008d4:	4a05      	ldr	r2, [pc, #20]	; (80008ec <set_NRESET_pin+0x24>)
 80008d6:	887b      	ldrh	r3, [r7, #2]
 80008d8:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <set_NRESET_pin+0x28>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6013      	str	r3, [r2, #0]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	200000b0 	.word	0x200000b0
 80008f0:	200000b4 	.word	0x200000b4

080008f4 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 8000900:	4a05      	ldr	r2, [pc, #20]	; (8000918 <set_DIO1_pin+0x24>)
 8000902:	887b      	ldrh	r3, [r7, #2]
 8000904:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <set_DIO1_pin+0x28>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	200000c0 	.word	0x200000c0
 800091c:	200000c4 	.word	0x200000c4

08000920 <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 8000920:	b084      	sub	sp, #16
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0
 8000926:	f107 0c08 	add.w	ip, r7, #8
 800092a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <set_hspi+0x2c>)
 8000930:	4618      	mov	r0, r3
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2264      	movs	r2, #100	; 0x64
 8000938:	4619      	mov	r1, r3
 800093a:	f003 fdd5 	bl	80044e8 <memcpy>
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000946:	b004      	add	sp, #16
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	200000c8 	.word	0x200000c8

08000950 <Tx_setup>:

void Tx_setup(){
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 8000956:	4b66      	ldr	r3, [pc, #408]	; (8000af0 <Tx_setup+0x1a0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a66      	ldr	r2, [pc, #408]	; (8000af4 <Tx_setup+0x1a4>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f001 f8a1 	bl	8001aa8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8000966:	4b64      	ldr	r3, [pc, #400]	; (8000af8 <Tx_setup+0x1a8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a64      	ldr	r2, [pc, #400]	; (8000afc <Tx_setup+0x1ac>)
 800096c:	8811      	ldrh	r1, [r2, #0]
 800096e:	2200      	movs	r2, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f001 f899 	bl	8001aa8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8000976:	2032      	movs	r0, #50	; 0x32
 8000978:	f000 fdea 	bl	8001550 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 800097c:	4b5e      	ldr	r3, [pc, #376]	; (8000af8 <Tx_setup+0x1a8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a5e      	ldr	r2, [pc, #376]	; (8000afc <Tx_setup+0x1ac>)
 8000982:	8811      	ldrh	r1, [r2, #0]
 8000984:	2201      	movs	r2, #1
 8000986:	4618      	mov	r0, r3
 8000988:	f001 f88e 	bl	8001aa8 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 800098c:	2100      	movs	r1, #0
 800098e:	485c      	ldr	r0, [pc, #368]	; (8000b00 <Tx_setup+0x1b0>)
 8000990:	f000 f930 	bl	8000bf4 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 8000994:	4b5b      	ldr	r3, [pc, #364]	; (8000b04 <Tx_setup+0x1b4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	4859      	ldr	r0, [pc, #356]	; (8000b00 <Tx_setup+0x1b0>)
 800099c:	f000 fb98 	bl	80010d0 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 80009a0:	4b59      	ldr	r3, [pc, #356]	; (8000b08 <Tx_setup+0x1b8>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4856      	ldr	r0, [pc, #344]	; (8000b00 <Tx_setup+0x1b0>)
 80009a8:	f000 fbcc 	bl	8001144 <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 80009ac:	4b57      	ldr	r3, [pc, #348]	; (8000b0c <Tx_setup+0x1bc>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	4853      	ldr	r0, [pc, #332]	; (8000b00 <Tx_setup+0x1b0>)
 80009b4:	f000 fa21 	bl	8000dfa <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 80009b8:	2101      	movs	r1, #1
 80009ba:	4851      	ldr	r0, [pc, #324]	; (8000b00 <Tx_setup+0x1b0>)
 80009bc:	f000 fb46 	bl	800104c <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 80009c0:	4b53      	ldr	r3, [pc, #332]	; (8000b10 <Tx_setup+0x1c0>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2264      	movs	r2, #100	; 0x64
 80009c6:	4619      	mov	r1, r3
 80009c8:	484d      	ldr	r0, [pc, #308]	; (8000b00 <Tx_setup+0x1b0>)
 80009ca:	f000 fb59 	bl	8001080 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 80009ce:	4b51      	ldr	r3, [pc, #324]	; (8000b14 <Tx_setup+0x1c4>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	4619      	mov	r1, r3
 80009d4:	484a      	ldr	r0, [pc, #296]	; (8000b00 <Tx_setup+0x1b0>)
 80009d6:	f000 f9ad 	bl	8000d34 <sx126x_cal>
    HAL_Delay(50);
 80009da:	2032      	movs	r0, #50	; 0x32
 80009dc:	f000 fdb8 	bl	8001550 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 80009e0:	4b4d      	ldr	r3, [pc, #308]	; (8000b18 <Tx_setup+0x1c8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	4846      	ldr	r0, [pc, #280]	; (8000b00 <Tx_setup+0x1b0>)
 80009e8:	f000 f98a 	bl	8000d00 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 80009ec:	4b4b      	ldr	r3, [pc, #300]	; (8000b1c <Tx_setup+0x1cc>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4a4b      	ldr	r2, [pc, #300]	; (8000b20 <Tx_setup+0x1d0>)
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	4842      	ldr	r0, [pc, #264]	; (8000b00 <Tx_setup+0x1b0>)
 80009f8:	f000 f9b6 	bl	8000d68 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 80009fc:	2004      	movs	r0, #4
 80009fe:	f003 fd63 	bl	80044c8 <malloc>
 8000a02:	4603      	mov	r3, r0
 8000a04:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 8000a06:	4b47      	ldr	r3, [pc, #284]	; (8000b24 <Tx_setup+0x1d4>)
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 8000a0e:	4b46      	ldr	r3, [pc, #280]	; (8000b28 <Tx_setup+0x1d8>)
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 8000a16:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <Tx_setup+0x1dc>)
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 8000a1e:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <Tx_setup+0x1e0>)
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 8000a26:	68f9      	ldr	r1, [r7, #12]
 8000a28:	4835      	ldr	r0, [pc, #212]	; (8000b00 <Tx_setup+0x1b0>)
 8000a2a:	f000 f9c1 	bl	8000db0 <sx126x_set_pa_cfg>
    free(params);
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f003 fd52 	bl	80044d8 <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 8000a34:	4b3f      	ldr	r3, [pc, #252]	; (8000b34 <Tx_setup+0x1e4>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	4a3f      	ldr	r2, [pc, #252]	; (8000b38 <Tx_setup+0x1e8>)
 8000a3c:	7812      	ldrb	r2, [r2, #0]
 8000a3e:	4619      	mov	r1, r3
 8000a40:	482f      	ldr	r0, [pc, #188]	; (8000b00 <Tx_setup+0x1b0>)
 8000a42:	f000 fb99 	bl	8001178 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 8000a46:	4b3d      	ldr	r3, [pc, #244]	; (8000b3c <Tx_setup+0x1ec>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4a3d      	ldr	r2, [pc, #244]	; (8000b40 <Tx_setup+0x1f0>)
 8000a4c:	7812      	ldrb	r2, [r2, #0]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	482b      	ldr	r0, [pc, #172]	; (8000b00 <Tx_setup+0x1b0>)
 8000a52:	f000 fc4f 	bl	80012f4 <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 8000a56:	2004      	movs	r0, #4
 8000a58:	f003 fd36 	bl	80044c8 <malloc>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 8000a60:	4b38      	ldr	r3, [pc, #224]	; (8000b44 <Tx_setup+0x1f4>)
 8000a62:	781a      	ldrb	r2, [r3, #0]
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 8000a68:	4b37      	ldr	r3, [pc, #220]	; (8000b48 <Tx_setup+0x1f8>)
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 8000a70:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <Tx_setup+0x1fc>)
 8000a72:	781a      	ldrb	r2, [r3, #0]
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 8000a78:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <Tx_setup+0x200>)
 8000a7a:	781a      	ldrb	r2, [r3, #0]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	481f      	ldr	r0, [pc, #124]	; (8000b00 <Tx_setup+0x1b0>)
 8000a84:	f000 fb9c 	bl	80011c0 <sx126x_set_lora_mod_params>
    free(mod_params);
 8000a88:	68b8      	ldr	r0, [r7, #8]
 8000a8a:	f003 fd25 	bl	80044d8 <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8000a8e:	2006      	movs	r0, #6
 8000a90:	f003 fd1a 	bl	80044c8 <malloc>
 8000a94:	4603      	mov	r3, r0
 8000a96:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 8000a98:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <Tx_setup+0x204>)
 8000a9a:	881a      	ldrh	r2, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 8000aa0:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <Tx_setup+0x208>)
 8000aa2:	781a      	ldrb	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 8000aa8:	4b2c      	ldr	r3, [pc, #176]	; (8000b5c <Tx_setup+0x20c>)
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 8000ab0:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <Tx_setup+0x210>)
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 8000ab8:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <Tx_setup+0x214>)
 8000aba:	781a      	ldrb	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	480f      	ldr	r0, [pc, #60]	; (8000b00 <Tx_setup+0x1b0>)
 8000ac4:	f000 fba8 	bl	8001218 <sx126x_set_lora_pkt_params>
    free(lora_params);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f003 fd05 	bl	80044d8 <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 8000ace:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <Tx_setup+0x218>)
 8000ad0:	8819      	ldrh	r1, [r3, #0]
 8000ad2:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <Tx_setup+0x21c>)
 8000ad4:	881a      	ldrh	r2, [r3, #0]
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <Tx_setup+0x220>)
 8000ad8:	8818      	ldrh	r0, [r3, #0]
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <Tx_setup+0x224>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	4807      	ldr	r0, [pc, #28]	; (8000b00 <Tx_setup+0x1b0>)
 8000ae4:	f000 fa15 	bl	8000f12 <sx126x_set_dio_irq_params>

}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200000b4 	.word	0x200000b4
 8000af4:	200000b0 	.word	0x200000b0
 8000af8:	200000ac 	.word	0x200000ac
 8000afc:	200000a8 	.word	0x200000a8
 8000b00:	200000c8 	.word	0x200000c8
 8000b04:	20000000 	.word	0x20000000
 8000b08:	20000004 	.word	0x20000004
 8000b0c:	20000005 	.word	0x20000005
 8000b10:	20000006 	.word	0x20000006
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000007 	.word	0x20000007
 8000b1c:	20000009 	.word	0x20000009
 8000b20:	2000000a 	.word	0x2000000a
 8000b24:	2000000b 	.word	0x2000000b
 8000b28:	2000000c 	.word	0x2000000c
 8000b2c:	2000012c 	.word	0x2000012c
 8000b30:	2000000d 	.word	0x2000000d
 8000b34:	2000000e 	.word	0x2000000e
 8000b38:	2000000f 	.word	0x2000000f
 8000b3c:	2000012d 	.word	0x2000012d
 8000b40:	2000012e 	.word	0x2000012e
 8000b44:	20000010 	.word	0x20000010
 8000b48:	20000011 	.word	0x20000011
 8000b4c:	20000012 	.word	0x20000012
 8000b50:	2000012f 	.word	0x2000012f
 8000b54:	20000014 	.word	0x20000014
 8000b58:	20000130 	.word	0x20000130
 8000b5c:	20000016 	.word	0x20000016
 8000b60:	20000017 	.word	0x20000017
 8000b64:	20000131 	.word	0x20000131
 8000b68:	20000018 	.word	0x20000018
 8000b6c:	2000001a 	.word	0x2000001a
 8000b70:	20000132 	.word	0x20000132
 8000b74:	20000134 	.word	0x20000134

08000b78 <TxProtocol>:

void TxProtocol(uint8_t data[], uint8_t data_length){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <TxProtocol+0x74>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4819      	ldr	r0, [pc, #100]	; (8000bf0 <TxProtocol+0x78>)
 8000b8c:	f000 fa38 	bl	8001000 <sx126x_clear_irq_status>
 8000b90:	4603      	mov	r3, r0
 8000b92:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_write_buffer(&hspi, 0, data, data_length); // 0 is the offset
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4815      	ldr	r0, [pc, #84]	; (8000bf0 <TxProtocol+0x78>)
 8000b9c:	f000 f99a 	bl	8000ed4 <sx126x_write_buffer>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_tx(&hspi, 6000, data_length);
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	f241 7170 	movw	r1, #6000	; 0x1770
 8000bac:	4810      	ldr	r0, [pc, #64]	; (8000bf0 <TxProtocol+0x78>)
 8000bae:	f000 f83b 	bl	8000c28 <sx126x_set_tx>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1400);
 8000bb6:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8000bba:	f000 fcc9 	bl	8001550 <HAL_Delay>

    sx126x_irq_mask_t irq;
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <TxProtocol+0x78>)
 8000bc6:	f000 f9e9 	bl	8000f9c <sx126x_get_irq_status>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_TX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 8000bce:	89bb      	ldrh	r3, [r7, #12]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d104      	bne.n	8000be2 <TxProtocol+0x6a>
 8000bd8:	89bb      	ldrh	r3, [r7, #12]
 8000bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d0ed      	beq.n	8000bbe <TxProtocol+0x46>
}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000001a 	.word	0x2000001a
 8000bf0:	200000c8 	.word	0x200000c8

08000bf4 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af02      	add	r7, sp, #8
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 8000c00:	2300      	movs	r3, #0
 8000c02:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 8000c0c:	f107 010c 	add.w	r1, r7, #12
 8000c10:	2300      	movs	r3, #0
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2300      	movs	r3, #0
 8000c16:	2202      	movs	r2, #2
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fd99 	bl	8000750 <sx126x_hal_write>
 8000c1e:	4603      	mov	r3, r0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms , uint8_t lora_data_length)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	4613      	mov	r3, r2
 8000c34:	71fb      	strb	r3, [r7, #7]
    if (packet_type == SX126X_PKT_TYPE_LORA) {
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <sx126x_set_tx+0x7c>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d11e      	bne.n	8000c7c <sx126x_set_tx+0x54>
        struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8000c3e:	2006      	movs	r0, #6
 8000c40:	f003 fc42 	bl	80044c8 <malloc>
 8000c44:	4603      	mov	r3, r0
 8000c46:	617b      	str	r3, [r7, #20]
        lora_params->preamble_len_in_symb=pkt_preamble_len;
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <sx126x_set_tx+0x80>)
 8000c4a:	881a      	ldrh	r2, [r3, #0]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	801a      	strh	r2, [r3, #0]
        lora_params->header_type=header_type;
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <sx126x_set_tx+0x84>)
 8000c52:	781a      	ldrb	r2, [r3, #0]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	709a      	strb	r2, [r3, #2]
        lora_params->pld_len_in_bytes=lora_data_length;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	70da      	strb	r2, [r3, #3]
        lora_params->crc_is_on=crc_is_on;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <sx126x_set_tx+0x88>)
 8000c60:	781a      	ldrb	r2, [r3, #0]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	711a      	strb	r2, [r3, #4]
        lora_params->invert_iq_is_on=invert_iq_is_on;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <sx126x_set_tx+0x8c>)
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	715a      	strb	r2, [r3, #5]
        sx126x_set_lora_pkt_params(&hspi, lora_params);
 8000c6e:	6979      	ldr	r1, [r7, #20]
 8000c70:	4811      	ldr	r0, [pc, #68]	; (8000cb8 <sx126x_set_tx+0x90>)
 8000c72:	f000 fad1 	bl	8001218 <sx126x_set_lora_pkt_params>
        free(lora_params);
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f003 fc2e 	bl	80044d8 <free>
    }

    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000c82:	d301      	bcc.n	8000c88 <sx126x_set_tx+0x60>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 8000c84:	2302      	movs	r3, #2
 8000c86:	e008      	b.n	8000c9a <sx126x_set_tx+0x72>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 8000c88:	68b8      	ldr	r0, [r7, #8]
 8000c8a:	f000 fb7d 	bl	8001388 <sx126x_convert_timeout_in_ms_to_rtc_step>
 8000c8e:	6138      	str	r0, [r7, #16]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 8000c90:	6939      	ldr	r1, [r7, #16]
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f000 f812 	bl	8000cbc <sx126x_set_tx_with_timeout_in_rtc_step>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000004 	.word	0x20000004
 8000ca8:	20000014 	.word	0x20000014
 8000cac:	20000130 	.word	0x20000130
 8000cb0:	20000017 	.word	0x20000017
 8000cb4:	20000131 	.word	0x20000131
 8000cb8:	200000c8 	.word	0x200000c8

08000cbc <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_TX] = { 0 };
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_TX;
 8000cca:	2383      	movs	r3, #131	; 0x83
 8000ccc:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	0c1b      	lsrs	r3, r3, #16
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 8000ce4:	f107 010c 	add.w	r1, r7, #12
 8000ce8:	2300      	movs	r3, #0
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2300      	movs	r3, #0
 8000cee:	2204      	movs	r2, #4
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fd2d 	bl	8000750 <sx126x_hal_write>
 8000cf6:	4603      	mov	r3, r0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 8000d10:	2396      	movs	r3, #150	; 0x96
 8000d12:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 8000d18:	f107 010c 	add.w	r1, r7, #12
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2300      	movs	r3, #0
 8000d22:	2202      	movs	r2, #2
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fd13 	bl	8000750 <sx126x_hal_write>
 8000d2a:	4603      	mov	r3, r0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af02      	add	r7, sp, #8
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 8000d40:	2300      	movs	r3, #0
 8000d42:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 8000d44:	2389      	movs	r3, #137	; 0x89
 8000d46:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 8000d4c:	f107 010c 	add.w	r1, r7, #12
 8000d50:	2300      	movs	r3, #0
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2300      	movs	r3, #0
 8000d56:	2202      	movs	r2, #2
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fcf9 	bl	8000750 <sx126x_hal_write>
 8000d5e:	4603      	mov	r3, r0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af02      	add	r7, sp, #8
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	70fb      	strb	r3, [r7, #3]
 8000d74:	4613      	mov	r3, r2
 8000d76:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <sx126x_cal_img_hex+0x44>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	81bb      	strh	r3, [r7, #12]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 8000d82:	2398      	movs	r3, #152	; 0x98
 8000d84:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 8000d86:	78fb      	ldrb	r3, [r7, #3]
 8000d88:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 8000d8a:	78bb      	ldrb	r3, [r7, #2]
 8000d8c:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 8000d8e:	f107 010c 	add.w	r1, r7, #12
 8000d92:	2300      	movs	r3, #0
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2300      	movs	r3, #0
 8000d98:	2203      	movs	r2, #3
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fcd8 	bl	8000750 <sx126x_hal_write>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	08004e04 	.word	0x08004e04

08000db0 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 8000dc2:	2395      	movs	r3, #149	; 0x95
 8000dc4:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	789b      	ldrb	r3, [r3, #2]
 8000dd6:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	78db      	ldrb	r3, [r3, #3]
 8000ddc:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 8000dde:	f107 0108 	add.w	r1, r7, #8
 8000de2:	2300      	movs	r3, #0
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2300      	movs	r3, #0
 8000de8:	2205      	movs	r2, #5
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fcb0 	bl	8000750 <sx126x_hal_write>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af02      	add	r7, sp, #8
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	460b      	mov	r3, r1
 8000e04:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 8000e06:	2300      	movs	r3, #0
 8000e08:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 8000e0a:	2393      	movs	r3, #147	; 0x93
 8000e0c:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 8000e12:	f107 010c 	add.w	r1, r7, #12
 8000e16:	2300      	movs	r3, #0
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fc96 	bl	8000750 <sx126x_hal_write>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	817b      	strh	r3, [r7, #10]
 8000e40:	4613      	mov	r3, r2
 8000e42:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <sx126x_write_register+0x50>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	82bb      	strh	r3, [r7, #20]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 8000e4e:	230d      	movs	r3, #13
 8000e50:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 8000e52:	897b      	ldrh	r3, [r7, #10]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 8000e5c:	897b      	ldrh	r3, [r7, #10]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 8000e62:	7a7b      	ldrb	r3, [r7, #9]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	f107 0114 	add.w	r1, r7, #20
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2203      	movs	r2, #3
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f7ff fc6d 	bl	8000750 <sx126x_hal_write>
 8000e76:	4603      	mov	r3, r0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	08004e04 	.word	0x08004e04

08000e84 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	460b      	mov	r3, r1
 8000e92:	817b      	strh	r3, [r7, #10]
 8000e94:	4613      	mov	r3, r2
 8000e96:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 8000ea0:	231d      	movs	r3, #29
 8000ea2:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 8000ea4:	897b      	ldrh	r3, [r7, #10]
 8000ea6:	0a1b      	lsrs	r3, r3, #8
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 8000eae:	897b      	ldrh	r3, [r7, #10]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 8000eb4:	f107 0110 	add.w	r1, r7, #16
 8000eb8:	7a7b      	ldrb	r3, [r7, #9]
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f7ff fc87 	bl	80007d4 <sx126x_hal_read>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	75fb      	strb	r3, [r7, #23]

    return status;
 8000eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t buffer_offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	72fb      	strb	r3, [r7, #11]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	72bb      	strb	r3, [r7, #10]
    uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = { 0 };
 8000ee8:	2300      	movs	r3, #0
 8000eea:	82bb      	strh	r3, [r7, #20]

    buf[0] = SX126X_WRITE_BUFFER;
 8000eec:	230e      	movs	r3, #14
 8000eee:	753b      	strb	r3, [r7, #20]

    buf[1] = buffer_offset;
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	757b      	strb	r3, [r7, #21]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 8000ef4:	7abb      	ldrb	r3, [r7, #10]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	f107 0114 	add.w	r1, r7, #20
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2202      	movs	r2, #2
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f7ff fc24 	bl	8000750 <sx126x_hal_write>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b08a      	sub	sp, #40	; 0x28
 8000f16:	af02      	add	r7, sp, #8
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4603      	mov	r3, r0
 8000f22:	817b      	strh	r3, [r7, #10]
 8000f24:	460b      	mov	r3, r1
 8000f26:	813b      	strh	r3, [r7, #8]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 8000f3e:	897b      	ldrh	r3, [r7, #10]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 8000f48:	897b      	ldrh	r3, [r7, #10]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 8000f4e:	893b      	ldrh	r3, [r7, #8]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 8000f58:	893b      	ldrh	r3, [r7, #8]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 8000f6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 8000f78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 8000f7e:	f107 0114 	add.w	r1, r7, #20
 8000f82:	2300      	movs	r3, #0
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2300      	movs	r3, #0
 8000f88:	2209      	movs	r2, #9
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f7ff fbe0 	bl	8000750 <sx126x_hal_write>
 8000f90:	4603      	mov	r3, r0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3720      	adds	r7, #32
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <sx126x_get_irq_status>:

sx126x_status_t sx126x_get_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_IRQ_STATUS]             = { 0x00 }; //0x00 is no operational, its just so that theyre equal
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
    uint8_t         received_buf[sizeof( sx126x_irq_mask_t )+1] = { 0x00 };
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <sx126x_get_irq_status+0x60>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	81bb      	strh	r3, [r7, #12]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                      = SX126X_STATUS_ERROR;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_IRQ_STATUS;
 8000fb8:	2312      	movs	r3, #18
 8000fba:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_IRQ_STATUS, received_buf,
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	f107 0110 	add.w	r1, r7, #16
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	9200      	str	r2, [sp, #0]
 8000fc8:	2204      	movs	r2, #4
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fc02 	bl	80007d4 <sx126x_hal_read>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_IRQ_STATUS );

    if( status == SX126X_STATUS_OK )
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10b      	bne.n	8000ff2 <sx126x_get_irq_status+0x56>
    {
        *irq = ( ( sx126x_irq_mask_t ) received_buf[1] << 8 ) | ( ( sx126x_irq_mask_t ) received_buf[2] << 0 );
 8000fda:	7b7b      	ldrb	r3, [r7, #13]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	b21a      	sxth	r2, r3
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	801a      	strh	r2, [r3, #0]
        status = received_buf[0]; //its the status
 8000fee:	7b3b      	ldrb	r3, [r7, #12]
 8000ff0:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	08004e04 	.word	0x08004e04

08001000 <sx126x_clear_irq_status>:

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af02      	add	r7, sp, #8
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = { 0 };
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <sx126x_clear_irq_status+0x48>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	81bb      	strh	r3, [r7, #12]
 8001012:	2300      	movs	r3, #0
 8001014:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CLR_IRQ_STATUS;
 8001016:	2302      	movs	r3, #2
 8001018:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	b29b      	uxth	r3, r3
 8001020:	b2db      	uxtb	r3, r3
 8001022:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 8001024:	887b      	ldrh	r3, [r7, #2]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 800102a:	f107 010c 	add.w	r1, r7, #12
 800102e:	2300      	movs	r3, #0
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2300      	movs	r3, #0
 8001034:	2203      	movs	r2, #3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff fb8a 	bl	8000750 <sx126x_hal_write>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	08004e04 	.word	0x08004e04

0800104c <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af02      	add	r7, sp, #8
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 8001058:	2300      	movs	r3, #0
 800105a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 800105c:	239d      	movs	r3, #157	; 0x9d
 800105e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 8001064:	f107 010c 	add.w	r1, r7, #12
 8001068:	2300      	movs	r3, #0
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2300      	movs	r3, #0
 800106e:	2202      	movs	r2, #2
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff fb6d 	bl	8000750 <sx126x_hal_write>
 8001076:	4603      	mov	r3, r0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af02      	add	r7, sp, #8
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	460b      	mov	r3, r1
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	2300      	movs	r3, #0
 8001094:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 8001096:	2397      	movs	r3, #151	; 0x97
 8001098:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 800109a:	7afb      	ldrb	r3, [r7, #11]
 800109c:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	0c1b      	lsrs	r3, r3, #16
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 80010b4:	f107 0110 	add.w	r1, r7, #16
 80010b8:	2300      	movs	r3, #0
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	2205      	movs	r2, #5
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f7ff fb45 	bl	8000750 <sx126x_hal_write>
 80010c6:	4603      	mov	r3, r0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 80010da:	6838      	ldr	r0, [r7, #0]
 80010dc:	f000 f92e 	bl	800133c <sx126x_convert_freq_in_hz_to_pll_step>
 80010e0:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 80010e2:	68f9      	ldr	r1, [r7, #12]
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f805 	bl	80010f4 <sx126x_set_rf_freq_in_pll_steps>
 80010ea:	4603      	mov	r3, r0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	2300      	movs	r3, #0
 8001104:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 8001106:	2386      	movs	r3, #134	; 0x86
 8001108:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	0e1b      	lsrs	r3, r3, #24
 800110e:	b2db      	uxtb	r3, r3
 8001110:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	0c1b      	lsrs	r3, r3, #16
 8001116:	b2db      	uxtb	r3, r3
 8001118:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	b2db      	uxtb	r3, r3
 8001120:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 8001128:	f107 0108 	add.w	r1, r7, #8
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2300      	movs	r3, #0
 8001132:	2205      	movs	r2, #5
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff fb0b 	bl	8000750 <sx126x_hal_write>
 800113a:	4603      	mov	r3, r0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af02      	add	r7, sp, #8
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 8001150:	2300      	movs	r3, #0
 8001152:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 8001154:	238a      	movs	r3, #138	; 0x8a
 8001156:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800115c:	f107 010c 	add.w	r1, r7, #12
 8001160:	2300      	movs	r3, #0
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2300      	movs	r3, #0
 8001166:	2202      	movs	r2, #2
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff faf1 	bl	8000750 <sx126x_hal_write>
 800116e:	4603      	mov	r3, r0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
 8001184:	4613      	mov	r3, r2
 8001186:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <sx126x_set_tx_params+0x44>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	81bb      	strh	r3, [r7, #12]
 800118e:	2300      	movs	r3, #0
 8001190:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 8001192:	238e      	movs	r3, #142	; 0x8e
 8001194:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 800119a:	78bb      	ldrb	r3, [r7, #2]
 800119c:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800119e:	f107 010c 	add.w	r1, r7, #12
 80011a2:	2300      	movs	r3, #0
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2300      	movs	r3, #0
 80011a8:	2203      	movs	r2, #3
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fad0 	bl	8000750 <sx126x_hal_write>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	08004e04 	.word	0x08004e04

080011c0 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 80011ca:	2303      	movs	r3, #3
 80011cc:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	2300      	movs	r3, #0
 80011d4:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 80011d6:	238b      	movs	r3, #139	; 0x8b
 80011d8:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	785b      	ldrb	r3, [r3, #1]
 80011e4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	78db      	ldrb	r3, [r3, #3]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 80011f8:	f107 0108 	add.w	r1, r7, #8
 80011fc:	2300      	movs	r3, #0
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2300      	movs	r3, #0
 8001202:	2205      	movs	r2, #5
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff faa3 	bl	8000750 <sx126x_hal_write>
 800120a:	4603      	mov	r3, r0
 800120c:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af02      	add	r7, sp, #8
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 8001222:	2303      	movs	r3, #3
 8001224:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	2100      	movs	r1, #0
 8001230:	460a      	mov	r2, r1
 8001232:	801a      	strh	r2, [r3, #0]
 8001234:	460a      	mov	r2, r1
 8001236:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 8001238:	238c      	movs	r3, #140	; 0x8c
 800123a:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	b29b      	uxth	r3, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	789b      	ldrb	r3, [r3, #2]
 8001254:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	78db      	ldrb	r3, [r3, #3]
 800125a:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	791b      	ldrb	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <sx126x_set_lora_pkt_params+0x50>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <sx126x_set_lora_pkt_params+0x52>
 8001268:	2300      	movs	r3, #0
 800126a:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	795b      	ldrb	r3, [r3, #5]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <sx126x_set_lora_pkt_params+0x60>
 8001274:	2301      	movs	r3, #1
 8001276:	e000      	b.n	800127a <sx126x_set_lora_pkt_params+0x62>
 8001278:	2300      	movs	r3, #0
 800127a:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800127c:	f107 0110 	add.w	r1, r7, #16
 8001280:	2300      	movs	r3, #0
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2300      	movs	r3, #0
 8001286:	2207      	movs	r2, #7
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff fa61 	bl	8000750 <sx126x_hal_write>
 800128e:	4603      	mov	r3, r0
 8001290:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d127      	bne.n	80012e8 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800129c:	f107 020f 	add.w	r2, r7, #15
 80012a0:	2301      	movs	r3, #1
 80012a2:	f240 7136 	movw	r1, #1846	; 0x736
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fdec 	bl	8000e84 <sx126x_read_register>
 80012ac:	4603      	mov	r3, r0
 80012ae:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d118      	bne.n	80012e8 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	795b      	ldrb	r3, [r3, #5]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	f023 0304 	bic.w	r3, r3, #4
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e004      	b.n	80012d4 <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 80012d4:	f107 020f 	add.w	r2, r7, #15
 80012d8:	2301      	movs	r3, #1
 80012da:	f240 7136 	movw	r1, #1846	; 0x736
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fda6 	bl	8000e30 <sx126x_write_register>
 80012e4:	4603      	mov	r3, r0
 80012e6:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
 8001300:	4613      	mov	r3, r2
 8001302:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <sx126x_set_buffer_base_address+0x44>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	81bb      	strh	r3, [r7, #12]
 800130a:	2300      	movs	r3, #0
 800130c:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 800130e:	238f      	movs	r3, #143	; 0x8f
 8001310:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 8001316:	78bb      	ldrb	r3, [r7, #2]
 8001318:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800131a:	f107 010c 	add.w	r1, r7, #12
 800131e:	2300      	movs	r3, #0
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2300      	movs	r3, #0
 8001324:	2203      	movs	r2, #3
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fa12 	bl	8000750 <sx126x_hal_write>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	08004e04 	.word	0x08004e04

0800133c <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 8001348:	fba2 2303 	umull	r2, r3, r2, r3
 800134c:	0b1b      	lsrs	r3, r3, #12
 800134e:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f643 5209 	movw	r2, #15625	; 0x3d09
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	039b      	lsls	r3, r3, #14
 8001368:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800136c:	3304      	adds	r3, #4
 800136e:	4905      	ldr	r1, [pc, #20]	; (8001384 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 8001370:	fba1 1303 	umull	r1, r3, r1, r3
 8001374:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 8001376:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	431bde83 	.word	0x431bde83

08001388 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	019b      	lsls	r3, r3, #6
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a8:	4a14      	ldr	r2, [pc, #80]	; (80013fc <_sbrk+0x5c>)
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <_sbrk+0x60>)
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <_sbrk+0x64>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <_sbrk+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d0:	f003 f850 	bl	8004474 <__errno>
 80013d4:	4603      	mov	r3, r0
 80013d6:	220c      	movs	r2, #12
 80013d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	e009      	b.n	80013f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <_sbrk+0x64>)
 80013f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20010000 	.word	0x20010000
 8001400:	00000400 	.word	0x00000400
 8001404:	20000138 	.word	0x20000138
 8001408:	200002c0 	.word	0x200002c0

0800140c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <SystemInit+0x20>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <SystemInit+0x20>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001468 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <LoopForever+0x6>)
  ldr r1, =_edata
 8001436:	490e      	ldr	r1, [pc, #56]	; (8001470 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001438:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <LoopForever+0xe>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <LoopForever+0x12>)
  ldr r4, =_ebss
 800144c:	4c0b      	ldr	r4, [pc, #44]	; (800147c <LoopForever+0x16>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800145a:	f7ff ffd7 	bl	800140c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145e:	f003 f80f 	bl	8004480 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001462:	f7fe ff0d 	bl	8000280 <main>

08001466 <LoopForever>:

LoopForever:
    b LoopForever
 8001466:	e7fe      	b.n	8001466 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001468:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001474:	08004e7c 	.word	0x08004e7c
  ldr r2, =_sbss
 8001478:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800147c:	200002bc 	.word	0x200002bc

08001480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC1_2_IRQHandler>
	...

08001484 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_Init+0x28>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a07      	ldr	r2, [pc, #28]	; (80014ac <HAL_Init+0x28>)
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001494:	2003      	movs	r0, #3
 8001496:	f000 f931 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800149a:	200f      	movs	r0, #15
 800149c:	f000 f808 	bl	80014b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a0:	f7ff f880 	bl	80005a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40022000 	.word	0x40022000

080014b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_InitTick+0x54>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_InitTick+0x58>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f93b 	bl	800174a <HAL_SYSTICK_Config>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e00e      	b.n	80014fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b0f      	cmp	r3, #15
 80014e2:	d80a      	bhi.n	80014fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e4:	2200      	movs	r2, #0
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f000 f911 	bl	8001712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f0:	4a06      	ldr	r2, [pc, #24]	; (800150c <HAL_InitTick+0x5c>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e000      	b.n	80014fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000001c 	.word	0x2000001c
 8001508:	20000024 	.word	0x20000024
 800150c:	20000020 	.word	0x20000020

08001510 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_IncTick+0x20>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_IncTick+0x24>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4413      	add	r3, r2
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_IncTick+0x24>)
 8001522:	6013      	str	r3, [r2, #0]
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000024 	.word	0x20000024
 8001534:	200002a8 	.word	0x200002a8

08001538 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return uwTick;  
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <HAL_GetTick+0x14>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	200002a8 	.word	0x200002a8

08001550 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001558:	f7ff ffee 	bl	8001538 <HAL_GetTick>
 800155c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001568:	d005      	beq.n	8001576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_Delay+0x44>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4413      	add	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001576:	bf00      	nop
 8001578:	f7ff ffde 	bl	8001538 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	429a      	cmp	r2, r3
 8001586:	d8f7      	bhi.n	8001578 <HAL_Delay+0x28>
  {
  }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000024 	.word	0x20000024

08001598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c8:	d301      	bcc.n	80016ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00f      	b.n	80016ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <SysTick_Config+0x40>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d6:	210f      	movs	r1, #15
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f7ff ff8e 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <SysTick_Config+0x40>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <SysTick_Config+0x40>)
 80016e8:	2207      	movs	r2, #7
 80016ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e000e010 	.word	0xe000e010

080016fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff47 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001724:	f7ff ff5c 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 8001728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f7ff ff8e 	bl	8001650 <NVIC_EncodePriority>
 8001734:	4602      	mov	r2, r0
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff5d 	bl	80015fc <__NVIC_SetPriority>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ffb0 	bl	80016b8 <SysTick_Config>
 8001758:	4603      	mov	r3, r0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001772:	e160      	b.n	8001a36 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2101      	movs	r1, #1
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	4013      	ands	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 8152 	beq.w	8001a30 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b01      	cmp	r3, #1
 8001796:	d005      	beq.n	80017a4 <HAL_GPIO_Init+0x40>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d130      	bne.n	8001806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017da:	2201      	movs	r2, #1
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	f003 0201 	and.w	r2, r3, #1
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	2b03      	cmp	r3, #3
 8001810:	d017      	beq.n	8001842 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2203      	movs	r2, #3
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d123      	bne.n	8001896 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	08da      	lsrs	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3208      	adds	r2, #8
 8001856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	220f      	movs	r2, #15
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	691a      	ldr	r2, [r3, #16]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	08da      	lsrs	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3208      	adds	r2, #8
 8001890:	6939      	ldr	r1, [r7, #16]
 8001892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0203 	and.w	r2, r3, #3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80ac 	beq.w	8001a30 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d8:	4b5e      	ldr	r3, [pc, #376]	; (8001a54 <HAL_GPIO_Init+0x2f0>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a5d      	ldr	r2, [pc, #372]	; (8001a54 <HAL_GPIO_Init+0x2f0>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b5b      	ldr	r3, [pc, #364]	; (8001a54 <HAL_GPIO_Init+0x2f0>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018f0:	4a59      	ldr	r2, [pc, #356]	; (8001a58 <HAL_GPIO_Init+0x2f4>)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	220f      	movs	r2, #15
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800191a:	d025      	beq.n	8001968 <HAL_GPIO_Init+0x204>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a4f      	ldr	r2, [pc, #316]	; (8001a5c <HAL_GPIO_Init+0x2f8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d01f      	beq.n	8001964 <HAL_GPIO_Init+0x200>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a4e      	ldr	r2, [pc, #312]	; (8001a60 <HAL_GPIO_Init+0x2fc>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d019      	beq.n	8001960 <HAL_GPIO_Init+0x1fc>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a4d      	ldr	r2, [pc, #308]	; (8001a64 <HAL_GPIO_Init+0x300>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d013      	beq.n	800195c <HAL_GPIO_Init+0x1f8>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a4c      	ldr	r2, [pc, #304]	; (8001a68 <HAL_GPIO_Init+0x304>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00d      	beq.n	8001958 <HAL_GPIO_Init+0x1f4>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a4b      	ldr	r2, [pc, #300]	; (8001a6c <HAL_GPIO_Init+0x308>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d007      	beq.n	8001954 <HAL_GPIO_Init+0x1f0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a4a      	ldr	r2, [pc, #296]	; (8001a70 <HAL_GPIO_Init+0x30c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d101      	bne.n	8001950 <HAL_GPIO_Init+0x1ec>
 800194c:	2306      	movs	r3, #6
 800194e:	e00c      	b.n	800196a <HAL_GPIO_Init+0x206>
 8001950:	2307      	movs	r3, #7
 8001952:	e00a      	b.n	800196a <HAL_GPIO_Init+0x206>
 8001954:	2305      	movs	r3, #5
 8001956:	e008      	b.n	800196a <HAL_GPIO_Init+0x206>
 8001958:	2304      	movs	r3, #4
 800195a:	e006      	b.n	800196a <HAL_GPIO_Init+0x206>
 800195c:	2303      	movs	r3, #3
 800195e:	e004      	b.n	800196a <HAL_GPIO_Init+0x206>
 8001960:	2302      	movs	r3, #2
 8001962:	e002      	b.n	800196a <HAL_GPIO_Init+0x206>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_GPIO_Init+0x206>
 8001968:	2300      	movs	r3, #0
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	f002 0203 	and.w	r2, r2, #3
 8001970:	0092      	lsls	r2, r2, #2
 8001972:	4093      	lsls	r3, r2
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800197a:	4937      	ldr	r1, [pc, #220]	; (8001a58 <HAL_GPIO_Init+0x2f4>)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001988:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <HAL_GPIO_Init+0x310>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019ac:	4a31      	ldr	r2, [pc, #196]	; (8001a74 <HAL_GPIO_Init+0x310>)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019b2:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <HAL_GPIO_Init+0x310>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019d6:	4a27      	ldr	r2, [pc, #156]	; (8001a74 <HAL_GPIO_Init+0x310>)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <HAL_GPIO_Init+0x310>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a00:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <HAL_GPIO_Init+0x310>)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_GPIO_Init+0x310>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <HAL_GPIO_Init+0x310>)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f47f ae97 	bne.w	8001774 <HAL_GPIO_Init+0x10>
  }
}
 8001a46:	bf00      	nop
 8001a48:	bf00      	nop
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	48000400 	.word	0x48000400
 8001a60:	48000800 	.word	0x48000800
 8001a64:	48000c00 	.word	0x48000c00
 8001a68:	48001000 	.word	0x48001000
 8001a6c:	48001400 	.word	0x48001400
 8001a70:	48001800 	.word	0x48001800
 8001a74:	40010400 	.word	0x40010400

08001a78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e001      	b.n	8001a9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab8:	787b      	ldrb	r3, [r7, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f000 bf01 	b.w	80028f4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 8160 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b02:	4bae      	ldr	r3, [pc, #696]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d00c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b0e:	4bab      	ldr	r3, [pc, #684]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d159      	bne.n	8001bce <HAL_RCC_OscConfig+0xf6>
 8001b1a:	4ba8      	ldr	r3, [pc, #672]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b26:	d152      	bne.n	8001bce <HAL_RCC_OscConfig+0xf6>
 8001b28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b2c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b34:	fa93 f3a3 	rbit	r3, r3
 8001b38:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d102      	bne.n	8001b5a <HAL_RCC_OscConfig+0x82>
 8001b54:	4b99      	ldr	r3, [pc, #612]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	e015      	b.n	8001b86 <HAL_RCC_OscConfig+0xae>
 8001b5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b72:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b76:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b82:	4b8e      	ldr	r3, [pc, #568]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b8a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001b8e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001b92:	fa92 f2a2 	rbit	r2, r2
 8001b96:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001b9a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b9e:	fab2 f282 	clz	r2, r2
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f042 0220 	orr.w	r2, r2, #32
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f002 021f 	and.w	r2, r2, #31
 8001bae:	2101      	movs	r1, #1
 8001bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8102 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x2e8>
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f040 80fc 	bne.w	8001dc0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f000 be93 	b.w	80028f4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd8:	d106      	bne.n	8001be8 <HAL_RCC_OscConfig+0x110>
 8001bda:	4b78      	ldr	r3, [pc, #480]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a77      	ldr	r2, [pc, #476]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e030      	b.n	8001c4a <HAL_RCC_OscConfig+0x172>
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x134>
 8001bf2:	4b72      	ldr	r3, [pc, #456]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a71      	ldr	r2, [pc, #452]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b6f      	ldr	r3, [pc, #444]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a6e      	ldr	r2, [pc, #440]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e01e      	b.n	8001c4a <HAL_RCC_OscConfig+0x172>
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c16:	d10c      	bne.n	8001c32 <HAL_RCC_OscConfig+0x15a>
 8001c18:	4b68      	ldr	r3, [pc, #416]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a67      	ldr	r2, [pc, #412]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b65      	ldr	r3, [pc, #404]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a64      	ldr	r2, [pc, #400]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	e00b      	b.n	8001c4a <HAL_RCC_OscConfig+0x172>
 8001c32:	4b62      	ldr	r3, [pc, #392]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a61      	ldr	r2, [pc, #388]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b5f      	ldr	r3, [pc, #380]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a5e      	ldr	r2, [pc, #376]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d059      	beq.n	8001d08 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fc70 	bl	8001538 <HAL_GetTick>
 8001c58:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fc6b 	bl	8001538 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d902      	bls.n	8001c74 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	f000 be40 	b.w	80028f4 <HAL_RCC_OscConfig+0xe1c>
 8001c74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c78:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001c88:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d102      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x1ce>
 8001ca0:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	e015      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1fa>
 8001ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001caa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001cba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cbe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001cc2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cce:	4b3b      	ldr	r3, [pc, #236]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cd6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001cda:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001cde:	fa92 f2a2 	rbit	r2, r2
 8001ce2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001ce6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001cea:	fab2 f282 	clz	r2, r2
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f042 0220 	orr.w	r2, r2, #32
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f002 021f 	and.w	r2, r2, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0ab      	beq.n	8001c5e <HAL_RCC_OscConfig+0x186>
 8001d06:	e05c      	b.n	8001dc2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fc16 	bl	8001538 <HAL_GetTick>
 8001d0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d12:	f7ff fc11 	bl	8001538 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d902      	bls.n	8001d28 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	f000 bde6 	b.w	80028f4 <HAL_RCC_OscConfig+0xe1c>
 8001d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001d3c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d102      	bne.n	8001d5a <HAL_RCC_OscConfig+0x282>
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	e015      	b.n	8001d86 <HAL_RCC_OscConfig+0x2ae>
 8001d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d72:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d76:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_RCC_OscConfig+0x2e4>)
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d8a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001d8e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001d92:	fa92 f2a2 	rbit	r2, r2
 8001d96:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001d9a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d9e:	fab2 f282 	clz	r2, r2
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f042 0220 	orr.w	r2, r2, #32
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f002 021f 	and.w	r2, r2, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f202 	lsl.w	r2, r1, r2
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ab      	bne.n	8001d12 <HAL_RCC_OscConfig+0x23a>
 8001dba:	e002      	b.n	8001dc2 <HAL_RCC_OscConfig+0x2ea>
 8001dbc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 8170 	beq.w	80020b2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dd2:	4bd0      	ldr	r3, [pc, #832]	; (8002114 <HAL_RCC_OscConfig+0x63c>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00c      	beq.n	8001df8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dde:	4bcd      	ldr	r3, [pc, #820]	; (8002114 <HAL_RCC_OscConfig+0x63c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d16d      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3ee>
 8001dea:	4bca      	ldr	r3, [pc, #808]	; (8002114 <HAL_RCC_OscConfig+0x63c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001df6:	d166      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3ee>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001e0a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d102      	bne.n	8001e28 <HAL_RCC_OscConfig+0x350>
 8001e22:	4bbc      	ldr	r3, [pc, #752]	; (8002114 <HAL_RCC_OscConfig+0x63c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	e013      	b.n	8001e50 <HAL_RCC_OscConfig+0x378>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e40:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e4c:	4bb1      	ldr	r3, [pc, #708]	; (8002114 <HAL_RCC_OscConfig+0x63c>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	2202      	movs	r2, #2
 8001e52:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001e56:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001e5a:	fa92 f2a2 	rbit	r2, r2
 8001e5e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001e62:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e66:	fab2 f282 	clz	r2, r2
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f042 0220 	orr.w	r2, r2, #32
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f002 021f 	and.w	r2, r2, #31
 8001e76:	2101      	movs	r1, #1
 8001e78:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <HAL_RCC_OscConfig+0x3ba>
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d002      	beq.n	8001e92 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f000 bd31 	b.w	80028f4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4ba0      	ldr	r3, [pc, #640]	; (8002114 <HAL_RCC_OscConfig+0x63c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	21f8      	movs	r1, #248	; 0xf8
 8001ea2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001eaa:	fa91 f1a1 	rbit	r1, r1
 8001eae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001eb2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001eb6:	fab1 f181 	clz	r1, r1
 8001eba:	b2c9      	uxtb	r1, r1
 8001ebc:	408b      	lsls	r3, r1
 8001ebe:	4995      	ldr	r1, [pc, #596]	; (8002114 <HAL_RCC_OscConfig+0x63c>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec4:	e0f5      	b.n	80020b2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 8085 	beq.w	8001fdc <HAL_RCC_OscConfig+0x504>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001ee4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ef2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2301      	movs	r3, #1
 8001efc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7ff fb1b 	bl	8001538 <HAL_GetTick>
 8001f02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f08:	f7ff fb16 	bl	8001538 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d902      	bls.n	8001f1e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	f000 bceb 	b.w	80028f4 <HAL_RCC_OscConfig+0xe1c>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001f30:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_OscConfig+0x476>
 8001f48:	4b72      	ldr	r3, [pc, #456]	; (8002114 <HAL_RCC_OscConfig+0x63c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	e013      	b.n	8001f76 <HAL_RCC_OscConfig+0x49e>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001f60:	2302      	movs	r3, #2
 8001f62:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f66:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f72:	4b68      	ldr	r3, [pc, #416]	; (8002114 <HAL_RCC_OscConfig+0x63c>)
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	2202      	movs	r2, #2
 8001f78:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001f7c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f80:	fa92 f2a2 	rbit	r2, r2
 8001f84:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001f88:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f8c:	fab2 f282 	clz	r2, r2
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	f042 0220 	orr.w	r2, r2, #32
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	f002 021f 	and.w	r2, r2, #31
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0af      	beq.n	8001f08 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa8:	4b5a      	ldr	r3, [pc, #360]	; (8002114 <HAL_RCC_OscConfig+0x63c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	21f8      	movs	r1, #248	; 0xf8
 8001fb8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001fc0:	fa91 f1a1 	rbit	r1, r1
 8001fc4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001fc8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001fcc:	fab1 f181 	clz	r1, r1
 8001fd0:	b2c9      	uxtb	r1, r1
 8001fd2:	408b      	lsls	r3, r1
 8001fd4:	494f      	ldr	r1, [pc, #316]	; (8002114 <HAL_RCC_OscConfig+0x63c>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
 8001fda:	e06a      	b.n	80020b2 <HAL_RCC_OscConfig+0x5da>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001fee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ffc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	461a      	mov	r2, r3
 8002004:	2300      	movs	r3, #0
 8002006:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fa96 	bl	8001538 <HAL_GetTick>
 800200c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002012:	f7ff fa91 	bl	8001538 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d902      	bls.n	8002028 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	f000 bc66 	b.w	80028f4 <HAL_RCC_OscConfig+0xe1c>
 8002028:	2302      	movs	r3, #2
 800202a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800203a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	095b      	lsrs	r3, r3, #5
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d102      	bne.n	8002058 <HAL_RCC_OscConfig+0x580>
 8002052:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_RCC_OscConfig+0x63c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	e013      	b.n	8002080 <HAL_RCC_OscConfig+0x5a8>
 8002058:	2302      	movs	r3, #2
 800205a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800206a:	2302      	movs	r3, #2
 800206c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002070:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_RCC_OscConfig+0x63c>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	2202      	movs	r2, #2
 8002082:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002086:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800208a:	fa92 f2a2 	rbit	r2, r2
 800208e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002092:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002096:	fab2 f282 	clz	r2, r2
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f042 0220 	orr.w	r2, r2, #32
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f002 021f 	and.w	r2, r2, #31
 80020a6:	2101      	movs	r1, #1
 80020a8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1af      	bne.n	8002012 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80da 	beq.w	8002276 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d069      	beq.n	80021a0 <HAL_RCC_OscConfig+0x6c8>
 80020cc:	2301      	movs	r3, #1
 80020ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80020de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_OscConfig+0x640>)
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	461a      	mov	r2, r3
 80020f2:	2301      	movs	r3, #1
 80020f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f6:	f7ff fa1f 	bl	8001538 <HAL_GetTick>
 80020fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	e00d      	b.n	800211c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002100:	f7ff fa1a 	bl	8001538 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d905      	bls.n	800211c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e3ef      	b.n	80028f4 <HAL_RCC_OscConfig+0xe1c>
 8002114:	40021000 	.word	0x40021000
 8002118:	10908120 	.word	0x10908120
 800211c:	2302      	movs	r3, #2
 800211e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002126:	fa93 f2a3 	rbit	r2, r3
 800212a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002134:	2202      	movs	r2, #2
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	fa93 f2a3 	rbit	r2, r3
 8002142:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800214c:	2202      	movs	r2, #2
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	fa93 f2a3 	rbit	r2, r3
 800215a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800215e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002160:	4ba4      	ldr	r3, [pc, #656]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 8002162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002164:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002168:	2102      	movs	r1, #2
 800216a:	6019      	str	r1, [r3, #0]
 800216c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	fa93 f1a3 	rbit	r1, r3
 8002176:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800217a:	6019      	str	r1, [r3, #0]
  return result;
 800217c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800218c:	b2db      	uxtb	r3, r3
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	2101      	movs	r1, #1
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	4013      	ands	r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0b0      	beq.n	8002100 <HAL_RCC_OscConfig+0x628>
 800219e:	e06a      	b.n	8002276 <HAL_RCC_OscConfig+0x79e>
 80021a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	fa93 f2a3 	rbit	r2, r3
 80021b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021b6:	601a      	str	r2, [r3, #0]
  return result;
 80021b8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021bc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b8c      	ldr	r3, [pc, #560]	; (80023f8 <HAL_RCC_OscConfig+0x920>)
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	461a      	mov	r2, r3
 80021ce:	2300      	movs	r3, #0
 80021d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d2:	f7ff f9b1 	bl	8001538 <HAL_GetTick>
 80021d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021da:	e009      	b.n	80021f0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021dc:	f7ff f9ac 	bl	8001538 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e381      	b.n	80028f4 <HAL_RCC_OscConfig+0xe1c>
 80021f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021f4:	2202      	movs	r2, #2
 80021f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	fa93 f2a3 	rbit	r2, r3
 8002202:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800220c:	2202      	movs	r2, #2
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fa93 f2a3 	rbit	r2, r3
 800221a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002224:	2202      	movs	r2, #2
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	fa93 f2a3 	rbit	r2, r3
 8002232:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002236:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002238:	4b6e      	ldr	r3, [pc, #440]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 800223a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800223c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002240:	2102      	movs	r1, #2
 8002242:	6019      	str	r1, [r3, #0]
 8002244:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	fa93 f1a3 	rbit	r1, r3
 800224e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002252:	6019      	str	r1, [r3, #0]
  return result;
 8002254:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2101      	movs	r1, #1
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1b2      	bne.n	80021dc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 8157 	beq.w	8002534 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228c:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d112      	bne.n	80022be <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002298:	4b56      	ldr	r3, [pc, #344]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	4a55      	ldr	r2, [pc, #340]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 800229e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a2:	61d3      	str	r3, [r2, #28]
 80022a4:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	4b4f      	ldr	r3, [pc, #316]	; (80023fc <HAL_RCC_OscConfig+0x924>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d11a      	bne.n	8002300 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ca:	4b4c      	ldr	r3, [pc, #304]	; (80023fc <HAL_RCC_OscConfig+0x924>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a4b      	ldr	r2, [pc, #300]	; (80023fc <HAL_RCC_OscConfig+0x924>)
 80022d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d6:	f7ff f92f 	bl	8001538 <HAL_GetTick>
 80022da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	e009      	b.n	80022f4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e0:	f7ff f92a 	bl	8001538 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b64      	cmp	r3, #100	; 0x64
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e2ff      	b.n	80028f4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f4:	4b41      	ldr	r3, [pc, #260]	; (80023fc <HAL_RCC_OscConfig+0x924>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0ef      	beq.n	80022e0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d106      	bne.n	8002318 <HAL_RCC_OscConfig+0x840>
 800230a:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a39      	ldr	r2, [pc, #228]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6213      	str	r3, [r2, #32]
 8002316:	e02f      	b.n	8002378 <HAL_RCC_OscConfig+0x8a0>
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x864>
 8002322:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a33      	ldr	r2, [pc, #204]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a30      	ldr	r2, [pc, #192]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6213      	str	r3, [r2, #32]
 800233a:	e01d      	b.n	8002378 <HAL_RCC_OscConfig+0x8a0>
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b05      	cmp	r3, #5
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x888>
 8002346:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a2a      	ldr	r2, [pc, #168]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	6213      	str	r3, [r2, #32]
 8002352:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a27      	ldr	r2, [pc, #156]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6213      	str	r3, [r2, #32]
 800235e:	e00b      	b.n	8002378 <HAL_RCC_OscConfig+0x8a0>
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4a23      	ldr	r2, [pc, #140]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	6213      	str	r3, [r2, #32]
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4a20      	ldr	r2, [pc, #128]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 8002372:	f023 0304 	bic.w	r3, r3, #4
 8002376:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d06a      	beq.n	8002458 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002382:	f7ff f8d9 	bl	8001538 <HAL_GetTick>
 8002386:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238c:	f7ff f8d4 	bl	8001538 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	; 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e2a7      	b.n	80028f4 <HAL_RCC_OscConfig+0xe1c>
 80023a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023a8:	2202      	movs	r2, #2
 80023aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	fa93 f2a3 	rbit	r2, r3
 80023b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023c0:	2202      	movs	r2, #2
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	fa93 f2a3 	rbit	r2, r3
 80023ce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023d2:	601a      	str	r2, [r3, #0]
  return result;
 80023d4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d108      	bne.n	8002400 <HAL_RCC_OscConfig+0x928>
 80023ee:	4b01      	ldr	r3, [pc, #4]	; (80023f4 <HAL_RCC_OscConfig+0x91c>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	e013      	b.n	800241c <HAL_RCC_OscConfig+0x944>
 80023f4:	40021000 	.word	0x40021000
 80023f8:	10908120 	.word	0x10908120
 80023fc:	40007000 	.word	0x40007000
 8002400:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002404:	2202      	movs	r2, #2
 8002406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	fa93 f2a3 	rbit	r2, r3
 8002412:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	4bc0      	ldr	r3, [pc, #768]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002420:	2102      	movs	r1, #2
 8002422:	6011      	str	r1, [r2, #0]
 8002424:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	fa92 f1a2 	rbit	r1, r2
 800242e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002432:	6011      	str	r1, [r2, #0]
  return result;
 8002434:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	fab2 f282 	clz	r2, r2
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f002 021f 	and.w	r2, r2, #31
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f202 	lsl.w	r2, r1, r2
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d09a      	beq.n	800238c <HAL_RCC_OscConfig+0x8b4>
 8002456:	e063      	b.n	8002520 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7ff f86e 	bl	8001538 <HAL_GetTick>
 800245c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	e00b      	b.n	800247a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7ff f869 	bl	8001538 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e23c      	b.n	80028f4 <HAL_RCC_OscConfig+0xe1c>
 800247a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800247e:	2202      	movs	r2, #2
 8002480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	fa93 f2a3 	rbit	r2, r3
 800248c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002496:	2202      	movs	r2, #2
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fa93 f2a3 	rbit	r2, r3
 80024a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024a8:	601a      	str	r2, [r3, #0]
  return result;
 80024aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f043 0302 	orr.w	r3, r3, #2
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d102      	bne.n	80024ca <HAL_RCC_OscConfig+0x9f2>
 80024c4:	4b95      	ldr	r3, [pc, #596]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	e00d      	b.n	80024e6 <HAL_RCC_OscConfig+0xa0e>
 80024ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024ce:	2202      	movs	r2, #2
 80024d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	fa93 f2a3 	rbit	r2, r3
 80024dc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	4b8e      	ldr	r3, [pc, #568]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80024ea:	2102      	movs	r1, #2
 80024ec:	6011      	str	r1, [r2, #0]
 80024ee:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	fa92 f1a2 	rbit	r1, r2
 80024f8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024fc:	6011      	str	r1, [r2, #0]
  return result;
 80024fe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	fab2 f282 	clz	r2, r2
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	f002 021f 	and.w	r2, r2, #31
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f202 	lsl.w	r2, r1, r2
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1a0      	bne.n	8002462 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002520:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4b7c      	ldr	r3, [pc, #496]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	4a7b      	ldr	r2, [pc, #492]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 800252e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002532:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 81d9 	beq.w	80028f2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002540:	4b76      	ldr	r3, [pc, #472]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b08      	cmp	r3, #8
 800254a:	f000 81a6 	beq.w	800289a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b02      	cmp	r3, #2
 8002556:	f040 811e 	bne.w	8002796 <HAL_RCC_OscConfig+0xcbe>
 800255a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800255e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f2a3 	rbit	r2, r3
 800256e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002572:	601a      	str	r2, [r3, #0]
  return result;
 8002574:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002578:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002584:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	461a      	mov	r2, r3
 800258c:	2300      	movs	r3, #0
 800258e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe ffd2 	bl	8001538 <HAL_GetTick>
 8002594:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	e009      	b.n	80025ae <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe ffcd 	bl	8001538 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1a2      	b.n	80028f4 <HAL_RCC_OscConfig+0xe1c>
 80025ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	fa93 f2a3 	rbit	r2, r3
 80025c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025c6:	601a      	str	r2, [r3, #0]
  return result;
 80025c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_OscConfig+0xb10>
 80025e2:	4b4e      	ldr	r3, [pc, #312]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	e01b      	b.n	8002620 <HAL_RCC_OscConfig+0xb48>
 80025e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	fa93 f2a3 	rbit	r2, r3
 80025fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002606:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	fa93 f2a3 	rbit	r2, r3
 8002616:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	4b3f      	ldr	r3, [pc, #252]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002624:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002628:	6011      	str	r1, [r2, #0]
 800262a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	fa92 f1a2 	rbit	r1, r2
 8002634:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002638:	6011      	str	r1, [r2, #0]
  return result;
 800263a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	fab2 f282 	clz	r2, r2
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	f042 0220 	orr.w	r2, r2, #32
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	f002 021f 	and.w	r2, r2, #31
 8002650:	2101      	movs	r1, #1
 8002652:	fa01 f202 	lsl.w	r2, r1, r2
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d19e      	bne.n	800259a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265c:	4b2f      	ldr	r3, [pc, #188]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	f023 020f 	bic.w	r2, r3, #15
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	492c      	ldr	r1, [pc, #176]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 800266c:	4313      	orrs	r3, r2
 800266e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002670:	4b2a      	ldr	r3, [pc, #168]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6a19      	ldr	r1, [r3, #32]
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	430b      	orrs	r3, r1
 8002686:	4925      	ldr	r1, [pc, #148]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
 800268c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002690:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002694:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	fa93 f2a3 	rbit	r2, r3
 80026a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026a4:	601a      	str	r2, [r3, #0]
  return result;
 80026a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026aa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	461a      	mov	r2, r3
 80026be:	2301      	movs	r3, #1
 80026c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c2:	f7fe ff39 	bl	8001538 <HAL_GetTick>
 80026c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ca:	e009      	b.n	80026e0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe ff34 	bl	8001538 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e109      	b.n	80028f4 <HAL_RCC_OscConfig+0xe1c>
 80026e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	fa93 f2a3 	rbit	r2, r3
 80026f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026f8:	601a      	str	r2, [r3, #0]
  return result;
 80026fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d105      	bne.n	8002720 <HAL_RCC_OscConfig+0xc48>
 8002714:	4b01      	ldr	r3, [pc, #4]	; (800271c <HAL_RCC_OscConfig+0xc44>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	e01e      	b.n	8002758 <HAL_RCC_OscConfig+0xc80>
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002724:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002728:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	fa93 f2a3 	rbit	r2, r3
 8002734:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800273e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	fa93 f2a3 	rbit	r2, r3
 800274e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	4b6a      	ldr	r3, [pc, #424]	; (8002900 <HAL_RCC_OscConfig+0xe28>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800275c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002760:	6011      	str	r1, [r2, #0]
 8002762:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	fa92 f1a2 	rbit	r1, r2
 800276c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002770:	6011      	str	r1, [r2, #0]
  return result;
 8002772:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	fab2 f282 	clz	r2, r2
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	f042 0220 	orr.w	r2, r2, #32
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f002 021f 	and.w	r2, r2, #31
 8002788:	2101      	movs	r1, #1
 800278a:	fa01 f202 	lsl.w	r2, r1, r2
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d09b      	beq.n	80026cc <HAL_RCC_OscConfig+0xbf4>
 8002794:	e0ad      	b.n	80028f2 <HAL_RCC_OscConfig+0xe1a>
 8002796:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800279a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800279e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	fa93 f2a3 	rbit	r2, r3
 80027aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027ae:	601a      	str	r2, [r3, #0]
  return result;
 80027b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027b4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	461a      	mov	r2, r3
 80027c8:	2300      	movs	r3, #0
 80027ca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe feb4 	bl	8001538 <HAL_GetTick>
 80027d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d4:	e009      	b.n	80027ea <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d6:	f7fe feaf 	bl	8001538 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e084      	b.n	80028f4 <HAL_RCC_OscConfig+0xe1c>
 80027ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	fa93 f2a3 	rbit	r2, r3
 80027fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002802:	601a      	str	r2, [r3, #0]
  return result;
 8002804:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002808:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d102      	bne.n	8002824 <HAL_RCC_OscConfig+0xd4c>
 800281e:	4b38      	ldr	r3, [pc, #224]	; (8002900 <HAL_RCC_OscConfig+0xe28>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	e01b      	b.n	800285c <HAL_RCC_OscConfig+0xd84>
 8002824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800282c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	fa93 f2a3 	rbit	r2, r3
 8002838:	f107 0320 	add.w	r3, r7, #32
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	f107 031c 	add.w	r3, r7, #28
 8002842:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	f107 031c 	add.w	r3, r7, #28
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	fa93 f2a3 	rbit	r2, r3
 8002852:	f107 0318 	add.w	r3, r7, #24
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	4b29      	ldr	r3, [pc, #164]	; (8002900 <HAL_RCC_OscConfig+0xe28>)
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	f107 0214 	add.w	r2, r7, #20
 8002860:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002864:	6011      	str	r1, [r2, #0]
 8002866:	f107 0214 	add.w	r2, r7, #20
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	fa92 f1a2 	rbit	r1, r2
 8002870:	f107 0210 	add.w	r2, r7, #16
 8002874:	6011      	str	r1, [r2, #0]
  return result;
 8002876:	f107 0210 	add.w	r2, r7, #16
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	fab2 f282 	clz	r2, r2
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	f042 0220 	orr.w	r2, r2, #32
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	f002 021f 	and.w	r2, r2, #31
 800288c:	2101      	movs	r1, #1
 800288e:	fa01 f202 	lsl.w	r2, r1, r2
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d19e      	bne.n	80027d6 <HAL_RCC_OscConfig+0xcfe>
 8002898:	e02b      	b.n	80028f2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e025      	b.n	80028f4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_RCC_OscConfig+0xe28>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_RCC_OscConfig+0xe28>)
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028bc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d111      	bne.n	80028ee <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80028ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028d8:	429a      	cmp	r2, r3
 80028da:	d108      	bne.n	80028ee <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80028dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028e0:	f003 020f 	and.w	r2, r3, #15
 80028e4:	1d3b      	adds	r3, r7, #4
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d001      	beq.n	80028f2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000

08002904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b09e      	sub	sp, #120	; 0x78
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e162      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800291c:	4b90      	ldr	r3, [pc, #576]	; (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d910      	bls.n	800294c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b8d      	ldr	r3, [pc, #564]	; (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 0207 	bic.w	r2, r3, #7
 8002932:	498b      	ldr	r1, [pc, #556]	; (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	4b89      	ldr	r3, [pc, #548]	; (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e14a      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002958:	4b82      	ldr	r3, [pc, #520]	; (8002b64 <HAL_RCC_ClockConfig+0x260>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	497f      	ldr	r1, [pc, #508]	; (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002966:	4313      	orrs	r3, r2
 8002968:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80dc 	beq.w	8002b30 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d13c      	bne.n	80029fa <HAL_RCC_ClockConfig+0xf6>
 8002980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002984:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800298e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d102      	bne.n	80029aa <HAL_RCC_ClockConfig+0xa6>
 80029a4:	4b6f      	ldr	r3, [pc, #444]	; (8002b64 <HAL_RCC_ClockConfig+0x260>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	e00f      	b.n	80029ca <HAL_RCC_ClockConfig+0xc6>
 80029aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	667b      	str	r3, [r7, #100]	; 0x64
 80029b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029bc:	663b      	str	r3, [r7, #96]	; 0x60
 80029be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029c6:	4b67      	ldr	r3, [pc, #412]	; (8002b64 <HAL_RCC_ClockConfig+0x260>)
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80029d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029d2:	fa92 f2a2 	rbit	r2, r2
 80029d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80029d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029da:	fab2 f282 	clz	r2, r2
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f042 0220 	orr.w	r2, r2, #32
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	f002 021f 	and.w	r2, r2, #31
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d17b      	bne.n	8002aee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0f3      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d13c      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x178>
 8002a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d102      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x128>
 8002a26:	4b4f      	ldr	r3, [pc, #316]	; (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	e00f      	b.n	8002a4c <HAL_RCC_ClockConfig+0x148>
 8002a2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	647b      	str	r3, [r7, #68]	; 0x44
 8002a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a48:	4b46      	ldr	r3, [pc, #280]	; (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a50:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a54:	fa92 f2a2 	rbit	r2, r2
 8002a58:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a5c:	fab2 f282 	clz	r2, r2
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	f042 0220 	orr.w	r2, r2, #32
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	f002 021f 	and.w	r2, r2, #31
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d13a      	bne.n	8002aee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0b2      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2de>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d102      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x1a0>
 8002a9e:	4b31      	ldr	r3, [pc, #196]	; (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	e00d      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1bc>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	623b      	str	r3, [r7, #32]
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	4b29      	ldr	r3, [pc, #164]	; (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	61ba      	str	r2, [r7, #24]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	fa92 f2a2 	rbit	r2, r2
 8002aca:	617a      	str	r2, [r7, #20]
  return result;
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	fab2 f282 	clz	r2, r2
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	f042 0220 	orr.w	r2, r2, #32
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	f002 021f 	and.w	r2, r2, #31
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e079      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aee:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f023 0203 	bic.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	491a      	ldr	r1, [pc, #104]	; (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b00:	f7fe fd1a 	bl	8001538 <HAL_GetTick>
 8002b04:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b08:	f7fe fd16 	bl	8001538 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e061      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_RCC_ClockConfig+0x260>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 020c 	and.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1eb      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d214      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 0207 	bic.w	r2, r3, #7
 8002b46:	4906      	ldr	r1, [pc, #24]	; (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <HAL_RCC_ClockConfig+0x25c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e040      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2de>
 8002b60:	40022000 	.word	0x40022000
 8002b64:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_RCC_ClockConfig+0x2e8>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	491a      	ldr	r1, [pc, #104]	; (8002bec <HAL_RCC_ClockConfig+0x2e8>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b92:	4b16      	ldr	r3, [pc, #88]	; (8002bec <HAL_RCC_ClockConfig+0x2e8>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4912      	ldr	r1, [pc, #72]	; (8002bec <HAL_RCC_ClockConfig+0x2e8>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ba6:	f000 f829 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002baa:	4601      	mov	r1, r0
 8002bac:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <HAL_RCC_ClockConfig+0x2e8>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb4:	22f0      	movs	r2, #240	; 0xf0
 8002bb6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	fa92 f2a2 	rbit	r2, r2
 8002bbe:	60fa      	str	r2, [r7, #12]
  return result;
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	fab2 f282 	clz	r2, r2
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	40d3      	lsrs	r3, r2
 8002bca:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <HAL_RCC_ClockConfig+0x2ec>)
 8002bcc:	5cd3      	ldrb	r3, [r2, r3]
 8002bce:	fa21 f303 	lsr.w	r3, r1, r3
 8002bd2:	4a08      	ldr	r2, [pc, #32]	; (8002bf4 <HAL_RCC_ClockConfig+0x2f0>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_RCC_ClockConfig+0x2f4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe fc68 	bl	80014b0 <HAL_InitTick>
  
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3778      	adds	r7, #120	; 0x78
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	08004e08 	.word	0x08004e08
 8002bf4:	2000001c 	.word	0x2000001c
 8002bf8:	20000020 	.word	0x20000020

08002bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b08b      	sub	sp, #44	; 0x2c
 8002c00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c16:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d002      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x30>
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x36>
 8002c2a:	e03f      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c2c:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c2e:	623b      	str	r3, [r7, #32]
      break;
 8002c30:	e03f      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c38:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c3c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	fa92 f2a2 	rbit	r2, r2
 8002c44:	607a      	str	r2, [r7, #4]
  return result;
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	fab2 f282 	clz	r2, r2
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	40d3      	lsrs	r3, r2
 8002c50:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c52:	5cd3      	ldrb	r3, [r2, r3]
 8002c54:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c56:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	220f      	movs	r2, #15
 8002c60:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	fa92 f2a2 	rbit	r2, r2
 8002c68:	60fa      	str	r2, [r7, #12]
  return result;
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	fab2 f282 	clz	r2, r2
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	40d3      	lsrs	r3, r2
 8002c74:	4a15      	ldr	r2, [pc, #84]	; (8002ccc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c84:	4a0f      	ldr	r2, [pc, #60]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
 8002c94:	e007      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c96:	4a0b      	ldr	r2, [pc, #44]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	fb02 f303 	mul.w	r3, r2, r3
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	623b      	str	r3, [r7, #32]
      break;
 8002caa:	e002      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cae:	623b      	str	r3, [r7, #32]
      break;
 8002cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	372c      	adds	r7, #44	; 0x2c
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	007a1200 	.word	0x007a1200
 8002cc8:	08004e20 	.word	0x08004e20
 8002ccc:	08004e30 	.word	0x08004e30

08002cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	2000001c 	.word	0x2000001c

08002ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002cee:	f7ff ffef 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002cf2:	4601      	mov	r1, r0
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cfc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	fa92 f2a2 	rbit	r2, r2
 8002d08:	603a      	str	r2, [r7, #0]
  return result;
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	fab2 f282 	clz	r2, r2
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	40d3      	lsrs	r3, r2
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d16:	5cd3      	ldrb	r3, [r2, r3]
 8002d18:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000
 8002d28:	08004e18 	.word	0x08004e18

08002d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d32:	f7ff ffcd 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002d36:	4601      	mov	r1, r0
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002d40:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d44:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	fa92 f2a2 	rbit	r2, r2
 8002d4c:	603a      	str	r2, [r7, #0]
  return result;
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	fab2 f282 	clz	r2, r2
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	40d3      	lsrs	r3, r2
 8002d58:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d5a:	5cd3      	ldrb	r3, [r2, r3]
 8002d5c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	08004e18 	.word	0x08004e18

08002d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b092      	sub	sp, #72	; 0x48
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80d4 	beq.w	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d94:	4b4e      	ldr	r3, [pc, #312]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10e      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da0:	4b4b      	ldr	r3, [pc, #300]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	4a4a      	ldr	r2, [pc, #296]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002daa:	61d3      	str	r3, [r2, #28]
 8002dac:	4b48      	ldr	r3, [pc, #288]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbe:	4b45      	ldr	r3, [pc, #276]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d118      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dca:	4b42      	ldr	r3, [pc, #264]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a41      	ldr	r2, [pc, #260]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fbaf 	bl	8001538 <HAL_GetTick>
 8002dda:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ddc:	e008      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dde:	f7fe fbab 	bl	8001538 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b64      	cmp	r3, #100	; 0x64
 8002dea:	d901      	bls.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e1d6      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df0:	4b38      	ldr	r3, [pc, #224]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dfc:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e04:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8084 	beq.w	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d07c      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	461a      	mov	r2, r3
 8002e46:	2301      	movs	r3, #1
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e6e:	4a18      	ldr	r2, [pc, #96]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e72:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d04b      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7fe fb5b 	bl	8001538 <HAL_GetTick>
 8002e82:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e84:	e00a      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e86:	f7fe fb57 	bl	8001538 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e180      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	623b      	str	r3, [r7, #32]
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	61fb      	str	r3, [r7, #28]
  return result;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f043 0302 	orr.w	r3, r3, #2
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d108      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002eca:	4b01      	ldr	r3, [pc, #4]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	e00d      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	10908100 	.word	0x10908100
 8002edc:	2302      	movs	r3, #2
 8002ede:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	4ba0      	ldr	r3, [pc, #640]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	2202      	movs	r2, #2
 8002eee:	613a      	str	r2, [r7, #16]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	fa92 f2a2 	rbit	r2, r2
 8002ef6:	60fa      	str	r2, [r7, #12]
  return result;
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	fab2 f282 	clz	r2, r2
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	f002 021f 	and.w	r2, r2, #31
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0b7      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f16:	4b95      	ldr	r3, [pc, #596]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4992      	ldr	r1, [pc, #584]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d105      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f30:	4b8e      	ldr	r3, [pc, #568]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	4a8d      	ldr	r2, [pc, #564]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f48:	4b88      	ldr	r3, [pc, #544]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	f023 0203 	bic.w	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4985      	ldr	r1, [pc, #532]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f66:	4b81      	ldr	r3, [pc, #516]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	497e      	ldr	r1, [pc, #504]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f84:	4b79      	ldr	r3, [pc, #484]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	4976      	ldr	r1, [pc, #472]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fa2:	4b72      	ldr	r3, [pc, #456]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f023 0210 	bic.w	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	496f      	ldr	r1, [pc, #444]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002fc0:	4b6a      	ldr	r3, [pc, #424]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fcc:	4967      	ldr	r1, [pc, #412]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fde:	4b63      	ldr	r3, [pc, #396]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f023 0220 	bic.w	r2, r3, #32
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	4960      	ldr	r1, [pc, #384]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ffc:	4b5b      	ldr	r3, [pc, #364]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	4958      	ldr	r1, [pc, #352]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800301a:	4b54      	ldr	r3, [pc, #336]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	4951      	ldr	r1, [pc, #324]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003038:	4b4c      	ldr	r3, [pc, #304]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	4949      	ldr	r1, [pc, #292]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003046:	4313      	orrs	r3, r2
 8003048:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003056:	4b45      	ldr	r3, [pc, #276]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4942      	ldr	r1, [pc, #264]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003074:	4b3d      	ldr	r3, [pc, #244]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	493a      	ldr	r1, [pc, #232]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003082:	4313      	orrs	r3, r2
 8003084:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d008      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003092:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	4933      	ldr	r1, [pc, #204]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030b0:	4b2e      	ldr	r3, [pc, #184]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030bc:	492b      	ldr	r1, [pc, #172]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80030ce:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	4924      	ldr	r1, [pc, #144]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80030ec:	4b1f      	ldr	r3, [pc, #124]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	491c      	ldr	r1, [pc, #112]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d008      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800310a:	4b18      	ldr	r3, [pc, #96]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003116:	4915      	ldr	r1, [pc, #84]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003118:	4313      	orrs	r3, r2
 800311a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003134:	490d      	ldr	r1, [pc, #52]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003136:	4313      	orrs	r3, r2
 8003138:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003146:	4b09      	ldr	r3, [pc, #36]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003152:	4906      	ldr	r1, [pc, #24]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003154:	4313      	orrs	r3, r2
 8003156:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00c      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003164:	4b01      	ldr	r3, [pc, #4]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	e002      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003178:	490b      	ldr	r1, [pc, #44]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800317a:	4313      	orrs	r3, r2
 800317c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800318a:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003196:	4904      	ldr	r1, [pc, #16]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003198:	4313      	orrs	r3, r2
 800319a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3748      	adds	r7, #72	; 0x48
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000

080031ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e09d      	b.n	80032fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d108      	bne.n	80031d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ce:	d009      	beq.n	80031e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	61da      	str	r2, [r3, #28]
 80031d6:	e005      	b.n	80031e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd f9f4 	bl	80005ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800321a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003224:	d902      	bls.n	800322c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	e002      	b.n	8003232 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800322c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003230:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800323a:	d007      	beq.n	800324c <HAL_SPI_Init+0xa0>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003244:	d002      	beq.n	800324c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	ea42 0103 	orr.w	r1, r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	0c1b      	lsrs	r3, r3, #16
 80032a8:	f003 0204 	and.w	r2, r3, #4
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80032c8:	ea42 0103 	orr.w	r1, r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b088      	sub	sp, #32
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	4613      	mov	r3, r2
 8003310:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_SPI_Transmit+0x22>
 8003320:	2302      	movs	r3, #2
 8003322:	e158      	b.n	80035d6 <HAL_SPI_Transmit+0x2d4>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800332c:	f7fe f904 	bl	8001538 <HAL_GetTick>
 8003330:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d002      	beq.n	8003348 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003342:	2302      	movs	r3, #2
 8003344:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003346:	e13d      	b.n	80035c4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_SPI_Transmit+0x52>
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003358:	e134      	b.n	80035c4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2203      	movs	r2, #3
 800335e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	88fa      	ldrh	r2, [r7, #6]
 8003372:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	88fa      	ldrh	r2, [r7, #6]
 8003378:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a4:	d10f      	bne.n	80033c6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	d007      	beq.n	80033e4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033ec:	d94b      	bls.n	8003486 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_SPI_Transmit+0xfa>
 80033f6:	8afb      	ldrh	r3, [r7, #22]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d13e      	bne.n	800347a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	881a      	ldrh	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	1c9a      	adds	r2, r3, #2
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003420:	e02b      	b.n	800347a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b02      	cmp	r3, #2
 800342e:	d112      	bne.n	8003456 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	881a      	ldrh	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	1c9a      	adds	r2, r3, #2
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003454:	e011      	b.n	800347a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003456:	f7fe f86f 	bl	8001538 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d803      	bhi.n	800346e <HAL_SPI_Transmit+0x16c>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d102      	bne.n	8003474 <HAL_SPI_Transmit+0x172>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d102      	bne.n	800347a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003478:	e0a4      	b.n	80035c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1ce      	bne.n	8003422 <HAL_SPI_Transmit+0x120>
 8003484:	e07c      	b.n	8003580 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_SPI_Transmit+0x192>
 800348e:	8afb      	ldrh	r3, [r7, #22]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d170      	bne.n	8003576 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d912      	bls.n	80034c4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	1c9a      	adds	r2, r3, #2
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b02      	subs	r3, #2
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034c2:	e058      	b.n	8003576 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	330c      	adds	r3, #12
 80034ce:	7812      	ldrb	r2, [r2, #0]
 80034d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80034ea:	e044      	b.n	8003576 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d12b      	bne.n	8003552 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d912      	bls.n	800352a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	881a      	ldrh	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	1c9a      	adds	r2, r3, #2
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b02      	subs	r3, #2
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003528:	e025      	b.n	8003576 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	330c      	adds	r3, #12
 8003534:	7812      	ldrb	r2, [r2, #0]
 8003536:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003550:	e011      	b.n	8003576 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003552:	f7fd fff1 	bl	8001538 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d803      	bhi.n	800356a <HAL_SPI_Transmit+0x268>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003568:	d102      	bne.n	8003570 <HAL_SPI_Transmit+0x26e>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d102      	bne.n	8003576 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003574:	e026      	b.n	80035c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1b5      	bne.n	80034ec <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	6839      	ldr	r1, [r7, #0]
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fb5b 	bl	8003c40 <SPI_EndRxTxTransaction>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	77fb      	strb	r3, [r7, #31]
 80035c0:	e000      	b.n	80035c4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80035c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b08a      	sub	sp, #40	; 0x28
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035ec:	2301      	movs	r3, #1
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x26>
 8003600:	2302      	movs	r3, #2
 8003602:	e1fb      	b.n	80039fc <HAL_SPI_TransmitReceive+0x41e>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800360c:	f7fd ff94 	bl	8001538 <HAL_GetTick>
 8003610:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003618:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003620:	887b      	ldrh	r3, [r7, #2]
 8003622:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003624:	887b      	ldrh	r3, [r7, #2]
 8003626:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003628:	7efb      	ldrb	r3, [r7, #27]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d00e      	beq.n	800364c <HAL_SPI_TransmitReceive+0x6e>
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003634:	d106      	bne.n	8003644 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <HAL_SPI_TransmitReceive+0x66>
 800363e:	7efb      	ldrb	r3, [r7, #27]
 8003640:	2b04      	cmp	r3, #4
 8003642:	d003      	beq.n	800364c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003644:	2302      	movs	r3, #2
 8003646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800364a:	e1cd      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_SPI_TransmitReceive+0x80>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_SPI_TransmitReceive+0x80>
 8003658:	887b      	ldrh	r3, [r7, #2]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003664:	e1c0      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b04      	cmp	r3, #4
 8003670:	d003      	beq.n	800367a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2205      	movs	r2, #5
 8003676:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	887a      	ldrh	r2, [r7, #2]
 800368a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	887a      	ldrh	r2, [r7, #2]
 8003692:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	887a      	ldrh	r2, [r7, #2]
 80036a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	887a      	ldrh	r2, [r7, #2]
 80036a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036bc:	d802      	bhi.n	80036c4 <HAL_SPI_TransmitReceive+0xe6>
 80036be:	8a3b      	ldrh	r3, [r7, #16]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d908      	bls.n	80036d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036d2:	605a      	str	r2, [r3, #4]
 80036d4:	e007      	b.n	80036e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d007      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003702:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800370c:	d97c      	bls.n	8003808 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_SPI_TransmitReceive+0x13e>
 8003716:	8a7b      	ldrh	r3, [r7, #18]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d169      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	881a      	ldrh	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	1c9a      	adds	r2, r3, #2
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003740:	e056      	b.n	80037f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b02      	cmp	r3, #2
 800374e:	d11b      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x1aa>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d016      	beq.n	8003788 <HAL_SPI_TransmitReceive+0x1aa>
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	2b01      	cmp	r3, #1
 800375e:	d113      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	881a      	ldrh	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	1c9a      	adds	r2, r3, #2
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b01      	cmp	r3, #1
 8003794:	d11c      	bne.n	80037d0 <HAL_SPI_TransmitReceive+0x1f2>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	b292      	uxth	r2, r2
 80037ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	1c9a      	adds	r2, r3, #2
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037cc:	2301      	movs	r3, #1
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037d0:	f7fd feb2 	bl	8001538 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037dc:	429a      	cmp	r2, r3
 80037de:	d807      	bhi.n	80037f0 <HAL_SPI_TransmitReceive+0x212>
 80037e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d003      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80037ee:	e0fb      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1a3      	bne.n	8003742 <HAL_SPI_TransmitReceive+0x164>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d19d      	bne.n	8003742 <HAL_SPI_TransmitReceive+0x164>
 8003806:	e0df      	b.n	80039c8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_SPI_TransmitReceive+0x23a>
 8003810:	8a7b      	ldrh	r3, [r7, #18]
 8003812:	2b01      	cmp	r3, #1
 8003814:	f040 80cb 	bne.w	80039ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b01      	cmp	r3, #1
 8003820:	d912      	bls.n	8003848 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	881a      	ldrh	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	1c9a      	adds	r2, r3, #2
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b02      	subs	r3, #2
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003846:	e0b2      	b.n	80039ae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	7812      	ldrb	r2, [r2, #0]
 8003854:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800386e:	e09e      	b.n	80039ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b02      	cmp	r3, #2
 800387c:	d134      	bne.n	80038e8 <HAL_SPI_TransmitReceive+0x30a>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d02f      	beq.n	80038e8 <HAL_SPI_TransmitReceive+0x30a>
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	2b01      	cmp	r3, #1
 800388c:	d12c      	bne.n	80038e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	d912      	bls.n	80038be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	881a      	ldrh	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	1c9a      	adds	r2, r3, #2
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b02      	subs	r3, #2
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038bc:	e012      	b.n	80038e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	330c      	adds	r3, #12
 80038c8:	7812      	ldrb	r2, [r2, #0]
 80038ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d148      	bne.n	8003988 <HAL_SPI_TransmitReceive+0x3aa>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d042      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d923      	bls.n	8003956 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	b292      	uxth	r2, r2
 800391a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	1c9a      	adds	r2, r3, #2
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b02      	subs	r3, #2
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d81f      	bhi.n	8003984 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	e016      	b.n	8003984 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f103 020c 	add.w	r2, r3, #12
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	7812      	ldrb	r2, [r2, #0]
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003984:	2301      	movs	r3, #1
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003988:	f7fd fdd6 	bl	8001538 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003994:	429a      	cmp	r2, r3
 8003996:	d803      	bhi.n	80039a0 <HAL_SPI_TransmitReceive+0x3c2>
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399e:	d102      	bne.n	80039a6 <HAL_SPI_TransmitReceive+0x3c8>
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d103      	bne.n	80039ae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80039ac:	e01c      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f47f af5b 	bne.w	8003870 <HAL_SPI_TransmitReceive+0x292>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f47f af54 	bne.w	8003870 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f937 	bl	8003c40 <SPI_EndRxTxTransaction>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d006      	beq.n	80039e6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	661a      	str	r2, [r3, #96]	; 0x60
 80039e4:	e000      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80039e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3728      	adds	r7, #40	; 0x28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a14:	f7fd fd90 	bl	8001538 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	4413      	add	r3, r2
 8003a22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a24:	f7fd fd88 	bl	8001538 <HAL_GetTick>
 8003a28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a2a:	4b39      	ldr	r3, [pc, #228]	; (8003b10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	015b      	lsls	r3, r3, #5
 8003a30:	0d1b      	lsrs	r3, r3, #20
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	fb02 f303 	mul.w	r3, r2, r3
 8003a38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a3a:	e054      	b.n	8003ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d050      	beq.n	8003ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a44:	f7fd fd78 	bl	8001538 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d902      	bls.n	8003a5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d13d      	bne.n	8003ad6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a72:	d111      	bne.n	8003a98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a7c:	d004      	beq.n	8003a88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a86:	d107      	bne.n	8003a98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa0:	d10f      	bne.n	8003ac2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ac0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e017      	b.n	8003b06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4013      	ands	r3, r2
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	bf0c      	ite	eq
 8003af6:	2301      	moveq	r3, #1
 8003af8:	2300      	movne	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d19b      	bne.n	8003a3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	2000001c 	.word	0x2000001c

08003b14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b26:	f7fd fd07 	bl	8001538 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	4413      	add	r3, r2
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003b36:	f7fd fcff 	bl	8001538 <HAL_GetTick>
 8003b3a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b44:	4b3d      	ldr	r3, [pc, #244]	; (8003c3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00da      	lsls	r2, r3, #3
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	0d1b      	lsrs	r3, r3, #20
 8003b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b5c:	e060      	b.n	8003c20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b64:	d107      	bne.n	8003b76 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d104      	bne.n	8003b76 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7c:	d050      	beq.n	8003c20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b7e:	f7fd fcdb 	bl	8001538 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d902      	bls.n	8003b94 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d13d      	bne.n	8003c10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ba2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bac:	d111      	bne.n	8003bd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb6:	d004      	beq.n	8003bc2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc0:	d107      	bne.n	8003bd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bda:	d10f      	bne.n	8003bfc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e010      	b.n	8003c32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d196      	bne.n	8003b5e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3728      	adds	r7, #40	; 0x28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	2000001c 	.word	0x2000001c

08003c40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f7ff ff5b 	bl	8003b14 <SPI_WaitFifoStateUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d007      	beq.n	8003c74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c68:	f043 0220 	orr.w	r2, r3, #32
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e027      	b.n	8003cc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2180      	movs	r1, #128	; 0x80
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f7ff fec0 	bl	8003a04 <SPI_WaitFlagStateUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8e:	f043 0220 	orr.w	r2, r3, #32
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e014      	b.n	8003cc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f7ff ff34 	bl	8003b14 <SPI_WaitFifoStateUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb6:	f043 0220 	orr.w	r2, r3, #32
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e000      	b.n	8003cc4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e040      	b.n	8003d60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fc fcc0 	bl	8000674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2224      	movs	r2, #36	; 0x24
 8003cf8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0201 	bic.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f82c 	bl	8003d68 <UART_SetConfig>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e022      	b.n	8003d60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f9f6 	bl	8004114 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fa7d 	bl	8004258 <UART_CheckIdleState>
 8003d5e:	4603      	mov	r3, r0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4bab      	ldr	r3, [pc, #684]	; (8004040 <UART_SetConfig+0x2d8>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	6979      	ldr	r1, [r7, #20]
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a99      	ldr	r2, [pc, #612]	; (8004044 <UART_SetConfig+0x2dc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d120      	bne.n	8003e26 <UART_SetConfig+0xbe>
 8003de4:	4b98      	ldr	r3, [pc, #608]	; (8004048 <UART_SetConfig+0x2e0>)
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d817      	bhi.n	8003e20 <UART_SetConfig+0xb8>
 8003df0:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <UART_SetConfig+0x90>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e09 	.word	0x08003e09
 8003dfc:	08003e15 	.word	0x08003e15
 8003e00:	08003e1b 	.word	0x08003e1b
 8003e04:	08003e0f 	.word	0x08003e0f
 8003e08:	2301      	movs	r3, #1
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e0b5      	b.n	8003f7a <UART_SetConfig+0x212>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	77fb      	strb	r3, [r7, #31]
 8003e12:	e0b2      	b.n	8003f7a <UART_SetConfig+0x212>
 8003e14:	2304      	movs	r3, #4
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e0af      	b.n	8003f7a <UART_SetConfig+0x212>
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	77fb      	strb	r3, [r7, #31]
 8003e1e:	e0ac      	b.n	8003f7a <UART_SetConfig+0x212>
 8003e20:	2310      	movs	r3, #16
 8003e22:	77fb      	strb	r3, [r7, #31]
 8003e24:	e0a9      	b.n	8003f7a <UART_SetConfig+0x212>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a88      	ldr	r2, [pc, #544]	; (800404c <UART_SetConfig+0x2e4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d124      	bne.n	8003e7a <UART_SetConfig+0x112>
 8003e30:	4b85      	ldr	r3, [pc, #532]	; (8004048 <UART_SetConfig+0x2e0>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e3c:	d011      	beq.n	8003e62 <UART_SetConfig+0xfa>
 8003e3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e42:	d817      	bhi.n	8003e74 <UART_SetConfig+0x10c>
 8003e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e48:	d011      	beq.n	8003e6e <UART_SetConfig+0x106>
 8003e4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e4e:	d811      	bhi.n	8003e74 <UART_SetConfig+0x10c>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <UART_SetConfig+0xf4>
 8003e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e58:	d006      	beq.n	8003e68 <UART_SetConfig+0x100>
 8003e5a:	e00b      	b.n	8003e74 <UART_SetConfig+0x10c>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e08b      	b.n	8003f7a <UART_SetConfig+0x212>
 8003e62:	2302      	movs	r3, #2
 8003e64:	77fb      	strb	r3, [r7, #31]
 8003e66:	e088      	b.n	8003f7a <UART_SetConfig+0x212>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e085      	b.n	8003f7a <UART_SetConfig+0x212>
 8003e6e:	2308      	movs	r3, #8
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e082      	b.n	8003f7a <UART_SetConfig+0x212>
 8003e74:	2310      	movs	r3, #16
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e07f      	b.n	8003f7a <UART_SetConfig+0x212>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a74      	ldr	r2, [pc, #464]	; (8004050 <UART_SetConfig+0x2e8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d124      	bne.n	8003ece <UART_SetConfig+0x166>
 8003e84:	4b70      	ldr	r3, [pc, #448]	; (8004048 <UART_SetConfig+0x2e0>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003e8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e90:	d011      	beq.n	8003eb6 <UART_SetConfig+0x14e>
 8003e92:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e96:	d817      	bhi.n	8003ec8 <UART_SetConfig+0x160>
 8003e98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e9c:	d011      	beq.n	8003ec2 <UART_SetConfig+0x15a>
 8003e9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ea2:	d811      	bhi.n	8003ec8 <UART_SetConfig+0x160>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <UART_SetConfig+0x148>
 8003ea8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eac:	d006      	beq.n	8003ebc <UART_SetConfig+0x154>
 8003eae:	e00b      	b.n	8003ec8 <UART_SetConfig+0x160>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e061      	b.n	8003f7a <UART_SetConfig+0x212>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	77fb      	strb	r3, [r7, #31]
 8003eba:	e05e      	b.n	8003f7a <UART_SetConfig+0x212>
 8003ebc:	2304      	movs	r3, #4
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e05b      	b.n	8003f7a <UART_SetConfig+0x212>
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	77fb      	strb	r3, [r7, #31]
 8003ec6:	e058      	b.n	8003f7a <UART_SetConfig+0x212>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e055      	b.n	8003f7a <UART_SetConfig+0x212>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a60      	ldr	r2, [pc, #384]	; (8004054 <UART_SetConfig+0x2ec>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d124      	bne.n	8003f22 <UART_SetConfig+0x1ba>
 8003ed8:	4b5b      	ldr	r3, [pc, #364]	; (8004048 <UART_SetConfig+0x2e0>)
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003ee0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ee4:	d011      	beq.n	8003f0a <UART_SetConfig+0x1a2>
 8003ee6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003eea:	d817      	bhi.n	8003f1c <UART_SetConfig+0x1b4>
 8003eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ef0:	d011      	beq.n	8003f16 <UART_SetConfig+0x1ae>
 8003ef2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ef6:	d811      	bhi.n	8003f1c <UART_SetConfig+0x1b4>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <UART_SetConfig+0x19c>
 8003efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f00:	d006      	beq.n	8003f10 <UART_SetConfig+0x1a8>
 8003f02:	e00b      	b.n	8003f1c <UART_SetConfig+0x1b4>
 8003f04:	2300      	movs	r3, #0
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e037      	b.n	8003f7a <UART_SetConfig+0x212>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	77fb      	strb	r3, [r7, #31]
 8003f0e:	e034      	b.n	8003f7a <UART_SetConfig+0x212>
 8003f10:	2304      	movs	r3, #4
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e031      	b.n	8003f7a <UART_SetConfig+0x212>
 8003f16:	2308      	movs	r3, #8
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e02e      	b.n	8003f7a <UART_SetConfig+0x212>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e02b      	b.n	8003f7a <UART_SetConfig+0x212>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a4c      	ldr	r2, [pc, #304]	; (8004058 <UART_SetConfig+0x2f0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d124      	bne.n	8003f76 <UART_SetConfig+0x20e>
 8003f2c:	4b46      	ldr	r3, [pc, #280]	; (8004048 <UART_SetConfig+0x2e0>)
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003f34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f38:	d011      	beq.n	8003f5e <UART_SetConfig+0x1f6>
 8003f3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f3e:	d817      	bhi.n	8003f70 <UART_SetConfig+0x208>
 8003f40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f44:	d011      	beq.n	8003f6a <UART_SetConfig+0x202>
 8003f46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f4a:	d811      	bhi.n	8003f70 <UART_SetConfig+0x208>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <UART_SetConfig+0x1f0>
 8003f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f54:	d006      	beq.n	8003f64 <UART_SetConfig+0x1fc>
 8003f56:	e00b      	b.n	8003f70 <UART_SetConfig+0x208>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e00d      	b.n	8003f7a <UART_SetConfig+0x212>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	77fb      	strb	r3, [r7, #31]
 8003f62:	e00a      	b.n	8003f7a <UART_SetConfig+0x212>
 8003f64:	2304      	movs	r3, #4
 8003f66:	77fb      	strb	r3, [r7, #31]
 8003f68:	e007      	b.n	8003f7a <UART_SetConfig+0x212>
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	77fb      	strb	r3, [r7, #31]
 8003f6e:	e004      	b.n	8003f7a <UART_SetConfig+0x212>
 8003f70:	2310      	movs	r3, #16
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e001      	b.n	8003f7a <UART_SetConfig+0x212>
 8003f76:	2310      	movs	r3, #16
 8003f78:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f82:	d16d      	bne.n	8004060 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8003f84:	7ffb      	ldrb	r3, [r7, #31]
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d827      	bhi.n	8003fda <UART_SetConfig+0x272>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <UART_SetConfig+0x228>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fb5 	.word	0x08003fb5
 8003f94:	08003fbd 	.word	0x08003fbd
 8003f98:	08003fc5 	.word	0x08003fc5
 8003f9c:	08003fdb 	.word	0x08003fdb
 8003fa0:	08003fcb 	.word	0x08003fcb
 8003fa4:	08003fdb 	.word	0x08003fdb
 8003fa8:	08003fdb 	.word	0x08003fdb
 8003fac:	08003fdb 	.word	0x08003fdb
 8003fb0:	08003fd3 	.word	0x08003fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb4:	f7fe fe98 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 8003fb8:	61b8      	str	r0, [r7, #24]
        break;
 8003fba:	e013      	b.n	8003fe4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fbc:	f7fe feb6 	bl	8002d2c <HAL_RCC_GetPCLK2Freq>
 8003fc0:	61b8      	str	r0, [r7, #24]
        break;
 8003fc2:	e00f      	b.n	8003fe4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc4:	4b25      	ldr	r3, [pc, #148]	; (800405c <UART_SetConfig+0x2f4>)
 8003fc6:	61bb      	str	r3, [r7, #24]
        break;
 8003fc8:	e00c      	b.n	8003fe4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fca:	f7fe fe17 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8003fce:	61b8      	str	r0, [r7, #24]
        break;
 8003fd0:	e008      	b.n	8003fe4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fd6:	61bb      	str	r3, [r7, #24]
        break;
 8003fd8:	e004      	b.n	8003fe4 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	77bb      	strb	r3, [r7, #30]
        break;
 8003fe2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 8086 	beq.w	80040f8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	005a      	lsls	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	441a      	add	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	b29b      	uxth	r3, r3
 8004002:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	2b0f      	cmp	r3, #15
 8004008:	d916      	bls.n	8004038 <UART_SetConfig+0x2d0>
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004010:	d212      	bcs.n	8004038 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	b29b      	uxth	r3, r3
 8004016:	f023 030f 	bic.w	r3, r3, #15
 800401a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	b29b      	uxth	r3, r3
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	b29a      	uxth	r2, r3
 8004028:	89fb      	ldrh	r3, [r7, #14]
 800402a:	4313      	orrs	r3, r2
 800402c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	89fa      	ldrh	r2, [r7, #14]
 8004034:	60da      	str	r2, [r3, #12]
 8004036:	e05f      	b.n	80040f8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	77bb      	strb	r3, [r7, #30]
 800403c:	e05c      	b.n	80040f8 <UART_SetConfig+0x390>
 800403e:	bf00      	nop
 8004040:	efff69f3 	.word	0xefff69f3
 8004044:	40013800 	.word	0x40013800
 8004048:	40021000 	.word	0x40021000
 800404c:	40004400 	.word	0x40004400
 8004050:	40004800 	.word	0x40004800
 8004054:	40004c00 	.word	0x40004c00
 8004058:	40005000 	.word	0x40005000
 800405c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004060:	7ffb      	ldrb	r3, [r7, #31]
 8004062:	2b08      	cmp	r3, #8
 8004064:	d827      	bhi.n	80040b6 <UART_SetConfig+0x34e>
 8004066:	a201      	add	r2, pc, #4	; (adr r2, 800406c <UART_SetConfig+0x304>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	08004091 	.word	0x08004091
 8004070:	08004099 	.word	0x08004099
 8004074:	080040a1 	.word	0x080040a1
 8004078:	080040b7 	.word	0x080040b7
 800407c:	080040a7 	.word	0x080040a7
 8004080:	080040b7 	.word	0x080040b7
 8004084:	080040b7 	.word	0x080040b7
 8004088:	080040b7 	.word	0x080040b7
 800408c:	080040af 	.word	0x080040af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7fe fe2a 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 8004094:	61b8      	str	r0, [r7, #24]
        break;
 8004096:	e013      	b.n	80040c0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004098:	f7fe fe48 	bl	8002d2c <HAL_RCC_GetPCLK2Freq>
 800409c:	61b8      	str	r0, [r7, #24]
        break;
 800409e:	e00f      	b.n	80040c0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a0:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <UART_SetConfig+0x3a8>)
 80040a2:	61bb      	str	r3, [r7, #24]
        break;
 80040a4:	e00c      	b.n	80040c0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a6:	f7fe fda9 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 80040aa:	61b8      	str	r0, [r7, #24]
        break;
 80040ac:	e008      	b.n	80040c0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b2:	61bb      	str	r3, [r7, #24]
        break;
 80040b4:	e004      	b.n	80040c0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	77bb      	strb	r3, [r7, #30]
        break;
 80040be:	bf00      	nop
    }

    if (pclk != 0U)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d018      	beq.n	80040f8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	085a      	lsrs	r2, r3, #1
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	441a      	add	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	b29b      	uxth	r3, r3
 80040da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b0f      	cmp	r3, #15
 80040e0:	d908      	bls.n	80040f4 <UART_SetConfig+0x38c>
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e8:	d204      	bcs.n	80040f4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	60da      	str	r2, [r3, #12]
 80040f2:	e001      	b.n	80040f8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004104:	7fbb      	ldrb	r3, [r7, #30]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	007a1200 	.word	0x007a1200

08004114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d01a      	beq.n	800422a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004212:	d10a      	bne.n	800422a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	605a      	str	r2, [r3, #4]
  }
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af02      	add	r7, sp, #8
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004268:	f7fd f966 	bl	8001538 <HAL_GetTick>
 800426c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b08      	cmp	r3, #8
 800427a:	d10e      	bne.n	800429a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800427c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f82d 	bl	80042ea <UART_WaitOnFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e023      	b.n	80042e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d10e      	bne.n	80042c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f817 	bl	80042ea <UART_WaitOnFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e00d      	b.n	80042e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2220      	movs	r2, #32
 80042ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b09c      	sub	sp, #112	; 0x70
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	4613      	mov	r3, r2
 80042f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fa:	e0a5      	b.n	8004448 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004302:	f000 80a1 	beq.w	8004448 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004306:	f7fd f917 	bl	8001538 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004312:	429a      	cmp	r2, r3
 8004314:	d302      	bcc.n	800431c <UART_WaitOnFlagUntilTimeout+0x32>
 8004316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004318:	2b00      	cmp	r3, #0
 800431a:	d13e      	bne.n	800439a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800432a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800432c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004330:	667b      	str	r3, [r7, #100]	; 0x64
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800433a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800433c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004340:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e6      	bne.n	800431c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3308      	adds	r3, #8
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	663b      	str	r3, [r7, #96]	; 0x60
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3308      	adds	r3, #8
 800436c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800436e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004370:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800437c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e5      	bne.n	800434e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e067      	b.n	800446a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d04f      	beq.n	8004448 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b6:	d147      	bne.n	8004448 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
 80043e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e6      	bne.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3308      	adds	r3, #8
 80043fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	613b      	str	r3, [r7, #16]
   return(result);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	66bb      	str	r3, [r7, #104]	; 0x68
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3308      	adds	r3, #8
 8004412:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004414:	623a      	str	r2, [r7, #32]
 8004416:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	69f9      	ldr	r1, [r7, #28]
 800441a:	6a3a      	ldr	r2, [r7, #32]
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	61bb      	str	r3, [r7, #24]
   return(result);
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e5      	bne.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2220      	movs	r2, #32
 8004432:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e010      	b.n	800446a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	69da      	ldr	r2, [r3, #28]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	4013      	ands	r3, r2
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	429a      	cmp	r2, r3
 8004456:	bf0c      	ite	eq
 8004458:	2301      	moveq	r3, #1
 800445a:	2300      	movne	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	461a      	mov	r2, r3
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	429a      	cmp	r2, r3
 8004464:	f43f af4a 	beq.w	80042fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3770      	adds	r7, #112	; 0x70
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <__errno>:
 8004474:	4b01      	ldr	r3, [pc, #4]	; (800447c <__errno+0x8>)
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000028 	.word	0x20000028

08004480 <__libc_init_array>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	4d0d      	ldr	r5, [pc, #52]	; (80044b8 <__libc_init_array+0x38>)
 8004484:	4c0d      	ldr	r4, [pc, #52]	; (80044bc <__libc_init_array+0x3c>)
 8004486:	1b64      	subs	r4, r4, r5
 8004488:	10a4      	asrs	r4, r4, #2
 800448a:	2600      	movs	r6, #0
 800448c:	42a6      	cmp	r6, r4
 800448e:	d109      	bne.n	80044a4 <__libc_init_array+0x24>
 8004490:	4d0b      	ldr	r5, [pc, #44]	; (80044c0 <__libc_init_array+0x40>)
 8004492:	4c0c      	ldr	r4, [pc, #48]	; (80044c4 <__libc_init_array+0x44>)
 8004494:	f000 fc5e 	bl	8004d54 <_init>
 8004498:	1b64      	subs	r4, r4, r5
 800449a:	10a4      	asrs	r4, r4, #2
 800449c:	2600      	movs	r6, #0
 800449e:	42a6      	cmp	r6, r4
 80044a0:	d105      	bne.n	80044ae <__libc_init_array+0x2e>
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a8:	4798      	blx	r3
 80044aa:	3601      	adds	r6, #1
 80044ac:	e7ee      	b.n	800448c <__libc_init_array+0xc>
 80044ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b2:	4798      	blx	r3
 80044b4:	3601      	adds	r6, #1
 80044b6:	e7f2      	b.n	800449e <__libc_init_array+0x1e>
 80044b8:	08004e74 	.word	0x08004e74
 80044bc:	08004e74 	.word	0x08004e74
 80044c0:	08004e74 	.word	0x08004e74
 80044c4:	08004e78 	.word	0x08004e78

080044c8 <malloc>:
 80044c8:	4b02      	ldr	r3, [pc, #8]	; (80044d4 <malloc+0xc>)
 80044ca:	4601      	mov	r1, r0
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	f000 b871 	b.w	80045b4 <_malloc_r>
 80044d2:	bf00      	nop
 80044d4:	20000028 	.word	0x20000028

080044d8 <free>:
 80044d8:	4b02      	ldr	r3, [pc, #8]	; (80044e4 <free+0xc>)
 80044da:	4601      	mov	r1, r0
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	f000 b819 	b.w	8004514 <_free_r>
 80044e2:	bf00      	nop
 80044e4:	20000028 	.word	0x20000028

080044e8 <memcpy>:
 80044e8:	440a      	add	r2, r1
 80044ea:	4291      	cmp	r1, r2
 80044ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80044f0:	d100      	bne.n	80044f4 <memcpy+0xc>
 80044f2:	4770      	bx	lr
 80044f4:	b510      	push	{r4, lr}
 80044f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044fe:	4291      	cmp	r1, r2
 8004500:	d1f9      	bne.n	80044f6 <memcpy+0xe>
 8004502:	bd10      	pop	{r4, pc}

08004504 <memset>:
 8004504:	4402      	add	r2, r0
 8004506:	4603      	mov	r3, r0
 8004508:	4293      	cmp	r3, r2
 800450a:	d100      	bne.n	800450e <memset+0xa>
 800450c:	4770      	bx	lr
 800450e:	f803 1b01 	strb.w	r1, [r3], #1
 8004512:	e7f9      	b.n	8004508 <memset+0x4>

08004514 <_free_r>:
 8004514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004516:	2900      	cmp	r1, #0
 8004518:	d048      	beq.n	80045ac <_free_r+0x98>
 800451a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800451e:	9001      	str	r0, [sp, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	f1a1 0404 	sub.w	r4, r1, #4
 8004526:	bfb8      	it	lt
 8004528:	18e4      	addlt	r4, r4, r3
 800452a:	f000 f8cd 	bl	80046c8 <__malloc_lock>
 800452e:	4a20      	ldr	r2, [pc, #128]	; (80045b0 <_free_r+0x9c>)
 8004530:	9801      	ldr	r0, [sp, #4]
 8004532:	6813      	ldr	r3, [r2, #0]
 8004534:	4615      	mov	r5, r2
 8004536:	b933      	cbnz	r3, 8004546 <_free_r+0x32>
 8004538:	6063      	str	r3, [r4, #4]
 800453a:	6014      	str	r4, [r2, #0]
 800453c:	b003      	add	sp, #12
 800453e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004542:	f000 b8c7 	b.w	80046d4 <__malloc_unlock>
 8004546:	42a3      	cmp	r3, r4
 8004548:	d90b      	bls.n	8004562 <_free_r+0x4e>
 800454a:	6821      	ldr	r1, [r4, #0]
 800454c:	1862      	adds	r2, r4, r1
 800454e:	4293      	cmp	r3, r2
 8004550:	bf04      	itt	eq
 8004552:	681a      	ldreq	r2, [r3, #0]
 8004554:	685b      	ldreq	r3, [r3, #4]
 8004556:	6063      	str	r3, [r4, #4]
 8004558:	bf04      	itt	eq
 800455a:	1852      	addeq	r2, r2, r1
 800455c:	6022      	streq	r2, [r4, #0]
 800455e:	602c      	str	r4, [r5, #0]
 8004560:	e7ec      	b.n	800453c <_free_r+0x28>
 8004562:	461a      	mov	r2, r3
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	b10b      	cbz	r3, 800456c <_free_r+0x58>
 8004568:	42a3      	cmp	r3, r4
 800456a:	d9fa      	bls.n	8004562 <_free_r+0x4e>
 800456c:	6811      	ldr	r1, [r2, #0]
 800456e:	1855      	adds	r5, r2, r1
 8004570:	42a5      	cmp	r5, r4
 8004572:	d10b      	bne.n	800458c <_free_r+0x78>
 8004574:	6824      	ldr	r4, [r4, #0]
 8004576:	4421      	add	r1, r4
 8004578:	1854      	adds	r4, r2, r1
 800457a:	42a3      	cmp	r3, r4
 800457c:	6011      	str	r1, [r2, #0]
 800457e:	d1dd      	bne.n	800453c <_free_r+0x28>
 8004580:	681c      	ldr	r4, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	6053      	str	r3, [r2, #4]
 8004586:	4421      	add	r1, r4
 8004588:	6011      	str	r1, [r2, #0]
 800458a:	e7d7      	b.n	800453c <_free_r+0x28>
 800458c:	d902      	bls.n	8004594 <_free_r+0x80>
 800458e:	230c      	movs	r3, #12
 8004590:	6003      	str	r3, [r0, #0]
 8004592:	e7d3      	b.n	800453c <_free_r+0x28>
 8004594:	6825      	ldr	r5, [r4, #0]
 8004596:	1961      	adds	r1, r4, r5
 8004598:	428b      	cmp	r3, r1
 800459a:	bf04      	itt	eq
 800459c:	6819      	ldreq	r1, [r3, #0]
 800459e:	685b      	ldreq	r3, [r3, #4]
 80045a0:	6063      	str	r3, [r4, #4]
 80045a2:	bf04      	itt	eq
 80045a4:	1949      	addeq	r1, r1, r5
 80045a6:	6021      	streq	r1, [r4, #0]
 80045a8:	6054      	str	r4, [r2, #4]
 80045aa:	e7c7      	b.n	800453c <_free_r+0x28>
 80045ac:	b003      	add	sp, #12
 80045ae:	bd30      	pop	{r4, r5, pc}
 80045b0:	2000013c 	.word	0x2000013c

080045b4 <_malloc_r>:
 80045b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b6:	1ccd      	adds	r5, r1, #3
 80045b8:	f025 0503 	bic.w	r5, r5, #3
 80045bc:	3508      	adds	r5, #8
 80045be:	2d0c      	cmp	r5, #12
 80045c0:	bf38      	it	cc
 80045c2:	250c      	movcc	r5, #12
 80045c4:	2d00      	cmp	r5, #0
 80045c6:	4606      	mov	r6, r0
 80045c8:	db01      	blt.n	80045ce <_malloc_r+0x1a>
 80045ca:	42a9      	cmp	r1, r5
 80045cc:	d903      	bls.n	80045d6 <_malloc_r+0x22>
 80045ce:	230c      	movs	r3, #12
 80045d0:	6033      	str	r3, [r6, #0]
 80045d2:	2000      	movs	r0, #0
 80045d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045d6:	f000 f877 	bl	80046c8 <__malloc_lock>
 80045da:	4921      	ldr	r1, [pc, #132]	; (8004660 <_malloc_r+0xac>)
 80045dc:	680a      	ldr	r2, [r1, #0]
 80045de:	4614      	mov	r4, r2
 80045e0:	b99c      	cbnz	r4, 800460a <_malloc_r+0x56>
 80045e2:	4f20      	ldr	r7, [pc, #128]	; (8004664 <_malloc_r+0xb0>)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	b923      	cbnz	r3, 80045f2 <_malloc_r+0x3e>
 80045e8:	4621      	mov	r1, r4
 80045ea:	4630      	mov	r0, r6
 80045ec:	f000 f83c 	bl	8004668 <_sbrk_r>
 80045f0:	6038      	str	r0, [r7, #0]
 80045f2:	4629      	mov	r1, r5
 80045f4:	4630      	mov	r0, r6
 80045f6:	f000 f837 	bl	8004668 <_sbrk_r>
 80045fa:	1c43      	adds	r3, r0, #1
 80045fc:	d123      	bne.n	8004646 <_malloc_r+0x92>
 80045fe:	230c      	movs	r3, #12
 8004600:	6033      	str	r3, [r6, #0]
 8004602:	4630      	mov	r0, r6
 8004604:	f000 f866 	bl	80046d4 <__malloc_unlock>
 8004608:	e7e3      	b.n	80045d2 <_malloc_r+0x1e>
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	1b5b      	subs	r3, r3, r5
 800460e:	d417      	bmi.n	8004640 <_malloc_r+0x8c>
 8004610:	2b0b      	cmp	r3, #11
 8004612:	d903      	bls.n	800461c <_malloc_r+0x68>
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	441c      	add	r4, r3
 8004618:	6025      	str	r5, [r4, #0]
 800461a:	e004      	b.n	8004626 <_malloc_r+0x72>
 800461c:	6863      	ldr	r3, [r4, #4]
 800461e:	42a2      	cmp	r2, r4
 8004620:	bf0c      	ite	eq
 8004622:	600b      	streq	r3, [r1, #0]
 8004624:	6053      	strne	r3, [r2, #4]
 8004626:	4630      	mov	r0, r6
 8004628:	f000 f854 	bl	80046d4 <__malloc_unlock>
 800462c:	f104 000b 	add.w	r0, r4, #11
 8004630:	1d23      	adds	r3, r4, #4
 8004632:	f020 0007 	bic.w	r0, r0, #7
 8004636:	1ac2      	subs	r2, r0, r3
 8004638:	d0cc      	beq.n	80045d4 <_malloc_r+0x20>
 800463a:	1a1b      	subs	r3, r3, r0
 800463c:	50a3      	str	r3, [r4, r2]
 800463e:	e7c9      	b.n	80045d4 <_malloc_r+0x20>
 8004640:	4622      	mov	r2, r4
 8004642:	6864      	ldr	r4, [r4, #4]
 8004644:	e7cc      	b.n	80045e0 <_malloc_r+0x2c>
 8004646:	1cc4      	adds	r4, r0, #3
 8004648:	f024 0403 	bic.w	r4, r4, #3
 800464c:	42a0      	cmp	r0, r4
 800464e:	d0e3      	beq.n	8004618 <_malloc_r+0x64>
 8004650:	1a21      	subs	r1, r4, r0
 8004652:	4630      	mov	r0, r6
 8004654:	f000 f808 	bl	8004668 <_sbrk_r>
 8004658:	3001      	adds	r0, #1
 800465a:	d1dd      	bne.n	8004618 <_malloc_r+0x64>
 800465c:	e7cf      	b.n	80045fe <_malloc_r+0x4a>
 800465e:	bf00      	nop
 8004660:	2000013c 	.word	0x2000013c
 8004664:	20000140 	.word	0x20000140

08004668 <_sbrk_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4d06      	ldr	r5, [pc, #24]	; (8004684 <_sbrk_r+0x1c>)
 800466c:	2300      	movs	r3, #0
 800466e:	4604      	mov	r4, r0
 8004670:	4608      	mov	r0, r1
 8004672:	602b      	str	r3, [r5, #0]
 8004674:	f7fc fe94 	bl	80013a0 <_sbrk>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d102      	bne.n	8004682 <_sbrk_r+0x1a>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	b103      	cbz	r3, 8004682 <_sbrk_r+0x1a>
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	200002ac 	.word	0x200002ac

08004688 <siprintf>:
 8004688:	b40e      	push	{r1, r2, r3}
 800468a:	b500      	push	{lr}
 800468c:	b09c      	sub	sp, #112	; 0x70
 800468e:	ab1d      	add	r3, sp, #116	; 0x74
 8004690:	9002      	str	r0, [sp, #8]
 8004692:	9006      	str	r0, [sp, #24]
 8004694:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004698:	4809      	ldr	r0, [pc, #36]	; (80046c0 <siprintf+0x38>)
 800469a:	9107      	str	r1, [sp, #28]
 800469c:	9104      	str	r1, [sp, #16]
 800469e:	4909      	ldr	r1, [pc, #36]	; (80046c4 <siprintf+0x3c>)
 80046a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80046a4:	9105      	str	r1, [sp, #20]
 80046a6:	6800      	ldr	r0, [r0, #0]
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	a902      	add	r1, sp, #8
 80046ac:	f000 f874 	bl	8004798 <_svfiprintf_r>
 80046b0:	9b02      	ldr	r3, [sp, #8]
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	b01c      	add	sp, #112	; 0x70
 80046b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046bc:	b003      	add	sp, #12
 80046be:	4770      	bx	lr
 80046c0:	20000028 	.word	0x20000028
 80046c4:	ffff0208 	.word	0xffff0208

080046c8 <__malloc_lock>:
 80046c8:	4801      	ldr	r0, [pc, #4]	; (80046d0 <__malloc_lock+0x8>)
 80046ca:	f000 baf9 	b.w	8004cc0 <__retarget_lock_acquire_recursive>
 80046ce:	bf00      	nop
 80046d0:	200002b4 	.word	0x200002b4

080046d4 <__malloc_unlock>:
 80046d4:	4801      	ldr	r0, [pc, #4]	; (80046dc <__malloc_unlock+0x8>)
 80046d6:	f000 baf4 	b.w	8004cc2 <__retarget_lock_release_recursive>
 80046da:	bf00      	nop
 80046dc:	200002b4 	.word	0x200002b4

080046e0 <__ssputs_r>:
 80046e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e4:	688e      	ldr	r6, [r1, #8]
 80046e6:	429e      	cmp	r6, r3
 80046e8:	4682      	mov	sl, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	4690      	mov	r8, r2
 80046ee:	461f      	mov	r7, r3
 80046f0:	d838      	bhi.n	8004764 <__ssputs_r+0x84>
 80046f2:	898a      	ldrh	r2, [r1, #12]
 80046f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046f8:	d032      	beq.n	8004760 <__ssputs_r+0x80>
 80046fa:	6825      	ldr	r5, [r4, #0]
 80046fc:	6909      	ldr	r1, [r1, #16]
 80046fe:	eba5 0901 	sub.w	r9, r5, r1
 8004702:	6965      	ldr	r5, [r4, #20]
 8004704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004708:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800470c:	3301      	adds	r3, #1
 800470e:	444b      	add	r3, r9
 8004710:	106d      	asrs	r5, r5, #1
 8004712:	429d      	cmp	r5, r3
 8004714:	bf38      	it	cc
 8004716:	461d      	movcc	r5, r3
 8004718:	0553      	lsls	r3, r2, #21
 800471a:	d531      	bpl.n	8004780 <__ssputs_r+0xa0>
 800471c:	4629      	mov	r1, r5
 800471e:	f7ff ff49 	bl	80045b4 <_malloc_r>
 8004722:	4606      	mov	r6, r0
 8004724:	b950      	cbnz	r0, 800473c <__ssputs_r+0x5c>
 8004726:	230c      	movs	r3, #12
 8004728:	f8ca 3000 	str.w	r3, [sl]
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004732:	81a3      	strh	r3, [r4, #12]
 8004734:	f04f 30ff 	mov.w	r0, #4294967295
 8004738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800473c:	6921      	ldr	r1, [r4, #16]
 800473e:	464a      	mov	r2, r9
 8004740:	f7ff fed2 	bl	80044e8 <memcpy>
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800474a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474e:	81a3      	strh	r3, [r4, #12]
 8004750:	6126      	str	r6, [r4, #16]
 8004752:	6165      	str	r5, [r4, #20]
 8004754:	444e      	add	r6, r9
 8004756:	eba5 0509 	sub.w	r5, r5, r9
 800475a:	6026      	str	r6, [r4, #0]
 800475c:	60a5      	str	r5, [r4, #8]
 800475e:	463e      	mov	r6, r7
 8004760:	42be      	cmp	r6, r7
 8004762:	d900      	bls.n	8004766 <__ssputs_r+0x86>
 8004764:	463e      	mov	r6, r7
 8004766:	4632      	mov	r2, r6
 8004768:	6820      	ldr	r0, [r4, #0]
 800476a:	4641      	mov	r1, r8
 800476c:	f000 faaa 	bl	8004cc4 <memmove>
 8004770:	68a3      	ldr	r3, [r4, #8]
 8004772:	6822      	ldr	r2, [r4, #0]
 8004774:	1b9b      	subs	r3, r3, r6
 8004776:	4432      	add	r2, r6
 8004778:	60a3      	str	r3, [r4, #8]
 800477a:	6022      	str	r2, [r4, #0]
 800477c:	2000      	movs	r0, #0
 800477e:	e7db      	b.n	8004738 <__ssputs_r+0x58>
 8004780:	462a      	mov	r2, r5
 8004782:	f000 fab9 	bl	8004cf8 <_realloc_r>
 8004786:	4606      	mov	r6, r0
 8004788:	2800      	cmp	r0, #0
 800478a:	d1e1      	bne.n	8004750 <__ssputs_r+0x70>
 800478c:	6921      	ldr	r1, [r4, #16]
 800478e:	4650      	mov	r0, sl
 8004790:	f7ff fec0 	bl	8004514 <_free_r>
 8004794:	e7c7      	b.n	8004726 <__ssputs_r+0x46>
	...

08004798 <_svfiprintf_r>:
 8004798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479c:	4698      	mov	r8, r3
 800479e:	898b      	ldrh	r3, [r1, #12]
 80047a0:	061b      	lsls	r3, r3, #24
 80047a2:	b09d      	sub	sp, #116	; 0x74
 80047a4:	4607      	mov	r7, r0
 80047a6:	460d      	mov	r5, r1
 80047a8:	4614      	mov	r4, r2
 80047aa:	d50e      	bpl.n	80047ca <_svfiprintf_r+0x32>
 80047ac:	690b      	ldr	r3, [r1, #16]
 80047ae:	b963      	cbnz	r3, 80047ca <_svfiprintf_r+0x32>
 80047b0:	2140      	movs	r1, #64	; 0x40
 80047b2:	f7ff feff 	bl	80045b4 <_malloc_r>
 80047b6:	6028      	str	r0, [r5, #0]
 80047b8:	6128      	str	r0, [r5, #16]
 80047ba:	b920      	cbnz	r0, 80047c6 <_svfiprintf_r+0x2e>
 80047bc:	230c      	movs	r3, #12
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	e0d1      	b.n	800496a <_svfiprintf_r+0x1d2>
 80047c6:	2340      	movs	r3, #64	; 0x40
 80047c8:	616b      	str	r3, [r5, #20]
 80047ca:	2300      	movs	r3, #0
 80047cc:	9309      	str	r3, [sp, #36]	; 0x24
 80047ce:	2320      	movs	r3, #32
 80047d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80047d8:	2330      	movs	r3, #48	; 0x30
 80047da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004984 <_svfiprintf_r+0x1ec>
 80047de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047e2:	f04f 0901 	mov.w	r9, #1
 80047e6:	4623      	mov	r3, r4
 80047e8:	469a      	mov	sl, r3
 80047ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ee:	b10a      	cbz	r2, 80047f4 <_svfiprintf_r+0x5c>
 80047f0:	2a25      	cmp	r2, #37	; 0x25
 80047f2:	d1f9      	bne.n	80047e8 <_svfiprintf_r+0x50>
 80047f4:	ebba 0b04 	subs.w	fp, sl, r4
 80047f8:	d00b      	beq.n	8004812 <_svfiprintf_r+0x7a>
 80047fa:	465b      	mov	r3, fp
 80047fc:	4622      	mov	r2, r4
 80047fe:	4629      	mov	r1, r5
 8004800:	4638      	mov	r0, r7
 8004802:	f7ff ff6d 	bl	80046e0 <__ssputs_r>
 8004806:	3001      	adds	r0, #1
 8004808:	f000 80aa 	beq.w	8004960 <_svfiprintf_r+0x1c8>
 800480c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800480e:	445a      	add	r2, fp
 8004810:	9209      	str	r2, [sp, #36]	; 0x24
 8004812:	f89a 3000 	ldrb.w	r3, [sl]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 80a2 	beq.w	8004960 <_svfiprintf_r+0x1c8>
 800481c:	2300      	movs	r3, #0
 800481e:	f04f 32ff 	mov.w	r2, #4294967295
 8004822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004826:	f10a 0a01 	add.w	sl, sl, #1
 800482a:	9304      	str	r3, [sp, #16]
 800482c:	9307      	str	r3, [sp, #28]
 800482e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004832:	931a      	str	r3, [sp, #104]	; 0x68
 8004834:	4654      	mov	r4, sl
 8004836:	2205      	movs	r2, #5
 8004838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800483c:	4851      	ldr	r0, [pc, #324]	; (8004984 <_svfiprintf_r+0x1ec>)
 800483e:	f7fb fccf 	bl	80001e0 <memchr>
 8004842:	9a04      	ldr	r2, [sp, #16]
 8004844:	b9d8      	cbnz	r0, 800487e <_svfiprintf_r+0xe6>
 8004846:	06d0      	lsls	r0, r2, #27
 8004848:	bf44      	itt	mi
 800484a:	2320      	movmi	r3, #32
 800484c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004850:	0711      	lsls	r1, r2, #28
 8004852:	bf44      	itt	mi
 8004854:	232b      	movmi	r3, #43	; 0x2b
 8004856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800485a:	f89a 3000 	ldrb.w	r3, [sl]
 800485e:	2b2a      	cmp	r3, #42	; 0x2a
 8004860:	d015      	beq.n	800488e <_svfiprintf_r+0xf6>
 8004862:	9a07      	ldr	r2, [sp, #28]
 8004864:	4654      	mov	r4, sl
 8004866:	2000      	movs	r0, #0
 8004868:	f04f 0c0a 	mov.w	ip, #10
 800486c:	4621      	mov	r1, r4
 800486e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004872:	3b30      	subs	r3, #48	; 0x30
 8004874:	2b09      	cmp	r3, #9
 8004876:	d94e      	bls.n	8004916 <_svfiprintf_r+0x17e>
 8004878:	b1b0      	cbz	r0, 80048a8 <_svfiprintf_r+0x110>
 800487a:	9207      	str	r2, [sp, #28]
 800487c:	e014      	b.n	80048a8 <_svfiprintf_r+0x110>
 800487e:	eba0 0308 	sub.w	r3, r0, r8
 8004882:	fa09 f303 	lsl.w	r3, r9, r3
 8004886:	4313      	orrs	r3, r2
 8004888:	9304      	str	r3, [sp, #16]
 800488a:	46a2      	mov	sl, r4
 800488c:	e7d2      	b.n	8004834 <_svfiprintf_r+0x9c>
 800488e:	9b03      	ldr	r3, [sp, #12]
 8004890:	1d19      	adds	r1, r3, #4
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	9103      	str	r1, [sp, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	bfbb      	ittet	lt
 800489a:	425b      	neglt	r3, r3
 800489c:	f042 0202 	orrlt.w	r2, r2, #2
 80048a0:	9307      	strge	r3, [sp, #28]
 80048a2:	9307      	strlt	r3, [sp, #28]
 80048a4:	bfb8      	it	lt
 80048a6:	9204      	strlt	r2, [sp, #16]
 80048a8:	7823      	ldrb	r3, [r4, #0]
 80048aa:	2b2e      	cmp	r3, #46	; 0x2e
 80048ac:	d10c      	bne.n	80048c8 <_svfiprintf_r+0x130>
 80048ae:	7863      	ldrb	r3, [r4, #1]
 80048b0:	2b2a      	cmp	r3, #42	; 0x2a
 80048b2:	d135      	bne.n	8004920 <_svfiprintf_r+0x188>
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	1d1a      	adds	r2, r3, #4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	9203      	str	r2, [sp, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bfb8      	it	lt
 80048c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80048c4:	3402      	adds	r4, #2
 80048c6:	9305      	str	r3, [sp, #20]
 80048c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004994 <_svfiprintf_r+0x1fc>
 80048cc:	7821      	ldrb	r1, [r4, #0]
 80048ce:	2203      	movs	r2, #3
 80048d0:	4650      	mov	r0, sl
 80048d2:	f7fb fc85 	bl	80001e0 <memchr>
 80048d6:	b140      	cbz	r0, 80048ea <_svfiprintf_r+0x152>
 80048d8:	2340      	movs	r3, #64	; 0x40
 80048da:	eba0 000a 	sub.w	r0, r0, sl
 80048de:	fa03 f000 	lsl.w	r0, r3, r0
 80048e2:	9b04      	ldr	r3, [sp, #16]
 80048e4:	4303      	orrs	r3, r0
 80048e6:	3401      	adds	r4, #1
 80048e8:	9304      	str	r3, [sp, #16]
 80048ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ee:	4826      	ldr	r0, [pc, #152]	; (8004988 <_svfiprintf_r+0x1f0>)
 80048f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048f4:	2206      	movs	r2, #6
 80048f6:	f7fb fc73 	bl	80001e0 <memchr>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d038      	beq.n	8004970 <_svfiprintf_r+0x1d8>
 80048fe:	4b23      	ldr	r3, [pc, #140]	; (800498c <_svfiprintf_r+0x1f4>)
 8004900:	bb1b      	cbnz	r3, 800494a <_svfiprintf_r+0x1b2>
 8004902:	9b03      	ldr	r3, [sp, #12]
 8004904:	3307      	adds	r3, #7
 8004906:	f023 0307 	bic.w	r3, r3, #7
 800490a:	3308      	adds	r3, #8
 800490c:	9303      	str	r3, [sp, #12]
 800490e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004910:	4433      	add	r3, r6
 8004912:	9309      	str	r3, [sp, #36]	; 0x24
 8004914:	e767      	b.n	80047e6 <_svfiprintf_r+0x4e>
 8004916:	fb0c 3202 	mla	r2, ip, r2, r3
 800491a:	460c      	mov	r4, r1
 800491c:	2001      	movs	r0, #1
 800491e:	e7a5      	b.n	800486c <_svfiprintf_r+0xd4>
 8004920:	2300      	movs	r3, #0
 8004922:	3401      	adds	r4, #1
 8004924:	9305      	str	r3, [sp, #20]
 8004926:	4619      	mov	r1, r3
 8004928:	f04f 0c0a 	mov.w	ip, #10
 800492c:	4620      	mov	r0, r4
 800492e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004932:	3a30      	subs	r2, #48	; 0x30
 8004934:	2a09      	cmp	r2, #9
 8004936:	d903      	bls.n	8004940 <_svfiprintf_r+0x1a8>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0c5      	beq.n	80048c8 <_svfiprintf_r+0x130>
 800493c:	9105      	str	r1, [sp, #20]
 800493e:	e7c3      	b.n	80048c8 <_svfiprintf_r+0x130>
 8004940:	fb0c 2101 	mla	r1, ip, r1, r2
 8004944:	4604      	mov	r4, r0
 8004946:	2301      	movs	r3, #1
 8004948:	e7f0      	b.n	800492c <_svfiprintf_r+0x194>
 800494a:	ab03      	add	r3, sp, #12
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	462a      	mov	r2, r5
 8004950:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <_svfiprintf_r+0x1f8>)
 8004952:	a904      	add	r1, sp, #16
 8004954:	4638      	mov	r0, r7
 8004956:	f3af 8000 	nop.w
 800495a:	1c42      	adds	r2, r0, #1
 800495c:	4606      	mov	r6, r0
 800495e:	d1d6      	bne.n	800490e <_svfiprintf_r+0x176>
 8004960:	89ab      	ldrh	r3, [r5, #12]
 8004962:	065b      	lsls	r3, r3, #25
 8004964:	f53f af2c 	bmi.w	80047c0 <_svfiprintf_r+0x28>
 8004968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800496a:	b01d      	add	sp, #116	; 0x74
 800496c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004970:	ab03      	add	r3, sp, #12
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	462a      	mov	r2, r5
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <_svfiprintf_r+0x1f8>)
 8004978:	a904      	add	r1, sp, #16
 800497a:	4638      	mov	r0, r7
 800497c:	f000 f87a 	bl	8004a74 <_printf_i>
 8004980:	e7eb      	b.n	800495a <_svfiprintf_r+0x1c2>
 8004982:	bf00      	nop
 8004984:	08004e40 	.word	0x08004e40
 8004988:	08004e4a 	.word	0x08004e4a
 800498c:	00000000 	.word	0x00000000
 8004990:	080046e1 	.word	0x080046e1
 8004994:	08004e46 	.word	0x08004e46

08004998 <_printf_common>:
 8004998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800499c:	4616      	mov	r6, r2
 800499e:	4699      	mov	r9, r3
 80049a0:	688a      	ldr	r2, [r1, #8]
 80049a2:	690b      	ldr	r3, [r1, #16]
 80049a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049a8:	4293      	cmp	r3, r2
 80049aa:	bfb8      	it	lt
 80049ac:	4613      	movlt	r3, r2
 80049ae:	6033      	str	r3, [r6, #0]
 80049b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049b4:	4607      	mov	r7, r0
 80049b6:	460c      	mov	r4, r1
 80049b8:	b10a      	cbz	r2, 80049be <_printf_common+0x26>
 80049ba:	3301      	adds	r3, #1
 80049bc:	6033      	str	r3, [r6, #0]
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	0699      	lsls	r1, r3, #26
 80049c2:	bf42      	ittt	mi
 80049c4:	6833      	ldrmi	r3, [r6, #0]
 80049c6:	3302      	addmi	r3, #2
 80049c8:	6033      	strmi	r3, [r6, #0]
 80049ca:	6825      	ldr	r5, [r4, #0]
 80049cc:	f015 0506 	ands.w	r5, r5, #6
 80049d0:	d106      	bne.n	80049e0 <_printf_common+0x48>
 80049d2:	f104 0a19 	add.w	sl, r4, #25
 80049d6:	68e3      	ldr	r3, [r4, #12]
 80049d8:	6832      	ldr	r2, [r6, #0]
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	42ab      	cmp	r3, r5
 80049de:	dc26      	bgt.n	8004a2e <_printf_common+0x96>
 80049e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049e4:	1e13      	subs	r3, r2, #0
 80049e6:	6822      	ldr	r2, [r4, #0]
 80049e8:	bf18      	it	ne
 80049ea:	2301      	movne	r3, #1
 80049ec:	0692      	lsls	r2, r2, #26
 80049ee:	d42b      	bmi.n	8004a48 <_printf_common+0xb0>
 80049f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049f4:	4649      	mov	r1, r9
 80049f6:	4638      	mov	r0, r7
 80049f8:	47c0      	blx	r8
 80049fa:	3001      	adds	r0, #1
 80049fc:	d01e      	beq.n	8004a3c <_printf_common+0xa4>
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	68e5      	ldr	r5, [r4, #12]
 8004a02:	6832      	ldr	r2, [r6, #0]
 8004a04:	f003 0306 	and.w	r3, r3, #6
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	bf08      	it	eq
 8004a0c:	1aad      	subeq	r5, r5, r2
 8004a0e:	68a3      	ldr	r3, [r4, #8]
 8004a10:	6922      	ldr	r2, [r4, #16]
 8004a12:	bf0c      	ite	eq
 8004a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a18:	2500      	movne	r5, #0
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	bfc4      	itt	gt
 8004a1e:	1a9b      	subgt	r3, r3, r2
 8004a20:	18ed      	addgt	r5, r5, r3
 8004a22:	2600      	movs	r6, #0
 8004a24:	341a      	adds	r4, #26
 8004a26:	42b5      	cmp	r5, r6
 8004a28:	d11a      	bne.n	8004a60 <_printf_common+0xc8>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e008      	b.n	8004a40 <_printf_common+0xa8>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	4652      	mov	r2, sl
 8004a32:	4649      	mov	r1, r9
 8004a34:	4638      	mov	r0, r7
 8004a36:	47c0      	blx	r8
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d103      	bne.n	8004a44 <_printf_common+0xac>
 8004a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a44:	3501      	adds	r5, #1
 8004a46:	e7c6      	b.n	80049d6 <_printf_common+0x3e>
 8004a48:	18e1      	adds	r1, r4, r3
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	2030      	movs	r0, #48	; 0x30
 8004a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a52:	4422      	add	r2, r4
 8004a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a5c:	3302      	adds	r3, #2
 8004a5e:	e7c7      	b.n	80049f0 <_printf_common+0x58>
 8004a60:	2301      	movs	r3, #1
 8004a62:	4622      	mov	r2, r4
 8004a64:	4649      	mov	r1, r9
 8004a66:	4638      	mov	r0, r7
 8004a68:	47c0      	blx	r8
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	d0e6      	beq.n	8004a3c <_printf_common+0xa4>
 8004a6e:	3601      	adds	r6, #1
 8004a70:	e7d9      	b.n	8004a26 <_printf_common+0x8e>
	...

08004a74 <_printf_i>:
 8004a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a78:	460c      	mov	r4, r1
 8004a7a:	4691      	mov	r9, r2
 8004a7c:	7e27      	ldrb	r7, [r4, #24]
 8004a7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a80:	2f78      	cmp	r7, #120	; 0x78
 8004a82:	4680      	mov	r8, r0
 8004a84:	469a      	mov	sl, r3
 8004a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a8a:	d807      	bhi.n	8004a9c <_printf_i+0x28>
 8004a8c:	2f62      	cmp	r7, #98	; 0x62
 8004a8e:	d80a      	bhi.n	8004aa6 <_printf_i+0x32>
 8004a90:	2f00      	cmp	r7, #0
 8004a92:	f000 80d8 	beq.w	8004c46 <_printf_i+0x1d2>
 8004a96:	2f58      	cmp	r7, #88	; 0x58
 8004a98:	f000 80a3 	beq.w	8004be2 <_printf_i+0x16e>
 8004a9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004aa4:	e03a      	b.n	8004b1c <_printf_i+0xa8>
 8004aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004aaa:	2b15      	cmp	r3, #21
 8004aac:	d8f6      	bhi.n	8004a9c <_printf_i+0x28>
 8004aae:	a001      	add	r0, pc, #4	; (adr r0, 8004ab4 <_printf_i+0x40>)
 8004ab0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ab4:	08004b0d 	.word	0x08004b0d
 8004ab8:	08004b21 	.word	0x08004b21
 8004abc:	08004a9d 	.word	0x08004a9d
 8004ac0:	08004a9d 	.word	0x08004a9d
 8004ac4:	08004a9d 	.word	0x08004a9d
 8004ac8:	08004a9d 	.word	0x08004a9d
 8004acc:	08004b21 	.word	0x08004b21
 8004ad0:	08004a9d 	.word	0x08004a9d
 8004ad4:	08004a9d 	.word	0x08004a9d
 8004ad8:	08004a9d 	.word	0x08004a9d
 8004adc:	08004a9d 	.word	0x08004a9d
 8004ae0:	08004c2d 	.word	0x08004c2d
 8004ae4:	08004b51 	.word	0x08004b51
 8004ae8:	08004c0f 	.word	0x08004c0f
 8004aec:	08004a9d 	.word	0x08004a9d
 8004af0:	08004a9d 	.word	0x08004a9d
 8004af4:	08004c4f 	.word	0x08004c4f
 8004af8:	08004a9d 	.word	0x08004a9d
 8004afc:	08004b51 	.word	0x08004b51
 8004b00:	08004a9d 	.word	0x08004a9d
 8004b04:	08004a9d 	.word	0x08004a9d
 8004b08:	08004c17 	.word	0x08004c17
 8004b0c:	680b      	ldr	r3, [r1, #0]
 8004b0e:	1d1a      	adds	r2, r3, #4
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	600a      	str	r2, [r1, #0]
 8004b14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0a3      	b.n	8004c68 <_printf_i+0x1f4>
 8004b20:	6825      	ldr	r5, [r4, #0]
 8004b22:	6808      	ldr	r0, [r1, #0]
 8004b24:	062e      	lsls	r6, r5, #24
 8004b26:	f100 0304 	add.w	r3, r0, #4
 8004b2a:	d50a      	bpl.n	8004b42 <_printf_i+0xce>
 8004b2c:	6805      	ldr	r5, [r0, #0]
 8004b2e:	600b      	str	r3, [r1, #0]
 8004b30:	2d00      	cmp	r5, #0
 8004b32:	da03      	bge.n	8004b3c <_printf_i+0xc8>
 8004b34:	232d      	movs	r3, #45	; 0x2d
 8004b36:	426d      	negs	r5, r5
 8004b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b3c:	485e      	ldr	r0, [pc, #376]	; (8004cb8 <_printf_i+0x244>)
 8004b3e:	230a      	movs	r3, #10
 8004b40:	e019      	b.n	8004b76 <_printf_i+0x102>
 8004b42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b46:	6805      	ldr	r5, [r0, #0]
 8004b48:	600b      	str	r3, [r1, #0]
 8004b4a:	bf18      	it	ne
 8004b4c:	b22d      	sxthne	r5, r5
 8004b4e:	e7ef      	b.n	8004b30 <_printf_i+0xbc>
 8004b50:	680b      	ldr	r3, [r1, #0]
 8004b52:	6825      	ldr	r5, [r4, #0]
 8004b54:	1d18      	adds	r0, r3, #4
 8004b56:	6008      	str	r0, [r1, #0]
 8004b58:	0628      	lsls	r0, r5, #24
 8004b5a:	d501      	bpl.n	8004b60 <_printf_i+0xec>
 8004b5c:	681d      	ldr	r5, [r3, #0]
 8004b5e:	e002      	b.n	8004b66 <_printf_i+0xf2>
 8004b60:	0669      	lsls	r1, r5, #25
 8004b62:	d5fb      	bpl.n	8004b5c <_printf_i+0xe8>
 8004b64:	881d      	ldrh	r5, [r3, #0]
 8004b66:	4854      	ldr	r0, [pc, #336]	; (8004cb8 <_printf_i+0x244>)
 8004b68:	2f6f      	cmp	r7, #111	; 0x6f
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2308      	moveq	r3, #8
 8004b6e:	230a      	movne	r3, #10
 8004b70:	2100      	movs	r1, #0
 8004b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b76:	6866      	ldr	r6, [r4, #4]
 8004b78:	60a6      	str	r6, [r4, #8]
 8004b7a:	2e00      	cmp	r6, #0
 8004b7c:	bfa2      	ittt	ge
 8004b7e:	6821      	ldrge	r1, [r4, #0]
 8004b80:	f021 0104 	bicge.w	r1, r1, #4
 8004b84:	6021      	strge	r1, [r4, #0]
 8004b86:	b90d      	cbnz	r5, 8004b8c <_printf_i+0x118>
 8004b88:	2e00      	cmp	r6, #0
 8004b8a:	d04d      	beq.n	8004c28 <_printf_i+0x1b4>
 8004b8c:	4616      	mov	r6, r2
 8004b8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b92:	fb03 5711 	mls	r7, r3, r1, r5
 8004b96:	5dc7      	ldrb	r7, [r0, r7]
 8004b98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b9c:	462f      	mov	r7, r5
 8004b9e:	42bb      	cmp	r3, r7
 8004ba0:	460d      	mov	r5, r1
 8004ba2:	d9f4      	bls.n	8004b8e <_printf_i+0x11a>
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d10b      	bne.n	8004bc0 <_printf_i+0x14c>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	07df      	lsls	r7, r3, #31
 8004bac:	d508      	bpl.n	8004bc0 <_printf_i+0x14c>
 8004bae:	6923      	ldr	r3, [r4, #16]
 8004bb0:	6861      	ldr	r1, [r4, #4]
 8004bb2:	4299      	cmp	r1, r3
 8004bb4:	bfde      	ittt	le
 8004bb6:	2330      	movle	r3, #48	; 0x30
 8004bb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bc0:	1b92      	subs	r2, r2, r6
 8004bc2:	6122      	str	r2, [r4, #16]
 8004bc4:	f8cd a000 	str.w	sl, [sp]
 8004bc8:	464b      	mov	r3, r9
 8004bca:	aa03      	add	r2, sp, #12
 8004bcc:	4621      	mov	r1, r4
 8004bce:	4640      	mov	r0, r8
 8004bd0:	f7ff fee2 	bl	8004998 <_printf_common>
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d14c      	bne.n	8004c72 <_printf_i+0x1fe>
 8004bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bdc:	b004      	add	sp, #16
 8004bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be2:	4835      	ldr	r0, [pc, #212]	; (8004cb8 <_printf_i+0x244>)
 8004be4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	680e      	ldr	r6, [r1, #0]
 8004bec:	061f      	lsls	r7, r3, #24
 8004bee:	f856 5b04 	ldr.w	r5, [r6], #4
 8004bf2:	600e      	str	r6, [r1, #0]
 8004bf4:	d514      	bpl.n	8004c20 <_printf_i+0x1ac>
 8004bf6:	07d9      	lsls	r1, r3, #31
 8004bf8:	bf44      	itt	mi
 8004bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8004bfe:	6023      	strmi	r3, [r4, #0]
 8004c00:	b91d      	cbnz	r5, 8004c0a <_printf_i+0x196>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	f023 0320 	bic.w	r3, r3, #32
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	2310      	movs	r3, #16
 8004c0c:	e7b0      	b.n	8004b70 <_printf_i+0xfc>
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	f043 0320 	orr.w	r3, r3, #32
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	2378      	movs	r3, #120	; 0x78
 8004c18:	4828      	ldr	r0, [pc, #160]	; (8004cbc <_printf_i+0x248>)
 8004c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c1e:	e7e3      	b.n	8004be8 <_printf_i+0x174>
 8004c20:	065e      	lsls	r6, r3, #25
 8004c22:	bf48      	it	mi
 8004c24:	b2ad      	uxthmi	r5, r5
 8004c26:	e7e6      	b.n	8004bf6 <_printf_i+0x182>
 8004c28:	4616      	mov	r6, r2
 8004c2a:	e7bb      	b.n	8004ba4 <_printf_i+0x130>
 8004c2c:	680b      	ldr	r3, [r1, #0]
 8004c2e:	6826      	ldr	r6, [r4, #0]
 8004c30:	6960      	ldr	r0, [r4, #20]
 8004c32:	1d1d      	adds	r5, r3, #4
 8004c34:	600d      	str	r5, [r1, #0]
 8004c36:	0635      	lsls	r5, r6, #24
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	d501      	bpl.n	8004c40 <_printf_i+0x1cc>
 8004c3c:	6018      	str	r0, [r3, #0]
 8004c3e:	e002      	b.n	8004c46 <_printf_i+0x1d2>
 8004c40:	0671      	lsls	r1, r6, #25
 8004c42:	d5fb      	bpl.n	8004c3c <_printf_i+0x1c8>
 8004c44:	8018      	strh	r0, [r3, #0]
 8004c46:	2300      	movs	r3, #0
 8004c48:	6123      	str	r3, [r4, #16]
 8004c4a:	4616      	mov	r6, r2
 8004c4c:	e7ba      	b.n	8004bc4 <_printf_i+0x150>
 8004c4e:	680b      	ldr	r3, [r1, #0]
 8004c50:	1d1a      	adds	r2, r3, #4
 8004c52:	600a      	str	r2, [r1, #0]
 8004c54:	681e      	ldr	r6, [r3, #0]
 8004c56:	6862      	ldr	r2, [r4, #4]
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	f7fb fac0 	bl	80001e0 <memchr>
 8004c60:	b108      	cbz	r0, 8004c66 <_printf_i+0x1f2>
 8004c62:	1b80      	subs	r0, r0, r6
 8004c64:	6060      	str	r0, [r4, #4]
 8004c66:	6863      	ldr	r3, [r4, #4]
 8004c68:	6123      	str	r3, [r4, #16]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c70:	e7a8      	b.n	8004bc4 <_printf_i+0x150>
 8004c72:	6923      	ldr	r3, [r4, #16]
 8004c74:	4632      	mov	r2, r6
 8004c76:	4649      	mov	r1, r9
 8004c78:	4640      	mov	r0, r8
 8004c7a:	47d0      	blx	sl
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d0ab      	beq.n	8004bd8 <_printf_i+0x164>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	079b      	lsls	r3, r3, #30
 8004c84:	d413      	bmi.n	8004cae <_printf_i+0x23a>
 8004c86:	68e0      	ldr	r0, [r4, #12]
 8004c88:	9b03      	ldr	r3, [sp, #12]
 8004c8a:	4298      	cmp	r0, r3
 8004c8c:	bfb8      	it	lt
 8004c8e:	4618      	movlt	r0, r3
 8004c90:	e7a4      	b.n	8004bdc <_printf_i+0x168>
 8004c92:	2301      	movs	r3, #1
 8004c94:	4632      	mov	r2, r6
 8004c96:	4649      	mov	r1, r9
 8004c98:	4640      	mov	r0, r8
 8004c9a:	47d0      	blx	sl
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d09b      	beq.n	8004bd8 <_printf_i+0x164>
 8004ca0:	3501      	adds	r5, #1
 8004ca2:	68e3      	ldr	r3, [r4, #12]
 8004ca4:	9903      	ldr	r1, [sp, #12]
 8004ca6:	1a5b      	subs	r3, r3, r1
 8004ca8:	42ab      	cmp	r3, r5
 8004caa:	dcf2      	bgt.n	8004c92 <_printf_i+0x21e>
 8004cac:	e7eb      	b.n	8004c86 <_printf_i+0x212>
 8004cae:	2500      	movs	r5, #0
 8004cb0:	f104 0619 	add.w	r6, r4, #25
 8004cb4:	e7f5      	b.n	8004ca2 <_printf_i+0x22e>
 8004cb6:	bf00      	nop
 8004cb8:	08004e51 	.word	0x08004e51
 8004cbc:	08004e62 	.word	0x08004e62

08004cc0 <__retarget_lock_acquire_recursive>:
 8004cc0:	4770      	bx	lr

08004cc2 <__retarget_lock_release_recursive>:
 8004cc2:	4770      	bx	lr

08004cc4 <memmove>:
 8004cc4:	4288      	cmp	r0, r1
 8004cc6:	b510      	push	{r4, lr}
 8004cc8:	eb01 0402 	add.w	r4, r1, r2
 8004ccc:	d902      	bls.n	8004cd4 <memmove+0x10>
 8004cce:	4284      	cmp	r4, r0
 8004cd0:	4623      	mov	r3, r4
 8004cd2:	d807      	bhi.n	8004ce4 <memmove+0x20>
 8004cd4:	1e43      	subs	r3, r0, #1
 8004cd6:	42a1      	cmp	r1, r4
 8004cd8:	d008      	beq.n	8004cec <memmove+0x28>
 8004cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ce2:	e7f8      	b.n	8004cd6 <memmove+0x12>
 8004ce4:	4402      	add	r2, r0
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	428a      	cmp	r2, r1
 8004cea:	d100      	bne.n	8004cee <memmove+0x2a>
 8004cec:	bd10      	pop	{r4, pc}
 8004cee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cf6:	e7f7      	b.n	8004ce8 <memmove+0x24>

08004cf8 <_realloc_r>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	4607      	mov	r7, r0
 8004cfc:	4614      	mov	r4, r2
 8004cfe:	460e      	mov	r6, r1
 8004d00:	b921      	cbnz	r1, 8004d0c <_realloc_r+0x14>
 8004d02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d06:	4611      	mov	r1, r2
 8004d08:	f7ff bc54 	b.w	80045b4 <_malloc_r>
 8004d0c:	b922      	cbnz	r2, 8004d18 <_realloc_r+0x20>
 8004d0e:	f7ff fc01 	bl	8004514 <_free_r>
 8004d12:	4625      	mov	r5, r4
 8004d14:	4628      	mov	r0, r5
 8004d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d18:	f000 f814 	bl	8004d44 <_malloc_usable_size_r>
 8004d1c:	42a0      	cmp	r0, r4
 8004d1e:	d20f      	bcs.n	8004d40 <_realloc_r+0x48>
 8004d20:	4621      	mov	r1, r4
 8004d22:	4638      	mov	r0, r7
 8004d24:	f7ff fc46 	bl	80045b4 <_malloc_r>
 8004d28:	4605      	mov	r5, r0
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d0f2      	beq.n	8004d14 <_realloc_r+0x1c>
 8004d2e:	4631      	mov	r1, r6
 8004d30:	4622      	mov	r2, r4
 8004d32:	f7ff fbd9 	bl	80044e8 <memcpy>
 8004d36:	4631      	mov	r1, r6
 8004d38:	4638      	mov	r0, r7
 8004d3a:	f7ff fbeb 	bl	8004514 <_free_r>
 8004d3e:	e7e9      	b.n	8004d14 <_realloc_r+0x1c>
 8004d40:	4635      	mov	r5, r6
 8004d42:	e7e7      	b.n	8004d14 <_realloc_r+0x1c>

08004d44 <_malloc_usable_size_r>:
 8004d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d48:	1f18      	subs	r0, r3, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	bfbc      	itt	lt
 8004d4e:	580b      	ldrlt	r3, [r1, r0]
 8004d50:	18c0      	addlt	r0, r0, r3
 8004d52:	4770      	bx	lr

08004d54 <_init>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	bf00      	nop
 8004d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5a:	bc08      	pop	{r3}
 8004d5c:	469e      	mov	lr, r3
 8004d5e:	4770      	bx	lr

08004d60 <_fini>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	bf00      	nop
 8004d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d66:	bc08      	pop	{r3}
 8004d68:	469e      	mov	lr, r3
 8004d6a:	4770      	bx	lr
